const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1215,\"nextId\":1215,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-184f4da6\",\"2\":\"v-2e3eac9e\",\"3\":\"v-2e3eac9e#幻灯片演示\",\"4\":\"v-2e3eac9e#标注幻灯片\",\"5\":\"v-2e3eac9e#标注幻灯片-1\",\"6\":\"v-2e3eac9e#markdown\",\"7\":\"v-2e3eac9e#markdown-1\",\"8\":\"v-2e3eac9e#这是一个-h3\",\"9\":\"v-2e3eac9e#markdown-2\",\"10\":\"v-2e3eac9e#markdown-3\",\"11\":\"v-2e3eac9e#markdown-4\",\"12\":\"v-2e3eac9e#markdown-5\",\"13\":\"v-2e3eac9e#布局\",\"14\":\"v-2e3eac9e#布局-1\",\"15\":\"v-2e3eac9e#布局-2\",\"16\":\"v-2e3eac9e#布局-3\",\"17\":\"v-2e3eac9e#背景\",\"18\":\"v-2e3eac9e#动画片段\",\"19\":\"v-2e3eac9e#动画片段-1\",\"20\":\"v-2e3eac9e#动画片段-2\",\"21\":\"v-2e3eac9e#动画-class\",\"22\":\"v-2e3eac9e#动画片段-3\",\"23\":\"v-2e3eac9e#动画-class-1\",\"24\":\"v-2e3eac9e#动画片段-4\",\"25\":\"v-2e3eac9e#多个动画片段\",\"26\":\"v-2e3eac9e#动画片段-5\",\"27\":\"v-2e3eac9e#顺序\",\"28\":\"v-2e3eac9e#渐变\",\"29\":\"v-2e3eac9e#渐变-1\",\"30\":\"v-2e3eac9e#渐变-2\",\"31\":\"v-2e3eac9e#过渡动画\",\"32\":\"v-2e3eac9e#功能\",\"33\":\"v-2e3eac9e#功能-1\",\"34\":\"v-2e3eac9e#代码\",\"35\":\"v-2e3eac9e#功能-2\",\"36\":\"v-2e3eac9e#预览模式\",\"37\":\"v-2e3eac9e#功能-3\",\"38\":\"v-2e3eac9e#全屏模式\",\"39\":\"v-2e3eac9e#功能-4\",\"40\":\"v-2e3eac9e#缩放\",\"41\":\"v-2e3eac9e#结束\",\"42\":\"v-1473bf53\",\"43\":\"v-1473bf53#目录\",\"44\":\"v-1473bf53@0\",\"45\":\"v-4e65ec78\",\"46\":\"v-4e65ec78@0\",\"47\":\"v-4e65ec78@1\",\"48\":\"v-c151bf32\",\"49\":\"v-c151bf32@0\",\"50\":\"v-c151bf32@1\",\"51\":\"v-438ffe52\",\"52\":\"v-438ffe52#markdown-介绍\",\"53\":\"v-438ffe52#markdown-配置\",\"54\":\"v-438ffe52#markdown-扩展\",\"55\":\"v-438ffe52#vuepress-扩展\",\"56\":\"v-438ffe52#主题扩展\",\"57\":\"v-438ffe52#提示容器\",\"58\":\"v-438ffe52#代码块\",\"59\":\"v-438ffe52#上下角标\",\"60\":\"v-438ffe52#自定义对齐\",\"61\":\"v-438ffe52#attrs\",\"62\":\"v-438ffe52#脚注\",\"63\":\"v-438ffe52#标记\",\"64\":\"v-438ffe52#任务列表\",\"65\":\"v-438ffe52#图片增强\",\"66\":\"v-438ffe52#组件\",\"67\":\"v-438ffe52#导入文件\",\"68\":\"v-438ffe52#代码演示\",\"69\":\"v-438ffe52#样式化\",\"70\":\"v-438ffe52#交互演示\",\"71\":\"v-438ffe52#图表\",\"72\":\"v-438ffe52#echarts\",\"73\":\"v-438ffe52#流程图\",\"74\":\"v-438ffe52#mermaid\",\"75\":\"v-438ffe52#tex-语法\",\"76\":\"v-438ffe52#vue-交互演示\",\"77\":\"v-438ffe52@0\",\"78\":\"v-438ffe52@1\",\"79\":\"v-6e19edb7\",\"80\":\"v-6e19edb7#页面信息\",\"81\":\"v-6e19edb7#页面内容\",\"82\":\"v-6e19edb7#页面结构\",\"83\":\"v-6e19edb7@0\",\"84\":\"v-6e19edb7@1\",\"85\":\"v-2bc6566a\",\"86\":\"v-2bc6566a#标题-2\",\"87\":\"v-2bc6566a#标题-3\",\"88\":\"v-2bc6566a@0\",\"89\":\"v-2bc6566a@1\",\"90\":\"v-24b7c48d\",\"91\":\"v-24b7c48d#标题-2\",\"92\":\"v-24b7c48d#标题-3\",\"93\":\"v-24b7c48d@0\",\"94\":\"v-24b7c48d@1\",\"95\":\"v-f0ec4556\",\"96\":\"v-f0ec4556#标题-2\",\"97\":\"v-f0ec4556#标题-3\",\"98\":\"v-f0ec4556@0\",\"99\":\"v-f0ec4556@1\",\"100\":\"v-df8b6e0c\",\"101\":\"v-df8b6e0c#标题-2\",\"102\":\"v-df8b6e0c#标题-3\",\"103\":\"v-df8b6e0c@0\",\"104\":\"v-df8b6e0c@1\",\"105\":\"v-26bf74c8\",\"106\":\"v-26bf74c8#协议\",\"107\":\"v-26bf74c8#三方协议\",\"108\":\"v-26bf74c8#租房协议\",\"109\":\"v-26bf74c8#购房协议\",\"110\":\"v-26bf74c8#网络传输中的通讯协议\",\"111\":\"v-26bf74c8#http协议\",\"112\":\"v-26bf74c8#网络模型\",\"113\":\"v-26bf74c8#http协议工作流程\",\"114\":\"v-26bf74c8#http请求\",\"115\":\"v-26bf74c8#请求行\",\"116\":\"v-26bf74c8#请求头\",\"117\":\"v-26bf74c8#空行\",\"118\":\"v-26bf74c8#请求体-存储提交的请求数据\",\"119\":\"v-26bf74c8#http响应\",\"120\":\"v-26bf74c8#响应行\",\"121\":\"v-26bf74c8#响应头\",\"122\":\"v-26bf74c8#空行-1\",\"123\":\"v-26bf74c8#响应体-是存放返回数据的地方\",\"124\":\"v-26bf74c8#请求完整的处理流程-重要\",\"125\":\"v-26bf74c8#https\",\"126\":\"v-26bf74c8#概念\",\"127\":\"v-26bf74c8#手写简易服务器\",\"128\":\"v-26bf74c8#javaee规范\",\"129\":\"v-26bf74c8#tomcat\",\"130\":\"v-26bf74c8#安装\",\"131\":\"v-26bf74c8#启动\",\"132\":\"v-26bf74c8#停止\",\"133\":\"v-26bf74c8#部署资源\",\"134\":\"v-26bf74c8#直接部署\",\"135\":\"v-26bf74c8#虚拟映射\",\"136\":\"v-26bf74c8#conf-catalina-localhost-掌握\",\"137\":\"v-26bf74c8#conf-server-xml-了解\",\"138\":\"v-26bf74c8#原理\",\"139\":\"v-26bf74c8#tomcat设置\",\"140\":\"v-07696030\",\"141\":\"v-07696030#什么是数据库\",\"142\":\"v-07696030#数据库的历史\",\"143\":\"v-07696030#关系型数据库\",\"144\":\"v-07696030#非关系型数据库-nosql\",\"145\":\"v-07696030#软件架构\",\"146\":\"v-07696030#mysql的内部数据组织方式\",\"147\":\"v-07696030#登录数据库\",\"148\":\"v-07696030#查看库\",\"149\":\"v-07696030#创建库\",\"150\":\"v-07696030#删除数据库\",\"151\":\"v-07696030#修改数据库\",\"152\":\"v-07696030#选择数据库\",\"153\":\"v-07696030#创建表\",\"154\":\"v-07696030#删除表\",\"155\":\"v-07696030#查看表\",\"156\":\"v-07696030#修改表\",\"157\":\"v-07696030#关于字符集和校对规则的说明\",\"158\":\"v-07696030#添加数据\",\"159\":\"v-07696030#查询数据\",\"160\":\"v-07696030#修改数据\",\"161\":\"v-07696030#删除数据\",\"162\":\"v-07696030#where-条件\",\"163\":\"v-07696030#distinct-过滤\",\"164\":\"v-07696030#limit-限制结果集\",\"165\":\"v-07696030#as-别名\",\"166\":\"v-07696030#order-by-排序\",\"167\":\"v-07696030#group-by-分组\",\"168\":\"v-07696030#聚合函数\",\"169\":\"v-07696030#实体完整性\",\"170\":\"v-07696030#域完整性\",\"171\":\"v-07696030#参照完整性\",\"172\":\"v-07696030#一对一\",\"173\":\"v-07696030#一对多\",\"174\":\"v-07696030#多对多\",\"175\":\"v-07696030#数据库设计三大范式\",\"176\":\"v-07696030#第一范式\",\"177\":\"v-07696030#第二范式\",\"178\":\"v-07696030#第三范式\",\"179\":\"v-07696030#多表查询\",\"180\":\"v-07696030#连接查询\",\"181\":\"v-07696030#交叉连接\",\"182\":\"v-07696030#内连接\",\"183\":\"v-07696030#外连接\",\"184\":\"v-07696030#子查询\",\"185\":\"v-07696030#联合查询-了解\",\"186\":\"v-07696030#数据库的备份与恢复\",\"187\":\"v-07696030#命令行\",\"188\":\"v-07696030#navicat\",\"189\":\"v-96660dbc\",\"190\":\"v-96660dbc#数据库的访问过程\",\"191\":\"v-96660dbc#jdbc是什么\",\"192\":\"v-96660dbc#第一个jdbc程序\",\"193\":\"v-96660dbc#使用jdbc进行增删改查\",\"194\":\"v-96660dbc#增\",\"195\":\"v-96660dbc#删\",\"196\":\"v-96660dbc#改\",\"197\":\"v-96660dbc#查\",\"198\":\"v-96660dbc#api\",\"199\":\"v-96660dbc#drivermanager\",\"200\":\"v-96660dbc#connection\",\"201\":\"v-96660dbc#statement\",\"202\":\"v-96660dbc#resultset\",\"203\":\"v-96660dbc#jdbc的优化\",\"204\":\"v-96660dbc#数据库注入问题\",\"205\":\"v-96660dbc#for循环逐条插入\",\"206\":\"v-96660dbc#statement批处理\",\"207\":\"v-96660dbc#preparedstatement批处理\",\"208\":\"v-96660dbc#介绍-1\",\"209\":\"v-96660dbc#使用事务\",\"210\":\"v-96660dbc#特性\",\"211\":\"v-96660dbc#隔离级别\",\"212\":\"v-96660dbc#演示\",\"213\":\"v-c15f348a\",\"214\":\"v-c15f348a#dbcp\",\"215\":\"v-c15f348a#c3p0\",\"216\":\"v-c15f348a#druid\",\"217\":\"v-c15f348a#hikaricp\",\"218\":\"v-0c0c68b6\",\"219\":\"v-0c0c68b6#介绍\",\"220\":\"v-0c0c68b6#索引的数据结构\",\"221\":\"v-0c0c68b6#索引的实现\",\"222\":\"v-0c0c68b6#myisam\",\"223\":\"v-0c0c68b6#主键索引\",\"224\":\"v-0c0c68b6#非主键索引\",\"225\":\"v-0c0c68b6#innodb\",\"226\":\"v-0c0c68b6#主键索引-1\",\"227\":\"v-0c0c68b6#非主键索引-1\",\"228\":\"v-0c0c68b6#myisam-与innodb的区别\",\"229\":\"v-0c0c68b6#innodb举例\",\"230\":\"v-0c0c68b6#回表\",\"231\":\"v-0c0c68b6#覆盖索引\",\"232\":\"v-0c0c68b6#索引的语法\",\"233\":\"v-0c0c68b6#面试题\",\"234\":\"v-097a1eff\",\"235\":\"v-097a1eff#动态代理\",\"236\":\"v-097a1eff#增删改查示例\",\"237\":\"v-097a1eff#添加\",\"238\":\"v-097a1eff#删除\",\"239\":\"v-097a1eff#修改\",\"240\":\"v-097a1eff#查询\",\"241\":\"v-097a1eff#事务\",\"242\":\"v-097a1eff#解决方案一\",\"243\":\"v-097a1eff#解决方案二\",\"244\":\"v-097a1eff#解决方案三\",\"245\":\"v-097a1eff#properties\",\"246\":\"v-097a1eff#settings\",\"247\":\"v-097a1eff#typealiases\",\"248\":\"v-097a1eff#environments\",\"249\":\"v-097a1eff#mappers\",\"250\":\"v-097a1eff#一个参数\",\"251\":\"v-097a1eff#多个参数\",\"252\":\"v-097a1eff#对象传值\",\"253\":\"v-097a1eff#使用map传值\",\"254\":\"v-097a1eff#按位置传值\",\"255\":\"v-097a1eff#和-的区别\",\"256\":\"v-097a1eff#注意\",\"257\":\"v-097a1eff#一条结果\",\"258\":\"v-097a1eff#多条结果\",\"259\":\"v-097a1eff#单个对象\",\"260\":\"v-097a1eff#多个对象\",\"261\":\"v-097a1eff#resultmap\",\"262\":\"v-097a1eff#lombok\",\"263\":\"v-097a1eff#mybatiscodehelperpro\",\"264\":\"v-097a1eff#where\",\"265\":\"v-097a1eff#if\",\"266\":\"v-097a1eff#choose-when-otherwise\",\"267\":\"v-097a1eff#sql-include\",\"268\":\"v-097a1eff#trim\",\"269\":\"v-097a1eff#set\",\"270\":\"v-097a1eff#foreach\",\"271\":\"v-097a1eff#批量插入\",\"272\":\"v-097a1eff#使用in查询\",\"273\":\"v-097a1eff#selectkey\",\"274\":\"v-097a1eff#usegeneratedkeys\",\"275\":\"v-097a1eff#一对一结构\",\"276\":\"v-097a1eff#方式一-分次查询\",\"277\":\"v-097a1eff#方式二-连接查询\",\"278\":\"v-097a1eff#一对多结构\",\"279\":\"v-097a1eff#方式一-分次查询-1\",\"280\":\"v-097a1eff#方式二-连接查询-1\",\"281\":\"v-097a1eff#多对多结构\",\"282\":\"v-097a1eff#方式一-分次查询-2\",\"283\":\"v-097a1eff#方式二-连接查询-2\",\"284\":\"v-097a1eff#一级缓存\",\"285\":\"v-097a1eff#测试\",\"286\":\"v-097a1eff#二级缓存\",\"287\":\"v-097a1eff#测试-1\",\"288\":\"v-a7699924\",\"289\":\"v-a7699924#java基础\",\"290\":\"v-a7699924#method\",\"291\":\"v-a7699924#数组\",\"292\":\"v-a7699924#面向对象1\",\"293\":\"v-a7699924#面向对象2\",\"294\":\"v-a7699924#面向对象3\",\"295\":\"v-a7699924#string\",\"296\":\"v-a7699924#exception\",\"297\":\"v-a7699924#字符流\",\"298\":\"v-a7699924#字节流\",\"299\":\"v-a7699924#thread\",\"300\":\"v-a7699924#network\",\"301\":\"v-a7699924#reflect\",\"302\":\"v-78c76c5a\",\"303\":\"v-78c76c5a#java语言的应用领域\",\"304\":\"v-78c76c5a#jdk与jre\",\"305\":\"v-78c76c5a#jdk使用\",\"306\":\"v-78c76c5a#下载安装\",\"307\":\"v-78c76c5a#配置\",\"308\":\"v-78c76c5a#第一个java程序\",\"309\":\"v-78c76c5a#java程序的运行机制\",\"310\":\"v-498c49c6\",\"311\":\"v-498c49c6#关键字\",\"312\":\"v-498c49c6#常见关键字\",\"313\":\"v-498c49c6#保留字\",\"314\":\"v-498c49c6#什么是标识符\",\"315\":\"v-498c49c6#组成规则\",\"316\":\"v-498c49c6#命名规范\",\"317\":\"v-498c49c6#什么是注释\",\"318\":\"v-498c49c6#注释的格式\",\"319\":\"v-498c49c6#注释的意义\",\"320\":\"v-498c49c6#数据类型\",\"321\":\"v-498c49c6#基本数据类型\",\"322\":\"v-498c49c6#整型\",\"323\":\"v-498c49c6#浮点型\",\"324\":\"v-498c49c6#字符型\",\"325\":\"v-498c49c6#布尔类型\",\"326\":\"v-498c49c6#数值基本类型的取值范围\",\"327\":\"v-498c49c6#引用数据类型\",\"328\":\"v-498c49c6#常量\",\"329\":\"v-498c49c6#变量\",\"330\":\"v-498c49c6#变量定义\",\"331\":\"v-498c49c6#局部变量\",\"332\":\"v-498c49c6#局部变量的使用\",\"333\":\"v-498c49c6#局部变量声明\",\"334\":\"v-498c49c6#初始化局部变量\",\"335\":\"v-498c49c6#局部变量的作用域\",\"336\":\"v-498c49c6#注意事项\",\"337\":\"v-498c49c6#变量的类型转换\",\"338\":\"v-498c49c6#自动类型转换\",\"339\":\"v-498c49c6#强制类型转换\",\"340\":\"v-498c49c6#表达式类型提升\",\"341\":\"v-498c49c6#小结\",\"342\":\"v-498c49c6#整数常量的特殊性\",\"343\":\"v-498c49c6#运算符分类\",\"344\":\"v-498c49c6#算术运算符\",\"345\":\"v-498c49c6#赋值运算符\",\"346\":\"v-498c49c6#比较运算符\",\"347\":\"v-498c49c6#逻辑运算符\",\"348\":\"v-498c49c6#位运算符-了解\",\"349\":\"v-498c49c6#三目运算符\",\"350\":\"v-498c49c6#运算符的优先级\",\"351\":\"v-498c49c6#概述\",\"352\":\"v-498c49c6#使用步骤\",\"353\":\"v-498c49c6#原因\",\"354\":\"v-498c49c6#练习\",\"355\":\"v-498c49c6#概述-1\",\"356\":\"v-498c49c6#常见的转义字符\",\"357\":\"v-498c49c6#选择结构\",\"358\":\"v-498c49c6#if语句\",\"359\":\"v-498c49c6#switch语句\",\"360\":\"v-498c49c6#怎么选择if和switch\",\"361\":\"v-498c49c6#循环结构\",\"362\":\"v-498c49c6#for循环\",\"363\":\"v-498c49c6#while循环\",\"364\":\"v-498c49c6#do-while循环\",\"365\":\"v-498c49c6#两种特殊的循环\",\"366\":\"v-498c49c6#死循环\",\"367\":\"v-498c49c6#嵌套循序\",\"368\":\"v-498c49c6#-1\",\"369\":\"v-498c49c6#-2\",\"370\":\"v-498c49c6#-3\",\"371\":\"v-498c49c6#-5\",\"372\":\"v-498c49c6#-6\",\"373\":\"v-498c49c6#-7\",\"374\":\"v-498c49c6#-8\",\"375\":\"v-498c49c6#跳转控制关键字\",\"376\":\"v-498c49c6#break\",\"377\":\"v-498c49c6#continue\",\"378\":\"v-498c49c6#return\",\"379\":\"v-51c2a95c\",\"380\":\"v-51c2a95c#引入\",\"381\":\"v-51c2a95c#方法的基本使用\",\"382\":\"v-51c2a95c#方法的定义\",\"383\":\"v-51c2a95c#方法的调用\",\"384\":\"v-51c2a95c#使用细节\",\"385\":\"v-51c2a95c#main-方法详解\",\"386\":\"v-51c2a95c#练习\",\"387\":\"v-51c2a95c#引入-1\",\"388\":\"v-51c2a95c#语法要求\",\"389\":\"v-51c2a95c#实参的自动类型转换在重载中的应用\",\"390\":\"v-51c2a95c#练习-1\",\"391\":\"v-21c1270e\",\"392\":\"v-21c1270e#引入\",\"393\":\"v-21c1270e#定义\",\"394\":\"v-21c1270e#数组的随机访问与数组的优缺点\",\"395\":\"v-21c1270e#数组的声明\",\"396\":\"v-21c1270e#数组的初始化\",\"397\":\"v-21c1270e#静态初始化\",\"398\":\"v-21c1270e#动态初始化\",\"399\":\"v-21c1270e#数组的基本操作\",\"400\":\"v-21c1270e#数组的访问\",\"401\":\"v-21c1270e#元素的赋值\",\"402\":\"v-21c1270e#获取数组长度\",\"403\":\"v-21c1270e#划分\",\"404\":\"v-21c1270e#引申\",\"405\":\"v-21c1270e#什么是引用数据类型\",\"406\":\"v-21c1270e#基本数据类型与引用数据类型有什么区别\",\"407\":\"v-21c1270e#堆和栈中内容的区别\",\"408\":\"v-21c1270e#对象中元素的默认初始化\",\"409\":\"v-21c1270e#练习\",\"410\":\"v-21c1270e#异常的简单介绍\",\"411\":\"v-21c1270e#数组下标越界异常\",\"412\":\"v-21c1270e#空指针异常\",\"413\":\"v-21c1270e#长度为0的数组\",\"414\":\"v-21c1270e#数组的遍历\",\"415\":\"v-21c1270e#手写实现\",\"416\":\"v-21c1270e#jdk自带数组遍历实现\",\"417\":\"v-21c1270e#增强for循环遍历数组\",\"418\":\"v-21c1270e#获取数组中的最值\",\"419\":\"v-21c1270e#数组的逆序\",\"420\":\"v-21c1270e#数组元素的增删改查\",\"421\":\"v-21c1270e#数组的拷贝\",\"422\":\"v-21c1270e#基本使用\",\"423\":\"v-21c1270e#注意事项\",\"424\":\"v-21c1270e#基本概念\",\"425\":\"v-21c1270e#java值传递\",\"426\":\"v-21c1270e#证明java值传递\",\"427\":\"v-21c1270e#java方法对方法参数能做什么\",\"428\":\"v-21c1270e#二维数组的基本概念\",\"429\":\"v-21c1270e#二维数组的引入\",\"430\":\"v-21c1270e#二维数组的本质\",\"431\":\"v-21c1270e#二维数组的理解\",\"432\":\"v-21c1270e#二维数组的声明和初始化\",\"433\":\"v-21c1270e#声明\",\"434\":\"v-21c1270e#初始化\",\"435\":\"v-21c1270e#二维数组的基本操作\",\"436\":\"v-21c1270e#数组长度\",\"437\":\"v-21c1270e#访问一维数组\",\"438\":\"v-21c1270e#元素的访问\",\"439\":\"v-21c1270e#进阶操作\",\"440\":\"v-21c1270e#数组遍历\",\"441\":\"v-21c1270e#杨辉三角\",\"442\":\"v-432090da\",\"443\":\"v-ed4455b6\",\"444\":\"v-ed4455b6#引例\",\"445\":\"v-ed4455b6#对象的概念\",\"446\":\"v-ed4455b6#类的概念\",\"447\":\"v-ed4455b6#类与对象的关系\",\"448\":\"v-ed4455b6#类的定义\",\"449\":\"v-ed4455b6#定义一个类\",\"450\":\"v-ed4455b6#定义类中的成员\",\"451\":\"v-ed4455b6#对象的创建与使用\",\"452\":\"v-ed4455b6#创建\",\"453\":\"v-ed4455b6#使用\",\"454\":\"v-ed4455b6#注意事项\",\"455\":\"v-ed4455b6#基本概念\",\"456\":\"v-ed4455b6#类加载介绍\",\"457\":\"v-ed4455b6#两者的区别\",\"458\":\"v-ed4455b6#成员变量的赋值\",\"459\":\"v-ed4455b6#引例-1\",\"460\":\"v-ed4455b6#概念\",\"461\":\"v-ed4455b6#this关键字的作用\",\"462\":\"v-ed4455b6#注意事项-1\",\"463\":\"v-ed4455b6#引例-2\",\"464\":\"v-ed4455b6#构造器语法\",\"465\":\"v-ed4455b6#构造器作用与使用\",\"466\":\"v-ed4455b6#注意事项与使用细节\",\"467\":\"v-ed4455b6#构造器的赋值顺序\",\"468\":\"v-ed4455b6#对象创建流程\",\"469\":\"v-ed4455b6#对象与类\",\"470\":\"v-ed4455b6#值传递练习\",\"471\":\"v-ed4455b6#成员变量赋值顺序练习\",\"472\":\"v-ed4455b6#引例-3\",\"473\":\"v-ed4455b6#静态成员\",\"474\":\"v-ed4455b6#静态成员变量\",\"475\":\"v-ed4455b6#静态成员方法\",\"476\":\"v-ed4455b6#类加载时机\",\"477\":\"v-ed4455b6#static-vs-非static\",\"478\":\"v-ed4455b6#使用场景\",\"479\":\"v-ed4455b6#static执行顺序练习\",\"480\":\"v-ed4455b6#什么是匿名对象\",\"481\":\"v-ed4455b6#匿名对象的用途\",\"482\":\"v-ed4455b6#匿名对象的优缺点\",\"483\":\"v-ed4455b6#匿名对象使用场景\",\"484\":\"v-ed4455b6#概述\",\"485\":\"v-ed4455b6#构造代码块\",\"486\":\"v-ed4455b6#语法定义\",\"487\":\"v-ed4455b6#作用\",\"488\":\"v-ed4455b6#原理\",\"489\":\"v-ed4455b6#创建对象过程中的执行顺序\",\"490\":\"v-ed4455b6#实际用途\",\"491\":\"v-ed4455b6#练习\",\"492\":\"v-ed4455b6#静态代码块\",\"493\":\"v-ed4455b6#语法定义-1\",\"494\":\"v-ed4455b6#作用-1\",\"495\":\"v-ed4455b6#实际用途-1\",\"496\":\"v-ed4455b6#注意事项-2\",\"497\":\"v-ed4455b6#补充类加载过程\",\"498\":\"v-ed4455b6#练习-1\",\"499\":\"v-ed4455b6#package关键字\",\"500\":\"v-ed4455b6#全限定类名\",\"501\":\"v-ed4455b6#import关键字\",\"502\":\"v-ed4455b6#引例-4\",\"503\":\"v-ed4455b6#作用-2\",\"504\":\"v-ed4455b6#智能导入\",\"505\":\"v-ed4455b6#概述-1\",\"506\":\"v-ed4455b6#访问级别\",\"507\":\"v-ed4455b6#分类\",\"508\":\"v-ed4455b6#类的访问权限修饰符\",\"509\":\"v-ed4455b6#类中结构的访问权限修饰符\",\"510\":\"v-ed4455b6#作用-3\",\"511\":\"v-51c0dec7\",\"512\":\"v-51c0dec7#封装\",\"513\":\"v-51c0dec7#继承\",\"514\":\"v-51c0dec7#多态\",\"515\":\"v-51c0dec7#概述-1\",\"516\":\"v-51c0dec7#封装实现步骤\",\"517\":\"v-51c0dec7#封装练习\",\"518\":\"v-51c0dec7#注意事项\",\"519\":\"v-51c0dec7#引例\",\"520\":\"v-51c0dec7#语法定义\",\"521\":\"v-51c0dec7#继承中两个类的关系\",\"522\":\"v-51c0dec7#两个类的命名\",\"523\":\"v-51c0dec7#从属关系-重点\",\"524\":\"v-51c0dec7#引用数据类型的类型转换-重点\",\"525\":\"v-51c0dec7#引用数据类型转换的前提\",\"526\":\"v-51c0dec7#转换的是什么\",\"527\":\"v-51c0dec7#引用数据类型转换分类\",\"528\":\"v-51c0dec7#自动类型转换\",\"529\":\"v-51c0dec7#强制类型转换\",\"530\":\"v-51c0dec7#继承的优缺点\",\"531\":\"v-51c0dec7#继承的层次-重点\",\"532\":\"v-51c0dec7#单继承\",\"533\":\"v-51c0dec7#继承层级\",\"534\":\"v-51c0dec7#protected访问权限\",\"535\":\"v-51c0dec7#怎么理解不同包子类能够访问\",\"536\":\"v-51c0dec7#结论\",\"537\":\"v-51c0dec7#为什么设置protectd访问权限\",\"538\":\"v-51c0dec7#经典案例\",\"539\":\"v-51c0dec7#继承的限制\",\"540\":\"v-51c0dec7#子类对象的初始化-重点\",\"541\":\"v-51c0dec7#子类对象初始化流程\",\"542\":\"v-51c0dec7#隐式子类对象初始化\",\"543\":\"v-51c0dec7#显示子类对象初始化\",\"544\":\"v-51c0dec7#super关键字\",\"545\":\"v-51c0dec7#练习\",\"546\":\"v-51c0dec7#总结\",\"547\":\"v-51c0dec7#继承中的属性隐藏\",\"548\":\"v-51c0dec7#引例-1\",\"549\":\"v-51c0dec7#对象名-成员变量的访问机制\",\"550\":\"v-51c0dec7#属性隐藏\",\"551\":\"v-51c0dec7#访问范围机制\",\"552\":\"v-51c0dec7#访问结果机制\",\"553\":\"v-51c0dec7#总结-1\",\"554\":\"v-51c0dec7#继承中的方法覆盖\",\"555\":\"v-51c0dec7#引例-2\",\"556\":\"v-51c0dec7#对象名-成员方法的访问机制\",\"557\":\"v-51c0dec7#访问范围机制-1\",\"558\":\"v-51c0dec7#访问结果机制-1\",\"559\":\"v-51c0dec7#总结-2\",\"560\":\"v-51c0dec7#方法的覆盖-重写\",\"561\":\"v-51c0dec7#语法\",\"562\":\"v-51c0dec7#注意事项-1\",\"563\":\"v-51c0dec7#方法重写-vs-方法重载\",\"564\":\"v-51c0dec7#练习-1\",\"565\":\"v-51c0dec7#final关键字\",\"566\":\"v-51c0dec7#final修饰类\",\"567\":\"v-51c0dec7#final修饰方法\",\"568\":\"v-51c0dec7#final修饰变量\",\"569\":\"v-51c0dec7#修饰局部变量\",\"570\":\"v-51c0dec7#修饰成员变量\",\"571\":\"v-51c0dec7#修饰静态成员变量\",\"572\":\"v-51c0dec7#修饰引用数类型\",\"573\":\"v-51c0dec7#练习-2\",\"574\":\"v-51c0dec7#概述-2\",\"575\":\"v-51c0dec7#基本概念\",\"576\":\"v-51c0dec7#多态的发生条件\",\"577\":\"v-51c0dec7#不能发生多态的场景\",\"578\":\"v-51c0dec7#多态的访问特征\",\"579\":\"v-51c0dec7#成员变量\",\"580\":\"v-51c0dec7#成员方法\",\"581\":\"v-51c0dec7#多态的优缺点\",\"582\":\"v-51c0dec7#优点\",\"583\":\"v-51c0dec7#缺点\",\"584\":\"v-51c0dec7#引用数据类型的强制类型转换\",\"585\":\"v-51c0dec7#前提\",\"586\":\"v-51c0dec7#instanceof关键字\",\"587\":\"v-51c0dec7#总结-3\",\"588\":\"v-51c0dec7#多态练习\",\"589\":\"v-a1cbea1c\",\"590\":\"v-a1cbea1c#引例\",\"591\":\"v-a1cbea1c#定义\",\"592\":\"v-a1cbea1c#特点与使用\",\"593\":\"v-a1cbea1c#注意事项\",\"594\":\"v-a1cbea1c#练习\",\"595\":\"v-a1cbea1c#引例-1\",\"596\":\"v-a1cbea1c#定义-1\",\"597\":\"v-a1cbea1c#优点\",\"598\":\"v-a1cbea1c#特点和使用\",\"599\":\"v-a1cbea1c#extends-vs-implements\",\"600\":\"v-a1cbea1c#默认方法和静态方法\",\"601\":\"v-a1cbea1c#练习-1\",\"602\":\"v-a1cbea1c#方法的形参和返回值类型\",\"603\":\"v-a1cbea1c#方法传值\",\"604\":\"v-a1cbea1c#方法的返回值\",\"605\":\"v-a1cbea1c#方法重写中的返回值类型问题\",\"606\":\"v-a1cbea1c#链式调用\",\"607\":\"v-a1cbea1c#引例-2\",\"608\":\"v-a1cbea1c#定义与分类\",\"609\":\"v-a1cbea1c#成员内部类\",\"610\":\"v-a1cbea1c#自身特点\",\"611\":\"v-a1cbea1c#访问权限修饰符\",\"612\":\"v-a1cbea1c#成员特点\",\"613\":\"v-a1cbea1c#继承和实现\",\"614\":\"v-a1cbea1c#成员内部类的访问特点\",\"615\":\"v-a1cbea1c#成员内部类内部访问外部类-重点\",\"616\":\"v-a1cbea1c#外部类访问成员内部类成员-重点\",\"617\":\"v-a1cbea1c#外部其他类访问成员内部类成员-了解\",\"618\":\"v-a1cbea1c#成员内部类访问外部其他类成员-了解\",\"619\":\"v-a1cbea1c#练习-2\",\"620\":\"v-a1cbea1c#静态内部类\",\"621\":\"v-a1cbea1c#自身特点-1\",\"622\":\"v-a1cbea1c#访问权限修饰符-1\",\"623\":\"v-a1cbea1c#成员特点-1\",\"624\":\"v-a1cbea1c#继承和实现-1\",\"625\":\"v-a1cbea1c#总结\",\"626\":\"v-a1cbea1c#静态内部类访问特点\",\"627\":\"v-a1cbea1c#静态内部类内部访问外部类\",\"628\":\"v-a1cbea1c#外部类访问静态内部类成员\",\"629\":\"v-a1cbea1c#外部其他类访问静态内部类成员\",\"630\":\"v-a1cbea1c#静态内部类访问外部其他类成员\",\"631\":\"v-a1cbea1c#注意事项-1\",\"632\":\"v-a1cbea1c#练习-3\",\"633\":\"v-a1cbea1c#局部内部类\",\"634\":\"v-a1cbea1c#自身特点-2\",\"635\":\"v-a1cbea1c#访问权限修饰符-2\",\"636\":\"v-a1cbea1c#成员特点-2\",\"637\":\"v-a1cbea1c#继承和实现-2\",\"638\":\"v-a1cbea1c#局部内部类的访问特点\",\"639\":\"v-a1cbea1c#局部内部类在外部类的成员方法中\",\"640\":\"v-a1cbea1c#局部内部类在外部类的静态成员方法中\",\"641\":\"v-a1cbea1c#局部内部类的经典使用\",\"642\":\"v-a1cbea1c#注意事项-2\",\"643\":\"v-a1cbea1c#内部类的优缺点和使用场景\",\"644\":\"v-a1cbea1c#内部类对象\",\"645\":\"v-a1cbea1c#概述\",\"646\":\"v-a1cbea1c#匿名内部类\",\"647\":\"v-a1cbea1c#语法\",\"648\":\"v-a1cbea1c#基本使用\",\"649\":\"v-a1cbea1c#使用场景\",\"650\":\"v-a1cbea1c#练习-4\",\"651\":\"v-a1cbea1c#lambda表达式\",\"652\":\"v-a1cbea1c#使用前提\",\"653\":\"v-a1cbea1c#基本使用-1\",\"654\":\"v-a1cbea1c#进阶使用和简化\",\"655\":\"v-a1cbea1c#方法引用\",\"656\":\"v-a1cbea1c#注意事项-3\",\"657\":\"v-a1cbea1c#优缺点\",\"658\":\"v-0141ea0a\",\"659\":\"v-0141ea0a#getclass方法\",\"660\":\"v-0141ea0a#方法的声明\",\"661\":\"v-0141ea0a#作用\",\"662\":\"v-0141ea0a#class对象\",\"663\":\"v-0141ea0a#注意事项\",\"664\":\"v-0141ea0a#tostring方法\",\"665\":\"v-0141ea0a#方法的声明-1\",\"666\":\"v-0141ea0a#文档解释\",\"667\":\"v-0141ea0a#tostring的默认实现\",\"668\":\"v-0141ea0a#作用-1\",\"669\":\"v-0141ea0a#注意事项-1\",\"670\":\"v-0141ea0a#equals方法\",\"671\":\"v-0141ea0a#方法的声明-2\",\"672\":\"v-0141ea0a#作用-2\",\"673\":\"v-0141ea0a#equals默认实现\",\"674\":\"v-0141ea0a#重写equals方法的注意事项\",\"675\":\"v-0141ea0a#重写equals方法的注意事项-1\",\"676\":\"v-0141ea0a#hashcode方法\",\"677\":\"v-0141ea0a#方法的声明-3\",\"678\":\"v-0141ea0a#方法的作用\",\"679\":\"v-0141ea0a#哈希的概念\",\"680\":\"v-0141ea0a#哈希表\",\"681\":\"v-0141ea0a#默认实现\",\"682\":\"v-0141ea0a#方法的重写\",\"683\":\"v-0141ea0a#如何重写\",\"684\":\"v-0141ea0a#为什么要同时重写hashcode和equals方法\",\"685\":\"v-0141ea0a#注意事项-2\",\"686\":\"v-0141ea0a#finalize方法-了解\",\"687\":\"v-0141ea0a#方法的声明-4\",\"688\":\"v-0141ea0a#方法的作用-1\",\"689\":\"v-0141ea0a#对象资源占用的情况\",\"690\":\"v-0141ea0a#测试finalize方法\",\"691\":\"v-0141ea0a#clone方法\",\"692\":\"v-0141ea0a#方法的声明-5\",\"693\":\"v-0141ea0a#方法的作用-2\",\"694\":\"v-0141ea0a#方法使用步骤\",\"695\":\"v-0141ea0a#克隆使用中的细节问题\",\"696\":\"v-0141ea0a#cloneable接口\",\"697\":\"v-0141ea0a#创建对象的方式\",\"698\":\"v-0141ea0a#方法体的重写\",\"699\":\"v-0141ea0a#深度克隆\",\"700\":\"v-399edb32\",\"701\":\"v-399edb32#定义\",\"702\":\"v-399edb32#包装类型特点\",\"703\":\"v-399edb32#基本数据类型与包装类型的相互转换\",\"704\":\"v-399edb32#包装类型和string类型的相互转换\",\"705\":\"v-399edb32#包装类的常用方法\",\"706\":\"v-399edb32#integer的缓存机制\",\"707\":\"v-399edb32#integer的一些面试问题\",\"708\":\"v-399edb32#注意事项\",\"709\":\"v-399edb32#整型包装类型对象相等的比较\",\"710\":\"v-399edb32#浮点型包装类型对象相等的比较\",\"711\":\"v-399edb32#布尔型对象相等的比较\",\"712\":\"v-399edb32#使用场景\",\"713\":\"v-399edb32#引入\",\"714\":\"v-399edb32#枚举的两种实现方式\",\"715\":\"v-399edb32#自定义类实现枚举\",\"716\":\"v-399edb32#使用enum关键字实现枚举\",\"717\":\"v-399edb32#语法\",\"718\":\"v-399edb32#基本使用\",\"719\":\"v-399edb32#原理-了解\",\"720\":\"v-399edb32#练习\",\"721\":\"v-399edb32#使用枚举的场景\",\"722\":\"v-399edb32#时间戳\",\"723\":\"v-399edb32#构造方法\",\"724\":\"v-399edb32#成员方法\",\"725\":\"v-399edb32#构造方法-1\",\"726\":\"v-399edb32#成员方法-1\",\"727\":\"v-6121f60f\",\"728\":\"v-6121f60f#基本介绍\",\"729\":\"v-6121f60f#构造方法\",\"730\":\"v-6121f60f#string对象不可变\",\"731\":\"v-6121f60f#字符串常量池\",\"732\":\"v-6121f60f#string两种实例化方式\",\"733\":\"v-6121f60f#字符串常见问题与练习\",\"734\":\"v-6121f60f#字符串比较\",\"735\":\"v-6121f60f#字符串拼接\",\"736\":\"v-6121f60f#判断功能\",\"737\":\"v-6121f60f#获取功能\",\"738\":\"v-6121f60f#转换功能\",\"739\":\"v-6121f60f#其他功能\",\"740\":\"v-6121f60f#comparable接口\",\"741\":\"v-6121f60f#comparator接口\",\"742\":\"v-6121f60f#stringbuffer构造方法\",\"743\":\"v-6121f60f#stringbuffer成员方法\",\"744\":\"v-6121f60f#常见问题\",\"745\":\"v-0e858ccc\",\"746\":\"v-0e858ccc#什么是异常\",\"747\":\"v-0e858ccc#异常体系与分类\",\"748\":\"v-0e858ccc#常见异常\",\"749\":\"v-0e858ccc#jvm默认处理机制\",\"750\":\"v-0e858ccc#捕获异常-自己处理\",\"751\":\"v-0e858ccc#try-catch\",\"752\":\"v-0e858ccc#单分支\",\"753\":\"v-0e858ccc#捕获异常信息\",\"754\":\"v-0e858ccc#多分支\",\"755\":\"v-0e858ccc#抛出异常-上层处理\",\"756\":\"v-0e858ccc#throws关键字\",\"757\":\"v-0e858ccc#throw关键字\",\"758\":\"v-0e858ccc#throws-vs-throw\",\"759\":\"v-0e858ccc#异常策略选择\",\"760\":\"v-0e858ccc#finally\",\"761\":\"v-0e858ccc#为什么要自定义异常\",\"762\":\"v-0e858ccc#如何自定义异常\",\"763\":\"v-0e858ccc#自定义编译时异常\",\"764\":\"v-0e858ccc#自定义运行时异常\",\"765\":\"v-4f722274\",\"766\":\"v-4f722274#为什么要学习file类\",\"767\":\"v-4f722274#相对路径与绝对路径\",\"768\":\"v-4f722274#不同系统的路径表示\",\"769\":\"v-4f722274#构造方法\",\"770\":\"v-4f722274#成员方法\",\"771\":\"v-4f722274#创建功能\",\"772\":\"v-4f722274#重命名功能\",\"773\":\"v-4f722274#删除功能\",\"774\":\"v-4f722274#判断功能\",\"775\":\"v-4f722274#基本获取功能\",\"776\":\"v-4f722274#高级获取功能\",\"777\":\"v-4f722274#文件过滤器\",\"778\":\"v-723cd2bd\",\"779\":\"v-723cd2bd#什么是io\",\"780\":\"v-723cd2bd#为什么有io\",\"781\":\"v-723cd2bd#java中如何实现io功能\",\"782\":\"v-723cd2bd#io的分类\",\"783\":\"v-723cd2bd#_4个抽象基类\",\"784\":\"v-723cd2bd#什么时候用什么流\",\"785\":\"v-723cd2bd#字节输出流\",\"786\":\"v-723cd2bd#抽象基类outputstream\",\"787\":\"v-723cd2bd#具体子类\",\"788\":\"v-723cd2bd#fileoutputstream文件字节输出流\",\"789\":\"v-723cd2bd#注意事项\",\"790\":\"v-723cd2bd#bufferedoutputstream缓冲字节输出流\",\"791\":\"v-723cd2bd#字节输入流\",\"792\":\"v-723cd2bd#抽象基类inputstream\",\"793\":\"v-723cd2bd#具体子类-1\",\"794\":\"v-723cd2bd#fileinputstream文件字节输入流\",\"795\":\"v-723cd2bd#bufferedinputstream缓冲字节输入流\",\"796\":\"v-723cd2bd#文件复制功能\",\"797\":\"v-723cd2bd#为什么有字符流\",\"798\":\"v-723cd2bd#一个字符是如何存在计算机中的\",\"799\":\"v-723cd2bd#编码表\",\"800\":\"v-723cd2bd#编解码\",\"801\":\"v-723cd2bd#java中的编解码\",\"802\":\"v-723cd2bd#字符流的本质\",\"803\":\"v-723cd2bd#字符输出流\",\"804\":\"v-723cd2bd#抽象基类writer\",\"805\":\"v-723cd2bd#具体子类-2\",\"806\":\"v-723cd2bd#outputstreamwriter转换流\",\"807\":\"v-723cd2bd#filewriter简化流\",\"808\":\"v-723cd2bd#bufferedwriter缓冲流\",\"809\":\"v-723cd2bd#字符输入流\",\"810\":\"v-723cd2bd#抽象基类reader\",\"811\":\"v-723cd2bd#具体子类-3\",\"812\":\"v-723cd2bd#inputstreamreader转换流\",\"813\":\"v-723cd2bd#filereader简化流\",\"814\":\"v-723cd2bd#bufferedreader缓冲流\",\"815\":\"v-723cd2bd#数据流\",\"816\":\"v-723cd2bd#dataoutputstream数据输出流\",\"817\":\"v-723cd2bd#datainputstream数据输入流\",\"818\":\"v-723cd2bd#打印流\",\"819\":\"v-723cd2bd#printstream字节打印流\",\"820\":\"v-723cd2bd#printwriter字符打印流\",\"821\":\"v-723cd2bd#标准输入输出流\",\"822\":\"v-723cd2bd#对象流-序列化与反序列化流\",\"823\":\"v-723cd2bd#objectoutputstream序列化流\",\"824\":\"v-723cd2bd#objectinputstream反序列化流\",\"825\":\"v-09cfa0c4\",\"826\":\"v-09cfa0c4#进程-process-与线程-thread\",\"827\":\"v-09cfa0c4#串行-serial-并行-parallel-与并发-concurrency\",\"828\":\"v-09cfa0c4#同步-synchronization-与异步-asynchronization\",\"829\":\"v-09cfa0c4#java命令-主类类名运行原理\",\"830\":\"v-09cfa0c4#jvm是单线程还是多线程的\",\"831\":\"v-09cfa0c4#文档示例\",\"832\":\"v-09cfa0c4#步骤\",\"833\":\"v-09cfa0c4#注意事项\",\"834\":\"v-09cfa0c4#什么是线程调度\",\"835\":\"v-09cfa0c4#调度方式的分类\",\"836\":\"v-09cfa0c4#java中采用哪种调度方式\",\"837\":\"v-09cfa0c4#操作系统优先级\",\"838\":\"v-09cfa0c4#java中优先级\",\"839\":\"v-09cfa0c4#线程休眠sleep\",\"840\":\"v-09cfa0c4#线程合并join\",\"841\":\"v-09cfa0c4#线程礼让yield\",\"842\":\"v-09cfa0c4#守护线程setdaemon\",\"843\":\"v-09cfa0c4#线程中断stop-已过时-了解\",\"844\":\"v-09cfa0c4#安全中断线程\",\"845\":\"v-09cfa0c4#线程的几种状态\",\"846\":\"v-09cfa0c4#理论层面的状态\",\"847\":\"v-09cfa0c4#代码层面的状态\",\"848\":\"v-09cfa0c4#线程状态的转换\",\"849\":\"v-09cfa0c4#文档示例-1\",\"850\":\"v-09cfa0c4#步骤-1\",\"851\":\"v-09cfa0c4#为什么runnable中的run方法会运行在子线程中\",\"852\":\"v-09cfa0c4#造成的现象\",\"853\":\"v-09cfa0c4#产生原因\",\"854\":\"v-09cfa0c4#synchronized\",\"855\":\"v-09cfa0c4#同步代码块\",\"856\":\"v-09cfa0c4#同步方法\",\"857\":\"v-09cfa0c4#静态同步方法\",\"858\":\"v-09cfa0c4#synchronized的细节\",\"859\":\"v-09cfa0c4#执行流程\",\"860\":\"v-09cfa0c4#出现异常会释放锁\",\"861\":\"v-09cfa0c4#_1个对象的内存布局\",\"862\":\"v-09cfa0c4#_2条字节码指令-monitorenter-monitorexit\",\"863\":\"v-09cfa0c4#lock\",\"864\":\"v-09cfa0c4#reentrantlock可重入锁\",\"865\":\"v-09cfa0c4#什么是死锁\",\"866\":\"v-09cfa0c4#死锁产生的场景\",\"867\":\"v-09cfa0c4#怎么解决死锁\",\"868\":\"v-09cfa0c4#wait与notify机制\",\"869\":\"v-09cfa0c4#wait\",\"870\":\"v-09cfa0c4#执行条件与特点\",\"871\":\"v-09cfa0c4#验证wait释放锁\",\"872\":\"v-09cfa0c4#wait与notify的基本使用\",\"873\":\"v-09cfa0c4#sleep-vs-wait\",\"874\":\"v-09cfa0c4#notify\",\"875\":\"v-09cfa0c4#notifyall\",\"876\":\"v-09cfa0c4#为什么wait-notify-notifyall方法不定义在thread类中\",\"877\":\"v-09cfa0c4#理论层面\",\"878\":\"v-09cfa0c4#代码层面\",\"879\":\"v-09cfa0c4#线程池\",\"880\":\"v-09cfa0c4#_3种线程池\",\"881\":\"v-09cfa0c4#多线程的实现方式三-实现callable接口\",\"882\":\"v-09cfa0c4#定时器与定时任务\",\"883\":\"v-09cfa0c4#定时器timer\",\"884\":\"v-09cfa0c4#定时任务timertask\",\"885\":\"v-dd97714c\",\"886\":\"v-dd97714c#传输原理\",\"887\":\"v-dd97714c#发送端步骤\",\"888\":\"v-dd97714c#接收端步骤\",\"889\":\"v-dd97714c#datagramsocket\",\"890\":\"v-dd97714c#datagrampacket\",\"891\":\"v-dd97714c#案例\",\"892\":\"v-dd97714c#v1-发送端发送消息-接收端接收并打印\",\"893\":\"v-dd97714c#v2-使用工具类优化v1\",\"894\":\"v-dd97714c#v3-发送端接收端相互发送\",\"895\":\"v-dd97714c#v4-使用多线程优化v3\",\"896\":\"v-dd97714c#传输原理-1\",\"897\":\"v-dd97714c#客户端步骤-client\",\"898\":\"v-dd97714c#服务端步骤-server\",\"899\":\"v-dd97714c#socket\",\"900\":\"v-dd97714c#serversocket\",\"901\":\"v-dd97714c#案例-1\",\"902\":\"v-dd97714c#v1-客户端发送消息-服务端接收并打印\",\"903\":\"v-dd97714c#v2-多个客户端发送-服务端接收-多线程处理\",\"904\":\"v-dd97714c#v3-客户端发送对象-序列化-服务端接收\",\"905\":\"v-dd97714c#v4-客户端上传文件到服务端\",\"906\":\"v-dd97714c#三次握手\",\"907\":\"v-dd97714c#四次挥手\",\"908\":\"v-dd97714c#小结\",\"909\":\"v-6a34dcf6\",\"910\":\"v-6a34dcf6#过程\",\"911\":\"v-6a34dcf6#类加载器\",\"912\":\"v-6a34dcf6#分类\",\"913\":\"v-6a34dcf6#双亲委派模型\",\"914\":\"v-6a34dcf6#类加载时机\",\"915\":\"v-6a34dcf6#什么是反射\",\"916\":\"v-6a34dcf6#获取字节码文件对象的几种方式\",\"917\":\"v-6a34dcf6#关于class\",\"918\":\"v-6a34dcf6#配置文件-properties\",\"919\":\"v-6a34dcf6#通过反射获取构造方法-constructor\",\"920\":\"v-6a34dcf6#通过反射获取成员变量-field\",\"921\":\"v-6a34dcf6#通过反射获取成员方法-method\",\"922\":\"v-6a34dcf6#其他api\",\"923\":\"v-6a34dcf6#自定义类加载器\",\"924\":\"v-2fb7bf2f\",\"925\":\"v-4d674068\",\"926\":\"v-4d674068#如何确定垃圾\",\"927\":\"v-4d674068#引用计数算法\",\"928\":\"v-4d674068#根搜索算法\",\"929\":\"v-4d674068#如何回收垃圾\",\"930\":\"v-4d674068#标记清除算法\",\"931\":\"v-4d674068#标记复制算法\",\"932\":\"v-4d674068#标记整理算法\",\"933\":\"v-4d674068#分代收集算法\",\"934\":\"v-4d674068#什么时候回收垃圾\",\"935\":\"v-25f016d9\",\"936\":\"v-25f016d9#引入\",\"937\":\"v-25f016d9#泛型概念\",\"938\":\"v-25f016d9#泛型好处\",\"939\":\"v-25f016d9#泛型类\",\"940\":\"v-25f016d9#泛型在父子继承关系上的表现\",\"941\":\"v-25f016d9#泛型接口\",\"942\":\"v-25f016d9#案例\",\"943\":\"v-25f016d9#泛型方法\",\"944\":\"v-25f016d9#泛型的通配-了解\",\"945\":\"v-25f016d9#泛型的擦除-重要-需要记住\",\"946\":\"v-e610237e\",\"947\":\"v-e610237e#数据结构\",\"948\":\"v-e610237e#数组\",\"949\":\"v-e610237e#链表\",\"950\":\"v-e610237e#集合是什么\",\"951\":\"v-e610237e#工作中的作用\",\"952\":\"v-e610237e#特点\",\"953\":\"v-e610237e#api\",\"954\":\"v-e610237e#toarray方法\",\"955\":\"v-e610237e#iterator方法\",\"956\":\"v-e610237e#foreach\",\"957\":\"v-e610237e#特点-重点\",\"958\":\"v-e610237e#list的api\",\"959\":\"v-e610237e#listiterator方法\",\"960\":\"v-e610237e#sublist方法\",\"961\":\"v-e610237e#arraylist\",\"962\":\"v-e610237e#特点-1\",\"963\":\"v-e610237e#构造方法\",\"964\":\"v-e610237e#arraylist的api\",\"965\":\"v-e610237e#linkedlist\",\"966\":\"v-e610237e#特点-2\",\"967\":\"v-e610237e#linkedlist的构造方法\",\"968\":\"v-e610237e#linkedlist的api\",\"969\":\"v-e610237e#vector\",\"970\":\"v-e610237e#stack\",\"971\":\"v-e610237e#特点-3\",\"972\":\"v-e610237e#api-1\",\"973\":\"v-e610237e#deque\",\"974\":\"v-e610237e#特点-4\",\"975\":\"v-e610237e#api-2\",\"976\":\"v-e610237e#arraydeque\",\"977\":\"v-e610237e#特点-5\",\"978\":\"v-e610237e#构造方法-1\",\"979\":\"v-e610237e#blockingqueue\",\"980\":\"v-e610237e#特点-6\",\"981\":\"v-e610237e#set的api\",\"982\":\"v-e610237e#hashset\",\"983\":\"v-e610237e#hashset的特点\",\"984\":\"v-e610237e#hashset的构造方法\",\"985\":\"v-e610237e#hashset的api\",\"986\":\"v-e610237e#linkedhashset\",\"987\":\"v-e610237e#linkedhashset的特点\",\"988\":\"v-e610237e#linkedhashset的构造方法\",\"989\":\"v-e610237e#linkedhashset的api\",\"990\":\"v-e610237e#treeset\",\"991\":\"v-e610237e#treeset的特点\",\"992\":\"v-e610237e#treeset的构造方法\",\"993\":\"v-e610237e#treeset的api\",\"994\":\"v-46cd5f96\",\"995\":\"v-46cd5f96#map是什么\",\"996\":\"v-46cd5f96#特点\",\"997\":\"v-46cd5f96#api\",\"998\":\"v-46cd5f96#准备知识\",\"999\":\"v-46cd5f96#什么是hash\",\"1000\":\"v-46cd5f96#好的hash算法希望的特点\",\"1001\":\"v-46cd5f96#_2的幂取余问题\",\"1002\":\"v-46cd5f96#hashmap的底层结构\",\"1003\":\"v-46cd5f96#特点-1\",\"1004\":\"v-46cd5f96#hashmap的一些注意事项-面试题\",\"1005\":\"v-46cd5f96#初始化容量及扩容\",\"1006\":\"v-46cd5f96#加载因子\",\"1007\":\"v-46cd5f96#hashmap底层数组结构\",\"1008\":\"v-46cd5f96#hash的计算\",\"1009\":\"v-46cd5f96#重要-hashmap对重复的key的定义\",\"1010\":\"v-46cd5f96#存储重复元素\",\"1011\":\"v-46cd5f96#链表什么时候转化为红黑树\",\"1012\":\"v-46cd5f96#当链表数目从8到达9-一定会转化为红黑树吗\",\"1013\":\"v-46cd5f96#扩容后位置问题\",\"1014\":\"v-46cd5f96#红黑树转化为链表\",\"1015\":\"v-46cd5f96#如果我们在hashmap已经添加了一份key-value数据-建议尽量不要再通过key的引用直接修改key-有可能会无法-再操作这个数据-了解\",\"1016\":\"v-46cd5f96#重要-hashmap的添加流程\",\"1017\":\"v-46cd5f96#hashmap的构造方法\",\"1018\":\"v-46cd5f96#hashmap的api\",\"1019\":\"v-46cd5f96#组装数据\",\"1020\":\"v-46cd5f96#特点-2\",\"1021\":\"v-46cd5f96#linkedhashmap的特点\",\"1022\":\"v-46cd5f96#linkedhashmap的构造方法\",\"1023\":\"v-46cd5f96#linkedhashmap的api\",\"1024\":\"v-46cd5f96#treemap的特点\",\"1025\":\"v-46cd5f96#treemap的构造方法\",\"1026\":\"v-46cd5f96#treemap的api\",\"1027\":\"v-49e5aabe\",\"1028\":\"v-49e5aabe#引言\",\"1029\":\"v-49e5aabe#使用流解决上述问题\",\"1030\":\"v-49e5aabe#流的概述\",\"1031\":\"v-49e5aabe#什么是流\",\"1032\":\"v-49e5aabe#流用来解决什么问题\",\"1033\":\"v-49e5aabe#怎么使用流\",\"1034\":\"v-49e5aabe#创建流\",\"1035\":\"v-49e5aabe#中间操作\",\"1036\":\"v-49e5aabe#filter-过滤操作\",\"1037\":\"v-49e5aabe#distinct-去重\",\"1038\":\"v-49e5aabe#limit-截取\",\"1039\":\"v-49e5aabe#skip-跳过\",\"1040\":\"v-49e5aabe#map-转换\",\"1041\":\"v-49e5aabe#sorted-排序\",\"1042\":\"v-49e5aabe#终止操作\",\"1043\":\"v-49e5aabe#anymatch-是否有任意一个匹配\",\"1044\":\"v-49e5aabe#allmatch-是否所有的全匹配\",\"1045\":\"v-49e5aabe#nonematch-没有匹配\",\"1046\":\"v-49e5aabe#findany-找到任意一个\",\"1047\":\"v-49e5aabe#findfirst-找到第一个\",\"1048\":\"v-49e5aabe#foreach\",\"1049\":\"v-49e5aabe#count\",\"1050\":\"v-49e5aabe#reduce\",\"1051\":\"v-49e5aabe#collect\",\"1052\":\"v-49e5aabe#收集\",\"1053\":\"v-49e5aabe#使用案例\",\"1054\":\"v-67b8c712\",\"1055\":\"v-67b8c712#标题-2\",\"1056\":\"v-67b8c712#标题-3\",\"1057\":\"v-67b8c712@0\",\"1058\":\"v-67b8c712@1\",\"1059\":\"v-696d9fb1\",\"1060\":\"v-696d9fb1#标题-2\",\"1061\":\"v-696d9fb1#标题-3\",\"1062\":\"v-696d9fb1@0\",\"1063\":\"v-696d9fb1@1\",\"1064\":\"v-6b227850\",\"1065\":\"v-6b227850#标题-2\",\"1066\":\"v-6b227850#标题-3\",\"1067\":\"v-6b227850@0\",\"1068\":\"v-6b227850@1\",\"1069\":\"v-6cd750ef\",\"1070\":\"v-6cd750ef#标题-2\",\"1071\":\"v-6cd750ef#标题-3\",\"1072\":\"v-6cd750ef@0\",\"1073\":\"v-6cd750ef@1\",\"1074\":\"v-59c24075\",\"1075\":\"v-59c24075#学习目标\",\"1076\":\"v-59c24075#前置知识准备\",\"1077\":\"v-59c24075#javaee介绍\",\"1078\":\"v-59c24075#servlet介绍\",\"1079\":\"v-59c24075#pom-xml\",\"1080\":\"v-59c24075#打包方式\",\"1081\":\"v-59c24075#scope作用域\",\"1082\":\"v-59c24075#servlet开发-后面会单独重点讲解\",\"1083\":\"v-59c24075#docbase-设置来访问资源\",\"1084\":\"v-59c24075#★-idea中使用tomcat\",\"1085\":\"v-59c24075#genericservlet和httpservlet\",\"1086\":\"v-59c24075#webservlet注解\",\"1087\":\"v-59c24075#value属性-或urlpatterns\",\"1088\":\"v-59c24075#一个servlet可以对应多个url-pattern\",\"1089\":\"v-59c24075#★★★url-pattern\",\"1090\":\"v-59c24075#合法写法\",\"1091\":\"v-59c24075#优先级\",\"1092\":\"v-59c24075#缺省servlet\",\"1093\":\"v-59c24075#servlet的生命周期\",\"1094\":\"v-59c24075#放入配置\",\"1095\":\"v-59c24075#取出配置\",\"1096\":\"v-59c24075#获得方式\",\"1097\":\"v-59c24075#获得真实路径-了解\",\"1098\":\"v-59c24075#web应用的目录结构\",\"1099\":\"v-59c24075#maven工程的目录结构\",\"1100\":\"v-59c24075#对应关系图-核心\",\"1101\":\"v-453eef08\",\"1102\":\"v-453eef08#学习目标\",\"1103\":\"v-453eef08#前置知识准备\",\"1104\":\"v-453eef08#请求报文\",\"1105\":\"v-453eef08#响应报文\",\"1106\":\"v-453eef08#反射\",\"1107\":\"v-453eef08#获得class对象\",\"1108\":\"v-453eef08#获得成员变量并给成员变量赋值\",\"1109\":\"v-453eef08#获得方法并且能够调用方法\",\"1110\":\"v-453eef08#mybatis\",\"1111\":\"v-453eef08#请求行\",\"1112\":\"v-453eef08#请求头\",\"1113\":\"v-453eef08#请求体\",\"1114\":\"v-453eef08#特殊信息\",\"1115\":\"v-453eef08#客户机和服务器主机信息-了解\",\"1116\":\"v-453eef08#★请求参数\",\"1117\":\"v-453eef08#直接封装\",\"1118\":\"v-453eef08#引用类型\",\"1119\":\"v-453eef08#post请求请求参数乱码\",\"1120\":\"v-453eef08#文件上传\",\"1121\":\"v-453eef08#request做请求转发-了解\",\"1122\":\"v-453eef08#响应行\",\"1123\":\"v-453eef08#响应头\",\"1124\":\"v-453eef08#响应体\",\"1125\":\"v-453eef08#特殊响应头\",\"1126\":\"v-453eef08#refresh\",\"1127\":\"v-453eef08#content-type\",\"1128\":\"v-453eef08#content-disposition\",\"1129\":\"v-453eef08#location\",\"1130\":\"v-453eef08#请求分发案例\",\"1131\":\"v-453eef08#登录案例\",\"1132\":\"v-453eef08#项目-会员管理\",\"1133\":\"v-453eef08#小结\",\"1134\":\"v-453eef08#练习题\",\"1135\":\"v-46ed6397\",\"1136\":\"v-46ed6397#学习目标\",\"1137\":\"v-46ed6397#前置知识准备\",\"1138\":\"v-46ed6397#cookie的格式\",\"1139\":\"v-46ed6397#构造cookie信息\",\"1140\":\"v-46ed6397#浏览器构造cookie\",\"1141\":\"v-46ed6397#postman构造cookie\",\"1142\":\"v-46ed6397#服务器构造cookie\",\"1143\":\"v-46ed6397#获取cookie\",\"1144\":\"v-46ed6397#cookie中的信息\",\"1145\":\"v-46ed6397#path\",\"1146\":\"v-46ed6397#domain\",\"1147\":\"v-46ed6397#maxage\",\"1148\":\"v-46ed6397#案例\",\"1149\":\"v-46ed6397#小结\",\"1150\":\"v-46ed6397#提供session\",\"1151\":\"v-46ed6397#获取session\",\"1152\":\"v-46ed6397#使用session\",\"1153\":\"v-46ed6397#session的生命周期\",\"1154\":\"v-46ed6397#常见问题\",\"1155\":\"v-46ed6397#关闭浏览器-session是否被销毁\",\"1156\":\"v-46ed6397#服务器关闭-session发生了什么\",\"1157\":\"v-46ed6397#session失效-原因会是啥\",\"1158\":\"v-46ed6397#禁用cookie之后的session策略\",\"1159\":\"v-46ed6397#思考\",\"1160\":\"v-46ed6397#cookie和session\",\"1161\":\"v-46ed6397#数据共享\",\"1162\":\"v-7a07405d\",\"1163\":\"v-7a07405d#标题-2\",\"1164\":\"v-7a07405d#标题-3\",\"1165\":\"v-7a07405d@0\",\"1166\":\"v-7a07405d@1\",\"1167\":\"v-7bbc18fc\",\"1168\":\"v-7bbc18fc#标题-2\",\"1169\":\"v-7bbc18fc#标题-3\",\"1170\":\"v-7bbc18fc@0\",\"1171\":\"v-7bbc18fc@1\",\"1172\":\"v-7d70f19b\",\"1173\":\"v-7d70f19b#标题-2\",\"1174\":\"v-7d70f19b#标题-3\",\"1175\":\"v-7d70f19b@0\",\"1176\":\"v-7d70f19b@1\",\"1177\":\"v-7f25ca3a\",\"1178\":\"v-7f25ca3a#标题-2\",\"1179\":\"v-7f25ca3a#标题-3\",\"1180\":\"v-7f25ca3a@0\",\"1181\":\"v-7f25ca3a@1\",\"1182\":\"v-1ca2eeca\",\"1183\":\"v-1ca2eeca#介绍\",\"1184\":\"v-1ca2eeca#安装git\",\"1185\":\"v-1ca2eeca#下载\",\"1186\":\"v-1ca2eeca#安装\",\"1187\":\"v-1ca2eeca#git的使用\",\"1188\":\"v-1ca2eeca#git核心流程\",\"1189\":\"v-1ca2eeca#git-命令\",\"1190\":\"v-1ca2eeca#注册相关网站\",\"1191\":\"v-1ca2eeca#建立远程仓库\",\"1192\":\"v-1ca2eeca#clone\",\"1193\":\"v-1ca2eeca#status\",\"1194\":\"v-1ca2eeca#add\",\"1195\":\"v-1ca2eeca#commit\",\"1196\":\"v-1ca2eeca#push\",\"1197\":\"v-1ca2eeca#pull\",\"1198\":\"v-1ca2eeca#log\",\"1199\":\"v-1ca2eeca#协作开发\",\"1200\":\"v-1ca2eeca#邀请成员加入仓库\",\"1201\":\"v-1ca2eeca#处理冲突\",\"1202\":\"v-1ca2eeca#后悔药\",\"1203\":\"v-1ca2eeca#忽略文件\",\"1204\":\"v-1ca2eeca#分支管理\",\"1205\":\"v-1ca2eeca#在idea上进行git操作\",\"1206\":\"v-e1e3da16\",\"1207\":\"v-4f00d4c0\",\"1208\":\"v-14c69af4\",\"1209\":\"v-480860e6\",\"1210\":\"v-08f42f4a\",\"1211\":\"v-211a2a4e\",\"1212\":\"v-30be3cd5\",\"1213\":\"v-245d9bec\",\"1214\":\"v-d440f426\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[3,11],\"1\":[1,2],\"2\":[1,2],\"3\":[1,5],\"4\":[1,2],\"5\":[1,12],\"6\":[1,4],\"7\":[1,4],\"8\":[2,11],\"9\":[1,11],\"10\":[1,12],\"11\":[1,18],\"12\":[1,8],\"13\":[1,1],\"14\":[1,7],\"15\":[1,8],\"16\":[1],\"17\":[1,5],\"18\":[1,1],\"19\":[1,6],\"20\":[1],\"21\":[2,10],\"22\":[1],\"23\":[2,9],\"24\":[1],\"25\":[1,8],\"26\":[1],\"27\":[1,9],\"28\":[1,1],\"29\":[1,15],\"30\":[1],\"31\":[1,8],\"32\":[1,1],\"33\":[1],\"34\":[1,20],\"35\":[1],\"36\":[1,6],\"37\":[1],\"38\":[1,6],\"39\":[1],\"40\":[1,9],\"41\":[1,2],\"42\":[1],\"43\":[1,5],\"44\":[null,null,1],\"45\":[1,18],\"46\":[null,null,1],\"47\":[null,null,1],\"48\":[1,7],\"49\":[null,null,1],\"50\":[null,null,1],\"51\":[2,11],\"52\":[2,8],\"53\":[2,13],\"54\":[2,11],\"55\":[2,10],\"56\":[1,10],\"57\":[1,19],\"58\":[1,1],\"59\":[1,3],\"60\":[1,3],\"61\":[1,5],\"62\":[1,2],\"63\":[1,3],\"64\":[1,6],\"65\":[1,2],\"66\":[1,23],\"67\":[1,6],\"68\":[1,1],\"69\":[1,5],\"70\":[1,1],\"71\":[1,25],\"72\":[1,26],\"73\":[1,12],\"74\":[1,19],\"75\":[2,25],\"76\":[2,5],\"77\":[null,null,1],\"78\":[null,null,1],\"79\":[1,3],\"80\":[1,20],\"81\":[1,17],\"82\":[1,16],\"83\":[null,null,1],\"84\":[null,null,2],\"85\":[1],\"86\":[2,2],\"87\":[2,2],\"88\":[null,null,1],\"89\":[null,null,3],\"90\":[1],\"91\":[2,2],\"92\":[2,2],\"93\":[null,null,2],\"94\":[null,null,2],\"95\":[1],\"96\":[2,2],\"97\":[2,2],\"98\":[null,null,2],\"99\":[null,null,2],\"100\":[1],\"101\":[2,2],\"102\":[2,2],\"103\":[null,null,1],\"104\":[null,null,2],\"105\":[3,25],\"106\":[1,6],\"107\":[1,5],\"108\":[1,8],\"109\":[1,8],\"110\":[1,79],\"111\":[1,21],\"112\":[1,13],\"113\":[1,48],\"114\":[1,15],\"115\":[1,147],\"116\":[1,192],\"117\":[1],\"118\":[3,8],\"119\":[1,17],\"120\":[1,52],\"121\":[1,96],\"122\":[1],\"123\":[3,30],\"124\":[3,46],\"125\":[1,61],\"126\":[1,48],\"127\":[1,204],\"128\":[1,103],\"129\":[1],\"130\":[1,23],\"131\":[1,8],\"132\":[1,14],\"133\":[1],\"134\":[1,31],\"135\":[1,9],\"136\":[5,42],\"137\":[5,26],\"138\":[1,35],\"139\":[1,138],\"140\":[2,26],\"141\":[1,59],\"142\":[1,37],\"143\":[1,137],\"144\":[3,161],\"145\":[1,14],\"146\":[1,47],\"147\":[1,51],\"148\":[1,36],\"149\":[1,137],\"150\":[1,26],\"151\":[1,13],\"152\":[1,27],\"153\":[1,225],\"154\":[1,6],\"155\":[1,22],\"156\":[1,39],\"157\":[1,67],\"158\":[1,133],\"159\":[1,36],\"160\":[1,29],\"161\":[1,82],\"162\":[2,163],\"163\":[2,33],\"164\":[2,52],\"165\":[2,25],\"166\":[3,24],\"167\":[3,84],\"168\":[1,127],\"169\":[1,75],\"170\":[1,56],\"171\":[1,187],\"172\":[1,33],\"173\":[1,16],\"174\":[1,15],\"175\":[1,8],\"176\":[1,18],\"177\":[1,15],\"178\":[1,35],\"179\":[1,5],\"180\":[1,50],\"181\":[1,15],\"182\":[1,39],\"183\":[1,46],\"184\":[1,45],\"185\":[3,22],\"186\":[1,11],\"187\":[1,35],\"188\":[1,53],\"189\":[2,16],\"190\":[1,2],\"191\":[1,31],\"192\":[1,103],\"193\":[1],\"194\":[1,18],\"195\":[1,25],\"196\":[1,16],\"197\":[1,29],\"198\":[1,4],\"199\":[1,24],\"200\":[1,24],\"201\":[1,74],\"202\":[1,29],\"203\":[1,48],\"204\":[1,166],\"205\":[1,34],\"206\":[1,38],\"207\":[1,63],\"208\":[1,35],\"209\":[1,97],\"210\":[1,34],\"211\":[1,60],\"212\":[1,88],\"213\":[2,162],\"214\":[1,100],\"215\":[1,89],\"216\":[1,36],\"217\":[1,38],\"218\":[2,41],\"219\":[1,8],\"220\":[1,176],\"221\":[1,30],\"222\":[1,85],\"223\":[1,7],\"224\":[1,13],\"225\":[1,53],\"226\":[1,38],\"227\":[1,30],\"228\":[2,22],\"229\":[1,50],\"230\":[1,61],\"231\":[1,32],\"232\":[1,67],\"233\":[1,152],\"234\":[2,299],\"235\":[1,75],\"236\":[1],\"237\":[1,49],\"238\":[1,37],\"239\":[1,41],\"240\":[1,77],\"241\":[1,3],\"242\":[1,6],\"243\":[1,11],\"244\":[1,214],\"245\":[1,30],\"246\":[1,81],\"247\":[1,115],\"248\":[1,50],\"249\":[1,57],\"250\":[1,51],\"251\":[1,46],\"252\":[1,49],\"253\":[1,54],\"254\":[1,70],\"255\":[2,44],\"256\":[1,68],\"257\":[1,42],\"258\":[1,42],\"259\":[1,56],\"260\":[1,41],\"261\":[1,120],\"262\":[1,66],\"263\":[1,126],\"264\":[1,77],\"265\":[1,68],\"266\":[3,51],\"267\":[2,68],\"268\":[1,51],\"269\":[1,50],\"270\":[1,2],\"271\":[1,101],\"272\":[1,56],\"273\":[1,57],\"274\":[1,47],\"275\":[1,67],\"276\":[2,76],\"277\":[2,59],\"278\":[1,58],\"279\":[2,67],\"280\":[2,57],\"281\":[1,50],\"282\":[2,65],\"283\":[2,155],\"284\":[1,16],\"285\":[1,43],\"286\":[1,43],\"287\":[1,52],\"288\":[2],\"289\":[1,2],\"290\":[1,2],\"291\":[1,2],\"292\":[1,2],\"293\":[1,2],\"294\":[1,2],\"295\":[1,2],\"296\":[1,2],\"297\":[1,2],\"298\":[1,2],\"299\":[1,2],\"300\":[1,2],\"301\":[1,2],\"302\":[2],\"303\":[1,105],\"304\":[1,26],\"305\":[1,2],\"306\":[1,15],\"307\":[1,64],\"308\":[1,74],\"309\":[1,24],\"310\":[2,3],\"311\":[1,24],\"312\":[1,133],\"313\":[1,33],\"314\":[1,16],\"315\":[1,55],\"316\":[1,73],\"317\":[2,12],\"318\":[1,46],\"319\":[1,73],\"320\":[1,29],\"321\":[1,17],\"322\":[1,32],\"323\":[1,71],\"324\":[1,73],\"325\":[1,24],\"326\":[1,56],\"327\":[1,50],\"328\":[1,42],\"329\":[1],\"330\":[1,12],\"331\":[1,55],\"332\":[1,4],\"333\":[1,11],\"334\":[1,33],\"335\":[1,14],\"336\":[1,83],\"337\":[1,26],\"338\":[1,42],\"339\":[1,23],\"340\":[1,60],\"341\":[1,59],\"342\":[1,103],\"343\":[1,8],\"344\":[1,87],\"345\":[1,68],\"346\":[1,68],\"347\":[1,64],\"348\":[3,120],\"349\":[1,45],\"350\":[1,73],\"351\":[1,21],\"352\":[1,66],\"353\":[1,60],\"354\":[1,26],\"355\":[1,16],\"356\":[1,77],\"357\":[1,15],\"358\":[1,76],\"359\":[1,85],\"360\":[1,25],\"361\":[1,44],\"362\":[1,62],\"363\":[1,21],\"364\":[2,36],\"365\":[1],\"366\":[1,5],\"367\":[1,31],\"368\":[1],\"369\":[1],\"370\":[1,17],\"371\":[1],\"372\":[1],\"373\":[1],\"374\":[1,1],\"375\":[1,26],\"376\":[1,39],\"377\":[1,44],\"378\":[1,48],\"379\":[2,3],\"380\":[1,34],\"381\":[1],\"382\":[1,80],\"383\":[1,53],\"384\":[1,22],\"385\":[2,31],\"386\":[1,29],\"387\":[1,30],\"388\":[1,26],\"389\":[1,76],\"390\":[1,5],\"391\":[2,5],\"392\":[1,32],\"393\":[1,30],\"394\":[1,78],\"395\":[1,31],\"396\":[1,20],\"397\":[1,24],\"398\":[1,25],\"399\":[1,5],\"400\":[1,24],\"401\":[1,7],\"402\":[1,29],\"403\":[1,86],\"404\":[1],\"405\":[1,21],\"406\":[1,29],\"407\":[1,82],\"408\":[1,41],\"409\":[1,23],\"410\":[1,20],\"411\":[1,12],\"412\":[1,40],\"413\":[1,42],\"414\":[1],\"415\":[1,50],\"416\":[1,12],\"417\":[1,36],\"418\":[1,36],\"419\":[1,38],\"420\":[1,41],\"421\":[1,18],\"422\":[1,20],\"423\":[1,32],\"424\":[1,37],\"425\":[1,35],\"426\":[1,31],\"427\":[1,10],\"428\":[1],\"429\":[1,15],\"430\":[1,19],\"431\":[1,36],\"432\":[1,4],\"433\":[1,18],\"434\":[1,48],\"435\":[1],\"436\":[1,18],\"437\":[1,12],\"438\":[1,30],\"439\":[1],\"440\":[1,51],\"441\":[1,103],\"442\":[2,165],\"443\":[2,4],\"444\":[1,53],\"445\":[1,23],\"446\":[1,29],\"447\":[1,18],\"448\":[1,3],\"449\":[1,6],\"450\":[1,39],\"451\":[1],\"452\":[1,25],\"453\":[1,46],\"454\":[1,23],\"455\":[1,29],\"456\":[1,80],\"457\":[1,37],\"458\":[1,27],\"459\":[1,56],\"460\":[1,63],\"461\":[1,26],\"462\":[1,9],\"463\":[1,41],\"464\":[1,18],\"465\":[1,90],\"466\":[1,43],\"467\":[1,34],\"468\":[1,48],\"469\":[1,106],\"470\":[1,21],\"471\":[1,75],\"472\":[1,71],\"473\":[1,11],\"474\":[1,97],\"475\":[1,43],\"476\":[1,13],\"477\":[3,33],\"478\":[1,103],\"479\":[1,42],\"480\":[1,16],\"481\":[1,27],\"482\":[1,15],\"483\":[1,28],\"484\":[1,19],\"485\":[1],\"486\":[1,8],\"487\":[1,41],\"488\":[1,17],\"489\":[1,27],\"490\":[1,17],\"491\":[1,38],\"492\":[1],\"493\":[1,9],\"494\":[1,29],\"495\":[1,11],\"496\":[1,23],\"497\":[1,61],\"498\":[1,68],\"499\":[1,33],\"500\":[1,7],\"501\":[1],\"502\":[1,26],\"503\":[1,64],\"504\":[1,18],\"505\":[1,19],\"506\":[1,23],\"507\":[1],\"508\":[1,21],\"509\":[1,47],\"510\":[1,51],\"511\":[2],\"512\":[1,9],\"513\":[1,23],\"514\":[1,14],\"515\":[1,27],\"516\":[1,37],\"517\":[1,55],\"518\":[1,41],\"519\":[1,33],\"520\":[1,36],\"521\":[1],\"522\":[1,25],\"523\":[3,49],\"524\":[3,11],\"525\":[1,11],\"526\":[2,19],\"527\":[1,4],\"528\":[1,15],\"529\":[1,27],\"530\":[1,45],\"531\":[3],\"532\":[1,28],\"533\":[1,66],\"534\":[1,28],\"535\":[1,33],\"536\":[1,18],\"537\":[1,37],\"538\":[1,64],\"539\":[1,42],\"540\":[3,54],\"541\":[1,67],\"542\":[1,43],\"543\":[1,19],\"544\":[1,41],\"545\":[1,48],\"546\":[1,67],\"547\":[1],\"548\":[1,19],\"549\":[2,18],\"550\":[1],\"551\":[1,41],\"552\":[1,8],\"553\":[1,29],\"554\":[1],\"555\":[1,36],\"556\":[2,19],\"557\":[1,19],\"558\":[1,12],\"559\":[1,34],\"560\":[2,39],\"561\":[1,28],\"562\":[1,23],\"563\":[3,27],\"564\":[1,36],\"565\":[1,12],\"566\":[1,37],\"567\":[1,46],\"568\":[1,60],\"569\":[1,20],\"570\":[1,63],\"571\":[1,45],\"572\":[1,17],\"573\":[1,43],\"574\":[1],\"575\":[1,30],\"576\":[1,7],\"577\":[1,22],\"578\":[1,9],\"579\":[1,18],\"580\":[1,38],\"581\":[1,28],\"582\":[1,32],\"583\":[1,20],\"584\":[1,32],\"585\":[1,60],\"586\":[1,33],\"587\":[1,12],\"588\":[1,57],\"589\":[2,3],\"590\":[1,56],\"591\":[1,40],\"592\":[1,101],\"593\":[1,14],\"594\":[1,82],\"595\":[1,99],\"596\":[1,53],\"597\":[1,21],\"598\":[1,123],\"599\":[3,59],\"600\":[1,55],\"601\":[1,55],\"602\":[1],\"603\":[1,14],\"604\":[1,20],\"605\":[1,19],\"606\":[1,94],\"607\":[1,57],\"608\":[1,57],\"609\":[1,11],\"610\":[1],\"611\":[1,17],\"612\":[1,12],\"613\":[1,4],\"614\":[1,20],\"615\":[3,31],\"616\":[3,32],\"617\":[3,13],\"618\":[3,5],\"619\":[1,30],\"620\":[1,19],\"621\":[1,4],\"622\":[1,15],\"623\":[1,44],\"624\":[1,10],\"625\":[1,10],\"626\":[1,11],\"627\":[1,10],\"628\":[1,10],\"629\":[1,18],\"630\":[1,3],\"631\":[1,9],\"632\":[1,20],\"633\":[1,15],\"634\":[1],\"635\":[1,9],\"636\":[1,7],\"637\":[1,3],\"638\":[1,8],\"639\":[1,15],\"640\":[1,5],\"641\":[1,35],\"642\":[1,24],\"643\":[1,34],\"644\":[1,3],\"645\":[1,16],\"646\":[1,11],\"647\":[1,23],\"648\":[1,34],\"649\":[1,34],\"650\":[1,21],\"651\":[1,21],\"652\":[1,51],\"653\":[1,71],\"654\":[1,68],\"655\":[1,129],\"656\":[1,16],\"657\":[1,40],\"658\":[2,124],\"659\":[1],\"660\":[1,25],\"661\":[1,6],\"662\":[1,47],\"663\":[1,65],\"664\":[1],\"665\":[1,6],\"666\":[1,29],\"667\":[1,44],\"668\":[1,56],\"669\":[1,61],\"670\":[1],\"671\":[1,13],\"672\":[1,14],\"673\":[1,26],\"674\":[1,56],\"675\":[1,75],\"676\":[1],\"677\":[1,9],\"678\":[1,15],\"679\":[1,69],\"680\":[1,56],\"681\":[1,25],\"682\":[1,55],\"683\":[1,20],\"684\":[1,34],\"685\":[1,9],\"686\":[3],\"687\":[1,21],\"688\":[1,21],\"689\":[1,65],\"690\":[1,44],\"691\":[1],\"692\":[1,25],\"693\":[1,23],\"694\":[1,40],\"695\":[1],\"696\":[1,67],\"697\":[1,7],\"698\":[1,27],\"699\":[1,60],\"700\":[2,65],\"701\":[1,43],\"702\":[1,23],\"703\":[1,59],\"704\":[1,38],\"705\":[1,41],\"706\":[1,54],\"707\":[1,34],\"708\":[1,22],\"709\":[1,22],\"710\":[1,26],\"711\":[1,29],\"712\":[1,15],\"713\":[1,31],\"714\":[1,2],\"715\":[1,58],\"716\":[1],\"717\":[1,69],\"718\":[1,27],\"719\":[3,109],\"720\":[1,80],\"721\":[1,61],\"722\":[1,17],\"723\":[1,23],\"724\":[1,57],\"725\":[1,50],\"726\":[1,31],\"727\":[2],\"728\":[1,23],\"729\":[1,74],\"730\":[1,71],\"731\":[1,27],\"732\":[1,27],\"733\":[1],\"734\":[1,28],\"735\":[1,38],\"736\":[1,25],\"737\":[1,147],\"738\":[1,119],\"739\":[1,147],\"740\":[1,124],\"741\":[1,147],\"742\":[1,10],\"743\":[1,51],\"744\":[1,38],\"745\":[2,6],\"746\":[1,5],\"747\":[1,40],\"748\":[1,25],\"749\":[1,37],\"750\":[2],\"751\":[2],\"752\":[1,31],\"753\":[1,9],\"754\":[1,50],\"755\":[2],\"756\":[1,40],\"757\":[1,11],\"758\":[3,16],\"759\":[1,20],\"760\":[1,54],\"761\":[1,1],\"762\":[1],\"763\":[1,2],\"764\":[1,76],\"765\":[2,4],\"766\":[2,10],\"767\":[1,37],\"768\":[1,26],\"769\":[1,52],\"770\":[1],\"771\":[1,83],\"772\":[1,14],\"773\":[1,11],\"774\":[1,11],\"775\":[1,29],\"776\":[1,85],\"777\":[1,78],\"778\":[2,5],\"779\":[2,6],\"780\":[2,11],\"781\":[1,3],\"782\":[1,21],\"783\":[1,12],\"784\":[2,14],\"785\":[1],\"786\":[1,34],\"787\":[1],\"788\":[1,98],\"789\":[1,110],\"790\":[1,80],\"791\":[1],\"792\":[1,39],\"793\":[1],\"794\":[1,131],\"795\":[1,72],\"796\":[1,28],\"797\":[2,4],\"798\":[1,14],\"799\":[1,63],\"800\":[1,25],\"801\":[1,81],\"802\":[1,2],\"803\":[1],\"804\":[1,21],\"805\":[1],\"806\":[1,84],\"807\":[1,65],\"808\":[1,72],\"809\":[1],\"810\":[1,29],\"811\":[1],\"812\":[1,71],\"813\":[1,71],\"814\":[1,86],\"815\":[1,5],\"816\":[1,22],\"817\":[1,114],\"818\":[1,69],\"819\":[1,65],\"820\":[1,94],\"821\":[1,71],\"822\":[3,16],\"823\":[1,35],\"824\":[1,129],\"825\":[2,90],\"826\":[5,18],\"827\":[7,12],\"828\":[5,36],\"829\":[1,4],\"830\":[1,10],\"831\":[1,2],\"832\":[1,59],\"833\":[1,111],\"834\":[1,2],\"835\":[1,8],\"836\":[1,1],\"837\":[1,8],\"838\":[1,105],\"839\":[1,67],\"840\":[1,75],\"841\":[1,61],\"842\":[1,82],\"843\":[4,4],\"844\":[1,118],\"845\":[1],\"846\":[1,11],\"847\":[1,15],\"848\":[1,2],\"849\":[1,2],\"850\":[1,61],\"851\":[1,140],\"852\":[1,5],\"853\":[1,15],\"854\":[1],\"855\":[1,80],\"856\":[1,82],\"857\":[1,90],\"858\":[1],\"859\":[1,82],\"860\":[1,68],\"861\":[1,2],\"862\":[4,3],\"863\":[1,8],\"864\":[1,95],\"865\":[1,3],\"866\":[1,59],\"867\":[1,212],\"868\":[1,65],\"869\":[2,51],\"870\":[1,54],\"871\":[1,56],\"872\":[1,93],\"873\":[3,38],\"874\":[2,4],\"875\":[2,1],\"876\":[4,1],\"877\":[1,2],\"878\":[1,2],\"879\":[1,7],\"880\":[1,138],\"881\":[2,112],\"882\":[1],\"883\":[1,26],\"884\":[1,116],\"885\":[2,83],\"886\":[1,2],\"887\":[1,4],\"888\":[1,5],\"889\":[1,15],\"890\":[1,29],\"891\":[1],\"892\":[3,97],\"893\":[2,59],\"894\":[2,85],\"895\":[2,109],\"896\":[1,2],\"897\":[3,4],\"898\":[3,7],\"899\":[1,19],\"900\":[1,11],\"901\":[1],\"902\":[3,83],\"903\":[5,108],\"904\":[4,93],\"905\":[2,109],\"906\":[1,30],\"907\":[1,34],\"908\":[1,34],\"909\":[2,14],\"910\":[1,38],\"911\":[1],\"912\":[1,58],\"913\":[1,2],\"914\":[1,16],\"915\":[1,2],\"916\":[1,65],\"917\":[1,11],\"918\":[3,94],\"919\":[3,84],\"920\":[3,85],\"921\":[3,79],\"922\":[1,115],\"923\":[1,137],\"924\":[2,354],\"925\":[2,85],\"926\":[1],\"927\":[1,15],\"928\":[1,15],\"929\":[1],\"930\":[1,3],\"931\":[1,3],\"932\":[1,2],\"933\":[1,14],\"934\":[1,7],\"935\":[2,6],\"936\":[1,142],\"937\":[1,37],\"938\":[1,43],\"939\":[1,138],\"940\":[1,94],\"941\":[1,85],\"942\":[1,58],\"943\":[1,40],\"944\":[2,116],\"945\":[3,14],\"946\":[2],\"947\":[1,40],\"948\":[1,51],\"949\":[1,20],\"950\":[1,98],\"951\":[1,68],\"952\":[1,23],\"953\":[1,137],\"954\":[2,146],\"955\":[2,131],\"956\":[1,173],\"957\":[3,28],\"958\":[3,60],\"959\":[2,39],\"960\":[2,56],\"961\":[1,55],\"962\":[1,7],\"963\":[1,20],\"964\":[3,17],\"965\":[1,40],\"966\":[1,6],\"967\":[2,12],\"968\":[3,94],\"969\":[1,67],\"970\":[1,72],\"971\":[1,9],\"972\":[1,40],\"973\":[1,18],\"974\":[1,10],\"975\":[1,71],\"976\":[1,31],\"977\":[1,10],\"978\":[1,157],\"979\":[1,18],\"980\":[1,21],\"981\":[1,56],\"982\":[1],\"983\":[1,9],\"984\":[1,24],\"985\":[1,4],\"986\":[1],\"987\":[1,18],\"988\":[1,22],\"989\":[1,5],\"990\":[1],\"991\":[1,12],\"992\":[1,22],\"993\":[1,50],\"994\":[2,27],\"995\":[1,39],\"996\":[1,11],\"997\":[1,133],\"998\":[1],\"999\":[1,57],\"1000\":[1,12],\"1001\":[1,25],\"1002\":[1,45],\"1003\":[1,29],\"1004\":[3],\"1005\":[1,18],\"1006\":[1,46],\"1007\":[1,16],\"1008\":[1,95],\"1009\":[3,56],\"1010\":[1,12],\"1011\":[1,6],\"1012\":[3,42],\"1013\":[1,37],\"1014\":[1,22],\"1015\":[7,14],\"1016\":[3,123],\"1017\":[1,23],\"1018\":[1,59],\"1019\":[1,45],\"1020\":[1,92],\"1021\":[1,11],\"1022\":[1,25],\"1023\":[1,59],\"1024\":[1,11],\"1025\":[1,21],\"1026\":[1,201],\"1027\":[2,8],\"1028\":[1,122],\"1029\":[1,36],\"1030\":[1],\"1031\":[1,18],\"1032\":[1,3],\"1033\":[1,16],\"1034\":[1,25],\"1035\":[1,10],\"1036\":[3,47],\"1037\":[3,40],\"1038\":[3,41],\"1039\":[3,37],\"1040\":[3,86],\"1041\":[3,31],\"1042\":[1],\"1043\":[3,45],\"1044\":[3,39],\"1045\":[3,30],\"1046\":[3,64],\"1047\":[3,20],\"1048\":[1,26],\"1049\":[1,23],\"1050\":[1,71],\"1051\":[1,3],\"1052\":[1,46],\"1053\":[1,35],\"1054\":[2],\"1055\":[2,2],\"1056\":[2,2],\"1057\":[null,null,1],\"1058\":[null,null,3],\"1059\":[2,2],\"1060\":[2,2],\"1061\":[2,2],\"1062\":[null,null,1],\"1063\":[null,null,3],\"1064\":[2],\"1065\":[2,2],\"1066\":[2,2],\"1067\":[null,null,2],\"1068\":[null,null,3],\"1069\":[2],\"1070\":[2,2],\"1071\":[2,2],\"1072\":[null,null,2],\"1073\":[null,null,3],\"1074\":[2],\"1075\":[1,15],\"1076\":[1,9],\"1077\":[1,82],\"1078\":[1,108],\"1079\":[2,21],\"1080\":[1,16],\"1081\":[1,15],\"1082\":[3,9],\"1083\":[2,35],\"1084\":[2,20],\"1085\":[1,77],\"1086\":[2,44],\"1087\":[3,7],\"1088\":[2,33],\"1089\":[2,6],\"1090\":[1,28],\"1091\":[1,14],\"1092\":[1,21],\"1093\":[1,76],\"1094\":[1,28],\"1095\":[1,55],\"1096\":[1,51],\"1097\":[3,98],\"1098\":[1,30],\"1099\":[1,24],\"1100\":[3,24],\"1101\":[3],\"1102\":[1,18],\"1103\":[1,11],\"1104\":[1,119],\"1105\":[1,82],\"1106\":[1],\"1107\":[1,66],\"1108\":[1,31],\"1109\":[1,65],\"1110\":[1,134],\"1111\":[1,89],\"1112\":[1,163],\"1113\":[1,99],\"1114\":[1],\"1115\":[3,47],\"1116\":[1,82],\"1117\":[1,91],\"1118\":[1,119],\"1119\":[1,48],\"1120\":[1,272],\"1121\":[3,105],\"1122\":[1,50],\"1123\":[1,59],\"1124\":[1,66],\"1125\":[1,13],\"1126\":[1,32],\"1127\":[2,43],\"1128\":[2,50],\"1129\":[1,39],\"1130\":[1,79],\"1131\":[1,143],\"1132\":[3,453],\"1133\":[1,7],\"1134\":[1,12],\"1135\":[2],\"1136\":[1,10],\"1137\":[1,93],\"1138\":[1,101],\"1139\":[1,11],\"1140\":[1,105],\"1141\":[1,32],\"1142\":[1,85],\"1143\":[1,45],\"1144\":[1,24],\"1145\":[1,59],\"1146\":[1,53],\"1147\":[1,52],\"1148\":[1,70],\"1149\":[1,26],\"1150\":[1,122],\"1151\":[1,17],\"1152\":[1,58],\"1153\":[1,22],\"1154\":[1],\"1155\":[2,5],\"1156\":[2,9],\"1157\":[2,19],\"1158\":[1,16],\"1159\":[1,134],\"1160\":[1,24],\"1161\":[1,12],\"1162\":[2],\"1163\":[2,2],\"1164\":[2,2],\"1165\":[null,null,2],\"1166\":[null,null,3],\"1167\":[2,4],\"1168\":[2,2],\"1169\":[2,2],\"1170\":[null,null,2],\"1171\":[null,null,3],\"1172\":[2],\"1173\":[2,2],\"1174\":[2,2],\"1175\":[null,null,1],\"1176\":[null,null,3],\"1177\":[2],\"1178\":[2,2],\"1179\":[2,2],\"1180\":[null,null,1],\"1181\":[null,null,3],\"1182\":[2,18],\"1183\":[1,59],\"1184\":[1],\"1185\":[1,1],\"1186\":[1,7],\"1187\":[1],\"1188\":[1,2],\"1189\":[2],\"1190\":[1,11],\"1191\":[1,2],\"1192\":[1,49],\"1193\":[1,5],\"1194\":[1,14],\"1195\":[1,61],\"1196\":[1,13],\"1197\":[1,28],\"1198\":[1,3],\"1199\":[1],\"1200\":[1,17],\"1201\":[1,97],\"1202\":[1,39],\"1203\":[1,56],\"1204\":[1,75],\"1205\":[1,36],\"1206\":[1],\"1207\":[1],\"1208\":[1],\"1209\":[2],\"1210\":[1],\"1211\":[1],\"1212\":[1],\"1213\":[1],\"1214\":[1]},\"averageFieldLength\":[1.2515938789905177,40.3136770391926,0.3205012383656173],\"storedFields\":{\"0\":{\"h\":\"Index Team Blog\",\"t\":[\"这是一个博客主页的案例。\",\"要使用此布局，你应该在页面前端设置 layout: BlogHome 和 home: true。\",\"相关配置文档请见 博客主页。\"]},\"1\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"2\":{\"h\":\"幻灯片页\",\"t\":[\"@slidestart\"]},\"3\":{\"h\":\"幻灯片演示\",\"t\":[\"一个简单的幻灯片演示与各种小贴士。\",\"作者 Mr.Hope. 请滚动鼠标滚轮进入下一页\"]},\"4\":{\"h\":\"标注幻灯片\",\"t\":[\"👇\",\"--\"]},\"5\":{\"h\":\"标注幻灯片\",\"t\":[\"使用 --- 标注水平幻灯片\",\"在水平幻灯片中使用 -- 分割垂直幻灯片\",\"使用 <!-- .slide: ... --> 在幻灯片上添加属性\",\"使用 <!-- .element: ... --> 在前一个 HTML 元素上添加属性\"]},\"6\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"--\"]},\"7\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\"]},\"8\":{\"h\":\"这是一个 H3\",\"t\":[\"标题默认会自动转换为大写。\",\"这是一个有着 粗体, 斜体, 删除线 文字并包含 一个链接 的段落，并且它会自动换行。所以你无需担心它的长度。\",\"--\"]},\"9\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"列表默认为 inline-block\",\"项目\",\"项目\",\"项目\",\"项目 1\",\"项目 2\",\"项目 3\",\"--\"]},\"10\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"在你启用 highlight 插件后，代码块会自动高亮。\",\"const a = 1; \",\"--\"]},\"11\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"在你启用 math 插件后，你也可以使用 TEX 格式使用数学公式。\",\"$$ J(\\\\theta_0,\\\\theta_1) = \\\\sum_{i=0} $$\",\"--\"]},\"12\":{\"h\":\"Markdown\",\"t\":[\"你可以在幻灯片中使用 Markdown 语法的各种标记.\",\"⚠请注意: 表格和分割线，以及所有不在 Markdown 标准语法中的内容均不受支持。\"]},\"13\":{\"h\":\"布局\",\"t\":[\"--\"]},\"14\":{\"h\":\"布局\",\"t\":[\"👆 r-fit-text class 会让文字在不超出幻灯片范围的情况下尽可能大。\",\"--\"]},\"15\":{\"h\":\"布局\",\"t\":[\"Logo\",\"👆 r-stretch class 帮助你控制注入图片或视频的大小，使它们填充满幻灯片垂直方向上的剩余空间。\",\"--\"]},\"16\":{\"h\":\"布局\"},\"17\":{\"h\":\"背景\",\"t\":[\"你可以通过向特定幻灯片添加 data-background 属性自定义幻灯片背景.\"]},\"18\":{\"h\":\"动画片段\",\"t\":[\"--\"]},\"19\":{\"h\":\"动画片段\",\"t\":[\"动画片段用于高亮或显隐幻灯片中的元素。\",\"你需要在元素上添加 fragment 和动画 class。\",\"--\"]},\"20\":{\"h\":\"动画片段\"},\"21\":{\"h\":\"动画 class\",\"t\":[\"fade-in\",\"fade-out\",\"fade-up\",\"fade-down\",\"fade-left\",\"fade-right\",\"fade-in-then-out\",\"fade-in-then-semi-out\",\"--\"]},\"22\":{\"h\":\"动画片段\"},\"23\":{\"h\":\"动画 class\",\"t\":[\"grow\",\"shrink\",\"strike\",\"highlight-red\",\"highlight-green\",\"highlight-blue\",\"highlight-current-red\",\"highlight-current-green\",\"highlight-current-blue\",\"--\"]},\"24\":{\"h\":\"动画片段\"},\"25\":{\"h\":\"多个动画片段\",\"t\":[\"你可以按照顺序包裹一个 HTML 元素使其拥有多个动画片段 渐入 > 变红 > 渐出 \",\"--\"]},\"26\":{\"h\":\"动画片段\"},\"27\":{\"h\":\"顺序\",\"t\":[\"你可以使用 data-fragment-index 属性改变元素的动画顺序。\",\"不同元素可以有相同的动画顺序。\",\"最后显示\",\"第二个显示\",\"第一个显示\",\"第二个显示\"]},\"28\":{\"h\":\"渐变\",\"t\":[\"--\"]},\"29\":{\"h\":\"渐变\",\"t\":[\"Transition 可以通过配置中的 transition 选项全局设置，也可以通过在特定幻灯片添加 data-transition 属性局部设置.\",\"可能的值:\",\"none\",\"fade\",\"slide\",\"convex\",\"concave\",\"zoom\",\"--\"]},\"30\":{\"h\":\"渐变\"},\"31\":{\"h\":\"过渡动画\",\"t\":[\"你可以在相邻的幻灯片上添加 data-auto-animate 使相同的 HTML 元素产生过渡动画效果。\"]},\"32\":{\"h\":\"功能\",\"t\":[\"--\"]},\"33\":{\"h\":\"功能\"},\"34\":{\"h\":\"代码\",\"t\":[\"通过启用 highlight 插件，你可以对代码块进行高亮。\",\"你可以使用 [a-b|c-d] 语法来分布高亮特定行。\",\"let a = 1; let b = 2; let c = (x) => 1 + 2 + x; c(3); \",\"--\"]},\"35\":{\"h\":\"功能\"},\"36\":{\"h\":\"预览模式\",\"t\":[\"按下 Esc 或 O 即可在幻灯片获得焦点时进入预览模式。\",\"--\"]},\"37\":{\"h\":\"功能\"},\"38\":{\"h\":\"全屏模式\",\"t\":[\"按下 F 或 F11 即可在幻灯片获得焦点时进入全屏模式。\",\"--\"]},\"39\":{\"h\":\"功能\"},\"40\":{\"h\":\"缩放\",\"t\":[\"按下 alt (Linux 上使用 ctrl) 的同时点击幻灯片的任何元素，即可以向此元素进行放大。\",\"再次点击即可缩小。\"]},\"41\":{\"h\":\"结束\",\"t\":[\"@slideend\"]},\"42\":{\"h\":\"主要功能与配置演示\"},\"43\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"44\":{\"c\":[\"使用指南\"]},\"45\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"46\":{\"c\":[\"使用指南\"]},\"47\":{\"c\":[\"禁用\"]},\"48\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"49\":{\"c\":[\"使用指南\"]},\"50\":{\"c\":[\"文章加密\"]},\"51\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"52\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"53\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"54\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"55\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"56\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"57\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"58\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"59\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"60\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"61\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"62\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"63\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"64\":{\"h\":\"任务列表\",\"t\":[\"[x] 计划 1\",\"[ ] 计划 2\",\"查看详情\"]},\"65\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"66\":{\"h\":\"组件\",\"t\":[\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mister-hope.com/logo.svg link: https://mister-hope.com color: rgba(253, 230, 138, 0.15) \",\"查看详情\"]},\"67\":{\"h\":\"导入文件\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\",\"查看详情\"]},\"68\":{\"h\":\"代码演示\",\"t\":[\"查看详情\"]},\"69\":{\"h\":\"样式化\",\"t\":[\"向 Mr.Hope 捐赠一杯咖啡。 \",\"查看详情\"]},\"70\":{\"h\":\"交互演示\",\"t\":[\"查看详情\"]},\"71\":{\"h\":\"图表\",\"t\":[\"::: chart 一个散点图案例\",\"{ \\\"type\\\": \\\"scatter\\\", \\\"data\\\": { \\\"datasets\\\": [ { \\\"label\\\": \\\"散点数据集\\\", \\\"data\\\": [ { \\\"x\\\": -10, \\\"y\\\": 0 }, { \\\"x\\\": 0, \\\"y\\\": 10 }, { \\\"x\\\": 10, \\\"y\\\": 5 }, { \\\"x\\\": 0.5, \\\"y\\\": 5.5 } ], \\\"backgroundColor\\\": \\\"rgb(255, 99, 132)\\\" } ] }, \\\"options\\\": { \\\"scales\\\": { \\\"x\\\": { \\\"type\\\": \\\"linear\\\", \\\"position\\\": \\\"bottom\\\" } } } } \",\":::\",\"查看详情\"]},\"72\":{\"h\":\"Echarts\",\"t\":[\"::: echarts 一个折线图案例\",\"{ \\\"xAxis\\\": { \\\"type\\\": \\\"category\\\", \\\"data\\\": [\\\"Mon\\\", \\\"Tue\\\", \\\"Wed\\\", \\\"Thu\\\", \\\"Fri\\\", \\\"Sat\\\", \\\"Sun\\\"] }, \\\"yAxis\\\": { \\\"type\\\": \\\"value\\\" }, \\\"series\\\": [ { \\\"data\\\": [150, 230, 224, 218, 135, 147, 260], \\\"type\\\": \\\"line\\\" } ] } \",\":::\",\"查看详情\"]},\"73\":{\"h\":\"流程图\",\"t\":[\"cond=>condition: 是否执行操作? process=>operation: 操作 e=>end: 结束 cond(yes)->process->e cond(no)->e \",\"查看详情\"]},\"74\":{\"h\":\"Mermaid\",\"t\":[\"--- title: Flowchart --- flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end one --> two three --> two two --> c2 \",\"查看详情\"]},\"75\":{\"h\":\"Tex 语法\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"查看详情\"]},\"76\":{\"h\":\"Vue 交互演示\",\"t\":[\"::: vue-playground Vue 交互演示\"]},\"77\":{\"c\":[\"使用指南\"]},\"78\":{\"c\":[\"Markdown\"]},\"79\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"80\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"81\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"提示\",\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\",\"主题包含了一个自定义徽章可以使用:\",\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"]},\"82\":{\"h\":\"页面结构\",\"t\":[\"此页面应当包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"导航栏\",\"侧边栏\",\"页脚\",\"返回顶部按钮\",\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"]},\"83\":{\"c\":[\"使用指南\"]},\"84\":{\"c\":[\"页面配置\",\"使用指南\"]},\"85\":{\"h\":\"樱桃\"},\"86\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"87\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"88\":{\"c\":[\"樱桃\"]},\"89\":{\"c\":[\"红\",\"小\",\"圆\"]},\"90\":{\"h\":\"火龙果\"},\"91\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"92\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"93\":{\"c\":[\"火龙果\",\"水果\"]},\"94\":{\"c\":[\"红\",\"大\"]},\"95\":{\"h\":\"草莓\"},\"96\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"97\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"98\":{\"c\":[\"水果\",\"草莓\"]},\"99\":{\"c\":[\"红\",\"小\"]},\"100\":{\"h\":\"番茄\"},\"101\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"102\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"103\":{\"c\":[\"蔬菜\"]},\"104\":{\"c\":[\"红\",\"圆\"]},\"105\":{\"h\":\"01. HTTP&Tomcat\",\"t\":[\"学习目标：\",\"掌握HTTP报文格式，请求报文格式，响应报文格式\",\"掌握状态码\",\"了解Tomcat是什么\",\"Tomcat的安装及使用\",\"掌握直接部署&虚拟部署\",\"整体流程图\",\"image-20230116095331886\",\"前端：负责获取数据，展示数据\",\"程序：负责监听端口，并对请求作出响应，这中间需要从数据库获取数据\",\"数据库：数据仓库。通过标准化语言SQL进行操作，在Java代码中，是通过JDBC进行操作。\"]},\"106\":{\"h\":\"协议\",\"t\":[\"协议在不同场景中有不同的含义，下面分别整理三方协议、租房协议、购房协议，以及网络传输中提及的通讯协议。\"]},\"107\":{\"h\":\"三方协议\",\"t\":[\"三方协议是指涉及三方之间的一种规定，用于明确各方的权利和义务。这种协议通常包括详细的条款和条件，以确保各方在交往过程中能够达成共识。\"]},\"108\":{\"h\":\"租房协议\",\"t\":[\"租房协议是一种合同，规定了房东和租户之间的权利和义务。该协议通常包括租赁期限、租金支付方式、房屋使用规定、押金退还条件等条款，以保障租户和房东的合法权益。\"]},\"109\":{\"h\":\"购房协议\",\"t\":[\"购房协议是指在购房交易中，买卖双方达成的书面协议。这份文件规定了房屋的购买价格、付款方式、交付时间、过户手续等重要信息，确保双方在交易中有明确的权益和责任。\"]},\"110\":{\"h\":\"网络传输中的通讯协议\",\"t\":[\"在网络传输中，通讯协议是一种规范，用于定义信息传递的格式和规则，确保通信双方能够正确地解释和处理数据。例如，约定了数据的分割符、字段的顺序和格式，以便发送方和接收方能够正常地进行信息交流。\",\"如果A老师和B老师要进行学生信息的传递，他们需要遵循相同的通讯协议。这个协议可能包括换行符的使用、空格的分割规则等，以确保数据能够被正确拆分和解析，从而实现学生信息的顺利传递和宿舍分配。\",\"总体而言，协议在各种情境下都是一种规范和约定，它确保参与方能够按照相同的标准进行交流和合作，从而避免混乱和误解。\",\"比如大家来之前，我们要根据学生的性别，给学生分宿舍。在这个场景中，班主任需要将学生信息表传递给南风老师，以便后者负责给学生分配宿舍。为了确保数据传递的顺利进行，他们约定了一种格式，包含四列信息：姓名、年龄、籍贯、性别。\",\"具体操作步骤如下：\",\"数据格式约定： 班主任和南风老师约定了数据格式，其中每个学生信息占据一行，各项信息之间用空格分隔。\",\"数据传递： 班主任将学生信息表发送给南风老师。在Java代码中，南风老师可以使用split(\\\"\\\\r\\\\n\\\")来按照换行符拆分每一行数据。\",\"数据解析： 南风老师在接收到数据后，遍历每一行，再使用split(\\\" \\\")按照空格拆分每个学生的具体信息。通过指定索引，南风老师可以取得姓名（index=0）和性别（index=3）等关键信息。\",\"宿舍分配： 南风老师根据学生的性别信息进行宿舍分配。这里的性别信息是约定好的第四列数据。\",\"这种约定的数据格式和操作流程，类似于一种通讯协议，在确保数据一致性的基础上，实现了班主任和南风老师之间的信息传递和宿舍分配任务。\",\"景天 19 河南 男\",\"长风 18 河南 男\",\"深澜 20 陕西 男\",\"凌霄 17 河南 女\",\"豆豆 17 湖北 女\",\"上述过程中，甲乙双方可以正常进行通讯的前提是双方都遵循同样的规则。这个就是协议。\"]},\"111\":{\"h\":\"HTTP协议\",\"t\":[\"HTTP:Hyper Text Transfer Protocol。超文本传输协议。\",\"超文本：超越了普通的文本，资源类型是丰富的，比如文本、音视频、图片等资源。\",\"传输：通讯的双方。客户端、服务器\",\"协议：通讯双方应该在传递时遵循的规则\",\"HTML: Hyper Text Markup Language\"]},\"112\":{\"h\":\"网络模型\",\"t\":[\"只是逻辑上面的概念，分层。并不是物理上面的层次。分层的目的主要是为了解耦、提升代码的可复用性、系统的可维护性。\",\"有七层的、 四层 五层。去看看，有几层模型，这几层都是什么。\"]},\"113\":{\"h\":\"HTTP协议工作流程\",\"t\":[\"1.域名解析\",\"域名：jd.com cskaoyan.com taobao.com.可以用来指代网络中的一台计算机主机，对应ip地址。\",\"jd.com----------解析 xxx.xxx.xxx.xxx\",\"浏览器缓存\",\"操作系统缓存\",\"hosts文件（127.0.0.1 localhost指的是本机）\",\"DNS服务器解析\",\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\",\"2.建立TCP连接\",\"3.浏览器发送HTTP请求\",\"4.HTTP请求经过中转到达服务器之后，被服务器接收到，服务器解析HTTP请求，并且做出HTTP响应。\",\"5.HTTP响应经过中转再次返回给客户端，客户端接收到HTTP响应，并且加以解析、渲染\",\"6.如果解析的过程中，发现需要去加载其他的css、js、img等资源，那么会自行再次发送请求，整个过程同上\",\"7.最终浏览器渲染出来页面，呈现页面给用户。\"]},\"114\":{\"h\":\"HTTP请求\",\"t\":[\"发送的HTTP请求一般称之为HTTP请求报文，分为请求行、请求头、空行、请求体四部分.其中的一些消息头和正文都是可选的，消息头和正文内容之间要用空行(CRLF即\\\\r\\\\n)隔开.·\",\"客户端发送的HTTP请求信息，一般情况下也称作HTTP请求报文。\",\"image-20230116120235895\"]},\"115\":{\"h\":\"请求行\",\"t\":[\"请求行，其实就是请求的第一行。\",\"又可以进一步分为三个部分。\",\"GET /forum-280-1.html HTTP/1.1\",\"请求方法（GET POST ）\",\"请求资源（服务器内部路径）---》 这个请求主要是干啥的？\",\"协议版本（HTTP协议的版本）\",\"GET 请求 POST请求。区别。\",\"1.语义不同。get请求是获取数据，post请求一般是提交数据\",\"2.参数放的位置不同。get请求的参数放在url上面，使用？进行拼接， post请求请求的参数放在请求体里。 url长度有限制，所以使用get请求发送的数据长度有限制。\",\"3.post请求安全一点。 因为它提交数据的时候，不能直接看到。\",\"：使用何种方法向当前的请求资源地址发起请求。常见的请求方法 GET POST\",\"GET和POST区别？\",\"本质的区别在于语义的不同。\",\"GET的语义是用来进行查询、获取数据。99%的情况下通过浏览器访问网站都是get请求。比如查询商品信息。\",\"POST的语义是用来进行提交数据。注册、登录、文件上传（微信更换头像）等\",\"如何发送GET或者POST请求？\",\"get请求： 使用浏览器，在地址栏直接输入url，直接发送的就是get请求；使用form表单\",\"post请求：使用form表单\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> 以post请求方法访问cskaoyan.com,不可以直接在浏览器地址栏直接输入网址 如果希望使用post方法访问cskaoyan.com，需要： 1.先访问1.html（当前页面），将form表单加载出来 2.点击form表单的提交按钮 <form action=\\\"http://www.cskaoyan.com\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"username\\\"><br> <input type=\\\"submit\\\"> </form> </body> </html> \",\"验证：fiddler软件\",\"安装完毕之后，打开软件。只需要操作浏览器即可，浏览器发送请求时，fiddler软件便会记录下来\",\"注意，如果是以下情况，fiddler软件无法抓包：\",\"浏览器设置了代理。（chatGPT ,大家晚上如果抓不上包，看看扩展程序）\",\"https。\",\"抓包：就是将浏览器发起的请求，显示在这个软件上。我们可以看到请求和响应的字符串。\",\"学会怎样发get请求和post请求。\",\":指的是访问服务器上面的哪个资源(访问不同页面时，区别主要在于请求资源的不同)\",\"http://www.cskaoyan.com/forum-280-1.html\",\"http://www.cskaoyan.com/forum-279-1.html\",\"上述两个不同的请求，在HTTP请求报文层面的区别是啥？\",\"GET http://www.cskaoyan.com/forum-280-1.html HTTP/1.1 GET http://www.cskaoyan.com/thread-664595-1-1.html HTTP/1.1 GET /thread-664595-1-1.html HTTP/1.1 请求资源 或者 服务器内部路径不同。就相当于告诉服务器，我需要请求不同的资源 /login /search Fiddler抓包，请求资源有点问题。它自己把url拼接上去了。 真实请求是没有这个url的。 \",\"HTTP/1.1：当前使用的是HTTP 1.1的版本\",\"在1.1之前的上一个版本是1.0.他们两者之间的区别主要在于是否支持长连接。\",\"长连接：在一个TCP连接内，是否允许发送多个HTTP请求。如果支持就是长连接。\",\"1.0版本不支持长连接\",\"1.1默认支持长连接\"]},\"116\":{\"h\":\"请求头\",\"t\":[\"请求头可以理解为是对于请求信息的额外补充，类似于合同的附加合同、补充条款。\",\"作为一个了解。不要背，如果忘了，看下文档，或者查一下。\",\"Accept:浏览器可接受的 MIME类型 */* (大类型)/(小类型)。浏览器可以接收的类型，言外之意是服务器做出响应时，应当优先响应我可以接收处理的类型。 MIME:使用一种大类型/小类型的方式将互联网上面的资源加以分类。比如text/html、text/txt、audio/mp3、video/mkv、image/jpeg、image/png Accept作为一个补充条款，浏览器告诉服务器，我优先能处理的类型。 服务器在响应的时候，会优先响应这几种指定的类型。 Accept-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集 Accept-Encoding:浏览器能够进行解码的数据编码方式，比如gzip。浏览器利用该头告诉服务器，如果返回的资源需要进行压缩，那么应该使用浏览器可以支持的压缩算法。 rar zip Accept-Language: 浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到, Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 中文简体 q=权重。 越大代表优先级越高，没写q，代表1。 假设外国人这样发： Accept-Language: en;q=1,zh-CN；q=0.9,zh;q=0.8 对于王道这个网站，有没有办法返回英语？ 没有办法； 这个东西，一定是你的网站做了国际化，才有效果。 浏览器，告诉服务器。 我这边最希望拿到的数据是中文； 如果没有，你给我返回中文繁体，权重 0.9； 国际化： 一个网站，访问有中国人，有外国人。 如果你是中国人，返回中文； 如果你是美国人，返回英文。 可以在浏览器中进行设置。twitter.com Host:初始URL中的主机和端口 Referer:包含一个URL，用户从该URL代表的页面出发访问当前请求的页面 （防盗链） Content-Type:内容类型。发送的时候的内容类型。比如我现在要上传一张图片。 If-Modified-Since: Wed, 02 Feb 2011 12:04:56 GMT 服务器利用这个头与服务器的文件进行比对，如果一致，则告诉浏览器从缓存中直接读取文件。 User-Agent:浏览器类型.是从什么浏览器发起的请求 Content-Length:表示请求消息正文的长度。表示的是体的长度。 Connection:表示是否需要持久连接。如果服务器看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接 Cookie:这是最重要的请求头信息之一 Date: Mon, 22 Aug 2011 01:55:39 GMT请求时间GMT \",\"1.直接访问A页面\",\"image-20230220173311923\",\"2.先访问B页面，通过B页面跳转到A页面\",\"image-20230220173210187\",\"referer请求头：\",\"技术手段： Referer请求头是HTTP请求中的一部分，包含了请求的来源页面的URL。可以通过解析请求头中的Referer字段来获取访问来源信息。\",\"应用场景：\",\"主播带货： 在直播带货场景中，主播贴了一个商品链接，商家可以通过解析referer来确定哪些用户是通过该主播的直播间进入的，从而进行合理的分成和奖励。\",\"图片防盗链： 在图片网站中，通过检查referer请求头，可以确定请求图片的来源，从而实现防盗链机制，确保只有合法的来源才能显示图片。\",\"谷歌广告联盟： 在广告领域，通过referer可以确定广告点击的来源，帮助广告联盟统计广告效果和提供适当的报酬。\",\"防盗链：\",\"技术手段： 防盗链是通过检查请求中的referer字段或者使用其他验证手段，确保请求者有权访问资源。可以通过服务器端设置，拒绝不合法的referer来源。\",\"应用场景：\",\"图片网站： 当你从其他网站复制URL引用图片时，图片网站可以通过检查referer来判断请求是否合法，以防止图片被盗链。\",\"直播带货： 在直播带货中，商家可以通过防盗链的方式，确保只有通过主播合法渠道进入店铺的用户才能享受相应的优惠或奖励。\",\"结论：\",\"技术手段如referer请求头和防盗链，为各种场景提供了有效的工具，使得在主播带货、图片防盗链、广告统计等应用中更加灵活和可控。通过这些手段，可以实现对请求来源的合法性判断，帮助业务方更好地管理和运营。\",\"请求头，响应头。不要背。大致知道意思（英语单词。） 如果有一些你想懂得更深一点，上网google一下。chatgpt一下。 \"]},\"117\":{\"h\":\"空行\"},\"118\":{\"h\":\"请求体（存储提交的请求数据）\",\"t\":[\"可以用来大量放置数据的地方。客户端希望提交大量的数据到服务器，那么就把数据放置在请求体里面。微信更换头像。\",\"上传一个文件，上传word txt。\"]},\"119\":{\"h\":\"HTTP响应\",\"t\":[\"服务器发送的HTTP响应信息，一般情况下也称作HTTP响应报文。\",\"服务器发送的HTTP响应一般称之为HTTP请求报文，分为响应行、响应头、空行、响应体四部分.其中的一些消息头（响应）和正文都是可选的，消息头和正文内容之间要用空行(CRLF即\\\\r\\\\n)隔开.\",\"image-20230116143613352\"]},\"120\":{\"h\":\"响应行\",\"t\":[\"响应行主要是三部分组成\",\"版本协议（HTTP/1.1 HTTP1.0）\",\"状态码\",\"原因短语\",\"版本协议\",\"状态码\",\"200：OK 一切访问过程是正常的\",\"301、302、307：重定向。当前的地址不可用，服务器需要将请求重新定向到一个新的地址。重定向一定会搭配着Location响应头一起来发挥作用。\",\"http://www.bing.com\",\"// 第一步，去访问这个网址。得到一个307状态码，相当于 服务器告诉浏览器，我这个网址用不了。 也会给你一个新的地址 http://www.bing.com/ 307 Location:https://www.bing.com/ https://www.bing.com/ 200 \",\"304:未修改。使用缓存。\",\"404：没有找到。Not Found。\",\"500：服务器异常。有bug。如果出现500状态码，那么一定有bug，但是200状态码不一定没有bug。\",\"bug: 运行异常叫bug？ 和产品经理的预期不一样，就叫bug。\",\"我传入一个班级id，你需要根据班级id，找出这个班上最高的分数的同学。\",\"找出这个班上最低的分数的同学。\",\"原因短语 OK\"]},\"121\":{\"h\":\"响应头\",\"t\":[\"Location: http://www.cskaoyan.com/指示新的资源的位置.需要搭配着重定向状态码一起来使用。 // 301 302 307 一定要返回一个location。告诉浏览器去请求新的地址。 Server: apache tomcat 指示服务器的类型 Content-Encoding: gzip ； 服务器发送的数据采用的编码格式。 Content-Length: 80 告诉浏览器正文的长度 Content-Language: zh-cn; 服务发送的文本的语言 Content-Type: text/html; 服务器发送的内容的MIME类型, // 写这个Content-Type有什么作用。 图片按照什么发的？音频怎么发 // 必须要把这个图片进行 编码 转成二进制。 写到响应体里面 // 浏览器这边。 对数据进行解析。尤其是响应体里面的图片。 // 如果不写Content-Type， 可能会导致乱码。 // 如果写错了，会发生什么。 乱码。 乱码的本质： 编解码不一致。 Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT; 文件的最后修改时间 Refresh: 1;url=http://www.cskaoyan.com; 指示客户端刷新频率。单位是秒 相当于告诉浏览器，这边 1s后对页面进行刷新。 刷新的网址是 url=http://www.cskaoyan.com; Content-Disposition: attachment; filename=aaa.zip; 指示客户端保存文件,直接下载文件 Set-Cookie: SS=Q0=5Lb_nQ; path=/search; 服务器端发送的Cookie Expires: 0 Cache-Control: no-cache (1.1) Connection: close/Keep-Alive Date: Tue, 11 Jul 2000 18:23:51 GMT // 有一些情况是不希望进行缓存。 // 就可以通过这两个响应头进行控制。 \"]},\"122\":{\"h\":\"空行\"},\"123\":{\"h\":\"响应体(是存放返回数据的地方)\",\"t\":[\"用来存放服务器返回给客户端大量的数据。响应体里面的数据会最终出现在浏览器的窗口界面中。\",\"可以响应文本类型，也可以响应二进制类型；如果响应二进制类型，那么需要返回特定的Content-Type\",\"比如，现在写回了一张图片。但是content-type写的是text/html\",\"对于浏览器来说。有没有啥问题？会乱码。\",\"浏览器得到的信息： 我现在拿到了一个网页。所以拿响应体，会按照网页来进行解析。就会乱码\",\"乱码的本质： 编解码不一致。\",\"比如返回html，浏览器会把这个东西显示在页面上。\",\"返回图片，会显示到页面上。\",\"html和图片 都是放在 响应体里面的。\"]},\"124\":{\"h\":\"请求完整的处理流程(重要)\",\"t\":[\"以访问http://www.cskaoyan.com为例\",\"1.域名解析。首先尝试使用浏览器缓存查找，再次通过操作系统缓存查找，借助于hosts文件，最终利用DNS服务器来进行解析。\",\"​ cskaoyan.com------58.211.2.79（中国 江苏省 苏州市）\",\"2.建立TCP连接。\",\"3.浏览器会代理用户发送HTTP请求报文(GET /1.html HTTP/1.1...........)，请求报文在网络中中转传输到达服务器之后，会服务器接收到，进行解析\",\"4.服务器产生HTTP响应报文（HTTP/1.1 200 OK...........）,响应报文在网络中中转传输返回给客户端之后，客户端会将响应报文进行解析、渲染（显示到页面上）\",\"5.如果发现需要再次加载新的资源文件，那么浏览器会自行再次发起请求，过程同上\",\"6.加载获取到所有的资源文件之后，最终渲染（显示），将页面呈现在用户面前。\"]},\"125\":{\"h\":\"HTTPS\",\"t\":[\"目前主流的网站使用的都是https协议了。\",\"HTTPS = HTTP + Secure/SSL\",\"相当于，只是给HTTP加了一些保护壳。如果在企业开发过程中，我们不用去管它。因为有运维。\",\"http协议目前存在的问题？\",\"1.传输过程全程明文传输\",\"2.不验证通讯另一方的身份\",\"3.没有完整性校验，可能报文在中途已经被篡改，但是无从得知\",\"https分别针对上述三点做了改进：\",\"1.加密\",\"加密算法：对称加密（加密解密使用的是同一把秘钥；效率高，但是安全性不高）、非对称加密（公钥加密，私钥解；公钥加密，公钥无法解;安全程度非常高，但是效率低）\",\"混合加密\",\"对称加密： 加密算法： 对每一个字母，+1\",\"hello,java --> ifmmp.kbwb ---> hello,java。\",\"公钥 私钥。 公钥加密，私钥解密。 私钥加密，公钥解密。\",\"2.证书：证书颁发者（一般是一个权威机构）颁发给当前网站的一个凭证。\",\"3.完整性校验：哈希。\",\"hello,java ---> fdkljsahfjksdhfshdkfjhdskjfhsdjkl\",\"hello,java1 ----> 145646546132416556655\",\"我们开发的时候，只用了解http. https是在网络的出入口配置的，是已经直接配置好的。\"]},\"126\":{\"h\":\"概念\",\"t\":[\"服务器：两层含义。软件层面：软件，可以将本地的资源发布到网络中，供网络上面的其他用户来访问，比如tomcat；硬件层面：一台性能比较高的计算机主机，云服务器。\",\"有些人，只是想下午两小时，使用以下性能比较高的电脑。64个CPU，256G内存。 5w 10w。可以找阿里云，这种大公司。\",\"为什么阿里云，有这么多电脑？双十一的时候。 1w台电脑来提供服务。\",\"比如，平时它只需要500台服务器。 但是双十一峰值的时候，可能需要1w台。 其余的9500台电脑。其他时候，租出去给别人用。 等到双十一的时候，我自己用。\",\"服务器开发：指的是在服务器软件程序中进一步去编写程序来运行。\",\"静态资源：页面一成不变的。小说， 图片\",\"动态资源：富有交互性、变化性。目前访问的网站页面基本都是动态资源。本质就是程序。比如登录之后会显示各自的用户名。开发动态资源的技术有很多种，其中java语言中 Servlet。\"]},\"127\":{\"h\":\"手写简易服务器\",\"t\":[\"服务器程序：持续不断地监听某一端口号；如果客户端往当前端口号发送请求，那么服务器需要做出响应。\",\"要求：涉及协议的部分需要掌握，其他部分根据自己的情况来。\",\"手写服务器，接收请求，然后 1.html 2.txt 返回这种东西。\",\"package com.cskaoyan.server; import java.io.*; import java.net.ServerSocket; import java.net.Socket; import java.util.Set; /** * @ClassName MainServer * @Description: 对于服务器来说，需要做的事情就是根据客户端发送过来的请求报文，然后取出请求资源部分 * 然后做出对应的响应（如果文件存在，则将文件的数据响应出去；如果文件不存在，则返回404状态码） * @Author 远志 zhangsong@cskaoyan.onaliyun.com * @Date 2022/10/24 15:53 * @Version V1.0 **/ public class MainServer { public static void main(String[] args) { //服务器程序，需要监听某一端口号 8080 try { ServerSocket serverSocket = new ServerSocket(8080); //client就是连接进来的一个客户端 while (true){ Socket client = serverSocket.accept(); //获取客户端提交过来的信息 new Thread(new Runnable() { @Override public void run() { Request request = new Request(client); String requestURI = request.getRequestURI(); // String method = request.getMethod(); // String host = request.getHeader(\\\"Host\\\"); // Set<String> headerNames = request.getHeaderNames(); // for (String headerName : headerNames) { // String value = request.getHeader(headerName); // } //已经获取到了请求资源，有针对性的做出响应 // /1.html /2.html //subString1目的是为了把前面的/去掉 OutputStream outputStream = null; try { outputStream = client.getOutputStream(); File file = new File(requestURI.substring(1)); StringBuffer buffer = new StringBuffer(); if(file.exists() && file.isFile()){ //200 //响应HTTP响应报文 buffer.append(\\\"HTTP/1.1 200 OK\\\\r\\\\n\\\"); buffer.append(\\\"Content-Type:text/html\\\\r\\\\n\\\"); buffer.append(\\\"Server:changfengdeeBMW\\\\r\\\\n\\\"); buffer.append(\\\"\\\\r\\\\n\\\"); outputStream.write(buffer.toString().getBytes(\\\"UTF-8\\\")); FileInputStream fileInputStream = new FileInputStream(file); int length = 0; byte[] bytes = new byte[1024]; while ((length = fileInputStream.read(bytes)) != -1){ outputStream.write(bytes, 0, length); } return; } //404 //如果希望给客户端返回信息 buffer.append(\\\"HTTP/1.1 404 Not Found\\\\r\\\\n\\\"); buffer.append(\\\"Content-Type:text/html\\\\r\\\\n\\\"); buffer.append(\\\"Server:changfengdeeBMW\\\\r\\\\n\\\"); buffer.append(\\\"\\\\r\\\\n\\\"); buffer.append(\\\"<div style='color:red;align:center'>File Not Found</div>\\\"); outputStream.write(buffer.toString().getBytes(\\\"UTF-8\\\")); } catch (IOException e) { e.printStackTrace(); }finally { if(outputStream != null){ try { outputStream.close(); } catch (IOException e) { e.printStackTrace(); } } } } }).start(); } } catch (IOException e) { e.printStackTrace(); } } } \",\"package com.cskaoyan.server; import java.io.IOException; import java.io.InputStream; import java.net.Socket; import java.util.HashMap; import java.util.Map; import java.util.Set; /** * @ClassName Reqeust * @Description: TODO * @Author 远志 zhangsong@cskaoyan.onaliyun.com * @Date 2022/10/24 16:07 * @Version V1.0 **/ public class Request { private String requestMessage; private String method; private String requestURI; private String protocol; public String getMethod() { return method; } public String getRequestURI() { return requestURI; } public String getProtocol() { return protocol; } private Map<String, String> requestHeaders = new HashMap<>(); public String getHeader(String headerName){ return requestHeaders.get(headerName); } public Set<String> getHeaderNames(){ return requestHeaders.keySet(); } public Request(Socket client) { parseRequest(client); parseRequestLine(); parseRequestHeader(); } /** * 解析请求报文的请求头部分 * 如何解析？请求头开始的标志：\\\\r\\\\n 请求头结束的标志：\\\\r\\\\n\\\\r\\\\n * 解析之后的请求头存放在哪？map */ private void parseRequestHeader() { int begin = requestMessage.indexOf(\\\"\\\\r\\\\n\\\"); int end = requestMessage.indexOf(\\\"\\\\r\\\\n\\\\r\\\\n\\\"); String header = requestMessage.substring(begin + 2, end); String[] split = header.split(\\\"\\\\r\\\\n\\\"); for (String s : split) { int index = s.indexOf(\\\":\\\"); String key = s.substring(0, index).trim(); String value = s.substring(index + 1).trim(); requestHeaders.put(key, value); } } /** * 解析请求报文的请求行部分 GET /2.html HTTP/1.1\\\\r\\\\n */ private void parseRequestLine() { int index = requestMessage.indexOf(\\\"\\\\r\\\\n\\\"); // GET /2.html HTTP/1.1 String line = requestMessage.substring(0, index); String[] parts = line.split(\\\" \\\"); this.method = parts[0]; this.requestURI = parts[1]; this.protocol = parts[2]; } private void parseRequest(Socket client) { InputStream inputStream = null; try { inputStream = client.getInputStream(); byte[] bytes = new byte[1024]; //note：下面read这一步不要再循环里面读取 int length = inputStream.read(bytes); this.requestMessage = new String(bytes, 0, length); System.out.println(requestMessage); } catch (IOException e) { e.printStackTrace(); } } } \",\"能写就写。不能写算了。一定要理解这个过程。\"]},\"128\":{\"h\":\"JavaEE规范\",\"t\":[\"JavaEE规范：制定了一系列的接口。相应的厂商需要实现该接口，对于开发者来说，\",\"如果没有这样一套规范，对于服务器A厂商。 // 获取请求方法名称 getMethodName() // 获取版本协议 getProtocol() // 获取请求头 String getHeader(String name); 后续，我想切换服务器了。 对于服务器厂商B。 // 获取请求方法 getMethod(); // 获取版本协议 getProtocol() // 获取请求头 Map<String,String> getHeaders(); interface Request{ String getHeader(String name); String getMethod(); String getResourceName(); } // 服务器厂商A，需要实现这套接口； 服务器厂商B需要实现这套接口。 // 用接口编程有啥好处，我只需要对着接口开发。 至于其他的我不关系。 // Request request = new ServerARequest(); // request.getHeader(\\\"refer\\\") // request.getMethod(); // Request request = new ServerBRequest(); // 接口有什么好处。 定义规范。 比如tomcat实现了这个规范， 最后再需要使用 header的时候 // 只需要面向接口编程 Request request = ********* // request.getHeader(\\\"refer\\\") // 如果没有这样一套规范，tomcat这样定义 // String header(String name); // String method(); // 服务器厂商B // String fetchHeader(String name); // String fetchMethod(); CutRequest 来解析 方法，资源，请求头 简易的服务器。 getMethod() getResourceName() getProtocol() Request2 // String fetchHeader(String name); // String fetchMethod(); // String fetchResourceName(); 面向接口编程： Request request = new TomCatQuquest(); request.getHeader() \",\"以服务器部分来做一个举例说明：\",\"比如说某个初创公司，使用了服务器A产品，需求：获取到referer请求头的值，进行统计 \",\"A服务器提供了一个封装。叫做RequestA.getHeader(\\\"referer\\\")\",\"之后，初创公司更换了另外一个服务器产品B \",\"B服务器提供一个获取请求头的方法是RequestB.getRequestHeader(\\\"referer\\\")\",\"如果对于这个初创公司，从服务器产品A切换到B，需要做哪些事情？涉及到request相关的部分全部需要推到重写。\",\"切换服务器麻烦\",\"如果获取请求参数的方法参数根本不一样，很难兼容\",\"JavaEE规范，针对服务器这部分，做了一个规定：\",\"请求报文 的封装对象统一使用HttpServletRequest接口来充当，里面制定了非常详细的方法。\",\"String getHeader(String name); String getMethod(); \",\"各个服务器 厂商实现该接口即可。\",\"RequestA impl HttpServletRequest RequestB impl HttpServletRequest \",\"初创公司的开发人员来说，我们编写的代码只需要这么去写HttpServletRequest.getHeader(key)\",\"统一了操作，今后如果想从服务器A切换到服务器B，很容易就切换过去了。\",\"面向接口编程。 就是使用接口来接，不要使用具体的实现类来接。\",\"好处是，等到你需要切换服务的时候，只用改一行代码，其余代码全部不用动。\"]},\"129\":{\"h\":\"Tomcat\"},\"130\":{\"h\":\"安装\",\"t\":[\"直接解压缩到盘符根目录即可（推荐）\",\"注意：无论使用哪个软件，尽量不要代码放置在含有空格、中文、目录价结构非常深的目录中（idea、tomcat、vue等）\",\"目录结构介绍\",\"bin：存放命令的目录。启停tomcat的命令。 conf：配置文件文件夹，对tomcat进行配置。 logs：日志目录，排查故障所用。 webapps：部署资源 \"]},\"131\":{\"h\":\"启动\",\"t\":[\"1.双击startup.bat文件。\",\"2.bin目录下唤出cmd，执行startup\",\"常见的启动故障：\"]},\"132\":{\"h\":\"停止\",\"t\":[\"1.双击shutdown.bat文件\",\"2.bin目录下唤出cmd，执行shutdown\",\"3.可以在tomcat启动成功的窗口中按住ctrl键，多次按c键，也可以结束。\",\"4.直接关掉cmd。即可。\"]},\"133\":{\"h\":\"部署资源\"},\"134\":{\"h\":\"直接部署\",\"t\":[\"直接将资源文件放置在webapps目录下。\",\"步骤：\",\"1.需要在webapps目录下新建一个目录,也建议大家使用英文\",\"2.需要将资源文件放置在该目录下\",\"image-20221024174329344\",\"如果希望访问该文件，应该如何访问？\",\"http://localhost:8080/{文件夹的名称}/相对路径\",\"http://localhost:8080/test52th/\",\"http://localhost:8080/{目录名称} --》 相当于找到了 webapps目录下的 \",\"http://localhost:8080/app1 --> 相当于找到webapps/app1的目录\",\"注意：\",\"不能将文件直接放置在webapps目录下。需要放在webapps目录下的文件夹内。\",\"我们不想直接将文件拷贝到 webapps目录下，我们有啥办法完成部署？\"]},\"135\":{\"h\":\"虚拟映射\",\"t\":[\"正常情况下来说，需要部署资源，是要在webapps目录下操作的。但是如果希望不再webapps目录下，可不可以部署呢？可以。\",\"不在webapps目录这种方式叫做。虚拟地映射到tomcat的webapps目录下。\"]},\"136\":{\"h\":\"conf/Catalina/localhost(掌握)\",\"t\":[\"新建一个xml文件，xml文件的名称（user1.xml）里面配置Context节点信息\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Context docBase=\\\"D:\\\\app1\\\"/> \",\"比如，我们现在新建了一个xml文件，名字叫做user1.xml\",\"http://localhost:8080/{xml的名称} ---》 其实相当于找到 {docBase}路径\",\"我想访问这个{docBase}路径下。 222/1.png的图片，现在需要怎么写？\",\"http://localhost:8080/user1/222/1.png\",\"现在，想访问 test333里面的 1.txt。需要怎么写？\",\"localhost:8080/user1/test333/1.txt\",\"这样写没用：localhost:8080/user1/../test4.war\"]},\"137\":{\"h\":\"conf/server.xml(了解)\",\"t\":[\"需要在Host节点下配置Context节点\",\"/app452-----Context\",\"<Context path=\\\"/app452\\\" docBase=\\\"D:\\\\app2\\\" /> \",\"现在我们需要找 D:/app2。这时候怎么写\",\"http://localhost:8080/{path的值} 其实就相当于找到docBase。\",\"如果想访问 docBase下的。 1.txt --》 localhost:8080/app452/1.txt\",\"如果想访问 docBase下的。 test1/test2/1.png --> localhost:8080/app452/test1/test2/1.png\",\"这个作为了解即可，因为修改配置文件比较危险。\"]},\"138\":{\"h\":\"原理\",\"t\":[\"把用户输入的一个路径（url），加以解析转换成服务器所在的主机本地硬盘路径。\",\"需要能够获取到该文件的硬盘路径。\",\"比如，我们在url上输入 http://localhost:8080/user/1.txt最终，Tomcat需要在本地找到这样一个1.txt，然后把数据写回给浏览器。\",\"大家一定要掌握这个映射关系。\",\"war包部署到了tomcat中之后，tomcat会自行将其解压缩成目录，访问方式和上述完全一致。\",\"如果大家不写前面的路径。其实是访问的 webapps目录下的 ROOT文件夹。 默认应用。\",\"虚拟映射和直接部署冲突的时候。是以虚拟映射为准。\",\"如果在webapps目录下，有这个文件夹。在conf/Catalina/localhost里面也有 ROOT.xml。\",\"这时候，是以虚拟映射为准。\"]},\"139\":{\"h\":\"Tomcat设置\",\"t\":[\"比如访问www.cskaoyan.com时，发现没有携带端口号，如果没有端口号，那么说明的是当前服务器使用的是当前协议的默认端口号。\",\"http : 80\",\"https: 443\",\"对于http协议来说，默认端口号是80端口号。如果你也希望访问你的tomcat时，也不携带端口号，你只需要设置你的tomcat监听80端口号即可。\",\"conf/server.xml可以在这里修改Tomcat的端口。需要主要，修改的protocal 是HTTP/1.1。\",\" <Connector port=\\\"80\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" /> \",\"tomcat中存在着一个缺省应用，如果没有找到匹配的应用时，则将该请求交给缺省应用来处理。\",\"/test1\",\"localhost:80/test3/1.png\",\"缺省应用的特征：\",\"1.如果希望配置一个ROOT应用，那么webapps目录下新建一个ROOT目录；conf/Catalina/localhost目录下新建一个ROOT.xml\",\"2.但是ROOT应用下的资源文件在访问时，不需要携带应用的名称。\",\"虚拟映射也可以配置一个ROOT.xml。如果虚拟映射和直接部署都有。虚拟映射的优先级高。\",\"假设，如果你部署了一个资源文件，但是希望在访问时不携带应用名，则直接设置应用名为ROOT即可。\",\"比如访问http://localhost，可以显示出一个页面。访问的是哪个页面呢？\",\"1.没有应用名，说明访问的是ROOT应用\",\"2.没有页面，说明访问的是欢迎页面(conf/web.xml文件中有配置)\",\"表示的是：如果请求没有指明具体访问的是哪个页面，那么会在当前应用下依次去查找是否存在该文件，如果存在，则加载；如果不存在，则返回404\",\"<welcome-file-list> <welcome-file>index.html</welcome-file> <welcome-file>index.htm</welcome-file> <welcome-file>index.jsp</welcome-file> </welcome-file-list> \",\"要求通过ip地址就可以访问到该文件。\",\"现在，想通过ip地址，就访问到 D:\\\\test333\\\\1.txt\",\"输入： http://localhost 直接访问到\",\"改端口。 把端口改成80\",\"虚拟映射。 ROOT.xml --> docBase D:\\\\test333\",\"加1.txt到欢迎页面。\",\"1.有部分同学可能80端口号没法改，因为已经被微软的产品占用了\",\"2.如果自己可以访问，别人访问不到，关注防火墙\",\"Tomcat控制台乱码，是因为我们的cmd是GBK的编码，Tomcat是UTF8的编码\",\"修改logging.properties配置 : 打开tomcat/conf/logging.properties 添加语句：java.util.logging.ConsoleHandler.encoding = GBK 重启tomcat，查看日志数据即可 \",\"中文文件乱码问题\",\"访问文件。1.txt里面有 中文，也会乱码。\",\"这个乱码我们目前不需要解决。\",\"映射路径问题\",\"新建了 user1.xml 配置的docBase一定要是一个路径，不能是一个文件。 <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Context docBase=\\\"D:\\\\app1\\\\1.png\\\"/> \"]},\"140\":{\"h\":\"02. SQL\",\"t\":[\"学习目标：SQL是重点，需要重点掌握。\",\"掌握什么是数据库。为什么有数据库这个东西\",\"了解关系型数据库，非关系型数据库。在工作中的主要区别。\",\"熟悉库、表、数据，内部组织形式\",\"掌握对库的增加、删除、查询操作。修改操作了解即可\",\"掌握对表的增加、删除、查询操作。修改操作了解即可\",\"掌握对数据的增删改查。非常重要。\",\"掌握特殊关键字的使用\",\"了解多表设计，并能对常见的表格进行建表操作\",\"了解数据库设计三大范式\",\"熟练掌握多表查询，内连接和外连接的区别及联系。\"]},\"141\":{\"h\":\"什么是数据库\",\"t\":[\"什么是仓库，就是有效的组织物品的地方。所谓数据仓库，就是集中存放数据的地方，且可以有效的组织这些数据，利用这些数据。\",\"image-20230209171150658\",\"生活中的例子：\",\"图书馆。 书非常多。 索引。 高效组织图书的仓库。\",\"超市。 山姆。万达超市。\",\"txt也可以存储。excel也可以存储。为什么需要数据库呢？\",\"组织数据的效率不高。\",\"生活中excel，很多单位使用excel来存储一些数据，比如一些仓库，或者班主任让大家填写信息的时候。\",\"那我们为什么需要学习数据库呢？，而且数据量太大的情况下， 和excel类似，数据库也是采用表格来管理数据的。\",\"Database**：**A database is an organized collection of data,stored and accessed electronically.\",\"数据库是按照数据结构来组织、存储和管理数据的仓库。分门别类的来存储数据。\",\"数据库是一种结构化信息或数据的有组织的集合。\",\"在现实中，数据、数据库管理系统 (DBMS) 一起被称为数据库系统，通常简称为数据库。\",\"结构化信息： 对于每一行，结构都是一致的。比如第一行 有三列，第10000行，也有三列。\"]},\"142\":{\"h\":\"数据库的历史\",\"t\":[\"自 20 世纪 60 年代初诞生至今，数据库已经发生了翻天覆地的变化。最初，人们使用分层数据库（树形模型/一对多）和网络数据库（图模型/多对多）这样的导航数据库来存储和操作数据。这些早期系统虽然简单，但缺乏灵活性。 20 世纪 80 年代，关系数据库开始兴起. 20 世纪 90 年代，面向对象的数据库开始成为主流。 最近，随着互联网的快速发展，为了更快速地处理非结构化数据，NoSQL 数据库应运而生。主要特点就是快。\",\"问题： 数据是存在哪的？ 数据库的数据。 硬盘。\",\"硬盘： 持久化、速度慢\",\"内存： 非持久化、速度快。\"]},\"143\":{\"h\":\"关系型数据库\",\"t\":[\"关系型数据库表示这种数据库，不仅可以存储数据，还可以存储数据与数据之间的关系。 这种，不仅可以存数据，还可以用存关系的数据库，这就是关系型数据库。比如这个省份表，城市表，以及它们的关系，在关系型数据库中，可以存储这种关联。\",\"image-20221205094423367\",\"接下来，我们介绍几款常见的关系型数据库。\",\"Oracle：甲骨文公司的一个产品，世界上使用最多的收费型数据库。性能较好。\",\"又名Oracle RDBMS(Relational Database Management System)，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小微机环境。它是一种高效率的、可靠性好的、适应高吞吐量的数据库方案：大商业公司，政府使用较多，但近几年由于一些原因，银行，政府机构等正在替换Oracle。\",\"MySQL：最流行的关系型数据库，之前是开源的。\",\"由瑞典MySQL AB公司开发，目前属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一。 目前分为两种版本：社区版，收费版。 注：2008年被Sun公司收购。2009年，Sun公司被Oracle收购。：中小企业，追求快速发展。性能非常优秀。\",\"MariaDB：MySQL原作者开发的，MySQL被Oracle收购后，考虑到Oracle可能会将其闭源，所以基于MySQL的一个分支，又开发了一个MariaDB。\",\"MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。MariaDB名称来自Michael Widenius的女儿Maria的名字。：中小企业，追求快速发展。MySQL作者的粉丝。MaxDB\",\"Sql server：微软开发的。\",\"SQL Server是由微软公司开发的一种关系型据库管理系统，它已广泛用于电子商务、银行、保险、电力等行业。SQLServer提供了对XML和Internet标准的支持，具有强大的、灵活的、基于Web的应用程序管理功能。而且界面友好、易于操作，深受广大用户的喜爱，但它只能在Windows平台上运行(2017 SQL Server后对Linux支持)，并对操作系统的稳定性要求较高，因此很难处理日益增长的用户数量。：中大型企业。国内用的不多。\",\"DB2数据库\",\"DB2数据库是由IBM公司研制的一种关系型数据库管理系统，主要应用于OS/2、Windows等平台下，具有较好的可伸缩性，可支持从大型计算机到单用户环境。 DB2支持标准的SQL，并且提供了高层次的数据利用性、完整性、安全性和可恢复性，以及从小规模到大规模应用程序的执行能力，适合于海量数据的存储，但相对于其他数据库管理系统而言，DB2的操作比较复杂。：大公司，政府部门\",\"PostgreSQL\",\"是以加州大学伯克利分校计算机系开发的 Postgres 版本 4.2 为基础的对象关系型数据库管理系统（ORDBMS）。 因为许可证的灵活，任何人都可以以任何目的免费使用、修改和分发PostgreSQL。：有自研能力的公司使用较多。例如国内的华为。\",\"去 IOE（阿里提出的） ： IBM的小型机（20-30w），Oracle的数据库，EMC，EMC代表数据存储\"]},\"144\":{\"h\":\"非关系型数据库(NoSQL)\",\"t\":[\"Not only SQL 不仅仅只有SQL。，主要是用来做一些关系型数据库不擅长的事情。关系型数据库的数据，一般是存储在磁盘上，所以速度比较慢。非关系型数据库一般是存在内存中的，所以性能比较好。\",\"SQL： Structed Query Lanugage,结构化查询语言。是一种专门用来和数据库通信的标准语言，用于向数据库存取数据以及查询、更新和管理关系数据库系统。 每个关系型数据库都支持SQL语言。 为什么有SQL：数据库产品纷繁复杂，如果没有一套标准的查询语言，对开发者的学习成本和企业的切换成本很高。\",\"常见的非关系型数据库\",\"Redis（后面会学）： 最常用的非关系型数据库，数据存在内存，速度快，吞吐量高。单机10w吞吐。\",\"Remote Dictionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。 Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。它是一个基于内存实现的键值型非关系（NoSQL）数据库 Redis 遵守 BSD 协议，实现了免费开源，其最新版本是 6.20，常用版本包括 3.0 、4.0、5.0。自 Redis 诞生以来，它以其超高的性能、完美的文档和简洁易懂的源码广受好评，国内外很多大型互联网公司都在使用 Redis，比如腾讯、阿里、Twitter、Github 等等。\",\"redisCli.put(\\\"name\\\", \\\"zhangsan\\\");\",\"redisCli.get(\\\"name\\\"); Map\",\"Memcached\",\"基于内存的key-value数据库。出现自Redis之前，但有一些问题。\",\"数据全部在内存中，断电后会挂掉，数据不能超过内存大小\",\"支持的类型不丰富 所以目前公司使用它的较少，一些老项目可能仍然在使用，新项目无使用它的。\",\"Mongodb：文档数据库。存储大量文档的。\",\"Hbase：大数据领域使用的比较多的数据库，列式数据库。\",\"数据库有很多种，这无关孰优孰劣(没有谁好谁差之分)，主要取决于企业希望如何使用数据.\",\"企业要求： 钱少，能用。性能差不多就可以。 MySQL\",\"政府要求： 钱无所谓，千万数据要安全。\",\"关系型数据库和非关系型数据库, 区别很多. 而在关系型和非关系型数据中,最本质的区别是: 关系型数据库以数据和数据之间存在的关系维护数据, 而非关系型数据库是指存储数据的时候数据和数据之间没有什么特定关系. 在大多数时候, 非关系型数据库是在传统关系型数据库基础上(其实已经基本上完全不同), 在功能上简化, 在数据存储结构上大大改变, 在效率上提升. 通过减少用不到或很少用的功能, 在能力弱化的同时也带来产品性能的大幅度提高. 但是本质上讲, 他们都是用来存储数据的. 而对于我们Java后端开发来讲, 我们在工作中基本上是以关系型数据库为主, 非关系型数据库为辅的用法.\",\"关系型数据库： 存在磁盘上。速度慢；\",\"非关系型数据库： 存在内存上，速度快。\",\"主要是用关系型数据库。 在一些辅助的接口上，会用非关系型数据库。\",\"/good/miaosha 秒杀的接口，对速度的要求非常高，这时候会使用非关系型数据库来做一些事情。\",\"怎么确认安装完成了\",\"需要配置环境变量\",\" 默认安装目录： C:\\\\Program Files\\\\MySQL\\\\MySQL Server 5.7。里面有一个bin目录，都是启动命令等。\",\"环境变量的设置 \",\"对于win7的同学，操作环境变量需要注意。添加Path时候，不要把其他的环境变量全部删除了。\"]},\"145\":{\"h\":\"软件架构\",\"t\":[\"在互联网的网络交互和数据访问中,一般常见两种网络架构模式: B/S结构或者C/S结构. B/S: Browser-Server即浏览器和服务器, 即通过浏览器和服务器发起网络交互的数据请求. C/S: Client-Server即客户端和服务器, 即通过客户端和服务器发起网络交互的数据请求. \"]},\"146\":{\"h\":\"MySQL的内部数据组织方式\",\"t\":[\"在MySQL中, 我们对数据的组织逻辑上是按照库/表/数据 这种结构组织的. 数据库: 表示一份完整的数据仓库, 在这个数据仓库中分为多张不同的表. 表: 表示某种特定类型数据的的结构化清单, 里面包含多条数据. 数据: 表中数据的基本单元.\",\"Server端是 数据库/表/数据这样的形式。 所以学习的顺序是：\",\"对库的增删改查\",\"对表的增删改查\",\"对数据的增删改查\",\"SQL：结构化查询语言（Structured Query Language）简称SQL，是一种专门用来和数据库通信的语言，用于向数据库存取数据以及查询、更新和管理关系数据库系统。 与其他语言(Java, C++...)不同的是, SQL由很少的词构成, 这是希望从数据库读写数据时能以更简单有效的方法进行.\",\"SQL有如下优点\",\"SQL语言不是某个特定的数据库提供的语言, 它是一种数据库标准语言.(最初由美国国家标准局 ANSI于1986年完成第一版SQL标准的定义,即SQL-86). SQL简单易学, 是由多个描述性很强的单词构成, 并且这些单词数量不多. SQL尽管看上去很简单, 但是非常强有力; 灵活的使用SQL, 可以进行比较复杂的和高级的数据库操作.\"]},\"147\":{\"h\":\"登录数据库\",\"t\":[\"MySQL是C/S架构的软件，所以我们的Server是一直启动着的，我们使用官方提供的客户端去连接Server，然后发送命令给server端执行，server端返回执行结果。 \",\"$ mysql -uroot -p 输入密码 -- 要注意。一定要配置环境变量之后才能执行这个命令。 $ mysql -uroot -p123456 -- 不建议大家直接把密码写在控制台上 不建议这样写。因为按上下键，可能能看到你的密码，不安全。 \",\"-- 大家进入企业里面了。注意用户名和密码。 一般不是root ec2-198-51-100-1.compute-1.amazonaws.com:3306 33060 33061 33062 Qw4Rt9Lp7Kj2HxY Zs8Xd3Cv6Nm1GbE 有个同学入职了。三天不知道怎么连数据库。 root 123456 -- 环境的问题，可以问同事，不要怕。你不知道，也可以先问同学，问老师。 -- 现在要查看一个机器的CPU和内存。 -- 问问chatGPT -- 搜索搜索。 -- 也要注意度。 ec2-198-51-100-1.compute-1.amazonaws.com:3306 Qw4Rt9Lp7Kj2HxY Zs8Xd3Cv6Nm1GbE \"]},\"148\":{\"h\":\"查看库\",\"t\":[\"-- 查看所有数据库 show databases; -- 模糊匹配查找数据库 show databases like \\\"test%\\\"; -- test% 表示以test开头 -- %info 表示以info结尾 -- %info% 表示 info可以出现在任意位置 -- 查看创建数据库命令 show create database db_name; -- 查看创建db_name 的SQL语句 `test2` 单引号的作用，标识这是一个普通的文本，不是关键字。比如创库的时候，想创建一个select库。 select create database `select`; ``的位置，在esc的下方，1的左边，注意输入法是英文的。 \",\"不要删除默认的自带的库。尤其是mysql 、performance_schema 、information_schema\"]},\"149\":{\"h\":\"创建库\",\"t\":[\"-- 创建一个叫 db_name 的数据库 注意 库名，表名，列名均不区分大小写 -- dbName db_name -- dbName dbname create database db_name; -- 取数据库的名字的时候。要用 下划线进行分割。 ---> 库名 表名 字段名，都必须是小写，以下划线进行分割。无论题目怎么要求。 写错了 跑2km。 -- 不能这样写 create database teacherInfo; -- 要用下划线来区分单词 create database teacher_info; -- 指定字符集和默认校对规则 -- 创建一个数据库，字符集是 utf8mb4 校对规则 utf8mb4_general_ci create database db_name character set utf8mb4 collate utf8mb4_general_ci; create database db_name character set utf8mb4 collate utf8mb4_bin; \",\"注意 ：库名，表名，列名均不区分大小写，所以如果要区分单词，使用下划线代替。\",\"比如：希望一个用来存储学生信息的库，应该命名为student_info，而不是studentInfo\",\"阿里编程规范\",\"image-20230411110258332\",\"MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则也可以称为排序规则，是指在同一个字符集内字符之间的比较规则。字符集和校对规则是一对多的关系，每个字符集都有一个默认的校对规则。\",\"推荐大家使用: utf8mb4 。\",\"mysql里面有一个utf8 ,但是它是三个字节的，有一些四个字节的表示不了。\",\"utf8mb4才是真正的utf-8。\",\"字符集，就是MySQL存储数据的方式。比如现在有一个zhansgan 的字符串，需要存储到MySQL中。因为文件系统中，只能存二进制的。所以需要把zhangsan进行编码，编码之后，才能写入到磁盘里面。\",\"校对规则，是指排序的。比如有一些排序规则区分大小写，有一些排序规则不区分大小写.\",\"utf-8: 使用4个字节来代表一个字符。 MySQL官方有一个utf8.\",\"字符集： 就是MySQL存储数据的方式。 比如，要存储 \\\"张三\\\" 进入数据库。\",\"校对规则： 就是排序的。\",\"latin1: \",\"insert into user values (1, \\\"张三\\\"); order by name; 比如校对规则： 有人 name abc Abc ABC ABc 如果大家没有设置字符集的时候，是latin1的字符集。然后不能存储中文。 latin1_swedish_ci (case insensitive) latin1_general_cs (case sensitive) 区分大小写的 (_cs) 不区分大小写的。(_ci) \",\"注意：如果不设置字符集，有可能会使用了默认的latin1，导致存储中文报错。\",\"标准的utf8: 使用1-4字节来表示字符。\",\"在MySQL里面有utf8，但是是个假的。3个字节。所以我们一般不用utf8。\",\"utf8mb4 ，一般使用utf8mb4来当做字符集。\",\"默认校对规则： utf8mb4_general_ci。\",\"utf8mb4_bin： 区分大小写。\",\"-- 查看所有的字符集 show character set; -- 查看所有的校对规则 show collation where charset='utf8mb4'; \",\"大小写不敏感是啥意思？ Abc ABC abc 。不是存储的时候会变，只是获取出来时候，排序的规则。\",\"我存储 Abc 会不会变成 abc.字符集， 校对规则。\",\"select name from user order by name;\"]},\"150\":{\"h\":\"删除数据库\",\"t\":[\"-- 删除数据库 drop database db_name; -- 不要瞎操作。尤其是工作过程中。删库一定要小心再小心。要留证。 -- 删库是一个高危动作。 即使有这种操作，也不应该是你来。 -- 工作过程中，有的要注意留痕。 -- 在微信上，找他确认。 -- 刘总，你刚刚让我删某某库，我确认一下，怕出事担责？ -- 刘总，您刚刚在电话里说，我需要删除某个环境的某个库，我和您确认一下，防止操作错了。 -- 是的。 \"]},\"151\":{\"h\":\"修改数据库\",\"t\":[\"-- 修改指定库的 字符集和校对规则 alter database db_name character set utf8 collate utf8_bin; \",\",只提供修改字符集和校对规则。\"]},\"152\":{\"h\":\"选择数据库\",\"t\":[\"-- 使用db_name这个库 use db_name; \",\"一个MySQL系统中, 管理多个数据库。 我们只有进入对应的数据库中, 才能进一步操作数据库中的数据。 因为表都是在库里面的。所以需要进入库中，再对表进行各种操作。\",\"-- <注释> -- 使用两个横线进行注释的时候。后面必须跟空格 # <注释> /* <注释> */ \",\"在数据库语句中如果我们需要注释某些内容, 一般有三种方式。 -- 注释符(要注意的是--之后要有一个空格再接着书写注释内容) # 注释符 (之后不需要空格) /* */ 注释符 (一般用于多行注释)\",\"在表格级别的所有操作，都必须要在数据库中，所以必须要先选择数据库。\",\"-- 选择指定的数据库 use db_name; \"]},\"153\":{\"h\":\"创建表\",\"t\":[\"-- create table table_name --> 固定写法，表名自己写，多个单词，下划线隔开 -- (column_name column_type [ , column_name2 column_type]) --> 括号里面写有哪些列,以及列类型 -- create table test_table(); -- 创建表格的写法。 create table test_table1( id int , name char(20), ) -- 这个SQL相当于创建了一个test1的表。表里面有一列，列名叫id,列类型叫int create table test1(id int); \",\"类型\",\"数字(整数型) \",\"tinyint：1字节。\",\": 4字节。\",\"bigint: 8字节。和long比较像。\",\"数字(小数) \",\"float(M,D): 4字节。浮点型\",\": 8字节。浮点型\",\"decimal (M, D),dec: 压缩的“严格”定点数M+2 个字节。定点型。 浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。\",\"M代表的是允许存储的最大位数，D代表是小数位数。也就是留给整数的是 M-D位。如果整数超了，直接报错，如果小数超了，会四舍五入。\",\"float(M,D) // M代表允许存储的最大位数，D代表小数位数。 // float(5,2) 代表，最大位数5位，2位小数。 留个整数的就三位 // 如果整数超了。 ---会报错。Out of range // 如果小数超了。 -- 四舍五入 100.6666 --》 100.67 double也是类似。 但是要注意，它们都是浮点型。 不精确 存钱的时候： 如果之前是100.331 千万不能存储成后面100.33 对一些精度要求比较高的数据（货币数据、科学数据），使用DECIMAL 。 或者使用字符串的形式。 \",\"在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。\",\"日期\",\"year：年(YYYY)。\",\"time: 时分秒(HH:MM:SS)。\",\": 年月日(YYYY-MM-DD)。\",\": 年月日时分秒。(YYYY-MM-DD HH:MM:SS)。\",\": 年月日时分秒。(YYYY-MM-DD HH:MM:SS)。\",\"字符串\",\"char(M): 定长字符串，设置了长度，无论存储多少长度的字符串，都会占满M。\",\"：变长字符串，会用1-2字节来存储长度。也就是 实际长度+1(2)。所有的列。最大长度65535字节。\",\"text：文本字符串，会用2字节来存储长度。最大长度65535字符，约64K。\",\"longtext：大文本字符串。会使用4字节存储长度。最大长度2^32，约4G。\",\"如果你需要存储的字符串在2000以内，可以使用varchar()。如果超过，建议使用text。\",\"比如我现在有一个电影 3.8G。需要存怎么办？ 把电影，找个电脑存起来，存路径。 D:/data1/学习.mp4。数据库是存放数据的，但是不能存放这种大的视屏。\",\"但是一般使用varchar。不会写太多。 varchar(500) varchar(1000) 这个都是可以的。但是如果要写varchar(5000)。不建议使用varchar。\",\"举例：\",\"现在有一个学生表，需要存储的信息包括，学生id，姓名，年龄，身高，体重，籍贯，身份证号，联系电话\",\"现在有一个图书信息表，需要存储的信息包括，序号，书名，作者，出版社，出版日期，定价，备注\",\"-- 创建一个表，主要是三个问题： -- 1.表名 -- 2.有哪些字段 -- 3.字段的类型及长度 create table student( id int, name varchar(200), age int, height double(10,2), weight double(10,2), address varchar(500), id_card varchar(50), phone varchar(20) ); -- 建表语句的原则。应该留有一定扩展性。 varchar(2) varchar(5) varchar(10) varchar(50) varchar(200) 写得多，并不一定会直接占用那么多。 varchar(5)。建表的时候留有扩展空间，防止后续数据量变大了之后，频繁去改表。 所以在最开始创建表的时候，直接写大一点点。 -- 现在有一个图书信息表，需要存储的信息包括，序号，书名，作者，出版社，出版日期，定价，备注 create table book( id int, book_name varchar(200), author varchar(100), press varchar(200), publication_date date, price decimal(10,2), comment varchar(1000) ); -- 有一些字段，可以根据上下文进行推断，所以我们也可以做一点省略 -- 比如在书这张表里，出现了name，我们会直接认为name是书的名字，不会认为是作者或者其他人的名字，所以可以省略一点点。 -- book_name -- 可以根据上下文推断。 class Student{ String studentName; String name; String teacherName; } \"]},\"154\":{\"h\":\"删除表\",\"t\":[\"-- 删除名为table_name的表 drop table table_name; \"]},\"155\":{\"h\":\"查看表\",\"t\":[\"-- 查看所有表 show tables; -- 查看表格结构(有哪些列，以及列的类型) desc table_name; describe table_name; -- 查看表的创建语句。获取出来的语句，可以直接运行，（改改表名） show create table table_name; \",\"举例：\",\"查看学生表创建语句: show create table student;\",\"查看图书表创建语句。有哪些列.show create table book_info;desc book_info;\"]},\"156\":{\"h\":\"修改表\",\"t\":[\"知道有这个东西就可以了，但是在工作中，如果有这种需求，你不要去操作。在自己的数据库上练习一下无所谓。\",\"-- 修改表名 rename table {old_table_name} to {new_table_name}; alter table {old_table_name} rename to {new_table_name}; -- 修改表字符集 排序规则 alter table table_name character set utf8mb4 collate utf8mb4_bin; -- 添加列 alter table table_name add column column_name column_type; -- 删除列 alter table table_name drop column column_name; -- 修改某列的类型 alter table table_name modify column column_name column_type; \",\"不要觉得它非常简单，可以无脑冲。\",\"是不是能够直接，把SQL准备好，然后拿上SQL就上生产环境去执行SQL了。\",\"我一执行SQL，SQL一直卡着。客户这边也卡着。内部的锁造成的。\",\"凌晨去执行。\"]},\"157\":{\"h\":\"关于字符集和校对规则的说明\",\"t\":[\"有四个层次的字符集和校对规则。\",\"// 数据库服务层面的。有一个字符集和校对规则，如果没有设置，为latin1。 // 数据库层面的。 // 它也有一个字符集和校对规则。如果创建的时候没有，就会直接继承服务器的参数，即latin1。 create database test1; // 表层面的 它也有一个字符集和校对规则。如果创建的时候没有，就会直接继承数据库的参数。 create table test2( id int, name varchar(200) ) character set utf8mb4; // 字段层面的 它也有一个字符集，如果创建的时候没有，直接继承表层次的。 create table test3( id int, name varchar(200) character set utf8mb4 ) 创建了一个表之后，它的字段的字符集就固定下来了。现在即使再去改库的字符集，表的字符集，也不会影响列的字符集，所以建议删掉表重新建表。 // 先创建了一个 test1的数据库，没有指定字符集。 latin1。 // 创建一个 test_table的表。也没有指定 latin1 // 表里面的字段也是latin1 // alter database test1 character set utf8mb4; \",\"image-20230508090539735\",\"-- 第一步，如果创建库的时候，没有指定字符集和校对规则， 会使用数据库服务层面的字符集和校对规则 -- 会使用服务层面的字符集 latin1 create database db1; use db1; -- 没有指定表层级的字符集和校对规则，会使用库层级的。 -- 表是latin1 列是latin1 create table test1( id int, name varchar(255) ); -- 一个表一旦创建，列的字符集已经固定下来了，即使你再去改 库的字符集和表的字符集，也不会影响列的字符集。（中文存不进去。） -- 建议大家把表删掉，再重新建一个表。 \"]},\"158\":{\"h\":\"添加数据\",\"t\":[\"-- 插入数据 -- 方式1，指定需要插入的列名，values需要与之对应。 insert into table_name (column1, column2, ......) values (value1, value2, ......) -- 直接在表名后，指定需要插入哪几列，然后在后方 values后，直接写列的值。 要一一对应。 insert into test1(id,name,address) values (1, \\\"zhangsan\\\",\\\"hubei\\\"); -- 方式2，不指定需要插入的列名。values，必须要写所有value，且与建表语句一一对应 insert into table_name values (value1, value2, ......) -- 方式3，使用set方式 insert into table_name set column1=value1, column2=value2,...; \",\"举例：现在有一个学生表，表里有以下列，写出SQL\",\"列名\",\"类型\",\"说明\",\"id\",\"整型\",\"学生编号\",\"name\",\"字符串\",\"学生姓名\",\"age\",\"整型\",\"学生年龄\",\"address\",\"字符串\",\"学生地址\",\"remark\",\"字符串\",\"自我评价\",\"插入几条数据\",\"编号是1，姓名是 \\\"阿妈粽\\\" ，年龄25， 地址上海，自我评价：是一个up主\",\"编号是2，姓名是 \\\"阿斗归来了\\\" ， 地址湖北，自我评价：是一个视频区up主\",\"编号是3，姓名是 \\\"盗月社\\\" ， 地址上海，自我评价：做饭up主\",\"编号是4，姓名是 \\\"李云龙\\\" ， 地址湖北，自我评价：团长\",\"可以插入多行，只用在values后添加多个括号。\",\"insert into table_name values (value1, value2, ......),(valuem,valuen,......),(valuem,valuen,......) \",\"-- 插入语句。 -- 方式1： 指定插入的列 insert into test_name(列1,列2,列3, ....) values (值1,值2,值3,...) -- 一定要一一对应。 desc test1; -- 前面写得列名和后面写得值的顺序，一定要对应上。 数目也一定要一样 insert into test1(id, name, email, address) values (4, 'email', 'name', 'address'); select * from test1; -- 方式2： 可以不指定插入的列。 需要插入全部列。而且列的值的顺序和 建表语句(desc select ) -- insert into test_name values (值1, 值2, 值3, ....) 值的顺序见上 insert into test1 values (5, 'jingtian', '河南', 'jingtian@qq.com', '110', null); -- 方式3： 可以指定插入列 -- insert into test_name set column1=value1, column2=value2, column3=value3; insert into test1 set id=6, name='shenlan', address='shanxi'; select * from test1; -- 学生表的SQL create table student_info( id int, name varchar(255), age int, address varchar(255), remark text ); insert into student_info values (1, '阿妈粽', '25', '上海', '是一个up猪'); select * from student_info; -- 可以有两种写法 insert into student_info values (2, '阿斗归来了', null, \\\"湖北\\\", \\\"是一个视频区up主\\\"); insert into student_info(id,name, address, remark) values (3, '盗月社', '上海', '做饭up主'); insert into student_info(id,name, address, remark) values (4, '李云龙', '湖北', '独立团团长'); -- 也可以一次性插入多条数据。直接在括号外面加逗号，加括号 insert into student_info(id,name, address, remark) values (5, '盗月社1', '上海', '做饭up主'),(6, '盗月社2', '上海', '做饭up主'), (7, '盗月社3', '上海', '做饭up主'); \"]},\"159\":{\"h\":\"查询数据\",\"t\":[\"-- 查询语句 关键词 select ... from select * from table_name; -- select .. from 是查询的关键词 -- * 代表选出所有列 -- 也可以写表中的列，多列使用, 分割 -- 比如 select id,name from students; -- table_name 是表名 \",\"以上是查询所有数据，我需要特定的数据怎么办呢？ 使用where关键词。where相当于是过滤器。\",\"-- 找出name是 zs 的表记录 select * from table_name where name='zs'; -- 找出年龄大于 18岁的人 select * from table_name where age > 18; \",\"后面会专门讲where的用法\",\"举例：：我想找出一些数据\",\"名字叫做阿妈粽的\",\"年龄大于18的\",\"是湖北人的\"]},\"160\":{\"h\":\"修改数据\",\"t\":[\"-- 更新满足条件的表记录，设置列值 update table_name set column1=value1, column2=value2 [ where 条件]; update student1 set remark = '测试remark' ; \",\"记住，要加where条件，否则，所有数据都会被更改。\",\"举例：\",\"更新湖北的人，地址变成湖北省。自我评价也变成湖北人，能吃辣\",\"update student1 set address='湖北省',remark='湖北人，能吃辣' where address='湖北'; \"]},\"161\":{\"h\":\"删除数据\",\"t\":[\"-- 删除满足条件的数据 delete from table_name [WHERE 条件]; 想删除id=10的人。 delete from student1 where id=10; 想删除 湖北人 delete from student1 where address = '湖北省'; \",\"需要加where条件，否则会删除所有数据。\",\"数据准备\",\"CREATE TABLE `student` ( `id` int(11) PRIMARY KEY AUTO_INCREMENT, `name` varchar(255) , `class` varchar(255) , `chinese` float , `english` float , `math` float ) ; \",\"INSERT INTO students (id, name, class, chinese, english, math) VALUES (1, '武松', '一班', 70, 90, 60); INSERT INTO students VALUES (2, '林冲', '一班', 70, 90, 90); INSERT INTO students VALUES (3, '松江', '一班', 90, 90, 20); INSERT INTO students VALUES (4, '贾琏', '二班', 60, 60, 60); INSERT INTO students VALUES (5, '贾宝玉', '二班', 95, 80, 5); INSERT INTO students VALUES (6, '贾环', '二班', 25, 25, 5); INSERT INTO students VALUES (7, '曹操', '三班', 90, 90, 90); INSERT INTO students VALUES (8, '曹丕', '三班', 90, 80, 80); INSERT INTO students VALUES (9, '曹植', '三班', 98, 90, 80); INSERT INTO students VALUES (10, '刘备', '三班', 95, 90, 80); INSERT INTO students VALUES (11, '诸葛亮', '三班', 98, 95, 95); INSERT INTO students VALUES (12, '孙权', '三班', 80, 90, 80); INSERT INTO students (id) VALUES (13); \"]},\"162\":{\"h\":\"where-条件\",\"t\":[\"使用 WHERE 关键字并指定查询条件|表达式, 从数据表中获得满足条件的数据内容.查询语句（select），更新语句（update），删除语句（delete）。在update里，和delete必须要用。\",\"-- 在select与剧中的含义。只查询出满足条件的数据 SELECT <查询内容>|列1,... FROM <表名字> WHERE <查询条件>|表达式 -- 在update里面，只修改满足条件的数据 UPDATE table_name SET column1=value1, column2=value2 where 条件; -- 在delete里面，只删除满足条件的数据 DELETE FROM TABLE_NAME WHERE 条件; eg: -- 想找id为1的 select * from table_name where id=1; -- 年龄 大于20的 selct * from table_name where age > 20; -- 想找到id大于10的 select id, name from students where id > 10; \",\"使用 WHERE 关键字并指定查询条件|表达式, 从数据表中获得满足条件的数据内容. 在构建Where的查询条件|表达式的过程中, 我们可能需要了解到一些重要的SQL运算符\",\"在where语句的后面，我们可以用到算数运算符。也可以用到逻辑运算符。\",\"在查询结果中，我们也可以使用算术运算符。\",\"算术运算符 | 运算符 | 作用 | | ------ | ---- | | + | 加 | | - | 减 | | * | 乘 | | / | 除 | | % | 取余 |\",\"-- 算数运算符，不仅可以出现在where中，还可以出现在查询列中。 -- 语数外总分 小于180的 -- 语文-数学 分差大于30的 -- 加权平均，按语文0.5 英语0.1 数学0.4求加权平均分 -- 加权平均分，小于等于60的 -- 求每个人的平均分，语数外三科 -- 求每个人的平均分，只筛选出平均分小于60的 -- 找出id是奇数的 -- 找语文成绩是偶数的 -- eg: -- 语数外总分 小于180的 select * from students where (chinese + english + math) < 180; -- 语文和数学 分差大于30的 select * from students where (chinese - math) > 30; -- 加权平均，按语文0.5 英语0.1 数学0.4求加权平均分 select *, (chinese*0.5 + english*0.1 + math *0.4) from students; -- 加权平均分，小于等于60的 select *, (chinese*0.5 + english*0.1 + math *0.4) from students where (chinese*0.5 + english*0.1 + math *0.4) <= 60 ; -- 求每个人的平均分。语数外 select *, (chinese + english + math) / 3 from students ; -- 求每个人的平均分，只筛选出平均分小于60的 select *, (chinese + english + math) / 3 from students where (chinese + english + math) /3 < 60; \",\"比较和逻辑运算符 | 运算符 | 作用 | 运算符 | 作用 | | ----------- | ---------- | ----------- | --------------------------- | | = | 等于 | <=> | 等于(可比较null) | | != | 不等于 | <> | 不等于 | | < | 小于 | > | 大于 | | <= | 小于等于 | >= | 大于等于 | | between and | 在闭区间内 | like | 通配符匹配(%:通配, _占位) | | is null | 是否为null | is not null | 是否不为null | | in | 在列表内 | not in | 不在列表内 | | and | 与 | && | 与 | | or | 或 | || | 或 |\",\"需要注意的：\",\"=无法判断null。一般使用 is null来单独处理null\",\"like中，%表示通配，_表示占位。 一个_代表一个字符。\",\"练习： 查询语数外总成绩大于 180 的同学信息； 查询数学成绩在[80，90]区间的同学姓名； 查询各科都及格的同学姓名；\",\"查询有一科成绩小于60的同学信息\",\"查询一班和二班的同学信息；(两种写法)\",\"查询姓贾的同学（只要姓贾就行）\",\"查询姓贾的同学，两个字的\",\"查询语文分数在 60 或90的同学\",\"-- 查询语数外总成绩大于 180 的同学信息； select *,(chinese + english + math) from students where (chinese + english + math) > 180; -- 查询数学成绩在[80，90]区间的同学姓名； select * from students where math between 80 and 90; select * from students where math >= 80 and math <=90; -- 查询各科都及格的同学姓名； select * from students where chinese >= 60 and math >= 60 and english >= 60; -- 查询各科只要有一科及格的同学姓名； select * from students where chinese >= 60 or math >= 60 or english >= 60; select * from students where id=6; -- 查询一班和二班的同学信息； select * from students where class = '一班' or class = '二班'; select * from students where class in (\\\"一班\\\", \\\"二班\\\"); \"]},\"163\":{\"h\":\"distinct-过滤\",\"t\":[\"获取某个列的不重复值。或者是某些列的不重复值\",\"SELECT DISTINCT <字段名> FROM <表名>; \",\"使用DISTINCT对数据表中一个或多个字段重复的数据进行过滤，重复的数据只返回其一条数据给用户.\",\"什么叫重复：就是多个列，全部相等,这时候就认为是重复的数据。\",\"-- 返回所有的 class select class from students; -- 返回不重复的 class select distinct class from students; -- 返回所有去重后的英语成绩 -- 6条 select distinct english from students; -- 返回两列 英语和数学去重后的结果。 -- 10条 select distinct english,math from students; -- 13条 -- 90.90 重复了一条 -- 90,80 重复了两条 select english,math from students; \"]},\"164\":{\"h\":\"limit-限制结果集\",\"t\":[\"一般用来做，比如限制最大的返回数目。或者是做分页上面。\",\"select * from students limit 10;\",\"SELECT <查询内容|列等> FROM <表名字> LIMIT 记录数目; SELECT <查询内容|列等> FROM <表名字> LIMIT 初始位置，记录数目; SELECT <查询内容|列等> FROM <表名字> LIMIT 记录数目 OFFSET 初始位置; eg: -- 限制数目 为number个 -- 限制最大返回number个，如果表中记录不足number个，只会返回表中的记录数。 select * from tableName where condition limit number; -- 偏移量为offsetNumber 从0开始 select * from tableName where condition limit offsetNumber, number; -- 偏移量offsetNumber select * from tableName where condition limit number offset offsetNumber; \",\"使用LIMIT对数据表查询结果集大小进行限定. LIMIT 记录数目: 从第一条开始, 限定记录数目 LIMIT 初始位置，记录数目: 从起始位置开始, 限定记录数目 LIMIT 记录数目 OFFSET 初始位置: 从起始位置开始, 限定记录数目 注意: 数据(默认下标从0开始)\",\"-- 从第一条开始拿 select * from students limit 5; -- limit offsetNumer,number 偏移数目，需要限制的总数 -- 2,5 代表从第三个开始拿 总共拿回来5个 select * from students limit 2,5; -- limit number offset offsetNumber -- limit 5 offset 3 代表 从第四个开始拿，总共最大拿回来五个 select * from students limit 5 offset 3; 一般用它来做分页查询。 \"]},\"165\":{\"h\":\"as-别名\",\"t\":[\"<内容> AS <别名> \",\"AS 关键字用来为表和字段指定别名.\",\"-- 可以为取出来的列名 取一个别名 select id,name as student_name,class from students; -- 可以为一些计算的属性取别名 select (chinese + english + math) as total_score from students; -- 也可以为表名取别名 select s.name from students as s; select s.name from students s; -- as 可以省略 \"]},\"166\":{\"h\":\"order by-排序\",\"t\":[\"比如我们想根据id进行排序； 或者想根据年龄进行排序。\",\"SELECT <查询内容|列等> FROM <表名字> ORDER BY <字段名> [ASC|DESC]; \",\"ORDER BY对查询数据结果集进行排序. 不加排序模式: 升序排序. ASC: 升序排序. DESC: 降序排序. 注意: 如上查询, 当我们进行多字段排序的时候, 会先满足第一个列的排序要求, 如果第一列一致的话, 再按照第二列进行排序, 以此类推.\"]},\"167\":{\"h\":\"group by-分组\",\"t\":[\"按照某个、某些字段分组。 比如想看一个班级有多少学生。班级的最高分，最低分。\",\"SELECT <查询内容|列等> FROM <表名字> GROUP BY <字段名...> eg: select class from students group by class; select class,chinese from students group by class, chinese; select class, group_concat(name), group_concat(chinese) from students group by class; -- 获取语文成绩大于90分的，按照班级分组 select class, group_concat(name) from students where chinese > 90 group by class; -- 获取班级的平均分 select class, group_concat(name), avg(chinese) from students group by class; -- 获取班级人数大于三个人的班级 select class, group_concat(name) from students group by class having count(*) > 3; -- 获取班级平均语文成绩大于60分的 select class, group_concat(name), avg(chinese) from students group by class having avg(chinese) > 60; \",\"GROUP_CONCAT()函数会把每个分组的字段值都拼接显示出来.\",\"HAVING 可以让我们对分组后的各组数据过滤。(一般和分组+聚合函数配合使用)\",\"where主要用于对原始表进行过滤。having是对group by 后的结果进行过滤，一般配合聚合函数一起使用。\",\"注意点：\",\"group by的select列中，只能有两种，，\",\"多个字段分组查询时，会先按照第一个字段进行分组。如果第一个字段中有相同的值，MySQL 才会按照第二个字段进行分组。如果第一个字段中的数据都是唯一的，那么 MySQL 将不再对第二个字段进行分组.\",\"如果在select 字段中，可以看出group 字段，后方可以使用数字代替，从1开始\",\"-- 会报错。如果有同学不报错，是因为有一个选项没开 -- select * from students group by class; -- select id,class from students group by class; -- 在select中出现的，只能有 group by 后的字段；或者是聚合函数聚合起来的东西 select class from students group by class; -- 根据英语成绩进行分组 select english from students group by 1; -- 根据英语成绩，数学成绩进行分组 -- 会先按照英语成绩分组，如果英语成绩相同，则按照数学成绩进行分组 select english,math from students group by english,math; \",\"是因为没有开这个选项。有的同学 SELECT * from students group bu class;不报错。\",\"only_full_group_by\"]},\"168\":{\"h\":\"聚合函数\",\"t\":[\"聚合函数一般用来计算列相关的指定值. 通常和分组一起使用\",\"函数\",\"作用\",\"函数\",\"作用\",\"COUNT\",\"计数\",\"SUM\",\"和\",\"AVG\",\"平均值\",\"MAX\",\"最大值\",\"MIN\",\"最小值\",\"COUNT: 计数\",\"select count(columnName) from tableName [where 条件]; eg: select count(*) from students; select count(name) from students; -- 和分组一起使用。查看每个班级有多少人数 select class,count(*) from students group by class; \",\"COUNT(*):表示表中总行数\",\"COUNT(列): 计算非NULL的总行数。统计这个组，这一列非null的总行数。\",\"SUM: 求和\",\"SELECT <查询内容>|列等 , SUM<列 FROM <表名字> GROUP BY HAVING SUM<表达式>|条件 eg: select sum(chinese) from students; select sum(chinese), sum(english), sum(math) from students; -- 查看每个班级的语文总分 select class,sum(chinese),group_concat(chinese) from students group by class; \",\"AVG: 平均值\",\"SELECT <查询内容>|列等 , AVG<列> FROM <表名字> GROUP BY HAVING AVG<表达式>|条件 eg: select avg(chinese) from students; select avg(chinese), avg(english), avg(math) from students; -- 按班级查看平均分 select class,avg(chinese), avg(english), avg(math) from students group by 1; \",\"MAX: 最大值\",\"SELECT <查询内容>|列等 , MAX(<列>) FROM <表名字> GROUP BY HAVING MAX(<表达式>)|条件 eg: select max(chinese) from students; select max(chinese), max(english), max(math) from students; \",\"MIN: 最小值\",\"SELECT <查询内容>|列等 , MIN(<列>) FROM <表名字> GROUP BY HAVING MIN(<表达式>)|条件 eg: select min(chinese) from students; select min(chinese), min(english), max(math) from students; \",\"查询每个同学的总成绩，平均成绩，并用别名表示；\",\"查询数学最大值，并用别名表示；\",\"查询外语最小值，并用别名表示；\",\"查询全体学生的语数外各科平均成绩，并用别名表示；\",\"-- 练习： -- 查询每个同学的总成绩，平均成绩，并用别名表示； -- ROUND(100.3465,2) 四舍五入 select name, (chinese + english + math) as total_score, ((chinese + english + math)/3) as avg_score from students; select name, (chinese + math + english) as total_score , round((chinese+math+english) /3, 2) as avg_score from students; -- 查询数学最大值，并用别名表示； select max(math) as max_math_score from students; -- 查询外语最小值，并用别名表示； select min(english) as min_english_score from students; -- 查询全体学生的语数外各科平均成绩，并用别名表示； select avg(chinese),avg(math),avg(english) as avg_english from students; \",\"SELECT <查询内容>|列等 , (聚合函数)|* FROM <表名字> GROUP BY 列 HAVING (聚合函数)条件 |条件; eg: select class, group_concat(name), count(*) from students group by class; select class, group_concat(name), count(*) from students group by class having count(*) > 3; -- 获取语文成绩大于90分的，按照班级分组 -- 获取班级的平均分 -- 获取班级人数大于三个人的班级 -- 获取班级平均语文成绩大于60分的 -- 查询班级语文总分大于200的班级(可以显示一下语文总分) -- 查询班级平均分，学生的限制：数学大于等于60，语文大于等于60的 -- 查询班级情况，要求学生语文最大的大于等于90，语文最少分大于等于70 -- 查询班级，语文最小成绩大于等于60，数学也是 select class from students group by class having sum(chinese) > 200; \",\" (5) SELECT column_name, ... (1) FROM table_name, ... (2) [WHERE ...] (3) [GROUP BY ...] (4) [HAVING ...] (6) [ORDER BY ...]; (7) [Limit ...] \",\"（1） 小括号中的数字代表执行顺序\",\"SQL语句的关键字是有顺序的，需要按照上面的顺序来写\",\"要注意书写顺序。也要注意执行顺序。\",\"主要是用来限制MySQL表中的数据，使数据符合规范，也称之为完整。\",\"比如，你现在，写了一个用户表。希望用户表里面的name这一列，全部都应该有数据。 有时候，如果不加以限制，那会被插入一些无意义的值。\"]},\"169\":{\"h\":\"实体完整性\",\"t\":[\"缺少了这个字段，实体就不完整。\",\"列约束\",\"MySQL可以对插入的数据进行特定的验证，只有满足条件才可以插入到数据表中，否则认为是非法插入\",\"主键(primary key)\",\"一个表只能有一个主键\",\"声明字段时，用 primary key 标识\",\"主键可以由多个字段共同组成。此时需要在字段列表后声明的方法\",\"create table test_primary_key( -- 代表这个 columnName是主键 columnName columnType primary key, ...... ) create table test_primary_key2( columnName columnType, ......, primary key(columnName， columnName2) ) \",\"auto_increment 自动增长约束 一些序号，没有必须手动生成，想让mysql自动生成。\",\"自动增长必须为索引(主键或unique)\",\"只能存在一个字段为自动增长。\",\"默认为1开始自动增长。\",\"create table test_auto_increment( columnName columnType primary key auto_increment, ...... ) \",\"create table stu( id int PRIMARY KEY auto_increment, name varchar(20), age int, class varchar(20) ) auto_increment=1000 ; \",\"在上表中，id是主键，是自增的。主键值从1000开始自增，通过auto_increment来指定，假如没有指定，从1开始自增\",\"-- 我们可以使用一条命令去看 自动增长目前增长到哪 show create table table_name; \",\"面试题： auto_increment是否一定连续？不断的插入，不删除。\",\"不一定。如果上面有唯一索引，unique 。如果unique重复，这时候，id会跳过。\",\"create table test_auto_increment2( id int primary key auto_increment, name varchar(255) unque ); insert into test_auto_increment2(name) values (\\\"zhangsan\\\"); insert into test_auto_increment2(name) values (\\\"lisi\\\"); insert into test_auto_increment2(name) values (\\\"lisi\\\"); \"]},\"170\":{\"h\":\"域完整性\",\"t\":[\"域完整性是针对某一具体关系数据库的约束条件，它保证表中某些列不能输入无效的值。\",\"比如这个人的姓名，不允许输入null这种值。\",\"比如有一张学生表。 id name id_card。不希望这个id_card有任何的null输入值。\",\"null约束\",\"null不是数据类型，是列的一个属性。一个具体的值\",\"表示当前列是否可以为null，表示什么都没有\",\"null, 允许为空。默认\",\"not null, 不允许为空\",\"create table test_null( columnName columnType not null, columnName2 columnType2 null, ...... ) -- 这代表null insert into test_null(column1) values (null); -- 这个不是null。这是一个普通字符串 insert into test_null(column1) values (\\\"null\\\"); \",\"唯一值约束\",\"unique\",\"表示值是唯一的，不重复的\",\"create table teacher( id int PRIMARY KEY, name varchar(20) unique, age int not null ); \",\"unique：\",\"插入的值不能重复\",\"可以插入null\",\"null可以重复\",\"unique和primary key的区别：\",\"主键值不能为空（null），而unique可以为空(null)\",\"相同点： 都不能插入重复的数据。\"]},\"171\":{\"h\":\"参照完整性\",\"t\":[\"外键是关系数据库中一个非常重要的概念，用于建立表与表之间的关系。一个表中的外键指向另一个表中的某个字段，这个字段通常是另一个表中的主键。外键的作用是保障数据的完整性和一致性，它可以确保两个表之间的关系正确地维护，防止数据出现不一致或者不完整的情况。\",\"外键。关系型数据库，不仅可以存储数据，还可以存储数据和数据之间的关系，具体的体现就是外键。\",\"image-20220511112342177\",\"create table province( id int PRIMARY KEY, name varchar(20) ); create table city( id int , name varchar(20), province_id int, -- 声明外键 -- CONSTRAINT 外键名称 foreign key(列) references 表名(列名) -- 在 province_id上建立一个外键，指向 province表的id字段 CONSTRAINT fk_pid foreign key(province_id) REFERENCES province(id) ); -- 外键的另外一种写法 -- foreign key(列) references 表名(列名) -- foreign key(s_id) references school(id) insert into province values(41, \\\"河南省\\\"); insert into province values(43, \\\"湖南省\\\"); insert into province values(42, \\\"湖北省\\\"); insert into city(id, name, province_id) values(1, \\\"武汉\\\", 42); insert into city(id, name, province_id) values(13, \\\"随州\\\", 42); insert into city(id, name, province_id) values(1, \\\"长沙\\\", 43); insert into city(id, name, province_id) values(6, \\\"岳阳\\\", 43); -- 城市表插入 -- 插入城市表的时候会去寻找有没有23对应的省份，如果有，插入 -- 如果没有，那么会报错 insert into city values (6,'哈尔滨',23); -- 不能删除还有子行的数据 delete from province where id = 32; \",\"外键的优缺点：\",\"优点：能够限制数据的增加、删除或者是修改操作，来保证数据的正确性。\",\"缺点：\",\"在插入（修改）子行（城市表）的数据的时候，需要去父表（省份表）中找对应的数据\",\"在删除（修改）父表（省份表）的数据的时候，需要去检查城市表中是否有对应的数据\",\"总结：有了外键之后，影响了增加、删除、修改的性能\",\"在公司中，大家觉得应不应该使用外键呢？看具体的情况\",\"假如公司比较小，表中的数据量不大（外键对效率的影响比较小，甚至可以忽略），可以考虑使用外键\",\"假如是大公司，或者是数据库表中的数据很多，（外键对于效率的影响就会很大），不应该使用外键\",\"不建议大家用。如果就是想约束这种关系。不使用外键，怎么保证这种关系。一般使用代码保证。\",\"其他约束（属性）\",\"default 默认值属性 当前字段的默认值。\",\"create table test_default( columnName timestamp , ...... ); create table test_default( id int primary key, name varchar(200), -- 如果你插入数据的时候，没有指定，这时候我就用默认值 country varchar(200) default \\\"中国\\\" ); CREATE TABLE `user_info` ( id int, name varchar(200) create_time timestamp DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', update_time timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间' ); \",\"create table tab ( create_time timestamp default current_timestamp ); -- 表示将当前时间的时间戳设为默认值。 current_date, current_time\",\"ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间'\",\"表中，一般会有三个字段是固定的（也就是创表必须得有）。id create_time update_time 见阿里编程规范 9条。\",\"comment 注释\",\"-- 作用是什么？ -- 为了让代码更好理解。 -- SQL里面的注释，是为了让SQL的字段更好理解。如果你进入了一个公司，不懂这个表里面的字段的含义。 -- 可以运行一下这个命令，看一下有没有备注帮你更好的理解这个表。 show create table test_comment; create table test_comment( id int primary key auto_increment, name varchar(255) comment \\\"名字\\\", status int comment \\\"0表示未付款，1表示已付款，2\\\" ); -- 相当于是字段的备注信息 -- 可以使用 show create table test_comment;来查看备注 \",\"在关系型数据库中，多表设计是指将数据分散到多个表中，每个表存储不同的数据。这种设计方式可以提高数据存储的效率和灵活性，同时也可以更好地保障数据的完整性和一致性。\",\"有关系的一些表才需要这种多表设计。\",\"学生表和订单表。 其实没有关系，所以它们不需要多表设计。\",\"用户表和用户详情表。 这个有关系，需要多表设计。\"]},\"172\":{\"h\":\"一对一\",\"t\":[\"在关系型数据库中，多表设计中的一对一关系指的是两个表之间的关系，其中一个表的记录只能对应另一个表中的一条记录，反之亦然。这种关系，在任意一方添加关系即可。\",\"人和身份证号\",\"学号和学生\",\"用户和用户详情\",\"image-20220512093032240\",\"所有的一一对应的表，在逻辑上，都可以合并为一个表。\",\"主要的原因是效率。如果一个表的列太多，比如有300列。最终数据量太大的时候，效率会很差。但是如果将其拆分成两个表，最终频繁查询的这个表，将其列弄得少一点，会提升查询效率。\",\"比如，淘宝。用户表，每天都要大量使用。 比如，单表300列，有3亿人都在用。\",\"可以把这个表拆成一个小表+另一个大表。\",\"10列。 290列。\"]},\"173\":{\"h\":\"一对多\",\"t\":[\"在关系型数据库中，多表设计中的一对多关系指的是两个表之间的关系，其中一个表的记录可以对应另一个表中的多条记录，而另一个表中的每条记录只能对应一个表中的记录。这种关系，会在多的一方添加字段来表示关系。\",\"一对多是指 存在表A和表B，表A中的一条数据，对应表B中的多条数据；而表B中的一条数据，对应表A中的一条数据。\",\"班级和学生\",\"省份和城市\",\"image-20220512094324425\"]},\"174\":{\"h\":\"多对多\",\"t\":[\"在关系型数据库中，多表设计中的多对多关系指的是两个表之间的关系，其中一个表的记录可以对应另一个表中的多条记录，而另一个表中的每条记录也可以对应另一个表中的多条记录。这种关系通常需要通过中间表来实现。\",\"多对多其实是指存在表A和表B，表A中的一条数据，对应表B中的多条数据；而表B中的一条数据，对应表A中的多条数据。\",\"互为一对多\",\"学生和课程\",\"订单和商品\",\"image-20220512095229401\"]},\"175\":{\"h\":\"数据库设计三大范式\",\"t\":[\"数据库表设计的时候，应该遵循的规范。只有遵循了这些范式（规范），设计出来的表才是好的。前人总结出来的一些原则，被称之为范式。\"]},\"176\":{\"h\":\"第一范式\",\"t\":[\"每一列应该保持原子性。在设计表格的时候，要遵守。\",\"一定要留有一定空间，灵活空间。\",\"原子性：表示表中的数据都是一个不可拆分的最小单元。\",\"image-20220512101248071\",\"第一范式：是跟着业务走的。但是业务是变动的，所以我们在设计表的时候，应该考虑之后业务的变化，来尽量的让每一列保持原子性。\",\"姓名这东西，是否需要分。\"]},\"177\":{\"h\":\"第二范式\",\"t\":[\"记录的唯一性。\",\"唯一性是指每一条记录都有唯一的标识。例如主键。表中必须得有一个 主键。\",\"create table test1( id int primary key auto_increment ) \"]},\"178\":{\"h\":\"第三范式\",\"t\":[\"数据不要冗余。\",\"image-20220512104553268\",\"在上表中，班主任名字重复存储了，冗余了\",\"缺点：\",\"重复存储了，需要占用更多的磁盘空间\",\"如果要去修改某个老师的名字，那么需要在多个地方进行修改，增加了数据的维护成本\",\"优点：\",\"根据学生去查班主任的名字变得更简单了，查询效率变高了\",\"总结：冗余数据会使数据的维护成本增加，但是可以在某些场景中，方便数据的查询\",\"那么在我们以后的工作中，要不要冗余数据呢？\",\"要看情况。假如数据的查询需求远大于增删改的需求，那么可以考虑冗余数据；否则，不应该冗余数据，\",\"这种冗余数据的做法叫“反范式化设计”。\",\"如果你想查的更快，而且你不是特别在意这些磁盘空间，增删改的次数比较少，可以考虑冗余数据。\",\"冗余了数据之后，会让你查询变得更简单。\"]},\"179\":{\"h\":\"多表查询\",\"t\":[\"多表查询是指在关系型数据库中，从多个表中查询数据的操作。多表查询可以帮助我们获得更加丰富的数据，以满足各种不同的需求。\"]},\"180\":{\"h\":\"连接查询\",\"t\":[\"-- 如果这个表存在 就删除 drop table if exists user; create table user( id int primary key auto_increment, name varchar(255), password varchar(255) ); drop table if exists user_detail; create table user_detail( id int primary key auto_increment, user_id int, address varchar(255), pic varchar(255) ); insert into user values (1, \\\"猪八戒\\\", \\\"zhubajie\\\"); insert into user values (2, \\\"孙悟空\\\", \\\"sunwukong\\\"); insert into user values (3, \\\"白骨精\\\", \\\"baigujing\\\"); insert into user values (4, \\\"唐僧\\\", \\\"tangseng\\\"); insert into user values (5, \\\"沙僧\\\", \\\"shaseng\\\"); select * from user; insert into user_detail values(null, 1, \\\"高老庄\\\", \\\"猪八戒.jpg\\\"); insert into user_detail values(null, 2, \\\"花果山\\\", \\\"孙悟空.jpg\\\"); insert into user_detail values(null, 3, \\\"白虎岭\\\", \\\"白骨精.jpg\\\"); insert into user_detail values(null, 4, \\\"东土大唐\\\", \\\"唐僧.jpg\\\"); select * from user_detail; \",\"image-20230410161359471\"]},\"181\":{\"h\":\"交叉连接\",\"t\":[\"交叉连接其实就是求多个表的笛卡尔积。\",\"-- 交叉连接 select * from user cross join user_detail; \",\"交叉连接的结果没有实际的意义。\",\"但是内连接和外连接都是基于交叉连接的结果去筛选的。\",\"比如表A有3条数据，表B中有4条数据，最终会有3*4=12条数据。这个被称为笛卡尔积\"]},\"182\":{\"h\":\"内连接\",\"t\":[\"内连接（inner join）是一种SQL中的表连接操作，用于将两个或多个表中的数据进行合并匹配。\",\"内连接的语法如下：\",\"SELECT columns FROM table1 INNER JOIN table2 ON table1.column = table2.column; -- 其中，columns是要返回的列，table1和table2是要连接的表，column是要连接的列。ON子句指定了连接条件，它指定了table1和table2之间的匹配条件。 \",\"inner join\",\"显式\",\"-- 显式内连接 select * from user inner join user_detail on user.id = user_detail.user_id; -- 这个SQL语句将user和user_detail表连接起来，只返回两个表都有相同的id的行。 \",\"隐式\",\"-- 隐式内连接。不建议这样写。 select * from user,user_detail where user.id =user_detail.user_id; \"]},\"183\":{\"h\":\"外连接\",\"t\":[\"外连接（outer join）是一种SQL中的表连接操作，用于将两个或多个表中的数据进行合并匹配，\",\"外连接有左外连接（left outer join）、右外连接（right outer join）和全外连接（full outer join）三种类型。\",\"说明：但是MySQL不支持全外连接。\",\"左右表中的数据都保留。\",\"outer可以省略掉。\",\"左外连接返回左表中的所有行以及右表中与左表匹配的行，右表中没有匹配的行将被填充为NULL值。左外连接的语法如下：\",\"SELECT columns FROM table1 LEFT OUTER JOIN table2 ON table1.column = table2.column; -- 左外连接，保留匹配的数据。还会保留左表的所有数据 \",\"-- 左外连接 select * from user left outer join user_detail on user.id = user_detail.user_id; \",\"右外连接返回右表中的所有行以及左表中与右表匹配的行，左表中没有匹配的行将被填充为NULL值。右外连接的语法如下：\",\"SELECT columns FROM table1 RIGHT JOIN table2 ON table1.column = table2.column; \",\"-- 右外连接 select * from user right outer join user_detail on user.id = user_detail.user_id; \",\"连接查询最重要的，是找到连接的条件。\"]},\"184\":{\"h\":\"子查询\",\"t\":[\"在关系型数据库中，子查询是指在一个 SQL 语句中嵌套另一个 SQL 语句来实现查询的方式。子查询通常用于在查询结果中过滤、排序、分组或者统计数据，或者作为其他查询语句的一部分。\",\"子查询可以嵌套多层，每一层都返回一个结果集供上一层使用。\",\"子查询可以用于实现各种复杂的查询需求，例如，使用子查询查询最大值或最小值，使用子查询实现分组统计等等。但是，由于子查询会增加查询的复杂度和执行时间，因此在使用子查询时需要注意查询性能的影响。\",\"一个SQL语句的结果可以作为另外一个SQL语句的条件。\",\"-- 现在想找有哪些同学学了Java。 -- 首先先拿到Java的id select id from tec_cource where name='Java'; -- 然后再把这个id=1 放给第二个 select * from tec_sele_cource where cource_id=1; select * from tec_stu where id in (1,3); -- 看学生信息 select * from tec_stu where id in ( -- 看哪些学生选了 Java select student_id from tec_sele_cource where cource_id=( -- 获取Java的id select id from tec_cource where name='Java' ) ) \",\"不建议大家用。效率差。因为每一层查询会生成临时表\"]},\"185\":{\"h\":\"联合查询（了解）\",\"t\":[\"SQL支持把多个SQL语句的结果拼装起来。\",\"-- 写了两个SQL。把两个SQL的结果拼接起来 select * from students where class = '一班' union select * from students where class = '二班'; -- union要求返回的列数目要一致 -- 我们可以使用union关键字对SQL1和SQL2的结果去做并集，一般来说联合查询作用不大 select * from students where class in ('一班','二班'); -- 当上面这个SQL语句查询速度很慢的时候，可以考虑union联合查询来提高效率。 -- union all 会把sql的结果，直接拼接起来。 \"]},\"186\":{\"h\":\"数据库的备份与恢复\",\"t\":[\"DBA\",\"数据库是存储数据的地方。我们不希望数据库丢数据，如果丢了数据，对于企业的损失非常大。\",\"所以我们需要了解数据库的备份和恢复手段。\",\"备份产生的SQL，没有建库语句，需要你自己手动建一个库，然后再执行SQL。\"]},\"187\":{\"h\":\"命令行\",\"t\":[\"# 备份 # 1. 打开命令行 mysqldump -uroot -p dbName>/path/dbName.sql mysqldump -uroot -p test_52th3>test52th.sql # 在生成的sql文件中，主要做了三件事。 删表，建表，插数据 # 恢复 # 1. 打开命令行 # 2. 连接MySQL服务器 mysql -uroot -p # 3. 选中数据库（假如没有合适的数据库，可以新建一个） use dbName; # 4. 执行文件中的SQL语句，恢复数据 source /path/dbName.sql source c:/Users/zhoubing/test52th.sql \"]},\"188\":{\"h\":\"Navicat\",\"t\":[\"image-20220512150057177\",\"备份和恢复操作可能会导致数据丢失，因此在执行这些操作之前，我们需要进行数据完整性和正确性的检查，以确保数据的准确性和完整性。\",\"首先，我们可以使用以下SQL查询语句来检查数据表中的记录总数：\",\"select count(*) from table_name; \",\"这将返回表中记录的总数。接下来，如果我们想比较某一行数据在备份前后是否发生变化，我们可以考虑以下方法。\",\"肉眼观察是一种不合适且不可靠的方式，因此我们可以选择对数据进行哈希校验。例如，假设之前某一行的数据是 \\\"zhangsan\\\"，而现在的数据是 \\\"lisi\\\"，我们可以执行以下步骤：\",\"从数据库中选择该行的数据。\",\"对这条数据进行MD5哈希算法，生成一个MD5值。\",\"将备份之前的MD5值与备份之后的MD5值进行比较。\",\"这样，我们可以通过比较哈希值来确定数据是否发生了变化。如果MD5值相同，则表示数据没有发生变化；如果MD5值不同，则表示数据已被更改。\",\"整体的MD5可以通过对整个数据表的所有记录进行MD5哈希计算来获得，从而验证整个数据表的一致性。\",\"总的步骤可以概括为：\",\"选择需要比较的行数据。\",\"对该行数据进行MD5哈希计算，得到哈希值。\",\"比较备份前后的哈希值，以确定数据是否发生变化。\",\"通过这种方法，我们可以有效地检测数据变化，确保备份和恢复操作的安全性和准确性。\",\"在企业中，一般不需要我们去备份和恢复数据库。\",\"程序是可靠的。 写一段代码，让代码自动在周五晚8点去备份，存到一个地方。\"]},\"189\":{\"h\":\"03. JDBC\",\"t\":[\"学习目标：\",\"了解JDBC是什么，以及定义它有什么好处\",\"掌握使用JDBC访问数据库\",\"掌握使用JDBC进行增删改查\",\"掌握数据库注入问题，以及怎么解决数据库注入问题。面试经常问到的问题\",\"掌握事务的使用，以及为什么需要事务。\",\"理解事务的四大特性，ACID。能用自己的话讲出来\",\"事务的隔离级别（面试）\"]},\"190\":{\"h\":\"数据库的访问过程\",\"t\":[\"image-20220512151118861\"]},\"191\":{\"h\":\"JDBC是什么\",\"t\":[\"JDBC（Java Database Connectivity）是Java程序与数据库进行交互的一种标准接口。它定义了一组Java API，使得Java程序可以通过这些API来连接和操作各种关系型数据库（如MySQL、Oracle、SQL Server等），执行SQL语句并处理查询结果。JDBC提供了一种跨平台、可移植的方式来访问数据库，使得Java程序可以与不同的数据库进行通信而无需改变代码。JDBC的主要优点包括：可移植性、可靠性、安全性和易于使用。\",\"JDBC具体指的就是 Java的一套标准的连接数据库的接口。\",\"image-20220512154214534\",\"那么标准的接口具体在哪儿呢？指的是哪些接口呢？（rt.jar内部的）\",\"java.sql\",\"javax.sql\"]},\"192\":{\"h\":\"第一个JDBC程序\",\"t\":[\"新建项目\",\"导包\",\"导包是指导入其他的人或者是组织写的代码。\",\"如何导包呢？\",\"下载包\",\"下载仓库地址\",\"MySQL驱动包下载地址\",\"把包复制到项目中，并且加载进来\",\".jar： 这个格式是一种压缩格式，和 .zip，.rar是类似的，这种类型的文件，可以被Java识别并且运行。\",\".jar文件中都是一些 .class文件，是可以直接运行的\",\"接下来，需要把对应的jar包添加到library里面去。对着jar包右键\",\"image-20220512160152575\",\"编写应用程序\",\"// 1. 加载驱动 {@Link java.sql.Driver impl : com.mysql.jdbc.Driver} DriverManager.registerDriver(new Driver()); // String url = \\\"协议 + ip + 端口 + 路径 + 参数\\\"; String url = \\\"jdbc:mysql://localhost:3306/40th?useSSL=false&characterEncoding=utf8\\\"; String username = \\\"root\\\"; String password = \\\"123456\\\"; // 2. 发送用户名和密码，建立连接 // 返回的当前是一个Connection接口，但是实际上在运行的时候，返回是Connection接口的实现类的实例 Connection connection = DriverManager.getConnection(url, username, password); // 3. 获取statement对象 Statement statement = connection.createStatement(); // 4. 发送SQL语句 int affectedRows = statement.executeUpdate(\\\"insert into stu values (4,'云飞兄',20,'358班')\\\"); // 5. 解析结果集 System.out.println(\\\"affectedRows:\\\" + affectedRows); // 6. 断开连接 statement.close(); connection.close(); \",\"MySQL版本5.7。我们选驱动 可以选 5.1.47 48 49；都可以。 8的也可以。\",\"MySQL8的版本。只能选8，不要选5的版本。\"]},\"193\":{\"h\":\"使用JDBC进行增删改查\"},\"194\":{\"h\":\"增\",\"t\":[\"// 3. 发送SQL语句 // 返回值是个int，代表影响的行数。 新增的行数 int affectedRows = statement.executeUpdate(\\\"insert into stu values (1, 'zhangsan', 22)\\\"); \"]},\"195\":{\"h\":\"删\",\"t\":[\"增、删、改都是一样的，都是使用 statement.executeUpdate(String sql) 来执行SQL语句，返回的结果也是一样的，都是影响的行数。\",\"// 3. 发送SQL语句 // 返回值是个int，代表影响的行数。 删除的行数 int affectedRows = statement.executeUpdate(\\\"delete from stu where id = 3\\\"); \"]},\"196\":{\"h\":\"改\",\"t\":[\"int affectedRows = statement.executeUpdate(\\\"update stu set name = '孔二愣子',class='五班' where id = 4\\\" \"]},\"197\":{\"h\":\"查\",\"t\":[\"// 3. 发送SQL语句 // resultSet指结果集对象，具体指代查询返回的临时表对象 ResultSet resultSet = statement.executeQuery(\\\"select * from stu\\\"); // 解析结果集 while (resultSet.next()) { int id = resultSet.getInt(\\\"id\\\"); String name = resultSet.getString(\\\"name\\\"); int age = resultSet.getInt(\\\"age\\\"); String className = resultSet.getString(\\\"class\\\"); System.out.println(\\\"id:\\\" + id); System.out.println(\\\"name:\\\" + name); System.out.println(\\\"age:\\\" + age); System.out.println(\\\"className:\\\" + className); } \"]},\"198\":{\"h\":\"API\",\"t\":[\"查看类中所有方法的快捷键：ctrl + F12\"]},\"199\":{\"h\":\"DriverManager\",\"t\":[\"驱动管理器。可以帮助我们管理驱动，获取连接\",\"// 注册驱动 DriverManager.registerDriver(new Driver); // 获取连接 // 在代码实际运行的时候，一定不可能光是一个接口，一定是一个实现类。（是MySQL提供的一个实现类。） // 获取到的连接对象实际上是 JDBC4Connection 对象 Connection conn = DriverManager.getConnection(String url,String username,String password); \"]},\"200\":{\"h\":\"Connection\",\"t\":[\"指代连接对象。在JDBC中是一个接口，在我们使用JDBC的时候，实际上实现类是 com.mysql.jdbc.JDBC4Connection 对象。\",\"// 获取statement // 通过statement对象来执行SQL Statement stat = connection.createStatement(); // 关闭连接 connection.close(); // 事务相关的API connection.commit(); connection.rollback(); connection.setAutoCommit(false); \"]},\"201\":{\"h\":\"Statement\",\"t\":[\"The object used for executing a static SQL statement and returning the results it produces.\",\"statement对象其实就是用来去执行SQL语句，并且返回这个SQL语句产生的结果集。实际上我们在使用的时候，其实是用的Statement接口的实现类 com.mysql.jdbc.StatementImpl\",\"// 执行增删改的方法。新增数据的SQL，删除数据的SQL，修改数据的SQL int affectedRows = statement.executeUpdate(String updateSql); // 执行查询的方法 ResultSet rs = statement.executeQuery(String querySql); // 拿到一个ResultSet，怎么从里面获取数据。 当一个迭代器的方法使用。 // 关闭 statement.close(); // 执行sql语句 Boolean ret = statement.execute(String sql); // 如果 ret == true，那么说明执行的是查询语句 statement.getResultSet(); // 如果 ret == false，那么说明执行的是增删改语句 statement.getUpdateCount(); // 获取影响的行数: statement.getUpdateCount(); // 获取返回的结果集：statement.getResultSet(); // 练习一下怎么去组织语言（prompt） // 我是Java学习者，我在学习JDBC的时候，遇到了一个Statement接口，里面有一个execute()方法，我不知道如何去使用 你的任务如下： 1.简单告诉一下我它的大致作用 2.给我写个demo，示例，让我快速知道如何去使用它。 \"]},\"202\":{\"h\":\"ResultSet\",\"t\":[\"这个对象表示查询的结果集。\",\"image-20220512174407319\",\"在查询的结果集中，有一个游标，游标可以移动，移动的时候会扫描一些行，那么对于这些扫描到的行，我们就可以获取对应的列的值。\",\"// 移动游标方法 // 向下移动 Boolean ret = resultSet.next(); // 向上移动 Boolean ret = resultSet.previous(); // 定位到第一行之前 resultSet.beforeFirst(); // 定义到最后一行之后 resultSet.afterLast(); // 获取值的方法 resultSet.getInt(String columnName); resultSet.getString(String columnName); resultSet.getDate(String columnName); \",\"image-20220512174948330\"]},\"203\":{\"h\":\"JDBC的优化\",\"t\":[\"提取工具类\",\"连接配置放入到配置文件中\",\"注册驱动利用反射，解耦\",\"关闭资源（提取公共方法）\",\"public class JDBCUtils { static String url; static String username; static String password; static String driver; static { Properties properties = new Properties(); try { properties.load(new FileInputStream(\\\"jdbc.properties\\\")); } catch (IOException e) { e.printStackTrace(); } url = properties.getProperty(\\\"url\\\"); username = properties.getProperty(\\\"username\\\"); password = properties.getProperty(\\\"password\\\"); driver = properties.getProperty(\\\"driverClassName\\\"); } // 获取连接 public static Connection getConnection(){ Connection connection = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, username, password); }catch (Exception ex) { ex.printStackTrace(); } return connection; } // 关闭资源 public static void close(Connection connection, Statement statement, ResultSet resultSet){ try { if (resultSet != null) resultSet.close(); if (statement!= null) statement.close(); if (connection != null) connection.close(); }catch (Exception ex) { ex.printStackTrace(); } } } \"]},\"204\":{\"h\":\"数据库注入问题\",\"t\":[\"数据库注入是一种常见的网络安全漏洞，攻击者利用这种漏洞向网站或应用程序的数据库中插入恶意代码，从而获取敏感信息、执行非法操作等。例如：\",\"假设有一个登录页面，用户需要输入用户名和密码才能登录。该页面的后端代码使用SQL查询语句来验证用户的身份，例如：\",\"SELECT * FROM user WHERE username = 'input_username' AND password = 'input_password'; \",\"其中，'input_username'和'input_password'是用户在登录页面上输入的值。如果用户输入的值与数据库中的值匹配，则允许用户登录，否则拒绝登录。\",\"然而，攻击者可以在输入框中输入一些恶意代码，例如：\",\"input_username: root input_password: xxx' or ' 1=1 \",\"这个输入会更改SQL查询语句，变成：\",\" -- 下面这条SQL的含义，是这样的 1=1是恒等的，所以where条件相当于会没有任何条件 -- SELECT * FROM users WHERE (username = 'admin' AND password = 'xxx') or '1=1'; SELECT * FROM users WHERE username = 'admin' AND password = 'xxx' or ' 1=1'; SELECT * FROM users WHERE username = 'admin' AND password = 'xxx' ;drop database test1'; \",\"这个SQL语句的含义是“从users表中选择任何一个行，其中用户名为空或1等于1，并且密码为空”。由于1等于1始终为真，因此这个SQL语句将返回users表中的所有行，从而绕过了身份验证，攻击者可以以任何用户的身份登录系统。这就是一个典型的SQL注入攻击。\",\"为了避免SQL注入攻击，必须对用户输入的值进行过滤和转义，或使用预处理语句等安全措施来防范这种攻击。\",\"主要的原因是字符串拼接，把用户的一些输入当做了关键字。\",\" public static void main(String[] args) throws SQLException { // Boolean ret = login(\\\"天明\\\", \\\"upan\\\"); // select * from user where name = 'xxx' and password = 'xxx'; // select * from user where name = 'xxx' and password = 'xxx' or '1=1'; Boolean ret = login(\\\"xxx\\\", \\\"xxx' or '1=1\\\"); if (ret) { System.out.println(\\\"登录成功！\\\"); }else { System.out.println(\\\"登录失败\\\"); } } // 登录方法 public static Boolean login(String username,String password) throws SQLException { // 传入用户名和密码。根据用户名和密码查询用户，假如查询到了，说明登录成功；如果没查到，登录失败 Connection connection = JDBCUtils.getConnection(); Statement statement = connection.createStatement(); String sql = \\\"select * from user where name = '\\\"+username+\\\"' and password = '\\\"+password+\\\"'\\\"; System.out.println(sql); ResultSet resultSet = statement.executeQuery(sql); if (resultSet.next()) { return true; }else { return false; } } \",\"数据库注入问题产生的原因：因为SQL语句是通过字符串拼接的，这个时候用户可能输入一些字符，这些字符中包含有SQL语句中的关键字，那么通过字符串拼接SQL语句之后，可能会改变SQL语句的格式，进而引发安全性的问题。\",\"根本的原因：MySQL把用户输入的参数当做关键字来解析了\",\"如何解决数据库注入问题呢？\",\"PrepareStatement（预编译的Statement）\",\"// 登录方法2 public static Boolean login2(String username,String password) throws SQLException { // 1. 获取连接 Connection connection = JDBCUtils.getConnection(); // 2. 获取PreparedStatement // 这一步，在创建PreparedStatement的时候，PreparedStatement会把当前这个没有参数的SQL语句，发送给MySQL服务器，执行预编译 // 预编译：其实就是去解析这个SQL语句中的关键字，变成MySQL可以执行的命令 // 在预编译之后，后续输入的字符串，就只会被MySQL当成纯文本来解析 PreparedStatement preparedStatement = connection.prepareStatement(\\\"select * from user where name = ? and password = ?\\\"); // 3. 设置参数 // 序号从 1 开始 preparedStatement.setString(1,username); preparedStatement.setString(2,password); // 4. 传递参数，执行SQL语句 ResultSet resultSet = preparedStatement.executeQuery(); if (resultSet.next()) { return true; }else { return false; } } \",\"总结：\",\"在安全性方法，PreparedStatement比Statement要好很多，没有数据库的注入问题\",\"在效率方面，执行单次SQL语句的时候，Statement的效率比PreparedStatement要好一些\",\"因为Statement在执行一条SQL语句的时候，只会与数据库通信一次，而PreparedStatement要通信两次\",\"prepareStatement使用的比statement多很多。statement几乎不用。\",\"image-20220513112333234\",\"image-20220513175504026\",\"比如，你想往数据库里面插入大量数据。 100w\",\"其实就是批量的处理SQL语句，典型的业务场景就是一次插入大量的数据。在今后，如果需要大家使用JDBC批量插入数据，可以使用这些方法。\"]},\"205\":{\"h\":\"for循环逐条插入\",\"t\":[\"// for循环来做 public static void batchUseForEach() throws SQLException { Statement statement = connection.createStatement(); for (int i = 0; i < 10000; i++) { String sql = \\\"insert into user values (\\\"+i+\\\",'foreach',null,null)\\\"; statement.executeUpdate(sql); } } \",\"向MySQL服务器发送了SQL语句 1w次，SQL语句被编译了1w次，SQL语句也被执行了1w次\"]},\"206\":{\"h\":\"statement批处理\",\"t\":[\"// Statement 来处理 public static void batchUseStatement() throws SQLException { Statement statement = connection.createStatement(); for (int i = 10000; i < 20000; i++) { String sql = \\\"insert into user values (\\\"+i+\\\",'batchUseStatement',null,null)\\\"; // 相当于在内部有一个容器。 statement.addBatch(sql); } // 发送SQL语句，执行 statement.executeBatch(); } \",\"向MySQL服务器发送了SQL语句 1次，这一次中包含1w条SQL语句信息，SQL语句被编译了1w次，SQL语句也被执行了1w次\"]},\"207\":{\"h\":\"PreparedStatement批处理\",\"t\":[\"需要在数据库的url后面加上配置：rewriteBatchedStatements=true ，表示开启批处理\",\"// PreparedStatement来处理 public static void batchUsePrepapreStatement() throws SQLException { // 获取PreparedStatement PreparedStatement preparedStatement = connection.prepareStatement(\\\"insert into user values (?,?,null,null)\\\"); // 循环，设置参数 for (int i = 20000; i < 30000; i++) { preparedStatement.setInt(1,i); preparedStatement.setString(2,\\\"PrepapreStatement\\\"); preparedStatement.addBatch(); } // 把参数发送给MySQL服务器，执行SQL语句 preparedStatement.executeBatch(); // insert into user values (),(),(),(),(); } \",\"与MySQL通信了2次，SQL语句被编译了一次，SQL语句被执行了一次\",\"插入n条数据\",\"for循环，通讯n次，编译n次，执行n次\",\"statement，通讯1次，编译n次，执行n次\",\"prepareStatement，通讯2次，编译1次，执行1次\",\"假如需要批处理n条SQL语句，开启了rewriteBatchedStatements之后\",\"通信次数\",\"编译次数\",\"执行次数\",\"时间\",\"for循环\",\"n\",\"n\",\"n\",\"最长\",\"Statement\",\"1\",\"n\",\"n\",\"次之\",\"PreparedStatement\",\"2\",\"1\",\"1\",\"最短\"]},\"208\":{\"h\":\"介绍\",\"t\":[\"数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。\",\"事务就是要保证一组数据库操作，要么全部成功，要么全部失败。\",\"比如转账操作，涉及到几个方面。\",\"账户余额表。 zs 1000 | ls 5000\",\"现在zs要给ls转账，转500。现在在数据库里面，我们要进行两步操作。\",\"扣zs的钱，扣500\",\"给ls增加钱，增加500\",\"A给B转账。涉及到两个操作，需要给A账户扣钱，然后给B账户增加钱。\",\"如果在这个操作的过程中，出现了异常。可能会导致A账户的钱扣了，B账户的钱没有增加。\"]},\"209\":{\"h\":\"使用事务\",\"t\":[\"开启事务\",\"提交事务\",\"回滚事务\",\"API\",\"// 开启事务 connection.setAutoCommit(false); // 提交事务 connection.commit(); // 回滚事务 connection.rollback(); \",\"命令\",\"# 开始事务 start transaction; # 提交事务 commit; # 回滚事务 rollback; \",\"create table account( id int primary key auto_increment, name varchar(50), money int , create_time timestamp default current_timestamp , update_time timestamp default current_timestamp on update current_timestamp ); -- 插入一条数据： 浩铭 50000 insert into account(name, money) values ('浩铭', 50000); insert into account(name, money) values ('刘楠', 20000); insert into account(name, money) values ('黄杰', 10000); insert into account(name, money) values ('殿熙', 10000); -- name是唯一的。 \",\" private static boolean transfer(String fromName, String toName, int money) throws SQLException, ClassNotFoundException { // 1.获取连接 Connection connection = JdbcUtils.getConnection(); // 2.开启事务 connection.setAutoCommit(false); try { // 3.1 扣A的钱 // update account set money = money - ? where name = ? and money > ? PreparedStatement preparedStatementA = connection.prepareStatement(\\\"update account set money = money - ? where name = ? and \\\" + \\\"money > ?\\\"); preparedStatementA.setInt(1, money); preparedStatementA.setString(2, fromName); preparedStatementA.setInt(3, money); int affectedRowsA = preparedStatementA.executeUpdate(); System.out.println(affectedRowsA); if (affectedRowsA != 1) { throw new RuntimeException(\\\"A账户信息不对\\\" + affectedRowsA); } //int i = 1 / 0; // 3.2 增加B账户的钱 // update account set money = money + ? where name = ? PreparedStatement preparedStatementB = connection.prepareStatement(\\\"update account set money = money + ? where name = ? \\\"); preparedStatementB.setInt(1, money); preparedStatementB.setString(2, toName); int affectedRowsB = preparedStatementB.executeUpdate(); System.out.println(affectedRowsB); if (affectedRowsB != 1) { throw new RuntimeException(\\\"B账户信息不对\\\" + affectedRowsB); } connection.commit(); } catch (Exception e) { e.printStackTrace(); connection.rollback(); return false; } return true; } \"]},\"210\":{\"h\":\"特性\",\"t\":[\"事务通常具有四个标准特性（ACID）：\",\"原子性（Atomicity）\",\"事务是一个不可分割的操作单元（数据库的操作），事务中的操作要么就都成功，要么就都不成功。\",\"一致性（Consistency）\",\"事务必须使数据库从一个一致性状态到另外一个一致性状态。\",\"在转账案例中，一致性是指 在转账前和转账后，（无论怎么转账），钱的总金额是前后一致的，不变的\",\"隔离性（Isolation）\",\"事务与事务之间是互相隔离的，互不影响的。\",\"数据库有为隔离性设置不同的隔离级别。不同的隔离级别对于隔离性的影响是不一样的\",\"持久性（Durability）\",\"一个事务一旦生效，那么对数据库的改变是永久的，不可逆转的。意思就是提交了事务之后，就已经对数据库产生的变化，那么后续再回滚就回滚不了了\",\"一般问事务的四大特性。直接说出这几个的中文。\"]},\"211\":{\"h\":\"隔离级别\",\"t\":[\"当数据库有多个事务同时执行的时候，可能会出现问题。\",\"脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题。\",\"一个事务读取到了另外一个事务没有提交的数据。（这个比较严重）\",\"在同一个事务中，读取同一个数据，前后读取的数据不一致。\",\"通常指的是，在一个事务中，读取到了另外一个事务已经提交的数据。\",\"指在同一个事务中，读取同一个表数据，前后读取的数量不一致。\",\"通常指的是，在一个事务，读取到了另外一个事务插入或者删除的数据。\",\"事务的隔离级别：\",\"一个参数，可以用来控制事务和事务之间的隔离性。\",\"（read uncommitted）\",\"读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。\",\"会产生脏读。不可重复读，幻读 会不会造成？\",\" (read committed)\",\"读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。\",\" (repeatable read)\",\"这个是MySQL默认的隔离级别\",\"可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。\",\" (serializable)\",\"串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\",\"实际工作中很少采用该级别。\",\"你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。\"]},\"212\":{\"h\":\"演示\",\"t\":[\"有一张表，表里只有一条数据。\",\"create table t( value int ); insert into t values (1); -- test_52th3 代表直接进入这个库 -- 代表我进入之后不用调用 use test_52th3 mysql -uroot -p123456 test_55th3 \",\"# 获取当前数据库的隔离级别 select @@transaction_isolation; select @@tx_isolation; # 设置隔离级别 set global transaction isolation level 隔离级别; mysql -uroot -p123456 test_55th3 set global transaction isolation level repeatable read; update t set value=1; # 读未提交 read uncommitted; # 读已提交 read committed; # 可重复读 repeatable read # 串行化 serializable; # 注意。设置了隔离级别。必须要重新启动一下客户端，才能生效。 \",\"MySQL的可重复，可以解决部分幻读问题，不能完全解决。\",\"image-20221226112408097\",\"读未提交：V1、V2、V3均为2。\",\"读已提交: V1为1，V2为2，V3为2\",\"可重复读： V1,V2为1， V3为2\",\"串行化: 事务2修改的过程中。会一直等待，直到事务1提交\",\"后端工程 https://gitee.com/snow-lee/java-gui 前端工程 https://gitee.com/snow-lee/vue-gui 尝试把这两个项目起起来了。 然后如果能看懂后端代码，能改更好。 前端这块，能改更好。 conntroller ===> 服务器内部路径 service mapper(dao) \",\"工作过程需要的数据库知识，我们已经具备了。\",\"但是面试的时候，会被问的问题有很多很多。\",\"关于数据库这块，建议多学。\",\"leetcode和学学数据库的问题。\",\"锦上添花\"]},\"213\":{\"h\":\"04. 连接池\",\"t\":[\"学习目标\",\"理解连接池是什么\",\"掌握池化思想的好处\",\"会使用第三方的连接池\",\"连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。\",\"image-20230103093213233\",\"使用连接池有哪些好处？\",\"减少连接创建时间\",\"创建新的 JDBC 连接仍会有网络和 JDBC 驱动的开销。如果这类连接是“循环”使用的，使用该方式这些花销就可避免。平分。\",\"简化的编程模式\",\"当使用连接池时，每一个单独的线程能够像创建了一个自己的 JDBC 连接一样操作，允许用户直接使用JDBC编程技术。\",\"受控的资源使用\",\"如果用户不使用连接池，而是每当线程需要时创建一个新的连接，那么用户的应用程序的资源使用会产生非常大的浪费并且可能会导致高负载下的异常发生。\",\"image-20230103093823203\",\"池化思想 池化技术。\",\"听不懂面试官的问题。\",\"面试时，如果面试官问连接池有什么好处、线程池有什么好处？应该怎么答呢？\",\"池化技术（Pooling）是一种常见的资源管理技术，它可以通过预先创建和维护一定数量的资源实例来提高系统的性能和可靠性。池化技术的好处包括：\",\"提高性能：池化技术可以避免频繁地创建和销毁资源实例，从而减少了资源的开销和系统资源的消耗。这样可以提高系统的性能和响应速度。\",\"提高可靠性：池化技术可以监控资源实例的状态，如果资源实例出现异常或超时，池化技术会自动将其标记为无效实例，并重新创建新的实例。这样可以提高系统的可靠性和稳定性。\",\"节约资源：池化技术可以限制资源实例的数量，以避免过多的实例占用系统资源。这样可以节约资源，并提高系统的可扩展性和稳定性。\",\"简化开发：池化技术可以通过配置文件或代码来管理资源实例，使得开发人员可以更加方便地使用资源实例，同时也减少了一些资源管理的复杂性。\",\"总之，池化技术是一种非常有用的技术，可以提高系统的性能、可靠性、节约资源和简化开发。在高并发、大数据量的应用场景下，使用池化技术可以发挥更加显著的优势。常见的池化技术包括连接池、线程池、对象池等。\",\"连接池。你需要使用的时候，从池子里面（集合）取；使用完毕，放回池子。\",\"{ private static List<Connection> connections; private static String driverClassName; private static String url; private static String username; private static String password; static { connections = new ArrayList<>(); Properties properties = new Properties(); try { properties.load(new FileInputStream(\\\"db.properties\\\")); } catch (IOException e) { throw new RuntimeException(e); } driverClassName = properties.getProperty(\\\"driverClass\\\"); url = properties.getProperty(\\\"url\\\"); username = properties.getProperty(\\\"username\\\"); password = properties.getProperty(\\\"password\\\"); try { Class.forName(driverClassName); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } for (int i = 0; i < 5; i++) { try { connections.add(DriverManager.getConnection(url, username, password)); } catch (SQLException e) { throw new RuntimeException(e); } } } /** * 获取连接的方法，如果连接池为空，则直接返回null。 * * @return 连接池对象 */ public static Connection getConnection() { if (connections.isEmpty()) { return null; } return connections.remove(0); } public static void returnConnection(Connection connection) { connections.add(connection); } } \",\"实现了哪些功能 \",\"数据库的连接获取和释放\",\"自动扩容\",\"未实现哪些功能 \",\"初始化容量，扩容数量的优化\",\"最大连接数量的限制\",\"没有超时自动回收功能\",\"如果每一种连接池都有一种自己的获取连接的方式，会导致非常混乱。\",\"// 连接池A提供的获取连接的方法 Connection getConnection(){} // 连接池B提供的获取连接的方法 Connection aquireConnection(){} // 连接池C提供的获取连接的方法 Connection get(){} \",\"这样对于Java的使用者来说去使用第三方开源的数据库连接池就可能不太方便，那么Java开发者就在JDBC中定义了一个数据库连接池的接口（ javax.sql.Datasource ），其他的数据库连接池的实现都需要去实现这个接口，这就对我们Java开发者来说造成了极大的便利，方便我们去在Java中使用数据库连接池。\",\"DataSource接口，就是JDBC提供给我们的一个获取连接的接口。\",\"public interface DataSource extends CommonDataSource, Wrapper { Connection getConnection() throws SQLException; Connection getConnection(String username, String password) throws SQLException; } \"]},\"214\":{\"h\":\"DBCP\",\"t\":[\"不需要大家把这些背下来。 只要能照着文档，用起来就行。\",\"最早大家都用的连接池。但是在 中间断更了几年，后续出现了一些bug，无人维护，所以索性有一些公司就自己开始开发了。\",\"官网\",\"导包。需要两个包：commons-dbcp、commons-pool\",\"image-20230103112524017\",\"配置\",\"username=root password=123456 url=jdbc:mysql://localhost:3306/test7 driverClassName=com.mysql.jdbc.Driver # 配置的参数。可以不用在url后面写。以分号分割 connectionProperties=characterEncoding=utf8;useSSL=false # 初始化容量。 initialSize=10 \",\"使用\",\"public class DbcpDataSource1 { public static void main(String[] args) throws SQLException { DataSource dataSource = null; try { Properties properties = new Properties(); properties.load(new FileInputStream(\\\"dbcp.properties\\\")); dataSource = BasicDataSourceFactory.createDataSource(properties); } catch (Exception e) { throw new RuntimeException(e); } Connection connection = dataSource.getConnection(); ExecuteQueryByConnection.executeQuery(connection); connection.close(); } } public class ExecuteQueryByConnection { public static void executeQuery(Connection connection) throws SQLException { PreparedStatement preparedStatement = connection.prepareStatement(\\\"select * from account\\\"); ResultSet resultSet = preparedStatement.executeQuery(); while (resultSet.next()) { int id = resultSet.getInt(\\\"id\\\"); String name = resultSet.getString(\\\"name\\\"); BigDecimal money = resultSet.getBigDecimal(\\\"money\\\"); System.out.println(id + \\\" __ \\\" + name + \\\" __ \\\" + money); } } } \",\"之前特别流行的连接池，但是由于中间几年没有更新，所以现在一般都是一些老项目在使用。\",\"如果单独导入了一个包(commons-dbcp)，报错了，怎么办？遇到这类问题，怎么解决？\"]},\"215\":{\"h\":\"C3P0\",\"t\":[\"dbcp断更后。出来的一个新的数据库连接池。\",\"这里给大家演示一个问题，我们需要导两个包。有的时候忘记了，只导了一个，会出现什么问题？\",\"lang.NoClassDefFoundError: com/mchange/v2/ser/Indirector\",\"没导入包会出现这个问题\",\"导包了，但是版本不对。\",\"拿这个报错去搜索引擎搜索搜索。或者去ChatGPT问。\",\"导包\",\"image-20230103115558878\",\"配置\",\"需要在src目录下，新建一个配置文件。\",\"方式一：(xml文件)\",\"名字为固定的 c3p0-config.xml\",\"<c3p0-config> <default-config> <property name=\\\"driverClass\\\">com.mysql.jdbc.Driver</property> <property name=\\\"jdbcUrl\\\">jdbc:mysql://localhost:3306/test7?characterEncoding=utf8&amp;useSSL=false</property> <property name=\\\"user\\\">root</property> <property name=\\\"password\\\">123456</property> <property name=\\\"checkoutTimeout\\\">30000</property> <property name=\\\"idleConnectionTestPeriod\\\">30</property> <property name=\\\"initialPoolSize\\\">10</property> <property name=\\\"maxIdleTime\\\">30</property> <property name=\\\"maxPoolSize\\\">100</property> <property name=\\\"minPoolSize\\\">10</property> </default-config> </c3p0-config> \",\"方式二：(properties文件)\",\"名字为固定的： c3p0.properties\",\"c3p0.driverClass=com.mysql.jdbc.Driver c3p0.jdbcUrl=jdbc:mysql://localhost:3306/test7?characterEncoding=utf8&useSSL=false c3p0.user=root c3p0.password=123456 \",\"使用\",\" static DataSource cpds; static { // 会自动去类路径下，会找指定的配置文件 cpds = new ComboPooledDataSource(); } \",\"注意：c3p0的配置文件位置，都是写死在C3p0的代码里，所以配置文件的名字和位置都只能是固定的。\"]},\"216\":{\"h\":\"Druid\",\"t\":[\"阿里。\",\"导包\",\"image-20230103142712492\",\"配置（写得配置文件，只要你有办法找到即可。但是尽量不要写绝对路径）\",\"driverClassName=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/test7?characterEncoding=utf8&useSSL=false username=root password=123456 \",\"使用\",\"Properties properties = new Properties(); properties.load(new FileInputStream(\\\"druid.properties\\\")); DataSource dataSource = DruidDataSourceFactory.createDataSource(properties); Connection connection = dataSource.getConnection(); \"]},\"217\":{\"h\":\"HikariCP\",\"t\":[\"Springboot的一个数据库连接池。说明比较牛。\",\"导包\",\"image-20230103174354990\",\"配置\",\"jdbcUrl=jdbc:mysql://localhost:3306/test7?characterEncoding=utf8&useSSL=false username=root password=123456 \",\"使用\",\"Properties properties = new Properties(); properties.load(new FileInputStream(\\\"hikaricp.properties\\\")); HikariConfig config = new HikariConfig(properties); HikariDataSource hikariDataSource = new HikariDataSource(config); Connection connection = hikariDataSource.getConnection(); \",\"重点：\",\"池化思想。代码怎么写，不是特别重要，但是还是要练习。\",\"一定一定要能自己的话描述出来。不是背出来。\"]},\"218\":{\"h\":\"05. 索引\",\"t\":[\"学习重点\",\"理解索引是什么，为什么需要索引\",\"掌握索引的数据结构，其他结构为什么不行\",\"MySQL中索引的实现，MyISAM和InnoDB的主键索引和非主键索引\",\"理解什么是回表，什么是覆盖索引\",\"面试的重点。\",\"索引（Index）是数据库中一种特殊的数据结构，它用于提高数据库查询的效率和速度。在数据库中，索引类似于书籍中的目录，可以根据关键字快速定位到数据所在的位置，从而加速查询操作。\",\"索引通常包括一个或多个列，每个列包含一个唯一的值，用于标识数据行。当查询语句包含一个或多个索引列时，数据库可以使用索引来快速定位符合条件的数据行，而不必扫描整个数据表。这可以大大提高查询速度，特别是对于大型数据表和复杂查询语句的情况下。\",\"在数据库中，常用的索引类型包括主键索引、唯一索引、普通索引等。不同的索引类型适用于不同的查询场景，开发人员需要根据实际需求选择合适的索引类型。\",\"需要注意的是，索引虽然可以提高查询效率，但也会占用一定的存储空间。因此，在设计数据库时需要仔细考虑索引的使用，避免过度使用索引导致数据库性能下降。同时，索引的维护也需要一定的时间和资源，因此需要根据实际情况定期进行索引优化和维护。\"]},\"219\":{\"h\":\"介绍\",\"t\":[\"什么是索引呢？索引其实就是一种可以帮助我们提高查询速度的数据结构。\",\"索引类似于一部字典开头的目录，可以帮助MySQL提高查询语句的效率。\",\"image-20230104141745391\",\"image-20230215211126819\",\"image-20230104141851986\"]},\"220\":{\"h\":\"索引的数据结构\",\"t\":[\"我们说索引是一个可以帮助我们高效获取数据的数据结构，那么索引采用的是什么样的数据结构呢？\",\"去探讨一个数据结构适不适合当索引主要有以下三个考察指标：\",\"查询单个值\",\"select * from user where id=10; select * from user where name=\\\"zhangsan\\\"; \",\"查询范围值\",\"select * from user where id between 1 and 10; select * from user where age < 18; -- 索引是不是只能是int的值 \",\"插入数据\",\"insert into user(name,age) values (\\\"zhangsan\\\", 20); \",\"常见的数据结构\",\"数组，链表，有序数组，二叉搜索树，B树，B+树，Hash表\",\"数组：\",\"image-20230104090454019\",\"查找单个值，速度慢。因为要比较所有的数据\",\"查找范围值，速度慢，因为要比较所有数据\",\"插入值，速度快。\",\"链表：\",\"image-20230104090705907\",\"查找单个值，速度慢。因为要比较所有的数据\",\"查找范围值，速度慢，因为要比较所有数据\",\"插入值，速度快。\",\"有序数组\",\"查询单个值：速度快。采用二分法\",\"查询范围值：速度快。因为是有序的，先查找一个边界，然后再顺着走。\",\"插入数据：速度慢。因为插入一条数据，需要挪动数据。\",\"有序数组，一般不用来做索引。数据不要频繁插入和删除。历史数据。\",\"有序数组，不适合用来做普通的索引，有没有什么场景可以用它来做索引。历史数据。2016年的淘宝订单。\",\"**二叉搜索树：**左小右大。\",\"image-20230104090954251\",\"定义：\",\"它或者是一棵空树，或者是具有下列性质的二叉树：\",\"若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；\",\"若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；\",\"它的左、右子树也分别为二叉排序树。\",\"优点： 查找单个数据方便，查找范围值不方便。\",\"缺点：只有两个孩子。当数据量增大的时候，树的高度会升高，这个时候查询的次数就会变多。随着数据量的增大，会影响查询速度。\",\"左子树的所有值，小于根节点的值。右子树的所有值，大于根节点。\",\"查找单个值，速度快。 查找范围值，速度中等，因为要在父节点和子节点之间反复跳转。\",\"插入数据，速度快。\",\"特殊的二叉搜索树。红黑树。\",\"查找单个值，速度快。 查找范围值，速度慢，因为要在父节点和子节点之间反复跳转。\",\"插入数据，速度快。\",\"存储信息的密度，高不高。\",\"存储100w大小的表。log2(100w)。树的高度是20。\",\"关系型数据库，数据都是放在磁盘里面。一层就要读一次磁盘。\",\"100w条数据。select * from user where id=50301;\",\"10ms * 20次 = 200ms = 0.2s\",\"搜索树(B树、B+树) \",\"B树\",\"查询单个值 比数组和链表要方便很多，比二叉树高度降低了，查询的效率也变高了\",\"查询范围值 查询范围值需要在父子节点之前反复查找，其实不太方便\",\"插入数据：速度快\",\"image-20230217094430276\",\"B树对比红黑树和二叉树最大的进步：树的高度降低了，查询效率变高了。\",\"为什么说树的高度降低了之后，查询效率会变高：\",\"这个主要是和磁盘的读取策略以及 数据库的设计策略有关系。\",\"结论：数据库在读取数据的时候，每一层会经过一次磁盘IO。假如数据的高度比较高，那么就需要经过多次的磁盘IO才能找到对应的数据，树的高度降低了之后，磁盘IO的次数会减少，那么这个时候查询速度增高。\",\"B+树（Btree）\",\"B+树其实就是在B树的基础之上进行了优化。 \",\"叶子节点之间维护一个指针，方便了范围查找\",\"所有的非叶子节点，都在叶子节点中冗余一份\",\"所以的非叶子节点，只存储key，不存储data，会降低树的高度，进一步提高查询的效率。\",\"查询单个值 比较方便，速度快\",\"查询范围值 比较方便（因为叶子节点之间维护了一个指针，指向下一个叶子节点）\",\"插入值：方便\",\"B+树其实也是MySQL官方推荐我们使用的数据结构。Btree\",\"MySQL对标准的B+树做了一些优化。主要就是增加了回去的指针。\",\"image-20220516155240706\",\"Hash表\",\"hash索引。在MySQL中，也有一种索引类型，叫做Hash索引，底层使用的是Hash表。\",\"image-20220516155810313\",\"查询单个值 很方便，对比B+树来说要方便一些\",\"查询范围值 很不方便，需要一个一个查。\",\"插入值： 方便\",\"Hash索引是MySQL内部使用的一种索引，没有开放给用户使用。\",\"我们选来做索引的就是B+树。\",\"问题1： 索引的结构为什么选B+树。为啥不选红黑树做索引。\",\"问题2： 为什么索引结构是B+树？\",\"先分析一些显而易见的不适合用来做索引的（数组 链表 有序数组）。再对比分析，为什么红黑树和二叉搜索树不行，主要的问题，是存储信息的密度太低。\",\"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\"]},\"221\":{\"h\":\"索引的实现\",\"t\":[\"索引的实现其实就是去介绍一下，数据库中数据到底是怎样存储的。在介绍这个之前，我们需要先了解一下数据库的组成结构。\",\"image-20220516161720378\",\"了解了MySQL的结构之后，那我们就可以知道，数据的存储和存储引擎息息相关。不同的存储引擎存储数据的方式是不一样的。\",\"MySQL底层的存储引擎是作为一个插件存在。\",\"存储引擎就是MySQL底层怎样组织这些数据。（这些数据最终都是在磁盘上的），也就是在磁盘上怎样组织这些数据。\",\"在MySQL中，有很多种存储引擎\",\"InnoDB（5.1之后默认的存储引擎），这个存储引擎其实一开始是以插件的形式存在的，在5.1之后，MySQL官方团队把InnoDB当成了默认的存储引擎。\",\"MyISAM（5.1之前默认的存储引擎），这个存储引擎是由MySQL的官方团队开发的。亲儿子。\",\"Memory（基本不用）\"]},\"222\":{\"h\":\"MyISAM\",\"t\":[\"C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 5.7\\\\Data\",\"image-20230105104700331\",\"首先，来看一下MyISAM这种存储引擎是怎样存储数据的。\",\"MyISAM的表都有三个文件：\",\"image-20230105105007290\",\".frm\",\"表结构定义文件.定义表结构， 表里面有哪些列，列的类型。\",\".MYD\",\"数据文件，其实也就是这个表中的数据都存储到这个文件中\",\".MYI\",\"索引文件，这个表中的所有的索引树都是存储在这个文件中\",\"mysql> create table t_myisam ( ID int primary key, k int NOT NULL DEFAULT 0, s varchar(16) NOT NULL DEFAULT '', -- index关键词 表明我想创建一个索引 -- k 索引的名字 -- (k) 索引列 index k_name(k) ) engine=MyISAM; insert into t_myisam values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg'); \",\"image-20230106112545426\",\"key就是主键。data存储的就是数据的地址（指向MYD文件中。）\",\"image-20230106112808292\",\"MyISAM的索引分为两种类型，一种叫做主键索引，一种叫做非主键索引。\",\"对于MyiSAM来说，MYI文件里面存储的是索引，MYD文件里面存储的data。\",\"对于它的主键索引，key是主键值，data是地址值。\",\"对于它的非主键索引，key是索引值，data是地址。\"]},\"223\":{\"h\":\"主键索引\",\"t\":[\"主键索引是指MyISAM默认会根据主键这一列的值，去建立一个B+树，这个B+树就叫做主键索引树。\",\"key：主键值\",\"data：主键这一行数据对应的地址值\"]},\"224\":{\"h\":\"非主键索引\",\"t\":[\"MyISAM中的非主键索引，是指我们可以把其他的非主键列声明为索引列，那么这样MyISAM就可以帮助我们根据这一列的值去建立一个索引树。意味着一个表可以有多个索引树。\",\"key：索引列的值\",\"data：索引列这一行数据对应的地址值\",\"对于MyISAM中的索引来说，数据和索引是分开存储的，这种索引叫做 非聚集索引。\"]},\"225\":{\"h\":\"InnoDB\",\"t\":[\"InnoDB的索引分为两种类型，一种叫做主键索引，一种叫做非主键索引。\",\"每一个InnoDB表都有两个文件：\",\"image-20230105110047347\",\".frm\",\"表结构定义文件\",\".ibd\",\"数据和索引文件：这个文件中存储了数据和索引。\",\"mysql> create table t_innodb ( ID int primary key, k int NOT NULL DEFAULT 0, s varchar(16) NOT NULL DEFAULT '', index k_name(k) ) engine=InnoDB; insert into t_innodb values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg'); \"]},\"226\":{\"h\":\"主键索引\",\"t\":[\"image-20230106112909592\",\"key：主键值\",\"data：主键这一行对应的其他列的数据\",\"在InnoDB的主键索引中，索引和数据是存储在同一个数据页中，也就是索引和数据是存储在一起的，这种叫做聚集索引。\",\"在InnoDB中，数据是依附于主键索引树来存储的，假如没有主键的话，那么就不存在主键索引树，那么数据也没办法存储。\",\"所以对于InnoDB的表来说，必须得有一个主键。\",\"对于InnoDB的表来说，如果用户在建表的时候，没有设置主键，那么InnoDB会维护一个隐藏的列来当做主键。\",\"1.myisam使用索引存储。主键索引和非主键索引，其实存储的都是地址。 都需要去数据文件中找这个数据\",\"2.innodb使用索引存储，主键索引，直接存储的是数据。非主键索引，存储的是主键的值。\",\"select * from t where k=3;\"]},\"227\":{\"h\":\"非主键索引\",\"t\":[\"非主键索引是指根据其他的列建立的索引。\",\"image-20230106112943799\",\"key：索引列的值\",\"data：这一行数据对应的主键值\",\"在InnoDB的非主键索引中，索引只和主键存储在到了一起，实际上没有和数据存储在一起，其实也是非聚集索引。\",\"对于MyISAM来说，主键索引和非主键索引，都是怎么存的？\",\"都是存的B+树，然后key是索引的值，data都是存的地址。这个地址是指向MYD文件里面的。\",\"对于InnoDB来说，主键索引和非主键索引。\",\"主键索引，存的B+树，key是主键的值，value是这一行的其他值。\",\"（100,1，‘aa'）\",\"对于非主键索引，key存的是索引的值，value是主键的值。\"]},\"228\":{\"h\":\"MyISAM 与InnoDB的区别\",\"t\":[\"存储的文件不一样，MyISAM有三个文件(frm MYD MYI)、InnoDB只有两个文件(frm ibd)。\",\"InnoDB支持事务、MyISAM不支持事务\",\"既然MyISAM不支持事务，那么MyISAM还有没有用呢？\",\"什么样的表不需要事务呢？存储什么样的数据才不需要事务呢？什么样的数据不需要使用增删改呢？ 历史数据。普通的日志数据。\",\"InnoDB支持外键，MyISAM不支持外键\",\"InnoDB支持表锁和行锁，MyISAM只支持表锁\",\"image-20220516173955741\"]},\"229\":{\"h\":\"Innodb举例\",\"t\":[\"还是使用之前的数据。\",\"mysql> create table T ( ID int primary key, k int NOT NULL DEFAULT 0, s varchar(16) NOT NULL DEFAULT '', index k(k) ) engine=Innodb; insert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg'); \",\"image-20230106113018528\",\"如果现在查询一条SQL，经历怎样的过程？\",\"如果查询的SQL是这样的： select * from T where id=500;\"]},\"230\":{\"h\":\"回表\",\"t\":[\"select * from T where k =3;\",\"在k索引树上找到k=3的记录，取得ID=300\",\"再到ID索引树查到ID=300对应的行\",\"再到主键索引树上找到k=5的记录，发现不符合条件。\",\"在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 2 条记录（步骤 1、3 ），回表了一次（步骤 2 ）。在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？\",\"如果我们写得SQL是这样： select id from T where k=3;\",\"后续，需要什么字段，拿什么字段，不要直接写*。有可能会造成不必要的回表。\",\"select * from T where k between 3 and 5;\",\"这个SQL，会经历怎样的过程？\",\"select * from T where k between 3 and 5;\",\"去k索引树上找，k=3。拿到id=300\",\"回主键索引树，取得这一行的数据。\",\"去k索引树，往后拿5，拿到id=500\",\"回主键索引树，取得这一行的数据。 拿id=500的数据\",\"再往后拿，拿到k=6. 不符合条件，结束。\",\"这个过程，我们在k索引树上读了三条记录 （3 5 6）。回表了两次(300 500)\"]},\"231\":{\"h\":\"覆盖索引\",\"t\":[\"select ID from T where k =3\",\"如果执行的语句是 这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。\",\"今后建议大家，不要写 select * from T where k=3; 需要哪些列，你就把这些列，全部写出来。\"]},\"232\":{\"h\":\"索引的语法\",\"t\":[\"我们给一个列声明为主键，默认主键这一列就会是主键索引（主键这一列会默认创建一个主键索引树）\",\"-- 查询索引 show index from innodb_user; drop table if exists student1; -- 建立索引 create table student1( id int PRIMARY KEY, name varchar(20), age int(10), gender varchar(10), -- index 索引的名字(列名) -- index 索引的名字(列名1, 列名2) 联合索引 index idx_name(name) using BTREE )ENGINE=InnoDB ; select * from student1; show index from student; -- 删除索引 -- alter table TABLE_NAME drop index INDEX_NAME; alter table student1 drop index idx_name; -- 添加索引 alter table student add index idx_age(age); alter table student add index idx_name_age(name,age); \",\"有时候发现，有一条SQL，特别慢，怎么办？\",\"首先，需要看一下这个SQL。SQL是否写得有问题： select * from t where s = 'ee';\",\"其次，如果条件没有办法动。尝试建索引。\",\"explain。下去可以看下。 可以看查询的过程，查询中，是否走了索引。\",\"select * from t where k=5 and s = 'ee';\"]},\"233\":{\"h\":\"面试题\",\"t\":[\"索引采用的是什么数据结构？为什么采用这种数据结构\",\"B+树。列举一下其他的数据结构，对比一下。\",\"数据库为什么推荐使用自定义主键，并且在MySQL中使用推荐使用主键自增的策略？\",\"自定义主键：MySQL默认的使用的是InnoDB存储引擎，那么InnoDB存储引擎的数据和主键索引树是绑定在一起的，假如没有主键索引树，那么数据没有办法存储。假如没有给表指定主键的话，那么InnoDB会创建一个隐藏的列来当做主键，并建立主键索引树。假如使用了隐藏的列来当做的主键的话，那么我么查询的时候，就会浪费主键索引索引树带来的索引性能，所以推荐自己定义主键。\",\"自增的策略：\",\"因为自增的策略，在插入的时候，永远只会插入到索引树的右侧，那么这样就能保证树的结构不会发生比较大的改变，而结构改变是需要消耗时间的，所以这样就能保证插入的效率会比较稳定。\",\"create table student1( id int primary key auto_increment, name varchar(255), create_time timestamp default current_timestamp, update_time timestamp default current_timestamp on update current_timestamp ) \",\"InnoDB和MyISAM有什么区别？什么情况下使用MyISAM？\",\"什么是回表？如何避免回表？\",\"create table ts( id int PRIMARY KEY, name varchar(20), age int, index idx_name(name,age) using BTREE )character set utf8; select * from ts where id = 1; -- 查询主键索引树、查询速度快 select * from ts where name='zhangsan'; -- 会先去 idx_name索引树上找。 回表。 select * from ts where age = 20; -- 遍历整个主键索引树、查询速度很慢 -- 先查询index_name 整个索引的索引树，查询到的结果是主键 -- 再根据查询到的主键值 去主键索引树查询 对应的数据 select id,name,age from ts where name = '张三'; -- 最左匹配元素 -- 索引的生效范围是最左开始的。 (name,age,address ) -- 查询中，写什么，能走到索引？ -- select * from ts where name='zhangsan'; -- 光走age不行。 -- select * from ts where name='zhangsan' and age=20; -- (a, b, c, d) 用哪些作为查询条件，可以走这颗索引树 a a,b a,b,c a,b,c,d \",\"回表：在一次查询中，假如需要先根据非主键索引树查询主键值，然后再根据主键值查询主键索引树，这种查询了两遍索引树的情况，叫做回表。\",\"在实际的工作中，应该要尽量避免回表的情况出现，如何避免呢？\",\"尽量使用主键查询\",\"尽量避免写 select *\",\"可以考虑使用联合索引.多个列创建一个索引。\",\"索引性能这么好，是不是一个表建立的索引越多越好？\",\"不是。\",\"声明一个索引列，需要建立一个索引树，需要占用空间\",\"假如声明的索引变多了之后，对应的索引树也会变多，查询的效率固然会提升，但是增删改的时候要去改变数据，改变数据势必会改变索引树的结构，维护这些索引树的成本也就提升了，增删改的效率也就降低了。\",\"那么一般针对一个表，建立几个索引比较合适呢？通常默认为一个表建立的索引不要超过5个。\",\"什么样的列适合当索引？\",\"数据不重复出现的\",\"值尽量不为空的（null）\",\"业务场景中查询条件比较多的\",\"这一列的值不经常变化的\",\"三层可以存多少数据？\",\"B+树和二叉搜索树的效率。\",\"对于Innodb的B+树来说，节点大小是16k。\",\"id bigint ，还有引用，在MySQL中大概占6字节。bigint 8个字节。总共14个字节。\",\"16 * 1024 / 14 = 1170个数据\",\"底下层1k一行。 所以最终三层可以存储1170*1170*16 = 2KW\",\"最终，让第一层常驻内存，也就是我只用读两次磁盘，就可以获取我想要的数据。\"]},\"234\":{\"h\":\"06. Mybatis\",\"t\":[\"SSM: Spring SpringMVC MyBatis。\",\"MyBatis本是apache基金会的一个开源项目ibatis ，2010年这个项目由apache迁移到了google code， 并且改名为Mybatis。2013年11月代码迁移到了github. Mybatis是一个基于Java的持久层框架。（DAO Mapper）\",\"Mybatis是一个ORM框架。MyBatis是一种流行的Java持久化框架，用于简化数据库访问和操作。它提供了一种将数据库查询、插入、更新和删除操作与Java对象之间的映射的方式。\",\"// ORM：Object Relationship Mapping。 对象关系映射(说白了, 就是可以把Java中的对象映射成关系(数据表中的一条数据))。 其实Mybatis就是一个可以帮助我们把 关系型数据库中的记录转化为 Java对象 ，把Java对象转化为关系型数据库中的记录的这么一个框架。 举例来说。 之前我们写得查询executeQuery()方法， 查询user表，拿回来一个ResultSet对象， 我们需要去遍历， 如果我们在Java中有这样一个类User与之一一对应， 这时候需要我们手动将这个类的属性设置进去， 但是有了Mybatis，只要配置好映射关系， 就可以自动完成映射。（也即从表中的记录 到 Java对象 这个过程）。 Mybatis被称为ORM框架，就是负责将表中的数据映射到类上。把类上的数据映射到表上。 建立两者之间的关系。 \",\"Mybatis就是一个可以帮助我们在Java代码中更加高效的去操作数据库的这么一个框架。\",\"官网 : https://mybatis.org/mybatis-3/zh/index.html\",\"传统的JDBC查询代码\",\"public class QueryDemo { public static void main(String[] args) { // JDBC连接信息 String url = \\\"jdbc:mysql://localhost:3306/test_52th3\\\"; // 替换为你的数据库连接信息 String username = \\\"root\\\"; // 替换为你的数据库用户名 String password = \\\"123456\\\"; // 替换为你的数据库密码 // SQL查询语句 String sql = \\\"SELECT * FROM user\\\"; List<User> resultList = new ArrayList<>(); try (Connection connection = DriverManager.getConnection(url, username, password); Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(sql)) { while (resultSet.next()) { int id = resultSet.getInt(\\\"id\\\"); String name = resultSet.getString(\\\"name\\\"); String email = resultSet.getString(\\\"email\\\"); // 创建User对象并打印查询结果 User user = new User(id, name, email); resultList.add(user); } } catch (SQLException e) { e.printStackTrace(); } System.out.println(resultList); } } \",\"使用接口的方式写这个关系。\",\"导包\",\"<!--mybatis--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.9</version> </dependency> <!-- 数据库驱动包 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> <scope>runtime</scope> </dependency> \",\"配置1: 配置一个Mybatis的主配置文件，用来获取SqlSessionFactory。（mybatis-config.xml）\",\"// SqlSessionFactory：每一个Mybatis应用都是以SqlSessionFactory的实例对象为核心的。使用Mybatis必须以SqlSessionFactory的实例为核心，再以SqlSessionFactory的实例生产SqlSession实例对象的。 // SqlSession：这个其实表示和数据库之间的一个连接，里面封装了 Connection对象 \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!-- 约束文件 --> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <!-- 注意这个configuration配置包括内部配置: 不要更换配置顺序 --> <configuration> <!-- 环境的配置，其实就是去配置数据库连接--> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/db7?useSSL=false&amp;characterEncoding=utf8\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </dataSource> </environment> </environments> <mappers> <!--<mapper resource=\\\"UserMapper.xml\\\"/>--> <!--<mapper resource=\\\"com/cskaoyan/mapper/UserMapper.xml\\\"/>--> </mappers> </configuration> \",\"配置2: 配置一个专门用来存放SQL语句的配置文件，UserMapper.xml\",\"// 在Mybatis中，这样的文件可以有多个。我们使用一个xml文件来存放一组SQL， 比如对学生的SQL，对订单的SQL // 这些文件，都必须在Mybatis的主配置文件中，声明进来 \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace: 命名空间，整个项目中必须唯一，暂时可以任意取名(后面再进行标准化) --> <mapper namespace=\\\"AccountMapper\\\"> <!-- 每个标签都需要一个唯一的id属性: 每一个标签的id不能重复(本Mapper文件中), 用来标识一条SQL --> <!-- 在这个Mapper文件中, 怎么唯一表示SQL语句? namespace.id (命名空间.标签的id ) 是这个SQL语句的坐标 --> <!-- <insert> 插入标签 --> <!-- <delete> 删除标签 --> <!-- <update> 修改标签 --> <!-- <select> 查询标签 --> <!-- parameterType：参数的类型(可以省略,标准语法要指明 ) --> <!-- resultType：返回的结果集的类型(不能省略) --> <select id=\\\"selectAccountById\\\" parameterType=\\\"java.lang.Integer\\\" resultType=\\\"com.cskaoyan.bean.Account\\\"> select * from account where id = #{id} </select> <select id=\\\"selectAccountList\\\" resultType=\\\"com.cskaoyan.bean.Account\\\"> select * from account </select> </mapper> \",\"使用\",\"@Test public void test1() throws IOException { // 1.读取配置文件 InputStream inputStream = Resources.getResourceAsStream(\\\"mybatis-config.xml\\\"); // 2.创建一个SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 3.通过SqlSessionFactory获得一个SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 4.执行SQL语句：传入SQL语句的坐标 // 这里传入的 statement 是一个坐标，用来标识这个SQL的坐标。 使用 namespace.id 来唯一标识这条SQL // 参数写得1，代表传进去一个参数 User user = sqlSession.selectOne(\\\"UserMapper.selectUserById\\\", 1); // sqlSession.selectList(); System.out.println(user); List<User> userList = sqlSession.selectList(\\\"UserMapper.selectUserList\\\"); System.out.println(userList); // 5.关闭连接 sqlSession.close(); } \"]},\"235\":{\"h\":\"动态代理\",\"t\":[\"一些问题\",\"// 目前Mybatis使用起来还不够灵活，不够简单 // 虽然解决了硬编码的问题，但是出现了一些新的问题 SQL语句的坐标硬编码 sqlSession调用的方法需要我们去指定 \",\"而Mybatis的动态代理可以帮助我们去生成接口的代理对象。我们可以自己不实现接口。\",\"代理解释一下。\",\"而Mybatis的动态代理可以帮助我们去生成接口的代理对象。我们可以自己不实现接口。\",\"不需要实现接口，那么就需要遵守Mybatis使用动态代理的一些规则。\",\"必须要遵循的规则\",\"接口的全限定名称 和 mapper.xml中的namespace的值保持一致。\",\"接口中的方法和 xml文件中的 <select> <insert> <update> <delete> 标签 一一对应，并且方法名要和标签的id值保持一致\",\"方法的返回值类型和标签中的resultType保持一致(注意:添加/删除/修改不需要返回值类型)\",\"参数保持一致(暂时可以不写)\",\"建议要遵守的规则：希望\",\"还是建议遵守。\",\"文件的名字 StudentMapper.xml | StudentMapper.java 建议保持一致。 ---》好认。 好认出来，是一起的。\",\"StudentMapper.xml 和StudentMapper.java 在编译之后的位置应该要在同一个路径下。\",\"image-20230713145215803\",\"如何使用动态代理呢？\",\"@Test public void test1() { // 获取SqlSession SqlSession sqlSession = MybatisUtil.getSqlSession(); // 获取代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 调用对应的接口，执行 User user = userMapper.queryUserById(1); System.out.println(user); } \"]},\"236\":{\"h\":\"增删改查示例\"},\"237\":{\"h\":\"添加\",\"t\":[\"<!--在UserMapper中写得内容--> <insert id=\\\"insertUser\\\"> insert into user(id,name,email) values (#{id}, #{name}, #{email}) </insert> \",\"在UserMapper接口\",\"int insertUser(User user); \",\"在测试类中的使用\",\"@Test public void testInsert() { User user = new User(4, \\\"zhangsan\\\", \\\"zhangsan@qq.com\\\"); SqlSession sqlSession = MybatisUtil.getSqlSession(); UserMapper mapper = sqlSession.getMapper(UserMapper.class); int affectedRows = mapper.insertUser(user); System.out.println(affectedRows); // 获取到的SqlSession，默认不会自动提交。需要手动提交，数据才会进去 sqlSession.commit(); //Connection connection = sqlSession.getConnection(); //connection.commit(); } \"]},\"238\":{\"h\":\"删除\",\"t\":[\"在UserMapper.xml中的内容\",\"<delete id=\\\"deleteUserById\\\"> delete from user where id = #{id}; </delete> \",\"在UserMapper接口\",\"int deleteUserById(Integer id); \",\"在测试类中的使用\",\"@Test public void testDeleteById() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); int affectedRows = userMapper.deleteUserById(1); System.out.println(affectedRows); } \"]},\"239\":{\"h\":\"修改\",\"t\":[\"在UserMapper.xml中的内容\",\"<update id=\\\"updateUser\\\"> update user set name = #{name}, email= #{email} where id = #{id}; </update> \",\"在UserMapper接口\",\"int updateUser(User user); \",\"在测试类中的使用\",\"@Test public void testDeleteById() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); int affectedRows = userMapper.deleteUserById(1); System.out.println(affectedRows); } \"]},\"240\":{\"h\":\"查询\",\"t\":[\"在UserMapper.xml中的内容\",\"<select id=\\\"queryUserById\\\" resultType=\\\"com.cskaoyan.bean.User\\\"> select * from user where id = #{id} </select> \",\"在UserMapper接口\",\"User queryUserById(Integer id); \",\"在测试类中的使用\",\"@Test public void testQueryById() { // 获取SqlSession SqlSession sqlSession = MybatisUtil.getSqlSession(); // 获取代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 调用对应的接口，执行 User user = userMapper.queryUserById(1); System.out.println(user); } \",\"自己创建表，通过Mybatis SqlSession（原生方式） 和动态代理分别实现用户注册登录需要的接口 1. 注册接口 2. 登录接口 3. 修改用户信息 4. 销户 create table user_login( id int primary key auto_increment, username varchar(255), password varchar(255), img varchar(255), age int ); \",\"写mybatis，主要分几步 1.在 Mapper接口中，定义方法 2.在xml中，写一个与之对应的标签，然后再标签中写SQL。 3.使用 \"]},\"241\":{\"h\":\"事务\",\"t\":[\"在使用Mybatis的时候, 自带事务，而且事务默认情况下是不会自动提交的\"]},\"242\":{\"h\":\"解决方案一\",\"t\":[\"执行完SQL语句之后, 使用sqlSession提交事务\",\"// 解决办法一: 执行完SQL语句之后, 使用sqlSession提交事务 sqlSession.commit(); \"]},\"243\":{\"h\":\"解决方案二\",\"t\":[\"执行完SQL语句之后, 使用sqlSession内部封装的Connection 提交事务\",\"// 解决办法二: 执行完SQL语句之后, 使用sqlSession内部封装的Connection 提交事务 Connection conn = sqlSession.getConnection(); conn.commit(); \"]},\"244\":{\"h\":\"解决方案三\",\"t\":[\"(自动提交) 在获得SqlSession的时候, 给sqlSessionFactory.openSession设置为真\",\"// 解决办法三:(自动提交) 在获得SqlSession的时候, 给sqlSessionFactory.openSession设置为真 // 获取到的SqlSession，里面的connection不会自动提交 SqlSession session = sqlSessionFactory.openSession(); // 获取自动提交的SqlSession SqlSession session = sqlSessionFactory.openSession(true); \",\"是个Maven项目\",\"第一步: 导包在pom.xml\",\"<dependencies> <!--mybatis--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.9</version> </dependency> <!-- 数据库驱动包 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> <scope>runtime</scope> </dependency> <!-- 测试包 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> </dependencies> \",\"第二步: 配置MyBatis的主配置文件(mybatis-config.xml)\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- 环境的配置，其实就是去配置数据库连接--> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/test_52th?useSSL=false&amp;characterEncoding=utf8\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </dataSource> </environment> </environments> <!-- 去查找的Mapper文件 --> <mappers> <mapper resource=\\\"com/cskaoyan/mapper/UserMapper.xml\\\"/> </mappers> </configuration> \",\"第三步: 创建一个Java接口Mapper接口文件 (注意路径)\",\"第四步: 创建一个与Java接口文件对应的Mapper.xml配置文件\",\"// 在第三/四步骤中: 1, 注意路径保持, 最终经过编译和对应接口文件编译到同一包下 --》 可以让开发者知道接口和这个xml是一起的 2, 文件的名字和接口的文件的名字保持一致 3, xml中的namespace(命名空间)的值要和Java接口的全限定名称保持一致 \",\"第五步: 把mapper.xml配置文件引入到主配置文件中(mybatis-config.xml)\",\"<!-- 去查找的Mapper文件 --> <mappers> <mapper resource=\\\"com/snow/www/mapper/AccountMapper.xml\\\"/> </mappers> \",\"第六步: 加载主配置文件(mybatis-config.xml)\",\"// 1. 读取配置文件 InputStream inputStream = null; try { inputStream = Resources.getResourceAsStream(\\\"mybatis-config.xml\\\"); } catch (IOException e) { e.printStackTrace(); } // 2. 获取SqlSessionFactory SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream); \",\"第七步: 在对应的Mapper文件和对应的Java接口中, 声明SQL和声明方法\",\"// 注意: 1, 方法名和对应xml的SQL的id保持一致 2, 参数和返回值设置正确 3, 注意SQL返回值类型parameterType(结果集的解析是Mybatis自动完成的，不用我们自己解析) 4, 注意SQL语句书写正确 \",\"// 添加 public int insertAccount(Account account); // 查找 public Account selectAccountById(Integer id); \",\"<insert id=\\\"insertAccount\\\" > insert into account set id=#{id}, name=#{name}, money=#{money} </insert> <select id=\\\"selectAccountById\\\" parameterType=\\\"java.lang.Integer\\\" resultType=\\\"com.snow.www.bean.Account\\\"> select * from account where id = #{id} </select> \",\"第八步: 获取SqlSession 和 代理的Mapper对象\",\"// 1. 获取SqlSession sqlSession = sqlSessionFactory.openSession(true); // 2. 获取接口的代理对象 studentMapper = sqlSession.getMapper(AccountMapper.class); \",\"第九步: 通过代理对象调用方法执行SQL语句\",\"Account account = new Account(); account.setId(10); account.setName(\\\"snow\\\"); account.setMoney(200); int rows = accountMapper.insertAccount(account); \",\"主要是介绍Mybatis的核心配置文件。\",\"image-20220519161754944\"]},\"245\":{\"h\":\"properties\",\"t\":[\"properties表示可以外部配置的属性，并可以进行动态替换。(作为典型的是JDBC配置)\",\"driver=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/db47?useSSL=false&characterEncoding=utf8 username=root password=123456 \",\"<configuration> <!-- 引入外部配置文件 --> <properties resource=\\\"com/cskaoyan/mapper/jdbc.properties\\\"/> </configuration> \",\"image-20220519162445492\",\"可以使用外部的propertie配置文件。\"]},\"246\":{\"h\":\"settings\",\"t\":[\"settings是MyBatis的行为配置(类似于idea和settings的关系)\",\"eg: 日志配置\",\"<configuration> <settings> <!-- 添加日志的配置--> <setting name=\\\"logImpl\\\" value=\\\"STDOUT_LOGGING\\\"/> </settings> </configuration> \",\"一个完整的settings配置 (暂时没用)\",\"<settings> <setting name=\\\"cacheEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"lazyLoadingEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"aggressiveLazyLoading\\\" value=\\\"true\\\"/> <setting name=\\\"multipleResultSetsEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"useColumnLabel\\\" value=\\\"true\\\"/> <setting name=\\\"useGeneratedKeys\\\" value=\\\"false\\\"/> <setting name=\\\"autoMappingBehavior\\\" value=\\\"PARTIAL\\\"/> <setting name=\\\"autoMappingUnknownColumnBehavior\\\" value=\\\"WARNING\\\"/> <setting name=\\\"defaultExecutorType\\\" value=\\\"SIMPLE\\\"/> <setting name=\\\"defaultStatementTimeout\\\" value=\\\"25\\\"/> <setting name=\\\"defaultFetchSize\\\" value=\\\"100\\\"/> <setting name=\\\"safeRowBoundsEnabled\\\" value=\\\"false\\\"/> <setting name=\\\"safeResultHandlerEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"false\\\"/> <setting name=\\\"localCacheScope\\\" value=\\\"SESSION\\\"/> <setting name=\\\"jdbcTypeForNull\\\" value=\\\"OTHER\\\"/> <setting name=\\\"lazyLoadTriggerMethods\\\" value=\\\"equals,clone,hashCode,toString\\\"/> <setting name=\\\"defaultScriptingLanguage\\\" value=\\\"org.apache.ibatis.scripting.xmltags.XMLLanguageDriver\\\"/> <setting name=\\\"defaultEnumTypeHandler\\\" value=\\\"org.apache.ibatis.type.EnumTypeHandler\\\"/> <setting name=\\\"callSettersOnNulls\\\" value=\\\"false\\\"/> <setting name=\\\"returnInstanceForEmptyRow\\\" value=\\\"false\\\"/> <setting name=\\\"logPrefix\\\" value=\\\"exampleLogPreFix_\\\"/> <setting name=\\\"logImpl\\\" value=\\\"SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING\\\"/> <setting name=\\\"proxyFactory\\\" value=\\\"CGLIB | JAVASSIST\\\"/> <setting name=\\\"vfsImpl\\\" value=\\\"org.mybatis.example.YourselfVfsImpl\\\"/> <setting name=\\\"useActualParamName\\\" value=\\\"true\\\"/> <setting name=\\\"configurationFactory\\\" value=\\\"org.mybatis.example.ConfigurationFactory\\\"/> </settings> \"]},\"247\":{\"h\":\"typeAliases\",\"t\":[\"typeAlies类型别名。(也就是我们可以对 类 起别名，简化操作) (暂时不建议使用)\",\"<configuration> <!-- 类型别名 --> <typeAliases> <!-- alias别名 type全限定名 --> <typeAlias alias=\\\"account\\\" type=\\\"com.snow.bean.Account\\\"/> <typeAlias alias=\\\"user\\\" type=\\\"com.snow.bean.User\\\"/> </typeAliases> </configuration> \",\"<select id=\\\"selectAccountById\\\" resultType=\\\"account\\\"> select * from account where id = #{id} </select> \",\"image-20220519163541234\",\"注意: Mybatis对于一些基本类型和包装类型，以及集合类型，有内置的别名。\",\"// 值得注意的是下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，而且为了应对原始类型的命名重复，采取了特殊的命名风格。 // 注意: 除了内置别名, 不要乱起别名 \",\" <select id=\\\"selectNameById\\\" parameterType=\\\"java.lang.Integer\\\" resultType=\\\"java.lang.String\\\"> select name from account where id = #{id} </select> <select id=\\\"selectNameById\\\" parameterType=\\\"Integer\\\" resultType=\\\"String\\\"> select name from account where id = #{id} </select> <select id=\\\"selectNameById\\\" parameterType=\\\"integer\\\" resultType=\\\"string\\\"> select name from account where id = #{id} </select> <select id=\\\"selectNameById\\\" parameterType=\\\"_int\\\" resultType=\\\"String\\\"> select name from account where id = #{id} </select> \",\"别名\",\"映射的类型\",\"_byte\",\"byte\",\"_long\",\"long\",\"_short\",\"short\",\"_int\",\"int\",\"_integer\",\"int\",\"_double\",\"double\",\"_float\",\"float\",\"_boolean\",\"boolean\",\"string\",\"String\",\"byte\",\"Byte\",\"long\",\"Long\",\"short\",\"Short\",\"int\",\"Integer\",\"integer\",\"Integer\",\"double\",\"Double\",\"float\",\"Float\",\"boolean\",\"Boolean\",\"date\",\"Date\",\"decimal\",\"BigDecimal\",\"bigdecimal\",\"BigDecimal\",\"object\",\"Object\",\"map\",\"Map\",\"hashmap\",\"HashMap\",\"list\",\"List\",\"arraylist\",\"ArrayList\",\"collection\",\"Collection\",\"iterator\",\"Iterator\",\"注意:\",\"1, typeHandlers: MyBatis 对我们SQL参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。(而在我们使用的时候是无法感知这个问题的, 属于MyBatis的底层处理).\",\"2, ObjectFactory: MyBatis 使用一个对象工厂实例来完成实例化工作。 默认的对象工厂要么通过默认无参构造方法，要么通过有参数的构造方法实例化对象。如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。(不要使用)\",\"后续，在拿数据库中的bean中，尽量用包装类。这样我们才能知道，到底是默认值还是数据库中为空。\",\"class User{\",\"int id;\",\"Integer id;\",\"}\"]},\"248\":{\"h\":\"environments\",\"t\":[\"environments: 可以配置成适应多种环境.比如开发环境、测试环境和生产环境等可能需要有不同的配置.\",\"<!-- 环境的配置，其实就是去配置数据库连接--> <environments default=\\\"development\\\"> <!-- 环境的id，是唯一的--> <environment id=\\\"development\\\"> <!-- 事务管理器 JDBC: 使用JDBC连接来管理事务 MANAGED: 把事务的管理交给外部的容器 --> <!-- 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。--> <transactionManager type=\\\"JDBC\\\"/> <!-- POOLED： 使用Mybatis自带的连接池 UNPOOLED：不使用连接池 JNDI：使用外部的连接池 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> <environment id=\\\"test\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> <environment id=\\\"prod\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> </environments> \"]},\"249\":{\"h\":\"mappers\",\"t\":[\"这个是映射器的配置。配置mapper.xml配置文件。\",\"配置方式一: 直接以对应mapper文件的相对路径(相对target/classess路径)\",\"<configuration> <mappers> <mapper resource=\\\"com/snow/mapper/AccountMapper.xml\\\"/> <mapper resource=\\\"com/snow/mapper/User.xml\\\"/> <!-- mapper中， 可以写resource。（就是相对target/classes的目录） 可以写url，里面就是写得绝对路径. file:/// ${绝对路径} 可以写class，写得是类名的全限定类名，但是要注意类和映射文件要在相同路径下。类名和映射文件名字相同。--> <mapper url=\\\"file:///D:\\\\ideaProjects\\\\java52-course-materials\\\\mapper\\\\UserMapper.xml\\\"/> <mapper class=\\\"com.cskaoyan.mapper.UserMapper\\\"/> </mappers> </configuration> \",\"配置方式二: 配置某个包下的所有的配置文件\",\"<configuration> <mappers> <package name=\\\"com.cskaoyan.demo5.mapper\\\"/> </mappers> </configuration> \",\"select * from user where id=?;\",\"输入映射其实就是在说Mybatis是如何传值的。\",\"// 只有一个参数 // 传递多个参数 // .... \"]},\"250\":{\"h\":\"一个参数\",\"t\":[\"建议使用@Param注解，注解怎么写，xml中就怎么写。\",\"#{任意值} 来取值: 不建议使用, 建议使用注解写法\",\"//一个参数： 一个入参 // 根据id来查找这个账户 // 1.如果方法的入参没有加任何的注解，那xml中可以随意写 。 #{id1lsdfjasdlfdjkl} // 但是不建议大家随意写。 建议叫什么，写什么 Account queryAccountById1(Integer id); \",\"<select id=\\\"queryAccountById1\\\" resultType=\\\"com.cskaoyan.demo8.bean.Account\\\"> select * from account where id = #{id1lsdfjasdlfdjkl} </select> \",\"如果在方法中 的一个参数 加了@Param注解，那么 后面就只能通过 #{注解值} 来取值\",\"// 参数加了 @Param()注解 --> 注解里面怎么写，xml里面就怎么写。 Account queryAccountById2(@Param(\\\"id1\\\") Integer id); \",\"<select id=\\\"queryAccountById2\\\" resultType=\\\"com.cskaoyan.demo8.bean.Account\\\"> select * from account where id = #{id1}; </select> \"]},\"251\":{\"h\":\"多个参数\",\"t\":[\"建议使用注解写，注解中怎么写，xml就怎么写。\",\"注意：\",\"直接写多个值, 用参数名简单匹配是不识别的\",\"如果参数名简单匹配是不识别, 又不想加注解, 也是有别的解决手段(按位传值: 不建议), 但是建议加注解(最标准的写法)\",\"// 4.推荐增加@Param注解。 // @Param里面怎么写，xml中就怎么写。 @Param(\\\"id1\\\") xml中写 #{id1} // 根据id获取name来查找数据。 List<Account> queryAccountByIdOrName2(@Param(\\\"id\\\") Integer id, @Param(\\\"name\\\") String name); \",\"<select id=\\\"queryAccountByIdOrName2\\\" resultType=\\\"com.cskaoyan.demo8.bean.Account\\\"> select * from account where id = #{id} or name = #{name}; </select> \"]},\"252\":{\"h\":\"对象传值\",\"t\":[\"常用。建议使用方式一。\",\"方式一: SQL使用的参数命名要和对象内部属性保持一致 (#{成员变量名} 来取值)\",\"// 5.使用对象传值。对象没有注解 // 最后，在xml中，使用 #{成员变量名} 来取值 // 对象前面没有任何的注解，在xml中使用的时候，只要使用 #{对象属性名}即可 // 比如 Account 中有 name 和money. 最终想用name #{name} int insertAccount(Account account); \",\"<insert id=\\\"insertAccount\\\"> insert into account(name, money) values (#{name}, #{money}); </insert> \",\"方式二: 对象有注解, 必须通过 #{注解值 . 成员变量名} 来取值\",\"// 使用对象传值，对象有注解 // 在xml中，应该写 #{注解值.成员变量名} // 比如 @Param(\\\"user\\\") User user. 我要使用里面的name 和 password // #{user.name} #{user.password} int insertAccount2(@Param(\\\"account\\\") Account account); \",\"<insert id=\\\"insertAccount2\\\"> insert into account(id, name, money) values (#{account.id}, #{account.name}, #{account.money}); </insert> \"]},\"253\":{\"h\":\"使用Map传值\",\"t\":[\"Map 由 key value\",\"对象里面。 属性名和属性值。 User(name age address )\",\"Map传值: 不建议使用。因为写起来非常舒服，维护起来非常抓狂\",\"方式一: SQL使用的参数命名要和Map中存储数据的key保持一致 (#{key} 来取值)\",\"// 使用Map传值，无注解 // 在xml中，应该写 #{key} // 比如这里有一个Map。里面有 {\\\"name\\\":\\\"zhangsan\\\", \\\"age\\\": 18} // 最终，在xml中要取name . #{name} int insertAccount3(Map<String, String> map); \",\"<insert id=\\\"insertAccount3\\\"> insert into account(name, money) values (#{name}, #{money}); </insert> \",\"方式二: Map对象有注解, 必须通过 #{注解值 . key} 来取值\",\"// 使用map传值， 加上注解之后。 --> 在xml中，应该怎样写？ int insertUser5(@Param(\\\"map\\\") Map<String, String> map); \",\"// 使用Map传值，有注解 // 在xml中，应该写 #{注解值.key} // 比如这里有一个Map。里面有 {\\\"name\\\":\\\"zhangsan\\\", \\\"age\\\": 18} @Param(\\\"map\\\") // 最终，在xml中要取name . #{map.name} int insertAccount4(@Param(\\\"map\\\") Map<String, String> map); \"]},\"254\":{\"h\":\"按位置传值\",\"t\":[\"按位传值: 完全不建议(容易因为程序员的记忆和修改导致bug产生, 除非除了按位传值没办法了)\",\"方式一: arg0、arg1、arg2...\",\"// 按位置传值。就是直接拿第一个参数，第二个参数，第三个参数 // arg0 arg1 arg2 // param1 param2 param3 int insertAccount5(String name, Integer money); \",\"<!-- 在xml中，我们可以使用 arg0 arg1 arg2 这些来代表第一个参数，第二个参数，第三个参数--> <!-- 我们也可以使用param1 param2 来代表第一个参数，第二个参数--> <insert id=\\\"insertAccount5\\\"> insert into account(name, money) values (#{arg0}, #{arg1}); </insert> \",\"方式二: param1、param2、param3...\",\" // 不建议大家使用。 int insertAccount6(Integer money, String name); \",\"<insert id=\\\"insertAccount6\\\"> insert into account(name, money) values (#{param2}, #{param1}); </insert> \",\"在Mybatis的输入映射中，我们经常使用前面三种方式（传入一个参数、传入多个参数、传递对象），后面通过map传值和按照位置来传值 一般不使用，也不建议大家使用。\",\"推荐大家使用的写法\",\"一个参数时，带注解。User queryUserById2(@Param(\\\"id\\\") Integer id); 在xml中#{id}\",\"多个参数，带注解。List<User> queryUsrByNameOrEmail2(@Param(\\\"name\\\") String name, @Param(\\\"email\\\") String email);\",\"对象。int insertUser2(User user);使用的时候，直接使用#{属性名}来使用属性\",\"使用Map传值，和按照位置传值，了解即可。不推荐大家使用。也不要使用。\"]},\"255\":{\"h\":\"#和$的区别\",\"t\":[\"#{参数}使用: 预编译占位 (尽量使用 #{} ) PreparedStatement\",\"int insertUser6(@Param(\\\"name\\\") String name, @Param(\\\"email\\\") String email); mapper.insertUser6(\\\"zhangsan\\\", \\\"aaaaa\\\"); \",\"<insert id=\\\"insertUser6\\\"> insert into user(name, email) values (#{name}, #{email}) </insert> \",\"image-20230721150409664\",\"${参数}使用: 字符串拼接, Statement (存在SQL注入问题)\",\"int insertUser7(@Param(\\\"name\\\") String name, @Param(\\\"email\\\") String email); mapper.insertUser7(\\\"zhangsan\\\", \\\"aaaaa\\\"); \",\"<insert id=\\\"insertUser7\\\"> insert into user(name, email) values ('${name}', '${email}') </insert> \",\"image-20230721150521057\",\"面试可能会问到。 #{}和${}的区别。\",\"#{}是使用的 prapareStatement.首先写SQL，然后使用?来进行占位，最后再把参数设置进去，可以防止SQL注入。\",\"${}是使用的Statement。它是使用的字符串拼接。\"]},\"256\":{\"h\":\"注意\",\"t\":[\"//1, 我们以后开发的时候，应该尽量使用 #{} 去接收传递过来的参数值 //2, 当我们传递给SQL语句 表名或者是列名的时候，就必须得使用 ${} 来取值。 \",\"分表问题: 动态表名\",\"// userMapper.dynamicTableName(\\\"user2\\\"); userMapper.dynamicTableName(\\\"user\\\"); \",\"List<User> dynamicTableNameList(String user); \",\"<select id=\\\"dynamicTableNameList\\\" resultType=\\\"com.snow.www.bean.User\\\"> select * from ${user} </select> \",\"分列问题: 动态列名\",\"// List<User> list = userMapper.dynamicColumnName(\\\"id\\\"); List<User> list = userMapper.dynamicColumnName(\\\"age\\\"); \",\"List<User> dynamicColumnName(String age); \",\"<select id=\\\"dynamicColumnName\\\" resultType=\\\"com.snow.www.bean.User\\\"> select * from user order by ${column} </select> \",\"有一些情景可能会用到 ${},一般不多。\",\"select * from user where id = 10; select * from user1 where id = 10; select * from user2 where id = 10; \",\"-- 比如现在你司的用户有1亿个。 -- 可以将这些表，水平拆分成10个。 如果id是1 ==》 user1 -- 也就是id对10取余。 最终余数是几，就进几表。 id=20054 -- select * from user where name = \\\"zhangsan\\\" \",\"输出映射是指Mybatis是如何把SQL语句执行结果映射为 Java对象的。\",\"// 一个参数 // 多个参数 // 单个对象 // 多个对象 // resultMap: 比较重要(很常用) \",\"select * from user where id = 1;\"]},\"257\":{\"h\":\"一条结果\",\"t\":[\"一行一列的结果。返回一个参数。比如根据id找名字。\",\"一行一列: 必须要有resultType(写简单参数的全限定类名或者是别名)\",\"String name = userMapper.selectNameById(5); \",\"String queryNameById1(Integer id); String queryNameById2(Integer id); String queryNameById3(Integer id); \",\"<!-- 我们必须要写一个resultType。标识查询的结果的类型--> <!-- 对于java.lang.String 。我们既可以写 全限定类名，也可以写string。（别名不区分大小写）--> <!-- 方式一： 全限定类名--> <select id=\\\"queryNameById1\\\" resultType=\\\"java.lang.String\\\"> select name from user where id = #{id}; </select> <!-- 方式二： 内置的别名--> <select id=\\\"queryNameById2\\\" resultType=\\\"string\\\"> select name from user where id = #{id}; </select> <!-- 方式三： 别名不区分大小写--> <select id=\\\"queryNameById3\\\" resultType=\\\"String\\\"> select name from user where id = #{id}; </select> \"]},\"258\":{\"h\":\"多条结果\",\"t\":[\"多行一列。比如我们返回的是一个班级的名称列表。比如返回的是账户的所有name。\",\"select name from user;\",\"指: 多个结果构成的数组/List/Set\",\"// 可以使用 List Set 数组来接数据。在接口中，使用具体的类型。 // 在xml中，resultType写单个元素的类型。 比如拿回来是班上人的id，这时候用Integer; 比如拿回来是学生的姓名，这时候用 String \",\"List<String> list = accountMapper.queryAllNameList(); Set<String> set = accountMapper.queryAllNameSet(); String[] names = accountMapper.queryAllNameArray(); \",\"List<String> queryAllNameList(); Set<String> queryAllNameSet(); String[] queryAllNameArray(); \",\"<select id=\\\"queryAllNameSet\\\" resultType=\\\"java.lang.String\\\"> select name from account; </select> \"]},\"259\":{\"h\":\"单个对象\",\"t\":[\"一行多列。\",\"单个对象:\",\"// 1. Mybatis在去映射的时候，会把`成员变量名` 和`查询结果的列名`去一一映射，假如原始表中的列名和成员变量名不一致的话，我们可以通过取别名的方式来解决(也可以通过resultMap来解决) // 2. 在声明JavaBean的成员变量的时候，尽量的使用包装类型 \",\"@Test public void testQueryAccountById() { // id name money存进去。 createTime updateTime 没有存进去 // 因为数据库中的列名和 成员变量名不一样。 所以没映射上。 Account account = accountMapper.queryAccountById(2); System.out.println(account); } \",\"Account queryAccountById(@Param(\\\"id\\\") Integer id); \",\"<!-- resultType写得是bean的全限定类名。或者是别名--> <!-- 需要注意。返回的列，需要和bean的成员变量名一致，如果不一致，可以使用取别名的方式解决--> <select id=\\\"queryAccountById\\\" resultType=\\\"com.cskaoyan.demo9.bean.Account\\\"> select * from account where id = #{id}; </select> \"]},\"260\":{\"h\":\"多个对象\",\"t\":[\"多行多列。\",\"多个对象: 数组/List/Set\",\"//1, resultType的值是单个元素的类型。 \",\"@Test public void testQueryAllUserList(){ List<User> users = mapper.queryAllUserList(); System.out.println(users); } \",\"// 多行多列， // 比如查询一个班级里面的所有学生，在接口中可以使用 List 数组 Set来接。 // 在mapper.xml的标签中，resultType写单个元素的类型即可 List<User> queryAllUserList(); \",\"<!-- resultType中是单个元素的类型--> <select id=\\\"queryAllUserList\\\" resultType=\\\"com.cskaoyan.demo4.bean.User\\\"> select * from user; </select> \"]},\"261\":{\"h\":\"resultMap\",\"t\":[\"resultMap: 是用来做参数映射的。把数据库中的字段，与实体类中的字段进行映射的。\",\"如果数据库里的字段，和bean中的对象，名字不一致，有两种解决方法。\",\"使用别名\",\"使用resultMap。更灵活\",\"@Data @AllArgsConstructor @NoArgsConstructor public class StudentDO { private Integer studentId; private String studentName; private Integer studentAge; private String address; } drop table if exists mybatis_student; CREATE TABLE `mybatis_student` ( `id` int(11) PRIMARY KEY AUTO_INCREMENT, `name` varchar(255) , `age` int(11) , `address` varchar(255) ); insert into mybatis_student(id,name,age,address) values (1, 'zhangsan', 18, 'hubei'),(2, 'lisi', 19, 'hunan'),(3, 'wangwu', 21, 'hubei'),(4, 'zhaoliu', 22, 'beijing'); \",\"List<StudentDO> selectStudentUseAlias(); \",\"List<StudentDO> selectStudentUseResultMap(); \",\"<!-- 方式一: 别名 --> <!-- 使用别名的方式来解决， 数据库中的字段和bean中的名称不一致问题。 名称不一致会有什么问题： 会查得出来属性，但是数据封装不进去。 --> <select id=\\\"queryStudentUseAlias1\\\" resultType=\\\"com.cskaoyan.demo4.bean.StudentDO\\\"> select * from mybatis_student; </select> <!-- 取别名可以解决这个问题。--> <select id=\\\"queryStudentUseAlias2\\\" resultType=\\\"com.cskaoyan.demo4.bean.StudentDO\\\"> select id as studentId, name as studentName, age as studentAge, address from mybatis_student; </select> \",\"<!-- 方式二: resultMap --> <!--resultMap的id属性 和 对应的映射的SQL标签的 resultMap对应--> <!--resultMap的type属性 指代最终的对象类型--> <resultMap id=\\\"studentResultMap1\\\" type=\\\"com.cskaoyan.demo7.bean.StudentDO\\\"> <!-- id主键映射， result： 普通列映射--> <!-- 在result标签中。 column是数据库的列名， property是成员变量名（bean里面的变量名）--> <id column=\\\"id\\\" property=\\\"studentId\\\"/> <result column=\\\"name\\\" property=\\\"studentName\\\"/> <result column=\\\"age\\\" property=\\\"studentAge\\\"/> <result column=\\\"address\\\" property=\\\"address\\\"/> </resultMap> <!-- 标签需要写resultMap 后面是id值--> <select id=\\\"selectStudentUseResultMap\\\" resultMap=\\\"studentResultMap1\\\"> select id, name, age, address from mybatis_student; </select> \"]},\"262\":{\"h\":\"Lombok\",\"t\":[\"Lombok: 可以帮助代码在编译的时候生成对应的方法。\",\"// getter // setter // toString // hashCode // equals \",\"第一步: 安装插件\",\"image-20220520143025801\",\"第二步: 导包\",\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.12</version> </dependency> \",\"打开一个 Annotation Processors --> Enable annotation processing\",\"第三步: 使用\",\"//@Getter@Setter@ToString@EqualsAndHashCode //@NoArgsConstructor //@AllArgsConstructor // @Data --> getter、setter、toString、equals、hashCode @Data @AllArgsConstructor @NoArgsConstructor public class StudentDO { private Integer studentId; private String studentName; private Integer studentAge; private String address; } \",\"Lombok: 好处\",\"// 1. 优势 在去修改（增删改）成员变量的时候，不用我们自己再去生成getter、setter等，效率比较高 // 2. 缺点 Lombok在项目中，只要有一个人用了，那么其他的组员也都要使用 \"]},\"263\":{\"h\":\"MybatisCodeHelperPro\",\"t\":[\"MybatisCodeHelperPro: 这个是Mybatis的一个插件(提高开发Mybatis应用程序的效率)。\",\"// 帮助我们在mapper和mapper.xml 之前来回跳转 // 可以帮助我们生成mapper.xml文件中的标签 // 可以做一定的代码提示 // ... \",\"步骤一: 插件安装\",\"image-20220520144530133\",\"动态SQL是Mybatis给我们提供的又一个强大的功能。可以帮助我们根据传入的条件，动态的去改变SQL语句。\",\"比如现在要去jd搜索一个手机。下方有大量的条件，比如机身内存，CPU型号，运行内存。等等......\",\"假设有一张手机表，里面存放的全部是手机。\",\"create table phone( id int primary key auto_increment, name varchar(255), brand varchar(255), memory int, disk int ); insert into phone values (1, \\\"小米10\\\", \\\"小米\\\", \\\"8\\\", \\\"128\\\"), (2, \\\"OPPO k9x\\\", \\\"OPPO\\\", \\\"8\\\", \\\"128\\\"), (3, \\\"OPPO K10x\\\", \\\"OPPO\\\", \\\"8\\\", \\\"256\\\"), (4, \\\"Redmi Note11\\\", \\\"Redmi\\\", \\\"8\\\", \\\"128\\\"), (5, \\\"荣耀90\\\", \\\"荣耀\\\", \\\"12\\\", \\\"128\\\"), (6, \\\"Redmi Note12\\\", \\\"Redmi\\\", \\\"12\\\", \\\"256\\\"); \",\"比如筛选框可以随意组合，现在传入了一个品牌：小米。\",\"筛选荣耀的手机。 \",\"Mapper接口：List<Phone> quryByBrand(String brand);\",\"Mapper.xml里面 要写一条SQL\",\"筛选小米手机， 机身存储 512. \",\"List<Phone> quryByBrandAndDisk(String brand, Integer disk);\",\"小米手机，运行内存存储12. \",\"List<Phone> quryByBrandAndMemory(String brand, Integer memory);\",\"如果为每一种情况，都写一个接口，写一条SQL。SQL数量会急剧增加。所以需要使用动态SQL，有些情况下增加这种条件，有些条件下增加另外一种条件。\",\"假设有10个筛选条件。 如果我们要用mybatis来完成，要写多少方法，多少SQL。\",\"单独选一个条件，我们要写多少方法。要写10个 。 List<Phone> quryByBrand(String brand);\",\"单独选两个条件，我们要写多少方法。要写C10 2 = 10*9/2 = 45个 。 List<Phone> quryByBrand(String brand, String memory);\",\"动态SQL，就是根据你传入的条件，比如你传入了品牌，我就给它拼接上去。 没传，就不拼。\",\"select * from phone where name = #{name} and disk = #{disk} and memory = #{memory} ;\",\"-- 比如京东的后台有一张手机表。 现在需要根据条件来预测一下，里面有哪些字段。 create table phone( id int primary key auto_increment, name varchar(255), brand varchar(255), price decimal(10,2), cpu varchar(50), disk int, memory int ); -- 想查出荣耀的手机 select * from phone where brand = '荣耀'; -- 想查出荣耀的手机， 机身内存 1024 select * from phone where brand = '荣耀' and disk=1024; -- 想查出荣耀的手机， 内存是 16g select * from phone where brand = '荣耀' and memory=16; -- 总共有10个条件。 \"]},\"264\":{\"h\":\"where\",\"t\":[\"where这个标签可以帮助我们在最终执行的SQL中自动生成where关键字\",\"//1, 可以自动拼接where关键字 (一般和if配合使用) //2, 去除直接跟着的and或者是or关键字 //3, 如果where标签中没有条件满足的时候（如果SQL片段需要拼接），那么where标签不会给我们拼接where关键字 // 注意一般if(工作用到更多一些),choose when otherwise(也会用, 用到相对if少一些),都要注意, 尽量写在where标签内部, 因为, 如果根据条件做处理的时候, 没有任何一个条件满足, 如果又使用的where标签(而不是写死的where关键字), 那么最终执行的sql上不会生成where(避免出错) \",\"<select id=\\\"queryAllPhone\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> select * from phone <where> and id = 1 </where> ; </select> \",\"<!-- if标签，只有条件满足，才会拼接进SQL--> <select id=\\\"queryPhoneByBrandOrDisk\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> select * from phone <where> <!-- 在if的test中，可以直接使用 输入映射中的参数。比如 brand disk--> <!-- 输入映射可以写什么，在test中就可以写什么。比如有注解 @Param(\\\"id\\\") 则可以直接写id。 不用外面的#{}--> <if test=\\\"brand != null\\\"> brand = #{brand} </if> <!-- 在if中，在test中可以写 ognl。 gt lt gte lte--> <if test=\\\"disk != null\\\"> and disk = #{disk} </if> </where> </select> <!-- 如果传入的brand是null，disk是null，则where这个关键字不会被拼接上去--> select * from phone; \"]},\"265\":{\"h\":\"if\",\"t\":[\"if标签可以帮助我们去做判断是否满足某个条件。如果符合条件，则拼接标签里面的内容；否则，不拼接。在if的条件中，输入映射中可以写什么，if中就可以写什么。\",\"// 什么叫做输入映射怎么写， if的test中就怎么写 Phone queryPhone(@Param(\\\"id\\\") Integer id); ---> 在xml中。 #{id} test=\\\"id\\\" Phone queryPhone(@Param(\\\"id\\\") Integer id, @Param(\\\"name\\\")String name); ---> 在xml中。 #{id} test=\\\"id\\\" Phone queryPhone(Phone phone); ---> 在xml中。 #{成员变量名} test=\\\"成员变量名\\\" Phone queryPhone(@Param(\\\"p1\\\")Phone phone); ---> 在xml中。 #{p1.成员变量名} test=\\\"p1.id\\\" \",\" 转义字符 OGNL表达式 // > &gt; gt // < &lt; lt // >= &gt;= gte // <= &lt;= lte // != // == // and // or \",\"// 在<if test=\\\"\\\">,引号中，我们可以不使用转义字符，可以使用OGNL表达式的写法 // 在if中，可以使用 > >= ， 但是 < <=这种符号不能使用。所以不推荐大家使用这个 \",\"代码示例\",\"<select id=\\\"queryPhoneByMemory\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> select * from phone <where> <!-- memory 小于 8 。就拼接这个if--> <if test=\\\"memory &lt; 8\\\"> memory = 8 </if> <!-- memory 大于 8，就拼接这个if--> <if test=\\\"memory gt 8\\\"> and memory = 12 </if> </where> ; </select> \"]},\"266\":{\"h\":\"choose when otherwise\",\"t\":[\"choose when otherwise就相当于Java中的 if ..else if.. else....\",\"和where一起使用\",\"// 如果传入的id大于5，就按传入的id查询； 否则根据传入的memory 是否等于8，等于8，就按照memory查询； // 否则根据disk来进行匹配 List<Phone> queryByChooseWhenOtherwise(@Param(\\\"id\\\") Integer id, @Param(\\\"memory\\\") Integer memory, @Param(\\\"disk\\\") Integer disk); \",\"<select id=\\\"queryByChooseWhenOtherwise\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> <!-- // 如果传入的id大于5，就按传入的id查询； 否则根据传入的memory 是否等于8，等于8，就按照memory查询；--> <!-- // 否则根据disk来进行匹配--> select * from phone <where> <choose> <when test=\\\"id &gt; 5\\\"> id = #{id} </when> <when test=\\\"memory == 8\\\"> memory = #{memory} </when> <otherwise> disk =#{disk} </otherwise> </choose> </where>; </select> 就是 if else-if else的场景。 \"]},\"267\":{\"h\":\"sql-include\",\"t\":[\"将一些公用的SQL，抽取出来。在其他需要使用的地方，可以直接引入这个公用SQL\",\"一般都是用来提取一些公共列，然后再引入。\",\"这是两个标签，配合起来一起使用的。\",\"// sql标签可以帮助我们把公共的sql提取出来 // include可以帮助我们引入公共的sql片段。 \",\"提取\",\"<!-- 相当于定义了一个变量，叫做 base_sql 内容是标签内的内容--> <sql id=\\\"base_sql\\\"> select id, name, brand, memory, disk from phone </sql> \",\"引入\",\"<select id=\\\"queryPhoneById\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> <!-- 可以使用include标签，将定义好的引入进来--> <include refid=\\\"base_sql\\\"/> where id = #{id} </select> \",\"<select id=\\\"queryAllPhone\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> <include refid=\\\"base_sql\\\"/> <where> and id = 1 </where>; </select> \",\"// 优点：可以提取公共的sql片段，减少编码量。 防止数据库增加字段后，全部SQL需要修改 // 缺点：用了sql-include 之后，SQL语句的可读性变差了 \",\"sql-include 标签我们一般用来提取 列名。\",\"提取\",\"<sql id=\\\"base_column\\\"> id, name, brand, memory, disk </sql> \",\"引入\",\"<select id=\\\"queryPhoneById\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> <!-- 可以使用include标签，将定义好的引入进来--> select <include refid=\\\"base_column\\\" /> from phone where id = #{id} </select> \",\"好处分析\",\"// 避免写select *。不要写select * // 不破坏SQL语句的可读性 // 防止数据库增加字段后，全部SQL需要修改 \"]},\"268\":{\"h\":\"trim\",\"t\":[\"trim标签可以帮助我们动态的去增加指定的字符，或者是删除指定的字符。\",\"@Test public void testUpdatePhone(){ Phone phone = new Phone(); phone.setId(22); phone.setMemory(16); int i = mapper.updatePhone(phone); System.out.println(i); } \",\"int updatePhone(Phone phone); \",\"<!-- prefix: 增加指定的前缀 suffix: 增加指定的后缀 prefixOverrides: 删除指定的前缀 suffixOverrides: 删除指定的后缀 --> \",\"<update id=\\\"updateByPhone\\\"> update phone set <!-- 会把包裹着的块，prefix/suffix prefixOverrides/suffixOverrides --> <trim suffixOverrides=\\\",\\\" > <if test=\\\"brand != null\\\"> brand = #{brand}, </if> <if test=\\\"memory != null\\\"> memory = #{memory}, </if> <if test=\\\"disk != null\\\"> disk = #{disk} </if> </trim> where id = #{id} </update> \"]},\"269\":{\"h\":\"set\",\"t\":[\"<set> 就相当于 <trim prefix=\\\"SET\\\" suffixOverrides=\\\",\\\"> 这个配置，和这个是等价的。\",\"// 去除set标签中的最后一个 \\\",\\\" // 拼接set关键字 \",\"@Test public void testTrim() { Phone phone = new Phone(); phone.setId(5); phone.setBrand(\\\"honor\\\"); phone.setMemory(12); phone.setDisk(256); int i = mapper.updateByPhone(phone); System.out.println(i); } \",\"int updateByPhone(Phone phone); \",\"<update id=\\\"updateByPhone\\\"> update phone <set> <if test=\\\"brand != null\\\"> brand = #{brand}, </if> <if test=\\\"memory != null\\\"> memory = #{memory}, </if> <if test=\\\"disk != null\\\"> disk = #{disk} </if> </set> where id = #{id} </update> \"]},\"270\":{\"h\":\"foreach\",\"t\":[\"foreach可以帮助我们去循环处理SQL语句。\"]},\"271\":{\"h\":\"批量插入\",\"t\":[\"foreach在插入的使用\",\"// 当个方法中传入的参数没有注解的时候，假如传入的List，那么就可以使用 list，假如传入的是数组，那么就可以使用 array // 当方法中传入的参数有注解的时候，collection里面必须写注解的值 \",\"List类型参数\",\"没有注解, foreach的循环从插入的时候, 要求foreach标签的 collection参数, 是collection (如果List对象建议写list)\",\"List<Phone> phones = new ArrayList<>(); phones.add(new Phone(null, \\\"huawei mate50\\\", \\\"huawei\\\", 8, 128)); phones.add(new Phone(null, \\\"huawei mate40\\\", \\\"huawei\\\", 8, 256)); int i = mapper.insertPhoneList(phones); System.out.println(i); \",\"int insertPhoneList(List<Phone> phones); \",\"<insert id=\\\"insertPhoneList\\\"> <!-- insert into phone(id, name, brand, memory, disk) values (?, ?, ?, ?, ?) , (?, ?, ?, ?, ?) --> insert into phone(id, name, brand, memory, disk) values <!-- foreach遍历传入的集合； separator：循环的时候，以什么字符分割开 open：在循环开始的时候，添加指定的字符 close：在循环结束的时候，添加指定的字符 item：循环中的元素名 相当于 for(int i=0;i<100;i++) {} 中的 i index: 元素的下标. index=“index1”代表使用一个叫做index1的变量将它存起来，在循环内部，就可以使用这个index1 --> <foreach collection=\\\"list\\\" item=\\\"phone\\\" separator=\\\",\\\" open=\\\"\\\" close=\\\"\\\" index=\\\"index1\\\"> (#{phone.id}, #{phone.name}, #{phone.brand}, #{phone.memory}, #{index1}) </foreach> </insert> \",\"数组类型参数\",\"没有注解, foreach的循环从插入的时候, 要求foreach标签的 collection参数,必须是array\",\"@Test public void testInsertArray() { Phone[] phones = new Phone[2]; phones[0] = new Phone(null, \\\"huawei mate50\\\", \\\"huawei\\\", 8, 128); phones[1] = new Phone(null, \\\"huawei mate40\\\", \\\"huawei\\\", 8, 256); int i = mapper.insertPhoneArray(phones); System.out.println(i); } \",\"int insertPhoneArray(Phone[] phones); \",\"<insert id=\\\"insertPhoneArray\\\"> insert into phone(id, name, brand, memory, disk) values <foreach collection=\\\"array\\\" item=\\\"phone\\\" separator=\\\",\\\" open=\\\"\\\" close=\\\"\\\" index=\\\"index1\\\"> (#{phone.id}, #{phone.name}, #{phone.brand}, #{phone.memory}, #{index1}) </foreach> </insert> \",\"添加注解\",\"如果在使用foreach的循环从插入的时候, 要求foreach标签的 collection参数, 必须是注解名\",\"@Test public void testInsertArray() { Phone[] phones = new Phone[2]; phones[0] = new Phone(null, \\\"huawei mate50\\\", \\\"huawei\\\", 8, 128); phones[1] = new Phone(null, \\\"huawei mate40\\\", \\\"huawei\\\", 8, 256); int i = mapper.insertPhoneArray(phones); System.out.println(i); } @Test public void testInsertArrayParam() { List<Phone> phones = new ArrayList<>(); phones.add(new Phone(null, \\\"huawei mate50 ListParam\\\", \\\"huawei\\\", 8, 128)); phones.add(new Phone(null, \\\"huawei mate40 ListParam\\\", \\\"huawei\\\", 8, 256)); int i = mapper.insertPhoneListParam(phones); System.out.println(i); } \",\"int insertPhoneArrayParam(@Param(\\\"phones\\\") Phone[] phones); int insertPhoneListParam(@Param(\\\"phones\\\") List<Phone> phones); \",\"<insert id=\\\"insertPhoneArrayParam\\\"> insert into phone (id,name,brand,memory,disk) values <foreach collection=\\\"phones\\\" open=\\\"\\\" close=\\\"\\\" separator=\\\",\\\" item=\\\"phone\\\"> (#{phone.id}, #{phone.name}, #{phone.brand}, #{phone.memory}, #{phone.disk}) </foreach> </insert> <insert id=\\\"insertPhoneListParam\\\"> insert into phone (id,name,brand,memory,disk) values <foreach collection=\\\"phones\\\" open=\\\"\\\" close=\\\"\\\" separator=\\\",\\\" item=\\\"phone\\\"> (#{phone.id}, #{phone.name}, #{phone.brand}, #{phone.memory}, #{phone.disk}) </foreach> </insert> \"]},\"272\":{\"h\":\"使用in查询\",\"t\":[\"foreach在查询时候的使用:\",\"注意: foreach collection在不使用注解情况下, 默认集合类使用collection (List建议使用List), 数组使用array\",\"如果参数使用了注解, foreach 标签的collection属性使用注解名\",\"@Test public void testQueryByIdList(){ List<Phone> phones = mapper.queryPhoneByIdList(Arrays.asList(1,2,3)); System.out.println(phones); } \",\"List<Phone> queryPhoneByIdList(@Param(\\\"list\\\") List<Integer> list); \",\"<select id=\\\"queryPhoneByIdList\\\" resultType=\\\"com.cskaoyan.demo5.bean.Phone\\\"> select * from phone <where> id in <foreach collection=\\\"list\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"id\\\"> #{id} </foreach> </where> </select> ``` \"]},\"273\":{\"h\":\"selectKey\",\"t\":[\"这个标签可以帮助我们在执行目标SQL语句之前或者是之后执行一条额外的SQL语句。有自动生成id的场景下，我们需要知道自动生成的id是多少。\",\"AFTER操作\",\"@Test public void testInsertPhone(){ Phone phone = new Phone(); phone.setName(\\\"iphone13\\\"); phone.setBrand(\\\"Apple\\\"); int i = mapper.insertPhone(phone); System.out.println(phone); } \",\" int insertPhone(@Param(\\\"phone\\\") Phone phone); \",\"<insert id=\\\"insertPhone\\\"> <!--order: 表示在目标SQL执行之前或者是之后执行 AFTER | BEFORE keyProperty： 表示执行的结果映射到哪个参数中 resultType: SQL语句返回的类型 --> <selectKey order=\\\"AFTER\\\" keyProperty=\\\"phone.id\\\" resultType=\\\"Integer\\\"> select LAST_INSERT_ID(); </selectKey> insert into phone(name, brand, memory, disk) values( #{phone.name}, #{phone.brand}, #{phone.memory}, #{phone.disk}) </insert> \"]},\"274\":{\"h\":\"useGeneratedKeys\",\"t\":[\"useGeneratedKeys: 获取insert/update操作数据的主键\",\"开启配置：useGeneratedKeys=\\\"true\\\" 映射到对应的参数中：keyProperty=\\\"order.id\\\" \",\"@Test public void testInsertPhone2(){ Phone phone = new Phone(); phone.setName(\\\"iphone14\\\"); phone.setBrand(\\\"Apple\\\"); // 手机的id，会被存到原对象的id中 int affectedRows = mapper.insertPhone2(phone); System.out.println(phone); } \",\"int insertPhone2(@Param(\\\"phone\\\") Phone phone); \",\"```xml <insert id=\\\"insertPhone2\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"phone.id\\\"> insert into phone(id, name, brand, memory, disk) values (#{phone.id}, #{phone.name}, #{phone.brand}, #{phone.memory}, #{phone.disk}) </insert> ``` \"]},\"275\":{\"h\":\"一对一结构\",\"t\":[\"结构示例\",\"image-20230720100852243\",\"drop table if exists user; create table user( id int primary key auto_increment, name varchar(255), email varchar(255), password varchar(255) ); drop table if exists user_detail; create table user_detail( id int primary key auto_increment, user_id int, address varchar(255), pic varchar(255) ); insert into user values (1, \\\"猪八戒\\\",\\\"zhubajie@qq.com\\\", \\\"zhubajie\\\"); insert into user values (2, \\\"孙悟空\\\",\\\"sunwukon@qq.com\\\", \\\"sunwukong\\\"); insert into user values (3, \\\"白骨精\\\",\\\"baigujin@qq.com\\\" ,\\\"baigujing\\\"); insert into user values (4, \\\"唐僧\\\", \\\"tangsen@qq.com\\\" , \\\"tangseng\\\"); insert into user values (5, \\\"沙僧\\\", \\\"shaseng@qq.com\\\", \\\"shaseng\\\"); select * from user; insert into user_detail values(null, 1, \\\"高老庄\\\", \\\"猪八戒.jpg\\\"); insert into user_detail values(null, 2, \\\"花果山\\\", \\\"孙悟空.jpg\\\"); insert into user_detail values(null, 3, \\\"白虎岭\\\", \\\"白骨精.jpg\\\"); insert into user_detail values(null, 4, \\\"东土大唐\\\", \\\"唐僧.jpg\\\"); select * from user_detail; \",\"@Data @NoArgsConstructor @AllArgsConstructor public class User { private Integer id; private String name; private String email; private String password; private UserDetail userDetail; } @Data @NoArgsConstructor @AllArgsConstructor public class UserDetail { private Integer id; private Integer userId; private String address; private String pic; } \"]},\"276\":{\"h\":\"方式一: 分次查询\",\"t\":[\"测试\",\"@Test public void testQueryOne2One() { List<User> users = mapper.queryAllUser(); for (User user : users) { System.out.println(user); } } \",\"TableMapper接口\",\"List<User> queryAllUser(); \",\"UserMapper.xml文件\",\" <mapper namespace=\\\"com.cskaoyan.demo9.mapper.UserMapper\\\"> <resultMap id=\\\"baseUserMap\\\" type=\\\"com.cskaoyan.demo9.bean.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <result column=\\\"email\\\" property=\\\"email\\\"/> <result column=\\\"password\\\" property=\\\"password\\\"/> <!-- association: 关联单个bean的时候，使用 property: 成员变量的名字 javaType: 成员变量的类型 select: 第二条SQL执行时，SQL的坐标. 如果两条SQL在一个mapper.xml中，可以不写namespace。 如果不在一个mapper.xml中，需要写namespace column: 第二条SQL，传递的参数 --> <association property=\\\"userDetail\\\" javaType=\\\"com.cskaoyan.demo9.bean.UserDetail\\\" column=\\\"id\\\" select=\\\"com.cskaoyan.demo9.mapper.UserDetailMapper.queryUserDetailByUserId\\\"/> </resultMap> <select id=\\\"queryAllUser\\\" resultMap=\\\"baseUserMap\\\"> select * from user; </select> </mapper> \",\"UserDetailMapper.xml文件\",\"<mapper namespace=\\\"com.cskaoyan.demo9.mapper.UserDetailMapper\\\"> <select id=\\\"queryUserDetailByUserId\\\" resultType=\\\"com.cskaoyan.demo9.bean.UserDetail\\\"> select * from user_detail where user_id = #{userId}; </select> </mapper> ``` \"]},\"277\":{\"h\":\"方式二: 连接查询\",\"t\":[\"测试\",\"@Test public void testQueryOne2One2(){ List<User> users = mapper.queryAllUser2(); for (User user : users) { System.out.println(user); } } \",\"UserMapper接口\",\"List<User> queryAllUser2(); \",\"UserMapper.xml\",\"<resultMap id=\\\"baseUserMap2\\\" type=\\\"com.cskaoyan.demo9.bean.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <result column=\\\"email\\\" property=\\\"email\\\"/> <result column=\\\"password\\\" property=\\\"password\\\"/> <association property=\\\"userDetail\\\" javaType=\\\"com.cskaoyan.demo9.bean.UserDetail\\\"> <id column=\\\"ud_id\\\" property=\\\"id\\\"/> <result column=\\\"pic\\\" property=\\\"pic\\\"/> <result column=\\\"user_id\\\" property=\\\"userId\\\"/> <result column=\\\"address\\\" property=\\\"address\\\"/> </association> </resultMap> <select id=\\\"queryAllUser2\\\" resultMap=\\\"baseUserMap2\\\"> select u.id as id , u.name as name , u.email as email , u.password as password , ud.id as ud_id , ud.pic as pic , ud.user_id as user_id , ud.address as address from user u left join user_detail ud on u.id = ud.user_id; </select> \"]},\"278\":{\"h\":\"一对多结构\",\"t\":[\"结构示例\",\"drop table if exists student; drop table if exists class; create table class( id int primary key auto_increment, name varchar(200) ); create table student( id int primary key auto_increment, name varchar(200), age int, class_id int ); insert into class values(1,\\\"一班\\\"); insert into class values(2,\\\"二班\\\"); insert into class values(3,\\\"三班\\\"); insert into student values(1, \\\"张飞\\\", 30, 1); insert into student values(2, \\\"关羽\\\", 40, 1); insert into student values(3, \\\"李云龙\\\", 35, 2); insert into student values(4, \\\"楚云飞\\\", 33, 2); insert into student values(5, \\\"王有胜\\\", 30, 2); insert into student values(6, \\\"林冲\\\", 30, 3); insert into student values(7, \\\"孙二娘\\\", 35, 4); select * from class; select * from student; \",\"@Data @NoArgsConstructor @AllArgsConstructor public class Clazz { private Integer id; private String className; private List<Student> studentList; } @Data @NoArgsConstructor @AllArgsConstructor public class Student { private Integer id; private String name; private Integer age; private Integer classId; } \"]},\"279\":{\"h\":\"方式一: 分次查询\",\"t\":[\"测试\",\"@Test public void test1() { List<Clazz> clazzes = mapper.queryAllClazz(); for (Clazz clazz : clazzes) { System.out.println(clazz); } } \",\"ClazzMapper接口\",\"List<Clazz> queryAllClazz(); \",\"ClazzMapper.xml\",\"<resultMap id=\\\"baseClazzMap\\\" type=\\\"com.cskaoyan.demo9.bean.Clazz\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <!--collection: 关联的是集合，用collection property：成员变量的名字 ofType：集合中单个元素的类型 select: 关联的SQL语句坐标 column: 列名 --> <collection property=\\\"studentList\\\" ofType=\\\"com.cskaoyan.demo9.bean.Student\\\" select=\\\"com.cskaoyan.demo9.mapper.StudentMapper.queryStudentListByClassId\\\" column=\\\"id\\\"> </collection> </resultMap> <select id=\\\"queryAllClazz\\\" resultMap=\\\"baseClazzMap\\\"> select * from class; </select> \",\"StudentMapper.xml文件\",\"<resultMap id=\\\"baseResultMap\\\" type=\\\"com.cskaoyan.demo9.bean.Student\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <result column=\\\"age\\\" property=\\\"age\\\"/> <result column=\\\"class_id\\\" property=\\\"classId\\\"/> </resultMap> <select id=\\\"queryStudentListByClassId\\\" resultMap=\\\"baseResultMap\\\"> select * from student where class_id = #{classId}; </select> \"]},\"280\":{\"h\":\"方式二: 连接查询\",\"t\":[\"测试\",\"@Test public void test2(){ List<Clazz> clazzes = mapper.queryAllClazz2(); for (Clazz clazz : clazzes) { System.out.println(clazz); } } \",\"ClazzMapper接口\",\"List<Clazz> queryAllClazz2(); \",\"TableMapper.xml\",\"<resultMap id=\\\"baseResultMap2\\\" type=\\\"com.cskaoyan.demo9.bean.Clazz\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <collection property=\\\"studentList\\\" ofType=\\\"com.cskaoyan.demo9.bean.Student\\\"> <id column=\\\"s_id\\\" property=\\\"id\\\"/> <result column=\\\"s_name\\\" property=\\\"name\\\"/> <result column=\\\"s_age\\\" property=\\\"age\\\"/> <result column=\\\"s_class_id\\\" property=\\\"classId\\\"/> </collection> </resultMap> <select id=\\\"queryAllClazz2\\\" resultMap=\\\"baseResultMap2\\\"> select c.id, c.name, s.id as s_id, s.name as s_name, s.age as s_age, s.class_id as s_class_id from class c left join student s on c.id = s.class_id; </select> \"]},\"281\":{\"h\":\"多对多结构\",\"t\":[\"结构示例\",\"drop table if exists tec_stu; drop table if exists tec_course; drop table if exists tec_sele_course; create table tec_stu( id int primary key auto_increment, name varchar(200) ); create table tec_course( id int primary key auto_increment, name varchar(200) ); -- 选课表 create table tec_sele_course( id int primary key auto_increment, student_id int, course_id int ); insert into tec_stu values (1, \\\"李云龙\\\"); insert into tec_stu values (2, \\\"楚云飞\\\"); insert into tec_stu values (3, \\\"赵刚\\\"); insert into tec_stu values (4, \\\"王有胜\\\"); insert into tec_stu values (5, \\\"孙悟空\\\"); insert into tec_course values (1, \\\"Java\\\"); insert into tec_course values (2, \\\"C++\\\"); insert into tec_course values (3, \\\"Python\\\"); insert into tec_sele_course(student_id, course_id) values (1,1); insert into tec_sele_course(student_id, course_id) values (1,2); insert into tec_sele_course(student_id, course_id) values (2,2); insert into tec_sele_course(student_id, course_id) values (2,3); insert into tec_sele_course(student_id, course_id) values (3,1); insert into tec_sele_course(student_id, course_id) values (4,2); insert into tec_sele_course(student_id, course_id) values (5,3); select * from tec_stu; select * from tec_course; select * from tec_sele_course; \",\"@Data public class TecCourse { private Integer id; private String name; List<TecStu> studentList; } @Data public class TecStu { private Integer id; private String name; } \"]},\"282\":{\"h\":\"方式一: 分次查询\",\"t\":[\"根据用户的名字查询出用户信息以及用户对应购买的商品信息。\",\"测试\",\"@Test public void testQueryAllCourses1() { List<TecCourse> tecCourses = mapper.queryAllCourses2(); for (TecCourse tecCours : tecCourses) { System.out.println(tecCours); } } \",\"Mapper接口\",\"List<TecCourse> queryAllCourses1(); \",\"Mapper.xml\",\"<select id=\\\"queryByCourseId\\\" resultType=\\\"com.cskaoyan.demo11.bean.TecStudent\\\"> select s.id,s.name from tec_sele_course sc left join tec_stu s on sc.student_id = s.id where sc.course_id = #{courseId} </select> <resultMap id=\\\"baseCourseResultMap1\\\" type=\\\"com.cskaoyan.demo11.bean.TecCourse\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"name\\\" property=\\\"name\\\"/> <collection property=\\\"students\\\" ofType=\\\"com.cskaoyan.demo11.bean.TecStudent\\\" column=\\\"id\\\" select=\\\"com.cskaoyan.demo11.mapper.TecStudentMapper.queryByCourseId\\\"> </collection> </resultMap> <select id=\\\"queryAllCourses1\\\" resultMap=\\\"baseCourseResultMap1\\\"> select id, name from tec_course; </select> \"]},\"283\":{\"h\":\"方式二: 连接查询\",\"t\":[\"测试\",\"@Test public void testQueryAllCourses2() { List<TecCourse> tecCourses = mapper.queryAllCourses2(); for (TecCourse tecCours : tecCourses) { System.out.println(tecCours); } } \",\"Mapper接口\",\"List<TecCourse> queryAllCourses2(); \",\"Mapper.xml\",\"<resultMap id=\\\"baseCourseResultMap2\\\" type=\\\"com.cskaoyan.demo11.bean.TecCourse\\\"> <id column=\\\"c_id\\\" property=\\\"id\\\"/> <result column=\\\"c_name\\\" property=\\\"name\\\"/> <collection property=\\\"students\\\" ofType=\\\"com.cskaoyan.demo11.bean.TecStudent\\\"> <id column=\\\"s_id\\\" property=\\\"id\\\"/> <result column=\\\"s_name\\\" property=\\\"name\\\"/> </collection> </resultMap> <select id=\\\"queryAllCourses2\\\" resultMap=\\\"baseCourseResultMap2\\\"> select c.id as c_id, c.name as c_name, s.id as s_id, s.name as s_name from tec_course c left join tec_sele_course sc on c.id = sc.course_id left join tec_stu s on sc.student_id = s.id; </select> \",\"懒加载和MyBatis缓存作为了解, 知道是怎么回事, 面试的时候可以谈一谈思想即可, 因为工作中并不会使用(基本不会使用)\",\"懒加载又叫做延迟加载。\",\"// 是指在Mybatis进行分次查询的时候，假如第二次查询的内容没有被使用到的话，那么就不去执行第二次查询的SQL语句，等到用到第二次查询的内容的时候再去执行第二条SQL语句。 \",\"注意:\",\"// 1. 当局部开关配置的时候，以局部开关的配置为准 // 2. 当局部开关没有配置的时候，以总开关的配置为准 // 3. 当总开关也没有配置的时候，以默认配置为准（默认配置是关闭懒加载） \",\"总开关配置: mybatis的主配置文件里面的settings里面\",\"<settings> <!-- 懒加载 true: 表示开启 false:默认值，表示关闭 --> <setting name=\\\"lazyLoadingEnabled\\\" value=\\\"true\\\"/> </settings> \",\"案例\",\"// 测试 List<User> list = mapper.selectUserGoodsListByName(\\\"天明\\\"); \",\"// Mapper接口 List<User> selectUserGoodsListByName(String name); \",\"Mapper.xml\",\"<select id=\\\"selectUserGoodsListByName\\\" resultMap=\\\"baseMap5\\\"> select id, user_name from user where user_name = #{name} </select> <resultMap id=\\\"baseMap5\\\" type=\\\"bean.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"user_name\\\" property=\\\"userName\\\"/> <collection property=\\\"goodsList\\\" ofType=\\\"bean.Goods\\\" select=\\\"selectGoodsListByUserId\\\" column=\\\"id\\\"/> </resultMap> <select id=\\\"selectGoodsListByUserId\\\" resultType=\\\"bean.Goods\\\"> select g.id , g.goods_name as goodsName from `order` o left join goods g on g.id = o.goods_id where o.user_id = #{id} </select> \",\"局部开关\",\"<!-- fetchType: eager关闭/lazy开启 --> <resultMap id=\\\"baseMap5\\\" type=\\\"bean.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"user_name\\\" property=\\\"userName\\\"/> <collection property=\\\"goodsList\\\" ofType=\\\"bean.Goods\\\" select=\\\"selectGoodsListByUserId\\\" fetchType=\\\"lazy\\\" column=\\\"id\\\"/> </resultMap> \",\"注意：idea的Debug模式下不能复现懒加载，因为debug模式会显示出对象中的所有的信息，相当于已经用到了第二次SQL语句查询的内容，所以第二次SQL语句就会立马执行\",\"缓存是指在Mybatis中，单独开辟一块内存空间（map），来存储查询的信息。后续假如再次调用了到了同样的查询，那么就直接查询缓存。\",\"MyBatis默认开启了缓存\",\"MyBatis是怎么存储缓存的: 在MyBatis中缓存是以Map(集合类容器)接口存储的 // map： // key：SQL语句和查询的条件(注意: SQL语句是依赖于坐标的) // (MapperID+Sql+所有的入参) // value：查询的结果 \",\"缓存： 查数据，会从数据库中查（磁盘上）。速度比较慢。 缓存就是把数据存储在内存上，特点快。\",\"为什么不把数据全部存储在内存上，这样速度快。 数据安全问题，有可能程序跑着跑着，电脑挂了。\",\"Map.。 key-value .\"]},\"284\":{\"h\":\"一级缓存\",\"t\":[\"一级缓存是一个以SqlSession管理的Mapper级别的缓存。缓存的内容存储在SQLSession中管理。\",\"一定要通过同一个SqlSession获取出来的Mapper，才会走缓存。\",\"image-20220523111926242\",\"配置：一级缓存默认是开启的，并且没有提供开关给用户关闭(不可以关闭)。\",\"一级缓存什么时候失效呢？ // SqlSession关闭的时候 // SqlSession调用增删改的时候,会清空当前SqlSession缓存 // SqlSession调用commit方法 \"]},\"285\":{\"h\":\"测试\",\"t\":[\"同一个SqlSession 获取的同一个Mapper: 走缓存\",\"@Test public void testQueryByOneMapper1() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); Student student = mapper.queryStudentByPrimaryKey(1); // 根据同一个Mapper。会走缓存 Student student1 = mapper.queryStudentByPrimaryKey(1); Student student2 = mapper.queryStudentByPrimaryKey(1); System.out.println(student); // 参数不同，不会走缓存 Student student5 = mapper.queryStudentByPrimaryKey(2); System.out.println(student5); } \",\"同一个SQLSession获取不同的的mapper: 走缓存\",\"@Test public void testQueryByTwoMapper1() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); // 同一个SqlSession获取的不同Mapper。会走缓存 StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); Student student = mapper.queryStudentByPrimaryKey(1); StudentMapper mapper2 = sqlSession.getMapper(StudentMapper.class); Student student1 = mapper2.queryStudentByPrimaryKey(1); } \",\"不同SQLSession获取同一种的mapper: 不走缓存\",\"@Test public void testQueryByTwoSqlSession() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); SqlSession sqlSession2 = MybatisUtil.getSqlSession(true); // 不同SqlSession获取的Mapper。不会走缓存 StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); StudentMapper mapper2= sqlSession2.getMapper(StudentMapper.class); Student student = mapper.queryStudentByPrimaryKey(1); Student student2 = mapper2.queryStudentByPrimaryKey(1); } \"]},\"286\":{\"h\":\"二级缓存\",\"t\":[\"二级缓存是一个NameSpace级别（mapper.xml）的缓存，每一个NameSpace都有自己的单独的缓存空间。(要通过两级配置开启)\",\"配置1：总开关\",\"<!-- 二级缓存开关配置 --> <setting name=\\\"cacheEnabled\\\" value=\\\"true\\\"/> \",\"配置2: 局部开关\",\"需要对二级缓存的缓存的所有相关对象实现序列化接口\",\"开启自动生成序列化id\",\"image-20220523114729631\",\"实现序列化接口，生成序列化id\",\"image-20220523114755302\",\"// 1, 二级缓存是 namespace级别/Mapper级别 的缓存 // 2, 多个SqlSession可以共用二级缓存(同一个Mapper) // 3, 在关闭sqlsession后(close); 才会把该sqlsession一级缓存中的数据添加到对应namespace的二级缓存中。 // 4, 当Mybatis默认先查询二级缓存，二级缓存中无对应数据，再去查询一级缓存，一级缓存中也没有，最后去数据库查找。 \",\"image-20220523142818860\"]},\"287\":{\"h\":\"测试\",\"t\":[\"测试\",\"@Test public void testQueryTwoLevelCache() { SqlSession sqlSession = MybatisUtil.getSqlSession(true); SqlSession sqlSession2 = MybatisUtil.getSqlSession(true); // 不同SqlSession获取的Mapper。不会走缓存 StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); StudentMapper mapper2 = sqlSession2.getMapper(StudentMapper.class); Student student = mapper.queryStudentByPrimaryKey(1); Student student2 = mapper2.queryStudentByPrimaryKey(1); // 二级缓存是在namespace级别下的缓存 // 只有close后，才会把数据添加进二级缓存 sqlSession.close(); Student student1 = mapper2.queryStudentByPrimaryKey(1); System.out.println(student1); } \",\"二级缓存有没有用呢？\",\"其实有一定的作用，但是也有一定的缺陷\",\"确实能够提高Mybatis的性能\",\"不能完美的解决脏数据的问题\",\"二级缓存空间对于用户来说是完全透明的，我们用户不能够直接的去操作它，也不能够让用户指定去查询数据库还是查询缓存，所以其实使用起来不太方便\",\"在以后的工作中，有一些需要使用缓存的场景，那么这个时候我们不会考虑使用Mybatis给我们提供的缓存，取而代之的是使用我们的NoSQL数据库（Redis）。\",\"如果mybatis有缓存。mybatis给我的数据，是数据库提供的数据，还是缓存拿出来的。\",\"我们不清楚。\"]},\"288\":{\"h\":\"00. JavaSE思维导图\"},\"289\":{\"h\":\"Java基础\",\"t\":[\"01. Java基础\"]},\"290\":{\"h\":\"Method\",\"t\":[\"02.method\"]},\"291\":{\"h\":\"数组\",\"t\":[\"03 数组\"]},\"292\":{\"h\":\"面向对象1\",\"t\":[\"04. oop1\"]},\"293\":{\"h\":\"面向对象2\",\"t\":[\"05. oop2\"]},\"294\":{\"h\":\"面向对象3\",\"t\":[\"06. oop3\"]},\"295\":{\"h\":\"String\",\"t\":[\"07. String\"]},\"296\":{\"h\":\"Exception\",\"t\":[\"08. exception\"]},\"297\":{\"h\":\"字符流\",\"t\":[\"09. 字符流思维导图\"]},\"298\":{\"h\":\"字节流\",\"t\":[\"10. 字节流思维导图\"]},\"299\":{\"h\":\"Thread\",\"t\":[\"11. Thread\"]},\"300\":{\"h\":\"Network\",\"t\":[\"12. Network\"]},\"301\":{\"h\":\"reflect\",\"t\":[\"13. reflect\"]},\"302\":{\"h\":\"01. Java基本介绍\"},\"303\":{\"h\":\"Java语言的应用领域\",\"t\":[\"Web应用(Java EE方向)\",\"大数据\",\"Android\",\"桌面应用\",\"游戏\",\"Web应用\",\"Web应用程序，顾名思义是一种可以通过Web（互联网）访问的应用程序。\",\"Web应用具备以下特点：\",\"普遍采用B/S架构实现(Browser/Server)，用户只需要有浏览器即可访问使用，不需要再安装其他软件。\",\"Web应用当然也可以采用C/S(Client/Server)架构实现。\",\"但不管采用何种架构实现，都需要连接互联网才能使用，能够脱机使用的应用程序不是Web应用。\",\"我们日常生活中使用的大多数应用程序都是Web应用，比如各种管理系统，淘宝京东电商系统, 金融, 医疗等。Web应用通过浏览器访问，必然需要服务端作出响应，而 Java是当前最常见、最主流的服务器端语言 ，使用Java做服务器端最大的优点是稳定，开发效率也很高（依赖于Java成熟的类库和框架体系）\",\"当然，目前Java最主流的用途也是作为服务器端开发语言。\",\"大数据\",\"大数据开发也是Java开发的另一个方向, 主要从事数据处理的工作, 数据采集, 数据清洗, 数据分析等工作. 基于Hadoop提供的分布式计算框架，可以用来统计和分析海量数据, 应用与金融风控、实时推荐等.\",\"Android\",\"在安卓刚问世并流行的早期，使用Java进行安卓开发十分流行，并且工资相当可观。但如今来看，用Java做安卓开发早已式微，越来越少人使用Java开发Android，相关的工作岗位非常少。\",\"主要有以下原因：\",\"Google和Oracle公司有一定的纠纷，导致Google不愿意再在安卓中使用Java语言。\",\"原生的安卓意味着公司还需要针对iOS等其它平台开发软件，增加成本，开发效率低。现在企业都倾向于使用使用Vue，H5这种可跨平台的开发语言。\",\"最后，可以了解一下的是，现在安卓开发使用一种类Java的语言的Kotlin 语言，它是JetBrains公司开发的（也就是开发IDEA的公司）\",\"桌面应用\",\"狭义的桌面应用可以看成基于C/S架构的具有 GUI （图形用户界面）的定制软件，一般都是指PC端的桌面应用程序，不需要浏览器运行，而是直接运行在桌面操作系统上的应用，这意味桌面应用一般都可以单机使用，当然联网功能也完全可以具备。\",\"Java也是可以做桌面级应用开发的，但普遍来说，桌面应用开发是C/C++的天下。\",\"这是因为操作系统底层多是C语言开发的，使用C语言开发相关应用程序，实现功能可能会更加方便快捷，软件性能也会更加优越。\",\"Java在某些特殊情况下会有一些用武之地，比如开发一个需要频繁和Java语言交互的应用程序，但绝大多数情况下，用Java都不是一个好的选择。\",\"我们的开发工具IDEA就是依赖Java语言编写的\",\"游戏\",\"早在诺基亚, 摩托罗拉流行的年代, 还没有智能手机, 塞班系统非常普及, 搭载在塞班系统上的很多游戏都是Java开发的.\",\"后来随着智能手机的普及, Java淡出游戏的舞台, 比较知名的一款游戏就是 我的世界, 是Java开发的.\",\"综上, Java的主流还是Web应用的开发\"]},\"304\":{\"h\":\"JDK与JRE\",\"t\":[\"JRE（Java Runtime Environment）：全称Java运行时环境。\",\"JRE包括Java虚拟机、运行时核心类库等Java程序运行时必备的环境。\",\"JRE主要是给已经编写好的Java程序使用，也就是说操作系统中想要运行Java程序，必须要有JRE。\",\"JDK（Java Development Kit）：Java开发者工具包\",\"JDK包含JRE。\",\"除了JRE外，JDK还提供了Java开发者需要使用的工具，比如javac.exe，java.exe（Windows）\",\"JDK = JVM + 核心类库 + 开发工具包\"]},\"305\":{\"h\":\"JDK使用\",\"t\":[\"JDK下载\",\"JDK配置\"]},\"306\":{\"h\":\"下载安装\",\"t\":[\"JDK下载地址：\",\"官网下载\",\"下载地址：Oracle官网下载JDK\",\"根据操作系统选择版本后，找到Java8进行下载\",\"稍微需要注意的是：\",\"不建议将JDK直接装在C盘，建议单独在其它磁盘找一个文件夹放开发相关的软件。\",\"（这样开发环境不会因为重装系统而丢失）\",\"JDK的安装目录，这有时候会造成一些奇怪的问题。\",\"一台计算机可以同时安装多个不同版本的JDK，在开发工具IDEA中可以选择使用的版本。\"]},\"307\":{\"h\":\"配置\",\"t\":[\"这里以Windows操作系统为例，如果是MacOS，可以自行百度配置一下，大体的思路是一样的。\",\"首先，打开JDK的安装目录，然后复制当前的路径，E:\\\\Java\\\\Java8\\\\jdk1.8.0_111\",\"然后右键我的电脑-属性，找到高级系统设置：\",\"如下图所示：\",\"在上述弹出的窗口中，点击高级 -> 环境变量，如下图：\",\"在下面的窗口当中，选择一个变量，如下图所示：\",\"变量名请固定写成：\",\"变量值必须写出：JDK安装目录的根目录，注意是根目录，就是刚才复制的那个目录\",\"在下面的窗口中下拉，选择Path（不是上面用户变量中的Path），然后点击编辑按钮，如下图：\",\"在打开的窗口中，点击新建按钮，选择新建的值为，如下图：\",\"最后，将上述打开的窗口全部点击 确定 即可。\",\"以上，就完成了JDK的配置，接下来我们可以简单测试一下：\",\"打开命令行工具（win + R输入cmd），输入命令java -version，输出结果如下图：\",\"输入命令 javac，输出结果如下图：\",\"还可以输入java、java -help等命令，发现有输出结果就可以断定配置成功了\",\"有些机器在 C盘 目录下，操作指令可能无法正常显示结果，如果是这样，只需要换一个非C盘的目录就可以了。\"]},\"308\":{\"h\":\"第一个Java程序\",\"t\":[\"对于学习任何编程语言来说，业界有一个共识就是：\",\"以实现在控制台打印**“Hello World！”**作为第一个入门程序。现在我们就来实现它，这也将是你的第一个Java程序。\",\"这里给一个友情提示：如果你想尝试手动创建java文件并编译执行，请一定要打开操作系统中文件后缀名的显示！ 请打开文件资源管理器，进行如下图操作：\",\"接下来按照下述步骤完成：\",\"首先，新建一个 txt 文本文件，起名字为 HelloWorld.java ，这时会提示修改扩展名点击确认即可。\",\"然后在打开的文本编辑框中写Java代码，如下：\",\"public class HelloWorld { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } } \",\"目前来说，我们可以把上述程序作为我们写Java代码的一个标准范式，即：\",\"首先定义一个public修饰的class，并且该class必须要和文件名同名！\",\"然后写main方法（格式固定，直接抄写即可）\",\"最后在main方法中写要执行的代码。\",\"需要明确的是： main方法是Java程序的入口方法，任何要想被执行的代码要么直接写在main方法当中，要么就间接被main方法去调用执行！\",\"然后打开cmd命令行窗口，进入这个Java文件存放的目录（相关操作需要使用dos指令，自行百度）\",\"使用 javac 指令编译java文件（源代码文件），得到class文件（字节码文件）\",\"使用 java 指令解释执行class文件（字节码文件）即可得到结果\",\"运行 javac 命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件，如果语法有错误，会给出相关的错误原因。java指令后面跟着的是java文件中的类名（而不是文件名）例如 HelloWorld 就是类名，直接java HelloWorld 即可。\",\"动态Gif演示：\"]},\"309\":{\"h\":\"Java程序的运行机制\",\"t\":[\"第一个Java程序的运行过程如下:\",\"Java源代码总是要经过编译，得到class字节码文件，然后字节码文件在Java虚拟机中解释执行, 这就是Java程序的基本运行原理,\",\"Java语言的跨平台性\",\"程序是由虚拟机(JVM)解释执行的, 并不是操作系统, 这样做的好处就是可以实现Java程序的跨平台运行(Write Once，Run Anywhere！), 也就是说, 在不同的操作系统上, 可以运行相同的Java程序, 只需要安装不同版本的Java虚拟机即可.\",\"Q:\",\"Java可以跨平台吗? \",\"可以\",\"JVM可以跨平台吗? \",\"不可以\"]},\"310\":{\"h\":\"02. Java基础语法\",\"t\":[\"学习目标:\",\"随着学习深入, 逐渐掌握常见关键字的作用与使用\"]},\"311\":{\"h\":\"关键字\",\"t\":[\"什么是关键字（keyword）？关键字有什么特点？\",\"关键字的定义是：关键字是被Java语法赋予特定含义的单词。\",\"关键字的特点是：关键字都是合法的单词，而且字母必须全部小写。\",\"总得来说，关键字是Java语法具有特定含义的小写单词。\",\"关键字有什么作用？\",\"其实上述定义已经说明了它的作用，关键字在Java语法中都有特定的含义，**它对编译器具有特殊意义，能够影响编译！**具体来说，关键字往往都用来表示一种程序的结构或者修饰一些程序的结构等等。当然更具体的含义，要针对不同的关键字来说明。\",\"这里举一个非常常见的案例：\",\"class是最常见的关键字之一，它用来表示当前代码中定义了一个类（这样的程序结构）。\"]},\"312\":{\"h\":\"常见关键字\",\"t\":[\"分类\",\"image-20220810105255147\",\"作用\",\"关键字\",\"含义\",\"abstract\",\"表明类或者成员方法具有抽象属性\",\"assert\",\"用来进行程序调试\",\"boolean\",\"基本数据类型之一，布尔类型\",\"break\",\"提前跳出一个块\",\"byte\",\"基本数据类型之一，字节类型\",\"case\",\"用在switch语句之中，表示其中的一个分支\",\"catch\",\"用在异常处理中，用来捕捉异常\",\"char\",\"基本数据类型之一，字符类型\",\"class\",\"类\",\"const\",\"保留关键字，没有具体含义\",\"continue\",\"回到一个块的开始处\",\"default\",\"默认，例如，用在switch语句中，表明一个默认的分支\",\"do\",\"用在do-while循环结构中\",\"double\",\"基本数据类型之一，双精度浮点数类型\",\"else\",\"用在条件语句中，表明当条件不成立时的分支\",\"enum\",\"枚举\",\"extends\",\"表明一个类型是另一个类型的子类型，这里常见的类型有类和接口\",\"final\",\"用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量\",\"finally\",\"用于处理异常情况，用来声明一个基本肯定会被执行到的语句块\",\"float\",\"基本数据类型之一，单精度浮点数类型\",\"for\",\"一种循环结构的引导词\",\"goto\",\"保留关键字，没有具体含义\",\"if\",\"条件语句的引导词\",\"implements\",\"表明一个类实现了给定的接口\",\"import\",\"表明要访问指定的类或包\",\"instanceof\",\"用来测试一个对象是否是指定类型的实例对象\",\"int\",\"基本数据类型之一，整数类型\",\"interface\",\"接口\",\"long\",\"基本数据类型之一，长整数类型\",\"native\",\"用来声明一个方法是由与计算机相关的语言(如C/C++/FORTRAN语言)实现的\",\"new\",\"用来创建新实例对象\",\"package\",\"包\",\"private\",\"一种访问控制方式：私用模式\",\"protected\",\"一种访问控制方式：保护模式\",\"public\",\"一种访问控制方式：共用模式\",\"return\",\"从成员方法中返回数据\",\"short\",\"基本数据类型之一，短整数类型\",\"static\",\"表明具有静态属性\",\"strictfp\",\"用来声明FP_strict(单精度或双精度浮点数)表达式遵循IEEE 754算术规范\",\"super\",\"表明当前对象的父类型的引用或者父类型的构造方法\",\"switch\",\"分支语句结构的引导词\",\"synchronized\",\"表明一段代码需要同步执行\",\"this\",\"指向当前实例对象的引用\",\"throw\",\"抛出一个异常\",\"throws\",\"声明在当前定义的成员方法中所有需要抛出的异常\",\"transient\",\"声明不用序列化的成员域\",\"try\",\"尝试一个可能抛出异常的程序块\",\"void\",\"声明当前成员方法没有返回值\",\"volatile\",\"表明两个或者多个变量必须同步地发生变化\",\"while\",\"用在循环结构中\",\"上述关键字，绝大多数我们都会在JavaSE阶段学习和使用，很快就会学到。\"]},\"313\":{\"h\":\"保留字\",\"t\":[\"什么是保留字（reserved word）？\",\"保留字的官方定义是这样的：\",\"保留字的定义\",\"保留字是对当前版本的Java，没有特殊含义的单词。\",\"但是以后的版本中，Java官方可能会将其变成具有特殊含义的单词（也就是说可能升级为关键字）\",\"即便以后也不打算升级为关键字，但是Java官方认为你不应该在Java代码中使用的单词，也会变成保留字\",\"总之，概括来说就是： 保留字就是那些Java官方不使用，也不让程序员在代码中使用的单词。\",\"Java当中的保留字是很稀缺的，以Java8版本为例，目前仅有两个保留字：\",\"const\",\"goto\",\"上面已经说过了，保留字对Java代码来说没有任何含义，请不要在代码中写出保留字！\",\"学习目标:\",\"掌握标识符的组成规则\",\"按照命名规范与约定进行命名(包,类,方法,变量)\"]},\"314\":{\"h\":\"什么是标识符\",\"t\":[\"​ 在编程过程中，经常需要在程序中定义一些符号来标记一些名称，如包名，类名，方法名，参数名，变量名等，这些符号被称为标识符(表示各种各样的名字)。\",\"​ 标识符可以由任意顺序的大小写的字母，数字，下划线和美元符号组成，但是标识符不能以数字开头，也不能是Java中的关键字。\"]},\"315\":{\"h\":\"组成规则\",\"t\":[\"标识符的开头必须是： \",\"字母（A~Z 和 a~z）\",\"下划线（_）\",\"美元符号（$）\",\"Unicode 字符集中编号为0xC0以及它后面的所有符号\",\"标识符的组成必须是： \",\"数字（0~9）\",\"字母（A~Z 和 a~z）\",\"美元符号（$）\",\"下划线（_）\",\"Unicode 字符集中编号为0xC0以及它后面的所有符号\",\"通过以上标识符的语法要求，做几个总结：\",\"标识符不能以数字开头，但可以由数字组成。\",\"0xC0是一个十六进制数，Unicode 字符集中编号为0xC0后面的字符，几乎包含了世界上绝大多数非英语国家的文字字符。\",\"这里面当然包括中文，韩文，日文等。所以标识符的命名从语法上来说，直接用中文是完全可以的,但是不允许使用。\",\"Unicode 字符集兼容ASCII码表，Unicode 字符集中前128个字符就是ASCII码表中的字符。所以Unicode 字符集中编号为0xC0以及它后面的所有符号是不含很多常用英文字符的，比如：英文逗号，英文句号，空格，回车等。\",\"当然，标识符不能是Java中的关键字和保留字，并且标识符严格区分大小写。\",\"下列都是合法的\",\"username username123 user_name _userName $username \",\"下列是不合法的\",\"123username class hello world \",\"注意事项\",\"不能以数字开头\",\"不能是Java中的关键字(保留字)\",\"区分大小写\"]},\"316\":{\"h\":\"命名规范\",\"t\":[\"在计算机中，起名字是很常见的操作，为了起好名字，驼峰命名法就被发明了。所谓驼峰，指的是当多个单词共同组成一个字符串时，不同单词的大写和小写间隔起来，形成一种像驼峰一样的凹凸，故称之为驼峰命名法。 使用驼峰命名法可以清晰得看到不同单词组成的新字符串\",\"建议初学者在定义标识符时要遵循以下几点规范：\",\"包名所有字母一律小写，例如com.cskaoyan.example01（多级包名用“.”隔开）\",\"类和接口每个单词的首字母大写，例如Student，Runnable，MyFirstProgram\",\"常量名所有字母都大写，单词之间用下划线连接，例如STUDENT_MAX_AGE\",\"变量名和方法名的第一个单词首字母小写，从第二个单词开始每个首字母大写，例如，userName，getStudentName\",\"以下哪些标识符的命名规则符合规范：\",\"1. public class student{} 2. public class TestDemo{} 3. int Num 4. String name 5. public class Persondemo{} 6. 包名 Test.Demo 7. 包名 com.baidu 8. int nianling 9. String 名字 \",\"约定俗称的规范：\",\"标识符字符串尽量只使用英文字母和阿拉伯数字。\",\"不要使用“$”美元符号，其在命名中有特殊含义，建议程序员不要主动使用它。\",\"不要使用“_”下划线与\\\"$\\\"开头结尾, 其在命名中也有特殊含义，除开特殊场景不要使用它。\",\"其他参考**Java开发编程规约**\",\"学习目标\",\"掌握Java中的三种注释\",\"大家写代码的时候能够正确合理使用注释\"]},\"317\":{\"h\":\"什么是注释？\",\"t\":[\"注释在任何编程语言中几乎都会出现，它起着解释说明源代码的作用。\",\"在Java中，注释指的是可以嵌入到Java代码的任何位置的，一种解释说明性的文字。\",\"这里要理清楚两个点：\",\"注释可以放在Java代码的任何位置。\",\"注释可以是任何解释性文字。\",\"当然注释有自身的语法，不是说随便就把文字写在源代码中。\",\"注意:\",\"注释是不参与编译的\"]},\"318\":{\"h\":\"注释的格式\",\"t\":[\"Java支持三种注释的语法格式，分别是：\",\"单行注释\",\"// 注释的文字 \",\"多行注释\",\"/* 注释的文字 注释的文字 注释的文字 */ \",\"文档注释\",\"/** * 注释的文字 * 注释的文字 * 注释的文字 */ \",\"关于三种注释方式，用途是不同的：\",\"单行注释:\",\"在解释说明单行或某几行代码时，如果仅需要简短的一句或几句话时，就使用单行注释。\",\"建议在代码中使用单行注释时，双斜线\\\"//\\\"和说明文字的中间应该加上一个空格。如下：\",\"// 注意有一个空格 \",\"多行注释\",\"在解释说明单行或某几行代码时，如果简短的一句或几句话不能说清楚，就需要使用多行注释。\",\"从上面说明不难发现，无论是单行注释还是多行注释，都是起着解释说明单行或某几行代码的作用！\",\"那么文档注释起着什么作用呢？\",\"文档注释：\",\"在Java代码中，经常有两个大的语法结构需要被解释：\",\"整个类\",\"整个方法\",\"文档注释，就是用来解释这两种结构的。出现了两种文档注释：\",\"类注释\",\"方法注释\",\"Java中对于文档注释的写法，提供了明确的规范，即Javadoc规范。\",\"符合Javadoc规范的文档注释可以使用javadoc指令，输出对应的说明文档。\",\"javadoc -encoding utf-8 Xxx.java \",\"官方JDK文档\",\"官方JDK文档\",\"我们常说的JDK文档，实际上就是根据官方JDK源码中文档注释，自动生成的。\"]},\"319\":{\"h\":\"注释的意义\",\"t\":[\"注释都是用英语，汉语这种自然语言去书写的，并且编译器会自动忽略它，显然注释是写给程序员看的。\",\"优秀的程序员，应该养成良好的注释书写习惯。\",\"注释的好处：\",\"增加代码可读性，这样：\",\"能够让自己在写完这段代码较长时间后，仍然能够通过注释很快理解代码。\",\"能够让接手自己代码的人，也能够很快熟悉代码\",\"想一下，如果几百上千行代码从头到尾没有一句注释，过了两个月，大概就没什么人能够快速理解该段代码了。这一条是注释最主要的作用。\",\"方便自己写代码的时候，记录程序的信息，想一想如果代码写着写着突然想记录一些数据，就只能依靠注释了。\",\"写注释可以增加自己写代码时的逻辑性，比如在编码前先用注释标记出每一步应该完成的事情，这样写代码会更流畅。\",\"注释也可以作为一种比较简单但十分好用有效的， 查找代码问题的方式。\",\"将一部代码逻辑注释掉，然后运行程序，查看运行结果\",\"反复注释不同的位置，反复测试，最终可以根据结果找到出现问题的代码逻辑，然后加以改正。\",\"关于注释，因为它太重要了，好的注释能大幅度提升团队开发效率，所以大多数成规模的公司都对程序员的代码注释有要求。\",\"关于如何写注释，请参考**Java开发编程规约**，在学习过程中，我们也要求大家按照规范书写注释，养成良好的习惯。\",\"学习目标\",\"掌握数据类型的分类\",\"8种基本数据类型的使用\",\"掌握常量的定义\",\"掌握变量的使用\",\"强类型语言介绍：\",\"强类型语言是一种强制类型定义的编程语言。在这种编程语言中，任何变量都必须有数据类型，并且一个变量一旦确定数据类型，如果不经过类型转换，则它永远就是该数据类型了。强类型语言对于变量的数据类型限制得相对严格，变量不能轻易改变数据类型，所以强类型语言编写的程序不会因为数据类型的随意转换而出错，相对更安全。典型的强类型语言有：Java、C#、Python、C++等，目前流行的绝大多数编程语言都是强类型语言。\",\"Java是典型的强类型语言，这就意味着Java当中的每个变量都必须有它的数据类型，并且数据类型不会轻易改变。变量从定义到使用的过程，实际上就是我们编写程序的过程, 使用变量的第一步需要明确数据类型的概念.\"]},\"320\":{\"h\":\"数据类型\",\"t\":[\"什么是数据类型？\",\"数据类型可以看成是变量的分类，我们可以从两个角度理解数据类型：\",\"从内存角度理解, 数据最终是要存储在内存中的 \",\"数据类型可以看成是对内存空间的一个抽象表达方式，一种数据类型对应一种内存空间。\",\"该种数据类型的内存空间只能存储该种数据类型的变量，而不能是别的类型变量。\",\"从数据的使用角度理解, 数据被存储后，是需要被使用的 \",\"数据类型， 表示的是一组数据的集合，和基于该数据集合的一组合法操作。\",\"也就是说，数据类型不仅表示一组数据的集合，更重要的是它还限制了这组数据能够执行的操作。\",\"总之，数据类型的意义在于：告诉Java的编译器，定义了何种类型的变量。因为只有明确了数据类型，JVM才知道需要多大内存空间存储它。\",\"数据类型分类\",\"8种基本数据类型\",\"引用数据类型\",\"image-20220815154235495\"]},\"321\":{\"h\":\"基本数据类型\",\"t\":[\"基本数据类型（Base Data Type）指的是由Java语言默认提供的八种数据类型，它们的存储空间一般都是固定的。\",\"计算机中数据存储单位的概念：\",\"位（bit）：位是最小的存储单位，每一个位存储一个1位的二进制码，即1位存储一个0或者1\",\"字节（Byte）：一个字节由8位组成, 0000 1111\"]},\"322\":{\"h\":\"整型\",\"t\":[\"整型有四种：\",\"byte \",\"byte类型也叫字节型，仅占1个字节内存空间，即8位。\",\"short \",\"short 也叫短整型，占用2个字节内存空间，16位。\",\"短整型只比字节型稍大，实际开发中short使用频率也不高。\",\"int \",\"int 本身就是单词integer的缩写，占用4个字节内存空间, 即32位\",\"int 是最常用的整数数据类型，实际开发中整数往往都是int类型的。\",\"long \",\"long 也叫长整型，占用8个字节内存空间, 即64位\",\"当int类型不足以存储数据时，就需要使用long类型存储数据，在需要很大的整数时才需要使用long类型。\",\"Java程序的数字进制:\",\"0b 表示的是二级制\",\"0 表示的是八级制\",\"0x 表示的是十六级制\",\"默认的是十进制\"]},\"323\":{\"h\":\"浮点型\",\"t\":[\"浮点数是一个比较独特的概念，它在计算机中的存储表示和有符号整数又有所不同，遵循IEEE754标准。\",\"IEEE754标准的浮点数表示方式牵扯到《计算机组成原理》等计算机基础知识。\",\"严格来说即便不掌握也不影响做一名Java开发，但是作为基础的知识，仍然建议每位同学弄懂它。\",\"如果你实在不想去领略计算机组成原理的魅力，那么简单来说：\",\"浮点数的表示方式可以理解为用二进制科学计数法来表示一个二进制数，即：a2 × 2n（其中a2是一个二进制数，n是指数）\",\"在IEEE754标准下，将a2称为尾数，n称之为阶码。\",\"于是，IEEE754标准下的浮点数，就有了两个最重要的特点：\",\"因为有指数运算（阶码），所以\",\"比如：1 * 10-100 这个数非常小，1 * 10100这个数就非常大。\",\"这是浮点数的优点，表示范围非常大！\",\"因为尾数的位数必然是有限的，所以这就导致\",\"如果规定尾数只有4位，那么能够表示的有效数字是不可能超过4位的。\",\"比如 1.234 * 100100 这个数，最多就只能表示1234四个数，这个数再大，后面也都是0。\",\"除此之外，浮点数还有一些很独特的设定，由于不是学习重点，这里不再细表。请自行看文档学习即可。\",\"文档地址:\",\"09_补充_IEEE754标准\",\"10_补充_有符号整数\",\"浮点型有两种：\",\"float\",\"float 即单精度的浮点数，占用4个字节内存空间，32位。\",\"float 相对于double占用空间更小，但它不如double精度高，也没有double表示范围大。\",\"double\",\"double 双精度的浮点数，占用8个字节内存空间，64位。\",\"double更精确，范围更大，是更常用的浮点数类型。\"]},\"324\":{\"h\":\"字符型\",\"t\":[\"所谓字符，指的是像字母，汉字、标点等类似的符号。那么字符型，就是用来表示这些符号的数据类型。\",\"很明显，计算机只能存储二进制数据，不可能也没能力直接存储一个符号（字符）。\",\"计算机中存储字符，实际是通过存储一个数值来映射对应的字符。比如：现在我规定一个整数值1对应字符\\\"a\\\"，那么计算机中存储1，就能够对应上字符\\\"a\\\"。\",\"在上述案例中，把某个字符对应的一个整数值，称之为该\\\"字符的编码值\\\"。而如果用一张表格来存储字符和编码值的映射关系，这就是编码表。\",\"映射关系\",\"a\",\"10\",\"b\",\"11\",\"你\",\"632\",\"关于编码的相关概念，我们会在后面详细讲解，这里有个简单的概念认识就可以了。\",\"Java中的字符型只有一个，那就是char类型。\",\"char本身就是单词\\\"字符\\\"character的缩写，每一个char类型变量都表示某一个字符，它具有以下特点：\",\"Java中的char类型变量占用2个字节内存空间。\",\"Java中的char类型存储字符，实际是存储了一个16位的无符号正整数值。\",\"注：十六位无符号数，16位全部用来存储数值，只能表示整数，取值范围是。\",\"即Java中的char类型能够表示编码值在范围内的的所有字符。\",\"使用的编码集是。\",\"扩展一下：\",\"char类型在代码中的表现：\",\"如果直接输出一个字符型变量：\",\"char c = 'a'; System.out.println(c); \",\"结果是：\",\"a\",\"字符类型如果直接输出，就会在控制台打印这个字符。\",\"如果字符型变量参与运算，是可以参与数值运算的：\",\"char c = 'a'; System.out.println(c + 10); \",\"结果是：\",\"107\",\"字符型变量参与运算，是编码值参与运算。\",\"字符a的编码值是97，所以输出107。\",\"综上，Java中字符型char就是存储一个正整数，来表示字符。只要这么想，基本不会出问题\"]},\"325\":{\"h\":\"布尔类型\",\"t\":[\"所谓布尔类型就非常简单了，就是表示真（true）和假（false）。\",\"和字符类型类型，布尔类型也只有一个：boolean类型，它具有以下特点：\",\"boolean，布尔类型，用来存储真（true）和假（false）两种布尔值，没有其它取值。\",\"布尔类型变量具体占用内存的大小，要分情况而定（以下作简单了解）根据JVM规范中提供的数据： \",\"一个独立的boolean类型变量当作int处理，占4个字节。\",\"在boolean数组当成byte数组处理，一个boolean元素占1个字节，节省空间。\"]},\"326\":{\"h\":\"数值基本类型的取值范围\",\"t\":[\"「 基本数据类型中的整型和浮点型都是表示纯粹的数值的，所以它们能够表示的数值范围我们必须要知道！」\",\"整型的取值范围是很容易得到的，通过数值位的长度n可以直接算出最大值和最小值\",\"浮点型的取值范围并不是一个普通的区间，严格来说它很复杂，这里我们简单了解一下即可~如果你想知道更详细的，还是请查看 09_补充_IEEE754标准学习。\",\"基本数据类型\",\"字节长度\",\"大小（位）\",\"最小值\",\"最大值\",\"取值范围\",\"byte\",\"1字节\",\"8bit\",\"-2^7\",\"2^7-1\",\"-128 ~ 127\",\"short\",\"2字节\",\"16bit\",\"-2^15\",\"2^15-1\",\"-32768 ~ 32767\",\"int\",\"4字节\",\"32bit\",\"-2^31\",\"2^31-1\",\"-2147483648 ~ 2147483647（21亿出头）\",\"long\",\"8字节\",\"64bit\",\"-2^63\",\"2^63-1\",\"-9223372036854774808 ~ 9223372036854774807（大概922亿亿）\",\"float\",\"4字节\",\"32bit\",\"-\",\"-\",\"大约 ±3.403E38（有效位数7~8位）\",\"double\",\"8字节\",\"64bit\",\"-\",\"-\",\"大约 ±1.798E308（有效数字16~17位）\"]},\"327\":{\"h\":\"引用数据类型\",\"t\":[\"限制于我们目前学习的知识，还无法给引用数据类型下一个准确的定义。所以，我们这里只简单了解一下就可以了。\",\"仅需要记住下面一点就可以了：\",\"只要不是四类八种基本数据类型，那么它都是引用数据类型。 因为基本数据类型很少，所以我们在Java开发中碰到的变量，非常多都是引用数据类型。最常见的也是最常用的引用数据类型就是String，它表示字符串。\",\"String类介绍\",\"String类是JDK源码中提供的一个固有类，也是源码中最常被使用的类型，是最常见的Java引用数据类型。\",\"String的意思是字符串，所以在Java当中，String类型是用来表示字符串的。\",\"一个String类型局部变量的声明、初始化语法是下面形式：\",\"String str = \\\"hello world!\\\"; \",\"当然，你直接使用输出语句在控制台输出字符串，也是使用了Java的String类。\",\"除此之外，在当前这个阶段，还希望大家能够了解的一个知识点是：\",\"如何判断两个String字符串变量的内容一致呢？\",\"String s1 = \\\"hello\\\"; String s2 = \\\"hello\\\"; \",\"s1和s2的内容是一致的，如何判断呢？这里，我直接给出具体做法，大家可以记忆一下，这些内容在后续再详细学习：\",\"s1.equals(s2); \",\"以上结构，用于判断两个字符串变量s1和s2的内容是否一致。它会返回一个布尔类型值，如果一致返回true，否则返回false。\",\"当然，对于s1和s2，它们equals比较的结果是：\",\"true\"]},\"328\":{\"h\":\"常量\",\"t\":[\"什么是常量？\",\"在程序运行过程中，其值不会发生改变的量，是绝对不会发生改变的量才能称之为常量。\",\"常量有哪些分类？\",\"从大的分类来说，常量主要分为两类：\",\"字面值常量，在Java代码中，所有直接写值的量都是字面值常量, 包括： \",\"整数常量：直接写在代码中的整数都是。例如1、2、3等。\",\"小数常量：直接写在代码中的小数都是。例如1.1、1.2、1.3等。\",\"字符常量：直接写在代码中的，使用单引号引起来的字符都是。例如'A'、'a'等。\",\"布尔常量：直接写在代码中的布尔值，只有true和false两个。\",\"字符串常量：直接写在代码中的，使用双引号引起来的字符串都是。例如\\\"HelloWorld\\\"、\\\"hello\\\"等\",\"空常量：空常量是引用数据类型独有的一种取值，只有null一个。（数组的时候会讲，这里先记一下）\",\"自定义常量，被关键字final修饰的变量。（面向对象再讲）\"]},\"329\":{\"h\":\"变量\"},\"330\":{\"h\":\"变量定义\",\"t\":[\"变量：程序运行过程中，值可能会发生改变的量（注重变化的可能性而不是确定性）。\",\"在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符来标识。这些内存单元我们称之为变量，定义的标识符就是变量名，内存单元存储的数据就是变量的值。\"]},\"331\":{\"h\":\"局部变量\",\"t\":[\"局部变量（Local Variable）的概念：在Java中，把定义在局部位置的变量称之为“局部变量”。\",\"局部位置的概念：在Java中，代码块的\\\"{}\\\"内部的位置都可以认为是局部位置。比如：\",\"方法体的大括号内部是典型的局部位置（也算代码块），比如main方法的大括号内部：\",\"main方法局部位置\",\"public static void main(String[] args) { // 局部位置 } \",\"类体当中直接定义的大括号内部（代码块当中）\",\"类体中直接定义的代码块\",\"class A { // 代码块 { // 局部位置 } } \",\"以上两个位置中继续嵌套的\\\"{}\\\"。也就是代码块中继续嵌套代码块，比如if、for结构的大括号 , 这时注意作用域即可。\",\"public static void main(String[] args) { // num的作用域是整个main方法，以下main方法中就无法再定义num局部变量了。 int num = 100; if (true) { // int num = 10; 不能定义，会编译报错。 // a变量的作用域就在if的代码块之间 int a = 200; } // a = 300; a不能在if之外生效 // a仍然可以在main方法下面定义 int a = 100; } \",\"注意：\",\"类体，也就是类名后面的大括号不是代码块。类体当中不属于局部位置，类体当中直接定义的变量也不是局部变量。\"]},\"332\":{\"h\":\"局部变量的使用\",\"t\":[\"局部变量的特点除了需要定义在局部位置，就是它的使用需要经过以下两步：\",\"声明局部变量\",\"初始化局部变量\"]},\"333\":{\"h\":\"局部变量声明\",\"t\":[\"什么是声明变量？\",\"声明变量的目的是告诉编译器，变量的数据类型和变量的名字。\",\"由于有这两个目的，所以变量的声明语法就需要两个部分。\",\"声明变量的语法:\",\"// Java是强类型语言，每个变量都需要声明它的数据类型 数据类型 变量名; \"]},\"334\":{\"h\":\"初始化局部变量\",\"t\":[\"什么是初始化变量\",\"声明后的变量还没有值无法使用，给变量赋初始值的过程就是初始化。\",\"既然是赋值，直接写\\\"=\\\"连接值就可以了。\",\"注：\",\"实际上仅仅声明变量那行代码在Java中是没有意义的，编译器会自动忽略那行仅声明变量的代码！ 相当于那行代码被注释了。既然都没有编译进二进制字节码文件，就更不可能开辟空间存放它了。\",\"初始化变量的语法：\",\"变量名 = 变量值; // 一般情况下声明和初始化都合起来使用 数据类型 变量名 = 变量名; \",\"Demo:\",\"int a = 10; char b = 'A'; double c = 0.1; String str = \\\"Hello\\\"; \"]},\"335\":{\"h\":\"局部变量的作用域\",\"t\":[\"变量需要先定义后使用，但这并不意味着在变量定义后的语句中一定可以使用该变量。变量需要在他的作用范围内才可以被使用，这个作用范围称之为变量的作用域。\",\"在程序中，变量一定会被定义在某一对大括号中，该大括号锁包含的代码区域便是这个变量的作用域，这个变量也成为局部变量。\",\"image-20220811180218148\",\"注意:\",\"同样一个{}不能有同名变量。\"]},\"336\":{\"h\":\"注意事项\",\"t\":[\"细节问题:\",\"Java当中的整数字面值常量，默认当作int处理。\",\"假如你想使用字面值整数定义一个long类型变量，那么该字面值常量的后面应该加上一个\\\"L\\\"区分（禁止使用小写\\\"l\\\"）。\",\"例如：\",\"字面值常量定义long类型变量\",\"long a = 123L； // 下列方式严格禁止 long b = 123l; //请问这是1231吗? \",\"Java当中的小数字面值常量，默认当作double处理。假如你想使用字面值小数定义一个float类型变量，那么该字面值常量的后面应该加上一个\\\"F\\\"或\\\"f\\\"区分。\",\"虽然Java语法允许一行定义多个相同数据类型的变量，但规范的Java代码禁止这样做！\",\"// 下列做法不允许 int a, b = 10, c, d = 10; // 应该改成下面这样 int a; int b = 10; int c; int d = 10; \",\"浮点数的精度问题\",\"浮点数因为遵循IEEE754标准，有一个比较大的缺点：\",\"由于表示有效数字的位数是有限的，所以精度是受限的。\",\"下面我们看两个经典案例：\",\"使用Java代码计算 10 / 3.0\",\"使用Java代码计算 1 - 0.9\",\"这里涉及一个二进制表示小数的转换问题，规则如下：\",\"十进制正小数（0.开头）转换成二进制，先用小数部分乘以2，取结果的整数部分(必然是1或者0)\",\"然后小数部分继续乘2\",\"直到小数部分为0，或者已经达到了最大的位数\",\"最终的结果（0.开头）正序排列\",\"显然，我们可以得到以下结论：\",\"很多十进制小数转换成二进制时，会存在循环小数的情况。那么有限有效数字的浮点数就不能准确表示这个数字了，那些超出表示位数的数据就被截断丢失了，数据失真，精度丢失，这就是浮点数的精度问题。\",\"最后再说一点：\",\"float和double类型主要是为了科学计算和工程计算而设计的，当你使用它们来表示小数时就已经确定精度对你而言不重要了。\",\"float和double都不适合用于精确计算的场合，尤其不适合用于货币运算。\",\"浮点精度问题练习\",\"下列代码会输出什么？\",\"double a = 0.1; float b = 0.1F; System.out.println(a == b); \",\"下列代码会输出什么？\",\"float a = 0.1F; float b = 0.10000000000000000001F; //中间18个0 System.out.println(a == b); \"]},\"337\":{\"h\":\"变量的类型转换\",\"t\":[\"​ 之前我们提到过，Java是强类型语言，一个变量必须明确它的数据类型， 并且数据类型一旦确定不能随意更改。但不能随意修改并不是不能更改，而是需要一定的条件，Java中变量的数据类型由某一种转换为另一种，我们将这个过程叫做数据类型转换。\",\"我们之前提到过：声明是告诉编译器变量的数据类型，那么数据类型的转换，也同样是要告诉编译器怎么转换，转换成了什么数据类型。\",\"数据类型的转换又可以分为两类：\",\"自动类型转换\",\"强制类型转换\",\"首先要明确的是：\",\"基本数据类型的数据类型转换必须在byte、short、int、long、float、double这些数值类型和char类型之间进行，boolean类型不参与基本数据类型的数据类型转换。\"]},\"338\":{\"h\":\"自动类型转换\",\"t\":[\"​ 自动类型转换的关键点就在于\\\"自动\\\"这两个字上，到底谁在\\\"自动\\\"帮我们完成类型转换呢？当然是编译器。编译器帮助我们完成类型转换，这意味着我们程序员不需要写额外代码，就可以自动完成类型转换。\",\"对于基本数据类型而言，自动数据类型发生在\\\"小取值范围\\\"转换为\\\"大取值范围\\\"的数据类型转换之间。 但是要注意：\",\"整型自然是占用内存空间越大，取值范围就越大。\",\"浮点型的float虽然只占4个字节，但是它比所有整型的取值范围都大。\",\"该体系中double是取值范围最大的，byte是最小的。\",\"char类型比较特殊，在参与数值类型的自动类型转换时，是编码值参与了转换。而且由于char类型的编码值范围是[0，65535]，所以只有int及以上数据类型的取值范围比char类型大。\",\"浮点数有精度问题，某些整型在自动转换成浮点型时，会出现精度丢失数据失真的问题\",\"image-20220812102622812\",\"以上图中，实线虚线都表示能够发生自动类型转换，箭头表示类型转换的方向。\",\"实线表示转换过程中不会有精度问题，虚线表示 会产生精度丢失。\"]},\"339\":{\"h\":\"强制类型转换\",\"t\":[\"自动类型转换是小取值范围到大取值范围数据类型的转换，一般不会出现问题，所以能够自动发生。与自动类型转换相对应的就是强制类型转换，是从\\\"大取值范围\\\"的数据类型转换到\\\"小取值范围\\\"的数据类型。\\\"大变小\\\"的强制类型转换极易造成数据溢出导致数据失真，除非特别有必要，一般情况下不要做强制类型转换。\",\"正是因为强制类型转换比较危险，所以编译器不会自动完成类型转换，而是需要程序员手动写代码完成类型转换。\",\"强制类型转换的语法是：\",\"// 做强转要慎重考虑再进行 目标数据类型 变量名 = (目标数据类型)(被转换变量的变量名); \"]},\"340\":{\"h\":\"表达式类型提升\",\"t\":[\"如果表达式当中存在多种数据类型 变量 参与运算，由于表达式的运算结果是唯一的，所以结果 变量 的数据类型将会提升到\\\"最大取值范围\\\"的那个。有以下规则：\",\"byte、short、char之间不互相转换，一旦发生运算，一律自动转换为int进行运算，结果是int\",\"byte、short、char任何数据类型与int进行计算，一律自动转换为int进行计算，结果是int\",\"byte、short、char、int任何数据类型与long进行计算，一律自动转换为long进行计算，结果是long\",\"byte、short、char、int、long任何数据类型与float进行计算，一律自动转换为float进行计算，结果是float\",\"byte、short、char、int、long、float任何数据类型与double进行计算，一律自动转换为double进行计算，结果是double\",\"注：char类型比较特殊，在参与数值类型的计算时，是编码值参与了运算。比如：\",\"char c = 'a'; \",\"如果上述变量c参与数值运算，那么就是编码值97参与运算！\",\"特殊的：\",\"String作为字符串类型，也可以使用\\\" + \\\"在表达式中参与运算，称之为\\\"字符串的拼接\\\"。 \",\"最后，还是要强调一下：\",\"只要表达式中存在任一变量，那么表达式的最终结果数据类型就遵循\\\"表达式的类型提升\\\"。\",\"Demo\",\"System.out.println('a'); System.out.println('a' + 1); System.out.println(\\\"hello\\\" + 'a' + 1); System.out.println('a' + 1 + \\\"hello\\\"); System.out.println(\\\"5 + 5 = \\\" + 5 + 5); System.out.println(5 + 5 + \\\" = 5 + 5\\\"); System.out.println(5 + 5.0); System.out.println(5 + \\\"5\\\" + 5.0); \"]},\"341\":{\"h\":\"小结\",\"t\":[\"基本数据类型的类型转换，可以总结出以下规律：\",\"八种基本数据类型中，只有boolean类型不能进行类型转换，其他七种都可以互相转换（自动或强制）。\",\"多种数据类型混合在一起进行运算，先全部提升为\\\"最大取值范围\\\"的数据类型，再进行计算。\",\"\\\"小取值范围\\\"--->\\\"大取值范围\\\"称之为自动类型转换，不需要写代码处理，排序是：byte < short（char） < int < long < float < double~\",\"\\\"大取值范围\\\"--->\\\"小取值范围\\\"称之为强制类型转换，必须要显式写代码处理，否则会编译报错，语法是：\",\"目标数据类型 变量名 = (目标数据类型)(被转换变量的变量名); \",\"强制类型转换很容易导致数据失真，谨慎使用。\",\"除了基本数据类型外，引用数据类型也能够发生类型转换，但是条件会苛刻的多，出错的后果也会更严重，这个我们面向对象再详谈。\",\"Demo：\",\"下列语句中，哪句会编译失败，为什么？\",\"byte b1 = 1, b2 = 2, b; b = b1 + b2; char c = b1 + b2; // 一共11个1 long d = 11111111111; \",\"下列代码能够执行吗？如果不能，如何改正？\",\" byte b = 130; \"]},\"342\":{\"h\":\"整数常量的特殊性\",\"t\":[\"Demo：\",\"byte b = 1 + 2; int a = 1; byte b2 = a + 2; \",\"同样是用byte类型接收的值，为什么一个能够运行，一个不能？\",\"并且我们上面提过：整数的字面值常量默认作为int类型使用，为什么byte a = 1 + 2这种语句能够运行呢？\",\"通过这个现象，我们其实可以发现编译器是很**\\\"聪明\\\"**的：\",\"对于整数字面值常量（包括常量的运算）而言，因为它的值一定不会发生变化，而且整型数据值的位数十分容易判断，所以编译器能够自动判断整型常量是否在接收数据类型的范围内。\",\"体现在语法上就是：将一个整型字面值（包括常量的运算）赋值给整型时，如果该常量在整型数据类型的取值范围内，是可以赋值成功的。\",\"例如：\",\"byte a = 100; short b = 30000; byte c = 1 + 120; \",\"都是合法的，反之如果本来就不在取值范围内，强行赋值会编译报错。\",\"例如：\",\"byte a = 128; short b = 30000 + 10000; \",\"上述说的现象都是针对，整型字面值常量，而：\",\"小数字面值常量不具有这种特点。因为浮点数本身就是一种近似表示方法，用double和float分别表示0.1完全是两个数，类似下列行为都是不能通过编译的：\",\"// 编译错误 float f = 0.1; // 编译错误 float f2 = 0.1 + 0.2; \",\"学习目标:\",\"掌握使用算术运算符\",\"掌握使用赋值运算符\",\"掌握使用逻辑运算符\",\"掌握使用三目运算符\",\"很容易想到的运算符比如\\\"加+ 减- 乘* 除/\\\"四种运算符，不难发现：运算符起着连接变量的作用，表示对变量的运算规则。\",\"其中：\",\"被运算符连接起来的变量称之为操作数，整个运算符和变量组成的式子称之为表达式，表达式通过运算符连接操作数, 表达式一般都是有(结果)值的.\",\"补充：\",\"语句:\",\"语句是一个行为, 负责执行某种操作, 一般没有结果, 以分号结尾. 程序就是通过语句来执行功能的, 诸如声明语句, 输出语句, 控制语句, 赋值语句等.\",\"表达式（expression） vs 语句（statement）\",\"表达式一般都有确定的结果（值），不能构成一条能单独执行的代码（往往不能以分号结尾）\",\"语句都是可以单独执行代码，以分号结尾，多数语句没有结果。\",\"两者的联系: 很多语句需要用到值, 即需要表达式的结果, 比如while（）的括号中需要一个值来告诉它循环是否结束且我们一般都会用表达式\"]},\"343\":{\"h\":\"运算符分类\",\"t\":[\"Java中的运算符分类:\",\"算数运算符\",\"赋值运算符\",\"比较运算符\",\"逻辑运算符\",\"位运算符(了解)\",\"三目运算符\"]},\"344\":{\"h\":\"算术运算符\",\"t\":[\"算术运算符（arithmetic）指最常见的一些数学运算符，它们在Java中的作用和在数学中的作用基本是一样的。\",\"对于int a = 10 和 int b =20，有如下算术运算符和相关的例子：\",\"操作符\",\"描述\",\"例子\",\"+\",\"加法：相加运算符两侧的值，得到和\",\"a+b=30\",\"-\",\"减法：左操作数减去右操作数，得到差\",\"a-b=-10\",\"*\",\"乘法：相乘操作符两侧的值，得到积\",\"a*b=200\",\"/\",\"除法：左操作数除以右操作数，得到商\",\"a/b=0\",\"％\",\"取余（取模）：左操作数除以右操作数，得到余数\",\"a%b=10\",\"++\",\"自增：操作数的值增加1\",\"a++一次是11\",\"--\",\"自减：操作数的值减少1\",\"a--一次是9\",\"注意事项：\",\"\\\"%\\\"不是数学当中的百分号，而是取余（模）运算符，表示左边除以右边，结果是它们的余数。\",\"\\\"/\\\"即数学当中的除法，表示左边除以右边得到商。\",\"需要注意的是，整型除以整型结果仍然是整型，得不到小数。 这和表达式的类型提升有关。\",\"自增（++）/自减（--）的特点：\",\"自加自减都是一元运算符，并且仅用于连接变量，常量无法用自增自减运算符连接。\",\"变量和自增自减符号，单独构成一个表达式后又参与了运算或者输出语句时。自增自减符号和操作数的位置就至关重要了： \",\"自增自减符号在变量前面，变量先自增自减，再参与后续运算或者赋值\",\"自增自减符号在变量后面，变量先参与运算或者赋值，再自增自减。\",\"自增自减在日常开发更多还是配合for循环单独使用，尽量不要将自增自减组成的表达式放在其它表达式中，可读性很差。\",\"Demo:\",\"求a,b,c的值\",\"int a = 10; int b = 10; int c = 10; a = b++; c = --a; b = ++a; a = c--; \",\"求x,y的值\",\"int x = 4; int y = (x++) + (++x) + (x*10); \"]},\"345\":{\"h\":\"赋值运算符\",\"t\":[\"赋值（assignment）运算符指为变量指定新值完成赋值作用的运算符，赋值运算符需要连接两个操作数，是典型的二元运算符。赋值运算符可以分为两类：\",\"基本的赋值运算符，即\\\" = \\\"等号。\",\"基于等号扩展而来的扩展赋值运算符，比如：\\\" += \\\"，\\\" -= \\\"，\\\" *= \\\"等。\",\"不管是什么赋值运算符，赋值运算符总是把右边的操作数（或计算后的结果）赋值给左边，运算方向从右向左。既然是赋值，左边必须是一个变量来接收这个值。\",\"对于两个操作数a和b，有如下赋值运算符和使用案例：\",\"操作符\",\"描述\",\"例子\",\"+=\",\"加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数\",\"a + = b等价于a = a + b\",\"-=\",\"减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数\",\"a - = b等价于a = a - b\",\"*=\",\"乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数\",\"a * = b等价于a = a * b\",\"/=\",\"除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数\",\"a / = b等价于a = a / b\",\"％=\",\"取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数\",\"a％= b等价于a = a％b\",\"<<=\",\"左移位赋值运算符\",\"a << = 2等价于a = a << 2\",\">>=\",\"右移位赋值运算符\",\"b >> = 2等价于b = b >> 2\",\"＆=\",\"按位与赋值运算符\",\"a＆= 2等价于a = a＆2\",\"^=\",\"按位异或赋值操作符\",\"a ^ = 2等价于a = a ^ 2\",\"|=\",\"按位或赋值操作符\",\"b | = 2等价于b = b | 2\",\"扩展的赋值运算符隐含强制类型转换，无需再写强制类型转换的语法。例如下列代码就是合法的：\",\"// 正常情况下short + 1结果是int类型 short s1 = 1; s1 += 1; \",\"当然即便是强制隐含的强转，仍然属于强转，仍然会存在数据失真的问题。\"]},\"346\":{\"h\":\"比较运算符\",\"t\":[\"比较（comparison）运算符指的是用来判断两个变量（或常量）大小的运算符。显然既然是比较，自然需要两个操作数，比较运算符是典型的二元运算符。比较的结果，也就是比较运算符组成的表达式（也叫布尔表达式）的结果必然是一个布尔值，也就是true或者false。\",\"对于两个操作数 int a = 10，int b = 20，有以下表格：\",\"运算符\",\"描述\",\"例子\",\"==\",\"检查如果两个操作数的值是否相等，如果相等则条件为真。\",\"（a == b）为假。\",\"!=\",\"检查如果两个操作数的值是否相等，如果值不相等则条件为真。\",\"(a != b) 为真。\",\">\",\"检查左操作数的值是否大于右操作数的值，如果是那么条件为真。\",\"（a > b）为假。\",\"<\",\"检查左操作数的值是否小于右操作数的值，如果是那么条件为真。\",\"（a < b）为真。\",\">=\",\"检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。\",\"（a >= b）为假。\",\"<=\",\"检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。\",\"（a <= b）为真。\",\"使用细节和注意事项：\",\"在比较时，基本数据类型和基本数据类型比，引用数据类型和引用数据类型比。其中\",\"基本数据类型的数值类型的比较，上述运算符都是可用的。但布尔类型仅适用于\\\"==\\\"或者\\\" != \\\"的比较。\",\"引用数据类型的变量比较只能使用\\\" == \\\"和\\\" != \\\"，而且不是任意两个引用数据类型变量都能够比较。\",\"注：这一条随着知识点的学习，会不断加深理解，大家可以自行测试一下。\",\"基本数据类型的数值类型和char是可以相互比较的，boolean只能自己和自己比较。引用数据类型的比较，只能相同类型之间比较，比如String和String比较，String和System就没有可比性。\",\"两个浮点数的比较不建议直接使用比较运算符(有一些特殊值)，还有诸如引用数据类型的比较等知识点，我们等到日后再谈。（面向对象讲）\"]},\"347\":{\"h\":\"逻辑运算符\",\"t\":[\"逻辑（logical）运算符指的是专门连接布尔类型变量、常量进行运算的运算符。 当然逻辑运算表达式的结果也一定是boolean类型。\",\"对于 boolean a = true; boolean b = false 有以下案例：\",\"操作符\",\"描述\",\"例子\",\"&\",\"称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。\",\"（a & b）为假\",\"|\",\"称为逻辑或运算符。如果任何两个操作数任何一个为真，条件为真。\",\"(a | b)为真\",\"^\",\"成为逻辑异或运算符。相同时为false，不同时为true\",\"(a ^ b) 为真\",\"&&\",\"称为短路与逻辑运算符。当且仅当两个操作数都为真，条件才为真。\",\"（A && B）为假\",\"||\",\"称为短路或逻辑运算符。如果任何两个操作数任何一个为真，条件为真。\",\"（A | | B）为真\",\"!\",\"称为逻辑非运算符，用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。\",\"!(A && B)为真\",\"逻辑与和逻辑或有短路与非短路两种类型，那么短路与不短路有啥区别呢？\",\"其实非常简单，对于逻辑或来说，一旦左边的操作数的结果确定是true，那么整个表达式的结果一定是true，右边实际上是不需要再进行计算的；同理逻辑与也是意义，一旦左边的操作数确定是false，那么右边无论是什么结果都是false。\",\"短路就是依据这种原理，若左边的操作数已经能够决定表达式的值了，后面就都不算了。短路逻辑运算符的计算结果不变，但是执行效率变高了。所以建议：大家在使用逻辑与或时，一律使用短路版本。 在有些书籍里，甚至已经不把 & 和 | 列入逻辑运算符中，而是直接列为位运算符。\",\"在实际开发中，&& 、|| 、! 最常用。\"]},\"348\":{\"h\":\"位运算符(了解)\",\"t\":[\"位（shift）运算符，全称\\\"移位运算符\\\"，是直接对整数的二进制位进行计算的运算符（专门针对数字0，1进行操作的）。由于能够直接对位，进行移位运算操作，所以位运算符的最大优点是运算效率高，缺点是对人来说不够直观。位运算符仅做了解，不作为重点。\",\"对于int a = 60 和 int b = 13有以下案例：\",\"操作符\",\"描述\",\"例子\",\"＆\",\"按位与，如果相对应位都是1，则结果为1，否则为0\",\"（a＆b），得到12，即0000 1100\",\"|\",\"按位或，如果相对应位都是0，则结果为0，否则为1\",\"（a | b）得到61，即 0011 1101\",\"^\",\"异或，如果相对应位值相同，则结果为0，否则为1\",\"（a ^ b）得到49，即 0011 0001\",\"〜\",\"按位取反运算符翻转操作数的每一位，即0变成1，1变成0。\",\"（〜a）得到-61，即1100 0011\",\"<<\",\"按位左移运算符。左操作数按位左移右操作数指定的位数。在一定范围内，每左移一位，相当于乘以2\",\"a << 2得到240，即 1111 0000\",\">>\",\"按位右移运算符。左操作数按位右移右操作数指定的位数。在一定范围内，每右移一位，相当于除以2\",\"a >> 2得到15即 1111\",\">>>\",\"按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。\",\"a>>>2得到15即0000 1111\",\"简要说一说运算规则：\",\"<< 和 >> 的实质\",\"<< 左移就是把左边移出去的高位截断，在低位补数，无论原先的数是正是负，空位都补0。在一定范围内，M << n 可以这么算 M << n = M * 2^n，即左移几位就表示乘以几个2。但是一旦超出范围，甚至可能把正数左移成负数。\",\">> 右移就是把右边移出去的低位截断，在高位补数，正数补0，负数补1。在一定范围内，M >> n 可以这么算 M >> n = M / 2^n，即右移几位就表示除以几个2。右移虽然不会改变正负，但是一旦出现小数会丢失小数位。\",\">> 和>>> 的区别\",\">> 是有符号右移，在高位补数时，正数补0，负数补1。\",\">>> 是无符号右移动的时候，无论是正数负数，最高位是0还是1，被移除的低位丢弃，右移后最高位空缺位补0。\",\"&、| 、^（与、或、异或）位运算符\",\"~取反位运算符\",\"^异或位运算符\",\"小tips：\",\"在计算机中普遍使用^表示幂运算，但在Java中它是一个位运算符。那么在Java中该怎么求一个数的次幂呢？\",\"使用以下代码：\",\"Math.pow(double a, double b) \",\"一个经典的问题：怎么算 2*16 最高效？\"]},\"349\":{\"h\":\"三目运算符\",\"t\":[\"三目（ternary）运算符，也被称之为三元运算符，即指的是需要三个操作数的运算符。\",\"它的语法是：\",\"(条件表达式) ? 表达式1 : 表达式2; \",\"它具有以下特点：\",\"当条件表达式为true时，执行表达式1，否则执行表达式2。\",\"三目运算符的最大特点就是，它一定会执行一个表达式， 所以它一定会有一个结果。\",\"何时比较适合使用三目运算符呢？\",\"if...else从使用效果上来说，是可以完全替代三目运算符的。但是使用三目运算符，代码更加简洁、更加优雅并且逻辑更加直观，实测三目运算符的运算效率要比if稍微高一点。所以，如果能够使用三目运算符尽量使用它，而不是if。\",\"但是也要注意，不要使用过于复杂的三目运算符，否则会导致程序可读性变差。比如下列代码：\",\"// 求三个数的最大值 int max = (a > b) ? (a > c) ? a : c : (b > c) ? b : c; boolean b = true ? false : true == true ? false : true; \",\"我相信你不会愿意看到这种代码吧。\"]},\"350\":{\"h\":\"运算符的优先级\",\"t\":[\"运算符有不同的优先级，所谓优先级就是在表达式运算中的运算顺序。运算符的优先级决定了谁先进行运算，是既重要也不重要的知识点：\",\"重要在于，运算符的优先级对表达式结果有显著影响。如果不知道运算优先级，一个表达式你肯定看不懂。\",\"不重要的地方在于可以使用小括号\\\"()\\\"主动控制优先级。\",\"简单了解一下，Java运算优先级的大体规则：\",\"所有的数学运算都认为是是从左向右的，Java语言中大部分运算符也是从左向右结合的。\",\"但是单目运算符，赋值运算符，三目运算符不符合1中的规律 \",\"其中单目运算符，赋值运算符是从右向左结合，也就是从右向左运算的。\",\"三目运算符实际上是一种选择结构，是一种特殊的运算。\",\"下表中列出了运算符的优先级顺序，编号越小的运算符优先级越大。\",\"编号\",\"类别\",\"操作符\",\"计算顺序\",\"0\",\"后缀\",\"() [] . (点操作符)\",\"左到右\",\"1\",\"一元\",\"+ + - ！〜\",\"从右到左\",\"2\",\"乘性\",\"* /％\",\"左到右\",\"3\",\"加性\",\"+ -\",\"左到右\",\"4\",\"移位\",\">> >>> <<\",\"左到右\",\"5\",\"关系\",\">> = << =\",\"左到右\",\"6\",\"相等\",\"== !=\",\"左到右\",\"7\",\"按位与\",\"＆\",\"左到右\",\"8\",\"按位异或\",\"^\",\"左到右\",\"9\",\"按位或\",\"|\",\"左到右\",\"10\",\"逻辑与\",\"&&\",\"左到右\",\"12\",\"逻辑或\",\"| |\",\"左到右\",\"13\",\"条件\",\"？：\",\"从右到左\",\"14\",\"赋值\",\"= + = - = * = / =％= >> = << =＆= ^ = | =\",\"从右到左\",\"15\",\"逗号\",\"，\",\"左到右\",\"虽然我们无需具体记忆这些优先级，但是仍然需要记住—— 赋值运算符的优先级往往最低。\"]},\"351\":{\"h\":\"概述\",\"t\":[\"目前在写Java程序的时候，数据都是写死和固定的，有时为了让程序更具有灵活性，就需要灵活的输入数据。\",\"Scanner的作用就是，灵活的从键盘接收数据输入。\",\"但实际开发中的数据，更多是自于前端页面（用户输入，上传等），所以总体而言Scanner对于Web开发并没有太大的实际作用，了解即可。\",\"但是在JavaSE的学习阶段，我们没有前端和各种界面的输入信息，在单机的情况下，使用Scanner键盘录入是很不错的选择，可以提高程序的灵活性。\",\"并且在某些测试的场景中，Scanner键盘录入也有一定的用途，所以Scanner也有必要学习了解一下。\"]},\"352\":{\"h\":\"使用步骤\",\"t\":[\"那么Scanner键盘录入到底应该怎么用呢？\",\"大体上可以分为三步走：\",\"导包 （IDEA有自动导包功能，但是不要认为没有这一步）\",\"import java.util.Scanner; \",\"创建对象\",\"Scanner sc = new Scanner(System.in); \",\"接收从键盘录入的数据\",\"int x = sc.nextInt(); \",\"注意事项：\",\"目前阶段，记住步骤会使用就行。以后再来具体分析每步在做什么。\",\"一般为了方便使用，应该加上提示键盘输入的输出语句。\",\"参考以下代码案例：\",\"键盘录入int数据\",\"Scanner sc = new Scanner(System.in); // 键盘接收int数据 System.out.println(\\\"请输入一个int数据:\\\"); int num = sc.nextInt(); \",\"使用Scanner在单独录入数据时，可以选择不同的方法，例如：\",\"键盘录入String字符串，可以选择使用nextLine方法。\",\"键盘录入int数值，可以选择使用nextInt方法。\",\"键盘录入double数值，可以选择使用nextDouble方法。\",\"....\",\"使用Scanner在需要录入多种数据类型时，建议不要混用以上方法。比如：\",\"使用Scanner不同方法录入多种数据\",\"int num = sc.nextInt(); String str = sc.nextLine(); \",\"这种写法实际上是错误的！\",\"推荐在有混合录入多种数据的需求时，永远使用nextLine方法，然后将字符串转换成各种需要的数据类型！\",\"参考以下代码：\",\"统一使用nextLine方法\",\"Scanner sc = new Scanner(System.in); System.out.println(\\\"请键盘录入一个int整数:\\\"); String numStr = sc.nextLine(); // 百度查找将String转换成int的方法 int num = Integer.parseInt(numStr); System.out.println(\\\"请键盘录入一个字符串:\\\"); String str = sc.nextLine(); System.out.println(num); System.out.println(str); \",\"当然，如果你对上述用法有疑惑，可以继续往下看学习其中的原因。\",\"但Scanner本身就是一个了解内容，知不知道原因是无所谓的！\"]},\"353\":{\"h\":\"原因\",\"t\":[\"Scanner的使用问题，next()、nextInt()等一系列方法和nextLine()的区别：\",\"next()、nextInt()等一系列方法\",\"next()之类的一系列方法遇见第一个有效字符（非空格，非换行符，非制表符）时，开始扫描\",\"当遇见第一个分隔符或结束符(空格、换行符或者制表符)时，结束扫描，获取扫描到的内容\",\"即获得第一个扫描到的不含空格、换行符的单个字符串\",\"nextLine()方法\",\"从方法名上就可以看出来，这个方法是获取一行的内容作为一个字符串被接收\",\"该方法不会因为空格或制表符号而结束扫描\",\"只会因为回车（换行）而结束扫描\",\"由于nextLine()方法碰到换行才结束扫描的特性，所以使用有如下问题：\",\"当使用Scanner接收数值类型后又使用nextLine()方法接收字符串时，例如以下代码：\",\"混用两种Scanner方法\",\"Scanner sc = new Scanner(System.in); sc.nextInt(); sc.nextLine(); \",\"输入数值后回车，会导致程序并不会等待并接收一个字符串，而是直接结束键盘录入。究其原因在于，nextLine()方法碰到回车就结束扫描，所以该方法此时接收的实际上是一个（绝对）空字符串。\",\"解决的办法有很多种：\",\"可以使用不同的Scanner对象接收，这样肯定不存在冲突问题\",\"在接收int数据的后面加一个不接收数据的nextLine用来接收回车\",\"可以统一用字符串接收数值类型，接收完毕后再进行类型转换。\",\"例如转换成int类型（传入一个字符串，转换成int接收即可）\",\"Integer.parseInt()\"]},\"354\":{\"h\":\"练习\",\"t\":[\"模拟登陆功能\",\"用户名(String):admin\",\"密码(String): 123456\",\"使用scanner进行输入, 匹配成功提示登陆成功, 否则登陆失败\",\"猜数字小游戏\",\"随机生成一个随机数(0-100), 使用scanner能多次接收一个int数据, 跟随机数进行比较, 大于或者小于要求给出提示, 重新输入, 直到跟这个随机数相等, 结束.\",\"学习目标:\",\"掌握常见的几个转义字符\",\"\\\\b \\\\n \\\\r \\\\t \\\\\\\\ \\\\' \\\\\\\"\"]},\"355\":{\"h\":\"概述\",\"t\":[\"什么是转义字符？\",\"所谓转义字符，就是用反斜杠（\\\\）加上一个特殊的字符串用来表示一个全新的字符。\",\"因为这个字符已经和原先字符串的意思大不相同，所以整体称之为转义字符。\",\"转义字符的作用是什么？\",\"实际上转义字符可以表示任何一个普通字符，但是普通的字符直接书写给出即可，使用转义字符意义不大。\",\"转移字符最重要的用途是，表示那些无法用键盘直接输入的控制字符。比如在ASCII码表中，那些换行，翻页等等字符。\"]},\"356\":{\"h\":\"常见的转义字符\",\"t\":[\"转义字符\",\"用途\",\"ASCII码值（十进制）\",\"\\\\b\",\"退格(BS) ，将当前位置移到前一列\",\"008\",\"\\\\n\",\"换行(LF) ，将当前位置移到下一行开头\",\"010\",\"\\\\r\",\"回车(CR) ，将当前位置移到本行开头\",\"013\",\"\\\\t\",\"水平制表(HT) （跳到下一个TAB位置）\",\"009\",\"\\\\\\\\\",\"两个反斜杠表示一个反斜杠\",\"092\",\"\\\\'\",\"代表一个单引号（撇号）字符\",\"039\",\"\\\\\\\"\",\"代表一个双引号字符\",\"034\",\"\\\\u0000\",\"空字符，什么都没有\",\"000\",\"表格使用说明：\",\"反斜杠（\\\\）和斜杠（/）不要混淆了：\",\"反斜杠（\\\\）是计算机出现了之后发明的计算机领域专用符号，生活中几乎不会使用反斜杠。\",\"正斜杠在日常生活中使用，表示间隔/或者/分隔的意思。比如时间的分隔，一定是2022/01/01，不可能用反斜杠。除此之外，正斜杠在计算机中还表示除号。\",\"System.out.println(\\\"aaabbbc\\\\b\\\"); System.out.println(\\\"aaa\\\\nbbbc\\\"); System.out.println(\\\"aaa\\\\tbbb\\\"); System.out.println(\\\"aaa\\\\\\\\bbb\\\"); System.out.println(\\\"aaa\\\\'bbb\\\"); \",\"学习目标:\",\"掌握顺序结构,选择结构,循环结构的使用\",\"掌握跳转关键字break，continue，return使用\",\"Java的流程控制结构主要有三种：\",\"顺序结构\",\"选择结构\",\"循环结构\",\"其中，\",\"对于顺序结构而言，写在前面的代码先执行，写在后面的代码后执行，像下图一样执行。\",\"image-20230511212815174\"]},\"357\":{\"h\":\"选择结构\",\"t\":[\"Java中提供了选择结构，来帮助我们实现这种 \\\"如果...就\\\" 的逻辑。\",\"选择结构的具体实现有两种：\",\"if语句\",\"switch语句\",\"当然，if是最常见和常用的，Java程序员的日常是离不开if关键字的，switch的使用非常少见，但也需要掌握它的语法，知道使用的场景。\"]},\"358\":{\"h\":\"if语句\",\"t\":[\"总体说明：\",\"无论是什么if结构，都跑不了的结构：if (condition)\",\"括号中的条件，必须是一个布尔表达式（表达式结果必须是布尔值）或者就是一个布尔值（true或者false）\",\"单分支if\",\"if (condition){ // statement } \",\"执行流程：\",\"当if判断的条件，结果是true时，执行statement语句。\",\"当if判断的条件，结果是false时，不执行statement语句。\",\"image-20220815091520238\",\"双分支if\",\"所谓双分支if结构，指的是用代码实现\\\"如果...就..否则就...\\\"的逻辑。\",\"if(condition){ // statement1 }else{ // statement2 } \",\"执行流程：\",\"当if判断的条件，结果是true时，执行statement1中的语句。\",\"当if判断的条件，结果是false时，执行statement2中的语句。\",\"image-20220815091532345\",\"多分支if\",\"所谓多分支if结构，指的是用代码实现\\\"如果...就..否则如果...就...否则...\\\"的逻辑。\",\"if(condition1){ // statement1 } else if (condition2){ // statement2 } .... else { // statement } \",\"执行流程：\",\"从上到下匹配，哪个condition结果是true，就执行哪个statement。\",\"如果每个condition都不满足，执行最后的else中的语句。\",\"image-20220815093129208\",\"if多分支使用注意事项：\",\"多分支的if语句，要么执行一个分支condition，要么就执行else，不可能执行多个分支。\",\"condition之间的关系： \",\"如果多个条件之间是互斥关系，那么谁在前，谁在后，没什么影响。\",\"如果多个条件之间是包含关系，被包含的条件如果放在了下面，就永远不能生效了。\",\"else后面不能再加分支了，必须放在最后面。\",\"两道基础语法练习题：\",\"键盘录入x的值，计算出y的并输出。\",\"其中x和y的关系满足如下：\",\"x>=3时，y = 2x + 1;\",\"-1<=x<3时， y = 2x;\",\"x<=-1时， y = 2x – 1;\",\"键盘录入月份的值，输出对应的季节。\"]},\"359\":{\"h\":\"switch语句\",\"t\":[\"语法：\",\" switch(expression){ case value1: statement1; break; case value2: statement2; break; ... default: statement; break; } \",\"逐个解释语法：\",\"expression：表示选择的条件或者依据，可以允许的数据类型有：\",\"byte\",\"short\",\"int\",\"char\",\"尤其注意，布尔类型boolean是不允许写在switch选择中的！\",\"case：表示一个选择分支，case（和多分支if结构不同的是，这些case是绝对互斥平行的）\",\"value：表示一个选择分支的取值，它的数据类型，要和expression保持一致\",\"statement：表示该分支要执行的代码\",\"无需加大括号，因为有break关键字限制，一个case分支所能执行的语句范围。\",\"break：本身是一个关键字\",\"表示结束整个switch语句，用来限制一个case分支，执行代码的范围。\",\"default：相当于多分支if结构中的，最后一个else\",\"当所有的case都不匹配的时候，执行default中的statement。\",\"switch的执行流程：\",\"首先计算出表达式的值。\",\"然后从上到下，依次比较case的取值\",\"一旦某个case取值匹配上，就会执行其中的语句，直到碰到break\",\"最后，如果所有的case都无法匹配，会执行default中的语句\",\"image-20220815093843871\",\"注意事项：\",\"和多分支if结构中的最后一个else一样，default也不是必须的，但是普遍来说，应该加上用来保证switch能够执行。\",\"和多分支if结构中的最后一个else不同的是，由于分支之间绝对平行，default不一定放在最后。\",\"case穿越问题： \",\"正常情况下，每一个case都应该有一个break，用来限制case中statement的执行范围\",\"当省略掉某个case中的break后，statement就会按照顺序一直被执行\",\"这个时候statement的执行不仅限于自身case了，这个过程会持续到switch结束或者碰到一个break\",\"灵活使用case穿越可以简化代码，比如月份和季节的案例\",\"读程序，判断输出结果：\",\"// main int x = 2; int y = 3; switch(x){ default: y++; break; case 3: y++; case 4: y++; } System.out.println(\\\"y=\\\"+y); \",\"// main int x = 2; int y = 3; switch(x){ default: y++; case 3: y++; case 4: y++; } System.out.println(\\\"y=\\\"+y); \"]},\"360\":{\"h\":\"怎么选择if和switch\",\"t\":[\"选择结构有两种实现方式，if 和 switch：\",\"if的使用场景 \",\"针对结果是布尔类型的判断。\",\"多分支if结构，可以使用多个判断条件。\",\"if的判断条件可以是一个连续的取值范围\",\"switch的使用场景 \",\"针对结果是固定类型、固定值的判断，尤其注意不能是boolean类型。\",\"switch始终只能对一个条件进行选择\",\"这是switch和if最本质的区别。\",\"如果碰到if和switch都可以的情况，建议选择if，因为if语法简单不容易出错。而如果是针对离散值的判断，那就选择switch，因为它更加就简洁。实际开发中，99%以上的情况都在使用if而不是switch。\"]},\"361\":{\"h\":\"循环结构\",\"t\":[\"循环结构主要包括三种实现方式：\",\"for循环\",\"while循环\",\"do...while循环\",\"其中，for循环是最基础，也是使用最多的循环。\",\"Java当中的循环结构，无论是for、while还是do...while，其结构都由五部分部分组成：\",\"循环控制变量\",\"初始化语句\",\"条件判断语句（布尔表达式）\",\"循环体语句\",\"循环控制语句\",\"逐个解释用途：\",\"所谓循环控制变量，是指为了控制循环进程而定义的变量。也就是说，如果你希望循环能够终止，那么循环控制变量是必须的。\",\"初始化语句，用于给循环控制变量初始化，最大特征是只会执行一次。\",\"条件判断语句，根据循环控制变量写布尔表达式，用于判断循环是否进行，结果只有两种，true或者false。 \",\"结果为true，循环继续，执行循环体语句。\",\"结果为false，循环终止，结束循环。\",\"循环体语句，自然是循环结构中要重复执行的代码。\",\"循环控制语句，用于改变循环控制变量的值，进而改变循环的状态，使循环终止。如果没有循环控制语句，循环不能终止，将变成死循环。\"]},\"362\":{\"h\":\"for循环\",\"t\":[\"语法：\",\"for(初始化语句 ; 条件判断语句; 循环控制语句) { // 循环体语句 } \",\"执行初始化语句，初始化循环控制变量，该语句只会执行一次。\",\"执行布尔表达式进行条件判断，如果结果是： \",\"true，执行一次循环体语句。\",\"false，循环终止。\",\"执行一次循环控制语句，改变循环控制变量的值，用于改变循环的状态。\",\"再次执行布尔表达式进行条件判断，开始循环。直到布尔表达式的结果是false，循环终止。\",\"几个使用的注意事项：\",\"条件判断语句的结果是一个布尔类型的值，习惯上使用i，j，k三个作为循环控制变量的变量名。\",\"循环体语句如果是一条语句，和if一样也可以省略大括号。语法允许，但实际开发中不要采取这种做法。\",\"for循环内部定义的变量，包括初始化语句中的循环变量和循环体语句内部定义的变量，都是局部变量，其作用范围仅在for循环内部。\",\"在for循环中，初始化语句，布尔表达式，循环控制语句都不是必须的，但两个分号是必须的。\",\"for循环的变形体主要有以下形式：\",\"初始化语句省略后，循环控制变量仍要初始化，但肯定要放在for循环的语句上面。这样格式就变成：\",\"初始化语句; for( ; 条件判断语句(布尔表达式); 循环控制语句) { // 循环体语句 } \",\"条件判断语句省略后，循环就没有终止条件了，这样的一个for循环就变成了死循环。\",\"循环控制语句省略后，循环虽然有终止条件，但是循环控制变量的值却不会发生变化了，仍然会死循环。这时如果不想死循环，可以将循环控制语句，放在循环体语句中，如下：\",\"for(初始化语句 ; 条件判断语句(布尔表达式); ) { // 循环体语句 // 循环控制语句 } \",\"for(;;){ // 循环体语句 } \",\"如无绝对必要，请使用标准格式for循环。\",\"练习：\",\"用for循环计算1+2+3+...+100\",\"用for循环求出1-100之间偶数和\",\"用for循环求5的阶乘\"]},\"363\":{\"h\":\"while循环\",\"t\":[\"语法：\",\"初始化语句; while(条件判断语句){ 循环体语句; (循环控制语句) } \",\"while循环看起来语法和for循环不同，但本质是一样的。一个能够终止的标准形式while循环，同样具有for循环具有的5个部分，只不过位置和for循环相比发生了变化而已。所以，我们要记住的是： \",\"练习：\",\"珠峰的高度是8848m，假设有一张足够大可折叠的纸张，初始厚度是0.01m。\",\"求解这张纸折叠多少次，纸张的厚度开始超过珠峰？\"]},\"364\":{\"h\":\"do while循环\",\"t\":[\"语法：\",\"初始化语句; do{ 循环体语句; (循环控制语句) } while(条件判断语句) \",\"执行流程：**\",\"执行初始化语句，初始化循环控制变量，该语句只会执行一次。\",\"执行一次循环控制语句，改变循环控制变量的值，用于改变循环的状态。\",\"执行布尔表达式进行条件判断，如果结果是： \",\"true，再次执行一次循环体语句。\",\"false，循环终止。\",\"再次执行布尔表达式进行条件判断，开始循环。直到布尔表达式的结果是false，循环终止。\",\"条件判断语句后面的分号不能省略，否则会报错。\",\"do...while循环的循环控制语句，往往和循环体语句放在一起\",\"do...while循环的语义、执行流程都和while循环类似，唯一不同的是： \",\"do...while中的循环体语句，在第一次执行的时候，不会经过条件判断语句。\",\"所以do...while中的循环体语句和循环控制语句，无论如何都至少要执行一次\"]},\"365\":{\"h\":\"两种特殊的循环\"},\"366\":{\"h\":\"死循环\",\"t\":[\"for(;;){ // 循环体 } while(true){ // 循环体 } \"]},\"367\":{\"h\":\"嵌套循序\",\"t\":[\"循环是可以嵌套定义的，但一般嵌套两层就足够了，三层及以上就会让循环变得难以理解，非常不建议这么做。\",\"接下来以最常见的双层嵌套for循环（multi-for）为案例，说明一下嵌套循环。\",\"例如下列代码：\",\"for (int i = 0; i < 4; i++) { for (int j = 1; j <= 6; j++) { System.out.print(\\\"#\\\"); } System.out.println(); } \",\"上述嵌套for意味着，外层for每执行一次，内层for就要执行6次。\",\"打印的结果就是：\"]},\"368\":{\"h\":\"\"},\"369\":{\"h\":\"\"},\"370\":{\"h\":\"\",\"t\":[\"即\\\"四行六列\\\"的井号排列。\",\"所以如果是用来打印图形的话，内层for控制列数，外层for控制行数。\",\"总结：\",\"嵌套循环极大的增加了代码的阅读难度，如果不是非常有必要，最好不要使用。即便是要使用，最好也不要超过两层。\",\"嵌套循环是很好的锻炼逻辑思维能力的知识点，如果你刚入行编程，可以多多练习。\",\"练习\",\"打印以下图案\"]},\"371\":{\"h\":\"\"},\"372\":{\"h\":\"\"},\"373\":{\"h\":\"\"},\"374\":{\"h\":\"\",\"t\":[\"打印九九乘法表\"]},\"375\":{\"h\":\"跳转控制关键字\",\"t\":[\"至此，我们已经学习完了所有的循环结构，可以控制Java当中的循环体代码重复执行，完成需求。\",\"但是仍然有一些问题：\",\"到目前为此，我们对循环的把控是改变循环的初始条件，一旦循环启动，直到循环结束，我们是不可控的，比如说：\",\"我希望循环到一半就结束\",\"触发某个条件，就结束循环\",\"中间某一次我希望跳过循环\",\"....\",\"以上需求完全是合理可能的，但是我们目前的知识实际上没有办法做到这一点。\",\"所以我们需要 来完成这些需求。\",\"对于循环控制关键字的使用，Java基本承袭了C/C++当中的用法，关键字包括：\",\"break\",\"continue\",\"return\"]},\"376\":{\"h\":\"break\",\"t\":[\"break意为\\\"打断，中断\\\"，是常用的循环控制关键字。\",\"使用场景及作用：\",\"break并不仅仅能用在循环中，它在switch中也可以使用，break就有了两个使用场景：\",\"switch语句中某个case分支，用于结束整个switch。\",\"循环语句中,表示结束当前循环(如有嵌套循环, 结束当前层次循环, 和外层没有关系)\",\"注意：除开上面两种语境不能使用break，会编译不通过\",\"标签\",\"那么如果我就有多层嵌套循环，需要结束外层循环呢？\",\"这时就需要使用标签（label）了，语法如下：\",\"label:for(){ label2:for(){ label3:for(){ //break label } } } \",\"使用注意事项：\",\"标签是用来标注某个层次的循环的，所以它应该加在for或者while关键字的头上\",\"标签名可以看成是一个变量名，建议小驼峰式书写。\",\"使用标签标注循环层次时，不要忘记\",\"当break后面跟标签表示结束标签层次循环时，无需加\\\" : \\\"冒号\"]},\"377\":{\"h\":\"continue\",\"t\":[\"continue意为\\\"继续，延续\\\"，也是常用的循环控制关键字。\",\"使用场景：\",\"continue不同于break，它只能在循环中使用，无法在循环外使用，如果使用，会编译不通过。\",\"作用：\",\"**continue在循环表示结束当前次的循环，转而继续执行后面的循环。**注意它不是结束整个循环，而是跳出当前层的当前次循环，进行当前层的下一次循环。如果有嵌套循环，同样可以使用标签，用法和break一致。\",\"练习：\",\"请在注释处补全代码，实现以下功能：\",\"控制台输出2次，\\\"我热爱学习Java\\\"\",\"控制台输出7次，\\\"我热爱学习Java\\\"\",\"控制台输出13次，\\\"我热爱Java\\\"\",\"for (int i = 1; i <= 10; i++) { if (i % 3 == 0) { //在此处填写代码 } System.out.println(\\\"我热爱学习Java\\\"); } \"]},\"378\":{\"h\":\"return\",\"t\":[\"return意为\\\"返回\\\"，它的使用频率要比上面两个更高，当然这是因为它不仅仅是循环控制关键字那么简单。\",\"使用场景\",\"return可以在一个方法的任何位置使用，而Java语句几乎都写在一个方法当中，所以return的使用场景极多。而循环一般也都在一个方法当中，所以循环中也能使用return。（比如main方法）\",\"作用\",\"return在Java当中表示直接结束当前方法，如果写在循环中，既然方法结束了，循环必然也终止了。特别需要注意的是，既然return已经将方法结束了，那么return后面是不能写任何语句的。\",\"除此之外，return还可以在方法中，表示方法的返回值（这是后面方法这一章节的知识）\",\"当然这时的return仍然具有结束方法的作用！\",\"练习\",\"在注释处分别填入break，continue，return，试着分析：\",\"程序的执行结果是什么呢？\",\"for (int i = 0; i < 5; i++) { if (i == 3) { System.out.println(\\\"我喜欢学习Java!\\\"); //在此处填写代码 } System.out.println(i); } System.out.println(\\\"我喜欢学习C++!\\\"); \"]},\"379\":{\"h\":\"03. 方法\",\"t\":[\"学习目标\",\"掌握方法的定义与使用\",\"掌握方法的重载\"]},\"380\":{\"h\":\"引入\",\"t\":[\"引例，现在有三个需求：\",\"编写程序，计算10+20，并输出结果\",\"编写程序，计算111+222，并输出结果\",\"编写程序，计算333+444，并输出结果\",\"请问这个程序有哪些缺点呢？\",\"很明显：\",\"这个程序中有大量的代码是重复的，是可以被复用的，是可以优化的。\",\"为了解决这个需求，我们就需要这种语法机制，这意味着方法（method）至少应该解决我们以下三个痛点：\",\"能够重复实现某种特定功能，解决同一类问题，而不需要重复写代码。\",\"每次实现这个功能时，可以传入不同的数据。\",\"传入数据实现功能后，能够得到不同的结果。\",\"核心需求就是，能复用代码，有输入和输出。\",\"这实际上就是方法的作用。与此同时，我们还把使用去实现某种特定功能的过程叫做方法的调用（invoke）。\",\"方法实际上是可以重复完成特定功能的代码块，本质是为了代码复用。\"]},\"381\":{\"h\":\"方法的基本使用\"},\"382\":{\"h\":\"方法的定义\",\"t\":[\"一般情况下，定义一个方法是以下语法结构：\",\"[修饰符列表] 返回值类型 方法名 (形式参数列表){ // 方法体 } \",\"在具体了解每个部分的语义之前，我们需要了解 两个非常重要的概念：\",\"方法的声明(方法头): [修饰符列表] 返回值类型 方法名 (形式参数列表)\",\"方法的签名: 方法名 (形式参数列表)\",\"接下来逐一解释语法的每个部分：\",\"修饰符列表：修饰符列表不是必须的，可以为空不写，现在默认为public static（具体含义面向对象讲）\",\"返回值类型：方法可能会有结果，这个结果就是返回值，返回值的数据类型称之为返回值类型 \",\"返回值类型可以是基本数据类型，也可以是引用数据类型（例如String） \",\"此时表示方法拥有返回值，必须显式的指出该返回值，否则编译报错\",\"在方法体中用return关键字指示返回值，格式为return + 返回值\",\"return后的返回值的数据类型，要和方法声明中的返回值类型保持一致（或者兼容）\",\"方法执行到return语句时，表示方法执行完毕。\",\"方法完全可以没有结果，也就是没有返回值，但是方法必须要有返回值类型，用关键字void标记。使用void标记的方法，没有返回值，自然也无需指出返回值\",\"方法名：给方法起个名字，调用方法时用的，方法名的命名需要遵守规范 \",\"必须是合法的标识符\",\"方法名最好见名知意\",\"小驼峰命名法\",\"形式参数列表：方法在实现功能时，有时需要传入数据。方法在定义时就应该告诉方法的调用者应该传入什么数据，这就是形式参数列表，简称形参列表 \",\"形参可以是基本数据类型变量，也可以是引用数据类型变量\",\"形参的个数不受限，多个形参之间用逗号隔开\",\"形参的作用域仅在方法内部，它们都是局部变量\",\"形参中起关键决定性作用的是形参的数据类型，形参名只是一个标识符，不会影响方法调用\",\"调用方法时传入的具体数据参数称之为实际参数，简称实参\",\"方法调用时，实参和形参的数据类型要一一对应，并且保持一致（或者兼容）\",\"方法体：方法体包含具体的语句，定义该方法的功能，由大括号包裹起来。\",\"特别注意 ：\",\"一定要分清楚，什么是形式参数和实际参数。形参完全可以理解成一个占位符，它的作用只是告诉方法的调用者，该传入什么类型的参数。而方法的实参才是一个真正的参数。\"]},\"383\":{\"h\":\"方法的调用\",\"t\":[\"明确上述语法后，定义完方法后。接下来需要调用方法，使方法生效：\",\"在Java当中，main方法是程序的入口方法，一个方法必须直接或间接地在main方法中调用才会被执行。\",\"对于修饰符列表中有static的方法，在同一个class的main方法中的调用方式是：方法名(实际参数列表)\",\"注：实际上，同一个类中的static方法之间，都可以使用这种方式直接互相调用。\",\"调用一个有返回值的方法，实际上就是操作返回值，void方法没有返回值，不能做任何操作。\",\"但是要注意：\",\"Demo:\",\"public static void main(String[] args) { // Result of 'NewDemo.sum()' is ignored // 方法既然有返回值,那么建议去接收或者使用这个返回值 int sumValue = sum(10, 20); System.out.println(sumValue); int num1 = 100; int num2 = 200; // 操作方法调用就是操作方法的返回值 System.out.println(sum(num1, num2)); System.out.println(sum(num1, num2) + 100); } // 定义一个方法,来完成求两个int类型数值的和 public static int sum(int num1, int num2) { return num1 + num2; } \"]},\"384\":{\"h\":\"使用细节\",\"t\":[\"方法完全可以没有结果，也就是没有返回值，但是方法必须要有返回值类型，用关键字void标记\",\"实参的自动类型转换: 方法在调用时，如果填入的实参的数据类型，可以自动类型转换成形参的数据类型，那么即便数据类型不一致，语法上仍然允许该数据类型的变量作为实参。反之强制类型转换不行。方法的返回值和它的返回值类型也存在这种特点！(如果一个方法需要传入一个long类型数据，那我传入一个int值可以吗？如果传入double值可以吗?)\",\"形参列表中起关键作用的是数据类型，它决定了调用该方法时需要传入什么数据。而\",\"形参地名字实际上就是一个代号，仅会影响方法内部如何使用外部传入地数据，形参名叫什么其实无所谓。\"]},\"385\":{\"h\":\"main()方法详解\",\"t\":[\"main方法代码\",\"public static void main(String[] args) { //方法体 } \",\"解释如下：\",\"public static表示\\\"公开的，静态的\\\"，这两个修饰符很重要，我们等到面向对象阶段会重点学习它们。\",\"void表示方法没有返回值。\",\"main是方法名，代表这个方法是主方法，是程序的入口方法。\",\"main不是关键字，但在Java中它已经成为约定俗成的程序入口方法的方法名。\",\"不要自定义一个方法叫main！\",\"（String[] args）是形参列表，其中String[]是一种引用类型，数组（马上讲），args是一个形参名\",\"理论上来说，args可以在符合标识符命名的前提下可以任意写。但是不建议这么做\",\"main方法是启动程序时给JVM调用的，是程序的入口方法\"]},\"386\":{\"h\":\"练习\",\"t\":[\"小试牛刀，完成以下练习题：\",\"求两个数的最大值。\",\"键盘录入两个值，求最大值。\",\"定义一个方法用于判断一个正整数的奇偶性，要求： \",\"奇数方法返回false\",\"偶数方法返回true\",\"定义一个计算器（Calculator）它的功能有： \",\"加，减，乘，除\",\"求平方\",\"求a的n次方\",\"...\",\"定义一个方法，求圆的面积： \",\"方法参数:半径 (radius)\",\"圆周率:3.14（获取用Math.PI获取）\"]},\"387\":{\"h\":\"引入\",\"t\":[\"引例，现在有三个需求，需要写三个方法完成：\",\"编写程序，计算两个int类型数据之和，并输出结果\",\"编写程序，计算两个double类型数据之和，并输出结果\",\"编写程序，计算两个long类型数据之和，并输出结果\",\"写完方法后，请问这个程序有哪些缺点呢？\",\"很明显：\",\"这三个方法实现的都是相似的功能，都是求和，只不过是针对的数据类型不同罢了。在正常情况下，我们认为方法的名字可以用来区分方法，但像引例中功能几乎一样的多个方法，能不能让它们拥有相同的方法名呢？这样既方便记忆，也方便调用。\",\"Java是存在这种机制的，那就是Java的方法重载（overload）机制。方法重载允许一个类中，多个方法拥有相同的名字。但名字一旦相同后，多个方法之间又如何区分呢？\",\"所以方法的重载是有条件的。\"]},\"388\":{\"h\":\"语法要求\",\"t\":[\"一个类中的多个方法，可以具有相同的方法名，但是它们的形参列表必须不同。\",\"形参列表不同意味着：\",\"形参数量不同\",\"形参数量相同时，形参的数据类型不同\",\"形参数量和数据类型都相同时，形参的数据类型的顺序不同\",\"除开上述条件外，其余的任何不同都无法构成方法重载， 有：\",\"形参的名字不同，可以构成方法重载\",\"返回值类型不同，可以构成方法重载\",\"修饰符列表不同，可以构成方法重载\",\"请明确记住，方法的重载只与方法的签名有关。即在方法名相同的情况下，方法签名不同，参数列表不同\",\"请思考：\",\"如果我想在很多方法中，唯一地找到一个方法，需要明确什么？\"]},\"389\":{\"h\":\"实参的自动类型转换在重载中的应用\",\"t\":[\"先回答上面思考的问题：\",\"方法的调用必须能够让编译器明确找个某个方法，当多个方法的方法名相同，形参列表还相同的话，就无从唯一确定一个方法了。所以要想唯一确定一个方法，必须明确方法的名字和形参列表，而它两合起来就称之为\\\"方法的签名\\\"，这就是签名的由来。\",\"一个类中发生方法重载时，方法名既然相同了，为了确保签名不同，那形参列表就必须不同了。\",\"Demo1:\",\"// 方法1 public static void test(int a){} // 方法2 public static void test(double a){} // 方法3 public static void test(float a){} \",\"如果调用的是:\",\"test(10); \",\"请问调用的是方法几呢？\",\"在方法的概述这一节中，我们讲过：实参能够自动类型转换去匹配形参的数据类型，看起来方法1、2、3都能够匹配，那么究竟该选谁呢？这就不得不提，Java设计原则中一个非常重要的原则： 就近原则\",\"就近原则 指的是：当有多个选项都能正确匹配时，那么优先选择\\\"最近\\\"的。\",\"回到上面那个案例，显然方法1最近，因为它不需要类型转换。而如果去掉方法1，那么方法3将胜出，因为它类型转换的\\\"距离\\\"会\\\"近\\\"一点。\",\"理解就近原则，需要活学活用，以后我们还会碰到，到时候再解释。\",\"Demo2:\",\"// 方法1 public static void test(int a,double b){} // 方法2 public static void test(double a,int b){} \",\"假如调用的代码是：\",\"test(10, 10); \",\"请问调用的是方法1还是方法2呢？\",\"显然不好确定，无论是1还是2都需要类型转换才能匹配，既然都转换，并且都是int------>double，那么到底谁\\\"近\\\"呢？\",\"实际上这个方法的调用，是一个模糊的调用，会编译报错。这一点在开发中，多个方法组成方法重载时，要格外注意。\"]},\"390\":{\"h\":\"练习\",\"t\":[\"小试牛刀：\",\"使用方法重载，控制台输出各种数据类型。\",\"实现一个功能更强大的计算器。\"]},\"391\":{\"h\":\"04. 数组\",\"t\":[\"学习目标\",\"掌握数组的定义与使用\",\"掌握数组的常见操作\",\"掌握JVM运行时数据区的栈和堆\",\"知道引用数据类型与基本数据类型的区别\"]},\"392\":{\"h\":\"引入\",\"t\":[\"引例：\",\"假设一个班上有80个人，现在需要统计，某一门课程的平均成绩，是否需要定义80个变量？\",\"很明显：\",\"如果程序需要多少数据，就定义多少个变量，过于麻烦了，这种代码写出来也不美观。\",\"当然，更重要的是多个变量单独定义且单独存在，之间没有任何关联，很不方便管理和维护。\",\"这样的做法，就好比，去超市购物，把东西一个一个单独带回家。\",\"很显然，购物需要**\\\"袋子\\\"**装东西，Java变量也需要一个容器来存放数据。\",\"Java中用于存放数据的容器有很多，但最基本的容器是数组（Array）。定义一个数组，就可以存储很多数据。\",\"思考：\",\"数组中的数据是胡乱的摆放在一起吗？数组对装在里面的数据有什么要求吗？\"]},\"393\":{\"h\":\"定义\",\"t\":[\"数组是存储多个，具有相同数据类型的数据元素的有序容器（集合）。\",\"定义中的重点是：\",\"数组能够存储多个元素，多个数据。\",\"这些数据元素的数据类型，必须一致。\",\"这些数据是有序的： \",\"数组中的每个存储单元，都有唯一编号(下标)，该编号，从左向右，从0开始编号，最大值是数组长度-1\",\"这种编号，专业的术语称之为下标或者索引（index）\",\"除此以外：\",\"定义一个数组，也是定义一个变量。而且是一种引用数据类型变量，数组是典型的引用数据类型！\",\"数组里面，可以存储基本数据类型元素，也可以存储引用数据类型元素，但是一个数组里面只能存储同一种数据类型元素。\"]},\"394\":{\"h\":\"数组的随机访问与数组的优缺点\",\"t\":[\"image-20230130170710651\",\"image-20230130170723120\",\"思考：数组里的数据，为什么非要有序且数据类型一样？\",\"这实际上和数组的数据结构结构有关系，数组是线性表的典型物理实现。\",\"线性表（list）：排列成一条线一样，具有\\\"一对一\\\"逻辑关系的数据，最佳的存储方式是使用线性表。\",\"数组最显著的特征是支持随机访问\",\"随机访问：指的是在访问某个元素时，无需经过其它元素，直接定位访问它\",\"非随机访问：指的是访向某个元素时，需要先访问其它元素。\",\"显然随机访问的效率很高，时间复杂度是常数级别的O(1)。\",\"而数组的随机访问实现方式是：根据数组的首地址和下标，通过寻址公式直接计算出对应的内存地址，最终找出数据。要想使用这种方式实现随机访问，显然数组对数据结构和数组中的元素都是有要求的：\",\"存储结构必须是连续的（有序），这样才能连续计算。\",\"存储的元素必须数据类型相同，这样每个存储单元的地址偏移量都是相同的。\",\"综上，数组是用一段连续的内存空间，来存储一组具有相同类型的数据的结构。\",\"数组的缺点\",\"1.作为一个容器，它只能存储相同数据类型的元素。\",\"2.数组必须占用一片连续的内存空间，这说明数组对内存空间使用的要求很高, JVM在创建数组时，必须事先为数组规划好合理的空间, 一个数组只要在内存中被创建出来，那么它的存储空间就是固定的,\",\"3.数组的长度一旦创建固定，是不可能再改变了！！数组的使用是很不方便的，实际开发中很少直接使用数组。 如果预先规划的数组长度过长，会导致内存空间的浪费, 如果过短，那就更不行了。\",\"数组的优点\",\"数组的优点是非常鲜明的，数组支持随机访问。数组中元素的存储和访问，效率都很高\",\"扩展\",\"数组的优缺点很鲜明，而且由于数组的长度不可变，所以数组在实际开发中很少直接被使用。 而是采取一种更加灵活的方式去间接使用数组。 比如Java中的集合（高级容器,是日常开发中最常用的容器）中ArrayList ArrayList的底层实现仍然是一个数组,但是这个数组可以自动扩容 而且也有下标,也有随机访问. \"]},\"395\":{\"h\":\"数组的声明\",\"t\":[\"要想使用数组，首先要声明（declaration）数组，类似于变量的声明。\",\"声明数组的两种语法格式：\",\"格式一\",\"数据类型[] 数组名; \",\"格式二\",\"数据类型 数组名[]; \",\"第一种格式具有更好的可读性，可以直观的看到这个数组是一个什么数据类型的数组。\",\"第二种格式，是Java沿袭自C语言的一种声明方式。（C语言语法当中只有格式二声明数组）\",\"这是因为早期很多Java开发者都是C/C++开发转过来的，而且Java开发之初就是为了简化C++的。\",\"所以很多开发者在开发Java时，一时改不了使用习惯。\",\"我们在Java早期的源代码中，可以发现很多格式二的使用案例。\",\"Java为了代码的兼容性考虑，不太可能会取消这一声明格式。\",\"（但是像C#这种和Java同源的设计语言，已经取消了数组的声明格式二）\",\"但是，我们毕竟不是Java开发者，而几乎所以Java规范中都禁止使用格式二定义数组。\"]},\"396\":{\"h\":\"数组的初始化\",\"t\":[\"声明完成一个数组后，该数组仍然不能使用，还缺少一个初始化（initialization）的过程，类似变量初始化（赋值）\",\"对于变量而言，初始化是在内存中开辟空间并赋值的过程，对于数组而言，也是类似的过程。\",\"数组要开辟一片连续的空间用来存放数据，然后进行元素赋值，即：\",\"我们要告诉需要开辟多少内存空间\",\"数组中的元素要明确它的值\",\"为了完成上述两个要求，数组的初始化就有了以下两种方式。\",\"静态初始化\",\"动态初始化\"]},\"397\":{\"h\":\"静态初始化\",\"t\":[\"静态初始化指的是：\",\"由程序员显式的，指定数组中每个元素的初始值，数组的长度由系统决定（实际上也是由程序员给出的）\",\"和数组的声明写在一起，语法格式就是：\",\"数据类型[] 数组名 = new 数据类型[]{元素1,元素2,元素3...}; \",\"注：new是一个关键字，它的含义是创建对象。（这里是数组对象！）\",\"静态初始化有简写的形式，可以省略new关键字，如下：\",\"数据类型[] 数组名 = {元素1,元素2,元素3...}; \",\" 下列写法就是错误的：\",\"数组名 = {元素1,元素2,元素3...}; \",\"当然完整格式可以不和声明写在一起，可以单独使用\"]},\"398\":{\"h\":\"动态初始化\",\"t\":[\"动态初始化指的是：\",\"程序员只是指定数组的长度，数组中每个元素的初始值由系统（实际上是JVM）决定。\",\"和数组的声明写在一起，语法格式就是：\",\"数据类型[] 数组名 = new 数据类型[数组长度]; \",\"注意事项：\",\"动态初始化没有给出具体元素的赋值，但仍然能够初始化完成，这是因为数组中的元素具有默认值。\",\"数组的长度必须是一个int范围内的非负数。\",\"动态初始化数组相对更灵活，是更常用的方式。\",\"静态初始化和动态初始化叠加使用，是经典的错误错误：\",\"数组名 = new 数据类型[数组长度]{元素1,元素2,元素3...}; \"]},\"399\":{\"h\":\"数组的基本操作\",\"t\":[\"数组的最基本操作，包括访问元素，存取元素，获取长度等等。\"]},\"400\":{\"h\":\"数组的访问\",\"t\":[\"数组的访问有两种形式：\",\"直接输出语句打印数组名，可以得到类似于：\",\"[I@1540e19d\",\"这样的一个字符串，解释一下这个字符串的由来：\",\"[左中括号表示该数据类型是一个（一维）数组\",\"I大写的字母i表示数组的类型是int类型\",\"@后面跟的是一个16进制的数，可以认为是该数组对象的内存地址空间。\",\"若想要获取数组中元素的取值，其访问语法是：\",\"数据类型 变量名 = 数组名[下标] \",\"注：不能填入一个不合法的索引下标，否则会报错！\"]},\"401\":{\"h\":\"元素的赋值\",\"t\":[\"数组元素的获取和赋值都依赖于下标访问，本质上是一个语法:\",\"数组名[下标] = 值; \"]},\"402\":{\"h\":\"获取数组长度\",\"t\":[\"数组的长度可以直接用引用（数组名）获取，语法是：\",\"int len = 数组名.length; \",\"注：数组的长度是一个int类型整数，Java不支持long类型作为数组长度\",\"程序在运行期间，需要处理很多数据，JVM中有专门的区域来存放这些数据，这片区域称之为JVM的运行时数据区域。\",\"在这片区域中，变量显然不可能是杂乱无章的随意存放的， 这些区域各有各的用途，创建时间，销毁时间等特点皆有不同，与之相对应的，不同区域中存放的变量的生命周期、特点和使用方式也会随之产生差异。\",\"理解JVM运行时内存是学习Java的基本，这个东西并不底层，需要每位同学都掌握。\",\"理解JVM运行时内存，能够加深我们对Java中的很多现象的理解。\"]},\"403\":{\"h\":\"划分\",\"t\":[\"为了描述JVM运行时内存空间，Java的开发者在《Java虚拟机规范》中指出：JVM （运行时数据区）内存共分为：\",\"JVM栈\",\"堆\",\"方法区\",\"程序计数器\",\"本地方法栈\",\"这五大区域，示意图如下：\",\"JVM运算时内存\",\"JVM栈（以后简称栈，stack）：描述的是Java的（普通）方法执行时的所占内存的内存模型。程序运行时调用方法的代价是：方法中有局部变量需要开辟空间存储，方法的执行过程会产生中间变量，方法执行完毕还需要存储返回地址等等。JVM栈正是Java的（普通）方法执行时所占用的内存空间， 局部变量会直接存储在栈帧中。\",\"于是，方法的执行流程，在JVM内存中，就变成下面这样：\",\"每当Java程序执行一个方法，都会在栈上分配一块只属于该方法的内存区域，称之为栈帧\",\"每当Java程序执行一个方法，都会将一个存储该方法信息的栈帧压入栈中，称之为方法进栈\",\"方法进栈的同时局部变量开辟内存空间存储值，局部变量生效。\",\"当方法执行完毕后，该方法的栈帧随之销毁，称之为方法的出栈\",\"方法栈帧被销毁的同时，局部变量也被销毁，局部变量失效。\",\"注：栈中只有处于栈顶的栈帧才会生效，表示正在执行的方法。称之为当前栈帧，当前方法。\",\"堆（heap）：堆是JVM内存中最大的一块，new出来的东西（称之为对象或者实例）都在堆上。 所以new关键字的语义就是：在堆上开辟一片空间给相应的对象。而这片空间（对象）是有内存地址的，这个内存地址是留给外界访问用的。\",\"注：引用数据用比较运算符比较的地址就是这个地址，即比较对象的内存地址。\",\"方法区（method area）：面向对象详细讲。\",\"本地方法栈：和JVM栈类似，区别是本地方法栈是给本地（native）方法使用的，而不是普通方法。\",\"程序计数器：JVM执行代码解释执行的，即是一行一行执行字节码的，程序计数器用来记录当前执行的行数。\",\"很明显，在JVM内存模型中，相对比较重要的，和程序的执行联系更紧密的是：堆和JVM栈。堆内存用来存储对象，由于Java是面向对象语言，Java面向对象程序中将会有非常多的对象，所以 而JVM栈用来表示方法的执行流程， \",\"方法调用\",\"image-20230130175526837\"]},\"404\":{\"h\":\"引申\"},\"405\":{\"h\":\"什么是引用数据类型\",\"t\":[\"引用数据类型是Java的两大数据类型之一，通过数组初始化的内存分配过程来一窥引用数据类型的特点。\",\"引用数据类型的创建分为两部分：\",\"首先是在栈上分配一片空间给引用数据类型的引用，简称引用，它是一个局部变量，直接存储在栈帧中。\",\"在堆上开辟一片空间，用于存放引用数据类型的实际信息，称之为对象或者实例\",\"虽然有两个部分，但对象才是引用数据类型的实质，栈上的引用通过存储对象的地址，指向了堆上对象，这样就可以通过引用间接访问堆上的对象。\",\"总结来说就是：对象是实质，但我们不能直接访问堆上的对象，而是通过栈上的引用间接访问。\",\"image-20230201102415068\"]},\"406\":{\"h\":\"基本数据类型与引用数据类型有什么区别\",\"t\":[\"基本数据类型的变量必然都是局部变量，你可能会疑惑，数组的元素也可以是基本数据类型，那它们不是局部变量啊。实际上我们不应该这么去思考，数组中的元素其实已经是（数组）对象的一部分了，它不应该单独拎出来看。所以它们的区别在于：\",\"存储位置（本质区别）\",\"基本数据类型不存在引用的概念，数据都是直接存储在栈上的栈帧里；\",\"引用数据类型在栈帧中存储引用，引用作为一个局部变量，存储的只是该引用类型在堆上对象的内存地址。\",\"存储在堆上的对象存储具体信息，才是引用数据类型的实质\",\"引申出，打印变量名区别：\",\"基本数据类型，打印变量名就是该变量具体的数值\",\"引用数据类型，没有办法直接访问对象，打印变量名（引用）会显示该引用存储的堆上的对象的内存地址。\"]},\"407\":{\"h\":\"堆和栈中内容的区别\",\"t\":[\"从三个角度来分析这个问题\",\"存储的类型\",\"默认值\",\"生命周期\",\"存储类型\",\"堆上存储的是new出来的东西，是引用数据类型的实质——对象。\",\"栈上存储的是局部变量（基本数据类型和引用类型的引用）\",\"默认值\",\"堆上对象中的变量具有默认值: \",\"整形（byte、short、int、long）默认值为0\",\"浮点类型（float、double）默认值为0.0\",\"字符类型（char）默认值是'\\\\u0000' 表示编码值为0的字符，一个绝对空字符。''\",\"布尔类型（boolean）默认值是false\",\"引用数据类型默认值是null\",\"null既不是对象也不是任何一种数据类型，它仅是一个特殊的值\",\"任何引用数据类型的引用都可以指向null，指向null并不意味着没有初始化，可以认为引用指向了虚无，反正没有指向任何一个对象。\",\"对象才是引用数据类型的实质，没有指向对象的引用实际上没有任何意义，指向null的引用是无法正常使用的！\",\"基本数据类型不能等于null\",\"栈上的局部变量没有默认值，声明局部变量后必须显式的初始化，否则无法使用。\",\"生命周期\",\"堆上的对象使用完毕后，随着方法的出栈，对象的引用就会被销毁。这个时候对象就没有引用指向它，而是\\\"孤零零\\\"的单独存在于堆上，这种对象意味着我们就无法再次使用它了，这种对象没有意义了。在Java中，我们把这种对象称之为垃圾或者垃圾对象，它们会等待垃圾回收器进行内存回收。\",\"关于Java的垃圾回收机制（Garbage Collection简称GC）：\",\"堆上的对象变成垃圾后，并不是立刻就会被回收，而是需要GC通过一系列的算法来决定它是否被回收。\",\"Java的GC机制是全自动的，程序员几乎无法干涉和主动回收垃圾。这一方面为Java程序员的开发节省了大量的精力（无需花费大量精力来管理堆内存），相比于C++的全手动回收垃圾对象，Java在GC机制上的创新是Java能够如此流行的重要原因之一。但另一方面，一旦GC这种机制出现问题，对Java而言将会是非常难以解决的问题。malloc() free()\",\"垃圾回收是Java和C++之间的一道围墙，墙外的人想进来，墙内的人却想出去。\",\"栈上的局部变量的生命周期和栈帧保持一致。方法栈帧进栈后，局部变量开辟空间生效了，方法出栈后，局部变量就被销毁了。\"]},\"408\":{\"h\":\"对象中元素的默认初始化\",\"t\":[\"在Java的面向对象设计中，一个非常重要的原则就是——通过new关键字在堆上开辟空间，创建对象时，对象中的元素需要进行赋值。在现在的数组和后面的面向对象知识中，我们会学习非常多给对象中元素赋值的方式，但是 不管赋值的方式有多少种，对象中元素赋值的第一步永远是——默认初始化，具有默认值。这是一个非常重要的知识点，希望大家牢记。\",\"举个例子来说，我们都知道数组的静态初始化，是直接给出数组对象的元素值。那么元素的值就是直接赋我们给出的具体值吗？结合上面，显然不是，必须先默认初始化，具有默认值，然后才能赋其它具体值。\",\"一个经典的初学者问题\",\"既然引用数据类型具有默认初始化，对象中的元素具有默认值，那为什么声明一个数组后为什么不能立刻使用呢？\",\"不是引用数据类型有初始化，是创建的对象当中的元素具有初始化，对于声明的数组，它的引用在栈上，没有默认的初始化。只声明了的数组不存在引用，引用不是null。\",\"数组长度为0，引用值不是null，可以打印出具体值\",\"数组的引用为null，可以打印数组引用，打印出来仍然是null\",\"image-20230201113632415\"]},\"409\":{\"h\":\"练习\",\"t\":[\"练习1：\",\"静态初始化一个数组，输出数组名及元素。然后给数组中的元素赋值，再次输出数组名及元素。\",\"练习2：\",\"分别静态、动态初始化两个数组，分别输出数组名及元素。然后分别给数组中的元素赋值，再次分别输出数组名及元素。\",\"练习3：\",\"定义两个数组：\",\"静态初始化一个数组，输出数组名，元素取值，长度\",\"然后声明第二个数组，把第一个数组的地址赋值给第二个数组。\",\"输出第二个数组的数组名，元素取值，长度\",\"然后给第二个数组赋值，再次输出两个数组的名及元素\",\"image-20230201115210560\"]},\"410\":{\"h\":\"异常的简单介绍\",\"t\":[\"异常我们会在后续的课程中，会有专门的章节去讲，这里简单了解一下。\",\"什么是异常？\",\"异常指的是：程序在运行期间出现了不正常情况，这种不正常情况的信息就会封装成一个异常对象。一旦程序出现异常，JVM就会终止程序执行，并在控制台打印异常信息。\",\"异常对象的主要作用是描述程序运行出现不正常情况时各种信息，主要包括：\",\"异常的名称，问题的描述\",\"产生问题的代码行数（位置）\",\"注：由于Java代码最终需要解释执行，所以产生异常之前的代码是可以正常执行的。\"]},\"411\":{\"h\":\"数组下标越界异常\",\"t\":[\"数组下标越界异常（ArrayIndexOutOfBoundsException），用来描述访问了某个数组的一个不存在（不合法）的下标时的问题。\",\"注意事项：\",\"这是一个单独针对数组操作的异常，从名字就能看出来。\",\"这个异常在数组操作中很常见，尤其是在循环当中，当你误判了循环的变量是非常容易下标越界的。\"]},\"412\":{\"h\":\"空指针异常\",\"t\":[\"空指针异常（NullPointerException），用来描述通过一个指向null的引用访问对象时的问题。当引用数据类型的引用指向了null（空常量）时，表示引用是没有指向任何对象，这时如果还想通过引用操作堆上对象，就会空指针异常（因为没有任何对象可供操作）\",\"注意事项：\",\"空指针异常（NullPointerExceptionE），是Java之中最负盛名的异常，没有之一。**以后大家会天天和引用数据类型打交道，也会每天和空指针异常打交道。**空指针异常在多数情况下是有害的，会导致程序意外终止，避免空指针异常是Java程序员的必修课之一。常见的、最简单朴实的规避手段就是通过if进行判断，判断出引用不会指向null后再使用引用操作对象。\",\"最后再提一点：\",\"我们在开发时，要明确知道程序中的引用哪里会指向null，哪里完全不会指向null，对于：\",\"那些逻辑上，可能会指向null的引用，要在使用前慎重判断。如果等于null，需要做出相应处理（反正不能访问对象），判断不为null之后才能使用该引用访问对象。\",\"那些逻辑上，完全不可能等于null的引用，就不应该做判断了。一旦程序抛出空指针异常，要去排查为什么引用会等于null，然后修正程序。\"]},\"413\":{\"h\":\"长度为0的数组\",\"t\":[\"思考：\",\"数组长度为0和数组是null以及数组未初始化，有啥区别？\",\"数组未初始化： 这个数组完全是不可用的，没有初始化的数组毫无意义，一旦使用会编译报错。\",\"数组长度为0和数组为null都是可以使用的，可以认为是经过初始化的，但它们都不是正常数组： \",\"长度为0的数组，只在内存中存在结构但没有存储单元，不能存储任何数据。它的操作中： \",\"直接打印数组名可以获取数组对象的地址。\",\"不能访问任何数组下标，否则都会抛出数组下标越界异常。\",\"输出数组的长度为0\",\"数组为null，表示数组的引用指向了null，数组（对象）无法进行任何操作。 \",\"直接打印数组名得到一个null字符串。\\\"null\\\"\",\"不能访问任何数组下标，也不能打印数组长度，都会报空指针异常。\",\"附一个长度为0的数组的经典用途：\",\"假如方法的返回值是一个数组（或者其它容器），而又有无返回数据的需求，这个时候普遍有两种做法\",\"返回一个长度为0的数组（或者其它容器）\",\"返回null\",\"需求:\",\"根据不同的情况,方法可能有两个结果,可能有一个结果,也可能没有结果 这时要返回容器,比如数组/集合\"]},\"414\":{\"h\":\"数组的遍历\"},\"415\":{\"h\":\"手写实现\",\"t\":[\"在很多时候，我们需要数组遍历完成各种独特的功能，这时往往不好找到一个已存在的实现去使用，那么可以考虑自己去实现。接下来我们以遍历并输出数组的元素为例（arr变量表示一个一维数组）：\",\"最简单的情况下，直接使用for循环，打印数组元素即可。代码如下：\",\"for (int i = 0; i < arr.length; i++) { System.out.println(arr[i]); } \",\"在此基础上，可以考虑一些独特的需求，比如：\",\"排版，更优美。\",\"抽取出方法，复用遍历代码。\",\"方法能够接收特殊数组（null数组/长度为0的数组）的输入而能够正常输出。\",\"// 方式1： public static void printArray(int[] arr) { for(int x=0; x<arr.length; x++) { System.out.println(arr[x]); } } // 方式2： public static void printArray(int[] arr) { System.out.print(\\\"[\\\"); for(int x=0; x<arr.length; x++) { if(x == arr.length-1) { System.out.println(arr[x]+\\\"]\\\"); }else { System.out.println(arr[x]+\\\", \\\"); } } } \"]},\"416\":{\"h\":\"JDK自带数组遍历实现\",\"t\":[\"数组遍历并输出值，是非常常见的操作。所以如果你仅仅是想看一下数组里的元素长啥样，完全不需要自己手写实现。而是直接使用下面的方式：\",\"Arrays.toString(数组) \",\"注：该方法需要传入一个一维数组，返回值是一个遍历结果的字符串。\"]},\"417\":{\"h\":\"增强for循环遍历数组\",\"t\":[\"数组的遍历除了可以使用for循环外，还可以使用增强for循环。(关于增强for会在学习集合时，详细去讲，现在先了解一下基本使用。)\",\"增强for循环（也叫foreach），以遍历并打印数组元素为例，它的语法是：\",\"for(数据类型 变量名 : 要遍历的数组或者集合){ System.out.println(变量名); } \",\"语法中的各个部分：\",\"数据类型是要遍历数组或集合中元素的数据类型。比如遍历int数组，就应该填入int。\",\"从整个遍历的过程中看来，变量名就表示数组/集合中的某一个元素。整体就代表所有元素。\",\"增强for和普通for遍历数组时的区别：\",\"增强for的语法更简洁。\",\"增强for循环中没有使用数组下标，而是直接遍历元素。当你想要在循环中使用数组下标时，就无法使用增强for了。\",\"增强for也叫迭代器（iterator），它仅仅作为一个遍历数组/集合的工具而存在， 在增强for当中是不能修改任何元素的取值的。\"]},\"418\":{\"h\":\"获取数组中的最值\",\"t\":[\"获取数组中的最值，包括获取最大值和最小值，也是常见操作。\",\"具体思路：\",\"任取一个元素**（一般选择第一个元素）**作为参照物。\",\"遍历其他元素，依次比较，选择出更大/小的值，类似于打擂台。\",\"最终获取最值。\",\"// 最大值： public static int getMax(int[] arr) { int max = arr[0]; for(int x=1; x<arr.length; x++) { if(arr[x] > max) { max = arr[x]; } } return max; } // 最小值： public static int getMin(int[] arr) { int min = arr[0]; for(int x=1; x<arr.length; x++) { if(arr[x] < min) { min = arr[x]; } } return min; } \"]},\"419\":{\"h\":\"数组的逆序\",\"t\":[\"数组的逆序（reverse），即颠倒数组中元素的顺序，在原数组的数组上改变元素顺序：\",\"即下标为和位置的元素互换，下标为和位置的元素互换....\",\"即，把下标为和元素互换即可！\",\"但是注意：只需要交换一半数组的元素即可，不要遍历整个数组，会再交换回去！\",\"// 方式1：二分法 public static void reverse(int[] arr) { for(int x=0; x<arr.length/2; x++) { int temp = arr[x]; arr[x] = arr[arr.length-1-x]; arr[arr.length-1-x] = temp; } } // 方式2：定义2个标记 public static void reverse(int[] arr) { for(int start=0,end=arr.length-1; start<=end; start++,end--) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; } } \"]},\"420\":{\"h\":\"数组元素的增删改查\",\"t\":[\"数组是一个容器，可以用存放元素，存放数据。\",\"在实际开发中，工程中也会需要存放大量数据，这一般是通过数据库来实现的。实际开发的基本需求就是基于数据库的，对数据进行增删改查，即，也有很多中低级Java程序员自嘲自己为\\\"crud工程师\\\"。\",\"当然指的是：\",\"c，create：新增数据/增加。\",\"r，retrieve/read：检索数据/查询。\",\"u，update：更新数据/修改。\",\"d，**delete **：删除数据/删除。\",\"我们现在还没有学习过数据库，但是不重要。现在我们使用数组这个容器，来模拟数据库，实现日常开发中最常见的\\\"crud\\\"操作。\",\"需求: 创建容量为10的String数组, 使用String数组保存人名,要求名字不能重复 模拟对人名的相关操作\"]},\"421\":{\"h\":\"数组的拷贝\",\"t\":[\"数组的长度是不可以改变的，所以如果想要实现数组元素删除和新增，一般需要使用数组的拷贝。\",\"大致思路是，创建一个新数组,然后拷贝赋值：\",\"首先需要明确新数组的长度，初始化这个新数组。\",\"然后遍历原先的数组，过滤掉（或者新增）一些元素，给新数组赋值。\",\"可变参数适用于：参数个数不确定，类型确定的情况，Java会自动把可变参数当作数组处理。\"]},\"422\":{\"h\":\"基本使用\",\"t\":[\"怎么使用可变参数？\",\"可变参数用于形参列表中，并且\",\"语法：\",\"[修饰符列表] 返回值类型 方法名 (形式参数列表,数据类型... 变量名){ //方法体 } \",\"可变参数的三个点位于数据类型和变量名之间，前后有无空格都可以。最好是前无空格，后有空格。\",\"调用可变参数的方法时，编译器为该可变参数隐含创建一个数组，在方法体中以数组的形式访问可变参数。\",\"需求: 求不确定个数的int数值之和\"]},\"423\":{\"h\":\"注意事项\",\"t\":[\"注意事项：\",\"调用方法时，如果有一个固定参数的方法匹配的同时，也可以与可变参数的方法匹配，则选择固定参数的方法。\",\"调用方法时，如果出现两个可变参数的方法都能匹配，则报错，这两个方法都无法调用了。\",\"注：一般来说要避免可变参数方法，发生方法重载，避免导致方法调用失效情况出现。\",\"参见如下代码：\",\"public class Demo2 { public static void main(String[] args) { // 以下方法调用，编译报错 // test(1, 2); } public static void test(int... var) { } public static void test(int a, int... var) { } } \",\"一个方法只能有一个可变长参数，并且这个可变长参数必须是该方法的最后一个参数。\"]},\"424\":{\"h\":\"基本概念\",\"t\":[\"什么是方法的传值问题？\",\"调用方法时，我们需要传递实参给方法，在方法内部有可能会改变这些实参的值。\",\"那么方法执行完毕后，这些实参的值在原先的方法中会怎么变呢？这就是方法的传值问题。\",\"比如下列代码：\",\"// 需求: 将一个int实参变量取值变成原先的2倍 public static void doubleIntValue(int a) { a *= 2; } \",\"两种传值方式\",\"值传递（call by value），指的是调用方法时，传入的是实参的拷贝而不是实参本身。\",\"如果Java是值传递的，那么方法改变的是实参拷贝的值，原本实参的值是不会被改变的。\",\"引用传递（call by reference），指的是调用方法时，传入的是实参变量的地址，也就是实参本身。\",\"如果Java是引用传递的，方法改变的是实参本身的值，方法结束后，原本实参变量的值会随之改变。\"]},\"425\":{\"h\":\"Java值传递\",\"t\":[\"实际上来说，Java只存在值传递，方法得到的是变量的拷贝，而不是变量的地址。\",\"对于基本数据类型形参和实参而言，方法调用过程如下：\",\"在调用方法的方法栈帧中创建一个实参的副本。\",\"对这个副本进行操作，原先方法栈帧的局部变量的值不会发生任何变化。\",\"并且这个方法执行完毕后，随着方法出栈，这个实参的副本也被销毁了。\",\"比如，以下方法代码：\",\"public static void doubleIntValue(int num) { num *= 2; } \",\"对于引用数据类型形参和实参而言，方法调用过程如下：\",\"在调用方法的方法栈帧中创建一个引用的拷贝，因为是拷贝。\",\"所以这个引用中存的对象地址和原先的引用一样。\",\"结果就是，这个副本仍然指向了原先引用所指向的对象。\",\"对这个引用的副本进行操作，原先方法栈帧的引用不会发生变化，但由于指向的是同一对象\",\"结果就是，引用和引用拷贝指向的对象本身被改变了。\",\"方法结束后，这个引用拷贝也被销毁了。\"]},\"426\":{\"h\":\"证明Java值传递\",\"t\":[\"很多程序语言（尤其是C/C++）提供了两种传值方式，导致很多人也认为Java也是两种传参方式。这里举一个反例：\",\"声明初始化两个数组\",\"提供一个交换数组的方法swap：\",\"public static void swapArray(int[] arr1,int[] arr2){ int[] temp; temp = arr1; arr1 = arr2; arr2 = temp; } \",\"方法的调用过程如下：\",\"首先在调用方法的栈帧中声明两个数组的引用拷贝，仍指向原先的数组\",\"交换这两个拷贝的值，实际上就是交换它们指向的数组，这里两个拷贝完成了数组交换\",\"原先的数组引用不受影响\",\"方法结束后，这两个引用拷贝被销毁。\",\"实测下来，运行结果和我们上述一样，证明Java只有值传递。\",\"image-20230202144151882\"]},\"427\":{\"h\":\"Java方法对方法参数能做什么\",\"t\":[\"不能修改基本数据类型的实参的值，也不能修改引用数据类型实参引用的取值。 \",\"一旦违反上述原则，那么局部变量就不\\\"局部\\\"了。\",\"可以改变引用数据类型中对象里的数据（称之为改变对象的状态，改变对象的属性值）\"]},\"428\":{\"h\":\"二维数组的基本概念\"},\"429\":{\"h\":\"二维数组的引入\",\"t\":[\"引例，思考以下问题：\",\"一个Java班上有80个人，可以创建一个数组装他们的成绩。如果有80个这样的班，怎么办？创建80个数组？\",\"如果一个Java班级用一个一维数组来存放，那么把80个班级的一维数组全部放进一个一维数组，会这么样呢？\",\"数组既可以存基本数据类型，也可以存引用数据类型，数组当然也是引用数据类型。\",\"如果用一维数组再存储一维数组，就得到了\"]},\"430\":{\"h\":\"二维数组的本质\",\"t\":[\"思考一下：JVM内存中，堆中，有没有二维数组这种特殊的内存结构呢？或者换句话说，二维数组和一维数组有本质区别吗？\",\"需要注意的是引用数据类型数组里的元素，存储的是其它引用数据类型的引用。\",\"一个长度为2的int类型二维数组内存图，可能是如下：\",\"image-20230515153347559\",\"所以，二维数组的实质，仍然是一维数组。\",\"二维数组的数据类型由其中一维数组的类型决定，只能存储相同类型的一维数组。比如上图就是一个int类型的二维数组。\"]},\"431\":{\"h\":\"二维数组的理解\",\"t\":[\"其实，如果你比较机智，可能已经发现了，二维数组很像线性代数中的矩阵。\",\"而实际上，二维数组在计算机领域的应用也大多和矩阵相关。比如图像处理，3D图形渲染等等。\",\"在Java SE阶段，和二维数组比较相关的，用途比较多的可能就是——用二维数组来存储表格数据。\",\"例如对于下列建立一张用来，表示多个班级的学生的成绩的表格：\",\"一班学生成绩\",\"二班学生成绩\",\"三班学生成绩\",\"四班同学成绩\",\"...\",\"90\",\"86\",\"78\",\"90\",\"77\",\"86\",\"76\",\"54\",\"86\",\"67\",\"87\",\"60\",\"...\",\"...\",\"你知道二维数组怎么对应表格数据吗？\",\"实际上，把表格中的一列数据看成是一个一维数组，那么二维数组就是整个表格数据。\",\"了解这些后，接下来就学习一下二维数组的定义和使用，和一维数组没有本质区别。\"]},\"432\":{\"h\":\"二维数组的声明和初始化\",\"t\":[\"和一维数组一样，要想使用二维数组，首先要进行声明和初始化。\"]},\"433\":{\"h\":\"声明\",\"t\":[\"二维数组的声明（declaration）有三种格式：\",\"格式一\",\"数据类型[][] 二维数组名; \",\"格式二\",\"数据类型 二维数组名[][]; \",\"格式三**（奇怪的方式）**\",\"数据类型[] 二维数组名[]; \",\"注意：\",\"一些奇怪的面试题目：\",\"int[] m,n[]; \",\"这里犯了两个错误：\",\"这里不应该一行定义多个变量。\",\"二维数组的声明应该用上述格式一！\"]},\"434\":{\"h\":\"初始化\",\"t\":[\"二维数组的初始化（initialization）也有三种格式：\",\"静态初始化\",\"二维数组的静态初始化语法\",\"二维数组名 = new 数据类型[][]{{元素1,元素2,元素..},{元素1..}...}; //可以简写为下面格式 数据类型[][] 二维数组名 = {{元素1,元素2,元素..},{元素1..}...}; \",\"注：简写同样需要和声明写在一起\",\"动态初始化格式一\",\"二维数组名 = new 数据类型[m][n]; \",\"其中：\",\"m表示二维数组的长度，代表二维数组当中，一维数组的个数。\",\"n代表二维数组当中，每个一维数组的长度，即一维数组能存储元素的个数。\",\"注：\",\"动态初始化格式一创建的二维数组，里面的每个一维数组的长度都相同。\",\"其中的每一个一维数组相当于动态初始化，里面的元素都具有默认值， 。内存图如下：\",\"二维数组\",\"动态初始化格式二\",\"二维数组名 = new 数据类型[m][]; \",\"其中：\",\"m表示二维数组的长度，代表二维数组当中，一维数组的个数。\",\"注：\",\"这种方式创建的二维数组，实际上只有默认值null， 。内存图如下：\",\" 除了上述三种三种初始化方式，其它任何方式都是错误的，比如下面：\",\"// 二维数组名 = new 数据类型\\\\[][n]; 错误X // 二维数组名 = new 数据类型\\\\[m][n]{{元素1,元素2,元素..},{元素1..}...}; 错误X \",\"三种初始化方式中，静态初始化很固定地为元素赋值。动态初始化格式一创建完毕后，一维数组的长度都是一样的，但可以直接使用。而格式二直接使用会空指针异常，还需要手动初始化二维数组中的每一个一维数组，每个一维数组的长度可以自己给出，相对灵活。\"]},\"435\":{\"h\":\"二维数组的基本操作\"},\"436\":{\"h\":\"数组长度\",\"t\":[\"二维数组中有关长度的，主要有以下：\",\"获取二维数组的长度，即一维数组的个数。语法如下：\",\"二维数组名.length; \",\"获取二维数组中一维数组的长度，语法如下：\",\"二维数组名[m].length; \",\"注：\",\"其中二维数组名[m]表示二维数组中的某一个一维数组。\",\"只有二维数组中的一维数组完成初始化，才能够使用这种形式，不然会空指针异常。\",\"m必须是一个合法的下标，不然会数组越界。\"]},\"437\":{\"h\":\"访问一维数组\",\"t\":[\"语法：\",\"二维数组名[m]; \",\"注：\",\"只有二维数组中的一维数组完成初始化，才能够使用这种形式。\",\"m必须是一个存在的下标，不然会数组下标越界。\",\"获取一维数组后，就可以把它整体作为一个一维数组，进行各种一维数组的操作。\"]},\"438\":{\"h\":\"元素的访问\",\"t\":[\"语法:\",\"二维数组名[m][n] \",\"注：\",\"对于静态初始化二维数组： \",\"m表示二维数组中一维数组的位置，最小是0，最大是m-1（即二维数组长度-1）\",\"n表示在指定一维数组中元素的位置，最小是0，最大是n-1（即某个一维数组长度-1）\",\"对于动态初始化格式一的二维数组（明确指出m，n的取值）： \",\"m表示二维数组中一维数组的位置，最小是0，最大是m-1（或者二维数组长度-1）\",\"n表示在指定一维数组中元素的位置，最小是0，最大是n-1（即某个一维数组长度-1）\",\"动态初始化格式一后如果没有再赋值，得到的是默认初始值。\",\"对于动态初始化格式二的二维数组（明确指出m，n未知） \",\"这种格式初始化的二维数组，不能直接使用，必须先初始化其中的一维数组。\",\"初始化一维数组后，再根据m，n的取值获取相应位置的元素。但也要警惕数组越界或空指针异常。\"]},\"439\":{\"h\":\"进阶操作\"},\"440\":{\"h\":\"数组遍历\",\"t\":[\"二维数组的遍历（traverse）同样是最基本操作，这里给出一个手写的参考代码。\",\"二维数组的遍历\",\"public static void traverseTwoDArray2(int[][] arr) { System.out.print(\\\"[\\\"); //一维数组使用for循环，二维数组使用双层for循环去遍历 //外层for应该遍历二维数组中的一维数组 for (int i = 0; i < arr.length; i++) { //内层for应该遍历每一个一维数组 for (int j = 0; j < arr[i].length; j++) { //这里就是具体元素的值 if (j == 0 && j != arr[i].length - 1) { //如果是每个数组中的开头元素且不是最后一个元素 System.out.print(\\\"[\\\" + arr[i][j] + \\\", \\\"); } else if (j == 0) { //是开头也是最后的元素 System.out.print(\\\"[\\\" + arr[i][j] + \\\"], \\\"); } else if ((j == arr[i].length - 1 && i != arr.length - 1)) { //如果是每个一维数组的末尾元素,除最后一个 System.out.print(arr[i][j] + \\\"], \\\"); } else if ((i == arr.length - 1) && (j == arr[arr.length - 1].length - 1)) { //如果是整个二维数组的最后一个元素 System.out.print(arr[i][j] + \\\"]\\\"); } else { //普通的在中间的元素 System.out.print(arr[i][j] + \\\" ,\\\"); } } } System.out.println(\\\"]\\\"); } \",\"可以看出，二维数组因为本身比一维数组复杂，遍历的过程也会更复杂，需要考虑的因素更多了。\",\"当然多维数组的遍历，JDK也已经有实现了，同样使用类Arrays，语法如下:\",\"Arrays.deepToString(某个二维数组) \"]},\"441\":{\"h\":\"杨辉三角\",\"t\":[\"杨辉三角（YangHui Triangle）指的是南宋时期数学家杨辉，根据北宋时期的数学家贾宪的作品（现已遗失），发现的一种几何排列规律，在数学中，它是二项式系数在三角形中的一种几何排列。大致图案如下：\",\"1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 ........\",\"在欧洲，这个表叫做帕斯卡三角形（Pascal's Triangle），法国数学家布莱士·帕斯卡（Blaise Pascal ）在1654年发现这一规律，相比于中国，比杨辉要迟393年，比贾宪迟600年。\",\"杨辉三角从纯粹数字规律上来说，就是：\",\"每一行的元素和行数一样，即行数等于列数。第一行有一列，第二行有两列....\",\"第一行的元素从1开始，且之后每个元素的值，都是上一行同列元素和上一行左边列的元素之和。\",\"前两行的元素和每一行的首尾元素由于没有上一行同列元素或上一行左列元素，默认都是1。\",\"我们把杨辉三角的每一行的数据看成是一个一维数组，那么所有行组合起来，就是一个二维数组。\",\"知道杨辉三角是一个二维数组后，那么怎么用一个二维数组存储它呢？\",\"首先，肯定需要声明初始化一个二维数组，由于每个一维数组的长度不同，更好的选择是使用动态初始化格式二。\",\"接下来使用for循环完成每一个一维数组的动态初始化，分配它们的长度。\",\"开始赋值：\",\"首先为每一个一维数组的首尾元素赋值1\",\"为第三列之后的元素赋值：元素值 = 上一行同列的元素值 + 上一行上一列的元素值\",\"注：不要忘记了首尾元素已经赋值过了，不要再重复赋值，导致数组越界。\",\"赋值完毕后，开始按照杨辉三角的格式打印二维数组（实际上就是遍历二维数组），注意格式就行了。\",\"整体参考代码如下：\",\"public static void yangHuiTriangle() { // 动态初始方式二创建二维数组 int[][] arr = new int[10][]; // 给每一个一维数组，完成动态初始化 for (int i = 0; i < arr.length; i++) { arr[i] = new int[i + 1]; } // 给一维数组的首尾赋值为1 for (int i = 0; i < arr.length; i++) { // 给第一个元素赋值 arr[i][0] = 1; // 行列相同就是最后一个元素 arr[i][i] = 1 } // 其他元素赋值。i表示行，从第三行开始赋值，j表示列，从第二列开始，但要去掉最后一列 for (int i = 2; i < arr.length; i++) { for (int j = 1; j < arr[i].length - 1; j++) { arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1]; } } //遍历数组 // 外层是遍历二维数组 for (int i = 0; i < arr.length; i++) { // 遍历装了具体元素的一维数组 for (int j = 0; j < arr[i].length; j++) { System.out.print(arr[i][j]+\\\"\\\\t\\\"); } System.out.println(); } } \"]},\"442\":{\"h\":\"05. 递归的定义\",\"t\":[\"我们已经学习过方法，使用过方法了。方法体中是可以调用方法的，那么如果在方法体中调用方法自身呢？\",\"特别的，在一个方法当中再次调用这个方法，就像故事里提到同样的故事一样，我们把方法在运行时调用自身的情况，称之为递归，又叫做递归调用。\",\"递归的使用有很多限制，尤其要注意以下两点：\",\"合法的递归，除了要有递归体语句外，还要有递归出口。无限制的递归下去，会引发栈溢出错误（StackOverflowError）\",\"即便是有出口的递归，递归的深度也不能超过栈空间的大小，否则仍然会报错\",\"案例1: 自然数求和\",\"public static int sum(int n) { // 递归出口 if (n == 1) { return 1; } return n+sum(n-1); } \",\"递归是方法自我调用的过程，但是**\\\"只递不归\\\"**的套娃会导致程序崩溃，报错递归栈溢出错误（StackOverflowError），是一个错误（Error），是比Exception要更加的严重的错误。\",\"产生栈溢出错误的原因在于：\",\"Java程序运行时，调用方法是有代价的：要占用栈（stack）中的内存空间\",\"方法执行结束后，方法出栈，释放内存，所以一般情况下，栈内存不会溢出，始终够用\",\"无限制的递归调用方法，会导致方法只进栈不出栈，很快栈内存空间就不够用了\",\"这种情况就是\\\"栈溢出错误\\\"，对程序而言是致命错误，程序必须停止执行。\",\"热知识：StackOverflow.com 是全球最大的程序员问答平台。\",\"百度 , CSDN(可能有错) , 掘金, V2ex , google , 知乎 , chatGpt\",\"案例2：使用递归计算N（N>=1）的阶乘**（factorial）**\",\"这个代码很好写，参考如下：\",\"//求n的阶乘 public static long factorial(int n) { //建议写递归先写递归出口 if (n == 1) return 1; return n * factorial(n - 1); } \",\"我们可以总结一下使用递归的两要素：\",\"递归体（方法中自身调用自身方法的那句语句）\",\"递归出口\",\"以上两部分对于一个正常的递归而言都是必须的，在实际使用中，我们只要找到这两个部分就能够写出递归的代码了。\",\"观察这样的一个代码，我们想求n的阶乘，就只需要知道（n - 1）的阶乘的值，（n - 1）阶乘的结果就需要知道（n - 2）阶乘的结果，最终我们知道1的阶乘就是1。\",\"这种将大问题分解为小问题的思想就是递归的思想：\",\"把一个复杂的大规模的问题，分解成若干相似的小规模的子问题。\",\"当子问题规模足够小的时候，就可以直接得到小规模问题的解。\",\"然后把所有的小规模的子问题的解，组合起来，得到要求解的大规模问题的解。\",\"对比一下，下面没有使用递归，正常使用for循环的代码：\",\"循环求n的阶乘\",\"public static long factorial2(int n) { // n! = n * (n-1) * (n-2) * ...* 1 int temp = n; long result = 1; // temp的值会逐渐变小,只要还大于0就要一直乘下去 while (temp > 0) { result *= temp; temp--; } return result; } \",\"不难发现递归的优点是：\",\"递归的代码会非常简洁，这是最直观的。\",\"人在解决问题的时候，都会下意识的分解问题。递归的思想很符合人的思维，用递归求解一个问题的思路很容易被人理解。\",\"接第二条，一旦能够找打分解问题的思路，递归会非常好用。\",\"当然递归的缺点也非常明显：\",\"不用递归时，往往一个方法就能解决问题。而递归会调用多个方法，占用大量栈内存，且明显存在重复计算，效率低。也就是说，使用递归求解一个问题，时间和空间复杂度都不占优势，既占用空间效率还低。\",\"栈溢出错误警告！递归很危险，一旦栈溢出是严重错误！\",\"综上，递归是一把伤人亦伤己的利器，实际开发中不要随意使用递归，使用递归要深思熟虑递归的深度和出口，避免栈溢出错误\",\"斐波那契(Feibonacci)数列\",\"1, 1 , 2 , 3 , 5 , 8 , 13 , 21.....\",\"求第n个位置的值是多少\",\" public static int faibonacci(int n) { // 递归出口 if (n == 2) { return 2; } if (n == 1) { return 1; } return faibonacci(n - 2) + faibonacci(n - 1); } \",\"青蛙跳台阶 一只青蛙一次可以跳上一层台阶，也可以跳上两层， 求该青蛙跳上n层的台阶总共有多少种跳法（先后次序不同算不同的结果)\",\" public static int jumpStep(int n) { if (n == 1) { return 1; } if (n == 2) { return 2; } return jumpStep(n - 1) + jumpStep(n - 2); } \"]},\"443\":{\"h\":\"06. 面向对象基础\",\"t\":[\"学习目标:\",\"掌握对象与类的关系\",\"掌握如何定义类\",\"掌握对象的创建与使用\"]},\"444\":{\"h\":\"引例\",\"t\":[\"张三养了3只狗，一只1岁白色萨摩亚，一只2岁黄白柯基，一只3岁黄色金毛\",\"解决方案:\",\"单独变量模拟\",\"数组方式模拟\",\"Code\",\"public static void main(String[] args) { // 单独变量解决 // 第一只dog String dogName1 = \\\"萨摩耶\\\"; String dogColor1 = \\\"白色\\\"; int dogAge1 = 1; // 第二只狗 String dogName2 = \\\"柯基\\\"; String dogColor2 = \\\"黄白色\\\"; int dogAge2 = 2; // 第三只狗 String dogName3 = \\\"金毛\\\"; String dogColor3 = \\\"黄色\\\"; int dogAge3 = 3; // 数组方式解决 String[] dog1 = {\\\"萨摩耶\\\", \\\"白色\\\", \\\"1\\\"}; String[] dog2 = {\\\"柯基\\\", \\\"黄白色\\\", \\\"2\\\"}; String[] dog3 = {\\\"金毛\\\", \\\"黄色\\\", \\\"3\\\"}; } \",\"单独变量解决==》不利于数据管理\",\"数组解决==》数据类型无法体现，取值只能通过下标，变量名跟内容很难关联起来\",\"缺点：不利于数据管理，效率低\",\"为了解决上述问题, 我们引入了类与对象.\"]},\"445\":{\"h\":\"对象的概念\",\"t\":[\"在生活中，我们每个人都是独立的个体，还有一些客观存在的个体，个体之间通过交互共同组成了这个世界。\",\"面向对象程序的世界就是对现实生活的模拟，就是把现实生活中的场景搬到程序中。\",\"Java 是面向对象的编程语言，独立的个体就是，对象就是面向对象程序设计的核心。\",\"对象之间相互协作，共同实现程序的功能。\",\"现实中存在的个体，Ta们具有特定的属性和特定的行为，程序世界中的也类似，具有以下特点：\",\"属性：个体的状态信息（数据）\",\"行为：个体能够做什么（操作）\"]},\"446\":{\"h\":\"类的概念\",\"t\":[\"现在我们知道了对象对程序世界的重要性，为了完成程序开发，我们程序员的工作就变成了：\",\"创建一个个对象，并维护对象之间的交互。\",\"在这个过程中，最基本，最先要解决的问题就是——对象的创建，怎么得到一个对象呢？\",\"就像上帝造人，女娲造人是以自身为模板一样。我们程序员创建程序中的对象，也需要一个。\",\"在Java中把创建对象的\\\"模板\\\"，称之为。\",\"也就是说，到目前为止，我们终于可以给我们之前天天用的类（class）下一个明确的定义了：\",\"创建对象的模板就是类！类就是创建对象的模板！\",\"既然类是模板，那么：\",\"类就抽取了同类别的所有对象属性和行为上的，一个类可以描述千千万万个对象。\"]},\"447\":{\"h\":\"类与对象的关系\",\"t\":[\"类和对象的关系：\",\"类描述了，同种类型的对象，在属性和行为上的共性特征。\",\"所以：\",\"类是抽象的，而对象是具体的，所以对象也称为实例（instance）。\",\"类只规定了共性，只是描述对象该有什么属性，该有什么行为。\",\"但是：\",\"具体对象属性的取值，即便是同类型对象也可能有差异。一个类可以创建出千千万万个不同的对象。\",\"image-20221031111018844\"]},\"448\":{\"h\":\"类的定义\",\"t\":[\"定义类包括定义类本身，和定义类中结构两部分。\"]},\"449\":{\"h\":\"定义一个类\",\"t\":[\"语法\",\"[类修饰符列表] class 类名{ // 类体 } \"]},\"450\":{\"h\":\"定义类中的成员\",\"t\":[\"类中成员分为两部分:\",\"成员变量: 描述对象的共有属性\",\"成员方法: 描述对象的共有行为\",\"如何定义成员变量？\",\"定义。\",\"[修饰符列表] 数据类型 成员变量名; \",\"注意:\",\"成员变量，在整个类体中生效，在整个类中的成员方法中都可以访问它！\",\"如何定义成员方法?\",\"[访问权限修饰符] 返回值类型 方法名(形参列表){ // 方法体 } \",\"解释：\",\"成员方法和我们之前使用的方法不一样，必须没有static修饰！！\",\"访问权限修饰符我们还未学习，这里先默认是！\",\"其它诸如形参列表，方法体，方法名等结构和之前讲的方法一样。\",\"定义一个学生类Demo\",\"class Student{ // 属性 public String name; public int age; // 行为 public void study(){ } } \"]},\"451\":{\"h\":\"对象的创建与使用\"},\"452\":{\"h\":\"创建\",\"t\":[\"创建类的对象一般需要在方法中进行，在确定能够创建对象的地方，可以使用以下语法创建对象：\",\"类名 对象名 = new 类名(); \",\"这个语法，我们并不陌生，在Scanner键盘录入的时候，已经见过了，现在做如下解释：\",\"类名表示创建是何种对象，对象的类型是什么。\",\"对象名和之前讲的数组名是一个概念，都是引用数据类型的引用。作为一个变量名，对象名遵循小驼峰式的命名规范。\",\"new关键字表示在堆上开辟空间创建对象，注意代码中的new关键字表示一定会在堆上创建一个独立的对象。\",\"比如创建一个Student对象，就应该这么写：\",\"Student s = new Student(); \"]},\"453\":{\"h\":\"使用\",\"t\":[\"请大家思考一个问题：\",\"如果不创建对象，能够直接访问类中的成员变量和成员方法吗？\",\"很明显是不可以的\",\"注意:\",\"无论成员变量还是成员方法，都是属于对象的！必须创建对象才能访问它们！\",\"实际上不同对象，访问类中同一个成员变量和成员方法的结果完全可能是不同的！！\",\"对象创建出来后，大致可以做以下操作：\",\"直接输出对象名\",\"和数组直接输出数组名是一样，默认情况下，直接打印对象名得到的是：\",\"该类的全限定类名 + \\\"@\\\" + 十六进制的地址值\",\"可以通过==进行地址值的比较\",\"使用对象获取对象的属性和行为：\",\"访问属性（获取属性值和修改属性值）\",\"语法：\",\"数据类型 变量名 = 对象名.成员变量; \",\"通过上述方式就可以直接获取属性值了，修改属性值也是类似的做法：\",\"对象名.成员变量 = 值; \",\"注：对象中的成员变量，类似于数组对象中的元素，它们都具有默认初始化和默认值！！！\",\"而具体默认值是什么，也和数组对象中的元素一致，不再赘述！！\",\"调用行为（方法）\",\"语法：\",\"对象名.成员方法名(实参); \",\"如果方法有返回值，还可以接收返回值。\"]},\"454\":{\"h\":\"注意事项\",\"t\":[\"类可以嵌套定义称之为内部类， 但是请现在不要嵌套定义类，一个Java文件中定义多个class应该并列而不是包含。\",\"一个Java文件中的多个class是同包（文件夹）关系。\",\"一个类当中，应该开门见山的定义成员变量，而后再写成员方法。\",\"类中没有的属性和行为，对象是不可能有的，类是模板，模板中有才能体现在对象中。\",\"使用new关键字就会创建新的对象，两条new语句创建的对象是完全独立的。\",\"成员变量，在类的全局生效，不像局部变量仅在作用域内生效！成员变量，在整个类体中生效，在整个类中的成员方法中都可以访问它！\",\"学习目标:\",\"了解类是一种自定义数据类型\",\"了解类加载\"]},\"455\":{\"h\":\"基本概念\",\"t\":[\"先回顾一下，在Java基础语法部分，我们给出的数据类型的概念/定义：\",\"数据类型： 表示的是一组数据的集合，和基于该数据集合的一组合法操作。\",\"那么这个定义能不能套在引用数据类型中呢？能否用数据类型的概念来统一基本数据类型和引用数据类型呢？\",\"在类的定义中，我们知道类中的成员包括2部分：\",\"成员变量\",\"成员方法\",\"成员变量本质上就是数据，成员方法本质上就是操作，那么假设做以下类比：\",\"数据的集合： 类中成员变量的集合\",\"操作的集合： 类中成员方法的集合\",\"于是，就可以做出以下总结：\",\"一个类的定义，实际上就是定义了一种全新的数据类型，一种自定义的数据类型。\",\"这种完全不同于基本数据类型的数据类型，我们称之为\\\"引用数据类型\\\"。\"]},\"456\":{\"h\":\"类加载介绍\",\"t\":[\"当我们在程序中使用一个基本数据类型时，由于基本数据类型是JVM当中已经预先定义好的（所以基本数据类型叫\\\"内置数据类型\\\"），JVM可以清楚的知道这个基本数据类型变量在内存中的存储方式（占用空间大小、结构等等），JVM能够正常开辟空间，正常给变量初始化赋值。\",\"但是，并不是内置数据类型，而是我们自定义的数据类型。\",\"现在我们要根据一个类来创建它的对象，要让JVM帮助我们开辟空间创建引用和对象，JVM怎么知道到底要创建什么呢？难道它未卜先知吗？\",\"显然是不可能的，某个类在一开始并不被JVM——它不知道类中有什么，必然不可能做任何操作。\",\"所以在对某个类做任何操作之前，都需要让JVM来这个类型。\",\"在Java中，把JVM一个类的过程，称之为类加载\",\"关于类加载：\",\"类加载的具体过程，我们后面会详细学习。这里我们先不用了解它的详细过程。\",\"类加载是通过把某个类的二进制字节码文件（class文件）通过I/O流的形式，读取进JVM内存中的方法区实现的。\",\"通过读取二进制字节码文件，并加载进JVM内存。这是JVM了解这个类型的过程。\",\"类加载之后，就可以做很多类型相关的操作了。\",\"类加载要在创建对象之前进行，换句话说创建一个类的对象必然触发该类的类加载！\",\"我们通过画对象内存图，来展示这一过程：\",\"一个对象的内存图，一个对象的创建过程。(创建1个Student对象)\",\"三个对象的内存图，其中有两个引用指向同一个对象。(创建3个Teacher对象,并进行显式赋值)\",\"image-20230203113313156\",\"image-20230203114947028\",\"总结：\",\"一个类的类加载在一次程序运行过程中，最多只有一次。\",\"多个引用指向同一个对象时，某个引用修改了对象的状态（成员变量的取值），再用其它引用访问会得到修改后的结果。\",\"注：这一点实际上和数组是一样的。\",\"类加载IO流操作, 很耗费性能，所以JVM在进行类加载时是\\\"懒加载\\\"的, 迫不得已才加载.\",\"我们把一定会触发类加载的场景，称之为类加载的时机，目前已经学过的有：\",\"首次创建该类对象\",\"启动该类中的main方法\",\"学习目标:\",\"掌握局部变量与成员变量的区别\",\"局部变量和成员变量是Java程序开发时，最常见的两种变量类型，所以一定要搞清楚，它们之间的不同。\"]},\"457\":{\"h\":\"两者的区别\",\"t\":[\"局部变量和成员变量的比较，我们从以下五个方面去比较：\",\"在类中定义的位置不同\",\"在内存中的位置不同\",\"生命周期不同\",\"有无默认初始化不同\",\"作用范围\",\"在类中定义的位置不同\",\"局部变量定义在：方法、方法的形参或者代码块结构等局部位置。\",\"成员变量 定义在：类体中、非局部位置的成员位置。\",\"在内存中的位置不同\",\"局部变量存储在栈上的栈帧中\",\"成员变量存储在堆中的对象中\",\"生命周期不同\",\"局部变量随着方法的执行，而被创建，随着方法的执行结束就会被销毁。局部变量和方法\\\"同生共死\\\"。\",\"成员变量在对象创建以后就存在了，对象被销毁回收内存自然就不存在了。\",\"但实际上只要该对象栈上的引用被销毁，对象成为\\\"垃圾\\\"，对象中的成员变量也就失去意义了。\",\"有无默认初始化不同\",\"局部变量没有默认初始化过程，必须手动初始化赋值。\",\"成员变量，有默认的初始值。和数组一样，这里不再赘述。\",\"作用范围\",\"局部变量只在作用域的局部生效。\",\"成员变量在整个类的成员方法中都可以使用，所以很多书籍也把成员变量称之为\\\"全局变量\\\"。\"]},\"458\":{\"h\":\"成员变量的赋值\",\"t\":[\"限于目前的学习进度，其实你只知道两种给成员变量赋值的手段：\",\"默认初始化，具有默认值。\",\"显式赋值。即在类中定义成员变量时，直接了当的给出该成员变量的取值，就是显式赋值！比如：\",\"成员变量的显式赋值演示\",\"class Student{ // 类体 String name = \\\"张三\\\"； } \",\"显式赋值和默认初始化赋值的顺序，任何时候都要记住，对象中的元素，默认初始化永远是第一步！在任何给成员变量赋值的手段执行前，默认初始化都已经执行了！\",\"可以认为默认初始化是JVM在创建对象的内存结构时，它给出的！\",\"学习目标:\",\"掌握this关键字的使用\"]},\"459\":{\"h\":\"引例\",\"t\":[\"学习完对象与类后，做以下练习：\",\"创建一个汽车类，有颜色（color）和速度（speed）两个属性，行为是可以跑（run）。\",\"实现：\",\"在run成员方法中访问速度和颜色两个属性，调用该方法查看结果。\",\"在run成员方法的形参列表中，添加一个局部变量speed，不修改方法体，调用该方法查看结果。\",\"思考：\",\"两次方法调用的结果一样吗？为什么？\",\"如果我想在2中得到1的访问结果，怎么办呢？\",\"code\",\"public class Demo { public static void main(String[] args) { // 创建Car对象 car car = new car(); // 调用成员方法 //car.run(); car.run(200); } } class car{ // 定义成员变量 String color = \\\"黑色\\\"; double speed = 120.0; //// 定义成员方法 //public void run(){ // System.out.println(color + \\\"的车在高速公路上以\\\" + speed + \\\"公里每小时疾驰!\\\"); //} // 定义成员方法 public void run(double speed){ System.out.println(color + \\\"的车在高速公路上以\\\" + this.speed + \\\"公里每小时疾驰!\\\"); } } \",\"很明显，由于就近原则的影响：\",\"这个时候，如果还想访问同名成员变量，普通的手段是做不到了，就需要this关键字来实现访问。\"]},\"460\":{\"h\":\"概念\",\"t\":[\"this关键字（重点）：\",\"Java类中的每个成员方法的形参列表中都隐含了一个传参（隐式传参），传入的是当前对象，用this关键字指向!(为什么类中的所有成员方法都可以访问到成员变量---->就是因为this的存在)\",\"所以：\",\"this是一个引用，这个引用指向当前对象。\",\"何为当前对象？\",\"很多同学，在初学this时，会经常疑惑何为当前对象呢？\",\"其实非常简单：\",\"this指向当前对象，是类中成员方法的一个隐式传参。\",\"成员方法总会需要一个对象，使用对象名点来调用，那么这个调用该成员方法的对象，就是当前对象！\",\"Demo\",\"Student stu = new Student(); stu.study(); stu.sleep(); \",\"验证当前对象就是调用方法的那个对象\",\"package _04oop.com.cskaoyan._02this._02verfiy; / * @description: * @author: 景天 * @date: 2022/11/8 9:55 / public class Demo { public static void main(String[] args) { // 创建对象 Student student = new Student(); // 调用方法 student.printThis(); // 打印对象 System.out.println(student); } } class Student{ // 定义成员方法 public void printThis(){ System.out.println(this); } } \"]},\"461\":{\"h\":\"this关键字的作用\",\"t\":[\"既然this已经指向当前对象，是一个引用，那么它基本的用途就有：\",\"在成员方法中，用this引用去访问类中成员变量和调用类中成员方法。由于this本身就是隐含的，所以一般情况下，可以省略this，直接访问类中成员。\",\"特殊情况下，当成员方法中的局部变量和成员变量同名时，可以用 \\\"this.\\\"访问 来表示访问同名成员变量，来和同名局部变量做区分。这种情况，this是不能省略的。\",\"在成员方法中只要使用 \\\"this.\\\"访问 一个变量，那么该变量一定是成员变量。在代码比较复杂的情况下，可以显著增加代码可读性, 可以使用this.成员变量对成员变量进行赋值--->set方法\"]},\"462\":{\"h\":\"注意事项\",\"t\":[\"this指向当前对象的隐含传参，必须是在普通成员方法中，加static的方法中，没有该this传参。（所以static方法不能直接访问类的成员，需要先创建对象才能访问。）\",\"既然this指向当前对象，那么不同的this指向的对象必然不同。\"]},\"463\":{\"h\":\"引例\",\"t\":[\"创建一个教师类，有课程和年龄两个属性，行为是上课。\",\"现在我们需要创建以下对象：\",\"18岁的Java老师对象\",\"28岁的C++老师对象\",\"30岁的Python老师对象\",\"...\",\"按照之前我们的做法，需要先创建出对象，再进行成员变量的赋值。\",\"Code\",\" Teacher teacher = new Teacher(); teacher.course = \\\"Java\\\"; teacher.age = 20; teacher.teach(); Teacher teacher2 = new Teacher(); teacher2.course = \\\"C++\\\"; teacher2.age = 21; teacher2.teach(); Teacher teacher3 = new Teacher(); teacher3.course = \\\"Python\\\"; teacher3.age = 22; teacher3.teach(); \",\"如果属性很多, 需要创建很多对象，就有点过于麻烦了。\",\"对象的属性，能不能\\\"出厂\\\"的时候就设定好呢？想要在创建教师对象时，就直接指定这个对象的属性？\",\"有这种需求时，就需要构造方法（constructor，也叫构造器）来完成了。\"]},\"464\":{\"h\":\"构造器语法\",\"t\":[\"构造方法也是方法，但属于一种特殊的方法\",\"[访问权限修饰符] 类名(形参列表){ // 构造方法体 } \",\"说明:\",\"权限修饰符先使用public\",\"构造方法名必须跟类名相同(一模一样,包括大小写)\",\"构造方法没有返回值, 也不需要写返回值\",\"形参列表可以为空, 称为无参构造方法,非空为有参构造方法\",\"构造方法体，和一般方法类似，可以写语句\"]},\"465\":{\"h\":\"构造器作用与使用\",\"t\":[\"构造器的作用是用来给成员变量赋值的，完成对对象的初始化\",\"说明：\",\"new关键字去创建对象的时候，JVM自动去调用构造方法，构造方法无法通过普通方法的调用方式调用。\",\"构造器的作用不是创建对象，创建对象是JVM的事情。构造器只是告诉JVM在创建对象过程中，给成员变量赋什么值。\",\"使用方式是：\",\"new 类名(实参列表); \",\"通过实参列表的不同，来判断调用哪个构造器。这实际也是方法重载的应用！\",\"需求:\",\"使用构造方法改进引例, 在创建教师对象时，就直接指定这个对象的属性(完成成员变量的赋值操作)\",\"Code:\",\"package _04oop.com.cskaoyan._03constructor._02defineuse; / * @description: * @author: 景天 * @date: 2022/11/8 10:04 / /* 使用构造方法改进引例, 在创建教师对象时， 就直接指定这个对象的属性(完成成员变量的赋值操作) 1. 18岁的Java老师对象 2. 28岁的C++老师对象 3. 30岁的Python老师对象 */ public class Demo { public static void main(String[] args) { // 创建对象 Teacher t1 = new Teacher(\\\"Java\\\", 18); Teacher t2 = new Teacher(\\\"C++\\\", 28); Teacher t3 = new Teacher(\\\"Pyhond\\\", 30); // 调用方法 t1.teach(); t2.teach(); t3.teach(); } } // 定义教师类 class Teacher{ // 定义成员变量 String course; int age; /* [访问权限修饰符] 类名(形参列表){ // 构造方法体 } */ // 无参构造方法 public Teacher(){ // 方法体 System.out.println(\\\"无参的构造方法执行了\\\"); } // 有参构造方法 public Teacher(String tCourse, int tAge){ // 方法体 System.out.println(\\\"有2个参数的构造方法执行了\\\"); // 给成员变量赋值 course = tCourse; age = tAge; } // 定义成员方法 public void teach(){ System.out.println(age + \\\"的老师讲\\\" + course); } //public void teach(String name){ // System.out.println(age + \\\"的老师讲\\\" + course); //} } \"]},\"466\":{\"h\":\"注意事项与使用细节\",\"t\":[\"一个类中，是允许同时定义多个构造方法的，即构造方法重载，多个构造器的形参必须不同。\",\"比如: 我们可以给Teacher类定义一个构造器, 用来创建对象的时候, 只指定课程, 不指定年龄\",\"构造方法的名字必须和类名一模一样\",\"构造器没有返回值\",\"构造器是完成对象的初始化(给对象赋值), 并不是创建对象, 创建对象时, 系统根据实参列表自动调用该类的构造器\",\"类中默认提供的无参构造方法，是在该类没有任何构造器的情况下才有的。但是如果类中有任一构造器（有参/无参），那么就没有默认无参存在了\",\"在构造器中也会隐含this传参, 我们可利用this对成员变量进行赋值, 也可以使用快捷键, alt + insert快速生成构造器.\",\"构造器中还可以用this表示调用其它构造器，语法：\",\"this(实参列表); \",\"表示调用类中的其它构造器，根据实参列表决定调用哪个构造器。\",\"注意，在构造器中使用this(实参)表示调用类中其他构造器时，这行代码一定要处在构造器代码的第一行！\",\"当然，既然必须在第一行，那么也只能用一次了。\"]},\"467\":{\"h\":\"构造器的赋值顺序\",\"t\":[\"这里我们不妨总结一下，学完构造器后，三种给成员变量赋值的方式：\",\"通过下面的例子分析程序执行流程 , 以上三种赋值方式的执行顺序\",\"class Person{ String name; int age = 20; public Person(String name, int age) { this.name = name; this.age = age; } public Person() { } } // 创建Person对象,成员变量的值分别是什么 Person p = new Person(\\\"张三\\\", 30); \",\"执行流程:\",\"加载Person类信息, 只会加载一次\",\"堆中分配空间\",\"完成对象初始化 \",\"默认初始化\",\"显示赋值\",\"构造器赋值\",\"堆中的对象的地址返回给p(对象的引用)\",\"在各式各样给成员变量赋值的方式中，构造器是最后执行的！！！\"]},\"468\":{\"h\":\"对象创建流程\",\"t\":[\"Debug练习 对于下列程序代码，请指出创建Student对象，程序每一步的执行流程：\",\"构造器Debug模式练习\",\"public class Demo{ public static void main(String[] args){ Student stu = new Student(18,\\\"王冰冰\\\"); } } class Student { int age = 10; String name = \\\"张三\\\"; double a = 100; public Student(int age) { System.out.println(\\\"Student age\\\"); this.age = age; } public Student() { } public Student(int age, String name) { this(age); System.out.println(\\\"Student age，name\\\"); this.name = name; } } \",\"在这个案例中，我们发现Student双参构造器中，有使用this调用单参构造器，那么它们的执行顺序是：\",\"类加载不要忘记了。\",\"程序会先找到，Student的双参构造器，但是并不会执行，而是\",\"先跳转执行this构造器，但是this构造器中的代码，也不会立刻执行（因为构造器赋值一定最后执行），而是\",\"先从上到下执行成员变量的显示赋值，然后\",\"跳回执行this构造器代码\",\"最后执行双参构造器代码\"]},\"469\":{\"h\":\"对象与类\",\"t\":[\"完成以下案例，思考一下怎么能够找到系统中类、对象究竟是哪些？\",\"用面向对象的思想模拟LOL当中盖伦的战斗\",\"用面向对象的思想模拟植物大战僵尸\",\"如何从需求中找到对象和类呢？\",\"对象描述的是程序世界中的个体/实体，所以一般都是名词。\",\"抽取出全体对象的共性特征，也就是成员变量和方法，就可以定义一个类。\",\"注意事项：\",\"对象之间如果需要交互，可以考虑持有对方的引用作为成员变量。\",\"日常开发中，不建议随便把很多类定义在同一个Java文件中。\",\"正确情况下，建议一个Java文件中，仅定义一个public class和文件名保持一致。\",\"当然，如果确有需求，也是可以定义非public class的。（少见但不是见不到）\",\"一个Java文件下的所有类，属于同包关系。\",\"LOL\",\"public class Demo { public static void main(String[] args) { Legend galen = new Legend(\\\"Galen\\\", \\\"沉默打击\\\", \\\"勇气\\\", \\\"爱的魔力转圈圈\\\", \\\"大宝剑\\\"); galen.fight(); } } // 英雄类 class Legend { String name; String skillQ; String skillW; String skillE; String skillR; /* 定义构造器,从代码规范上来说,构造器写在 成员变量的下面 成员方法的上面 而且都要写在一起(实际上所有构造方法重载的方法都应该写在一起) 写在一起的顺序: 可以按照参数个数的多少去排列,个数少的在上面,多的在下面 */ public Legend() { } public Legend(String name, String skillQ, String skillW, String skillE, String skillR) { this.name = name; this.skillQ = skillQ; this.skillW = skillW; this.skillE = skillE; this.skillR = skillR; } public void fight() { System.out.println(\\\"名字为\\\" + name + \\\"的英雄,正在使用\\\"+skillR+\\\"技能战斗!\\\"); } } \",\"植物大战僵尸\",\"image-20230206095706735\",\"public class Plant { String name; int price; int hp; // 攻击力 int damage; /* 在开发中为了方便两个对象之间的交互 往往会让某个对象持有另外一个对象的引用作为自身的成员变量 这样对象之间的交互会更加灵活,是常用的做法 */ Zombie plantZ; public Plant() { } public Plant(String name, int price, int hp, int damage) { this.name = name; this.price = price; this.hp = hp; this.damage = damage; } // 行为 public void attack() { System.out.println(name + \\\"正在攻击\\\" + plantZ.name); } public void beAttacked() { System.out.println(name + \\\"正在被\\\" + plantZ.name + \\\"攻击,现在还剩下\\\" + (hp - plantZ.damage)); } } public class Zombie { String name; int hp; // 攻击力 int damage; double speed; Plant zombieP; public Zombie() { } public Zombie(String name, int hp, int damage, double speed) { this.name = name; this.hp = hp; this.damage = damage; this.speed = speed; } // 行为 public void attack() { System.out.println(name + \\\"正在攻击\\\" + zombieP.name); } public void beAttacked() { System.out.println(name + \\\"正在被\\\" + zombieP.name + \\\"攻击,现在还剩下\\\" + (hp - zombieP.damage)); } public void move() { System.out.println(name + \\\"正在以\\\" + speed + \\\"的速度,接近你的脑子~~\\\"); } public void eat() { System.out.println(name + \\\"吃掉了你的脑子~真香~\\\"); } } \"]},\"470\":{\"h\":\"值传递练习\",\"t\":[\"学习对象与类后，再复习一下如果方法的参数是需要一个对象，值传递是怎样进行的。\",\"练习： 定义一个学生类，该类具有一个int属性age 1.在测试类中写一个方法，交换两个Student对象的age属性 请问能够交换成功吗？原因是什么？\",\"2.在测试类中写一个方法，交换两个Student对象的引用（地址） 请问能够交换成功吗？原因是什么？\",\"结论：\",\"Java只有值传递\",\"Java当中的方法可以改变对象的状态（成员变量的取值）但是无法直接交换两个引用（无法改变局部变量）\"]},\"471\":{\"h\":\"成员变量赋值顺序练习\",\"t\":[\"public class Demo { public static void main(String[] args) { Student s = new Student(18, \\\"长风\\\"); System.out.println(s.age); System.out.println(s.name); System.out.println(s.var); System.out.println(s.cat.price); } } class Student { int age = 10; String name = \\\"张三\\\"; double var = 20; public Student(int age) { System.out.println(\\\"Student age\\\"); this.age = age; } public Student() { } public Student(int age, String name) { this(age); System.out.println(\\\"Student age,name\\\"); this.name = name; } Cat cat = new Cat(1000); Cat c2; } class Cat { double price; public Cat() { } public Cat(double price) { System.out.println(\\\"Cat price\\\"); this.price = price; } } \",\"思考程序输出的顺序，搞清楚其中赋值的顺序。\",\"1.Demo类加载,main方法执行 2.Student类加载,创建Student对象,调用2参构造 3.此时2参构造不会执行,会因为this(单参)调用单参构造, 4.此时单参构造不会执行,会先对对象中成员变量默认初始化,进行默认赋值 5.进行显式赋值 6.Cat cat = new Cat(1000);执行到这里,会触发Cat类加载 7.调用Cat单参构造方法 8.Cat单参构造方法先不执行,先默认赋值,没有显式赋值,执行构造方法进行赋值 9.Student类中的成员全部显式赋值成功--->进行构造器赋值 10.Student的单参构造器先执行,再执行两参构造器 11.Student对象创建成功并完成了赋值--->回到main方法继续执行 12.输出相应结果 \",\"学习目标:\",\"掌握静态成员变量的使用与特点\",\"掌握静态成员方法的使用与特点\",\"掌握静态与非静态的区别\"]},\"472\":{\"h\":\"引例\",\"t\":[\"场景如下:\",\"一场篮球比赛, 梦之队有5名顶级球员Kobe, James, Stephen...... 都是神射手擅长投3分,投篮必进\",\"每进一球, 队伍分数+3, 比赛结束, 统计一下该队伍得分情况, 写程序模拟这个场景.\",\"思路:\",\"main里面定义int count, 用来记录分数\",\"每当有1个球员进球, 分数+3\",\"Code:\",\"package _04oop.com.cskaoyan._04static._01introuction; / * @description: * @author: 景天 * @date: 2022/11/11 9:48 / /* 一场篮球比赛, 梦之队有5名顶级球员Kobe, James, Stephen...... 都是神射手擅长投3分,投篮必进 每进一球, 队伍分数+3, 比赛结束, 统计一下该队伍得分情况, 写程序模拟这个场景. 思路: - main里面定义int count, 用来记录分数 - 每当有1个球员进球, 分数+3 */ public class Demo { public static void main(String[] args) { // 定义一个计数器 int count = 0; Player p1 = new Player(\\\"Kobe\\\"); p1.shot(); count += 3; System.out.println(\\\"分数: \\\" + count); Player p2 = new Player(\\\"James\\\"); p2.shot(); count += 3; System.out.println(\\\"分数: \\\" + count); Player p3 = new Player(\\\"Stephen\\\"); p3.shot(); count += 3; System.out.println(\\\"分数: \\\" + count); } } // 定义一个Player类 class Player { // 定义成员变量 String name; public Player(String name) { this.name = name; } // 定义成员方法 public void shot() { System.out.println(name + \\\"进球了!\\\"); } } \",\"问题分析:\",\"int count这个值是个局部变量, 独立于对象之外的, 使用起来不是很方便\",\"引出来static关键字.\"]},\"473\":{\"h\":\"静态成员\",\"t\":[\"根据static修饰的内容不同, 有以下分类\",\"静态成员变量, static修饰成员变量 (有的资料里也称为类变量, 类属性指的都是静态成员变量)\",\"静态成员方法, static修饰成员方法(有的资料里也称为类方法, 指的还是静态成员方法)\",\"统称为类的静态成员\"]},\"474\":{\"h\":\"静态成员变量\",\"t\":[\"基本语法\",\"[访问权限修饰符] static 数据类型 变量名; \",\"使用与特点:\",\"和普通成员变量一样,都具有默认值（默认值和普通成员变量是一样的）\",\"静态成员变量属于类的，完全不需要创建对象使用。\",\"访问和使用静态成员变量不推荐使用，而应该使用！\",\"静态成员变量的访问/赋值/使用都不依赖于对象, 而是依赖于类\",\"使用案例:\",\"设计一个int 类型的count值来表示球队得分, 每有一个球员得分, 那么count值+3, 要求count被所有对象所共享的即可. 使用静态成员变量修改之前的引例.\",\"class Player{ String name; // 使用static关键字修饰成员变量, 使其成为静态成员变量. static int count; } \",\"Code\",\"package _04oop.com.cskaoyan._04static._02static_field; / * @description: * @author: 景天 * @date: 2022/11/11 9:58 / /* 设计一个int 类型的count值来表示球队得分, 每有一个球员得分, 那么count值+3, 要求count被所有对象所共享的即可. 使用静态成员变量修改之前的引例. */ public class Demo { public static void main(String[] args) { // 静态成员变量可以通过类名.方式访问 // 推荐使用类名.方式访问 System.out.println(\\\"得分: \\\" + Player.count); // 创建Player对象 Player p1 = new Player(\\\"Kobe\\\"); // 投篮 p1.shot(); // 更改分数 + 3 p1.count += 3; System.out.println(\\\"得分: \\\" + p1.count); // 创建Player对象 Player p2 = new Player(\\\"James\\\"); // 投篮 p2.shot(); // 更改分数 + 3 p2.count += 3; System.out.println(\\\"得分: \\\" + p2.count); // 创建Player对象 Player p3 = new Player(\\\"Stephen\\\"); // 投篮 p3.shot(); // 更改分数 + 3 p3.count += 3; System.out.println(\\\"得分: \\\" + p3.count); } } // 定义一个Player类 class Player { // 定义成员变量 String name; // 定义一个静态的成员变量,表示球队得分 static int count; public Player(String name) { this.name = name; } // 定义成员方法 public void shot() { System.out.println(name + \\\"进球了!\\\"); } } \",\"内存及原理解析:\",\"静态成员的访问并不依赖于创建对象，可以直接通过类名访问，其原因在于：\",\"某个类的某个静态成员变量只有一份，且被所有对象共享，属于类，无需创建对象使用。\",\"image-20230206113655861\",\"注意事项:\",\"局部变量，已经被方法限制了作用域，不能用static修饰它！\"]},\"475\":{\"h\":\"静态成员方法\",\"t\":[\"基本语法\",\"[访问权限修饰符] static 返回值类型 方法名(形参列表){ //方法体 } \",\"使用与特点\",\"无需创建对象就可以直接通过类名点直接调用。\",\"同一个类中的static方法互相调用可以省略类名，直接用方法名调用。（这就是我们之前方法的调用）\",\"注意事项:\",\"一个类中，静态方法无法直接调用非静态的方法和属性，也不能使用this，super关键字（super后面会讲）,静态的方法只能访问静态的\",\"经典错误：Non-static field/method xxx cannot be referenced from a static context\",\"原因：静态方法调用的时候，完全有可能没有对象，没有对象普通成员就无法访问。\",\"普通成员方法当中，既可以访问静态成员的, 也可以访问非静态成员。普通成员方法访问任意的\",\"访问静态成员变量的时候，使用类名.变量名的形式访问，以示区别，增加代码可读性\"]},\"476\":{\"h\":\"类加载时机\",\"t\":[\"静态成员需要在类加载时期，完成准备，类加载结束就能够使用。\",\"所以访问类的静态成员，一定会触发该类的类加载。\",\"总结，到目前学习过的类加载时机：\",\"new直接创建该类的对象。(首次)\",\"启动该类中的main方法。\",\"访问该类的静态成员（方法和变量) (首次)\"]},\"477\":{\"h\":\"static VS 非static\",\"t\":[\"当我们了解static成员的特点后，静态成员和非静态成员的区别就很明显\",\"我们从以下四个角度比较（拿成员变量为例）\",\"成员的所属\",\"在内存中的位置\",\"在内存中出现的时间\",\"调用方式\",\"其比较的结论如下：\",\"所属不同 \",\"静态成员变量属于类，所以也称为为类变量\",\"（普通）成员变量属于对象，所以也称为对象变量（实例变量）\",\"在内存中的位置不同 \",\"静态变量存储于方法区的静态域(堆上的这个类所对应的字节码文件对象,即Class对象中)，被所有对象共享\",\"成员变量存储于堆内存，每个对象独享自己的成员变量\",\"在内存中出现时间不同 \",\"静态变量随着类的加载而加载，比成员变量出现的要早\",\"成员变量随着对象的创建而存在\",\"调用方式不同 \",\"静态变量可以通过类名调用，也可以通过对象调用（不推荐）\",\"成员变量只能通过对象名调用，必须创建对象\"]},\"478\":{\"h\":\"使用场景\",\"t\":[\"这里，根据static关键字的一些特点来明确它的使用场景，给大家以后使用static关键字做一下参考。\",\"静态成员变量：\",\"属于全体对象所共享而不是独属于某个对象的成员变量\",\"所以当存在需要所有对象共享的变量时，应该使用static修饰的静态成员变量。\",\"在整个类全局独一份的（因为类加载只有一次）\",\"所以，如果希望某个变量在类的全局独一份时，应该使用static修饰的静态成员变量。\",\"举例1 :\",\"创建一个学生类，用来描述我们班全体同学\",\"要求：\",\"属性：姓名，性别，年龄，学号，学校信息\",\"行为：吃饭，学习\",\"我们简单思考可以知道, 无论你是张三或者李四, 学校信息这个属性实质上应该是被全体同学所共有的属性，而不是独属于某个对象的, 这种场景下就可以使用static 修饰学校信息\",\"举例2:\",\"创建一个学生类, 有2个属性: 姓名String name , 学号int id\",\"统计外部创建Student类对象的个数 假设给Student类的对象自动编号\",\"这个编号第一次创建对象是10001 随后每创建一个新对象就+1\",\"package _04oop.com.cskaoyan._04static._05use_case; / * @description: * @author: 景天 * @date: 2022/11/11 15:04 / /* 利用了static成员变量类全局唯一 且被共享 统计外部创建Student类对象的个数 假设给Student类的对象自动编号 这个编号第一次创建对象是10001 随后每创建一个新对象就+1 */ public class Demo { public static void main(String[] args) { Student s1 = new Student(); System.out.println(s1.id); Student s2 = new Student(); System.out.println(s2.id); Student s3 = new Student(); System.out.println(s3.id); Student s4 = new Student(); System.out.println(s4.id); System.out.println(\\\"共计创建了\\\" + Student.count + \\\"个学生\\\"); } } class Student{ // 姓名 String name; // 学号 int id; // 统计学生数量 static int count; // 初始学号 static int initNumber = 10001; public Student() { // 学生数量+1 count++; // 学号递增 this.id = initNumber++; } } \",\"静态成员方法：\",\"静态方法的最主要特点就是\",\"所以如果希望一个方法能够更方便快捷的去调用，可以把它声明为static修饰的静态成员方法。\",\"根据静态成员方法调用简单的特点，当一个类中全部都是静态成员方法时，\",\"类中的所有方法的调用都可以使用类名点去完成，这就是Java当中的\\\"工具类\\\"。比较典型的有：数组工具类Arrays、集合工具类Collections、数学工具类Math等等。\"]},\"479\":{\"h\":\"static执行顺序练习\",\"t\":[\"请说明程序的输出结果，并分析流程\",\"public class Demo { static Cat cat = new Cat(); Dog dog = new Dog(); Dog dog2; static Dog dog3; public static void main(String[] args) { System.out.println(\\\"hello world!\\\"); Demo d = new Demo(); } public Demo() { System.out.println(\\\"demo\\\"); } } class Cat { static Dog dog = new Dog(); public Cat() { System.out.println(\\\"cat\\\"); } } class Dog { public Dog() { System.out.println(\\\"dog\\\"); } } \",\"你能得出什么结论? 1.静态成员变量的显式赋值，是在类加载过程中执行的。不管何种方式触发该类的类加载，这个过程都要执行。 2.类加载可以连环触发，一个类可以最先开始类加载，但是不一定会最先完成类加载 3.无论是静态成员变量还是成员变量，只有声明且没有其它任何赋值方式赋值，那就只有默认值。 \",\"学习目标:\",\"掌握匿名对象的概念\",\"掌握匿名对象的用途与特点\"]},\"480\":{\"h\":\"什么是匿名对象\",\"t\":[\"在Java当中，匿名对象指的就是没有名字的对象。\",\"或者，说的更清楚一点，就是：\",\"匿名对象的语法很简单，只需要在方法等位置中写下列语法：\",\"new 类名(); \",\"以上语法就得到了一个匿名对象，从实质上看：\",\"该对象没有栈上的引用指向，没有所谓的\\\"对象名\\\"，是一个。\"]},\"481\":{\"h\":\"匿名对象的用途\",\"t\":[\"匿名对象主要有两个用途（常见用途）：\",\"使用匿名对象作为方法的实参\",\"当定义以下方法时，表示该方法需要传入一个对象（这个对象必须是\\\"类名\\\"的对象或者子类对象）\",\"[修饰符列表] 返回值类型 方法名(类名 对象名){ //方法体 } \",\"这个时候，常规的做法是创建对象，然后传入引用。但实际上这里可以直接传入匿名对象。\",\"假如一个test方法需要传入一个Student对象，就可以这么写：\",\"test(new Student()); \",\"使用匿名对象作为方法的返回值\",\"当定义以下方法时，表示该方法需要传入一个对象（这个对象必须是\\\"类名\\\"的对象或者子类对象）\",\"[修饰符列表] 类名 方法名(形参列表){ //方法体 return (匿名对象); } \"]},\"482\":{\"h\":\"匿名对象的优缺点\",\"t\":[\"优点：\",\"匿名对象在使用完毕后会立刻成为\\\"垃圾\\\"等待GC回收，从理论角度上来说，可以提升内存利用率。\",\"但是，并不是一个对象更早成为\\\"垃圾\\\"就会更好回收，这个优点仅是理论上的。\",\"缺点：\",\"匿名对象由于没有引用指向，所以它是，用完后就无法再次使用了。\"]},\"483\":{\"h\":\"匿名对象使用场景\",\"t\":[\"我们根据匿名对象的优缺点，很容易总结出匿名对象的使用场景：\",\"需要一个对象去实现功能，并且该对象仅需使用一次即可，为了代码简洁，推荐使用匿名对象\",\"但是，如果一个对象可能会被复用，像以下代码频繁创建匿名对象是得不偿失的\",\"不要滥用匿名对象\",\"test(new Student()); test(new Student()); test(new Student()); ... \",\"创建对象是需要耗时耗费内存空间的，不要为了一时的方便，频繁创建匿名对象。\",\"总之：\",\"如果某个对象，仅使用一次，使用匿名对象简洁方便。\",\"但如果有多次使用某个类的对象的需求时，频繁使用匿名对象会导致频繁创建对象，降低代码性能，得不偿失！\",\"学习目标\",\"掌握代码块的几种分类\",\"掌握代码块的作用与特点\",\"掌握几种代码块的执行顺序\"]},\"484\":{\"h\":\"概述\",\"t\":[\"之前，我们理解的代码块就是为了限制局部变量的一个大括号，今天来详细的学习一下代码块。\",\"代码块的定义：由若干条Java语句组成，并且用一对大括号括起来的结构，叫做代码块。\",\"代码块的分类，根据其位置和声明方式的不同，可以分为：\",\"局部代码块\",\"构造代码块\",\"静态代码块\",\"同步代码块\",\"注：同步代码块，涉及多线程知识，后面多线程再学习，今天略过它。\"]},\"485\":{\"h\":\"构造代码块\"},\"486\":{\"h\":\"语法定义\",\"t\":[\"什么是构造代码块 ？\",\"定义在类的成员位置，使用以下声明方式声明的代码块，称之为构造代码块。\",\"//成员位置 { // 局部位置 } //成员位置 \",\"这个语法只有一个需要注意的地方：\"]},\"487\":{\"h\":\"作用\",\"t\":[\"随着构造器的执行，用于在创建对象过程中，给成员变量赋值\",\"这里总结给成员变量赋值的几种方式（创建对象过程中）：\",\"默认初始化，具有默认值\",\"显式赋值\",\"构造代码块\",\"构造器\",\"学习对象中成员变量的赋值，和赋值顺序要遵循的原则：\",\"：默认初始化，具有默认值，在对象结构存在于对象中，对象中的成员变量就已经具有了默认值。\",\"我们程序员所有能干预的赋值方式，都是在默认初始化的基础上进行的。\",\"：构造器，构造器在整个对象的成员变量赋值过程中，处在最后的阶段，最后被执行。\",\"明确以上两点后，我们现在只需要研究和的赋值顺序，\",\"经过代码测试，我们发现：\",\"这两个结构，谁写在代码书写顺序的上面，谁就先执行。\",\"后执行结构的结构，自然会覆盖先执行结构的结果。\",\"这样，类中显然会出现类似以下代码：\",\"//构造代码块 { a = 10; } int a = 1; \",\"这种代码形式，按照从上到下的顺序来看的话，显然有些奇怪——成员变量还未定义，却进行了赋值。\"]},\"488\":{\"h\":\"原理\",\"t\":[\"通过查看，我们发现编译后的代码中并不存在的结构，而是：\",\"直接将成员变量的显式赋值和构造代码块中的代码智能地加入，类所有的构造器中的前几行：\",\"所谓智能是为了保证：成员变量的显式赋值和构造代码块，按照代码的书写顺序从上到下执行！\",\"于是，我们可以得出以下结论：\",\"使用new对象的方式创建对象，不论使用哪个构造器，构造代码块都会随之执行。\",\"构造器是每一次new对象都会执行一次，所以构造代码块也会随之执行一次。\",\"构造代码块中的代码要放入构造器的首几行，\"]},\"489\":{\"h\":\"创建对象过程中的执行顺序\",\"t\":[\"总结一下到目前为止，创建对象过程中可能碰到的结构的执行顺序：\",\"new对象过程中，各种结构的执行顺序：\",\"对象结构存在后就进行默认初始化，所有成员变量都具有默认值后，再开始其余赋值操作\",\"找到new对象的那个构造器\",\"如果它的首行显式地调用了另一个构造器this(实参)\",\"（注：显式调用构造器目前指的是this调用自身构造器，其它场景这里先不考虑）\",\"那么程序会先跳转到那个构造器，但是不会立刻执行，而是：\",\"按照类中构造代码块和显式赋值的代码书写顺序，从上到下执行其中的代码，执行完毕后：\",\"跳转回this语句要指示执行的构造器，执行其中的代码，然后：\",\"跳转回new对象构造器，执行完毕后，创建对象结束。\",\"如果它的首行没有显式调用另一个构造器\",\"那么会先从上到下执行构造代码块和显式赋值代码，执行完毕后：\",\"跳转回new对象构造器，执行完毕后，创建对象结束。\"]},\"490\":{\"h\":\"实际用途\",\"t\":[\"构造代码块最大的特点就是其中的代码，最终会加入类的所有构造器中，所以依据这一点：\",\"我们可以一样的，把所有构造器都需要执行的代码，放入构造代码块中。\",\"其次，构造代码块毕竟是给成员变量赋值用的，所以：\",\"如果需要很复杂的代码完成成员变量的赋值（如果只是给一个值，用显式赋值和构造器足矣）\",\"比如需要一个算法，需要一定计算等等。在这些场景下，使用构造代码块赋值也是一个不错的选择。\"]},\"491\":{\"h\":\"练习\",\"t\":[\"创建一个类Student，类中有多个构造器，请写代码统计外部创建Student对象的次数。\",\"读程序题：\",\"代码块练习题\",\"public class Demo { public static void main(String[] args) { Cat c = new Cat(28, \\\"紫色\\\"); System.out.println(c.age); System.out.println(c.color); } } class Cat { { age = 18; System.out.println(\\\"age building block\\\"); } int age = 10; String color = \\\"黄色\\\"; { color = \\\"黑色\\\"; System.out.println(\\\"color building block\\\"); } public Cat() { } public Cat(int age) { System.out.println(\\\"age constructor\\\"); this.age = age; } public Cat(int age, String color) { this(age); System.out.println(\\\"age color constructor\\\"); this.color = color; } } \",\"说出程序输出的顺序，并说明原因。\",\"最后思考：构造代码块能不能用于给静态成员变量赋值？\"]},\"492\":{\"h\":\"静态代码块\"},\"493\":{\"h\":\"语法定义\",\"t\":[\"什么是静态代码块？\",\"定义在类的成员位置，使用以下声明方式声明的代码块，称之为静态代码块\",\"//成员位置 static{ // 局部位置 } //成员位置 \",\"这个语法只有一个需要注意的地方：\"]},\"494\":{\"h\":\"作用\",\"t\":[\"静态代码块在类中的作用\",\"随着类加载的过程而执行，静态代码块可以看成是一个在类加载过程中，会自动调用的静态方法！用于给静态成员变量赋值！\",\"这里还是想再强调一下：\",\"想要一段语句，能够在类加载过程中自动被调用，需要使用静态代码块，而不是静态方法！！\",\"这里总结一下给静态成员变量赋值的几种方式（类加载时期）：\",\"默认初始化，具有默认值\",\"显式赋值\",\"静态代码块\",\"在这三个赋值方式中，默认初始化是永远第一步进行的，和的执行顺序：\",\"按照代码的书写顺序去执行，谁写在代码顺序的上面，谁就先执行。\",\"后执行结构的结果，会覆盖掉先执行结构的结果。\",\"至于说到原理，静态代码块的执行，是JVM层面进行类加载的一种设计机制，是类加载的特殊设计机制保证的。\"]},\"495\":{\"h\":\"实际用途\",\"t\":[\"数据库中加载JDBC驱动（最经典的），也可能是最常见的。\",\"（依赖于类加载只有一次的原理）\",\"比如一些初类的始化工作，就可以放在静态代码块中完成。\",\"最常见的就是类System的初始化，源码如下：\",\"System类的初始化，依赖于本地方法的执行。\"]},\"496\":{\"h\":\"注意事项\",\"t\":[\"一些细节问题（重要）\",\"静态代码块可以近似看成一个，，所以不能在里面调用非静态。（没有对象）\",\"包括this关键字，和后面学习的super关键字，都不能使用。\",\"这意味虽然构造代码块可以给静态成员变量赋值，但静态代码块不能给成员变量赋值。\",\"说白了，还是要搞清楚，谁先谁后执行的问题！\",\"当需要使用复杂的代码给静态成员变量赋值时，可以使用静态代码块。\",\"但如果仅仅是简单的赋值，直接显式赋值即可。\",\"总得来说，静态代码块用得不多。\",\"静态代码块也经常被用来测试类加载的顺序（重要）\",\"一个类的静态代码块如果没有被执行，说明它没有被完全类加载。\"]},\"497\":{\"h\":\"补充类加载过程\",\"t\":[\"首先，一个类从被加载到JVM内存中开始，到卸载出内存为止，一个类的生命周期包括：\",\"一共是：\",\"加载（Loading）\",\"验证（Verification）\",\"准备(Preparation)\",\"解析(Resolution)\",\"初始化(Initialization)\",\"使用(Using)\",\"卸载(Unloading)\",\"注：其中，验证、准备和解析可以统称为。\",\"一个类在JVM中的生命周期，共有七个阶段。\",\"其中\\\"加载 --> 连接 ---> 初始化\\\"这三个步骤，即一个类的类加载过程。\",\"这三步主要做：\",\"主要是做通过类加载器(ClassLoader)将class字节码文件读取进JVM内存的操作, 并在内存中生成这个类对应的Class对象\",\"在过程中：\",\"验证，主要目的是为了确保class文件的字节流中包含的信息符合当前JVM的要求，不会影响JVM的安全。\",\"准备，主要目的是进行静态成员变量的默认初始化，设置初始值。\",\"这样，就保证了静态成员变量的默认初始化，永远最先进行。\",\"解析，主要目的是将符号引用替换为直接引用。（不理解算了，目前不需要详细了解）\",\"是类加载的最后一个步骤。主要目的是执行和static相关的内容，包括：\",\"执行静态成员变量的显式赋值。\",\"执行静态代码块。\",\"以上，关于类加载各步骤，大致的作用，我们就了解了。\",\"所以这里要重新认识一个概念：\",\"类加载的时机，说得更准确一点，应该是。当然，想要初始化一个类，必然要先进行加载和连接。\"]},\"498\":{\"h\":\"练习\",\"t\":[\"类加载过程练习一\",\"public class Demo { static { System.out.println(\\\"Demo类开始初始化步骤了!\\\"); } static Cat cat = new Cat(); Dog dog = new Dog(); public static void main(String[] args) { System.out.println(\\\"hello world!\\\"); Demo d = new Demo(); } public Demo() { System.out.println(\\\"demo\\\"); } } class Cat { static { System.out.println(\\\"Cat类开始初始化步骤了!\\\"); } static Dog dog = new Dog(); public Cat() { System.out.println(\\\"cat\\\"); } } class Dog { static { System.out.println(\\\"Dog类开始初始化步骤了!\\\"); } static Demo demo = new Demo(); public Dog() { System.out.println(\\\"dog\\\"); } } \",\"类加载练习二\",\"public class TestStaticDemo { public static void main(String[] args) { staticMethod(); } static TestStaticDemo ts = new TestStaticDemo(); static { System.out.println(\\\"静态代码块\\\"); } { System.out.println(\\\"构造代码块\\\"); } public TestStaticDemo() { System.out.println(\\\"无参构造器\\\"); System.out.println(\\\"a=\\\" + a + \\\",b=\\\" + b); } public static void staticMethod() { System.out.println(\\\"静态成员方法\\\"); } int a = 666; static int b = 777; static TestStaticDemo ts2 = new TestStaticDemo(); } \",\"代码块综合练习\",\"public class ExerciseBlock { static { System.out.println(\\\"main方法静态代码块！\\\"); } { System.out.println(\\\"main方法构造代码块！\\\"); } public static void main(String[] args) { System.out.println(\\\"main方法开始执行！\\\"); Star s = new Star(18,\\\"马化腾\\\"); System.out.println(Star.name); System.out.println(s.age); } } class Star{ { age = 18; Star.name = \\\"杨超越\\\"; System.out.println(\\\"我喜欢杨超越\\\"); } static String name = \\\"王菲\\\"; int age = 28; static { name = \\\"杨幂\\\"; System.out.println(\\\"我喜欢杨幂\\\"); } public Star(int age,String name) { this(age); System.out.println(\\\"age,name：构造器！\\\"); Star.name = name; Star.name = \\\"刘亦菲\\\"; } public Star(int age) { System.out.println(\\\"age：构造器！\\\"); this.age = age; } public Star() { } } \",\"通过上述程序，不难得出，代码块执行的顺序：\",\"静态代码块\",\"构造代码块\",\"构造器\",\"学习目标:\",\"会使用import\",\"知道什么是全类名\"]},\"499\":{\"h\":\"package关键字\",\"t\":[\"package这个关键字我们并不陌生，它写在Java源文件的第一行，用于声明整个Java文件下的所有类的所属包。\",\"语法：\",\"package + 包名 \",\"当然，一个Java源文件当中，只能有一个public修饰的类。其余非public修饰的类和public类都属于同包的关系。\",\"注意：\",\"package关键字的使用很简单，但是有几个需要注意的地方：：\",\"包名在书写时，如果存在多级包名，需要使用用.隔开\",\"package声明必须处在一个Java文件有效代码的第一行，否则会报错 \",\"注释不算有效代码，将package声明放在注释下面也是可以的\",\"建议将package声明永远放在Java源文件真正意义上的第一行\",\"多数情况下，我们使用idea新建Java文件是无需关心package声明的，因为idea会自动生成 \",\"但是当你从网上或者其它途径弄到的一些代码，可能会出现包名错乱的情况\",\"这时建议直接删除package声明，然后\\\"Alt + 回车\\\"类名报错的地方即可\"]},\"500\":{\"h\":\"全限定类名\",\"t\":[\"什么是全限定类名？\",\"可以唯一的、准确的定位到一个类的，由包名加上类名组成的字符串，就是全限定类名。\",\"，直接输出一个对象的引用，会打印该类的全限定类名\"]},\"501\":{\"h\":\"import关键字\"},\"502\":{\"h\":\"引例\",\"t\":[\"请按照以下步骤创建需要的类：\",\"在包名为one的包中创建一个public class Student和测试类public class Demo\",\"在包名为another的包中创建一个public class Student和public class Teacher\",\"在同名的Student类中给出同名的方法test，并给出不同的实现\",\"创建完毕后，开始进行测试工作\",\"请完成下面测试：\",\"1.在Demo类中直接创建Student对象，然后调用test方法，请问输出的结果是什么？ 2.如果想要test方法调用得出anotherpackage包中Student类的结果，需要怎么做？\",\"显然：\",\"在Test类中直接创建Student类对象时，test方法的调用结果是onepackage下Student类的方法执行结果。\",\"而如果想要test方法的调用结果体现为anotherpackage包下的Student类，就需要使用import关键字进行导包操作。\"]},\"503\":{\"h\":\"作用\",\"t\":[\"从上述案例中，我们可以总结一下编译器在查找并决定使用某个class时，它的搜索机制：\",\"在同包下时，类名是绝对唯一的，有就有，没有就没有，不存在选择的问题。\",\"这时，编译器是可以直接通过一个类名去查找到一个类的，不需要额外操作，不需要导包。\",\"这可以看成一种\\\"就近原则\\\"，同包已经存在这个类了，自然不需要去外面找。\",\"当同包下没有这个类，必须在不同包下寻找时，多个不同包中完全可能存在同名类。\",\"这时，编译器肯定是不可能直接通过类名去查找一个类了，需要程序员手动导包。\",\"手动导包的目的是明确告诉编译器应该使用哪个包下的类。\",\"使用import关键字手动导包的语法是：\",\"import 全限定类名; \",\"注意事项：\",\"import导包语句应该放在package声明之后，有效代码之前。\",\"正常情况下，我们使用某个类时，IDEA会自动导包，不用太关心这条语句的位置。\",\"像String、System、Math等常用类很明显不是同包下的类，但我们并没有进行导包操作。\",\"这是因为在Java当中的，是Java的核心类包，具有隐式的导包。\",\"注意\\\"java.lang包\\\"下的所有类，是隐式的导入了每个Java类，而不是没有导入！\",\"实际上完全可以不导包去使用不同包下类，这时要明确指出这个类的所属包，也就是要使用全限定类名。\",\"但是一般情况下，全限定类名都很长，导包仍然是更好的手段。\",\"但是导包总不是都好用，在极少的情况下：\",\"比如，在Demo类中，想要同时访问两个包onepackage、anotherpackage下的两个Student类。\",\"咋办？\",\"很简单，其中一个Student类使用全限定类名，另一个导包或者就近原则直接使用就可以了。\",\"（当然条件允许的情况下，干脆把其中一个Studnet改名会更好。）\"]},\"504\":{\"h\":\"智能导入\",\"t\":[\"import关键字存在智能导包的形式，会智能的导入需要的某个类\",\"它的语法是这样的：\",\"import + 包名.*; \",\"其中具有通配的含义，表示该包的类都会导入。\",\"智能导包是一种十分高效且方便的导包方式，\",\"所谓根据需求，即是：不导入对应包下的类就会报错，不导入不行。反之如果同包下有同名类则不会导入！\",\"例如：同包中已存在Student类，再想通过智能导包导入别的包下的Student类是无法完成的。\"]},\"505\":{\"h\":\"概述\",\"t\":[\"程序的开发，不可能是一个人完成的，而是需要分工协作的。那么怎么保证\\\"我想要被别人访问的地方，允许访问。不想让别人访问的地方，禁止访问\\\"这种合情合理的需求呢？\",\"访问权限控制符：\",\"在Java语言中，一切事物（类和类的所有成员）都具有(或显示定义或隐式定义的)访问权限，而这种语言层面的访问权限控制，是由访问权限修饰符实现的。\"]},\"506\":{\"h\":\"访问级别\",\"t\":[\"Java的访问权限的级别，是依赖包（package）来实现的。\",\"Java的访问权限级别共分为以下四个级别，访问权限从严格到宽松顺序为：\",\"private: 只能够在同一类中能够访问，私有的，外面谁都不能用。\",\"缺省(默认): 同一包中的子类或者其它类能够访问，同包中都可以使用。\",\"protected: 不同包的子类能够访问。(这个访问级别继承再学习)\",\"public: 不同包的其他类能够访问。\",\"public\",\"protected\",\"（缺省）\",\"private\",\"同一类中\",\"同一包其他类\",\"不同包子类\",\"不同包其他类\"]},\"507\":{\"h\":\"分类\"},\"508\":{\"h\":\"类的访问权限修饰符\",\"t\":[\"对于类的访问权限控制，非常简单，只有两种：\",\"public：对其他任意类都可见。\",\"（缺省的）不写任何关键字，表示对同包中的其它类可见。\",\"思考：为什么class没有私有或者protected之类的权限？\",\"这是因为，单独定义的class是一个独立的概念，它没有对谁私有，受谁保护的概念。\",\"所以一般的class的访问权限修饰符只有两种，但是类是可以嵌套定义的。\",\"内部类就有了私有之类的概念，就有了更多的访问权限修饰符。（这个后面会详细学习，先了解一下）\"]},\"509\":{\"h\":\"类中结构的访问权限修饰符\",\"t\":[\"对于的访问权限，访问权限修饰符总位于它们定义的开头位置，可以使用的修饰符有4种：\",\"public：任意类均能访问，实际就是没有限制访问权限。\",\"protected：同包中的其他类都可以访问，不同包下必须是子类才能够访问。\",\"（缺省的）什么关键字都不写，表示同包中的其他类都可以访问。\",\"private：仅对自身类中的其他成员可见。\",\"注意事项（小细节）：\",\"protected权限，涉及继承的概念，我们留到继承的章节中学习，这里直接跳过不学习！\",\"按照以往的经验，有些同学对私有private的权限有疑问，这里还是要强调一下：\",\"比如参考下列代码：\",\"private小细节\",\"// 类Student的类体中 private int age; public void test(Student s){ System.out.println(s.age); } // 类Student的类体中 \",\"方法传入了一个Student对象，虽然这里是外部调用方法传入的对象，但仍然是Student类的对象。\",\"处在Student类中，访问Student类的私有成员，不管这个Student类对象哪里来的，都是完全没问题的！\",\"局部变量，已经被作用域限制死了作用范围，访问权限对它而言毫无意义。\",\"局部变量不能使用访问权限修饰符修饰！\"]},\"510\":{\"h\":\"作用\",\"t\":[\"告诉代码的使用者，哪些地方不要触碰，哪些地方应该使用。起到警告、约束和指导代码使用者的功能。\",\"举例来说：\",\"专门提供给外界使用的，推荐使用的，用public。告诉别人：这里是你需要关注、了解和使用的地方。\",\"不应该触碰的地方，用私有private修饰，告诉别人：这里你不需要你看，也不需要你管。\",\"具体的案例是：\",\"工具类，既然所有的方法，都可以直接用去调用，不需要创建对象！\",\"既然不需要对象，那就干脆不要创建对象，直接把这个功能去掉！\",\"类中需要提供给外界使用的方法的实现过程中，经常需要一些方法。\",\"这些方法不需要提供给外界使用，仅作为内部实现功能使用。\",\"好处是显而易见的：把和给区分开来了：\",\"所以，我们就可以总结出，我们在实际开发中，使用的原则：\",\"尽量私有化，方便自己修改代码，隐藏实现细节。\",\"如果不能私有化，那也应该尽量少的给予访问权限，先从默认权限开始考虑。\",\"只有确定这个结构，一定需要在外部（尤其是不同包下）被访问时，才考虑给public，尽量少给public。\",\"权限这个东西，要吝啬，不要\\\"大方\\\"！\"]},\"511\":{\"h\":\"07. 面向对象的三大特征\"},\"512\":{\"h\":\"封装\",\"t\":[\"​ 封装就是面向对象的核心思想，将对象的属性和行为封装起来，不需要让外界知道具体的实现细节。例如，用户使用手机，只需要在屏幕上滑动点击就可以了，无须知道手机内部时如何工作的。\"]},\"513\":{\"h\":\"继承\",\"t\":[\"​ 继承主要描述的是类与类之间的关系，通过继承，可以在无需编写原有类的情况下，对原有类的功能进行扩展。例如，有一个汽车类，该类中描述了汽车的普通属性和功能。汽车有很多类型，轿车，卡车，越野，SUV等，那么在一个轿车类中，不仅应该包含汽车的属性和功能，还应该增加轿车独有的属性和功能，这时，可以让桥车继承汽车类，在轿车类中添加轿车特有的功能和属性就可以了。继承不仅增强了代码的复用性，提高了开发效率，还为程序的维护补充提供了便利。\"]},\"514\":{\"h\":\"多态\",\"t\":[\"​ 多态指的是在一个类中定义的属性和功能被其他类继承后，会把子类对象直接赋值给父类引用变量时，相同引用类型的变量调用同一个方法所呈现的多种不同行为特征。例如，当我们说请坐的时候，日本人听到可能会跪坐，中国人听到可能会盘腿而坐，不同的对象可能呈现不同的行为。\",\"学习目标:\",\"掌握封装的概念与特点\",\"掌握如何使用封装,get,set方法\"]},\"515\":{\"h\":\"概述\",\"t\":[\"封装（encapsulate）是指将数据及相关操作绑定在一起的一种编程机制，使其构成一个不可分割的独立实体。在Java中，类就是这样一种结构。当然，数据被保护在类的内部，是为了尽可能地隐藏内部的细节，只保留一些对外\\\"接口\\\"使之与外部发生联系。\",\"把抽象出来的数据(属性), 和对数据的操作(方法)封装在一起, 数据被保护在内部, 程序的其他部分只有被授权的操作(方法), 才能对数据进行操作.\",\"封装的好处\",\"使用者能够完全得到自己想要的功能，又不需要思考过多细节\",\"实现者可以隐藏功能实现的细节，方便灵活进行修改而不影响使用者使用\",\"可以对数据进行验证，保证安全合理\"]},\"516\":{\"h\":\"封装实现步骤\",\"t\":[\"从实际的语法角度上来说，Java当中的封装是依赖于访问权限修饰符来实现：\",\"完全不需要被外界知道的属性(成员变量)，在类中完全可以私有化.(不能直接修改属性)\",\"提供公共的(public) set方法, 用于对成员变量判断并赋值.\",\"public void setXxx(类型 参数名){ // Xxx表示成员变量名 // 加入数据验证的业务逻辑判断 成员变量名 = 参数名; // 一般使用this关键字完成赋值就可以了。 } \",\"提供一个公共的(public) get方法, 用于获取成员变量的值\",\"public XX getXxx(){ // 权限判断 return xx; } \",\"总之，Getter/Setter方法使成员变量的读、写分离了，从原先的不可控变成了可控。在实际开发中，一个类的多数成员变量都是私有的，有必要时提供方法访问，无必要的则无需提供。\"]},\"517\":{\"h\":\"封装练习\",\"t\":[\"基本使用:\",\"定义一个员工Employer类, 类中有3个属性: 姓名 , 年龄 , 工资, 提供一个打印基本信息的public的方法\",\"创建员工对象\",\"class Employer{ // 成员变量 public String name; private int age; private double salary; // 打印基本信息的成员方法 public void info() { System.out.println(\\\"员工信息: name:\\\" + name + \\\" 年龄:\\\" + age + \\\" 工资: \\\" + salary); } } \",\"练习一:\",\"对上述例子进行修改, 要求通过无参构造方法去创建对象, 通过set方法对成员变量进行设置值, 要求年龄范围在1-100之间 , 工资在10K-15K范围内, 不在此范围内, 赋予默认值.\",\"练习二:\",\"对上述例子的基础上, 要求通过有参构造方法去创建对象, 要求年龄范围在1-100之间 , 工资在10K-15K范围内, 不在此范围内, 赋予默认值.\",\"练习三:\",\"定义一个银行账户类Account, 3个属性, 用户名, 密码, 余额.\",\"要求用户名长度4-6位\",\"密码长度6位\",\"余额大于100\",\"class Account{ private String userName; private String password; private double balance; } \"]},\"518\":{\"h\":\"注意事项\",\"t\":[\"使用private私有化成员变量，并提供方法给外界访问时，需要注意：\",\"成员变量的访问权限应该尽量收紧，尽量私有化，当然有必要时也可以给外界权限直接访问。\",\"对于boolean类型的成员变量来说，Getter方法的名字比较特殊，采用isXxx（Xxx是变量名）的形式。这时如果该boolean类型的成员变量本身就叫isXxx时，就会出现下面情况：\",\"private boolean isMale; private boolean flag; public boolean isFlag(){ return flag; } public boolean isMale() { return isMale; } \",\"那么，在有些时候，就会导致程序误以为成员变量名为male的情况发生（实际为isMale）。所以在很多Java开发规范中，都明确建议boolean类型的成员变量名不要命名为isXxx。\",\"Getter/Setter方法的写法显然十分固定，可以直接使用快捷键Alt + Insert快速生成。\",\"学习目标:\",\"继承的基本语法与特点\",\"继承中2个类的关系\",\"引用数据类型的类型转换\",\"继承的层次\",\"protected访问权限\",\"子类对象初始化流程\",\"继承中的属性隐藏\",\"继承中的方法覆盖\",\"final关键字的作用\"]},\"519\":{\"h\":\"引例\",\"t\":[\"根据我们之前学过的知识，完成如下练习：\",\"分别定义一个表示人和学生的类：\",\"人类：有姓名属性，以及吃饭这个行为\",\"教师类：有姓名，教师号两个属性，同时有吃饭，教学两种行为\",\"学生类：有姓名，学号两个属性，同时有吃饭，学习两种行为\",\"很明显，像成员变量name，方法eat等都是被重复定义的成员。既然有重复，那就想复用它们，现在的需求是：复用类的成员。怎么做呢？\",\"Java中对代码的直接复用依赖于某一个方法，而想要复用类的成员，就必须使用Java中的继承语法。\",\"为什么要复用代码？\",\"复用代码，不仅能够减少代码冗余，更重要的是能够更方便地修改代码，可维护性更强。\",\"复用代码后，同样的代码在多处同时生效。\"]},\"520\":{\"h\":\"语法定义\",\"t\":[\"基于已存在的类创建新的类，这个新的类会得到已存在的类的成员，并且可以自己添加新的成员，从而让新的类适应新的开发需求。这就是继承。继承的本质是成员的复用。\",\"Java在定义一个类时，可以显式地，直接让它继承另一个类，这就是Java的继承机制，其语法是：\",\"[访问权限修饰符] class 类名 extends 被继承的类/已经存在的某个类{} \",\"说明：\",\"这个继承了一个已存在类的类，称之为子类。被继承的类称之为父类。\",\"使用继承extends(扩展)关键字后，子类就获取到了父类的所有成员（成员变量和成员方法）.严格来说，继承只考虑对象相关成员的继承，静态成员我们先暂时不考虑。\",\"子类在继承父类的同时，还可以自己定义新的成员，这叫做子类在父类的基础上进行扩展（所以子类往往比父类的功能更加强大，青出于蓝而胜于蓝。）\",\"子类不能继承父类没有的成员。\"]},\"521\":{\"h\":\"继承中两个类的关系\"},\"522\":{\"h\":\"两个类的命名\",\"t\":[\"在上一节中，我们已经讲到过，被继承的类称之为父类，继承父类的叫做子类。其实还有一些别的叫法，仅供了解。\",\"被继承的类主要称之为：\",\"超类（Superclass）\",\"基类（Base Class）\",\"注：\",\"需要注意，在外国Java圈中，更流行超类（Superclass）的叫法，查看英文文档中，你会很多Superclass。\",\"继承其他类的类主要称呼有：\",\"子类（Subclass）\",\"派生类（Derived Class）\"]},\"523\":{\"h\":\"从属关系(重点)\",\"t\":[\"从属关系（relation）上来说，继承中的父子类具有 关系。即子类 父类。子类可以近似地看成是一个父类，子类可以当作父类来使用.\",\"那么如何理解这句话呢？我们从以下几个角度分析。\",\"从直观的逻辑角度解释：\",\"Student就是Person\",\"Teacher就是Person\",\"Cat也是Animal\",\"Dog也是Animal\",\"实际代码书写角度解释：\",\"在正常情况下，创建谁的对象，就用谁的引用接收。\",\"但是在具有父子类关系的两个类中，存在用父类引用接收子类对象的情况。\",\"在这种情况下，子类对象被当成了父类对象去使用了。\",\"即子类可以看成就是一个父类，也就是\\\"is-a\\\"关系。\",\"从数据类型的定义角度解释：\",\"数据类型是 一组数据 + 基于数据的操作\",\"引用数据类型是 成员变量的集合 + 成员方法的集合\",\"子类通过继承父类，得到了父类的所有成员，从数据类型上来说，子类就覆盖了父类的成员，具有了父类的功能。\",\"子类可以当做父类去使用，也就是子类\\\"is-a\\\"父类。\",\"注意:\",\"父类能当子类用吗(父类\\\"is-a\\\"子类关系)？ \",\"显然不能，子类往往比父类功能要强大，父类不能当成子类使用\"]},\"524\":{\"h\":\"引用数据类型的类型转换(重点)\",\"t\":[\"子类对象是可以当成父类使用的，从逻辑角度上讲, 因为子类”is-a”父类\",\"但从更具体的语法上来说，这个过程发生了引用数据类型的类型转换\",\"基本数据类型存在类型转换, 引用数据类型同样存在.\"]},\"525\":{\"h\":\"引用数据类型转换的前提\",\"t\":[\"===> 继承\",\"引用数据类型的类型转换必须发生在具有父子关系的两个类之间，如果是没有继承关系的两个类，无法发生类型转换，只会导致编译报错。\",\"换句话说, 继承打破了Java引用数据类型的类型限制, 有了继承, Java出现了引用数据类型的类型转换.\"]},\"526\":{\"h\":\"转换的是什么？\",\"t\":[\"引用数据类型变量 = 引用 + 对象\",\"引用和对象都有对应的数据类型，但对象的类型可能被转换吗？\",\"显然不可能，对象只能改变状态, 所以只可能是转换了引用的类型。\",\"// 父类引用指向子类对象 Father fs = new Son(); // 上述代码也可以写成： Son s = new Son(); Father fs2 = s; \"]},\"527\":{\"h\":\"引用数据类型转换分类\",\"t\":[\"引用数据类型的类型转换跟基本数据类型一样, 分类仍然是：\",\"自动类型转换\",\"强制类型转换\"]},\"528\":{\"h\":\"自动类型转换\",\"t\":[\"无需程序员写额外代码，编译器自动完成类型转换。\",\"自动类型转换的条件：\",\"把子类的引用转换成父类的引用，由于子类\\\"is-a\\\"父类，所以这个过程不需要写额外代码，自动完成转换。\",\"子类引用转换成父类引用，在继承方向上是从下往上的。 所以引用数据类型的自动类型转换也称之为\\\"向上转型\\\"。\"]},\"529\":{\"h\":\"强制类型转换\",\"t\":[\"需要程序员写额外代码强制完成的类型转换。\",\"强制类型转换条件(通过编译的条件)：\",\"把父类的引用转换成子类的引用时，显然父类不能随便作为子类使用。这个过程需要写额外代码完成，是强制类型转换。\",\"强转额外代码的语法:\",\"子类类型 子类的对象名 = (子类的类名)父类引用 \",\"按照族谱一样把父类放在上面，子类处在下面。父类引用转换成子类引用， 在继承方向上是从上往下的。 所以引用数据类型的强制类型转换也称之为\\\"向下转型\\\"。\",\"注意：\",\"强转相当于把父类对象当子类对象去使用，这在绝大多数情况下是不可能的。所以引用数据类型的强制类型转换想要完成，条件会更加很苛刻, 可能会出现ClassCastException, 类型转换异常。\"]},\"530\":{\"h\":\"继承的优缺点\",\"t\":[\"这里给出一个继承语法的练习案例，通过案例我们来分析一下继承的优缺点：\",\"练习：\",\"在一款游戏中，我们设计了三种类型的鸭子，这些鸭子有一些共同的属性，也有共同的行为，比如都可以叫，都会游泳等。\",\"编写程序，描述这些鸭子。\",\"后来，需求更改了，这些鸭子不能游泳了，但是都会飞，怎么改呢？\",\"再后来，需求又改了，新增了一种鸭子，但这个鸭子不会飞，又怎么办呢？\",\"继承的优点：\",\"继承的出现减少了代码冗余，提高了代码的复用性。\",\"扩展一点：\",\"继承的出现，对于Java的引用类型而言，弱化了类型的约束力，引用数据类型出现了数据类型转换的概念。\",\"继承的缺点：\",\"子类继承父类必须无条件接收父类的所有成员，是没有选择的。\",\"父类中对成员进行修改，会严格体现到每一个子类中，我们不可选择具体哪个子类生效。\",\"注：\",\"当然对于成员方法而言，子类可以在继承父类成员方法之后，进行修改具体实现。称之为\\\"方法的重写\\\"。\",\"但重写归重写，继承仍然是继承了，没有办法不继承。\"]},\"531\":{\"h\":\"继承的层次(重点)\"},\"532\":{\"h\":\"单继承\",\"t\":[\"我们已经学习过了Java继承的基本语法，extends后面跟一个类名，表示继承了一个父类，那么很自然就会想到一个问题：\",\"Java中的一个类，能不能使用extends关键字同时继承多个类呢?\",\"非常简单，我们通过测试发现，这是做不到的。Java的语法规定一个类，在使用extends关键字直接继承某个类时，最多只能继承一个，即一个类只能有一个直接父类。（开个玩笑的说法，谁也没有两个亲爹吧？）\",\"像Java这种，只能有一个直接父类，而不能有两个或更多的设计，称之为\\\"单重继承\\\"或者\\\"单继承\\\"。\",\"而像C++当中，一个类可以直接继承多个类，就称之为\\\"多重继承\\\"或者\\\"多继承\\\"。\"]},\"533\":{\"h\":\"继承层级\",\"t\":[\"虽然直接父类只有一个，但Java中一个类仍然可以有很多个\\\"间接父类\\\"，因为父类可能还有父类。比如A继承B，B又继承了C，那么A的直接父类就是B，间接父类是C。于是就形成了下面几个概念：\",\"祖先类：处在继承顶层的类。\",\"继承层次（hierarchy）：由某个祖先类派生出来的所有类的集合叫做继承层次。\",\"继承链：从某一个子类开始，到其祖先类的路径。\",\"在Java中定义一个类，如果没有直接通过语法写出继承了Xxx类，那么它的直接父类就是——Object。\",\"Object类是Java所有类继承层次中顶层祖先类。Java中的每个类，都或直接，或间接的继承了Object。\",\"所以, 我们在创建某个类对象, 调用其方法的时候, Idea给我们提示的时候, 会出现一些不属于该类的方法, 这些方法是哪来的? ---> 继承自父类Object\",\"继承层次中需要注意的地方：\",\"在一条继承链中，总称呼下游类是上游类的子类，不管隔了几层。没有孙子类或者重孙类这种概念。\",\"在一条继承链中的，下游的类总是继承上游类的所有成员，不管隔了几层。\",\"在一条继承链中，下游类总可以看成一个上游类，存在\\\"is-a\\\"关系。\",\"不在同一条继承链中的类，没有任何关系。虽然看起来像\\\"兄弟姐妹\\\"类，但是Java是不讲究血统的。 \",\"因为一方面，子类可以自由扩展功能；另一方面，继承来的东西也是可以修改的。\",\"所以\\\"兄弟姐妹\\\"可能完全和\\\"我\\\"不同，没有任何关系。\",\"不能循环定义继承。比如A继承B，B继承C，再让C来继承A，这是不行的。\",\"继承链可以无限延伸下去，但是一般来说有个5~6层继承，已经很多了。\"]},\"534\":{\"h\":\"protected访问权限\",\"t\":[\"关于访问权限的概念，我们在面向对象基础时，已经提到过一次了。\",\"但那时，我们还没有继承的概念，所以protected修饰符没有讲解。这里我们来补充讲解一下。\",\"首先，我们回顾一下Java当中类中成员和构造器的四个访问权限等级：\",\"private：只能够在同一类中能够访问，私有的，外面谁都不能用。\",\"（缺省的）不写任何关键字：同一包中的子类或者其它类能够访问，同包中都可以使用。\",\"protected：不同包的子类能够访问。\",\"public：不同包的其他类能够访问，相当于没有做访问权限。\",\"用表格来描述这个访问权限就是：\",\"public\",\"protected\",\"（缺省）\",\"private\",\"同一类中\",\"同一包其他类\",\"不同包子类\",\"不同包其他类\"]},\"535\":{\"h\":\"怎么理解不同包子类能够访问\",\"t\":[\"protected关键字的使用定义上，很含糊的说了，protected修饰的成员在不同包的子类中可以访问，但实际上访问的方式仍然可以细分：\",\"不同包的子类中，创建父类对象，用父类对象访问protected成员。\",\"不同包的子类中，创建该类的其他子类对象（\\\"兄弟姐妹对象\\\"），用这个其他子类对象访问父类的protected成员。\",\"不同包的子类中，创建子类对象，用子类对象访问protected成员。\",\"我们可以创建以下Java类，来进行测试操作：\",\"在包名为one的包中创建类： \",\"public class CurrentClazz，即当前类，是存放protected修饰的成员变量的父类。\",\"public class SamePackageAnotherClazz，即同包下非子类。\",\"public class SamePackageSonClazz，即同包下子类。\",\"在包名为another的包中创建类： \",\"AnotherPackageAnotherClazz，即不同包下非子类。\",\"AnotherPackageSonClazz，即不同包下子类。\",\"类定义完毕后，就可以逐一测试，能否访问。\"]},\"536\":{\"h\":\"结论\",\"t\":[\"protected修饰的成员，在同类、同包下是可以随意访问的。\",\"但是在不同包下，必须在子类中，创建子类自身对象，才能够访问它从父类那里继承过来的protected成员，其它方式创建对象都不可以访问。\",\"实际代码中，怎么查看protected成员的访问权限呢？\",\"先看是否同包中访问，只要同包就可以任意访问。\",\"如果是非同包，一定要是子类中，才可以访问。而且必须是，才可以访问它继承自父类的protected成员。\"]},\"537\":{\"h\":\"为什么设置protectd访问权限\",\"t\":[\"在面向对象访问权限控制的整个体系中，实际上如果没有继承，那么只需要两个访问权限就足够了：要么是给别人用的public，要么是不给别人用的private。\",\"但是有了继承后，如果类中的某个成员，非常有价值，我们希望这个成员总是被子类使用，而不会被滥用，出于保护这样一个成员的目的，protected就有意义了。\",\"被protected修饰的成员，在不同包下（正常情况下，代码在使用时都不会同包），一定能够保证该成员被子类自身所使用：\",\"不能用父类的，创建父类对象访问不到。\",\"不能用\\\"兄弟姐妹\\\"的，创建非自身的其它子类对象，也访问不到。\",\"这样就充分保证了想一想，将来有一天，你的财产也总是希望被亲近的人继承吧, 而且给它最大的控制权限吧\",\"注：既然子类有最大的控制权限，那么如果它愿意上交国家也是可以的。在子类中，可以重写从父类继承过来的方法的访问权限，可以选择从protected改写成public，这仍然属于方法的重写。（后面会讲）\"]},\"538\":{\"h\":\"经典案例\",\"t\":[\"Java所有类都直接或间接地继承了Object，也会同时继承它当中的一个protected修饰的成员方法clone()，那么在下面代码中分析使用对象调用clone()方法：\",\"public class Demo { public static void main(String[] args) throws CloneNotSupportedException { // 问题1: 这里能否创建Student对象,来调用clone方法? /* Student类是Object类的子类,它继承了clone()方法 但是它和Object类是非同包的关系 不同包下: 必须在子类中,创建子类自身对象,才能够访问父类中继承过来的受保护成员 在当前Demo类当中,叫在\\\"兄弟姐妹\\\"类中,创建对象,很明显不能访问,因为没有权限 */ Student s = new Student(); // 'clone()' has protected access in 'java.lang.Object' // s.clone(); 不行 // 问题2: 这里能够调用谁的对象的clone()方法; Demo d = new Demo(); d.clone(); // 当重写protected访问权限后,可以随意访问 Teacher t = new Teacher(); t.clone(); } } class Student{ public void test() throws CloneNotSupportedException { // 只能创建Student对象,来访问Student从Object类继承过来的clone方法 // new Demo().clone(); 不行 new Student().clone(); } } class Teacher{ @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } \",\"结论其实还是那句话：不同包下，必须在子类中，创建子类自身对象，才能访问从父类那里继承过来的protected成员。\",\"上述代码还演示了方法重写——修改方法的访问权限，作为了解，后面会详细讲解。\"]},\"539\":{\"h\":\"继承的限制\",\"t\":[\"在前面，继承的定义中，我们说子类会继承父类的所有成员，那么思考以下问题：\",\"能不能继承父类的私有成员呢？\",\"首先，直接访问是访问不到的。 \",\"能不能继承父类的构造器呢？\",\"首先构造器不能算成员，况且构造方法也不是普通方法，继承过来干嘛呢？构造器是不能被继承的。\",\"能不能继承父类的静态成员呢？\",\"对于下列代码，我们测试一下：\",\"public class Demo{ public static void main(String[] args){ // 以下访问可行,并且结果确实是10 System.out.println(Son.a); } } class Father{ static int a = 10; } class Son extends Father{ } \",\"首先，，直接用子类类名点访问，是可以访问到父类中的静态成员的。但这仅意味着子类能够使用父类的静态成员，并不意味着继承！通常情况下，继承仅考虑普通成员而不考虑静态成员。\"]},\"540\":{\"h\":\"子类对象的初始化(重点)\",\"t\":[\"我们先复习一下我们认识引用数据类型的过程：\",\"首先我们从数组对象的初始化开始，我们知道引用数据类型变量分为两个部分，在堆上创建对象，在栈中创建引用，引用通过存储地址指向堆上的对象。对象是引用数据类型的实质，但是我们不能直接访问对象，而是通过栈上的引用间接访问堆上的对象。\",\"然后我们学习了对象与类的概念，引入了类加载的概念。并且使用数据类型的定义统一了引用数据类型和基本数据类型：\",\"数据类型：一组数据 + 基于数据的一组合法操作\",\"引用数据类型：成员变量的合集 + 成员方法的合集\",\"也就是说，引用数据类型（类）是特殊的数据类型，是自定义的数据类型。这种自定义的数据类型JVM不认识它，需要一个了解认识它的过程，称之为类加载。\",\"JVM通过类加载了解一个类型，从而能够完成创建对象，或者其它的一些操作。\",\"现在我们学习了继承的概念，在继承中，子类会继承父类的成员，。那么问题就来了：\",\"父类的成员从何而来？凭空出现？\",\"父类的成员变量也需要赋值，那么赋值顺序是怎么样的？结果是怎么样的？为什么会体现出这种特点？\",\"以上问题就是子类对象的初始化问题，即研究子类对象创建时，父类的成员从何而来，父类成员变量的赋值等相关的问题。\",\"我们通过一个引例，练习来讲解这个问题：\",\"创建一个Person类，有name属性和eat方法\",\"创建一个Star类，有stageName属性和sing方法\",\"Star类要继承Person类\",\"创建Star类对象，画出这个过程的内存图，描述子类对象初始化的过程\",\"image-20230209145801368\"]},\"541\":{\"h\":\"子类对象初始化流程\",\"t\":[\"在创建子类Star对象的过程中，首先要考虑的就是类加载。Star这个类肯定是需要进行类加载的，但Star还有父类Person。子类对象能够直接访问父类成员，显然父类成员究竟有哪些，都是些啥，这些信息JVM是需要知道的（不如如何创建？）。\",\"所以：\",\"子类的类加载会触发父类的类加载，并且类加载的顺序是\\\"先父后子\\\"的。\",\"这里，我们可以总结类加载的时机：\",\"启动main方法\",\"创建对象(首次)\",\"访问类的静态成员(首次)\",\"子类类加载会触发父类类加载（不管子类是何种方式触发类加载）\",\"流程\",\"父子类加载(先父后子)\",\"创建子类对象 \",\"子类对象中会专门开辟一片独立的区域，用来存储父类的成员变量(父类成员区域, 近似看成一个父类对象, 被super关键字指向, 近似看做super指向当前子类对象的父类对象)\",\"子类自身的成员仍会存储在自身对象当中(this指向当前子类对象)\",\"父子类成员赋值(先父后子) \",\"默认初始化\",\"显式赋值\",\"构造代码块赋值\",\"构造器赋值\",\"原理\",\"成员变量赋值先父后子如何保证?\",\"父类构造器优先于子类构造器执行\",\"父类的构造器为什么优先于子类构造器执行?\",\"super关键字可以在子类构造器或成员方法中，用于调用父类构造器或者访问父类成员。\",\"// 语法: super(实参列表) \",\"在一个类中的构造器中,如果构造器第一行没有直接用this/super去调用其他构造器,那么它一定隐含语句: super() 表示调用父类的无参构造器\",\"这种程序员没有写任何代码,通过隐含super()的形式,来完成子类对象初始化的方式称之为\\\"子类对象的隐式初始化\\\", 子类对象的隐式初始化是调用父类无参构造器实现的\",\"无参构造器是不能给成员变量赋值的, 在创建子类对象时,如果希望能够给父类成员赋值,就必须调用父类的有参构造器, 在子类构造器第一行写 super(实参列表), 直接指出调用父类哪个构造器的子类对象创建方式,称之为\\\"子类对象的显式初始化\\\"\"]},\"542\":{\"h\":\"隐式子类对象初始化\",\"t\":[\"父子类成员变量的赋值顺序的\\\"先父后子\\\"，是通过父子类构造器调用的\\\"先父后子\\\"保证的。但是注意 \",\"那么父类所有的成员变量的赋值方式都是先于子类成员变量的任何赋值方式（默认初始化除外），于是自然父类成员变量的赋值顺序都会先于子类的。\",\"在创建上述Star类对象时，我们没有在代码的任何位置，表示将要去调用父类构造器，但实际上父类构造器仍被调用了。这是为什么呢？\",\"在Java的任何构造器当中，如果第一行没有明确的去调用别的构造器（通过this或super关键字）\",\"那么第一行一定隐含了一条语句：\",\"super(); \",\"该行语句表示去调用父类的无参构造方法。于是，在子类对象初始化时，就会保证先去执行父类构造方法。这样就能够保证，父类成员变量的赋值一定先于子类。由于，程序员没有写任何代码，这种子类对象的初始化方式，称之为——\\\"子类对象的隐式初始化\\\"。\",\"隐式对象初始化的必要条件：\",\"父类中有默认的构造方法\",\"子类的构造器中没有显式使用super调用父类的构造方法，也没有用this去调用自己的构造方法。\",\"达成上述两个条件，则JVM在初始化子类对象时进行隐式初始化，永远先执行父类的构造方法，顺序为：\",\"最上层的父类（Object）\",\"其他父类（继承链中越处于上流越先执行）\",\"所有父类的构造方法都执行完毕，开始执行子类构造方法\"]},\"543\":{\"h\":\"显示子类对象初始化\",\"t\":[\"子类对象的隐式初始化是调用父类无参构造方法，所以如果需要给父类成员变量直接赋值是做不到的， 所以就需要子类对象的显式初始化。即明确在子类构造器的第一行，用super(参数)，明确指出调用父类的某个构造方法来完成父类成员变量的赋值。\",\"语法：\",\"super(参数); \",\"注意事项：\",\"super在构造器中用于表示调用父类构造器时，例如super(参数)，该条语句必须在第一行。\",\"this在构造器中用于表示调用自身构造器时，例如this(参数)，该条语句必须在第一行。\",\"显然super、this两个关键字在表示调用构造器时，是绝不可能共存的。\"]},\"544\":{\"h\":\"super关键字\",\"t\":[\"什么是super关键字？\",\"上面其实已经说过了，你完全可以直接把super关键字，看成指向当前类的父类\\\"对象\\\"的一个引用。即：\",\"this代表当前类的当前对象。\",\"super表示当前类的父类对象。\",\"super和this的使用几乎没有差别，只不过一个表示子类对象，一个表示父类对象。比较大的区别是：\",\"super只能访问父类中有的成员，特殊情况下，当父子类具有同名成员时，可以用super区分。\",\"this在当前类中不受访问权限控制，super访问父类成员，受访问权限控制。\",\"this毕竟还是一个引用，指向当前对象，所以可以直接在类中成员方法中输出它。\",\"但是super毕竟没有指向对象，无法直接输出它！\",\"具体的使用可以参考下面表格：\",\"含义\",\"构造器调用\",\"成员访问\",\"是否受权限控制\",\"this\",\"当前对象的引用\",\"this(参数)，表示调用自身构造器\",\"this.\",\"否\",\"super\",\"父类对象（近似）的引用\",\"super(参数)，表示调用父类构造器\",\"super.\",\"是\"]},\"545\":{\"h\":\"练习\",\"t\":[\"分析程序的执行顺序：\",\"public class Demo { public static void main(String[] args) { PrimaryStudent primaryStudent = new PrimaryStudent(666,888,\\\"hello\\\"); System.out.println(primaryStudent.psVar); } } class Person { static { System.out.println(\\\"Person类加载\\\"); } { System.out.println(\\\"Person构造代码块\\\"); } public Person() { System.out.println(\\\"Person类的无参构造\\\"); } } class Student extends Person { static { System.out.println(\\\"Student类加载\\\"); } { System.out.println(\\\"Student构造代码块\\\"); } int sVar; String sVarString; public Student() { System.out.println(\\\"Student类无参构造\\\"); } public Student(int sVar) { System.out.println(\\\"Student int构造方法\\\"); this.sVar = sVar; } public Student(int sVar, String sVarString) { this(sVar); System.out.println(\\\"Student int String构造方法\\\"); this.sVarString = sVarString; } } class PrimaryStudent extends Student { static { System.out.println(\\\"PrimaryStudent类加载\\\"); } { System.out.println(\\\"PrimaryStudent构造代码块\\\"); } int psVar = 10; public PrimaryStudent(int psVar, int sVar, String sVarString) { super(sVar, sVarString); System.out.println(\\\"PrimaryStudent类的 三参构造\\\"); this.psVar = psVar = 100; } } \",\"先父后子，父类构造器执行完毕，才能轮到子类。当然父类如果有多个，就从最顶层父类开始。\"]},\"546\":{\"h\":\"总结\",\"t\":[\"无论是隐式还是显式子类对象初始化，最终都是为了保证父类构造器先于子类执行。\",\"总结一下到目前为止，创建对象过程中可能碰到的结构的执行顺序（最全）：\",\"我们将程序的运行分成两部分：\",\"首先程序要从main方法启动，这意味着首先要触发，装有main方法的那个类的类加载。\",\"类加载过程中，一定要考虑连环触发类加载的情况：\",\"类中有静态成员变量创建对象，那么一定会触发其它类的类加载。\",\"该类还有父类，于是触发父类类加载。\",\"类加载这个过程中，静态代码块的代码一定会执行，不要忘记了。\",\"如果有静态成员变量的显式赋值，那么显式赋值和静态代码块，按照代码的书写顺序从上往下执行。\",\"类加载整个程序运行期间只有一次，如有通过继承连环触发类加载，那么顺序是先父后子，从最顶层父类开始。\",\"切记类加载是懒加载，有些类可能等到main方法执行到一半才触发类加载。 \",\"这个就要随机应变了，以下步骤，都默认类加载全部结束了。\",\"new对象时，首先去找到new对象的构造器，然后观察第一行 \",\"如果它的首行显式地调用了另一个构造器（可能是this(参数)，也可能是super(参数)） \",\"那么程序会先跳转到那个构造器，再去看代码首行有没有显式调用另一个构造器 \",\"直到找到一个构造器它隐含的super()指向Object类的无参构造\",\"于是开始按照这个类中构造代码块和显式赋值的代码书写顺序，从上到下执行其中的代码\",\"最后执行这个类的构造器\",\"开始执行被跳转的构造器，同样先执行显式赋值和构造代码块后执行构造器\",\"最后执行完new对象构造器，创建对象过程结束。\",\"如果它的首行没有显式调用另一个构造器，那么必定隐含super()指向父类的无参构造器。 \",\"如果直接指向Object类的无参构造，那十分简单，直接不用管 \",\"执行类中的显式赋值和构造代码块，最后执行构造器\",\"如果指向一个普通父类的无参构造，那就观察首行，根据情况执行\",\"最终一定父类构造器执行完毕，回到new对象的类中，执行完毕new对象构造器，创建对象过程结束。\",\"总之，先父后子记住，在某一个类中成员变量赋值中，构造器最后去执行。\"]},\"547\":{\"h\":\"继承中的属性隐藏\"},\"548\":{\"h\":\"引例\",\"t\":[\"在上面章节中，我们已经知道，父子类的成员是允许同名的。那么如果父子类属性同名了，那么不使用super区分，直接访问的效果是什么样的呢？\",\"现在我们直接创建子类对象，使用子类引用接收。会发现访问的结果是子类中属性的取值，那么父类中的那个成员变量去哪了呢？首先它肯定是存在的，这一点随便写一个父类成员变量的Getter方法就可以验证了。这说明使用 \\\"对象名点\\\"访问成员变量 这个语法，可能存在一些特殊的机制，接下来我们就来探讨这种机制。\"]},\"549\":{\"h\":\"对象名.成员变量的访问机制\",\"t\":[\"在研究 机制时，我们主要探究两个方向：\",\"访问范围，究竟能够访问到哪些成员变量？根据什么来决定？\",\"访问结果，如果是父子类同名成员变量，那么结果是什么？根据什么来决定？\",\"首先是 ，对象的由来，可以有三种方式：\",\"创建父类对象,用父类引用接收，用对象名点访问。\",\"创建子类对象,用子类引用接收，用对象名点访问。\",\"创建子类对象,用父类引用接收，用对象名点访问。\"]},\"550\":{\"h\":\"属性隐藏\"},\"551\":{\"h\":\"访问范围机制\",\"t\":[\"经过上面的测试，我们可以知道对象名点成员变量，它的访问范围是由 来决定的。\",\"如果引用是父类类型，那么它的访问范围只有父类（和父类的父类）。\",\"如果引用是子类类型，那么它的访问范围是子类 + 父类（父类如果还有父类也算上）。\",\"在Java当中，对象名点访问成员变量的范围是编译器决定的，是一个编译上的概念。编译在检索一个引用是否能够访问到某个成员变量时，存在以下检索机制：\",\"首先编译器会从引用的数据类型的那个类中，去查找该成员变量。如果找到了，就直接认为它可以访问。（有权限才行）\",\"如果没有找到，那么就去父类中找。直到找到Object类，如果Object类当中都没有该成员变量，那就会编译报错。\",\"上述规则，实际上可以总结为：\",\"在Java中，访问范围是可以往上查找父类的，但不能往下找子类。 子类知道自己的\\\"爸爸\\\"是谁，但\\\"爸爸\\\"并不知道它有这个\\\"儿子\\\"，甚至都不知道自己有几个\\\"儿子\\\"，或者有没有\\\"儿子\\\"。\"]},\"552\":{\"h\":\"访问结果机制\",\"t\":[\"对象名点成员变量，访问的结果也是由 来决定的。\",\"如果引用是父类类型，那么它的访问结果一定也是父类中的结果。\",\"如果引用是子类类型，那么它的访问结果一定也是子类中的结果。\"]},\"553\":{\"h\":\"总结\",\"t\":[\"综合对象名点访问成员变量的范围和结果，发现：都是根据引用的数据类型来决定的，无需考虑是何种对象。\",\"注意事项：\",\"父子类中的同名成员变量它们各自有存储的区域，父类的同名成员变量被子类同名成员变量隐藏了，称之为\\\"属性的隐藏\\\"。\",\"但我们仍然可以通过父类中的Getter方法，或者通过super去访问到父类中同名成员变量，当然它们都受访问权限限制。\",\"静态成员变量在父子类中也存在同名的情况，但是它们不是覆盖也不是隐藏，而是互相独立的两个静态成员变量。\",\"对于下列代码：\",\"class Person { static String nationality; } class Student extends Person { static String nationality; } \",\"Person类和Student类的静态成员变量国籍分别属于两个类本身，没有所谓继承关系。\",\"而如果是下列代码：\",\"class Person { static String nationality; } class Student extends Person { } \",\"Person类和Student类都可以使用Person类的静态成员变量国籍，是共用的关系。\"]},\"554\":{\"h\":\"继承中的方法覆盖\"},\"555\":{\"h\":\"引例\",\"t\":[\"在上一节一样，父子类中的成员方法也是可以同名的。那么我们直接创建子类对象，使用子类引用接收。调用同名方法，会发现访问的结果是子类中方法的行为，那么父类中的那个同名成员方法去哪了呢？还能够访问吗？首先它肯定是存在的，方法不过是方法区的二进制指令合集罢了，类加载时期，装载进方法区，不会物理消失。但 这个语法还是和访问成员变量是有很大区别的， 我们可以写一个public方法，然后在方法中访问同名成员方法，最后测试调用这个public方法，如下：\",\"public void test() { System.out.println(\\\"father test\\\"); } public void invokeFatherTest() { this.test(); } \",\"注：test是那个同名的成员方法\",\"我们会发现，方法调用的结果仍然体现子类中的方法行为，这就有点意思了。接下来我们就来探讨一下这种 的机制。\"]},\"556\":{\"h\":\"对象名.成员方法的访问机制\",\"t\":[\"和前面访问成员变量一样，在研究 机制时，我们主要探究两个方向：\",\"访问范围，究竟能够访问到哪些成员方法？根据什么来决定？\",\"访问结果，如果是父子类同名成员方法，那么结果是什么？根据什么来决定？\",\"首先是 ，对象的由来，可以有三种方式：\",\"创建父类对象,用父类引用接收，用对象名点访问。\",\"创建子类对象,用子类引用接收，用对象名点访问。\",\"创建子类对象,用父类引用接收，用对象名点访问。\"]},\"557\":{\"h\":\"访问范围机制\",\"t\":[\"实际上不管是，属性的访问还是成员方法的访问，范围都是一个编译上的概念，所以结果即便不测试也是和，上节中属性的访问范围是一样的。当然，测试后结果仍然是：对象名点成员方法，它的访问范围是由 来决定的。\",\"如果引用是父类类型，那么它的访问范围只有父类（和父类的父类）。\",\"如果引用是子类类型，那么它的访问范围是子类 + 父类（父类如果还有父类也算上）\"]},\"558\":{\"h\":\"访问结果机制\",\"t\":[\"对象名点成员方法，访问的结果就不再是由 来决定了，而是根据 对象的实际类型 来决定。\",\"如果对象是一个子类类型，那么即便引用是父类，方法调用也要体现出子类的行为。\",\"反之如果对象是一个父类类型，方法调用的结果就是父类行为。\"]},\"559\":{\"h\":\"总结\",\"t\":[\"综合对象名点访问成员方法的范围和结果，发现：\",\"访问范围仍然是要靠 来决定。\",\"但是方法的调用结果，就需要考虑对象的具体类型，是何种对象，就体现出它的行为。\",\"注意事项：\",\"父子类中一旦存在父子类同名的成员方法，那么只要创建子类对象，在任何位置都无法再直接用对象名.访问到父类成员方法了，这就是继承中的方法的覆盖。\",\"方法的调用之所以体现为覆盖，这是因为方法的调用结果是根据对象的实际类型决定的，和引用没有任何关系。\",\"当然，方法的覆盖不是物理意义上的覆盖，只是方法的访问机制决定的。这个父类中的同名方法，仍然可以使用super关键字去访问到，当然前提是有访问权限。\",\"结合我们前面封装的思想，实际开发中，大多数的成员变量都是私有化的，这意味着使用 的机会是很罕见的，多数情况下我们都是在调用方法完成各种功能。方法的覆盖是非常重要的知识点，如果说继承是面向对象的核心，那么继承应该就属于方法的覆盖。接下来讲解方法覆盖的语法。\"]},\"560\":{\"h\":\"方法的覆盖/重写\",\"t\":[\"方法的覆盖，也叫方法的重写（override），指的是在子类中，能够改写父类成员方法的内容。从形式上表现出来，就是父子类中能够拥有同名的成员方法。\",\"在讲解具体的方法重写的语法和使用之前，我们要先讲解一个注解：@Override，就和它的名字一样，这个注解写在子类的方法头上，用于检测子类中的某个方法，是否是父类方法的重写。例如下列代码：\",\"// 父类方法 public void test(){ System.out.println(\\\"father\\\"); } // 子类方法 @Override public void test(){ System.out.println(\\\"son\\\"); } \",\"在实际开发中，我们要求大家，在任何时候，只要是在做方法的重写，就一定要加上注解@Override，好处是：\",\"能够检测语法，如果因为没加注解，导致将本不是方法重写的方法，误以为是方法重写，将会带来错误。\",\"提升代码可读性，加了该注解的方法一定是重写自父类的方法。\"]},\"561\":{\"h\":\"语法\",\"t\":[\"方法的重写的语法要求，对于下列一个成员方法：\",\"// 成员方法的语法 [访问权限修饰符] 返回值类型 方法名(形参列表){ //方法体 } \",\"子类中重写的方法，访问权限等级，必须至少保持一致，可以更为宽松，但一定不能更严格。\",\"子类中重写的方法，返回值类型必须和原先父类方法的返回值类型，保持兼容(引用数据类型,不涉及基本数据类型)。\",\"注：何为兼容呢？这里留给大家思考~\",\"子类中重写的方法，方法名必须严格保持一致，不能做任何修改。\",\"子类中重写的方法，形参列表必须保持严格一致，不能做任何修改。\",\"方法体的代码，无所谓，可以保持一致，也可以修改。\"]},\"562\":{\"h\":\"注意事项\",\"t\":[\"父类中私有方法不能被重写（因为没有权限访问，更不谈重写）\",\"静态方法在使用现象上，很像是被重写了，但实际上静态方法不能被重写，而是直接是一个新的静态成员。（使用@Override注解标记会报错）\",\"构造器不能继承，更不能被重写。\",\"快捷方式： \",\"直接在子类中，手写出父类方法的名字。看到出现父类方法提示，直接回车即可重写。\",\"使用快捷键Alt + Insert，在选项Override Methods中，选择重写子类的方法。\"]},\"563\":{\"h\":\"方法重写 VS 方法重载\",\"t\":[\"最后，在这里做一个扩展。回想一下我们之前学过的方法的重载，它和方法的重写语法上有什么区别呢？\",\"方法的重载（overload）\",\"方法的重写（override）\",\"发生的类不同\",\"必须在同类中\",\"必须发生在父子类之间，肯定不是同一个类中\",\"方法名\",\"必须相同\",\"必须相同\",\"参数列表\",\"必须不同\",\"必须相同\",\"访问权限修饰符\",\"不影响，无所谓\",\"子类方法的访问权限，不允许更严格（可以一致或宽松）\",\"返回值类型\",\"不影响，无所谓\",\"子类方法返回值类型保持兼容，不用完全一致\",\"异常\",\"不影响，无所谓\",\"重写的方法不能抛出更多的异常\"]},\"564\":{\"h\":\"练习\",\"t\":[\"读程序\",\"public class Demo { public static void main(String[] args) { Son s = new Son(); Son s2 = new Son(300); Father fs = new Son(); Father f = new Father(); } } class Father { int num = 100; public int getNum() { return num; } public Father() { // 该行在执行时,如果创建的是子类对象, // 那么子类的任何赋值手段都没有执行,那子类中的num一定是0 System.out.println(getNum()); } } class Son extends Father { int num = 200; @Override public int getNum() { return num; } public Son() { super(); } public Son(int num) { this.num = num; } } \"]},\"565\":{\"h\":\"final关键字\",\"t\":[\"final有最终的、最后的意思。它是一个修饰符，可以用来修饰：\",\"class类\",\"方法\",\"变量（包括成员变量、静态成员变量和局部变量）\",\"它修饰不同结构时含义是不同的，下面详细了解一下。\"]},\"566\":{\"h\":\"final修饰类\",\"t\":[\"final修饰类时，表示最后的类，最终的类。即表示这个类不能被继承。\",\"语法：\",\"[访问权限修饰符] final class 类名{ //类体 } \",\"说明：\",\"思考：什么样的类需要设置成final？\",\"不需要，不想要被子类继承的类，才需要设置为final修饰。当你认为当一个类的设计已经足够完善，功能足够强大了，不需要再让子类去扩展它了。这时出于安全的考虑，就可以将一个类设置为final。这样类中成员，既不会被继承，更不会被修改。\",\"正常情况下，我们很少会主动把一个类设置成final，因为没有太多的必要性。实际开发中，也要慎重将一个类设置final。\",\"常见的final修饰的类，都在JDK的源码当中。比如四类八种基本数据类型的包装类、Void、String、System、Scanner等等。\"]},\"567\":{\"h\":\"final修饰方法\",\"t\":[\"final修饰方法表示最后的方法，最终的方法，表示该方法无法被重写 （但是仍然可以被继承）。\",\"语法：\",\"[访问权限修饰符] final 返回值类型 方法名(形参列表){ //方法体 } \",\"说明：\",\"final修饰成员方法，表示该方法无法被重写，但是仍然是可以继承的。\",\"什么样的成员方法应该设置为final呢？ \",\"方法的设计已经比较完善，不需要子类进行修改了，子类只需要乖乖继承，使用父类的实现即可。比如一旦修改就会导致问题、bug等时，就可以设置为final修饰。\",\"即便是父类的方法不是很完善，但只要是希望子类不要改写方法都可以这么做。（要么你就用，不爽你就自己实现一个）\",\"日常开发，程序员还是比较少见有需要把方法设置成final修饰的。同样比较多见于JDK源码中，比较常见的有：像Object类中的getClass()方法.\",\"注意：\",\"并不是随便拿一个方法都能用final修饰的，比如：\",\"private方法，本来就无法重写，不需要多此一举。（可以修饰，但是会报警告）\",\"static方法，本来就无法重写，不需要多此一举。（可以修饰，但是会报警告）\",\"构造方法，不能被继承，更不能重写，加final修饰会编译报错。\"]},\"568\":{\"h\":\"final修饰变量\",\"t\":[\"final修饰变量，表示最后的变量，最终的变量，即表示常量。（表示在整个程序期间，值不会再变了）\",\"final修饰变量时可以修饰局部变量，成员变量，静态成员变量。总体上来说，要注意下述三个细节：\",\"常量的分类 \",\"字面值常量：1，2.0，3，\\\"hello\\\"等\",\"自定义常量： 被final修饰的变量，就是自定义常量。\",\"自定义常量的命名：单词全部大写，两个单词之间用\\\"_\\\"隔开。\",\"自定义常量的命名规范，不要求严格遵守，因为即便是JDK中的源码也没有百分百遵守。从实际开发角度出发， 建议成员静态常量，即final修饰静态成员变量时，遵守命名规范，其它常量随意。\",\"自定义常量，不会更改变量的存储位置，生命周期，使用方式等等。唯一改变就是值从能改变，变成不能改变。\",\"成员变量 ----> 成员常量\",\"局部变量 ----> 局部常量\",\"final修饰变量时，可以修饰基本数据类型变量，也可以修饰引用数据类型。\",\"修饰基本数据类型时，很容易理解，值不变。\",\"修饰引用数据类型时，修饰的是引用而不是对象，表示引用中存储的地址成为一个常量，不可更改。这意味着引用指向的对象不可更改了，不能再指向一个新的对象了。但对象中成员变量的取值仍是可以修改的。（对象的状态仍可变）\",\"接下来，分情况讨论final修饰变量。\"]},\"569\":{\"h\":\"修饰局部变量\",\"t\":[\"我们以方法中的局部变量为例子，方法中的局部位置有两个：\",\"方法体： \",\"方法体中用final修饰局部变量，表示该变量一旦声明并初始化赋值，就不可再修改它的取值了。\",\"语法上，直接使用final修饰即可。\",\"方法的形参列表中： \",\"形参用final修饰后，不是表示该方法只能传入常量，而是实参一旦传入后就无法在方法体中修改了。\",\"语法上，直接使用final修饰即可。\",\"注意：\",\"final修饰局部变量后，会变成一个局部常量。仍然在方法栈帧中创建存储，随着方法同生共死，除了值不能变，没有其它区别。\"]},\"570\":{\"h\":\"修饰成员变量\",\"t\":[\"final修饰成员变量表示该成员变量变成了一个常量，它在内存中的位置，生命周期，使用方式等都不会改变。\",\"语法：\",\"[访问权限修饰符] final 数据类型 变量名; \",\"如果直接在类中成员位置，写上述语法定义成员\\\"常量\\\"，肯定会报错。这是因为默认值不能当成final修饰成员变量的取值，必须 （在创建对象过程中）显式明确的给出一个值，而且这个值一旦给出就不可更改了。也就是说， 成员常量的赋值，有且必须有一次。目前我们给成员变量的赋值方式还有（除了默认初始化）：\",\"显式赋值\",\"构造代码块赋值\",\"构造器赋值\",\"以上三种方式，选择其一即可，而且也必须，也只能选择其一。其它对象创建完毕后的赋值方式都不行。\",\"注：如果依赖构造器赋值，必须保证类的每个构造器都能完成成员变量的赋值，否则会编译报错。（想一想为什么？）\",\"下列代码就是不正确的，因为如果无参创建对象，age这个常量就没值。\",\"构造器赋值final成员常量\",\"final int age; public Student(){} public Student(int age){ this.age = age; } \",\"最后思考： 成员\\\"常量\\\"是不是真正意义上的常量? 不是，因为成员\\\"常量\\\"属于对象，每个对象可能都有自身的常量取值，完全可能不同，而真正意义上的常量，像Math.PI(圆周率)这种，是肯定不会因为创建对象而产生不同的。所以实际开发中，成员常量是很少见的。\"]},\"571\":{\"h\":\"修饰静态成员变量\",\"t\":[\"final修饰静态成员变量表示一个静态的\\\"常量\\\"，在类的全局仅有一份，所以final修饰静态成员变量，也称之为。它是一个真正意义上的常量，不会因为创建对象而更改，实际开发中的常量多使用它。\",\"语法：\",\"[访问权限修饰符] static final 数据类型 变量名; \",\"和final修饰成员变量一样，全局常量的取值也不能依赖于默认值，必须 （在类加载过程中）明确一个值。这样静态成员变量的赋值方式还有（除去默认初始化）：\",\"显式赋值\",\"静态代码块\",\"以上两种赋值方式，必须且只能选择其一。其他的赋值方式，比如在创建对象过程中的赋值方式，都是不可以的\",\"注意：\",\"final static 还是 static final 实测下来，都是可以的，根据个人习惯使用即可。\",\"final修饰静态成员变量是一个全局常量，不会害怕外界访问和修改。所以在很多时候，它的访问权限修饰符都是public的。\",\"如果使用静态代码测试类加载，那么访问类的全局常量，有些场景是不完整的类加载的, 不是完整的类加载,静态代码块没有执行。（感兴趣自己测试一下，作为锻炼动手能力的小demo）\"]},\"572\":{\"h\":\"修饰引用数类型\",\"t\":[\"前面已经提到过了，final修饰引用数据类型的变量，表示引用不能指向新的对象， 但是对象的状态是可以被改变的。\",\"语法：\",\"final 类名 对象名 = new 类名(参数); \",\"注：final只能修饰引用，所以它不能去修饰匿名对象。下面代码是不允许的：\",\"final new Student(); \"]},\"573\":{\"h\":\"练习\",\"t\":[\"读程序，回答注释问题。\",\"public static void main(String[] args) { byte num1 = 0; byte num2 = 0; final byte num3 = 10; final byte num4 = 20; byte result; // 下列代码哪行能通过编译，哪行不能？ result = num1 + num2; result = num3 + num4; result = num1 + num3; } \",\"注释中的两行代码，哪一行能正常运行？\",\"public int test(final int a){ //return a++; //return a+1; } \",\"注释中的两行代码，哪一行能正常运行？\",\"public class Demo { public static void main(String[] args) { final Student s = new Student(); // s = new Student(); // s.age = 18; } } class Student{ int age; public Student() { } } \",\"学习目标:\",\"掌握多态的定义\",\"掌握多态的使用\",\"了解多态的优缺点\",\"掌握引用数据类型的类型转换\",\"掌握instanceof关键字\"]},\"574\":{\"h\":\"概述\"},\"575\":{\"h\":\"基本概念\",\"t\":[\"什么是多态（polymorphic）呢？\",\"从字面意义上理解，同一个事物，在不同的时刻/情况表现出不同的状态，就可以称之为多态。\",\"在Java的多态当中，多态指的是：\",\"同一种事物：同一个引用（即父类的引用）\",\"不同的情况：指向不同的对象（不同的子类对象）\",\"不同的状态：调用同名方法会体现出不同的行为\",\"总结来说，Java中的多态指的是，同一个父类引用指向不同子类对象时，调用同名成员方法，根据指向实际对象的不同，得到的行为也会随之不不同。\",\"练习:\",\"定义一个父类Phone, 3个子类Huawei, XiaoMi, Iphone去模拟多态场景.\"]},\"576\":{\"h\":\"多态的发生条件\",\"t\":[\"根据上述定义，总结一下Java中多态发生的条件：\",\"必须存在继承，多态一定发生在父子类之间。\",\"必须存在方法重写，不同的子类需要重写父类中的同名方法。\",\"必须存在父类引用指向子类对象\"]},\"577\":{\"h\":\"不能发生多态的场景\",\"t\":[\"将上述条件反转一下，自然就得到了不能发生多态的场景：\",\"不能继承的类，即final修饰的类。一个final修饰的类都没有子类，多态肯定和它无缘。\",\"不能重写的方法，不能重写也没有多态。不能重写的方法有： \",\"final修饰的方法，final限制了重写\",\"static方法，不参与继承和重写。\",\"private方法，没有权限重写。\",\"构造方法，不能继承。\",\"不写代码用父类引用指向子类对象，同样没有多态。（这一点就需要手动完成了，看程序员用不用）\"]},\"578\":{\"h\":\"多态的访问特征\",\"t\":[\"当父子类出现同名成员（变量或方法）时，使用多态的形式访问（多态的形式指：用父类引用指向子类对象，然后用引用名访问成员）时的访问特征。\"]},\"579\":{\"h\":\"成员变量\",\"t\":[\"用一句话来总结，对象名点成员变量的访问特征：\",\"编译时（访问范围）看左边，运行时（访问结果）还看左边。\",\"成员变量描述的是对象的属性或者外貌特征，把子类对象赋值给父类的引用，就相当于给子类对象披上了一个父类类型马甲。这样在外界看来，这时候的子类就变成了父类。总之，还是这句话：编译时看左边，运行时看左边。\"]},\"580\":{\"h\":\"成员方法\",\"t\":[\"多个子类同时重写了父类中的一个方法，并出现父类引用指向不同子类对象，并且用对象名点调用同名方法时，方法的调用结果就体现出多态的特点。\",\"用一句话来总结，对象名点成员方法的访问特征：\",\"编译（访问范围）看左边，运行时（调用结果）看右边。\",\"电视机的案例，就很适合来解释方法调用的多态性。\",\"我去商场买了一台一万多的小米智能电视机，功能十分丰富，很强大。\",\"对于这台电视机而言，我需要使用遥控器才能操控，换句话说，只有遥控器上提供的功能我们才能使用。\",\"假如电视机上仅有开关机按键，那我们就只能做开关机的操作。\",\"即便是电视机本身功能再丰富，没有遥控器的支持，我们也做不了什么。\",\"将这个案例转移到Java中 >>>>>> 子类对象就是一台功能强大的电视机，父类引用就是功能受限的遥控器\",\"子类对象本身可能是十分强大，但父类引用中没有的方法也访问不到（父类引用限制了子类对象的方法访问范围）\",\"但是即便是一个只有开关机的遥控器，小米智能电视机的开关机也做得足够炫酷。 这就是具体方法的实现，要看具体对象的类型。\"]},\"581\":{\"h\":\"多态的优缺点\",\"t\":[\"我们通过一个案例来理解多态的优缺点：\",\"科学家要收集动物的叫声去研究，先要收集猫，狗两种动物的叫声研究。随后又扩展到其它动物，最后又需要研究人类。\",\"我们可以先定义一个顶层父类Animal作为父类，然后定义具体动物类：猫和狗。\",\"假如收集每种动物的叫声研究，都需要写一个方法，显然过于麻烦，程序扩展性也太差了。所以我们可以这么做：\",\"写一个方法来收集研究动物的叫声，方法的形参不写具体动物类，而写顶层祖先类：Animal。然后在方法体中，调用叫的方法即可。\",\"这样该方法在调用传参时，就可以Animal不同的子类对象了。这仍然是一个父类引用指向子类对象\",\"这就是多态一个基本的使用案例，当传入方法不同的子类对象时，方法执行时就会根据不同的具体对象类型，来决定行为。\"]},\"582\":{\"h\":\"优点\",\"t\":[\"从这个案例，我们其实就可以大致总结多态的优点了：\",\"要实现多态必须要继承，而继承提高了代码复用率，提升了程序的可维护性。（继承保证）\",\"有了多态后，用父类引用指向不同子类对象，只需要调用同名方法，就能自动根据不同子类对象，得出不同的行为。这大幅度简化了代码，提升了程序的扩展性。（多态保证）\",\"这里讲一个形象的案例：\",\"假如你做一个游戏，游戏中有很多角色，角色们都能释放技能，但技能各不相同。如果没有多态，那就必须逐一调用方法来释放不同的技能，但是有了多态只需要调用技能完事，程序会自动根据不同的角色对象，释放出不同的技能。\",\"// 没有多态时： 角色1引用.技能(); 角色2引用.技能(); 角色3引用.技能(); 角色4引用.技能(); // 有了多态后： 角色父类引用.技能(); \"]},\"583\":{\"h\":\"缺点\",\"t\":[\"多态肯定是有缺点的，而且很明显。由于多态中，使用父类引用指向子类对象，父类引用限制了子类对象的功能，这意味着：\",\"子类独有的成员是无法使用父类引用访问的。\",\"而一旦你必须在这时候访问子类独有成员的话，这就需要把父类类型引用，再转换回子类类型的引用，从继承的方向上，这是从上到下的，称之为\\\"向下转型\\\"。之前我们讲过，这属于强制类型转换。\",\"但是强转十分危险，稍有不慎就会导致程序异常，下面我们详细分析引用数据类型的强制类型转换。\"]},\"584\":{\"h\":\"引用数据类型的强制类型转换\",\"t\":[\"思考： 方法的实参数据类型，需要和方法的形参数据类型保持一致吗？\",\"不需要，存在数据类型的自动类型转换\",\"在学习基本数据类型参数时： \",\"如果方法的实参数据类型,可以自动类型转换到形参数据类型\",\"那么该实参变量就允许传入方法\",\"将上述原则扩展到引用数据类型参数，也是可以的： \",\"如果方法的实参传入的对象，可以向上转型到形参数据类型, 那么该实参对象就允许传入方法\",\"如果方法的形参数据类型是一个父类类型，那么也允许传入它的子类对象\",\"方法的传参可以向上转型，方法的返回值类型也是可以的\",\"父类的引用转换成子类的引用，在继承链中属于向下，属于\\\"向下转型\\\"。编译器默认不允许，需要显式地写代码完成类型转换。\",\"语法：\",\"子类类名 对象名 = （子类类名）父类引用; \",\"当然上述语法不是乱写地，向下转型是有条件的。\"]},\"585\":{\"h\":\"前提\",\"t\":[\"发生的前提:\",\"必须将父类引用转换成它的子类引用，如果不是转换成它的子类引用，会编译报错。\",\"成功的前提:\",\"强转后的引用类型必须能够真正的指向该对象, 即强转后的引用的类型必须是该对象的类型或者其父类型\",\"解释说明:\",\"父类引用指向的真实对象的类型，就是要强转成的子类类型的对象。\",\"比如我先做了一次自动转换，这时父类引用fs指向的实际对象就是Son子类对象\",\"Father fs = new Son(); \",\"那么做强转，将fs引用，强转回Son类的引用，是完全可以的。\",\"Son s = (Son)fs; \",\"这种强转的形式还是比较好理解的，本质上其实是一次\\\"物归原主\\\"，Son对象本身就该是Son引用指向的，强转回去就不会出错。\",\"假如Father还有一个子类Son2，那么将fs强转成Son2引用，虽然编译不会报错，但运行一定会出错。\",\"父类引用指向的真实对象的类型，就是要强转成的子类类型的子类对象。\",\"先假设有一个三层的继承体系：\",\"class Father{} class Son extends Father{} class Grandson extends Son{} \",\"然后做一次自动类型转换，这时父类引用其实指向的是\\\"孙子类\\\"对象。\",\"Father fs = new Grandson(); \",\"那么做强转就有了两个选项，其中将fs强转成Son引用，就符合父类引用指向的真实对象的类型，就是要强转成的子类类型的子类对象。\",\"Son fs1 = (Son) fs; Grandson fs2 = (Grandson) fs; \",\"这种场景实际开发中，不多见，但也要知道。\",\"如果看完上面的，你还似懂非懂，那就看下图再去理解一下：\",\"Grandson对象有三个引用都可以指向它，Father、Son、Grandson\",\"那么假如Father引用指向它时，父类引用Father就可以强转为Son或者Grandson引用。\",\"Son对象有两个引用可以指向它，Son、Father\",\"那么假如Father引用指向它时，父类引用Father就可以强转为Son\",\"所以强转能够成功的前提条件是：引用所指向的真实对象，必须是强转后的引用能够指向的对象。所以可以是强转后的引用的类型的对象或者子类对象\"]},\"586\":{\"h\":\"instanceof关键字\",\"t\":[\"向下转型是一种强转，它成功的条件相对比较苛刻。在操作之前，要先慎重考虑。\",\"强转失败会导致程序抛出异常：ClassCastException，导致程序终止执行。正是由于强转的条件苛刻，而且失败后果很严重，所以Java当中提供了检测手段，来保障强转的安全性。需要使用关键字： instanceof\",\"语法：\",\"引用名 instanceof 类名 \",\"上述语法返回一个boolean类型值：\",\"true表示该引用指向的对象，是后面类名的一个对象或者子类对象。\",\"反之，false则表示不是。\",\"当引用指向null时，使用该语法，结果会直接返回false。\",\"显然，无论引用指向的对象，是后面类名的对象还是子类对象，都符合强转成功的条件。普遍情况下，可以直接将上述语法直接写在if判断中，判断结果是true后，就可以放心大胆做强转处理了。\"]},\"587\":{\"h\":\"总结\",\"t\":[\"引用数据类型要成功\\\"向下转型\\\"，完成强转条件是很苛刻的，实际开发中，先慎重考虑是否真的需要强转。然后在做强转之前，也需要使用instanceof关键字判断，保障安全性。麻痹大意，导致抛出ClassCastException异常，就会很难受了。\"]},\"588\":{\"h\":\"多态练习\",\"t\":[\"1.看代码，说出执行结果\",\"public class Demo { public static void main(String[] args) { Father cf = new Son(); System.out.println(cf.age);//48 cf.teach();//论语 //cf.playGame(); 不能打游戏，因为父类没这个成员 Son c = (Son) cf; System.out.println(c.age);//28 c.playGame(); } } class Father{ int age = 48; public void teach(){ System.out.println(\\\"我要教Java\\\"); } } class Son extends Father{ int age = 28; public void playGame(){ System.out.println(\\\"孔子喜欢玩大乱斗！\\\"); } @Override public void teach() { System.out.println(\\\"我会教论语\\\"); } } \",\"大家课下看看，琢磨琢磨语法也就差不多了，不用深入考究。\",\"2.看代码，说出执行结果\",\"public class Demo { public static void main(String[] args) { Father f = new Son(); System.out.println(f.a); System.out.println(f.b); System.out.println(f.c); //System.out.println(f.aa); 父类中没有aa System.out.println(\\\"----------------\\\"); Son s = new Son(); System.out.println(s.a); System.out.println(s.b); System.out.println(s.c); System.out.println(s.aa); System.out.println(\\\"----------------\\\"); //f.testSon(); 父类中没有该方法 f.test(); f.testFather(); System.out.println(\\\"----------------\\\"); s.test(); s.testSon(); s.testFather(); } } class Father { int a = 10; final int b = 100; static final int c = 1000; public void test() { System.out.println(\\\"Father\\\"); } public void testFather() { System.out.println(\\\"Only Father\\\"); } } class Son extends Father { int a = 20; final int b = 200; static final int c = 10000; int aa = 20; @Override public void test() { System.out.println(\\\"Son\\\"); } public void testSon() { System.out.println(\\\"Only Son\\\"); } } \"]},\"589\":{\"h\":\"08. 面向对象设计\",\"t\":[\"学习目标:\",\"掌握抽象类的定义\",\"掌握抽象类的特点与使用\"]},\"590\":{\"h\":\"引例\",\"t\":[\"以下猫狗继承案例，是一个非常基础的继承语法的代码。思考一下Animal类的继承体系，有什么问题吗？\",\"从以下两个角度分析：\",\"从代码角度上，有没有冗余代码？\",\"从设计角度上，在这个案例中，会存在一个动物对象吗？\",\"class Animal { public void shout() { System.out.println(\\\"动物叫\\\"); } } class Cat extends Animal { @Override public void shout() { System.out.println(\\\"猫叫\\\"); } } class Dog extends Animal { @Override public void shout() { System.out.println(\\\"狗叫\\\"); } } \",\"分析一下\",\"单纯从代码角度上，有没有冗余代码？\",\"实际上是有的。从方法调用的角度考虑，Animal类当中的shout方法从来没有被调用过。该方法单纯就是让子类继承并重写的，它实际上没有被调用的需求。从最理想的角度上来说，它的方法体是可以去掉的，仅保留一个声明让子类去重写就可以了。\",\"当然代码多几行少几行并不重要，重要是：从设计角度出发，Animal类是一个抽象的概念，用于指代所有动物。程序中根本不需要创建它的对象。而且对于一个抽象的概念，也不应该、也不可能去描述它的行为。\",\"综上，我们提出两个改进的方向：\",\"Animal类就是作为顶层抽象祖先类而存在的，不需要创建对象，于是干脆不要创建对象了。\",\"Animal类当中的shout方法不需要方法体，仅用于作为被继承和重写一个方法声明。\",\"当父类的某些方法, 需要声明, 但是又不确定如何实现时, 可以将其声明为抽象方法, 那么这个类就是抽象类\"]},\"591\":{\"h\":\"定义\",\"t\":[\"按照上述构想我们首先把方法的方法体去掉，这样就得到一个抽象方法。它的语法是：\",\"[修饰符列表] abstract 返回值类型 方法名(形参列表); \",\"注：\",\"抽象方法没有方法体，只有方法的声明（方法头）。但是不要忘记写分号\\\";\\\"。\",\"抽象方法必须写在一个抽象类中。\",\"接下来，我们定义抽象类。它的语法是：\",\"[修饰符列表] abstract class 类名{ //类体 } \",\"通过测试，我们发现抽象类不能创建对象，但抽象类可以继承，存在子类。并且抽象类作为父类，多态现象仍然存在。\",\"在继承体系中，从祖先类开始，随着一个个子类的定义，子类变得越来越具体，而祖先类则更具有一般性和抽象性。在这种情况下，为了体现祖先类在设计上的抽象性，我们只将该类作为派生其他类的父类，而不能创建对象实例。这个时候，这样的类，我们称之为抽象类。\",\"上层的类越来越抽象，下层的类越来越具体。\"]},\"592\":{\"h\":\"特点与使用\",\"t\":[\"特点\",\"抽象类的特点我们主要从以下角度：\",\"类名命名特点是什么?\",\"能用哪些修饰符？\",\"成员特点 \",\"普通成员\",\"静态成员\",\"抽象方法\",\"构造器\",\"代码块\",\"测试以后，结论如下：\",\"抽象类仍然是一个类，它的命名仍然需要遵循大驼峰的命名规范。当然，它比较特殊，许多公司的开发规范中，会要求将抽象类命名为AbstracXxx或BaseXxx，用于表示该类是一个抽象类。这是一个不错的命名习惯，推荐使用，但不强制。\",\"类class在定义时，本身可以使用的修饰符就比较少，除了访问权限修饰符之外，几乎就只有final、abstract等少数修饰符。但是但是final和abstract在修饰类时是冲突的，不能放在一起使用。final是阻止继承而abstract是抽象类，如果不继承抽象类没有任何意义。\",\"抽象类的成员特点：\",\"成员变量。抽象类可以定义普通类中能够定义的所有成员变量，在这一点上，和普通类是一样的。\",\"成员方法。抽象类可以定义普通类中能够定义的所有成员方法，包括普通成员方法和静态成员方法，在这一点上，和普通类仍然是一样的\",\"注：抽象类虽然不能创建对象，但是它有子类，这些具体实现方法可以让子类继承，子类可以选择直接使用，也可以选择重写，选择的权力在子类手上（假如一个方法在抽象类的多个子类中都需要被使用，那么就可以提取到抽象类中作为一个默认实现）\",\"综上，不能发现： 普通类中能够定义的成员，在抽象类中都是可以定义的。\",\"抽象方法。首先抽象类可以没有抽象方法，但是如果一个抽象类没有抽象方法，那么它就没有必要声明为抽象，直接声明为普通类就够了。抽象方法最重要的作用是起到 \\\"占位\\\" 的作用，任何普通类继承了该抽象类，都必须实现该抽象方法（强制的）\",\"如果子类不想实现抽象父类中的抽象方法，可以把子类也设置为抽象类，抽象类就不需要实现父类中的抽象方法了。\",\"构造器。构造器除了可以自己用，创建对象时给成员变量赋值，还可以给子类用，在子类对象初始化过程中，可以调用父类的构造方法给父类的成员变量赋值。所以抽象类虽然不能创建对象，但它也是有构造器的。实际上，在Java中，任何一个类都有构造器。\",\"代码块，无论是构造代码块，还是静态代码块，都有。\",\"综上：抽象类实际上和普通类能够定义的成员是一样的，普通类中有的东西它都有，只不过多了一个抽象方法。在不考虑创建对象的情况下，直接把一个类声明为abstract，是不会编译报错的。\",\"使用\",\"抽象类的使用，我们主要探讨，它的子类特点。\",\"抽象类的子类可以有两种情况：\",\"子类是普通类，普通类继承抽象类，必须实现所有的抽象方法。\",\"子类是抽象类，抽象子类不需要实现抽象方法，抽象子类可以自由选择实现（或实现或不实现）。\",\"注：抽象类还可以继承一个普通类, 实际上如果一个抽象类, 它没有直接父类, 那它就直接继承Object\"]},\"593\":{\"h\":\"注意事项\",\"t\":[\"abstract关键字，不能用来修饰构造器、属性、代码块等结构。只能修饰类或者方法。\",\"abstract修饰类时，类的修饰符不能有final。\",\"abstract修饰方法时，该方法不能有修饰符：\",\"private\",\"static\",\"final\",\"一个抽象类中可以没有抽象方法，但是没有意义\"]},\"594\":{\"h\":\"练习\",\"t\":[\"抽象类编码练习\",\"公司正在开发一套员工管理系统，需要对公司内部存在的员工进行管理\",\"公司将员工分为三类，普通员工负责杂项工作，程序员负责技术开发，经理负责统筹规划\",\"普通员工包含3个属性：姓名、工号以及工资，行为是工作\",\"程序员包含3个属性：姓名、工号以及工资，行为是工作和加班（overtime work）\",\"经理包含4个属性：姓名、工号、工资以及奖金（bonus），行为是工作\",\"请使用所学的知识设计该员工系统\",\"要求类中提供必要的方法进行属性访问（description）\",\"类图结构\",\"image-20221205144500325\",\"抽象类的作用是：做为继承体系中的顶层父类、祖先类而存在的。说白了所有继承了该抽象类的对象，都应该是一个该抽象类的对象。比如我定义了一个抽象的Person类，那么Student、Teacher等继承它是没问题的，但是让一个Cat继承就不行了（即便有成员可以复用）。\",\"// 抽象的员工类 abstract class BaseStaff { private String name; private int id; private double salary; public BaseStaff(String name, int id, double salary) { this.name = name; this.id = id; this.salary = salary; } public abstract void work(); // 定义打印属性的方法,子类可以选择直接使用,也可以选择重写 public void printStaff() { System.out.println(\\\"id是\\\" + id + \\\"的员工,姓名是\\\" + name + \\\",Ta的工资是\\\" + salary); } public String getName() { return name; } public int getId() { return id; } public double getSalary() { return salary; } } class NormalStaff extends BaseStaff { public NormalStaff(String name, int id, double salary) { super(name, id, salary); } @Override public void work() { System.out.println(\\\"负责杂项工作\\\"); } } class Coder extends BaseStaff { public Coder(String name, int id, double salary) { super(name, id, salary); } @Override public void work() { System.out.println(\\\"负责技术开发\\\"); } public void overTimeWork() { System.out.println(\\\"996福报,蹭公司电,蹭公司网!\\\"); } } class Manager extends BaseStaff { double bonus; public Manager(String name, int id, double salary, double bonus) { super(name, id, salary); this.bonus = bonus; } @Override public void work() { System.out.println(\\\"负责统筹规划\\\"); } @Override public void printStaff() { System.out.println(\\\"id是\\\" + getId() + \\\"的员工,姓名是\\\" + getName() + \\\",Ta的工资是\\\" + (getSalary() + bonus)); } } \",\"学习目标:\",\"掌握接口的定义\",\"掌握接口的特点与使用\"]},\"595\":{\"h\":\"引例\",\"t\":[\"在之前的猫狗案例中，我们将Animal类设置为抽象类，继承体系代码如下：\",\"猫狗案例代码\",\"abstract class Animal { public abstract void shout(); } class Cat extends Animal { @Override public void shout() { System.out.println(\\\"猫叫\\\"); } } class Dog extends Animal { @Override public void shout() { System.out.println(\\\"狗叫\\\"); } } \",\"现在我们有了新需求：一部分猫和狗，经过了特殊训练，能够直立行走了。那么这群特殊的猫和狗，怎么描述它们呢？\",\"分析：\",\"部分猫和狗经过特殊训练，才能够直立行走。所以不可能直接加个方法到Cat类和Dog类中，不是所有猫狗都有这个行为。而特殊的猫狗仍然是猫和狗，所以它们肯定还要继承猫和狗这两个类。可能很多同学，这时候想到的就是：重新定义两个新的猫狗类（比如超级狗和猫）继承猫狗，然后给出直立行走的方法就算完事了。这样做不是不行，需求是实现了，但还有一些小问题：\",\"一方面没有体现代码复用。\",\"更重要的是，没有体现出特殊训练的过程。假如还有一些动物也要直立行走，增加这个行为，如何体现出规范性、标准性呢？体现出它们是特殊的经过训练的动物呢？\",\"这里我们想到了抽象类，因为抽象类中抽象方法，可以强制约束子类实现它，这样就是一种标准和规范，体现了它经过了特殊训练，和之前不同了。\",\"于是我们定义抽象类，给出抽象方法，让超级猫狗类去继承这个抽象类，可行吗？\",\"理想很美好，现实很骨感。显然做不到，因为Java不支持多继承。除开这点这么做也不是完美的，问题是：\",\"这个抽象类里面是对功能和行为的抽象，缺少属性（单独一个直立行走的行为是一个什么对象？）所以单独的行为不应该被抽象为类，不符合类的定义。\",\"继承这个抽象类也不符合继承的\\\"is-a\\\"关系，这里不适用继承（还是上面那句话，行为根本不是个体）\",\"于是，我们就迫切需要一种全新的数据类型，这种全新的数据类型：\",\"不强调属性，只强调行为的抽象，\\\"继承\\\"它表示功能的扩展。\",\"在一个类继承某个类后，还能继续\\\"继承\\\"，不受Java单继承限制。\",\"没有\\\"is-a\\\"这种继承关系的限制。\",\"最好还有抽象方法。（因为它能表示规范和标准）\",\"这种全新的数据类型，就是接口（interface）。\",\"如果多个类处理的目标是一样的，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让他们实现这个接口，各自实现自己具体的处理方法来处理那个目标\"]},\"596\":{\"h\":\"定义\",\"t\":[\"上面四条，其实已经描述了接口的特点，接口是一种表示对行为抽象的，不受Java多继承限制的，用来作为功能扩展标准的一种引用数据类型。它的定义语法如下：\",\"[访问权限修饰符] interface 接口名{ } \",\"注：\",\"接口的访问权限修饰符也只有两种：\",\"public\",\"默认缺省的\",\"接口名和类名一样，遵循大驼峰式的书写规范，接口名最好起的见名知意。有些程序员喜欢在接口前加一个大写字母I来直接，表示该类型是一个接口，可以借鉴，但不强制。\",\"接口中可以定义抽象方法，和抽象类中定义抽象方法没有区别。\",\"接口是可以被一个类\\\"继承\\\"的，接口的\\\"继承\\\"，更准确、常见的叫法称之为接口的实现。当然它也不再使用extends关键字，而是使用 implements 关键字。一个普通类实现接口必须实现所有抽象方法。它的语法是：\",\" [访问权限修饰符] class 类名 extends 类名 implements 接口名 {} \",\"细节问题：如果一个类实现接口并继承别的类，要\\\"先继承再实现\\\"。关键字位置不要写反了。\",\"在接口的实现中，可以称呼接口为\\\"父接口\\\"，接口的实现类为\\\"子类\\\"，它们仍然是父子关系。当然多态现象仍然能够发生。\",\"接口不受多继承限制，一个类可以在继承别的类的同时实现接口，而且可以实现多个接口。\"]},\"597\":{\"h\":\"优点\",\"t\":[\"使用接口有如下优点：\",\"接口不受单继承限制，这是接口非常重要的优点。\",\"接口不是类，它和它的实现类，也不需要存在\\\"is-a\\\"关系，接口比抽象类的使用更加灵活。 \",\"程序开发中将接口和它的实现类之间的关系，称之为\\\"like-a\\\"关系。只要是实现了Xxx的功能，就像Xxx。\",\"接口表示一种开发标准，一种规范。表示对功能的扩展，它只关注行为，不关注属性。\"]},\"598\":{\"h\":\"特点和使用\",\"t\":[\"接口的特点我们主要研究以下方面\",\"接口的声明特点 \",\"接口能不能创建对象?\",\"接口能不能用final修饰?\",\"接口的实现类的书写格式\",\"成员特点 \",\"能否定义属性(成员变量, 静态成员变量, 全局常量)?\",\"能否定义方法/行为?\",\"构造器\",\"代码块\",\"测试后，我们的结论是：\",\"接口的声明特点\",\"接口能不能创建对象? \",\"不能创建对象,实际上接口是抽象的. 因为接口的声明修饰符中隐含了关键字abstract\",\"接口能不能用final修饰? \",\"不能,接口定义出来目的就是为了被实现. final天生和接口矛盾\",\"接口的命名特点(非强制)\",\"接口在命名时,为了体现接口的特殊性,表示它是一个接口. 某些程序员会在接口的命名前加大写字母\\\"I\\\"\",\"接口的实现类的书写格式(非强制)\",\"某些程序员会在接口的所在位置,定义一个全新的包,叫\\\"impl\\\"\",\"然后在该包下写接口的实现类,命名为\\\"接口名 + Impl\\\"\",\"成员特点\",\"能不能定义属性?(成员变量,静态成员变量,全局常量) \",\"可以定义,但是接口中的属性默认都是\\\"public static final\\\"修饰的公共的全局常量\",\"这些隐含的修饰符不要写出来, 接口能够定义的所有结构的访问权限都是public, 而且public是隐含的修改不了\",\"接口中没有静态代码块,接口中的全局常量,必须显式赋值\",\"接口表示对功能的扩展,所以接口往往只有对行为的抽象(接口往往只有方法),接口是非常少见定义属性的, 只有当接口的所有实现类,都需要一个共同的全局常量时才考虑在接口中定义属性.\",\"能不能定义方法/行为? \",\"可以定义方法,但是接口中的方法默认都是\\\"public abstract\\\"修饰的公共的抽象方法\",\"实际上,在Java8之前,接口中没有任何实现方法,接口中只能定义抽象方法\",\"特别强调: 实际开发中,99%的情况下,接口就只有光秃秃的抽象方法定义,没有其他任何内容\",\"构造器\",\"接口是没有构造器的,接口自己用不到构造器\",\" 接口的子类也用不到 \",\"代码块\",\"没有静态代码块\",\" 没有构造器就没有构造代码块 \",\"以上总结,接口能定义的结构特点:\",\"可以定义全局常量\",\" 可以定义抽象方法(Java8以后允许实现方法) \",\"实际上,接口往往只有抽象方法定义,它表示对行为的抽象, 表示制定标准和规范\",\"注意两个问题:\",\"实现接口的类，如果没有明确继承一个其他类，那么子类对象的隐式初始化super()指向Object类。\",\"接口虽然不是类，但是它也继承了Object类。\",\"接口的使用，我们主要探讨它的子类特点。\",\"接口的子类可以是什么？\",\"普通类实现接口，必须实现所有的抽象方法。\",\"抽象类实现接口，按需实现抽象方法。\",\"接口可以继承一个接口，并且接口在继承接口后，可以重写父接口中的抽象方法和默认方法。\",\"参考如下代码（了解即可）：\",\"interface A { Object test(); default void test2() { } } interface B extends A { /* 重写父接口抽象方法 只有在父接口的方法返回值类型是父类类型时 子接口中可以将抽象方法返回值类型重写为子类类型 其余地方都不可变。 */ @Override Demo test(); @Override default void test2() { System.out.println(); } } \"]},\"599\":{\"h\":\"extends VS implements\",\"t\":[\"实现（Implement）：如果多个类处理的目标是一样的，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让他们的实现这个接口，各自实现自己具体的处理方法来处理那个目标\",\"继承: 指的是一个类（称为子类）继承另外的一个类（称为父类）的功能，并可以增加它自己的新功能的能力。所以，继承的根本原因是因为要复用，而实现的根本原因是需要定义一个标准\",\"简单点说，就是同样是一台汽车，既可以是电动车，也可以是汽油车，也可以是油电混合的，只要实现不同的标准就行了，但是一台车只能属于一个品牌，一个厂商。\",\"class Car extends Benz implements GasolineCar, ElectroCar{ } 我们定义了一辆汽车，他实现了电动车和汽油车两个标准，但是他属于奔驰这个品牌。像上面这样定义，我们可以最大程度的遵守标准，并且复用奔驰车所有已有的一些功能组件。 \",\"继承（extends）是不能跨越种族的，类和类继承，接口和接口继承，接口和类之间没有继承关系。\",\"普通类继承一个抽象类，需要实现里面的所有抽象方法。\",\"抽象类继承一个抽象类，按需实现里面的抽象方法。\",\"抽象类继承一个普通类，是可以的。\",\"接口在继承一个接口后，会得到接口的所有抽象方法。\",\"类的继承是单继承的，接口的继承是多继承的。\",\"实现（implements），必须发生在类与接口之间，接口和类是没有任何关系的。\",\"普通类实现接口，必须实现所有抽象方法\",\"抽象类实现接口，按需实现抽象方法\"]},\"600\":{\"h\":\"默认方法和静态方法\",\"t\":[\"Java8中接口的语法迎来了大的变动，新增了两种具有方法体的实现方法：\",\"默认方法\",\"静态方法\",\"默认方法。\",\"// 默认方法的语法: default 返回值类型 方法名(形参列表){ //方法体 } \",\"接口中的默认方法的访问权限修饰符是public，不可更改。\",\"默认方法的作用： \",\"抽象类中的实现方法是用来作为子类的默认实现的，但是接口不具备这个功能。接口表示对功能的扩展，它更多的是一种标准和规范，多数情况下它不需要实现方法。\",\"Java8仍然新增了默认方法，主要是两个角度考虑: \",\"接口中一旦有了默认实现方法，程序设计接口的灵活性就增加了。在没有默认方法时，接口中一旦新增任何方法，子类都必须实现它。而现在有了默认方法，就不需要这么做：需要实现的就自己重写，不需要的就直接继承。代码的兼容性和灵活性就增加了。\",\"Java8中引入了Lambda表达式和StreamAPI，接口中的默认方法可以作为它们的实现，完成函数式编程。（这个仅了解，后面会讲Lambda表达式）\",\"接口中的默认方法，还可以配合接口的\\\"多实现\\\"，实现真正意义上的多继承。\",\"静态方法。\",\"static 返回值类型 方法名(形参列表){ //方法体 } \",\"接口中的静态方法也是默认public修饰的，不可更改。\",\"它的调用方式是用接口名.静态方法名。 \",\"接口中的静态方法也是为了配合Lambda表达式和StreamAPI使用的，其余场景不多见。\",\"接口自从Java8以后有了静态方法，甚至可以写一个main方法。\",\"接口中的静态实现方法，只能自己用，不能用实现类类名调用。\",\"上面两种方法仅供了解，实际开发中，可能会偶尔见到它，但自己写的概率非常小。\"]},\"601\":{\"h\":\"练习\",\"t\":[\"教练（Coach）和运动员（Sportsman）案例\",\"小试牛刀请用所学知识分析：这个案例中有哪些抽象类，哪些接口，哪些具体类。\",\"现在有乒乓球运动员和篮球运动员，乒乓球教练和篮球教练。为了能够出国交流，跟乒乓球相关的人员都需要学习英语。\",\"(重要)某电商系统后台，前端程序员需要后端程序员，提供接口来完成商品的管理，展示页面。假如前后端商量好，要求能实现CRUD操作, 采用MVC分层思想, 业务逻辑如下: \",\"展示全部商品（Products）页面时，将仅装有商品对象的数组返回，前端不提供任何数据。\",\"新增商品时，前端提供商品各种参数，后端需要校验ID唯一性，然后将对象插入数组，返回插入结果(true/false)。\",\"查询商品, 前端提供商品ID或者商品名称(可根据ID查询或者根据商品名称查询), 后端根据信息查询商品详情, 并返回结果(商品对象)\",\"更新商品(每次更新商品中的一个信息即可), 前端提供要被更新的商品ID, 以及新的产品信息(可以用数组的形式存储新的产品信息), 后端根据商品ID找到该商品, 并将新的信息替换, 返回该商品对象.\",\"删除商品时，前端提供商品ID，后端将该商品删除后，返回删除结果。（成功返回true，根据ID找不到该商品即删除失败返回false）\"]},\"602\":{\"h\":\"方法的形参和返回值类型\"},\"603\":{\"h\":\"方法传值\",\"t\":[\"方法的形参在方法调用传入实参时，不一定要求数据类型完全一致。\",\"**基本类型：**对于基本数据类型的方法形参，存在自动类型提升。\",\"引用类型： 对于引用数据类型的方法传参，存在自动向上转型。 \",\"形参如果写一个普通类：调用方法时需要传入的是该类的对象或者该类的子类对象\",\"形参如果写一个抽象类：调用方法时需要传入的是该抽象类的子类对象\",\"形参如果写一个接口：调用方法时需要传入的是该接口的子类对象\"]},\"604\":{\"h\":\"方法的返回值\",\"t\":[\"方法的返回值类型，和在方法体中返回具体值（对象）时，不一定要求数据类型完全一致。\",\"**基本类型：**方法体中，返回一个具体的值不要求和返回值类型完全一致，存在自动类型提升。\",\"引用类型： 在方法体中，返回一个对象时不要求就是返回值类型的对象，存在自动向上转型。 \",\"返回值类型如果写一个普通类：可以返回该类的对象或者该类的子类对象\",\"返回值类型如果写一个抽象类：返回该抽象类的子类对象。\",\"返回值类型如果写一个接口：返回该接口的子类对象。\"]},\"605\":{\"h\":\"方法重写中的返回值类型问题\",\"t\":[\"父子类方法重写中，方法声明中返回值类型的书写。\",\"**基本类型和void：**必须保持一模一样，不存在类型提升。\",\"**引用类型：**不必保持一模一样，存在自动向上转型。 \",\"类：父类中的方法返回一个普通类类型 \",\"子类方法中可以返回该类型\",\"也可以返回该类的子类类型\",\"抽象类：父类中的方法返回一个抽象类类型 \",\"子类方法可以返回该类型\",\"也可以返回抽象类的实现类类型\",\"接口：父类中的方法返回一个接口类型 \",\"子类方法可以返回该类型\",\"也可以返回接口的实现类类型\"]},\"606\":{\"h\":\"链式调用\",\"t\":[\"链式调用，在Java代码中是很常见的。当然它不是一个语法，这里讲一下它的形式，大家知道即可。\",\"对于类Studnet：\",\"class Student{ public Student getStudent(){ return new Student(); } public Teacher getTeacher(){ return new Teacher(); } } class Teacher{ public void show(){ System.out.println(\\\"秀一波~~~\\\"); } } \",\"假如在main方法中写以下代码（不使用链式调用）：\",\"StudentDemo sd = new StudentDemo(); Student s = sd.getStudent(); s.show(); \",\"使用链式调用的形式为：\",\"new StudentDemo().getStudent().show(); \",\"链式调用的本质在于：前面方法的返回值是一个对象。\",\"接口和抽象类的异同：\",\"编号\",\"区别点\",\"抽象类\",\"接口\",\"1\",\"定义\",\"包含抽象方法的类\",\"抽象方法和全局常量的集合\",\"2\",\"组成\",\"构造方法、抽象方法、普通方法、常量、变量\",\"常量、抽象方法、(jdk8:默认方法、静态方法)\",\"3\",\"使用\",\"子类继承抽象类(extends)\",\"子类实现接口(implements)\",\"4\",\"关系\",\"抽象类可以实现多个接口\",\"接口不能继承抽象类，但允许继承多个接口\",\"5\",\"对象\",\"不能创建对象，但是有构造方法\",\"不能创建对象，也没有构造方法\",\"6\",\"局限\",\"抽象类不能被多继承\",\"接口之间能多继承，能被多实现\",\"7\",\"思想\",\"作为模板或对共性属性和行为抽象，is-a\",\"作为标准或对共性行为抽象，like-a\",\"8\",\"访问权限\",\"抽象类的成员，写访问权限比较自由。\",\"接口的成员，必须是public修饰的\",\"9\",\"选择\",\"如果抽象类和接口都可以使用的话，优先使用接口，避免单继承的局限\",\"总之，抽象类和接口除了都是抽象外，区别相当明显。抽象类是作为继承层次中的顶层父类存在的，接口则比较自由。\",\"熟悉不同内部类的语法\",\"熟悉不同内部类的访问特点\"]},\"607\":{\"h\":\"引例\",\"t\":[\"引例\",\"我们现在做一个应用程序，需要描述一台电脑中的CPU，对于电脑而言，该怎么去描述这个CPU呢？\",\"分析：\",\"我们可以创建两个类，一个描述Computer，一个描述CPU。但这样明显是有问题的：\",\"CPU是电脑中最重要的组件，但它脱离电脑存在就是一粒沙子。这意味着CPU对象，应仅存在于Computer内部。\",\"CPU可以控制计算机的一切硬件资源。这意味CPU对象能够操控，Computer类中的所有成员，无论私有。\",\"定义普通类CPU是不能完成需求的，因为：\",\"普通类没有私有概念，不可能控制仅能在Computer内部创建对象。\",\"普通类不可能直接访问，其它类的私有成员。\",\"显然CPU类不应该是一个普通类，不应该是一个独立的类 ---> 不再将CPU类定义为一个独立的类，而是将它放入Computer类的类体中，可以近似的看成是一个Computer类的成员 ---> CPU类近似看成Computer类的成员，于是：\",\"在其它类内部的类，就有了私有概念，就有了四种访问权限。只需要在内部私有化一个类，那么在外界就无法创建它的对象了。\",\"既然已经成为了成员，成为了\\\"自己人\\\"，那么就不再受限于权限控制了，内部类就可以访问包裹它的类的所有成员，包括私有。\",\"上述两条，其实就是（成员）内部类的主要特点。也说明了使用内部类的主要场景：\",\"内部类是一种比类更加极致的封装思想体现，内部类的成员不仅被类自身保护，还被包裹着它的类保护。\",\"内部类和包裹它的类互相成为了\\\"好兄弟\\\"，互相访问成员都不受访问权限限制。\",\"当你有以上使用场景时，就可以考虑使用内部类。\"]},\"608\":{\"h\":\"定义与分类\",\"t\":[\"基本概念:\",\"在Java语言中类可以嵌套定义，广义的内部类指的是定义在另一类当中的一个类。\",\"分类:\",\"根据内部类在类中定义的位置不同:\",\"成员位置\",\"成员内部类\",\"静态内部类\",\"局部位置\",\"局部内部类\",\"匿名内部类\",\"Lambda表达式\",\"但是我们在学习的时候，不按定义位置来学习。我们按照它是一个类，还是一个对象来分类：\",\"语法定义了一个类，包括成员内部类、静态内部类和局部内部类。既然是定义了一个类，使用时还需要创建对象才能用。\",\"语法直接创建了一个对象，包括匿名内部类和Lambda表达式。由于已经通过语法创建了对象，可以直接使用。\",\"// 外部类 class Computer{ // 内部类 class CPU{ } } // 外部其他类 class Demo{ } \",\"为了上课方便，我们需要统一口径，在内部类课程当中，我们统一规定：\",\"像CPU这种，定义在别的类的内部的类，我们称之为内部类.\",\"像Computer这种，包裹内部类的，我们称之为外部类.\",\"Demo这种类我们称之为外部其他类.\",\"学习方式: 1.定义的位置 2.权限修饰符 3.成员特点 4.继承和实现 5.访问特点 内部类----->外部类 外部类----->内部类 内部类----->外部其他类 外部其他类--->内部类\"]},\"609\":{\"h\":\"成员内部类\",\"t\":[\"成员内部类是最普通的内部类，它定义在另一个类的成员位置， 可以看成该类的一个成员。\",\"语法：\",\"//外部类 [访问权限修饰符] class OuterClazz{ //成员内部类 [访问权限修饰符] class InnerClazz{ } } \"]},\"610\":{\"h\":\"自身特点\"},\"611\":{\"h\":\"访问权限修饰符\",\"t\":[\"成员内部类可以看成另一个类的成员，它和类中成员一样，有四种访问权限级别：\",\"public\",\"protected\",\"缺省的，默认访问权限\",\"private\",\"注：\",\"外部类可以保护成员内部类，如果想要访问一个成员内部类。首先需要外部类权限，然后还需要成员内部类权限。\",\"都定义成员内部类了，多数情况下，应该私有化它。\"]},\"612\":{\"h\":\"成员特点\",\"t\":[\"可以定义普通成员变量，成员方法。但没有静态声明（包括静态变量，静态方法，静态代码块）\",\"有构造器，有构造代码块。\",\"可以有静态全局常量。\",\"注意:\",\"允许定义字面值常量赋值的全局常量, 也就是不会触发类初始化的全局常量\"]},\"613\":{\"h\":\"继承和实现\",\"t\":[\"内部类可以继承和实现外部的类和接口。\",\"也可以在类中定义多个普通类、抽象内部类和接口用来自己继承和实现。\"]},\"614\":{\"h\":\"成员内部类的访问特点\",\"t\":[\"在具体了解成员内部类的使用之前,我们要搞清楚成员内部类和外部类之间,到底什么关系?\",\"成员内部类可以看成外部类的一个成员\",\"类中的成员变量,必须依赖于类的对象而存在, 那么成员内部类的对象,也必须依赖于外部类对象而存在\",\"也就是说,要想得到成员内部类对象,必须在外部类对象的基础上创建,成员内部类对象不能单独创建, 成员内部类依赖于外部类,反过来,没有依赖关系\",\"之所以存在这样的依赖关系:\",\"是因为成员内部类对象的成员变量列表中,都会持有外部类对象的引用(成员内部类对象中保存了一个它所寄生的外部类对象的引用)\"]},\"615\":{\"h\":\"成员内部类内部访问外部类(重点)\",\"t\":[\"在成员内部类的成员方法中访问外部类成员，因为外部类对象已经存在，所以可以直接访问，直接写成员的名字就可以了。在特殊情况下，当成员内部类成员和外部类成员同名时，如果仍然用成员名直接访问，访问的结果是成员内部类自身成员（就近原则），这时：\",\"在成员内部类的成员方法中，自身对象用this指向，用this点访问到的一定是自身成员。\",\"在成员内部类的成员方法中，外部类对象用外部类类名.this指向，用外部类类名.this点访问到的一定是外部类成员。\",\"极限情况下，出现局部变量，成员内部类成员变量，外部类成员变量三者都同名的情况：\",\"就近原则直接写成员名字，访问的是局部变量的。\",\"用this.访问的成员内部类自己的成员变量。\",\"用外部类类名.this.访问的是外部类的成员变量。\",\"最后，如果全局常量同名了，就用类名去区分好了。\"]},\"616\":{\"h\":\"外部类访问成员内部类成员(重点)\",\"t\":[\"第二，外部类访问成员内部类成员，要分两种情况：\",\"外部类的成员方法中访问成员内部类成员：\",\"因为这时成员内部类对象不存在，就需要先创建它的对象。\",\"成员内部类对象依赖外部类对象而存在， 所以得先存在外部类对象才行。而恰好成员方法中隐含自身对象，所以这里创建成员内部类对象的方式就是—— 直接new创建。\",\"创建对象后，直接用对象名点访问即可。如果有同名的情况，用成员内部类对象名访问的就是内部类的成员，反之不写对象名或者写this访问的都是外部类的成员。\",\"外部类的静态成员方法中访问成员内部类成员：\",\"成员内部类对象不存在，就需要先创建它的对象。\",\"成员内部类对象依赖外部类对象而存在， 所以得先存在外部类对象才行。但静态方法中什么对象都没有，就需要先创建外部类对象，再创建成员内部类对象。\",\"语法：\",\"OuterClazz outer = new OuterClazz(); InnerClazz inner = outer.new InnerClazz(); // 上面等价于下面 InnerClazz inner = new OuterClazz().new InnerClazz(); \",\"得到两个对象后，用谁的对象名访问的就是谁的成员。\"]},\"617\":{\"h\":\"外部其他类访问成员内部类成员(了解)\",\"t\":[\"外部其他类要访问成员内部类成员，条件要苛刻的多。由于成员内部类属于外部类的一个成员，所以首先外部其他类需要有外部类的访问权限，再次还需要成员内部类的访问权限。\",\"OuterClazz.InnerClazz oi = new OuterClazz().new InnerClazz(); \",\"创建对象后，用对象名访问成员即可。\"]},\"618\":{\"h\":\"成员内部类访问外部其他类成员(了解)\",\"t\":[\"在成员内部类中访问外部类成员，和在普通类中访问其它类成员别无二致：\",\"静态成员直接类名点访问。\",\"普通成员需创建外部类对象去访问。\"]},\"619\":{\"h\":\"练习\",\"t\":[\"试着说一说下述访问，能否进行，怎么进行，是否受访问权限限制。\",\"成员内部类的成员方法中，去访问外部类的成员。\",\"外部类的成员方法中，去访问成员内部类的成员。\",\"外部类的静态成员方法中，去访问成员内部类的成员。\",\"外部其他类的成员方法中，访问成员内部类的成员。\",\"外部其他类的静态成员方法中，访问成员内部类的成员。\",\"补全程序，使得可以输出三个num\",\"class Outer { public int num = 10; class Inner { public int num = 20; public void show() { int num = 30; System.out.println(); System.out.println(); System.out.println(); } } } \"]},\"620\":{\"h\":\"静态内部类\",\"t\":[\"​ 有时候, 使用内部类只是为了把一个类隐藏在另外一个类的内部, 并不需要内部类有外部类对象的一个引用, 如果使用static来修饰一个成员内部类, 就不会生成那个引用, 则这个内部类就属于外部类本身, 而不是属于外部类的某个对象, 这就是所谓的静态内部类.\",\"//外部类 [访问权限修饰符] class OuterClazz{ // 静态内部类访问权限修饰符，有四个，和普通成员一样 [访问权限修饰符] static class StaticInnerClazz{ } } \"]},\"621\":{\"h\":\"自身特点\",\"t\":[\"依然主要从以下几个角度分析：\",\"访问权限修饰符\",\"成员特点\",\"继承和实现\"]},\"622\":{\"h\":\"访问权限修饰符\",\"t\":[\"静态内部类和成员内部类一样，有四种访问权限级别：\",\"public\",\"protected\",\"缺省的，默认访问权限\",\"private\",\"注：\",\"外部类可以保护静态内部类，如果想要访问一个静态内部类。首先需要外部类权限，然后还需要静态内部类权限。\",\"既然定义内部类，仍然建议私有化。当然具体情况具体分析\"]},\"623\":{\"h\":\"成员特点\",\"t\":[\"要理解静态内部类的成员有什么特点，就要像成员内部类那样，搞清楚，静态内部类到底和外部类是什么关系。在Oracle公司官网有一段文字解释静态内部类和成员内部类的区别：\",\"Nested classes that are declared static are called static nested classes. Non-static nested classes are called inner classes.\",\"这句话直白的翻译过来就是：\",\"声明为static的嵌套类称为静态嵌套类，非static嵌套类才被成为内部类。\",\"理解这句话，关键点就在于nested和inner的区别：\",\"nested，嵌套，指的是：直接把一个类丢到另一个类中，两个类其实没太大关系。\",\"inner，内部，指的是：某个类本身就是另一个类的一部分，在内部。\",\"这其实就已经说明白了，成员内部类和静态内部类的区别：\",\"成员内部类必须依赖外部类存在，创建成员内部类对象必须持有外部类对象的引用。\",\"静态内部类和外部类就是独立的两个类，只不过静态内部类借用外部类来保护自己罢了。\",\"相比较而言，成员内部类和外部类的关系是：心脏——身体，CPU——计算机\",\"而静态内部类和外部类的关系是：寄居蟹——螺壳，啃老族——他的父母\"]},\"624\":{\"h\":\"继承和实现\",\"t\":[\"​ 静态内部类的继承与实现和成员内部类并没有太大不同，区别在于，静态内部类只能继承一个静态内部类，而不能继承成员内部类。而且由于静态内部类的独立性很强，在外部，也可以在有权限的情况下，轻松继承一个静态内部类。\"]},\"625\":{\"h\":\"总结\",\"t\":[\"​ 静态内部类很特殊, 因为静态内部类对象和外部类对象完全独立， 静态内部类对象不会持有外部类对象引用，所以它是内部类中的异类。实际开发中，你就将它作为一个可以定义在类的内部，隐藏自身存在的一个普通类，去使用就可以了。\"]},\"626\":{\"h\":\"静态内部类访问特点\",\"t\":[\"在研究具体的访问前，仍先明确以下两点：\",\"内部类和外部类是\\\"好兄弟\\\"，它们之间的访问不受访问权限限制，包括私有。\",\"静态内部类对象完全不依赖于部围类对象而存在，这意味着，互相访问，不管在哪都要创建对方对象。\"]},\"627\":{\"h\":\"静态内部类内部访问外部类\",\"t\":[\"​ 不管是静态内部类中的静态方法还是成员方法，都没有外部类对象存在，需要创建对象访问。语法就直接new对象就可以了。创建好对象以后，用对象名访问即可。如果同名，有谁的引用访问的就是谁的。\"]},\"628\":{\"h\":\"外部类访问静态内部类成员\",\"t\":[\"​ 不管是静态内部类中的静态方法还是成员方法，都没有外部类对象存在，需要创建对象访问。语法就直接new对象就可以了。创建好对象以后，用对象名访问即可。如果同名，有谁的引用访问的就是谁的。\"]},\"629\":{\"h\":\"外部其他类访问静态内部类成员\",\"t\":[\"​ 主要就是考虑权限，先要有外部类权限，再要有静态内部类权限。有权限后就可以创建对象了，但是创建对象时，需要指出外部类是谁（毕竟你住人家房子里），语法是：\",\"OuterClazz.StaticInnerClazz inner = new OuterClazz.StaticInnerClazz(); \",\"创建对象后，用对象名访问成员即可。当然这个访问受权限限制。\"]},\"630\":{\"h\":\"静态内部类访问外部其他类成员\",\"t\":[\"​ 创建对象访问即可，受权限控制\"]},\"631\":{\"h\":\"注意事项\",\"t\":[\"内部类也是类,也需要类加载, 静态内部类和外部类之间的类加载,它们会互相影响吗?\",\"是不会的, 静态内部类和外补类之间本身没有依赖关系\",\"它们的类加载,new对象,都是没有关系的\"]},\"632\":{\"h\":\"练习\",\"t\":[\"试着说一说下述访问，能否进行，怎么进行，是否受访问权限限制。\",\"静态内部类的成员方法中，去访问外部类的成员。\",\"外部类的成员方法中，去访问静态内部类的成员。\",\"外部类的静态成员方法中，去访问静态内部类的成员。\",\"外部其他类的成员方法中，访问静态内部类的成员。\",\"外部其他类的静态成员方法中，访问静态内部类的成员。\",\"总结一下，成员内部类和静态内部类的用途：\",\"首要用途是隐藏类，当你在某个位置需要一个对象来完成需求，而你又不希望外界知道这个类时，可以用内部类, 用的时候优先用静态内部类，因为它限制比较少\"]},\"633\":{\"h\":\"局部内部类\",\"t\":[\"​ 局部内部类是定义在一个方法或者一个作用域里面的类，简单来说，将局部内部类看成是局部变量即可，该类的有效范围仅在作用域内部。（这意味着要创建它的对象，必须在作用域内部创建）\",\"从语法和具体使用上看，局部内部类和成员内部类很相似，有点类似于直接把一个成员内部类放进局部位置，语法是：\",\"// 局部位置 class Inner{ } // 局部位置 \"]},\"634\":{\"h\":\"自身特点\"},\"635\":{\"h\":\"访问权限修饰符\",\"t\":[\"​ 局部内部类和局部变量一样，没有访问修饰权限。因为这毫无意义，大括号已经限制了它的访问范围。同样，局部内部类不能用static关键字修饰，原因和局部变量一样。\"]},\"636\":{\"h\":\"成员特点\",\"t\":[\"局部内部类的成员特点和成员内部类一模一样，不再赘述：\",\"没有静态static声明，但可以创建全局常量（不触发类加载的）\",\"有构造方法和构造代码块。\"]},\"637\":{\"h\":\"继承和实现\",\"t\":[\"局部内部类可以继承和实现外部的类或者接口，这是局部内部类的一个重要用途。\"]},\"638\":{\"h\":\"局部内部类的访问特点\",\"t\":[\"外部类仍然把局部内部类当\\\"好兄弟\\\"，局部内部类访问外部类成员仍不受权限限制。但局部内部类的作用域已被限制死了，外部类中只有装着局部内部类的作用域内，能访问到该局部内部类。\",\"外部其他类已经完全无法访问到局部内部类了。\"]},\"639\":{\"h\":\"局部内部类在外部类的成员方法中\",\"t\":[\"外部类的成员方法中，是隐含自身类对象的引用的，并且这个引用编译器会自动加入到局部内部类中。也就是说， 处在外部类成员方法中的局部内部类，会持有外部类对象的引用。\",\"于是：\",\"可以直接在局部内部类的成员方法中，访问外部类的成员。\",\"如果出现同名，仍然用外部类类名.this指向外部类对象。\",\"如果全局常量同名，就用类名点区分。\"]},\"640\":{\"h\":\"局部内部类在外部类的静态成员方法中\",\"t\":[\"静态方法中就不存在任何对象了，其中的局部内部类也就不会持有引用了。想要访问外部类成员，就需要创建对象了。\"]},\"641\":{\"h\":\"局部内部类的经典使用\",\"t\":[\"局部内部类经常使用在以下两个场景中：\",\"方法需要返回一个对象，返回值类型是引用数据类型时。\",\"方法需要返回一个对象时，可以在方法的局部位置写一个 局部内部类 继承/实现外部的类/接口，创建对象后作为返回值。这是因为方法的返回值可以是返回值类型的对象，也可以是子类对象（当返回值类型是引用数据类型时）。\",\"方法需要传入一个对象，形参数据类型是引用数据类型时。\",\"方法需要传入一个对象实参时，可以在调用方法的位置定义一个 局部内部类 来继承/实现外部的类/接口，创建对象后作为方法的实参传入。这是因为方法的实参可以是形参类型的对象，也可以子类对象（当返回值类型是引用数据类型时）。\",\"使用局部内部类的优点：\",\"绝对对外界隐藏，封装。\",\"相比较于传统的定义类，然后创建对象，它相对更加简洁省事。\",\"缺点：\",\"这个类是一次性的。\",\"综上，假如在局部位置需要一次性的使用某个对象，可以使用局部内部类创建它，但是如果多次在不同的方法中使用，使用局部内部类就得不偿失了。\"]},\"642\":{\"h\":\"注意事项\",\"t\":[\"一. 在局部内部类的成员方法中，如果想要访问作用域内部的局部变量，那么该变量：\",\"要么直接就用final修饰，是一个局部常量。\",\"要么就是一个事实上的常量，即只能赋值一次，相当于用final修饰它。\",\"在Java8之前版本的JDK中，如果不给能在局部内部类内部，访问的局部变量直接加上final修饰，会编译报错。\",\"在最后，特别强调一点。后面学习的 匿名内部类 和 Lambda表达式 本质依然是局部内部类，这一条注意事项仍然生效。\",\"二. 局部内部类对象作为方法的返回值, 返回值类型必须是其父类型\"]},\"643\":{\"h\":\"内部类的优缺点和使用场景\",\"t\":[\"场景一：无条件地访问外部类的所有元素（优点）\",\"场景二：隐藏类\",\"可以用private、protected修饰内部类。\",\"private修饰内部类、外界感受不到该类存在。\",\"场景三：实现多继承\",\"可以创建多个成员内部类继承外部多个类\",\"然后创建内部类对象，实际上就是外部类继承了多个类的成员\",\"场景四：通过匿名内部类来优化简单的接口实现/Lambda表达式更简洁\",\"重点：内部类要说使用频率 最高的肯定是匿名内部类和Lambda表达式\",\"内部类的缺点\",\"内部类的缺点也是显而易见，语法很复杂，在类中定义内部类也会导致类的结构变复杂，影响代码可读性。\",\"除此之外，不合理使用内部类还可能导致内存泄漏（了解）\",\"持有外部类对象引用的内部类对象，如果始终被使用而没有释放：\",\"这在极端的场景下，会导致堆内存溢出，存在一定的风险。\"]},\"644\":{\"h\":\"内部类对象\",\"t\":[\"学习目标\",\"熟练掌握匿名内部类使用\",\"熟练掌握lambda表达式使用\"]},\"645\":{\"h\":\"概述\",\"t\":[\"本节内部类对象，本质上还是属于定义在别的类内部的一个类。\",\"但区别是： 成员内部类、静态内部类和局部内部类都属于定义了一个类，后续使用还需要基于内部类创建对象。而本节中的匿名内部类和Lambda表达式都是直接通过语法创建了对象。\",\"最后，在学习匿名内部类和Lambda表达式之前，我们还是要清楚——它们都是特殊的局部内部类。所以一旦访问方法的局部变量，该局部变量需要是一个常量(final 修饰)。\"]},\"646\":{\"h\":\"匿名内部类\",\"t\":[\"​ 我们已经使用过匿名对象了，匿名对象的含义是这个对象是没有名字，没有引用指向它。那么匿名内部类，指的就是这个内部类没有名字。当然成员内部类和静态内部类没法没有名字，所以 匿名内部类指的是\\\"没有名字的局部内部类\\\"。\"]},\"647\":{\"h\":\"语法\",\"t\":[\"在方法等局部位置，写下列语法，即表示定义匿名内部类：\",\"// 局部位置 new 类名或者接口名(){ // 某类名或接口名的子类的类体 }; // 局部位置 \",\"解释说明：\",\"new表示创建对象，表示创建语法中\\\"类名/接口名\\\"的子类对象。\",\"这个语法结构，我们只知道这是一个子类对象，但这个子类到底叫啥，不知道，所以它是一个匿名类。当然匿名内部类更准确的说法，应该叫匿名内部类对象。\",\"匿名内部类的本质是，一个继承了类或者实现了接口的匿名子类对象。\"]},\"648\":{\"h\":\"基本使用\",\"t\":[\"匿名内部类是特殊的局部内部类，它的成员特征、访问特征和局部内部类没有区别。这里不再赘述。\",\"这里我们直接说明一下，匿名内部类对象的两种使用方式：\",\"可以直接在后面调用方法，访问它的成员（当一个匿名对象使用） \",\"优点是：可以访问子类独有的成员。方便快捷，不需要用引用接收再去使用\",\"缺点是：一次性，仅能用一次\",\"可以用（父）引用接收对象，然后再用引用访问成员 \",\"优点是：可以用多次\",\"缺点是：不能访问子类独有成员（被父类引用限制了访问范围，无法强转，因为子类已经匿名了)\",\"综上，两种使用方式场景不同。如果有多次使用需求，就需要父引用接收；反之如果仅用一次，或者需要访问子类独有成员，就必须直接使用，不能用引用接收。\"]},\"649\":{\"h\":\"使用场景\",\"t\":[\"​ 匿名内部类实际上就是更简单的局部内部类（直接获取了对象），所以局部内部类的使用场景，可以直接套用过来。\",\"匿名内部类经常使用在以下两个场景中：\",\"方法需要返回一个对象，返回值类型是引用数据类型时。\",\"方法需要返回一个对象时，可以在方法的局部位置写一个 基于X类或X接口的匿名内部类对象 ，然后直接作为返回值返回给外界。\",\"方法需要传入一个对象，形参数据类型是引用数据类型时。\",\"方法需要传入一个对象实参时，可以在调用方法的实参位置填入一个 基于X类或X接口的匿名内部类对象，就将它作为一个实参传给方法使用。\",\"使用匿名内部类的优点：\",\"绝对对外界隐藏，封装。\",\"比起局部内部类，它更方便简洁了。所以实际开发中，匿名内部类基本取代了局部内部类的作用。\",\"缺点：\",\"这个对象是一次性的。\",\"总之，酌情使用匿名内部类对象，可以简化代码书写，方便省事。但不要为了使用而使用，假如存在多个场景都需要一个子类对象，那还是直接创建一个子类出来好了。\"]},\"650\":{\"h\":\"练习\",\"t\":[\"不修改main方法和接口Inter的前提下，补齐Outer类代码，要求在控制台输出HelloWorld\",\"public class Demo{ public static void main(String[] args) { Outer.method().show(); } } interface Inter { void show(); } class Outer { } \",\"几种实现方式:\",\"手写类实现接口\",\"局部内部类\",\"匿名内部类\",\"lambda表达式\"]},\"651\":{\"h\":\"lambda表达式\",\"t\":[\"Lambda 表达式是 JDK8 的一个新特性，可以取代接口的匿名内部类，写出更优雅的Java 代码。\",\"Lambda表达式仍然是局部内部类，是特殊的局部内部类，仍然定义在局部位置。而且局部内部类的注意事项，也一样存在。\",\"Lambda表达式在取代匿名内部类时，不是全部都取代，而是取代接口的匿名内部类，而类的匿名内部类Lambda表达式是不能取代的。\",\"Lambda表达式是匿名内部类的更进一步， Lambda表达式得到的也不是一个类，而是一个对象，并且是接口的子类对象。\"]},\"652\":{\"h\":\"使用前提\",\"t\":[\"Lambda表达式虽然说是取代接口的匿名内部类，但也不是什么接口都能用Lambda表达式创建子类对象。\",\"Lambda表达式要求的接口中，必须有且仅有一个必须要实现的抽象方法。这种接口在Java中，被称之为\\\"功能接口\\\"。功能接口在语法上，可以使用注解@FunctionalInterface标记在接口头上，用于检测一个接口是否是功能接口。\",\"例如：\",\"注解@FunctionalInterface\",\"@FunctionalInterface interface IA{ void test(); } \",\"上述代码中IA接口就是一个功能接口，注解就不会编译报错，反之就会编译报错。这有点类似于@Override注解对方法重写的检验。\",\"看完上述关于功能接口的语法定义，思考两个问题：\",\"功能接口中只能有一个方法吗？\",\"功能接口中只能有一个抽象方法吗？\",\"答：\",\"不是，Java8中的默认方法和静态方法不需要子类实现，功能接口中可以允许有它们存在。\",\"不是，有极个别比较特殊的抽象方法，可以不需要子类实现。\",\"注：Object类是Java每一个类的父类，所以Object类当中的方法实现就可以作为接口抽象方法的实现。比如：\",\"功能接口不仅有一个抽象方法\",\"@FunctionalInterface interface IA{ void test(); boolean equals(Object obj); } \",\"接口IA仍然是一个功能方法，因为抽象方法boolean equals(Object obj);可以直接使用Object类中的实现，无需子类实现。\",\"所以，再强调一下，功能接口指的是，有且仅有一个必须要子类实现的抽象方法的接口。\"]},\"653\":{\"h\":\"基本使用\",\"t\":[\"​ 功能接口准备完毕后，就可以写Lambda表达式的语法，表示创建功能接口的子类对象了。当然Lambda表达式是特殊的局部内部类，仍然要写在局部位置。\",\"它的语法是：\",\"(形参列表) -> { // 方法体 } \",\"解释一下：\",\"(形参列表)表示功能接口中，必须要重写的抽象方法的形参列表。\",\"->由一个英文横杠 + 英文大于号字符组成，它是Lambda表达式的运算符，读作goes to。\",\"{ //方法体 }表示功能接口中，必须要重写的抽象方法的，方法体实现。\",\"其实，看完这个Lambda表达式的语法定义，就已经能够解释为什么Lambda表达式，要求接口有且只有一个必须要实现的抽象方法了。因为语法中仅有一套形参列表和方法体，只能重写一个方法。\",\"而且，这个语法写出来，很明显Lambda表达式只能重写父接口中的抽象方法，是不能自己新增成员的！\",\"在方法等局部位置，写上述语法后，肯定会报错。原因在于Java是强类型语言，任何变量都有它的数据类型，而直接写Lambda表达式语言，编译器是无从得知它的数据类型的——这个Lambda表达式创建了接口的子类对象，到底是哪个接口的子类对象呢？\",\"所以我们需要帮助编译器，明确Lambda表达式所表示的对象的类型，这个过程称之为 \\\"Lambda表达式的类型推断\\\"。\",\"怎么推断呢？在这个推断过程中，需要给编译器提供额外的信息，告诉它Lambda表达式是哪个接口的子类对象。总得来说，常见和常用的有以下三种方式：\",\"直接用父接口引用接收。由于Lambda表达式表示的子类对象并没有自己独有的成员，所以直接用父类引用接收完全不会有任何问题。\",\"不用引用接收，但是要直接告诉编译器Lambda表达式是哪个接口的子类对象，语法上有点像强转（但不是）。\",\"语法：\",\"((父接口的名字)Lambda表达式).方法名(实参)\",\"这种方式有点类似于匿名对象，所以必须直接调用方法，不然会编译语法报错。\",\"借助方法完成类型推断。\",\"可以借助方法的返回值数据类型完成类型推断，因为方法的返回值编译器已经知道该返回什么对象。\",\"可以借助方法的形参的数据类型完成类型推断，因为方法的实参编译器已经知道该传入什么对象。\"]},\"654\":{\"h\":\"进阶使用和简化\",\"t\":[\"为了方便语法练习，这里给出六个功能接口：\",\"功能接口案例\",\"//无返回值无参数的功能接口 @FunctionalInterface interface INoReturnNoParam { void test(); } //无返回值有一个参数的功能接口 @FunctionalInterface interface INoReturnOneParam { void test(int a); } //无返回值两个参数的功能接口 @FunctionalInterface interface INoReturnTwoParam { void test(int a, int b); } //有返回值无参数的功能接口 @FunctionalInterface interface IHasReturnNoParam { int test(); } //有返回值一个参数的功能接口 @FunctionalInterface interface IHasReturnOneParam { int method(int a); } //有返回值两个参数的功能接口 @FunctionalInterface interface IHasReturnTwoParam { int test(int a, int b); } \",\"接下来，我们基于上述功能接口，讲解一下Lambda表达式的进阶使用， 主要就是格式的简化\",\"逐个部分简化：\",\"(形参列表)能不能简化呢？是可以的，因为功能接口中有且仅有一个必须要实现的抽象方法，那么：\",\"形参的数据类型是可以省略的，因为方法已经固定死了，形参一定是那些，不需要写出来。但形参的名字是不可省略的（因为要在方法体中使用）\",\"特殊情况下： \",\"如果形参列表中的形参只有一个，那么()小括号，也是可以省略的。\",\"但是如果形参为空，()小括号是不可以省略的。\",\"{ //方法体 }方法体能不能简化呢？当然是可以的：\",\"如果方法重写的方法体只有一条语句的话，那么可以省略大括号。（类似于if/for省略大括号）\",\"特殊的，如果只有一条语句且这条语句是返回值语句，那么大括号和return可以一起省略。\",\"实际上在多数情况下，都不太可能一句话把方法体写完。多数情况下，Lambda表达式的抽象方法实现都会很复杂，那这样Lambda表达式就会写的很复杂，这就很难受了。而Lambda表达式，本质上就是重写了一个抽象方法的子类对象，所以Java允许Lambda表达式的抽象方法的实现可以直接指向一个已经存在的方法，而不是自己书写实现。这种语法在Java中称之为\\\"方法引用\\\"！\"]},\"655\":{\"h\":\"方法引用\",\"t\":[\"Lambda表达式的主体只有1条语句时, 程序不仅可以省略主体的大括号, 还可以通过英文双冒号::的语法来引用方法, 进一步简化Lambda表达式的书写.\",\"什么样的方法，能够作为方法引用指向的功能接口中抽象方法的实现？只看三点：\",\"返回值类型必须一致。\",\"(方法签名method signature一致)形参列表中的数量，类型，位置必须都对应上，形参名字无所谓。\",\"方法的名字无所谓。\",\"Lambda表达式支持的方法引用\",\"种类\",\"Lambda表达式示例\",\"对应的引用示例\",\"解释说明\",\"类名引用静态方法\",\"(x, y, ...) -> 类名.静态方法名(x, y, ...)\",\"类名::静态方法名\",\"功能接口中被实现方法的全部参数传给该类静态方法作为参数\",\"对象名引用成员方法\",\"(x, y, ...) -> 对象名.成员方法名(x, y, ...)\",\"对象名::成员方法名\",\"功能接口中被实现方法的全部参数传给该成员方法作为参数\",\"类名引用成员方法(特殊)\",\"(x, y, ...) -> **对象名x.**成员方法名(y, ...)\",\"类名::成员方法名(不是静态方法)\",\"功能接口中被实现方法的第一个参数作为调用者, 后面的参数传给该成员方法作为参数\",\"构造方法引用\",\"(x, y, ...) -> new 类名(x, y, ...)\",\"类名::new\",\"功能接口中被实现方法的全部参数传给该构造器作为参数\",\"/* Lambda表达式的主体只有1条语句时, 程序不仅可以省略主体的大括号, 还可以通过英文双冒号::的语法来引用方法, 进一步简化Lambda表达式的书写. 什么样的方法，能够作为方法引用指向的功能接口中抽象方法的实现？ 只看三点： 1. 返回值类型必须一致。 2. (方法签名method signature一致)形参列表中的数量，类型，位置必须都对应上， 形参名字无所谓。 3. 方法的名字无所谓。 */ /* 1.静态方法引用 2.对象名引用成员方法 3.类名引用成员方法 4.构造方法引用 */ public class Demo { public static void main(String[] args) { // 静态方法引用 // lambda写法 IA ia2 = () -> System.out.println(111); ia2.testA(); IA ia = () -> A.func1(); ia.testA(); // 方法引用 IA ia1 = A::func1; ia1.testA(); // 对象名引用成员方法 // lambda IC ic2 = (int a) -> { System.out.println(a); }; ic2.testC(1); IC ic = a -> new C().func2(a); ic.testC(100); // 方法引用 IC ic1 = new C()::func2; ic1.testC(200); //IB ib = s -> System.out.println(s); //ib.testB(\\\"aaa\\\"); // 可以指向源码中的方法或者第三方工具的方法 IB ib = System.out::println; ib.testB(\\\"aaa\\\"); // \\\"abcdef\\\", 希望对字符串进行截取\\\"bc\\\" // 主要使用String类中的成员方法 // subString( int start,int end) [start,end) //String s = \\\"abcdef\\\"; //String substring = s.substring(1, 3); //System.out.println(\\\"substring = \\\" + substring); // 类名引用成员方法 // lambda ID id = (s, start, end) -> s.substring(start, end); String str = id.testD(\\\"abcdef\\\", 1, 3); System.out.println(\\\"str = \\\" + str); ID id2 = String::substring; String str2 = id2.testD(\\\"abcdef\\\", 1, 3); System.out.println(\\\"str2 = \\\" + str2); // 4.构造方法引用 // lambda表达式 // 有参构造 IE ie = (String name, int age) -> new Dog(name, age); Dog dog = ie.getDog(\\\"小黑\\\", 3); System.out.println(dog); // 无参构造 IG ig = () -> new Dog(); Dog dog1 = ig.getDog(); System.out.println(dog1); // 方法引用 IE ie2 = Dog::new; Dog dog2 = ie2.getDog(\\\"小花\\\", 4); System.out.println(dog2); IG ig2 = Dog::new; Dog dog3 = ig2.getDog(); System.out.println(dog3); } } @FunctionalInterface interface IA{ void testA(); } class A { // 定义一个静态方法 作为IA接口中的testA方法的实现 static void func1(){ System.out.println(\\\"IA接口中的testA方法的实现\\\"); } } @FunctionalInterface interface IB{ void testB(String s); } @FunctionalInterface interface IC{ void testC(int a); } class C { void func2(int m){ System.out.println(m); } } @FunctionalInterface interface ID{ String testD(String s, int start, int end); } @FunctionalInterface interface IE{ Dog getDog(String a, int b); } @FunctionalInterface interface IG{ Dog getDog(); } class Dog{ String name; int age; public Dog(String name, int age) { this.name = name; this.age = age; } public Dog() { } } \"]},\"656\":{\"h\":\"注意事项\",\"t\":[\"方法引用所指向的实现方法, 只要是已经存在的就可以, 可以自己写, 可以用源码的方法或者第三方工具类的方法\",\"Lambda表达式是特殊的局部内部类，所以它访问方法的局部变量，该变量必须是final的（实际常量）。\",\"除此之外，局部内部类，匿名内部类它们都有自己独立的作用域，能够自定义自己的成员。 但是Lambda表达式没有自身独立的作用域，不能自定义成员，和所在的方法共用同一个作用域。\"]},\"657\":{\"h\":\"优缺点\",\"t\":[\"优点：\",\"极大得简化了代码，使代码变得更加优雅。\",\"函数式编程的代表，可能是未来高端的编程趋势\",\"Lambda表达式在Stream API中，配合集合类去使用，代码非常优雅和简洁，并且高效，实际开发中十分常用。\",\"Stream API代码\",\"list. stream(). filter(stu -> stu.getAge() >= 18). map(Student::getScore). forEach(System.out::println); \",\"注：该Stream API完成，将学生对象集合中的，所有大于等于18岁的学生的成绩输出的工作。\",\"缺点：\",\"过于简单的Lambda表达式，显然可读性很低。\",\"过于简洁也意味着不容易Debug。\",\"语法难度不低，熟练使用需要时间锻炼。\"]},\"658\":{\"h\":\"09. Object\",\"t\":[\"学习目标\",\"掌握使用Object中的如下成员方法\",\"getClass()\",\"toString()\",\"equals()\",\"hashCode()\",\"clone()\",\"API，全称Application Programming Interface，也就是应用程序编程接口。\",\"这里所谓的，在前面的章节中已经说过了：\",\"此接口并不是Java语法中的，而是\",\"API的使用者，可以在不关注具体实现细节的前提下，使用这些已经预先定义好的方法和工具实现自己的需求。\",\"这就是API的意义所在，而实际上，在相当多的开发场景中，程序员只需要充分利用这些API就足以完成开发需求。所以很多中低级程序员，都被戏称为。\",\"学习API，我们应该将学习的重心放在学习**”方法“上，API使用的本质就是方法调用**，从这个角度上来说，API的学习是非常简单的。\",\"但要想理清楚其中的逻辑，正确使用API，还需要多加练习.\",\"在学习官方Java API以及其它流行的三方API时，我们可以参考官方文档去学习，也可以利用搜索引擎去了解其中的细节。而以后到了公司中，程序员之间互相交流API，就需要依赖于特定格式的API文档。\",\"Object类，我们虽然我们没有详细了解，但我们已经：Object类是所有类继承层次的祖先类，Java中所有类（包括数组）都直接或者间接的继承自该类，都实现了该类的方法。\",\"自定义类时，我们并不需要特别的标注，这是一个隐式的继承。\",\"如果一个类没有明确的指出它的父类是谁，那么Object类就默认是这个类的。\",\"Object类是没有成员变量定义的，并且由于子类对象的隐式初始化，Object类有且仅有一个默认提供的无参构造方法。\",\"我们学习Object类，主要关注它的成员方法。\",\"protected Object\",\"clone() 创建并返回此对象的一个副本。\",\"boolean\",\"equals(Object obj) 指示其他某个对象是否与此对象“相等”。\",\"protected void\",\"finalize() 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。\",\"Class<?>\",\"getClass() 返回此 Object 的运行时类。\",\"int\",\"hashCode() 返回该对象的哈希码值。\",\"void\",\"notify() 唤醒在此对象监视器上等待的单个线程。\",\"void\",\"notifyAll() 唤醒在此对象监视器上等待的所有线程。\",\"String\",\"toString() 返回该对象的字符串表示。\",\"void\",\"wait() 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。\",\"说明:\",\"像notify()、wait()等成员方法, 它们都和Java的线程有关系，多线程中再学习。\",\"先来一个大致的、笼统的认识：\",\"，是Java反射的前置知识点，该方法本身作用不大，仅作了解。\",\"，提供了将对象字符串化的方式，很简单但很常用，很重要的一个方法。\",\"equals(Object obj)方法用于判断对象相等，很常用、非常重要。\",\"hashCode()方法用于获取哈希值，在集合的场景下使用，也是一个很重要的方法。\",\"注：equals和hashCode这两个方法，关系紧密，要结合起来学习。\",\"finalize()方法，仅作了解，没有实际意义。\",\"注：该方法在Java9开始，被注解**@Deprecated**标记，表示它是一个被放弃使用的过失方法。\",\"规范的Java开发中，不应该使用过时方法或者类。\",\"clone()方法，克隆，一种创建对象的新方式。该方法并不常用，建议仅作了解。\"]},\"659\":{\"h\":\"getClass方法\"},\"660\":{\"h\":\"方法的声明\",\"t\":[\"public final native Class<?> getClass(); \",\"解释：\",\"首先它的访问权限修饰符是public，可以任意访问，没有访问权限问题。\",\"final修饰它，表示它无法被重写。\",\"native表示该方法是一个本地方法，指的是Java调用其它语言（主要是C/C++）的实现来完成功能的方法。本地方法不需要方法体，我们也不会考虑它的实现细节。（该方法的作用可以通过查阅API文档了解）\",\"Class<?>是返回值类型，表示该方法需要返回一个。\",\"上述表示泛型，关于泛型后面会详细讲。\"]},\"661\":{\"h\":\"作用\",\"t\":[\"通过该方法的方法名，其实不难知道该方法的作用：\",\"接下来的主要问题是：\",\"接下来，我们就主要来研究一下Class类和它的对象。\"]},\"662\":{\"h\":\"Class对象\",\"t\":[\"要想了解什么是Class对象，还需要从类加载的机制开始讲起。\",\"现在我们已经对类加载很熟悉了，在类加载过程中，JVM通过读取某个类的二进制字节码文件，了解该类型。\",\"也就是说，程序运行期间，JVM通过类加载能够了解某个类型的信息。\",\"那么如果程序员也想在程序的运行期间，动态获取某个类的类型信息呢？\",\"为什么程序员需要在程序的运行期间，动态获取类型信息呢？\",\"如果运行期间程序员能动态获取类型信息，那么就意味着程序员：\",\"可以在不事先知道该类内容的前提下，直接在程序运行期间，对该类做一些操作（比如创建对象，调用方法，访问属性等）\",\"这种需求是很常见的，意味着程序具有了动态性，大大提升程序的灵活性。\",\"这其实就是Java的反射技术，我们会在后面学习该知识点。\",\"既然有需求，那Java语法的设计就要满足它，这时仍然需要JVM来做一些特殊操作：\",\"JVM在类加载某个类的同时，会在堆上自动创建一个“封装了该类所有类型信息”的对象，被称之为该类的运行时类对象。\",\"具体来说，某个类的运行时类对象，就是该类的Class对象。\",\"某个类的Class对象当中，包含了该类的所有类型信息**（比如类名是啥，有哪些方法、变量、构造器等）**\",\"于是程序员在程序的运行时期，只需要获取该类的Class对象，就能够获取类型信息了。\"]},\"663\":{\"h\":\"注意事项\",\"t\":[\"getClass()方法只是获取Class对象，该方法不负责创建Class对象。正确来说，某个类的Class对象是JVM在类加载某个类的同时，在堆上创建的，Class对象是JVM创建的。\",\"getClass()方法相当于是返回了堆上这个Class对象的引用。\",\"这种操作实际上Java代码本身是做不到的（没有引用的对象无法直接用Java方法获取）\",\"所以该方法是一个本地方法。\",\"扩展：\",\"更具体来说，Class对象的创建，是在某个类类加载的时期。\",\"某个类的类加载在一次程序运行过程中，仅有一次。所以某个类的运行时类对象（Class对象）也必然是唯一的！！相对应的，不同类型的两个类，它们的Class对象必然是两个不同的独立对象。\",\"以上特点是Class对象最重要的特点，表现在代码上就是：\",\"同类型Class对象唯一\",\"Student s = new Student(); Class stuClazz = s.getClass(); Student s2 = new Student(); Class stuClazz2 = s2.getClass(); System.out.println(stuClazz == stuClazz2); \",\"不同类型Class对象不同\",\"Student s = new Student(); Class stuClazz = s.getClass(); Teacher t = new Teacher(); Class teacherClazz = t.getClass(); System.out.println(teacherClazz == stuClazz); \",\"紧接第二条，在实际开发中，getClass()方法经常用于判断两个引用所指向的对象是否是同一个类型的对象。\",\"参考以下方法：\",\"判断两个对象的类型是否一致\",\"public static boolean judgeObjectType(Object o1, Object o2) { return o1.getClass() == o2.getClass(); } \",\"显然上述方法：\",\"如果返回true，表示o1和o2两个引用指向的对象，是同一种类型的对象。\",\"如果返回false，表示o1和o2两个引用指向的对象，不是同一种类型的对象。\",\"特别强调：而像继承父子关系，都无需考虑。\"]},\"664\":{\"h\":\"toString方法\"},\"665\":{\"h\":\"方法的声明\",\"t\":[\"public String toString() \",\"没有什么特别需要注意的地方，记住它有返回值，并且返回字符串String就可以了\"]},\"666\":{\"h\":\"文档解释\",\"t\":[\"关于toString()方法的作用，在官方JDK文档中，有详细的说明，主要是以下四点：\",\"返回该对象（调用toString方法的对象）的字符串表示。\",\"通常，toString()方法会返回一个此对象的字符串。\",\"结果应是一个简明但易于读懂的信息表达式。\",\"建议所有子类都重写此方法。\",\"所以，toString()方法的作用非常简单，说白了，把对象转换成字符串，就和它的方法名一样。而且这个字符串要简洁明了，能够用来描述这个对象，而且最后一句话，已经表明了：Java设计者自己都觉得Object类当中的，toString()方法的默认实现不是一个最优解，子类可以根据自身情况选择重写它。\",\"现在，我们先来看一看toString()方法在Object类当中的默认实现。\"]},\"667\":{\"h\":\"toString的默认实现\",\"t\":[\"toString()方法在Object类当中的代码实现，非常简单，如下：\",\"public String toString() { return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } \",\"该方法会返回一个字符串，这个字符串的组成是：\",\"用当前对象调用，获取运行时类对象后，直接调用，获取该类型的全限定类名。\",\"hashCode()方法也是Object类当中的成员方法，我们马上就会学习，这里先了解：\",\"Object类当中，该方法的默认实现是通过计算对象的地址，转换成一个十进制的数字来实现的。\",\"所以Object类当中hashCode()方法的默认实现，一般认为它的返回值是该对象的十进制地址值。\",\"Integer.toHexString(int)方法虽然没学过，但很明显从方法名不难知道，该方法是将一个十进制整数转换成十六进制字符串\",\"于是：整体表示的字符串就是：该对象的十六进制地址值。\",\"以上，将内容全部连接起来，该方法的返回值字符串就是：\",\"全限定类名 + @ + 对象的十六进制地址值\",\"这个结果我们再熟悉不过了，所以下面补充一下toString()方法的作用。\"]},\"668\":{\"h\":\"作用\",\"t\":[\"看到这里，你应该已经明白toString()方法的作用了：\",\"在Java代码中，如果存在以下两种情况：\",\"这时就会隐式调用该对象的，打印（或拼接）该toString()方法的返回值。\",\"toString()方法的结果又要分成两种情况：\",\"如果类中没有重写该方法，就会去使用Object类的默认实现。在之前，我们看到，打印对象名会打印地址值，就是这么来的。\",\"而如果本类中重写了该方法，那自然会使用子类中的重写实现。\",\"参考以下代码：\",\"// s是一个引用 System.out.println(s); System.out.println(s + \\\"hello\\\"); \",\"上述作用弄明白了以后，很显然在多数时候，我们并不关心全限定类名和地址值，所以文档说明中推荐子类重写该方法。\",\"重写没有固定的标准格式，一般来说，我们会以作为该方法的重写实现。\",\"参考下列代码：\",\"toString方法的重写\",\"// Student类中 @Override public String toString() { return \\\"Student{\\\" + \\\"s=\\\" + s + \\\", id=\\\" + id + \\\", age=\\\" + age + \\\", score=\\\" + score + '}'; } \",\"这样，我们再去打印对象名，或者用对象名拼接字符串，看到的就不再是地址值了，而是我们重写后的执行结果。\"]},\"669\":{\"h\":\"注意事项\",\"t\":[\"toString方法的使用，总体很简单，但我们还是要注意以下几个细节：\",\"toString()方法可以快速自动生成，仍然使用IDEA快捷键Alt + Insert完成。\",\"比如，业务代码，赋值代码等等。\",\"尤其是，如果你在toString方法中写赋值或者其它语句，就会导致Debug模式运行下，代码运行结果不正确，但正常run模式启动，结果正常的奇怪情况。\",\"比如下列代码：\",\"public class Demo { public static void main(String[] args) { Star s = new Star(\\\"李四\\\"); System.out.println(s.name); } } class Star { String name; public Star(String name) { this.name = name; } @Override public String toString() { name = \\\"张三\\\"; return \\\"Star{\\\" + \\\"name='\\\" + name + '\\\\'' + '}'; } } \",\"run模式启动程序：控制台打印李四\",\"Debug模式启动程序：控制台打印张三\",\"这是因为IDEA的Debug模式下，当代码执行完阴影行，会自动调用该类的toString()方法，在图形界面上展示该对象信息。\",\"参考下图：\",\"为了避免空指针异常，的隐含调用的toString方法能不写出来就不要写出来，不要画蛇添足。\",\"因为隐式调用不会空指针异常，但直接调用方法完全可能出现空指针异常。\",\"如果类中有（自定义）引用数据类型成员变量，也需要重写它的toString方法，不然就会打印地址值了。\"]},\"670\":{\"h\":\"equals方法\"},\"671\":{\"h\":\"方法的声明\",\"t\":[\"public boolean equals(Object obj) \",\"仅需要注意两点：\",\"该方法是有参数的，需要传入一个对象（任意一个对象就行）\",\"方法是有返回值的，返回一个布尔类型的值，真或假。\"]},\"672\":{\"h\":\"作用\",\"t\":[\"equals有相同，相等的意思。**所以该方法的作用是，用于指示其他某个对象是否与此对象\\\"相等\\\"。**此对象即调用该equals方法的对象，其它对象即方法实参传入的对象。\",\"既然是比较对象相等，那自然就需要比较的规则才有意义，比较的规则其实就是方法体中的代码，我们先来看一下Object类当中，默认的比较规则，即equals方法的默认实现。\"]},\"673\":{\"h\":\"equals默认实现\",\"t\":[\"Object类当中的equals方法默认实现，认为的对象相等的比较规则：\",\"public boolean equals(Object obj) { return (this == obj); } \",\"很显然，这个比较规则非常简单。双等号直接连接引用，比较对象的地址，换句话说是比较两个引用是否指向同一个对象。这个相等的规则就非常苛刻了：\",\"只有当两个引用完全指向同一个对象时，方法才会返回true，否则都会返回false。\",\"换句话说，Object类当中的equals方法默认实现，仅自己和自己比较时，才会返回true。在多数情况下，我们不需要这样一个苛刻的规则，所以需要自己重写equals方法的实现。\"]},\"674\":{\"h\":\"重写equals方法的注意事项\",\"t\":[\"既然需要重写equals方法，就需要一个重写的规则，我们认为的对象相等的规则：\",\"如果不是相同类型的对象，没有可比性，直接认定为不相等。getClass()方法获取其类型\",\"如果是相同类型的对象，行为是一致的，只有成员变量的取值有差异。所以只要，这两个对象的成员变量的取值（对象的状态）是一致时，就认定这两个对象相等。\",\"对于以上比较规则的equals方法的重写，Java官方为我们提供了官方的要求，称之为equals方法重写的常规协定：\",\"自反性：对于任何非空引用值 x，x.equals(x)都应返回 true\",\"对称性：对于任何非空引用值 x 和 y，当且仅当y.equals(x) 返回 true 时，x.equals(y) 才应返回true\",\"传递性：对于任何非空引用值 x、y 和 z，如果x.equals(y)返回 true，并且 y.equals(z) 返回 true，那么x.equals(z) 应返回 true。\",\"一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y)始终返回 true 或始终返回 false。\",\"排他性：当比对的不是同种类型的对象或者是一个null时，默认返回false\",\"以上5点常规协定， 其中自反性和排它性需要写代码做判断，而对称性，一致性，传递性，只需要用成员变量的取值来判断对象相等，就自动满足它们。\",\"按照以上规则重写equals方法，就完成了我们的比较规则，两个相同类型的对象成员变量取值完全一致时，它们就是相等的。\"]},\"675\":{\"h\":\"重写equals方法的注意事项\",\"t\":[\"在实现排他性时，实际上有两种选择：\",\"使用getClass方法比较。 这个比较是比较苛刻的，只有在完全是同一个类型时才会返回true\",\"使用instanceof比较。\",\"引用 instanceof 类名 \",\"表示判断引用所指向的对象的具体类型，是否是后面类名的对象或者子类对象，如果是就返回true，如果不是就返回false。\",\"这个比较的条件就比较宽松了，可以允许传入子类对象。（当子类对象的父类成员和父类对象相同时,equals方法仍然返回true）\",\"equals方法也是可以用快捷键自动生成的，使用快捷键alt + insert。而且可以选择在实现排它性时的方式。\",\"浮点数比较特殊，它具有规格化和非规格化的区别，还有非数(NaN)，无穷大，无穷小很多特殊的概念，正常情况下，如果仅仅比较数值，用==比较相等是够用的。但为了避免因浮点数特殊值，而出现的错误。实际开发中，从严谨角度出发，浮点数的比较仍然建议使用，对应包装类型的compare方法去比较浮点数的大小：\",\"Float.compare(float a,float b)\",\"Double.compare(double a,doublet b)\",\"这两个方法在,a < b时返回-1(负数)，在a>b时，返回1(正数)，只有在两个浮点数相等时，才会返回0\",\"如果类中有引用数据类型成员变量，需要去调用它们的equals方法完成比较。这就意味着还需要重写这个类的equals方法。\",\"财务金额上的运算是不推荐使用浮点数的，会出现精度问题。推荐使用BigDecimal这个类完成运算。\",\"构造方法: BigDecimal(String val) 将 BigDecimal 的字符串表示形式转换为 BigDecimal。 成员方法: 减法 BigDecimal subtract(BigDecimal subtrahend) 加法: BigDecimal add(BigDecimal augend) \"]},\"676\":{\"h\":\"hashCode方法\"},\"677\":{\"h\":\"方法的声明\",\"t\":[\"public native int hashCode(); \",\"很显然，它是一个本地方法，这个方法也没有任何参数，返回值是一个int类型整数。\"]},\"678\":{\"h\":\"方法的作用\",\"t\":[\"返回该对象的哈希码值。\",\"支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。\",\"关于哈希表、哈希码值等相关的概念，如果你对数据结构这门课程有些了解，那么这些概念就是非常容易的。当然如果你还不太明白，就看一下下面的说明。\"]},\"679\":{\"h\":\"哈希的概念\",\"t\":[\"映射的概念：\",\"设A和B是两个非空集合，并存在某种对应关系f\",\"按照这种对应关系f，对于集合A中的任何一个元素a，在集合B中都存在唯一的一个元素素b与之对应\",\"那么，这样的对应（包括集合A，B，以及集合A到集合B的对应关系f）叫做集合A到集合B的映射\",\"如果用图描述的话，就是下图：\",\"注意：\",\"我们数学中学习的函数，其实是一种特殊的映射。（函数只不过是集合A、B是数集的映射罢了）\",\"映射不要求元素一一对应，允许出现多对一，但绝不允许一对多。\",\"明白映射的概念后，哈希映射就不难理解了。哈希映射也是一种特殊的映射，要求：\",\"集合A必须是一个无限大小，具有无穷多元素的集合。\",\"集合B必须是一个元素有限的集合。\",\"化无限为有限，这就是哈希映射。\",\"在哈希映射当中，集合A和B之间的对应关系f，就是一种映射的规则，称之为哈希函数、哈希方法或者哈希算法等。\",\"而通过哈希算法，求得的集合B中的元素，称之为哈希值。\",\"化无限为有限，这本身就是不现实的，更不可能强求映射是完全一一对应的。所以在哈希映射中，出现多对一是相当正常的，称之为\\\"哈希冲突\\\"。\",\"在Java当中，hashCode方法可以看成是哈希映射的一个算法，也就是映射中的对应关系f，该方法的作用是：\",\"将一个无限大小的集合（某个类的对象的集合）映射到一个有限大小的集合（int整数）上。\",\"方法返回的一个int整数，这个整数就是该对象的哈希值。\",\"现在你已经大概知道，什么是哈希映射，什么是哈希值了。那么再回到JDK当中的方法说明上：\",\"返回该对象的哈希码值。\",\"支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。\"]},\"680\":{\"h\":\"哈希表\",\"t\":[\"哈希表的详细概念，后面在数据结构章节中，老师会详细讲解，这里我们可以先简单了解一下。\",\"什么是哈希表？ - 知乎 (zhihu.com)\",\"图文并茂详解数据结构之哈希表 - 知乎 (zhihu.com)\",\"哈希表（也叫散列表）可以简单看成是一种存储键值对Key-Value的数据结构，在实际开发中非常常见。比如用户登陆的\\\"用户名——密码\\\"就是典型的键值对。哈希表的实现，本质还是一个数组，哈希表具有数组访问快的特点，还能存储键值对数据。\",\"Java当中的哈希表实现，Key和Value都必须是一个对象，通过调用类中的hashCode方法计算Key（哈希表中Key是唯一的）对象的哈希值，决定这个键值对在数组中的存储位置（也就是存储元素的数组下标）。而如果出现哈希冲突：表示它们在数组中的存储位置一样，这时总不可能让数组一个位置存两个元素。常见的做法就是采用链表将它们挂在数组下面，然后每个节点都存储下一个节点的地址（引用）。Java中的哈希表的实现，大致就如下图所示：\",\"将Key-Value数据按照上述结构存储后，我们就可以通过Key获取哈希值，首先找到数组的下标，然后如果存在哈希冲突，数据被\\\"挂\\\"在链表中了，就还需要遍历链表，逐一比对Key，找到我想要访问的键值对数据。所以Java当中hashCode方法（哈希算法）的实现，是很重要的。接下来，我们来首先看一下Object类当中，它的默认实现。\"]},\"681\":{\"h\":\"默认实现\",\"t\":[\"Object默认的hashCode方法，是一个本地方法，我们没办法直接看代码分析方法的实现。在JDK文档中，是这么描述的（原话）：\",\"实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个int整数来实现的，但是 Java 编程语言不需要这种实现技巧。）\",\"这说明什么呢？默认情况下，哈希值是通过计算对象的地址值来获取的。这样的话，一般两个独立的对象的哈希值是不同的，而同一个对象（用两个引用调用方法）它们的哈希值必然是相同的。\"]},\"682\":{\"h\":\"方法的重写\",\"t\":[\"在很多时候，我们都需要重写hashCode方法，JDK文档中给我们标注了重写的规则和什么时候进行重写，如下：\",\"在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals比较时所用的信息没有被修改。\",\"如果根据 equals(Object)方法，两个对象是相等的，那么对这两个对象中的每个对象调用hashCode方法都必须生成相同的整数结果。\",\"如果根据 equals(java.lang.Object)方法，两个对象不相等，那么对这两个对象中的任一对象上调用hashCode方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。\",\"上述三条，告诉了我们：\",\"hashCode方法和equals方法是息息相关的，要重写必须一起重写。 \",\"一起重写后，必须符合equals方法返回true，那么这两个对象的哈希值必须相同的规则。\",\"这是因为equals是判断对象相等的，对象相等后，就相当于是上述映射定义中，集合A中的同一个元素，那么它们哈希映射的结果必然相同。这是映射定义强制要求的。\",\"哈希冲突是允许存在（不允许也不可能）的，但是我们要清楚，设计出更好的哈希算法，尽量避免哈希冲突，可以提升哈希表性能。\",\"最后，还是要强调一下，hashCode方法和equals方法要重写必须一起重写，而且重写的依据必须是一样的，这样才能保证两个方法的结果具有一致性。比如一个Student类，如果equals方法依据其中的成员变量age和name重写的，那么hashCode方法也必须要依赖于这两个成员变量重写！！\"]},\"683\":{\"h\":\"如何重写\",\"t\":[\"知道重写的原则后，就是具体算法的设计了，这个就主要靠自己开动脑筋了。好在IDEA知道程序员们都不愿动脑筋，IDEA也给hashCode方法的重写提供快速生成，即使用快捷键Alt + Insert。\",\"按下快捷键选择重写hashCode方法后，会要求你选择重写依据的成员变量，这时要注意，一定要保持和equals方法一致的重写依据。\",\"具体代码这里不再贴出，实际开发中，如无特殊需求，使用IDEA自动生成的哈希算法，足够了。有特殊需求，再说。\"]},\"684\":{\"h\":\"为什么要同时重写hashCode和equals方法\",\"t\":[\"首先hashCode方法中规定：\",\"两个对象相等，哈希值一定相等。\",\"两个对象不相等，哈希值不要求完全不相等。\",\"那么这里就很明显存在一个问题：\",\"如何判断对象相等？答：依赖类中的equals方法！\",\"对于下列代码：\",\"举例\",\"// Studnet类存在String name和int age的双参构造器 Student s1 = new Student(\\\"小明\\\",18); Student s2 = new Student(\\\"小明\\\",18); \",\"假如只重写了Student类的equals方法，没有重写hashCode方法，那么：\",\"s1对象明明和s2对象相等，但哈希值却不相等。（因为默认的hashCode方法按照对象地址计算）\",\"这严重违背原则！\",\"假如只重写了Student类的hashCode方法，没有重写equals方法，那么：\",\"s1对象明明和s2对象不相等，但哈希值却一定相等。\",\"这也不符合原则！\"]},\"685\":{\"h\":\"注意事项\",\"t\":[\"一旦重写hashCode方法后，默认的toString方法就不会再打印地址值了。这是因为toString方法，默认调用的是本地方法的hashCode方法获取地址值，重写后不再是地址值了。\",\"如果类中有引用数据类型成员变量，那么就继续调用它的hashCode方法，也就需要重写它的hashCode方法。\"]},\"686\":{\"h\":\"finalize方法(了解)\"},\"687\":{\"h\":\"方法的声明\",\"t\":[\"protected void finalize() throws Throwable { } \",\"首先注意访问权限是protected，这说明在不重写访问权限的情况下，仅能够在自身类中创建自身对象，才能调用这个方法。\",\"其次它的方法体是空的，功能没有实现，这种设计的目的是为了让子类自己去重写该方法的实现。这种做法比起抽象方法的强制子类实现，要更加灵活，而且可以用在普通类中。\",\"最后，它的方法声明中有一个throws Throwable， 这是方法抛出异常列表的声明，现在不用管它，后面会讲。\"]},\"688\":{\"h\":\"方法的作用\",\"t\":[\"finalize方法是Java沿用的C++中的析构函数的设计。\",\"在C++当中，负责对象的生命周期的，有两个函数：\",\"构造函数，用来在对象**\\\"出生\\\"**时，给成员变量赋值，在Java当中对应构造器。\",\"析构函数，用来在对象销毁时，给对象的死亡做\\\"善后\\\"工作，在Java中就对应 finalize方法。\",\"所以要搞明白finalize方法的作用，就要搞清楚析构函数的作用，理解何为对象死亡的\\\"善后\\\"工作。\"]},\"689\":{\"h\":\"对象资源占用的情况\",\"t\":[\"无论是Java还是C++中，一个对象在内存中都普遍占用两种资源：\",\"对象在内存中存在，本身就是要占用内存的，这个内存在对象销毁时就会随之释放。这个释放的过程在不同的语言当中，形式是不同的，比如C++是程序员手动释放的，Java依赖是GC自动完成释放。但不管是什么形式，这些对象所占用的内存都是可以准确释放的。\",\"对象在存在时，很多时候不仅自身要占用内存，还可以需要去使用一些系统资源，占用一些系统资源，比如：\",\"做I/O操作时，需要占用系统的I/O资源。\",\"做网络操作，要占用网络资源。\",\"...\",\"那么这些系统资源，在对象使用后，也要被释放掉，不然就会一直被占用，可能就会产生问题。\",\"C++当中的析构函数就是完成这个功能的。程序员将释放资源的语句写进析构函数中，在对象销毁时，该函数自动被调用，自动去释放对象占用的系统资源。\",\"Java当中的finalize方法就是\\\"模仿\\\"析构函数设计的，finalize方法也会在对象销毁时自动被调用，我们Java程序员只需要把释放资源的代码放在finalize方法中，就可以完成对象销毁的\\\"善后\\\"工作。\",\"理想是很美好的，因为有这个finalize方法后，Java的资源释放代码，就可以统一地写进一个方法中，还会自动调用，多么方便的一种设计啊。\",\"可惜现实是很骨感的，实际上根本达不成这种目的。\",\"这里就体现了Java GC自动垃圾回收的缺点：程序员缺乏对对象销毁的控制，对象的垃圾回收具有不确定性，没有时效性。**那么连带着finalize方法的执行也是不确定的。**在这段不确定长度的时间里，对象其实早就已经没用了，但系统资源还是一直被占用着，造成资源的浪费。 显然释放系统资源这么一件重要的事情，不能依赖于一个不稳定的机制。\",\"从Java9开始，Java官方正式将该方法标记为@Deprecated，表示这个方法已经被放弃使用了。\"]},\"690\":{\"h\":\"测试finalize方法\",\"t\":[\"如果你仍然感兴趣finalize方法，为什么不靠谱。这里给出一个测试代码，感兴趣自己玩一下：\",\"public class Demo { public static void main(String[] args) { // 匿名对象,理论上很快成为垃圾对象 new Student(); // 通知GC进行垃圾回收 System.gc(); } } class Student{ @Override protected void finalize() throws Throwable { System.out.println(\\\"模拟释放资源\\\"); } } \",\"上述代码执行，你就会发现模拟释放资源一会打印了，说明方法执行了；一会又不打印，说明方法没有调用。这种不靠谱的机制，是不可能真的用来做资源释放的。\",\"在Java中，所有的资源释放，都必须依赖程序员手动完成，所以以后大家做I/O操作，网络操作，数据库操作等需要占用系统资源的操作时，一定不要忘记在用完后，释放系统资源！\"]},\"691\":{\"h\":\"clone方法\"},\"692\":{\"h\":\"方法的声明\",\"t\":[\"clone方法的方法声明为：\",\"protected native Object clone() throws CloneNotSupportedException; \",\"这里需要注意的地方有：\",\"首先注意访问权限，它的访问权限是protected。这意味着：\",\"一般来说，只能在子类当中，创建子类自身对象才能够调用该方法（方法调用位置，肯定不是同包）。\",\"它是一个本地native方法，没有方法体。（依赖本地方法实现创建对象，不同于new对象）\",\"返回值类型是Object。\",\"throws CloneNotSupportedException是方法抛出异常的声明，这里我们先不管，后面异常的章节会讲解。\"]},\"693\":{\"h\":\"方法的作用\",\"t\":[\"这个方法的名字，其实已经很明显的告诉了你它的作用：\",\"克隆，生物学意义上的克隆，是用生物的体细胞，经过无性繁殖，得到相同基因型后代的过程。\",\"Java当中的**克隆方法clone()**有类似的作用，当你在程序中有这种需求，即希望：\",\"得到一个和原先对象，完全独立的新对象。\",\"成员仍和原先对象一致。\",\"有这种做法时，普通的做法就是再new一个一模一样的，但学习clone方法后，你就可以用该方法来做这个事情了。\",\"所以Object类当中的clone方法默认实现，就是得到一个独立的，和原先对象成员一致的新对象。\"]},\"694\":{\"h\":\"方法使用步骤\",\"t\":[\"现在，我们已经知道clone方法的作用了，那么怎么使用这个方法呢？\",\"直接调用的话，肯定是有些问题的，这里我们就来研究一下clone方法的使用步骤：\",\"第一步，首先就要解决的就是访问权限的问题。\",\"在默认的情况下，只能在子类中自己\\\"克隆\\\"自己，这种需求还是很少见的。\",\"所以为了能够在类的外部调用该类的clone方法，\",\"第二步，可以选择重写方法的返回值类型，从Object改为自身类型。\",\"很显然Object当中的克隆方法的默认实现，只会得到一个一模一样且独立的对象，肯定不可能改变对象的类型。\",\"这一步不是必须的，但推荐做一下。\",\"注：方法体在多数情况下，我们使用Object默认实现就够了，不要重写它。\",\"第三步，一个类想要做克隆操作，必须要先实现一个接口，表示该类允许进行克隆。\",\"如果一个类没有实现接口，又要强行进行克隆操作，就会抛出异常CloneNotSupportedException。\",\"一个类实现了接口java.lang.Cloneable，是一个类能够调用clone方法的标志。\",\"完成以上三步，就可以在需要的地方去完成一个对象的克隆了。\"]},\"695\":{\"h\":\"克隆使用中的细节问题\"},\"696\":{\"h\":\"Cloneable接口\",\"t\":[\"​ 一般情况下，因为接口中往往有抽象方法，某个普通类实现一个接口往往会报错，会要求该类必须实现抽象方法。\",\"但是某个类实现接口java.lang.Cloneable却不会报错，这是因为这个接口并没有抽象方法。实际上当你查看源码时就会发现：\",\"Cloneable接口是一个空接口，里面没有任何内容。\",\"那么让类去实现一个空接口，有什么意义呢？\",\"实现空接口虽然没有得到任何成员，但这个类的数据类型就发生了一些变化。\",\"让这个类从原先不是这个接口的子类，变成了接口的子类。一旦成为接口的子类，就可以使用instanceof关键字进行类型的判断，判断到底是否该接口。\",\"从而就可以根据不同的情况，做出不同的处理。比如下列代码，Cloneable接口的底层也是这么判断的：\",\"空接口的作用\",\"public class Demo { public static void main(String[] args) { judgeInstanceImplEmptyInter(new A()); } //用于判断传入的对象是否是接口的子类对象 public static void judgeInstanceImplEmptyInter(Object o) { if (o instanceof EmptyInterface) { System.out.println(\\\"实现了空接口,可以做一些操作\\\"); return; } System.out.println(\\\"没有实现空接口,抛出异常\\\"); } } interface EmptyInterface { } class A implements EmptyInterface { } \",\"上述代码中，由于A已经实现了接口，所以instanceof的结果就是true。程序会输出：\",\"实现了空接口,可以做一些操作\",\"像Cloneable这种没有声明定义任何成员的，一个空接口，它其实就起到一个标记的作用，称之为\\\"标记接口\\\"。\",\"被Cloneable标记的类是允许做克隆操作的，反之不允许。JDK中的标记接口，我们在后面还会见到。\"]},\"697\":{\"h\":\"创建对象的方式\",\"t\":[\"clone方法是一种新的创建对象的方式，和new对象的方式是平行的关系，是独立的关系。\",\"调用clone方法得到对象的过程，是依赖于本地方法实现的，不会去调用构造器。\"]},\"698\":{\"h\":\"方法体的重写\",\"t\":[\"上面我们已经说过了，在进行克隆操作时，正常情况下，我们使用Object类当中的默实现就足够了，不需要重写实现。但假如你真的有需求，对于某个对象的引用x，JDK文档中也规定了一些重写的原则：\",\"x.clone() != x 为 true\",\"x.clone().getClass() == x.getClass() 一般也为true\",\"x.clone().equals(x) 一般情况下也为true\",\"上述规定告诉我们：\",\"克隆必须是一个新的独立的对象\",\"克隆最好不要改变数据类型，除非你真的有需要。\",\"克隆后的两个对象调用equals方法，应该返回true。前提是，必须按照成员变量的取值重写equals方法。\"]},\"699\":{\"h\":\"深度克隆\",\"t\":[\"如果类中有引用数据类型的成员变量，那么clone方法的使用就要格外注意了：\",\"Java当中，Object类的clone方法的默认实现是完全直接拷贝一份成员变量。 \",\"对于基本数据类型的成员变量来说，没有任何问题，直接拷贝值。\",\"但对于引用数据类型而言，拷贝的是引用。这意味着克隆后的引用和原先的引用指向同一个对象。\",\"这样的话，使用任何一个引用去修改对象的状态，都会互相影响，这样的两个对象就不是完全独立的了。\",\"像以上Object类当中的clone方法的实现，直接拷贝一份成员变量，不管引用数据类型成员变量引用，所指向的对象。\",\"我们称之为\\\"浅克隆\\\"。\",\"对应的，如果能够让引用数据类型成员变量之间也能相互独立，克隆后获取真正独立的两个对象。我们称之为\\\"深度克隆\\\"。\",\"深度克隆怎么做呢？\",\"其实非常简单，浅克隆之所以两个对象没有真正独立，是因为拷贝引用和原先的引用指向了同一个对象，现在只需要：\",\"将引用指向的对象，也克隆一份。\",\"然后让克隆后的引用指向它。\",\"参考下图：\",\"当然，这个过程中，需要在类中重写clone方法，参考代码如下：\",\" //重写clone方法的访问权限 @Override public Student clone() throws CloneNotSupportedException { //仍然选择调用父类默认实现 //深度克隆的步骤 //1.深度克隆是在浅克隆基础上玩的 Student cloneStu = (Student) super.clone(); //2.需要把Dog对象克隆一份 Dog cloneDog = cloneStu.d.clone(); //3.将拷贝引用指向拷贝对象 cloneStu.d = cloneDog; return cloneStu; //return ((Student) super.clone()); } \"]},\"700\":{\"h\":\"10. 补充其他常用类型\",\"t\":[\"查看下列代码，请回答下列代码的执行结果是什么？\",\"包装类相关引例\",\"int end = Integer.MAX_VALUE; int start = end - 5; public static void main(String[] args) { int count = 0; for (int i = start; i <= end; i++){ count++; } System.out.println(count); } \",\"首先查看一个经典报错：\",\"Non-static field 'start' cannot be referenced from a static context\",\"意译过来，就是在一个静态（static）的方法中无法访问一个非静态的成员变量。\",\"我们早就学习过static关键字了，在static修饰的静态成员方法中，是不能直接访问类的成员变量的。\",\"上述代码，可以在end和start两个变量的声明前,加上static就不会再报错了。\",\"当然，这个题目更重要的一点在于：\",\"有符号数的最大值：\",\"Integer.MAX_VALUE的二进制是0111 1111 1111 1111 1111 1111 1111 1111\",\"Integer.MIN_VALUE的二进制是 1000 0000 0000 0000 0000 0000 0000 0000\",\"Integer.MAX_VALUE + 1 = Integer.MIN_VALUE\",\"所以很明显，上述代码，循环会从int类型最大值循环到int类型最小值，再循环到int类型最大值....这是一个死循环！\",\"当然，让这个代码不死循环也很简单，只需要修改循环条件即可。\",\"像上述代码中的类Integer其实就是包装类，下面具体讲解一下包装类型。\"]},\"701\":{\"h\":\"定义\",\"t\":[\"什么是包装类？\",\"大家都知道：Java是面向对象的语言，Java当中万物皆对象。\",\"但这句话并不严谨，因为Java不是完全面向对象的编程语言。\",\"因为Java还有基本数据类型变量，它们不是对象。\",\"所以为了弥补基本数据类型变量非对象的尴尬境地，并且我们确有需求把基本数据类型变量也当成一个对象使用。\",\"Java引入的技术。\",\"所谓包装类，就是把基本数据类型包装成引用数据类型，变成一个个对象, 就可以调用类中的方法\",\"以下包装类和八种基本数据类型对应关系：\",\"包装类型对照表\",\"基本数据类型\",\"对应包装类\",\"包装类的直接父类\",\"byte\",\"java.lang.Byte\",\"Number\",\"short\",\"java.lang.Short\",\"Number\",\"int\",\"java.lang.Integer\",\"Number\",\"long\",\"java.lang.Long\",\"Number\",\"float\",\"java.lang.Float\",\"Number\",\"double\",\"java.lang.Double\",\"Number\",\"boolean\",\"java.lang.Boolean\",\"Object\",\"char\",\"java.lang.Character\",\"Object\",\"继承关系\",\"image-20230108210909312\"]},\"702\":{\"h\":\"包装类型特点\",\"t\":[\"包装类型对象不可变\",\"所有数值包装类型和Boolean类，都是使用一个对应类型的value成员来存储它的基本数据类型变量的取值的。\",\"比如Integer之于int类型，源码如下：\",\"/** * The value of the {@code Integer}. * * @serial */ private final int value; \",\"这个value都是final修饰的，这就意味着是修改不了的。\",\"所有包装类型都是final修饰的，不能通过继承破坏value的设计体系。\",\"总之，包装类型中有value成员变量的对象，都是不可变的。\"]},\"703\":{\"h\":\"基本数据类型与包装类型的相互转换\",\"t\":[\"​ 包装类型对象在使用上，在绝大多数情况下，是和它对应的基本数据类型是没有区别的。这依赖于Java\\\"自动拆装箱\\\"机制。\",\"拆箱和装箱的概念：\",\"在Java当中，把基本数据类型变量，转换为其对应包装类的引用数据类型变量，称之为\\\"装箱\\\"。\",\"在Java当中，把包装类的引用数据类型类型变量，转换为其对应基本数据类型变量，称之为\\\"拆箱\\\"。\",\"手动装修/拆箱与自动装箱/拆箱\",\"// 手动装箱 int a =1; Integer integer = new Integer(a); Integer integer1 = Integer.valueOf(2); // 手动拆箱 int i = integer.intValue(); // 自动装箱 Integer integer2 = 20; // 自动拆箱 int n = integer2; \",\"自动装箱与拆箱\",\"自动装箱和拆箱其实是一种语法糖，在底层自动调用了方法而已：\",\"自动装箱依赖于，包装类型类名.valueOf(对应基本数据类型值)\",\"比如：\",\"Integer i = Integer.valueOf(123); \",\"在代码中出现上述写法，就会警告：\",\"Unnecessary boxing 'Integer.valueOf(123)'\",\"即装箱是自动，无需再手动调用方法。\",\"自动拆箱依赖于，包装类型对象名.基本数据类型名Value()\",\"比如：\",\"int num = i.intValue(); \",\"在代码中出现上述写法，也一样会警告：\",\"// Unnecessary unboxing 'i.intValue()'\",\"即拆箱是自动，无需再手动调用方法。\"]},\"704\":{\"h\":\"包装类型和String类型的相互转换\",\"t\":[\"包装类--->String\",\"// wrapper----> String Integer integer = 2; // 自动装箱 // 方式一: 使用toString方法 String s1 = integer.toString(); System.out.println(\\\"s1 = \\\" + s1); // 方式二: 字符串拼接 String s2 = \\\"\\\" + integer; System.out.println(\\\"s2 = \\\" + s2); // 方式三: 使用String里的api: valueOf(int i) String s3 = String.valueOf(integer); System.out.println(\\\"s3 = \\\" + s3); \",\"String--->包装类\",\"// String ---> wrapper String s = \\\"1\\\"; // 方式一: parseInt(int i) Integer integer1 = Integer.parseInt(s); // 自动装箱 System.out.println(\\\"integer = \\\" + integer1); // 方式二: valueOf(String s) Integer integer2 = Integer.valueOf(s); System.out.println(\\\"i1 = \\\" + integer2); // 方式三: 使用Integer的构造方法 Integer integer3 = new Integer(s); System.out.println(\\\"integer2 = \\\" + integer3); \"]},\"705\":{\"h\":\"包装类的常用方法\",\"t\":[\"把String字符串转换成各种基本数据类型，普遍使用包装类型类名.parseXxx(\\\"字符串数值\\\")\",\"其中Xxx是对应基本数据类型\",\"比如： String --> int，使用Integer.parseInt(\\\"123\\\") String --> double，使用Double.parseDouble(\\\"0.1\\\"); ...... \",\"字符(Character)相关的\",\"// 转换为小写 static char toLowerCase(char ch) // 转换为大写 static char toUpperCase(char ch) // 确定指定字符是否为大写字母 static boolean isUpperCase(char ch) // 确定指定字符是否为小写字母 static boolean isLowerCase(char ch) // 否为空格 static boolean isWhitespace(char ch) // 确定指定字符是否为字母或数字 static boolean isLetterOrDigit(char ch) // 确定指定字符是否为字母 static boolean isLetter(char ch) // 确定指定字符是否为数字。 static boolean isDigit(char ch) \"]},\"706\":{\"h\":\"Integer的缓存机制\",\"t\":[\"经典问题, 回答输出结果, 为什么?\",\"public static void main(String[] args) { Integer i1 = new Integer(1); Integer i2 = new Integer(1); System.out.println(i1 == i2);// false 对象地址不一样 Integer i3 = 1; // 底层使用valueOf(int i)方法 Integer i4 =1; // 底层使用valueOf(int i)方法 System.out.println(i3 == i4);// true Integer i5 = 1; // 底层使用valueOf(int i)方法 Integer i6 =1;//底层使用valueOf(int i)方法 System.out.println(i5 == i6);// true } \",\"原因:\",\"Integer源代码\",\"Integer中有缓存, low=-128 high=127\",\"范围-128-127 , 在这个范围内, 返回同一个\",\"不在范围内, new一个新的对象返回\",\"public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } \"]},\"707\":{\"h\":\"Integer的一些面试问题\",\"t\":[\"回答输出结果, true 还是false ? 为什么?\",\"Q1\",\"Object obj = true ? new Integer(1):new Double(2.0); System.out.println(obj); // 1.0 三目运算符取决于最大范围的double \",\"Q2\",\"Object obj; if(true) obj = new Integer(1); else obj = new Double(2.0); System.out.println(obj); // 1 跟上面那个不一样,这是if语句 \",\"Q3\",\"Integer i1 = new Integer(127); Integer i2 = new Integer(127); System.out.println(i1 == i2); // false Integer i3 = new Integer(128); Integer i4 = new Integer(128); System.out.println(i3 == i4); // false 对象地址不一样 \"]},\"708\":{\"h\":\"注意事项\",\"t\":[\"包装类始终是一个类，它是一个引用数据类型，始终是不同于基本数据类型的，所以要注意以下：\",\"使用包装类要注意空指针异常，而基本数据类型没有这个烦恼。\",\"包装类对象在比较对象相等时，不能再像基本数据类型一样用\\\"==\\\"比较了！而是要使用\\\"equals\\\"方法。\",\"在以上注意事项中，尤其注意不能使用\\\"==\\\"比较大小，这里我们做一下原理的讲解。\",\"包装类型在比较对象相等时，要分三种情况：\",\"整型包装类型对象之间的比较\",\"浮点型包装类型对象之间的比较\",\"Boolean对象之间的比较\"]},\"709\":{\"h\":\"整型包装类型对象相等的比较\",\"t\":[\"简单来说，整型的包装类型对象：\",\"当它的取值在一个byte即[-128,127]的取值范围内时，会从缓存（cache）中共享同一个对象。\",\"这样的话，这个范围的整型包装类型对象，用\\\"==\\\"判断就是true。\",\"但是一旦它的取值超出了一个byte的取值范围，那么就会重新创建一个对象。\",\"这样的话，用\\\"==\\\"判断就是false。\",\"不同的整型包装类型对象，一个byte的取值范围的对象缓存生成时机是不同的：\",\"Integer对象是在JVM启动时就把对象放入缓存。\",\"其余整型对象是在具体使用时把对象放入缓存。\"]},\"710\":{\"h\":\"浮点型包装类型对象相等的比较\",\"t\":[\"浮点型包装类型对象是没有缓存存在的，查看浮点型包装类的valueOf方法可以发现：\",\"Double的valueOf方法\",\"public static Double valueOf(double d) { return new Double(d); } \",\"所以浮点型包装类型如果直接用字面值赋值，一定会创建新对象，不能用\\\"==\\\"比较大小\",\"Double d3 = 2.0; Double d4 = 2.0; System.out.println(d3 == d4);// false \"]},\"711\":{\"h\":\"布尔型对象相等的比较\",\"t\":[\"查看Boolean包装类的valueOf方法可以发现：\",\"Boolean的valueOf方法\",\"public static Boolean valueOf(boolean b) { return (b ? TRUE : FALSE); } \",\"那么TRUE和FALSE又是什么呢？\",\"Boolean的全局常量\",\"/** * The {@code Boolean} object corresponding to the primitive * value {@code true}. */ public static final Boolean TRUE = new Boolean(true); /** * The {@code Boolean} object corresponding to the primitive * value {@code false}. */ public static final Boolean FALSE = new Boolean(false); \",\"注:\",\"建议包装类型对象比较内容还是使用equals方法, 不要使用==\"]},\"712\":{\"h\":\"使用场景\",\"t\":[\"包装类的使用场景还是比较多的，最常见的：\",\"包装类把基本数据类型变为一个对象，并且存在自动拆装箱，有些时候这本身就是一个用途\",\"集合当中使用，集合只能存储对象，所以集合中就要用包装类型替代基本数据类型\",\"获取一些最值之类的常量\",\"做进制转换，类型转换等操作\",\"后续做项目, 写接口的时候也建议使用包装类型(需要判断null)\"]},\"713\":{\"h\":\"引入\",\"t\":[\"需求:\",\"定义一个表示星期的类WeekDay, 定义2个属性\",\"String name: 表示是周几\",\"int id: 表示编号(1-7)\",\"创建并打印相应的对象\",\"class WeekDay{ String name; int id; public WeekDay(String name, int id) { this.name = name; this.id = id; } } \",\"​ 经过测试, 我们发现不仅能够创建周一到周日的对象, 还能够创建其他的对象, 但是实际上我们的需求只需要7个固定的对象, 其余的不需要, 不满足我们的需求\",\"这种情况下,我们需要枚举类型(enumeration)(一个个的列举) , 一个特殊的类用来存放固定的几个常量对象(周一到周日)\"]},\"714\":{\"h\":\"枚举的两种实现方式\",\"t\":[\"自定义类实现枚举\",\"使用Enum关键字实现枚举\"]},\"715\":{\"h\":\"自定义类实现枚举\",\"t\":[\"构造方法私有, 不允许外部创建对象, 类内部可以创建, 保证数量是固定的\",\"枚举对象名通常使用大写\",\"对枚举对象(属性)使用static final修饰, 保证是常量, 能够通过类名去访问(暴露给外部访问的一个入口)\",\"不需要提供setXXX()方法, 枚举对象通常为只读\",\"class WeekDay2{ public static final WeekDay2 MONDAY = new WeekDay2(\\\"周一\\\", 1); public static final WeekDay2 TUESDAY = new WeekDay2(\\\"周二\\\", 2); public static final WeekDay2 WEDNESDAY = new WeekDay2(\\\"周三\\\", 3); public static final WeekDay2 THURSDAY = new WeekDay2(\\\"周四\\\", 4); public static final WeekDay2 FRIDAY = new WeekDay2(\\\"周五\\\", 5); public static final WeekDay2 SATRUDAY = new WeekDay2(\\\"周六\\\", 6); public static final WeekDay2 SUNDAY = new WeekDay2(\\\"周日\\\", 7); private String name; private int id; // 构造方法私有 private WeekDay2(String name, int id) { this.name = name; this.id = id; } public String getName() { return name; } public int getId() { return id; } @Override public String toString() { return \\\"WeekDay2{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", id=\\\" + id + '}'; } } \"]},\"716\":{\"h\":\"使用enum关键字实现枚举\"},\"717\":{\"h\":\"语法\",\"t\":[\"枚举类型的定义使用关键字enum，语法如下：\",\"枚举的定义语法\",\"[访问权限修饰符] enum 枚举类型名字{ // 枚举体 } \",\"解释：\",\"枚举类型的访问权限修饰符和class类是一致的。\",\"enum是枚举定义关键字，等同于关键字class。\",\"枚举类型的名字可以看成类名，同样需要大驼峰书写，同样“见名知意”。\",\"枚举体的定义，实际上就是定义一个一个的常量，用\\\"逗号,\\\"隔开。枚举体中的单个常量的名字应该全部大写。并且放在枚举体的最上面\",\"按照上述的规则，我们定义一个包含周一到周日的常量的一个枚举类型：\",\"枚举的定义举例\",\"// 枚举类型，使用关键字enum enum WeekDay { // 常量对象 MONDAY(\\\"周一\\\", 1), TUESDAY(\\\"周二\\\", 2), WEDNESDAY(\\\"周三\\\", 3), THURSDAY(\\\"周四\\\", 4), FRIDAY(\\\"周五\\\", 5), SATRUDAY(\\\"周六\\\", 6), SUNDAY(\\\"周日\\\", 7); private String name; private int id; // 构造方法私有 private WeekDay(String name, int id) { this.name = name; this.id = id; } public String getName() { return name; } public int getId() { return id; } @Override public String toString() { return \\\"WeekDay{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", id=\\\" + id + '}'; } } \",\"注意:\",\"常量对象需要写在枚举体的首位\"]},\"718\":{\"h\":\"基本使用\",\"t\":[\"我们仍然以上述的星期常量为案例，使用枚举类型来改写一下这个方法：\",\"注：switch当中是可以使用枚举类型的。\",\"使用枚举类型来替代常量\",\"// main方法 public static void main(String[] args){ test(WeekDay.TUESDAY); test(WeekDay.FRIDAY); test(WeekDay.SUNDAY); // ... } // 测试方法 public static void test(WeekDay day){ switch (day){ case MONDAY: System.out.println(day); break; case TUESDAY: break; // ... case SUNDAY: break; } } \"]},\"719\":{\"h\":\"原理(了解)\",\"t\":[\"枚举类型是一种引用数据类型，那么它和class类有什么关系呢？所谓枚举类型是一个什么类型呢？\",\"这个问题的答案很简单，枚举类型就是一个class类，只不过它比较特殊，编译器在。为了还原编译器对枚举类型做的“特殊操作”，我们需要来协助我们。\",\"关于反编译工具CFR的使用，比较简单，请参考文档：使用CFR进行反编译_Ramsey16k的博客-CSDN博客_cfr反编译\",\"注意：在进行反编译的时候需要加参数\",\"--sugarenums false\",\"比如对WeekDayNum.class这个枚举类型编译后的class文件进行反编译的指令是：\",\"java -jar cfr-0.152.jar WeekDayNum.class --sugarenums false\",\"其中\\\"cfr-0.152.jar\\\"是CFR工具的版本号。\",\"请按照以下步骤进行操作：\",\"定义一个枚举类型，比如：\",\"枚举类型\",\"enum WeekDayNum { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY } \",\"编译以上代码，得到WeekDayNum.class文件，并通过CFR反编译工具就可以得到编译器特殊处理后的代码：\",\"编译器特殊处理后的枚举类型\",\"package com.cskaoyan.javase.test; final class WeekDayNum extends Enum<WeekDayNum> { public static final /* enum */ WeekDayNum MONDAY = new WeekDayNum(\\\"MONDAY\\\", 0); public static final /* enum */ WeekDayNum TUESDAY = new WeekDayNum(\\\"TUESDAY\\\", 1); public static final /* enum */ WeekDayNum WEDNESDAY = new WeekDayNum(\\\"WEDNESDAY\\\", 2); public static final /* enum */ WeekDayNum THURSDAY = new WeekDayNum(\\\"THURSDAY\\\", 3); public static final /* enum */ WeekDayNum FRIDAY = new WeekDayNum(\\\"FRIDAY\\\", 4); public static final /* enum */ WeekDayNum SATURDAY = new WeekDayNum(\\\"SATURDAY\\\", 5); public static final /* enum */ WeekDayNum SUNDAY = new WeekDayNum(\\\"SUNDAY\\\", 6); private static final /* synthetic */ WeekDayNum[] $VALUES; public static WeekDayNum[] values() { return (WeekDayNum[])$VALUES.clone(); } public static WeekDayNum valueOf(String name) { return Enum.valueOf(WeekDayNum.class, name); } private WeekDayNum(String string, int n) { super(string, n); } static { $VALUES = new WeekDayNum[]{MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY}; } } \",\"根据以上反编译代码，我们可以得出以下结论（枚举类型的原理）：\",\"使用enum关键字定义枚举类型并编译后，编译器会为我们生成一个相关的final类，这个类继承了, 所以枚举类型就不能再继承其他类了, 实现接口可以.\",\"枚举类型当中定义的常量，实际上都是这个枚举类型的“public static final”修饰的全局常量对象。\",\"所以，下列代码就可以写出来了：\",\"枚举类型使用代码\",\"WeekDayNum monday = WeekDayNum.MONDAY; // test方法需要一个枚举类型作为参数，实际上是需要传入该枚举类型的对象。而枚举类型当中定义的常量都是该类型的全局常量对象。 test(WeekDayNum.TUESDAY); \",\"构造方法是private的\",\"实际上编译器还自己创建了一个values[]对象数组来存放所有的常量对象，一个values( )方法，一个valueOf(String name )方法, 返回该字符串对应的常量对象\",\"所以枚举类型就是一个普通类，只不过编译器对使用enum关键字定义的类有特殊处理。\"]},\"720\":{\"h\":\"练习\",\"t\":[\"需求:\",\"一个支付场景, 假设某个APP只支持支付宝, 微信, 银联, ApplePay 这四种固定支付方式, 需要记录用户使用的支付方式, 以便于统计用户支付习惯进行数据分析(用户画像)\",\"我们可以使用枚举类型来描述这几种固定支付方式\",\"image-20230106164304853\",\"定义枚举类型enum PayType来进行描述, 根据用户选择的支付方式进行记录\",\"定义4个支付常量\",\"ALIPAY, 支付宝支付\",\"WECHATPAY, 微信支付\",\"BANKPAY, 银联支付\",\"APPLEPAY , 苹果支付\",\"Code\",\"public enum PaymentTypeEnum { ZFB(1,\\\"zfb\\\",\\\"支付宝支付\\\"), WECHAT(2,\\\"wechat\\\",\\\"微信支付\\\"), BANK(3, \\\"bank\\\", \\\"银联支付\\\"); private int id; private String code; private String label; PaymentTypeEnum(int id, String code, String label) { this.id = id; this.code = code; this.label = label; } public int getId() { return id; } public String getCode() { return code; } public String getLabel() { return label; } // 根据id查找支付类型 public static PaymentTypeEnum findById(int id) { for (PaymentTypeEnum type : PaymentTypeEnum.values()) { if (type.getId() == id) { return type; } } return null; } } public class Demo { public static void main(String[] args) { // 支付类型测试 // 假设前端给我传过来一个支付类型id为2 int id = 2; // 需要查找类型id为2的支付方式 PaymentTypeEnum type = PaymentTypeEnum.findById(id); if (type != null) { testPayment(type); } } public static void testPayment(PaymentTypeEnum type) { switch (type) { case ZFB: System.out.println(\\\"采用支付宝支付,支付id=\\\" + type.getId()); break; case WECHAT: System.out.println(\\\"采用采用微信支付,支付id=\\\" + type.getId()); break; case BANK: System.out.println(\\\"采用采用银联信支付,支付id=\\\" + type.getId()); break; } } } \"]},\"721\":{\"h\":\"使用枚举的场景\",\"t\":[\"表示订单状态(已完成, 已支付, 未支付, 进行中, 已取消......)\",\"表示支付方式(微信, 支付宝, 银行卡, 信用卡, ApplyPay , GooglePay, Paypal.....)\",\"表示物流状态(已揽收, 运送中, 派件, 已签收......)\",\"表示用户等级(普通用户, VIP, SVIP.......)\",\"......\",\"在JDK版本的迭代中，Java对的设计，可谓是改了又改，提供了很多个类来表示日期：\",\"在JDK1.0版本时，就在java.util包下提供了 Date 类来表示日期，随着JDK版本迭代，这个类当中的方法大多已过时。但作为Java中基础的表示时间和日期的类，它仍然是常用类之一，非常有学习的必要。\",\"而到了Java 8以后，Java中又提供了新的日期表示，提供了诸如：LocalDate、Calendar等新的日期类。\",\"在绝大多数普通开发场景当中，表示时间，使用基础的Date类足够了，这里我们就来学习一下这个Date类，至于Java8之后提供的新日期类，大家可以根据实际情况，再去选择学习一下。\",\"首先，提出一个问题，作为引子：Date类作为一个表示时间和日期的类，是如何表示时间和日期的呢？\",\"Date类的对象表示一个特定的时刻瞬间，精确到毫秒，更具体一点来说，Date类的对象中是通过存储一个long类型的时间戳进而来存储时间的。\"]},\"722\":{\"h\":\"时间戳\",\"t\":[\"时间戳本身是一个比较复杂的概念，而Java语言当中所使用的时间戳主要是指Unix时间戳，它的涵义是：\",\"从格林威治时间（GMT时间，世界时的起点）1970年01月01日00时00分00秒（北京时间是1970年01月01日08时00分00秒）到现在的秒数（毫秒数）。\",\"在Java中存储的时间戳是一个long类型的毫秒数，即Date类当中的成员变量：\",\"private transient long fastTime; \"]},\"723\":{\"h\":\"构造方法\",\"t\":[\"我们来看一下Date类目前还能够使用的，没有过时的两个构造方法：\",\"// 该构造函数使用当前日期和时间来创建对象 Date() // 使用一个时间戳来创建对应时间的日期对象 Date(long date) \",\"该类的构造器源码如下：\",\"public Date() { this(System.currentTimeMillis()); } public Date(long date) { fastTime = date; } \",\"所以实际上，Date类只有一个构造器，那就是给成员变量赋值的构造器。\",\"无参构造器当中使用了以下代码来获取一个毫秒值：\",\"System.currentTimeMillis()\",\"这个方法是一个本地方法，该方法会根据操作系统时间来获取当前的时间戳。该方法还是挺有用的，大家可以记一下。\"]},\"724\":{\"h\":\"成员方法\",\"t\":[\"首先，我们先介绍一下Date类的toString方法，该方法的作用是输出该Date对象所表示的时间，格式是：\",\"星期 月份 天数 hh：mm：ss 时区缩写 年份\",\"中国的时区缩写是CST（China Standard Time）\",\"Date类的成员方法也大多过时了，需要大家了解的只有两个：\",\"用一个时间戳来设置Date对象：\",\"void setTime(long time) \",\"获取当前Date对象的时间戳的毫秒值：\",\"long getTime( ) \",\"以上方法大家在使用时，必然会觉得时间戳和现实的时间格式差距比较大，难以转换。这里提供一个时间戳的转换网站：\",\"时间戳(Unix timestamp)转换工具 - 在线工具 (tool.lu)\",\"最后，再啰嗦一点就是：中国处在东八区，格林威治时间1970 年 1 月 1 日 00:00:00是中国的1970 年 1 月 1 日 08:00:00\",\"比如我们使用以下方式设置一个Date对象：\",\"date.setTime(0); \",\"打印这个对象，会得到以下输出结果：\",\"Thu Jan 01 08:00:00 CST 1970\"]},\"725\":{\"h\":\"构造方法\",\"t\":[\"SimpleDateFormat构造器\",\"// 以传入的字符串格式进行解析或者格式化日期 public SimpleDateFormat(String pattern) \",\"该构造器的参数pattern用来表示日期字符串的格式，但这个格式不是乱写的，请参考以下格式：\",\"y：表示年，例如yyyy，表示千年年份\",\"M：表示月份，例如MM，表示月份（最多12，两位数）\",\"d：表示月份中的天数，例如dd，表示天数（最多31，两位数）\",\"H：表示一天中的小时数，例如HH，表示小时数（最多24，两位数）\",\"m：表示小时中的分钟数，例如mm，表示分钟数（最大59，两位数）\",\"s：表示分钟里的秒数，例如ss，表示秒数（最大59，两位数）\",\"举一个例子来说，假如你希望按照下列格式表示时间：\",\"2022/10/10 10:10:10（2022年10月10日 十时十分十秒）\",\"这个pattern参数就应该写作：\",\"yyyy/MM/dd HH:mm:ss\"]},\"726\":{\"h\":\"成员方法\",\"t\":[\"这里特别要强调的一点是：SimpleDateFormat对象是日期格式对象，它仅仅只是描述时间和日期的格式，并不能代表时间和日期。表示时间和日期我们仍然需要Date类来协助！\",\"在使用日期格式类时，我们仅需要关注下面两个成员方法就足够了：\",\"将Date对象转换成对应日期字符串表示，该方法需要传入一个Date对象，然后返回一个日期字符串String对象。(Date ----> String)\",\"这个过程，一般称呼为“格式化”，使用以下方法：\",\"public final String format(Date date) \",\"将日期表示的字符串转换成对应的Date对象，该方法需要传入一个“按照pattern格式编写的日期字符串”，然后返回一个Date对象。(String ----> Date)\",\"这个过程，一般称呼为“解析”，使用以下方法：\",\"public Date parse(String source) \",\"上述两个方法在使用时都可能抛出异常，使用时按照规范使用即可。\"]},\"727\":{\"h\":\"11. String\"},\"728\":{\"h\":\"基本介绍\",\"t\":[\"基本介绍\",\"一个字符串是由多个字符组成的一串数据(字符序列,字符数组)\",\"String类代表字符串,Java 程序中的所有字符串字面值（如 \\\"abc\\\" ,\\\"你好\\\",\\\"の\\\"）都作为此类的实例实现\",\"在java.lang包下,是java核心类,最常用类,但是不属于基本数据类型,引用类型\",\"String类提供了字符串表示、比较、查找、截取、大小写转换等各种针对字符串的操作\"]},\"729\":{\"h\":\"构造方法\",\"t\":[\"空字符串\\\"\\\"\",\"byte[] -----> String\",\"char[] -----> String\",\" //空字符串 \\\"\\\" public String() //利用字节数组，创建字节数组所表示的字符串 // 1. 字符 -> 数值形式 'a' -> 97 // 2. 所以可以用多个字节值，表示多个字符——>即字符序列 public String(byte[] bytes) //利用字节数数组的一部分，创建字符序列, 从byte数组的offset开始的length个字节值 public String(byte[] bytes,int offset,int length) //利用一个字符数组创建字符数组，代表的字符序列 public String(char[] value) // 创建value字符数组中，从第offset位置开始的count个字符，所代表的字符串对象 public String(char[] value,int offset,int count) //知道即可 public String(String original) \",\"Demo\",\"package _14string.com.cskaoyan._01introduction; /** * @description: * @author: 景天 * @date: 2022/10/11 10:25 **/ /* String 构造方法 */ public class Demo { public static void main(String[] args) { // //空字符串 \\\"\\\" // public String() String s = new String(); System.out.println(\\\"s = \\\" + s); // //利用字节数组，创建字节数组所表示的字符串 // // 1. 字符 -> 数值形式 'a' -> 97 // // 2. 所以可以用多个字节值，表示多个字符——>即字符序列 public // String(byte[] bytes) byte[] bytes = {97, 98, 99, 100}; String s1 = new String(bytes); System.out.println(\\\"s1 = \\\" + s1); // //利用字节数数组的一部分，创建字符序列, 从byte数组的offset开始的length个字节值 // public String(byte[] bytes,int offset,int length) String s2 = new String(bytes,0,2); System.out.println(\\\"s2 = \\\" + s2); // //利用一个字符数组创建字符数组，代表的字符序列 // public String(char[] value) char[] chars = {'h', 'e', 'l', 'l', 'o'}; String s3 = new String(chars); System.out.println(\\\"s3 = \\\" + s3); // // 创建value字符数组中，从第offset位置开始的count个字符，所代表的字符串对象 // public String(char[] value,int offset,int count) // // //知道即可 // public String(String original) String zs = new String(\\\"zs\\\"); System.out.println(\\\"zs = \\\" + zs); } } \"]},\"730\":{\"h\":\"String对象不可变\",\"t\":[\"对象一旦被创建后，对象所有的状态及属性在其生命周期内不会发生任何变化。\",\"1.请键盘录入一个任意字符串s，并用一个temp字符串引用也指向它 这个时候修改temp字符串的内容，请问s字符串的内容会随之改变吗？\",\"package _14string.com.cskaoyan._02feature; import java.util.Scanner; /** * @description: * @author: 景天 * @date: 2022/10/13 11:50 **/ /* 请键盘录入一个任意字符串s，并用一个temp字符串引用也指向它 这个时候修改temp字符串的内容，请问s字符串的内容会随之改变吗？ */ public class Demo { public static void main(String[] args) { // 创建Scanner对象 Scanner scanner = new Scanner(System.in); // 键盘接收nextLine -- > s String s = scanner.nextLine(); // temp 指向 String temp = s; // 更改s内容 s = \\\"aaa\\\"; // 打印 System.out.println(\\\"temp = \\\" + temp); System.out.println(\\\"s = \\\" + s); } } \",\"image-20221013142443901\",\"2\",\"String s = \\\"张三\\\"; System.out.println(\\\"s = \\\" + s); s = \\\"hello 张三\\\"; System.out.println(\\\"s = \\\" + s); \",\"输出结果是多少?原因是什么?\",\"image-20221013142833360\",\"原因与本质\",\"String是一个final类,不能被继承, 代表不可变的字符序列\",\"字符串是常量,用双引号引起来,他们的值在创建之后不可更改\",\"String对象的内容是存储在字符数组value[ ]中的\",\"image-20221013143119029\",\"image-20221013143304118\",\"image-20221013143557858\"]},\"731\":{\"h\":\"字符串常量池\",\"t\":[\"字符串的分配和其他对象分配一样，是需要消耗高昂的时间和空间的，而且字符串使用的非常多\",\"JVM为了提高性能和减少内存的开销，在实例化字符串对象的时候进行了一些优化：\",\"使用字符串常量池。\",\"首先要明确，Java的双引号引起来的字面值常量字符串，它们都是对象。这些对象比较特殊，程序在编译时期就能确定它们的值\",\"每当创建字符串常量对象时，JVM会首先检查字符串常量池，如果该字符串对象引用已经存在常量池中，那么就直接返回常量池中的实例引用。如果字符串对象引用不存在于常量池中，就会实例化该字符串并且将其引用放到常量池中。\",\"// 当常量池中已有字符串对象的引用时,不会在堆上再创建, 而使用同一引用 String s1 = \\\"abc\\\"; String s2 = \\\"abc\\\"; \",\"image-20230407081651412\"]},\"732\":{\"h\":\"String两种实例化方式\",\"t\":[\"两种方式\",\"直接赋值 String s = \\\"abc\\\"\",\"构造方法 String s = new String(\\\"abc\\\")\",\"第一种 先直接赋值 再构造\",\"String s = \\\"abc\\\"; String s1 = new String(\\\"abc\\\") \",\"image-20221013145230940\",\"第二种 先构造 再直接赋值\",\"String s1 = new String(\\\"abc\\\") String s = \\\"abc\\\"; \",\"image-20230407081513361\",\"总结:\",\"先String s = new String(\\\"abc\\\"), 再String s1 = \\\"abc\\\". new String 的时候会创建2个对象, 直接赋值的时候, 直接用的是常量池的引用, 不再创建新的字符串对象了\",\"String s1 = \\\"abc\\\", 再String s = new String(\\\"abc\\\"), 直接赋值的方式会创建一个对象, new String的时候会创建1个对象\"]},\"733\":{\"h\":\"字符串常见问题与练习\"},\"734\":{\"h\":\"字符串比较\",\"t\":[\"String s1 = new String(\\\"hello\\\"); String s2 = new String(\\\"hello\\\"); System.out.println(s1 == s2); System.out.println(s1.equals(s2)); String s3 = new String(\\\"hello\\\"); String s4 = \\\"hello\\\"; System.out.println(s3 == s4); System.out.println(s3.equals(s4)); String s5 = \\\"hello\\\"; String s6 = \\\"hello\\\"; System.out.println(s5 == s6); System.out.println(s5.equals(s6)) \",\"==与equals方法有什么区别?\",\"== ,对于基本数据类型而言,比较的是内容,对于引用数据类型而言,比较的是引用变量,即所指向的地址\",\"equals方法是Object的方法,默认是比较2个对象的地址,若要比较内容,应当重写父类方法\",\"String中重写的equals方法\",\"image-20221013151301923\"]},\"735\":{\"h\":\"字符串拼接\",\"t\":[\"String s1 = \\\"Hello\\\"; String s2 = \\\"Hello\\\"; String s3 = \\\"Hel\\\" + \\\"lo\\\"; String s4 = \\\"Hel\\\" + new String(\\\"lo\\\"); String s5 = new String(\\\"Hello\\\"); String s7 = \\\"H\\\"; String s8 = \\\"ello\\\"; String s9 = s7 + s8; System.out.println(s1 == s2);// true System.out.println(s1 == s3);// ? System.out.println(s1 == s4);// false System.out.println(s1 == s9);// false System.out.println(s4 == s5);// false \",\"image-20221013152427336\",\"进行字符串拼接的时候有2种情况\",\"当参与字符串拼接对的2个字符串,只要有1个引用变量的形式出现时,则会在堆上创建新的字符串对象. \",\"原因是因为参与了运算,无法在编译期确定其值,就不能在编译时期加入常量池\",\"只有参与字符串拼接的2个字符串都是字面值常量的时候 \",\"如果常量池中已有该字符串对象的引用,则返回常量池中的引用\",\"如果常量池中没有,则在堆上创建,并把引用放入常量池\"]},\"736\":{\"h\":\"判断功能\",\"t\":[\"用来比较字符串的内容，注意区分大小写 boolean equals(Object obj) 忽略字符串大小写比较字符串内容，常见用于比较网址URL boolean equalsIgnoreCase(String str) 判断当前字符串对象是否包含，目标字符串的字符序列 boolean contains(String str) 判断当前字符串对象，是否已目标字符串的字符序列开头 boolean startsWith(String str) 判断当前字符串，是否以目标字符串对象的字符序列结尾，常用于确定文件后缀名格式 boolean endsWith(String str) 判断一个字符串，是不是空字符串 boolean isEmpty() \"]},\"737\":{\"h\":\"获取功能\",\"t\":[\"获取当前字符串对象中，包含的字符个数 \\\"abcd\\\" int length() 获取字符串对象代表字符序列中，指定位置的字符 从0开始\\\"abcd\\\" char charAt(int index) 在当前字符串对象中查找指定的字符，如果找到就返回字符，首次出现的位置，如果没找到返回-1 也可以填字符 \\\"abcdb\\\" int indexOf(int ch) 指定从当前字符串对象的指定位置开始，查找首次出现的指定字符的位置，(如果没找到返回-1) 可以填入字符 int indexOf(int ch,int fromIndex) 查找当前字符串中，目标字符串首次出现的位置(如果包含)，找不到，返回-1 这里的位置是指目标字符串的第一个字符,在当前字符串对象中的位置 \\\"abcdefg\\\" int indexOf(String str) 指定，从当前字符串对象的指定位置开始,查找首次出现的指定字符串的位置(如果没找到返回-1) 这里的位置是指目标字符串的第一个字符,在当前字符串对象中的位置 int indexOf(String str,int fromIndex) ， 返回字符串，该字符串只包含当前字符串中，从指定位置开始(包含指定位置字符)到结束的那部分字符串 \\\"abcdef\\\" String substring(int start) 返回字符串，只包含当前字符串中，从start位置开始(包含)，到end(不包含)指定的位置的字符串 [ , ) String substring(int start,int end) \",\"Demo\",\"package _14string.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/13 15:58 **/ /* 获取功能 */ public class Demo2 { public static void main(String[] args) { String s = \\\"abcdef\\\"; // 获取当前字符串对象中，包含的字符个数 \\\"abcd\\\" //int length() // //获取字符串对象代表字符序列中，指定位置的字符\\\"abcd\\\" 从0开始 //char charAt(int index) System.out.println(\\\"s.charAt(0) = \\\" + s.charAt(0)); //在当前字符串对象中查找指定的字符，如果找到就返回字符，首次出现的位置，如果没找到返回-1 //也可以填字符 \\\"abcd\\\" //int indexOf(int ch) // //指定从当前字符串对象的指定位置开始，查找首次出现的指定字符的位置，(如果没找到返回-1) //可以填入字符 //int indexOf(int ch,int fromIndex) // //查找当前字符串中，目标字符串首次出现的位置(如果包含)，找不到，返回-1 //这里的位置是指目标字符串的第一个字符,在当前字符串对象中的位置 \\\"abcd\\\" //int indexOf(String str) System.out.println(\\\"s.indexOf(\\\\\\\"ef\\\\\\\") = \\\" + s.indexOf(\\\"ef\\\")); //指定，从当前字符串对象的指定位置开始,查找首次出现的指定字符串的位置(如果没找到返回-1) //这里的位置是指目标字符串的第一个字符,在当前字符串对象中的位置 //int indexOf(String str,int fromIndex) ， // //返回字符串，该字符串只包含当前字符串中，从指定位置开始(包含指定位置字符)到结束的那部分字符串 \\\"abcdef\\\" //String substring(int start) System.out.println(\\\"s.substring(1) = \\\" + s.substring(1)); //返回字符串，只包含当前字符串中，从start位置开始(包含)，到end(不包含)指定的位置的字符串 [ , ) //String substring(int start,int end) System.out.println(\\\"s.substring(1, 3) = \\\" + s.substring(1, 3)); } } \",\"课堂练习：\",\"1. 统计”abc”在字符中”abcdabcfgh”出现的次数 2. 借助于int indexOf(String str,int fromIndex) \",\"package _14string.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/13 16:02 **/ /* 课堂练习： 1. 统计”abc”在字符中”abcdabcfgh”出现的次数 2. 借助于int indexOf(String str,int fromIndex) */ public class Ex1 { public static void main(String[] args) { // 定义字符串 String s = \\\"abcdabcfgh\\\"; // 定义计数器 int count = 0; // 定义索引值 int fromIndex = 0; // 循环 while ((fromIndex = s.indexOf(\\\"abc\\\", fromIndex)) != -1) { // 计数器 索引值+1 count++; fromIndex++; } // 循环结束 统计结束 打印 System.out.println(\\\"出现了\\\" + count + \\\"次\\\"); } } \",\"课堂练习： 1：遍历获取字符串中的每一个字符 \\\"abc001DEF\\\" 2：统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数。(不考虑其他字符)\",\"package _14string.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/13 16:10 **/ /* 课堂练习： 1：遍历获取字符串中的每一个字符 \\\"abc001DEF\\\" 2：统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数。(不考虑其他字符) */ public class Ex2 { public static void main(String[] args) { // 定义字符串 String s = \\\"abc001DEF\\\"; // 定义3个计数器 // digitalCount int digitalCount = 0; // upperCount int upperCount = 0; // lowerCount int lowerCount = 0; // 循环 for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); // a-z 小写 A-Z 大写 0-9数字 // 计数器+1 if (c >= 'a' && c <= 'z') { lowerCount++; } else if (c >= 'A' && c <= 'Z') { upperCount++; }else { digitalCount++; } } // 循环结束 // 输出结果 System.out.println(\\\"数字:\\\"+digitalCount); System.out.println(\\\"大写:\\\"+upperCount); System.out.println(\\\"小写:\\\"+lowerCount); } } \"]},\"738\":{\"h\":\"转换功能\",\"t\":[\"获取一个用来表示字符串对象字符序列的，字节数组 byte[] getBytes() 获取的是用来表示字符串对象字符序列的，字符数组 char[] toCharArray() 把字符数组转换成字符串 static String valueOf(char[] chs) 把各种基本数据类型和对象转换成字符串 100---> \\\"100\\\" static String valueOf(int i/double...) 把字符串全部转化为小写 String toLowerCase() 把字符串全部转换为大写 String toUpperCase() 字符串拼接，作用等价于 + 实现的字符串拼接 String concat(String str) \",\"package _14string.com.cskaoyan._03api; import java.util.Arrays; /** * @description: 转换功能 * @author: 景天 * @date: 2022/10/13 16:18 **/ /* 转换功能 */ public class Demo3 { public static void main(String[] args) { String s = \\\"abcd\\\"; // 获取一个用来表示字符串对象字符序列的，字节数组 //byte[] getBytes() byte[] bytes = s.getBytes(); System.out.println(Arrays.toString(bytes)); //获取的是用来表示字符串对象字符序列的，字符数组 //char[] toCharArray() char[] chars = s.toCharArray(); System.out.println(Arrays.toString(chars)); //把字符数组转换成字符串 //static String valueOf(char[] chs) // //把各种基本数据类型和对象转换成字符串 100---> \\\"100\\\" //static String valueOf(int i/double...) String s1 = String.valueOf(100); System.out.println(\\\"s1 = \\\" + s1); String s2 = String.valueOf(true); System.out.println(\\\"s2 = \\\" + s2); //把字符串全部转化为小写 //String toLowerCase() // //把字符串全部转换为大写 //String toUpperCase() String s3 = s.toUpperCase(); System.out.println(\\\"s3 = \\\" + s3); //字符串拼接，作用等价于 + 实现的字符串拼接 //String concat(String str) String s4 = s.concat(\\\"ef\\\"); System.out.println(\\\"s4 = \\\" + s4); } } \",\"课堂练习： 1:字符串helloWORLD 2:第一个字符转为大写,其余字符转为小写 → Helloworld\",\"package _14string.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/13 16:25 **/ /* 课堂练习： 1:字符串helloWORLD 2:第一个字符转为大写,其余字符转为小写 → Helloworld */ public class Ex3 { public static void main(String[] args) { // 定义字符串 String s = \\\"helloWORLD\\\"; //func(s); String str = s.substring(0, 1).toUpperCase(). concat(s.substring(1).toLowerCase()); System.out.println(str); } private static void func(String s) { // 第一个字符取出来 转换大写 String head = s.substring(0, 1); String headStr = head.toUpperCase(); // 把剩余的字符串取出来 转为小写的 String remind = s.substring(1); String remindStr = remind.toLowerCase(); // 把转换后的2部分进行拼接 String newStr = headStr + remindStr; System.out.println(newStr); } } \",\"课堂练习： 1:字符串反转 2:举例: 键盘输入abc,反转后结果为cba\",\"package _14string.com.cskaoyan._03api; import java.util.Scanner; /** * @description: * @author: 景天 * @date: 2022/10/13 16:32 **/ /* 课堂练习： 1:字符串反转 2:举例: 键盘输入abc,反转后结果为cba */ public class Ex4 { public static void main(String[] args) { // 键盘接收数据abc Scanner scanner = new Scanner(System.in); String s = scanner.nextLine(); // 字符串--->char[] 转为字符数组 char[] chars = s.toCharArray(); // 定义空字符串 String str = \\\"\\\"; // 倒着遍历字符数组 for (int i = chars.length -1 ; i >= 0 ; i--) { // 重写拼接 str += chars[i]; } // 输出结果 System.out.println(str); } } \"]},\"739\":{\"h\":\"其他功能\",\"t\":[\"String类的替换功能 在新的字符串中，用新(new)字符，替换旧(old)字符 \\\"abcd\\\" String replace(char old,char new) 在新的字符串中，用新的字符串(new), 替换旧(old)字符串 String replace(String old, String new) 在新的字符串中，去掉开头和结尾的空格字符 \\\"abc\\\" \\\"abc \\\" String trim() 分隔功能 将字符串按照符号分隔成字符串数组 \\\"a,b,c,d\\\" String[] split(String re) String类的比较功能 int compareTo(String str) int compareToIgnoreCase(String str) \",\"课堂练习： 1:给出一句英文句子： \\\"i want a bing dun dun\\\" 2:每个单词的首字母都转换为大写并输出 3.使用split方法\",\"package _14string.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/13 17:21 **/ /* 课堂练习： 1:给出一句英文句子： \\\"i want a bing dun dun\\\" 2:每个单词的首字母都转换为大写并输出 3.使用split方法 */ public class Ex5 { public static void main(String[] args) { // 定义字符串 String s = \\\"i want a bing dun dun\\\"; // 按照空格进行分割 ---> String[] String[] strings = s.split(\\\" \\\"); // 定义空字符串用于拼接 String newStr = \\\"\\\"; // 遍历字符串数组 for (String str : strings) { // 首字母大写准换 String s1 = str.substring(0, 1).toUpperCase().concat(str.substring(1)); // 重写拼接 newStr += s1 + \\\" \\\"; } // 输出结果 System.out.println(\\\"result:\\\"+newStr.trim()); } } \",\"字符串的大小如何比较？ 按照字典序，比较字符串的大小。字典序原本的含义实质，英文单词在字典中出现的先后顺序 (在字典中，先出现的字符串小，后出现的字符串大).compareTo方法就是按照字典序进行比较的.\",\"关于compareTo方法\",\"字符串长度一样,逐一比较返回第一个不一样字符的编码值的差值(调用者-参数)\",\"字符串长度不一样,并且前面的字符都相同,返回数组长度的差值(调用者-参数)\",\"长度一样,逐位字符也一样,返回0,表示相等\",\"image-20221013172005780\",\"课堂练习： 1:字符串bdcaegf 2:对字符串中的字符进行排序,最终得到结果 → abcdefg\",\"package _14string.com.cskaoyan._04sort; import java.util.Arrays; /** * @description: * @author: 景天 * @date: 2022/10/13 17:27 **/ /* 课堂练习： 1:字符串bdcaegf 2:对字符串中的字符进行排序,最终得到结果 → abcdefg */ public class Ex { public static void main(String[] args) { // 定义字符串 String s = \\\"bdcaegf\\\"; // 字符串--->char[] char[] chars = s.toCharArray(); System.out.println(\\\"排序前\\\"); System.out.println(Arrays.toString(chars)); // 排序算法 // bubbleSort(chars); // 简单方法 Arrays.sort(chars); // 输出结果 System.out.println(\\\"排序后\\\"); System.out.println(Arrays.toString(chars)); } private static void bubbleSort(char[] chars) { // 冒泡排序 两两交换 大的放后面 for (int i = 0; i < chars.length - 1; i++) { for (int j = 0; j < chars.length - 1 - i; j++) { // 进行交换 大的放后面 if (chars[j] > chars[j + 1]) { // 定义临时变量接收 char temp = chars[j]; chars[j] = chars[j+1]; chars[j+1] = temp; } } } } } \"]},\"740\":{\"h\":\"Comparable接口\",\"t\":[\"此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法\",\"实现此接口的对象列表（和数组）可以通过 Collections.sort（和 Arrays.sort）进行自动排序\",\"实现此接口的类，其对象数组（array）或对象容器（collection） \",\"就可以通过**Arrays.sort()或Collections.sort()**进行自动排序\",\"对于实现该接口的A类来说，其对象a1.compareTo(a2)方法返回值 \",\"小于0，表示a1对象小于a2，在自然排序中处于前面的位置\",\"大于0，表示a1对象大于a2，在自然排序中处于后面的位置\",\"等于0，表示a1对象等于a2\",\"自定义类实现自然排序：\",\"实现Comparable接口\",\"重写compareTo方法\",\"练习： 定义一个学生类，让其按照学生的年龄的大小，从小到大进行排序\",\"package _14string.com.cskaoyan._04sort; import java.util.Arrays; /** * @description: * @author: 景天 * @date: 2022/10/13 17:44 **/ public class ComparableTest { public static void main(String[] args) { // 创建学生对象 Student s1 = new Student(\\\"zs\\\", 22, 77); Student s2 = new Student(\\\"ls\\\", 21, 88); Student s3 = new Student(\\\"ww\\\", 25, 66); Student s4 = new Student(\\\"zl\\\", 22, 99); Student s5 = new Student(\\\"长风\\\", 26, 59); // 填充数组 Student[] students = {s1, s2, s3, s4, s5}; // 排序前 System.out.println(\\\"排序前\\\"); System.out.println(Arrays.toString(students)); // 排序 sort方法 Arrays.sort(students); // 排序后 System.out.println(\\\"排序后\\\"); System.out.println(Arrays.toString(students)); } } /* 自定义类实现自然排序： - 实现Comparable接口 - 重写compareTo方法 */ class Student implements Comparable<Student>{ String name; int age; int score; public Student(String name, int age, int score) { this.name = name; this.age = age; this.score = score; } public String getName() { return name; } public int getAge() { return age; } public int getScore() { return score; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", score=\\\" + score + '}'; } @Override public int compareTo(Student o) { // 排序规则 // 按照年龄从小到大进行排序 // 按照年龄从大到小进行排序 //return this.getAge()-o.getAge(); // 年龄相同的情况下,按照分数从高到低排序 if (this.getAge() == o.getAge()) { return o.getScore() - this.getScore(); } return this.getAge()-o.getAge(); } //@Override //public int compareTo(Object o) { // return 0; //} } \"]},\"741\":{\"h\":\"Comparator接口\",\"t\":[\"在排序时需要注意一个比较特殊的方法，带比较器的Arrays.sort方法, 即sort(T[] a, Comparator<? super T> c) 根据指定比较器产生的顺序对指定对象数组进行排序。其中Comparator接口的实现类对象就是比较器,该对象通过compare方法传入比较的规则\",\"表示传入比较规则的int compare(T o1, T o2)方法: 该方法可以看成是o1-o2,如果方法返回负数,o1< o2,相反则大于,只有当方法返回0时,才表示对象相等\",\"三种方式去实现自然排序：\",\"手写接口类实现\",\"匿名内部类\",\"lambda表达式\",\"package _14string.com.cskaoyan._04sort; import java.util.Arrays; import java.util.Comparator; /** * @description: * @author: 景天 * @date: 2022/10/13 17:44 **/ public class ComparatorTest { public static void main(String[] args) { // 创建学生对象 Student2 s1 = new Student2(\\\"zs\\\", 22, 77); Student2 s2 = new Student2(\\\"ls\\\", 21, 88); Student2 s3 = new Student2(\\\"ww\\\", 25, 66); Student2 s4 = new Student2(\\\"zl\\\", 22, 99); Student2 s5 = new Student2(\\\"长风\\\", 26, 59); // 填充数组 Student2[] students = {s1, s2, s3, s4, s5}; // 排序前 System.out.println(\\\"排序前\\\"); System.out.println(Arrays.toString(students)); // 排序 使用带比较器的sort方法 //Arrays.sort(students, new MyComparator()); // 使用匿名内部类 Arrays.sort(students, new Comparator<Student2>() { @Override public int compare(Student2 o1, Student2 o2) { return o1.getScore() - o2.getScore(); } }); // 使用lambda Arrays.sort(students, (stu1, stu2) -> stu2.getScore() - stu1.getScore()); // 排序后 System.out.println(\\\"排序后\\\"); System.out.println(Arrays.toString(students)); } } class Student2{ String name; int age; int score; public Student2(String name, int age, int score) { this.name = name; this.age = age; this.score = score; } public String getName() { return name; } public int getAge() { return age; } public int getScore() { return score; } @Override public String toString() { return \\\"Student2{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", score=\\\" + score + '}'; } } // 手写实现类 class MyComparator implements Comparator<Student2> { @Override public int compare(Student2 o1, Student2 o2) { // 按照年龄从小到大进行排序 //return o1.getAge() - o2.getAge(); return o2.getAge() - o1.getAge(); } } \",\"如果一个空字符串””,让其拼接10000次,效率怎么样? 我们如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。\",\"package _14string.com.cskaoyan._05stringbuffer; /** * @description: * @author: 景天 * @date: 2022/10/14 9:47 **/ /* 如果一个空字符串””,让其拼接10000次,效率怎么样? 我们如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。 */ public class Demo { public static void main(String[] args) { String str = \\\"\\\"; StringBuffer sb = new StringBuffer(); // 获取当前时间戳 long start = System.currentTimeMillis(); //int sum = 0; for (int i = 0; i < 1000000; i++) { //str += \\\"a\\\"; // sum+=i; sb.append(\\\"a\\\"); } long end = System.currentTimeMillis(); // 7s // 4ms System.out.println(end - start); } } \"]},\"742\":{\"h\":\"StringBuffer构造方法\",\"t\":[\"public StringBuffer() // 默认容量是16 public StringBuffer(int capacity)// 容量是capacity public StringBuffer(String str)// str的长度+16 \"]},\"743\":{\"h\":\"StringBuffer成员方法\",\"t\":[\"获取功能 public int capacity() 返回当前容量,数组的长度,理论值 public int length() 返回长度(字符的个数),实际值 添加功能 public StringBuffer append(String s) 将指定的字符串(其他类型有重载方法)追加到此字符序列的尾部 在指定位置把任意类型的数据插入到字符串缓冲区里面 public StringBuffer insert(int offset,String str) 删除功能 public StringBuffer deleteCharAt(int index)：删除指定位置的字符 public StringBuffer delete(int start,int end)：删除从指定位置开始指定位置结束的内容 替换功能 使用给定String中的字符替换词序列的子字符串中的字符 public StringBuffer replace(int start,int end,String str) 反转功能 public StringBuffer reverse()：将此字符序列用其反转形式取代，返回对象本身 \",\" @Test public void apiTest() { // 获取功能 //public int capacity() 返回当前容量,数组的长度,理论值 //public int length() 返回长度(字符的个数),实际值 //添加功能 //public StringBuffer append(String s) 将指定的字符串(其他类型有重载方法)追加到此字符序列的尾部 //在指定位置把任意类型的数据插入到字符串缓冲区里面 StringBuffer sb = new StringBuffer(); sb.append(\\\"abc\\\"); System.out.println(\\\"sb = \\\" + sb); sb.append(\\\"def\\\"); System.out.println(\\\"sb = \\\" + sb); //public StringBuffer insert(int offset,String str) //删除功能 //public StringBuffer deleteCharAt(int index)：删除指定位置的字符 //public StringBuffer delete(int start,int end)：删除从指定位置开始指定位置结束的内容 //替换功能 //使用给定String中的字符替换词序列的子字符串中的字符 //public StringBuffer replace(int start,int end,String str) //反转功能 //public StringBuffer reverse()：将此字符序列用其反转形式取代，返回对象本身 System.out.println(\\\"sb.reverse() = \\\" + sb.reverse()); } \"]},\"744\":{\"h\":\"常见问题\",\"t\":[\"String, StringBuffer之间的相互转换\",\" @Test public void transfer() { // String---->StringBuffer String s = \\\"abc\\\"; StringBuffer sb = new StringBuffer(s); System.out.println(sb.reverse()); // StringBuffer---->String String s1 = sb.toString(); System.out.println(s1); } \",\"String, StringBuffer和StringBuilder有啥区别\",\"StringBuffer和StringBuilder从效率上来说哪个更快？\",\"image-20221014102227298\",\"和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改 \",\"并且不产生新的未使用对象，不会产生效率问题和空间浪费问题\",\"StringBuffer是线程安全的，StringBuilder是线程不安全的 \",\"StringBuilder的效率会比StringBuffer效率更高，单线程的程序推荐使用StringBuilder\",\"在多线程的程序中，应该优先考虑使用StringBuffer，安全性要更重要\",\"它们的效率都比String高很多\"]},\"745\":{\"h\":\"12. 异常\",\"t\":[\"学习目标:\",\"掌握异常的分类体系\",\"熟悉常见异常\",\"掌握异常的处理\",\"掌握finally使用\",\"掌握如何自定义异常\"]},\"746\":{\"h\":\"什么是异常\",\"t\":[\"简单来说异常就是用来表示Java程序运行过程中的错误(信息)\",\"网络中断, 用户输入信息, 读取不存在的文件\"]},\"747\":{\"h\":\"异常体系与分类\",\"t\":[\"image-20221014113421323\",\"在Java中Throwable作为所有错误跟异常的祖先类\",\"根据错误的严重程度分\",\"Error,: 比较严重的错误(代码处理不了, Jvm内部资源耗尽的错误) java.lang.StackOverflowError 栈溢出 java.lang.OutOfMemoryError 堆溢出\",\"Exception: 错误程度小, 能够用代码进行处理 \",\"java.lang.ArithmeticException: / by zero 算数异常 /0\",\"java.lang.NullPointerException 空指针异常\",\"java.lang.ArrayIndexOutOfBoundsException 数组越界\",\"根据处理方式的不同\",\"编译时异常(checked) : 编译不通过(除了RuntimeException及其子类外的其他的异常)\",\"运行时异常(unchecked): 编译通过, 但是运行时可能会出错(RuntimeException及其子类)\",\"Exception是运行时异常还是编译时异常\",\"Exception是编译时异常和运行时异常的父类\",\"在自定义异常的时候,Exception作为编译时异常\"]},\"748\":{\"h\":\"常见异常\",\"t\":[\"image-20221014115608435\",\"常见异常 编译时异常: java.lang.CloneNotSupportedException 克隆异常 java.io.FileNotFoundException 找不到文件 java.io.IOException IO操作异常 运行时异常 java.lang.ArithmeticException 算数异常 java.lang.NullPointerException 空指针异常 java.lang.ArrayIndexOutOfBoundsException 数组越界异常 java.lang.NumberFormatException 数字格式化异常 java.lang.ClassCastException 类型转换异常 \"]},\"749\":{\"h\":\"jvm默认处理机制\",\"t\":[\"jvm默认异常处理流程\",\"当我们代码在执行到，发生错误的地方。\",\"一旦发生错误，jvm就会终止我们自己程序的运行，转而执行jvm自己的错误处理流程\",\"在发生错误地方，收集错误信息，产生一个描述错误的对象\",\"访问收集到的错误信息，将错误信息，输出到控制台窗口中(哪个线程,异常类型名, 异常原因, 哪个类哪个方法哪一行报错了)\",\"执行过程\",\"如果错误产生在main方法中 \",\"当我们的代码执行到错误行数之前，代码是正常执行的\",\"当我们的代码执行到错误行数时，JVM会终止程序的执行，抛出一个该异常信息封装成的对象\",\"将该对象中的异常信息，打印到控制台上，告诉程序员发生了什么问题\",\"发生错误之后的语句，都不执行了\",\"如果错误产生在main方法当中的另一个方法中 \",\"当程序执行到该方法的错误行数时，JVM会终止程序的执行 \",\"向上给方法的调用者抛出一个该异常信息封装成的对象\",\"一直向上抛出，直到抛给main方法，main方法最终抛给JVM\",\"发生异常之前的语句正常执行，但是之后的语句都不执行了\",\"默认处理机制仅针对运行时异常\"]},\"750\":{\"h\":\"捕获异常,自己处理\"},\"751\":{\"h\":\"try-catch\"},\"752\":{\"h\":\"单分支\",\"t\":[\"语法\",\"方式一: try{ // 可能出现异常的代码 }catch(异常类型 对象名){ // 对异常的处理操作 } 方式二: try{ // 可能出现异常的代码 }catch(异常类型1 | 异常类型2 | 异常类型3 | 对象名){ // 对异常的处理操作 } \",\"try-catch的执行：\",\"如果try中代码运行时发生了错误，jvm在发生错误的代码处，收集错误信息\",\"try 块中在错误代码之后的代码，就不会在运行，jvm会跳转到相应的错误处理器中， 执行开发者自己写的，错误处理代码\",\"错误处理器中的代码，一旦执行完毕紧接着，程序继续正常执行，执行的是整个try代码块之后的代码\",\"注意：catch代码块中的代码，只有try块中的代码执行出错时，才会执行！\"]},\"753\":{\"h\":\"捕获异常信息\",\"t\":[\"//获取异常信息，返回字符串。 getMessage() //获取异常类名和异常信息，返回字符串。 toString() //获取异常类名和异常信息，以及异常出现在程序中的位置,并打印到控制台 printStackTrace() \"]},\"754\":{\"h\":\"多分支\",\"t\":[\"语法\",\"try{ // 可能出现异常的代码 }catch(异常类型 对象名){ // 对异常的处理操作 }catch(异常类型 对象名){ // 对异常的处理操作 }catch(异常类型 对象名){ // 对异常的处理操作 }..... \",\"匹配规则： 1.根据实际的异常对象的类型，和异常分支(异常处理器)声明的异常类型，从上到下一次做类型匹配 2. 一旦通过类型匹配，发现实际异常对象的类型和Catch分支(异常处理器)声明的异常类型，类型匹配，就把异常对象交给这个异常分支（异常处理器） 3. 多分支的异常处理的执行，有点类似于多分支if-else的执行，一次匹配，只会执行多个catch分支中的一个\",\"注意事项：\",\"如果说，在多catch分支的情况下，如果不同的catch分支，处理的异常类型，有父子关系 那么就一定要注意，处理子类的异常分支写在前面，父类的异常分支写在后面\",\"练习： 单独处理除0异常,空指针,数组下标越界异常一起处理。\",\" try { // 出现异常的代码 } catch (ArithmeticException e) { System.out.println(\\\"xxxxxxx\\\"); } catch (NullPointerException | ArrayIndexOutOfBoundsException e) { System.out.println(\\\"sssssss\\\"); } \"]},\"755\":{\"h\":\"抛出异常,上层处理\"},\"756\":{\"h\":\"throws关键字\",\"t\":[\"在方法定义时使用 声明该方法可能抛出的异常 对于编译时异常，可以在语法层面强制方法调用者处理该异常 基本语法：\",\"修饰符 返回值 方法名(形参列表) throws 异常列表 {} \",\"解释说明:\",\"异常列表: 异常类型1, 异常类型2, .... 用逗号隔开，列表中的异常不要出现父子关系，如果有，那么编译器只会强制处理父类\",\"只是声明可能抛出,到底抛不抛,看代码\",\"throws+运行时异常没有意义,因为运行时异常会自动抛出,不需要声明.throws+编译时异常才有意义,这实际上是编译异常处理的一种方式\",\"在方法中声明throws+编译时异常,声明可能抛出编译时异常,该方法被调用时就要处理这个编译异常\",\"处理编译时异常 \",\"方法内部try-catch\",\"throws向上抛,如果在main中就别抛了,处理一下\",\"子类重写父类方法注意:\",\"子类方法不能比父类抛出更多的编译时异常\",\"父类如果抛出Exception,那么子类就可以随便抛出\",\"建议子类重写的时候保持跟父类一样的异常列表\"]},\"757\":{\"h\":\"throw关键字\",\"t\":[\"在方法体中使用 主动在程序中抛出异常 每次只能抛出确定的某个异常对象\",\"基本语法：\",\"throw 异常对象 (new 出来的) \",\"注意:\",\"throw+编译时异常,需要结合throws关键字\"]},\"758\":{\"h\":\"throws vs throw\",\"t\":[\"throws\",\"用在方法声明后面，跟的是异常类名\",\"可以跟多个异常类名，用逗号隔开\",\"表示抛出异常，由该方法的调用者来处理\",\"throws表示出现异常的一种可能性，并不一定会发生这些异常\",\"throw\",\"用在方法体内，跟的是异常对象名\",\"只能抛出一个异常对象\",\"表示抛出异常，可以由方法体内的语句处理\",\"throw则是抛出了异常，执行throw则一定抛出了某种异常\"]},\"759\":{\"h\":\"异常策略选择\",\"t\":[\"总结一下，目前为止，我们学习过的异常处理策略有2种：\",\"捕获并处理try-catch\",\"向上抛出 \",\"运行时异常，自动抛出，直道抛给jvm\",\"编译时异常，需要结合throws关键字向上抛\",\"如何选择策略？\",\"对于运行时异常，我们不应该写出产生这种异常的代码，应该在代码的测试阶段修正代码。\",\"对于编译时异常，功能内部能够处理的就处理，如果不能够或者没有必要处理，就抛出。\"]},\"760\":{\"h\":\"finally\",\"t\":[\"特点\",\"被finally控制的语句体一定会执行 特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))\",\"作用\",\"用于释放资源，在IO流操作和数据库操作中会见到\",\"如何使用\",\"跟try-catch结合\",\"语法:方式一 try{ }catch(){ }catch(){ }..... finally{ // 一定执行 } 方式二: try{ }finally{ } \",\"一些奇思妙想\",\"try代码块如果有return \",\"程序会先执行完finally代码块，回过头执行try中的return\",\"catch代码块中如果有return，并且catch正常捕获异常执行 \",\"程序会先执行完finally代码块后，再回去执行catch中return，从catch代码块中结束方法\",\"finally代码中有return \",\"不会影响finally代码块执行\",\"如果finally和catch中都有return \",\"程序会直接从finally代码块中的return结束方法\",\"如果try中的异常不能正常捕获,但是finally中有return \",\"注意此时程序会跳过这个异常，不会抛出异常给JVM报错\",\"final与finally有什么区别\",\"final关键字，最终的，最后的。可以修饰类 成员变量 成员方法 \",\"修饰类，该类不能被继承\",\"修饰变量表示一个常量\",\"修饰方法表示无法重写的方法\",\"finally代码块，和try...catch一起使用，具有必然执行的特点 \",\"异常处理体系当中，用于资源释放\"]},\"761\":{\"h\":\"为什么要自定义异常\",\"t\":[\"现有的异常体系不满足需求\"]},\"762\":{\"h\":\"如何自定义异常\"},\"763\":{\"h\":\"自定义编译时异常\",\"t\":[\"定义一个类继承Exception\",\"构造方法\"]},\"764\":{\"h\":\"自定义运行时异常\",\"t\":[\"定义一个类继承RuntimeException\",\"构造方法\",\"考试成绩必须在0-100分之间，如果有考试成绩不在这个范围之内，则认为成绩异常。\",\"对于以上的异常，Java语言中显然没有一个对应的“考试分数异常超出范围”的异常，因此该异常需要我们自己来定义。\",\"package _15exception.com.cskaoyan._06define; import java.util.Scanner; /** * @description: * @author: 景天 * @date: 2022/10/14 16:06 **/ /* 考试成绩必须在0-100分之间，如果有考试成绩不在这个范围之内，则认为成绩异常。 */ public class Demo { public static void main(String[] args) { try { func(); } catch (MyException1 myException1) { myException1.printStackTrace(); } } private static void func() throws MyException1 { // 键盘接收分数 Scanner scanner = new Scanner(System.in); int score = scanner.nextInt(); // 判读一下是否在区间内 if (score < 0 || score > 100) { // 如果不在 抛出异常 // throw + 异常对象 throw new MyException1(\\\"分数不合法\\\"); } } } // 定义编译时异常 class MyException1 extends Exception{ public MyException1() { } public MyException1(String message) { super(message); } } // 定义运行时异常 class MyException2 extends RuntimeException{ public MyException2() { } public MyException2(String message) { super(message); } } \"]},\"765\":{\"h\":\"13. File\",\"t\":[\"学习目标:\",\"掌握相对路径 绝对路径\",\"熟悉File中API\"]},\"766\":{\"h\":\"为什么要学习File类？\",\"t\":[\"因为在操作系统中，(内存,RAM , SRAM DRAM) 需要永久保存的数据，都是以文件的形式存在，所以要想操作这些被永久保存的数据，就首先必须在java语言中如何描述，表示文件\"]},\"767\":{\"h\":\"相对路径与绝对路径\",\"t\":[\"image-20221014163430331\",\"绝对路径：\",\"绝对路径名是 完整的路径名，不需要任何其他信息就可以定位它所表示的文件\",\"windows：E:\\\\demo\\\\first\\\\a.txt\",\"相对路径\",\"相反，相对路径名必须使用取自其他路径名的信息进行解释(不完整的路径名)\",\"windows: (e:\\\\demo)second\\\\a.txt\",\"java语言中，相对路径默认相对于谁？\",\"默认情况下，java.io包中的类总是根据 当前用户目录 来解析相对路径名。此目录由系统属性 user.dir 指定，通常是 Java 虚拟机的调用目录。\",\"System.out.println(System.getProperty(\\\"user.dir\\\")); \"]},\"768\":{\"h\":\"不同系统的路径表示\",\"t\":[\"对于类 UNIX 平台，绝对路径名的前缀始终是 \\\"/\\\"。相对路径名没有前缀。表示根目录的绝对路径名的前缀为 \\\"/\\\" 且名称序列为空。\",\"绝对路径： /home/st/6379.conf\",\"相对路径： st/a.txt\",\"根目录： /\",\"对于 Microsoft Windows 平台，包含盘符的路径名前缀由驱动器号和一个 \\\":\\\" 组成。如果路径名是绝对路径名，还可能后跟 \\\"\\\\“\",\"绝对路径： e:\\\\st\\\\a.txt\",\"相对路径：没有盘符前缀 st\\\\a.txt\",\"文件和目录路径名的抽象表示形式\"]},\"769\":{\"h\":\"构造方法\",\"t\":[\"File (String pathname) File (String parent, Sting child) File (File parent, String child) \",\"package _15file.com.cskaoyan._02api; import org.junit.Test; import java.io.File; /** * @description: * @author: 景天 * @date: 2022/10/14 17:07 **/ public class APITest { // 构造方法 @Test public void myTest1() { // File (String pathname) //File file = new File(\\\"a.txt\\\"); //File file2 = new File(\\\"D:\\\\\\\\workspace2\\\\\\\\java46th\\\\\\\\a.txt\\\"); // //判断，File对象表示的文件，是否物理存在 //public boolean exists() //System.out.println(\\\"file.exists() = \\\" + file.exists()); //File (String parent, Sting child) //File file1 = new File(\\\"D:\\\\\\\\workspace2\\\\\\\\java46th\\\", \\\"a.txt\\\"); //System.out.println(file1.exists()); //File (File parent, String child) File file = new File(new File(\\\"D:\\\\\\\\\\\\\\\\workspace2\\\\\\\\\\\\\\\\java46th\\\"), \\\"a.txt\\\"); } } \"]},\"770\":{\"h\":\"成员方法\"},\"771\":{\"h\":\"创建功能\",\"t\":[\"//只负责创建文件，目录路径如果不存在，会报错而不是帮你创建 public boolean createNewFile() //只负责创建目录，但只能创建单层目录，如果有多级目录不存在的话，创建失败 public boolean mkdir() //只负责创建目录，但可以创建多级目录，如果多级目录不存在，则帮你全部创建 public boolean mkdirs() \",\"mkdir 和 mkdirs创建目录的区别：\",\"mkdir仅能在已经存在的目录下，创建新的目录\",\"mkdirs 当要创建的目标目录，如果目标目录的父目录不存在的时候，它会将不存在的目标木目录的父目录 连同目标目录一起，都创建好\",\"package _15file.com.cskaoyan._02api; import org.junit.Test; import java.io.File; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/14 17:07 **/ public class APITest { // 构造方法 @Test public void myTest1() { // File (String pathname) //File file = new File(\\\"a.txt\\\"); //File file2 = new File(\\\"D:\\\\\\\\workspace2\\\\\\\\java46th\\\\\\\\a.txt\\\"); // //判断，File对象表示的文件，是否物理存在 //public boolean exists() //System.out.println(\\\"file.exists() = \\\" + file.exists()); //File (String parent, Sting child) //File file1 = new File(\\\"D:\\\\\\\\workspace2\\\\\\\\java46th\\\", \\\"a.txt\\\"); //System.out.println(file1.exists()); //File (File parent, String child) File file = new File(new File(\\\"D:\\\\\\\\\\\\\\\\workspace2\\\\\\\\\\\\\\\\java46th\\\"), \\\"a.txt\\\"); } /* 创建功能 */ @Test public void myTest2() throws IOException { File file = new File(\\\"b.txt\\\"); // //只负责创建文件，目录路径如果不存在，会报错而不是帮你创建 //public boolean createNewFile() System.out.println(file.createNewFile()); ////只负责创建目录，但只能创建单层目录，如果有多级目录不存在的话，创建失败 //public boolean mkdir() File dir = new File(\\\"a\\\"); System.out.println(dir.mkdir()); ////只负责创建目录，但可以创建多级目录，如果多级目录不存在，则帮你全部创建 //public boolean mkdirs() File dir2 = new File(\\\"a\\\\\\\\b\\\\\\\\c.mp3\\\"); System.out.println(dir2.mkdirs()); } } \"]},\"772\":{\"h\":\"重命名功能\",\"t\":[\"// 重新命名此抽象路径名表示的文件 public boolean renameTo(File dest) \",\"在源文件，和修改之后的目标文件在同一目录的时候：\",\"效果只是重命名\",\"当源文件和，修改之后的目标文件当不在同一目录的时候：\",\"移动文件\",\"重命名\"]},\"773\":{\"h\":\"删除功能\",\"t\":[\"// 删除此抽象路径名表示的文件或目录。如果此路径名表示一个目录，则该目录必须为空才能删除 // delete不会因为文件不存在,路径名不正确而抛出异常,只会返回false, 并且不会进入回收站 public boolean delete() \"]},\"774\":{\"h\":\"判断功能\",\"t\":[\"// 判断File对象是否表示的是一个文件 public boolean isFile() //判断File对象是否表示的是一个目录 public boolean isDirectory() //判断，File对象表示的文件，是否物理存在 public boolean exists() \"]},\"775\":{\"h\":\"基本获取功能\",\"t\":[\"//获取File对象表示的抽象文件的绝对路径 public String getAbsolutePath() //获取File对象表示的抽象文件，路径名字符串 public String getPath() //获取文件或者目录的名字 public String getName() //返回由此抽象路径名表示的文件的长度。不能返回文件夹的长度 //此抽象路径名表示的文件的长度，以字节为单位；如果文件不存在，则返回 0L public long length() //返回此抽象路径名表示的文件最后一次被修改的时间。 //表示文件最后一次被修改的时间的 long 值，用与时间点（1970 年1月1日，00:00:00 GMT）之间的毫秒数表示 public long lastModified() \"]},\"776\":{\"h\":\"高级获取功能\",\"t\":[\"//返回一个字符串数组，这些字符串包括，此抽象的路径名表示的目录中的所有文件和文件夹的名字 //如果File对象表示的是一个文件，则返回null //只能获取当前目录的下一层，并不是获取所有层级 //如果是一个空目录，返回一个长度为0的数组，而不是null [] public String[] list() //返回指定File目录下的文件和文件夹的绝对路径形式的File对象数组 //如果File对象表示的是一个文件，则返回null //只能获取当前目录的下一层，并不是获取所有层级 //如果是一个空目录，返回一个长度为0的数组，而不是null public File[] listFiles() \",\"练习1 判断某个目录(单级)下有没有a.jpg文件,有的话输出\",\"package _15file.com.cskaoyan._02api; import java.io.File; /** * @description: * @author: 景天 * @date: 2022/10/14 17:41 **/ /* 练习1 判断某个目录(单级)下有没有a.jpg文件,有的话输出 */ public class Ex { public static void main(String[] args) { // 创建File对象 File dir = new File(\\\"D:\\\\\\\\app2\\\"); // listFiles----> File[] File[] files = dir.listFiles(); // 遍历数组 for (File file : files) { // 判断是不是文件 if (file.isFile()) { // 如果是文件 // 再判断是否是目标文件 if (\\\"a.jpg\\\".equals(file.getName())) { // 如果是 输出绝对路径 System.out.println(file.getAbsolutePath()); } } } } } \",\"练习2 递归输出某个目录下的所有java文件\",\"package _15file.com.cskaoyan._02api; import java.io.File; /** * @description: * @author: 景天 * @date: 2022/10/14 17:46 **/ /* 练习2 递归输出某个目录下的所有java文件 */ public class Ex2 { public static void main(String[] args) { // 创建File对象 File dir = new File(\\\"D:\\\\\\\\app2\\\"); findAllJava(dir); } private static void findAllJava(File dir) { // listFiles----> File[] File[] files = dir.listFiles(); // 遍历数组 for (File file : files) { // 判断如果是文件 if (file.isFile()) { // 再判断是否是.java文件 if (file.getName().endsWith(\\\".java\\\")) { // 如果是 输出绝对路径 System.out.println(file.getAbsolutePath()); } } else { // 如果是目录 // 递归 findAllJava(file); } } } } \"]},\"777\":{\"h\":\"文件过滤器\",\"t\":[\"自定义获取功能是在高级获取功能的基础上，加了一个过滤器，所以高级功能的特点它都有\",\"FileFilter是一个接口，它只有下面一个方法\",\"//测试指定抽象路径名是否应该包含在某个路径名列表中 boolean accept(File pathname) \",\"这个方法相当于把高级功能中listFiles()获取的File数组中File对象遍历一遍，然后逐个判断\",\"符合条件的留下，不符合条件的干掉（丢弃）-\",\"常用匿名内部类来做实现\",\"练习: 输出某个目录(单级)下的所有java文件,使用过滤器.\",\"3种方式实现 匿名对象 匿名内部类 lambda表达式\",\"package _15file.com.cskaoyan._02api; import java.io.File; import java.io.FileFilter; import java.util.Arrays; /** * @description: * @author: 景天 * @date: 2022/10/15 9:27 **/ /* 练习: 输出某个目录(单级)下的所有java文件,使用过滤器. */ public class Ex3 { public static void main(String[] args) { // 创建File对象 File dir = new File(\\\"D:\\\\\\\\app2\\\"); // 利用带过滤器的listFiles方法--->File[] //File[] files = dir.listFiles(new MyFileFilter()); // 匿名内部类 //File[] files = dir.listFiles(new FileFilter() { // @Override // public boolean accept(File pathname) { // return pathname.getName().endsWith(\\\".jpg\\\"); // } // //}); File[] files = dir.listFiles((pathname) -> pathname.getName().endsWith(\\\".txt\\\")); System.out.println(Arrays.toString(files)); } } class MyFileFilter implements FileFilter{ @Override public boolean accept(File pathname) { return pathname.getName().endsWith(\\\".java\\\"); } } \"]},\"778\":{\"h\":\"14. IO\",\"t\":[\"学习目标:\",\"掌握IO体系及分类\",\"熟练掌握字节流\",\"熟悉字符流\",\"熟悉其他流\"]},\"779\":{\"h\":\"什么是IO?\",\"t\":[\"input : 输入 读\",\"output: 输出 写\"]},\"780\":{\"h\":\"为什么有IO?\",\"t\":[\"在操作系统中，一切需要永久保存的数据都以文件的形式 存储。需要长久保存的文件数据，存储在外部设备。 但是需要读入内存才能显示这些数据 同时，内存的大小有限，因此常常需要在内存和外设之间交换数据，即I/O\"]},\"781\":{\"h\":\"java中如何实现IO功能\",\"t\":[\"Java流模型\",\"image-20221015095336438\"]},\"782\":{\"h\":\"IO的分类\",\"t\":[\"按流向分(以内存为参照物)\",\"输出流: 内存---> 磁盘\",\"输入流: 磁盘---> 内存\",\"按照数据类型分\",\"字节流: 逻辑单位是字节,(1B = 8bit 0000 0000)\",\"字符流: 逻辑单位是字符(理解为一种文化符号,abc , \\\"你\\\", \\\"の\\\")\"]},\"783\":{\"h\":\"4个抽象基类\",\"t\":[\"字节输出流: OutputStream\",\"字节输入流: InputStream\",\"字符输出流: Writer\",\"字符输入流: Reader\",\"由这4个抽象基类派生的子类都是以其父类名作为后缀的\",\"如：InputStream的子类FileInputStream。 如：Reader的子类FileReader\"]},\"784\":{\"h\":\"什么时候用什么流?\",\"t\":[\"一般来讲, 纯文本文件用字符流 .txt .java .cpp\",\"其他情况用字节流(字节流是万能的) .word .ppt .mp4 .mp3 .jpg . png .exe\"]},\"785\":{\"h\":\"字节输出流\"},\"786\":{\"h\":\"抽象基类OutputStream\",\"t\":[\"此抽象类是表示输出字节流的所有类的超类\",\"继承关系\",\"image-20221015100652985\",\"成员方法\",\"void\",\"close() 关闭此输出流并释放与此流有关的所有系统资源。\",\"void\",\"flush() 刷新此输出流并强制写出所有缓冲的输出字节。\",\"void\",\"write(byte[] b) 将 b.length 个字节从指定的 byte 数组写入此输出流。\",\"void\",\"write(byte[] b, int off, int len) 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。\",\"abstract void\",\"write(int b) 将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。\"]},\"787\":{\"h\":\"具体子类\"},\"788\":{\"h\":\"FileOutputStream文件字节输出流\",\"t\":[\"用于将数据写入 File\",\"继承关系\",\"image-20221015101510011\",\"构造方法\",\"FileOutputStream(File file) 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。\",\"FileOutputStream(File file, boolean append) 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。\",\"FileOutputStream(String fileName) 创建一个向具有指定名称的文件中写入数据的输出文件流。\",\"FileOutputStream(String name, boolean append) 创建一个向具有指定 name 的文件中写入数据的输出文件流 append - 如果为 true，则将字节写入文件末尾处，而不是写入文件开始处\",\"成员方法\",\"void\",\"write(byte[] b) 将 b.length 个字节从指定的 byte 数组写入此输出流。\",\"void\",\"write(byte[] b, int off, int len) 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。\",\"abstract void\",\"write(int b) 将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。\",\"Demo\",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 9:13 **/ /* 写数据的步骤 1.创建输出流对象 2.write 3.释放资源 close */ public class Demo { public static void main(String[] args) throws IOException { //1.创建输出流对象 //FileOutputStream out = new FileOutputStream(new File(\\\"D:\\\\\\\\workspace2\\\\\\\\java46th\\\\\\\\a.txt\\\")); FileOutputStream out = new FileOutputStream(\\\"b.txt\\\"); //2.write // write(int b) 写单个字节 //out.write(97); // write(byte[] b) 批量写 String s = \\\"abc\\\"; byte[] bytes = s.getBytes(); out.write(bytes); // write(byte [] b , int off , int len) 写字节数组的部分 out.write(bytes, 1, 2); //3.释放资源 close out.close(); } } \"]},\"789\":{\"h\":\"注意事项\",\"t\":[\"当我们创建一个输出流对象的时候,发生了什么?\",\"jvm向操作系统中看这个文件是否存在\",\"如果文件不存在, 帮我们创建\",\"文件已经存在, 覆盖重新开始写\",\"如何实现文件追加功能?\",\"借助于带append参数的构造方法\",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; import java.io.FileOutputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 10:55 **/ /* 实现文件追加功能 */ public class Demo2 { public static void main(String[] args) throws IOException { // 使用带append的构造方法 // 创建输出流对象 FileOutputStream out = new FileOutputStream(\\\"a.txt\\\", true); // write out.write(100); // close out.close(); } } \",\"如何实现换行功能\",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; import java.io.FileOutputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 10:57 **/ /* 实现换行功能 */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建输出流对象 FileOutputStream out = new FileOutputStream(\\\"a.txt\\\"); out.write(\\\"abcd\\\".getBytes()); // write 写换行符 // \\\\r\\\\n out.write(\\\"\\\\r\\\\n\\\".getBytes()); out.write(97); out.write(\\\"\\\\r\\\".getBytes()); out.write(97); out.write(\\\"\\\\n\\\".getBytes()); out.write(97); // 使用系统默认换行符 out.write(System.lineSeparator().getBytes()); out.write(97); // close out.close(); } } \",\"如何异常处理\",\"try-catch-finally\",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; /** * @description: * @author: 景天 * @date: 2022/10/15 11:04 **/ /* try-catch */ public class Demo4 { public static void main(String[] args) { // 创建输出流对象 FileOutputStream out = null; try { // xxxxxx // xxxx out = new FileOutputStream(\\\"a.txt\\\"); // write out.write(\\\"aaaa\\\".getBytes()); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }finally { // close try { if (out != null) { out.close(); } } catch (IOException e) { e.printStackTrace(); } } } } \",\"try-with-resources\",\"语法 try(资源,只要实现了AutoCloseable接口的类){ //可能出现异常的代码 // 当出了try代码块的时候 close方法会自动执行 资源会被自动释放 }catch(){ } \",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 11:13 **/ /* try-with-resources */ public class Demo5 { public static void main(String[] args) { try(FileOutputStream out = new FileOutputStream(\\\"a.txt\\\")) { // write数据 out.write(\\\"abc\\\".getBytes()); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } \",\"验证自动执行\",\"package _16io01.com.cskaoyan.bytestream._01fileoutputstream; /** * @description: * @author: 景天 * @date: 2022/10/15 11:15 **/ /* 验证close方法自动执行 */ public class Demo6 { public static void main(String[] args) { try (A a = new A()){ // 调用func 不调用close a.func(); } catch (Exception e) { e.printStackTrace(); } } } class A implements AutoCloseable{ @Override public void close() throws Exception { System.out.println(\\\"close执行了\\\"); } public void func(){ System.out.println(\\\"func方法执行了\\\"); } } \",\"为什么要close?\",\"jvm使用了不属于jvm的资源, 不能通过GC回收, 只能通过close显式的释放资源.\"]},\"790\":{\"h\":\"BufferedOutputStream缓冲字节输出流\",\"t\":[\"该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。\",\"继承关系\",\"image-20221017105932198\",\"构造方法\",\"BufferedOutputStream(OutputStream out) 创建一个新的缓冲输出流，以将数据写入指定的底层输出流。默认缓冲区大小是8KB\",\"BufferedOutputStream(OutputStream out, int size) 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 指定缓冲区size大小\",\"成员方法\",\"3个write方法\",\"write(int b)\",\"write(byte[] b)\",\"write(byte[] b, int off, int len)\",\"Demo\",\"package _17io02.com.cskaoyan.bytestream._03buffer; import java.io.BufferedOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 11:02 **/ /* 使用缓冲输出流 */ public class Demo { public static void main(String[] args) throws IOException { // 创建输出流对象 //FileOutputStream fileOutputStream = new FileOutputStream(\\\"a.txt\\\"); //BufferedOutputStream out = new BufferedOutputStream(fileOutputStream); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(\\\"a.txt\\\")); // write // 写单个字节 out.write(97); out.write(98); out.write(\\\"yyds\\\".getBytes()); // flush out.flush(); // close out.close(); } } \",\"注意：\",\"使用所有带缓冲区的输出流, 记得flush操作\",\"执行close方法会自动执行flush\",\"image-20221017111016747\",\"缓冲区满了会自动刷新\",\" public class Demo2 { public static void main(String[] args) throws IOException { // 使用指定缓冲区 BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(\\\"a.txt\\\"), 4); // write out.write(\\\"abcdef\\\".getBytes()); // flush // close } } \"]},\"791\":{\"h\":\"字节输入流\"},\"792\":{\"h\":\"抽象基类InputStream\",\"t\":[\"此抽象类是表示字节输入流的所有类的超类。\",\"继承关系\",\"image-20221015112203128\",\"成员方法\",\"abstract int\",\"read() 从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。返回值代表了读取到的字节值 readData\",\"int\",\"read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。读入缓冲区的总字节数；如果因为已经到达流末尾而不再有数据可用，则返回 -1。返回值表示读取的字节的个数 readCount\",\"int\",\"read(byte[] b, int off, int len) 将输入流中最多 len 个数据字节读入 byte 数组。\"]},\"793\":{\"h\":\"具体子类\"},\"794\":{\"h\":\"FileInputStream文件字节输入流\",\"t\":[\"FileInputStream 从文件系统中的某个文件中获得输入字节\",\"继承关系\",\"image-20221015113156025\",\"构造方法\",\"FileInputStream(File file) 通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的 File 对象 file 指定。\",\"FileInputStream(String fileName) 通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。\",\"成员方法\",\"abstract int\",\"read() 从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。返回值代表了读取到的字节值 readData\",\"int\",\"read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。读入缓冲区的总字节数；如果因为已经到达流末尾而不再有数据可用，则返回 -1。返回值表示读取的字节的个数 readCount\",\"int\",\"read(byte[] b, int off, int len) 将输入流中最多 len 个数据字节读入 byte 数组。\",\"Demo\",\"package _16io01.com.cskaoyan.bytestream._02fileinputstream; import java.io.FileInputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 11:33 **/ /* 读取数据的步骤 1.创建输入流对象 2.read 3.close释放资源 */ public class Demo { public static void main(String[] args) throws IOException { //1.创建输入流对象 FileInputStream in = new FileInputStream(\\\"a.txt\\\"); //2.read // read() 读取单字节 // readData 表示读取的字节值 // readSingle(in); // read(byte[]) // readMulti(in); // read(byte[],int off,int len) //3.close释放资源 in.close(); } private static void readMulti(FileInputStream in) throws IOException { byte[] bytes = new byte[1024]; // readCount 表示读取到的字节的个数 int readCount = in.read(bytes); System.out.println(\\\"readCount = \\\" + readCount); String s = new String(bytes); System.out.println(s); } private static void readSingle(FileInputStream in) throws IOException { int readData = in.read(); System.out.println(((char) readData)); int readData2 = in.read(); System.out.println(((char) readData2)); int readData3 = in.read(); System.out.println(((char) readData3)); int readData4 = in.read(); System.out.println(readData4); } } \",\"image-20221015114253217\",\"package _16io01.com.cskaoyan.bytestream._02fileinputstream; import java.io.FileInputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/15 11:43 **/ public class Demo2 { public static void main(String[] args) throws IOException { // 创建输入流对象 FileInputStream in = new FileInputStream(\\\"a.txt\\\"); // read // read(byte[]) byte[] bytes = new byte[4]; int readCount = in.read(bytes); System.out.println(new String(bytes)); int readCount2 = in.read(bytes); System.out.println(new String(bytes,0,readCount2)); // close in.close(); } } \",\"image-20221015114923623\",\"循环读取\",\"package _17io02.com.cskaoyan.bytestream._01readwhile; import java.io.FileInputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 9:43 **/ /* 循环读取数据 */ public class Demo { public static void main(String[] args) throws IOException { // 创建输入流对象 FileInputStream in = new FileInputStream(\\\"a.txt\\\"); // 循环 // readWhile1(in); // 新的方式 // 单字节读取 // readWhile2(in); // 字节数组方式 int readCount; byte[] bytes = new byte[1024]; while ((readCount = in.read(bytes)) != -1) { System.out.println(new String(bytes,0,readCount)); } // close in.close(); } private static void readWhile2(FileInputStream in) throws IOException { int readData; // == -1 就结束循环 意味文件里读取完了 while ((readData = in.read()) != -1) { System.out.println(((char) readData)); } } private static void readWhile1(FileInputStream in) throws IOException { while (true) { // read int readData = in.read(); if (readData == -1) { break; } System.out.println(((char) readData)); } } } \"]},\"795\":{\"h\":\"BufferedInputStream缓冲字节输入流\",\"t\":[\"继承关系\",\"image-20221017111652469\",\"构造方法\",\"BufferedInputStream(InputStream in) 创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。默认缓冲区8KB\",\"BufferedInputStream(InputStream in, int size) 创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 使用指定的缓冲区\",\"成员方法\",\"3个read\",\"read() 读取单个字节\",\"read(byte [] b) 读取数据填充到数组\",\"read(byte [] b, int off , int len) 读取数据填充到数组\",\"package _17io02.com.cskaoyan.bytestream._03buffer; import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 11:18 **/ /* 使用缓冲的输入流 */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建输入流对象 BufferedInputStream in = new BufferedInputStream(new FileInputStream(\\\"a.txt\\\")); // read // 单个读取 int readData = in.read(); System.out.println(readData); // 批量 byte[] bytes = new byte[1024]; int readCount = in.read(bytes); System.out.println(new String(bytes,0,readCount)); // close in.close(); } } \"]},\"796\":{\"h\":\"文件复制功能\",\"t\":[\"思路:\",\"读取源文件, 把数据读取到内存里\",\"把内存的数据写到新文件\",\"主要逻辑\",\"image-20221017100403893\",\"使用字节流复制\",\"文本文件: 正常复制\",\"图片文件: 正常复制\",\"视频文件: 正常复制\",\"使用字符流复制\",\"文本文件: 正常复制\",\"图片文件: 复制出错\",\"视频文件: 复制出错\",\"单字节复制还是字节数组方式效率高?\",\"字节数组批量的方式效率高\",\"为什么?\",\"批量的方式会减少跟操作系统的交互\",\"举例:\",\"我在JD 买了5个快递\",\"单字节: 快递小哥1次送一个\",\"字节数组方式: 东哥说了 大家都是兄弟 配车 快递装车里\"]},\"797\":{\"h\":\"为什么有字符流?\",\"t\":[\"使用字节流读取英文数字 \",\"没有问题\",\"使用字节流读取中文 \",\"可能有问题\"]},\"798\":{\"h\":\"一个字符是如何存在计算机中的\",\"t\":[\"基于某个编码表. 每个字符对应这一个整数值(编码值), 计算机存的就是这个整数值\",\"字符\",\"编码值(整数值)\",\"a\",\"97 ---> 二级制 01100001\",\"你\",\"20320 --->二进制\"]},\"799\":{\"h\":\"编码表\",\"t\":[\"ASCII：美国标准信息交换码。 用一个字节的7位可以表示。0000 0000 - 0111 1111 ISO8859-1：拉丁码表。欧洲码表 用一个字节的8位表示。 0000 0000 - 1111 1111\",\"GB2312：中国的中文编码表。 GBK：中国的中文编码表升级，融合了更多的中文文字符号。 GB18030：GBK的取代版本 BIG-5码 ：通行于台湾、香港地区的一个繁体字编码方案，俗称“大五码”。\",\"Unicode：国际标准码，融合了多种文字。\",\"UTF-8：可变长度来表示一个字符。 UTF-8不同，它定义了一种“区间规则”，这种规则可以和ASCII编码保持最大程度的兼容：\",\"它将Unicode编码为00000000-0000007F的字符，用单个字节来表示 0111 1111 = 7F 它将Unicode编码为00000080-000007FF的字符用两个字节表示 它将Unicode编码为00000800-0000FFFF的字符用3字节表示\",\"1字节 0xxxxxxx 2字节 110xxxxx 10xxxxxx 3字节 1110xxxx 10xxxxxx 10xxxxxx\",\"utf-16:\",\"jvm使用的编码表，用2个字节来编解码\",\"char : 2 字节\",\"工作中常用的\",\"Ascii 1个字节的低7位\",\"ISO8859-1 1个字节\",\"GBK 2个字节表示一个中文字符\",\"UTF-8 3个字节表示一个中文字符\"]},\"800\":{\"h\":\"编解码\",\"t\":[\"编码\",\"把一字符串数据转为二进制数据存到计算机的过程(把人看懂的东西-----> 计算机看懂的东西)\",\"解码\",\"编码的逆过程(把计算机看懂的东西 ---- > 人看懂的东西)\",\"举例:\",\"类似于摩斯密码\",\"你\",\"中文编码表 0x0001\",\"日文编码表 0x0001 の\",\"默认的编码表\",\"idea: Utf-8\",\"Win: GBK (ANSI 默认的)\"]},\"801\":{\"h\":\"java中的编解码\",\"t\":[\"package _17io02.com.cskaoyan.charstream.com.cskoyan._02encode; import java.io.UnsupportedEncodingException; import java.util.Arrays; /** * @description: * @author: 景天 * @date: 2022/10/17 14:58 **/ /* java中的编解码 */ public class Demo2 { public static void main(String[] args) throws UnsupportedEncodingException { // 编码过程 // 人看懂---->计算机看懂的 String s = \\\"你好\\\"; // byte[] getBytes() // 使用平台的默认字符集将此 String 编码为 byte 序列， // 并将结果存储到一个新的 byte 数组中 //byte[] bytes = s.getBytes(); //System.out.println(Arrays.toString(bytes)); // [-28, -67, -96, -27, -91, -67] // byte[] getBytes(String charsetName) // 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 byte[] bytes = s.getBytes(\\\"GBK\\\"); System.out.println(Arrays.toString(bytes)); // [-60, -29, -70, -61] // 解码过程 // 计算机看懂的----> 人看懂的 // String(byte[] bytes) // 通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。 //String s1 = new String(bytes); //System.out.println(s1); // String(byte[] bytes, String charsetName) // 通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。 String s2 = new String(bytes, \\\"gbk\\\"); System.out.println(s2); } } \",\"乱码问题\",\"产生的原因: 编码解码不一致\",\"解决: 使其一致\"]},\"802\":{\"h\":\"字符流的本质\",\"t\":[\"image-20221017151839319\"]},\"803\":{\"h\":\"字符输出流\"},\"804\":{\"h\":\"抽象基类Writer\",\"t\":[\"写入字符流的抽象类\",\"继承关系\",\"image-20221017152102253\",\"成员方法\",\"void\",\"write(char[] cbuf) 写入字符数组。\",\"abstract void\",\"write(char[] cbuf, int off, int len) 写入字符数组的某一部分。\",\"void\",\"write(int c) 写入单个字符。\",\"void\",\"write(String str) 写入字符串。\",\"void\",\"write(String str, int off, int len) 写入字符串的某一部分\"]},\"805\":{\"h\":\"具体子类\"},\"806\":{\"h\":\"OutputStreamWriter转换流\",\"t\":[\"OutputStreamWriter 是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。\",\"继承关系\",\"image-20221017155025638\",\"构造方法\",\"OutputStreamWriter(OutputStream out) 创建使用默认字符编码的 OutputStreamWriter。\",\"OutputStreamWriter(OutputStream out, String charsetName) 创建使用指定字符集的 OutputStreamWriter。\",\"成员方法\",\"5个write\",\"3+2\",\"3个跟字符相关的\",\"2个跟字符串相关的\",\"Demo\",\" package _17io02.com.cskaoyan.charstream.com.cskoyan._03transfer; import java.io.*; /** * @description: * @author: 景天 * @date: 2022/10/17 15:52 **/ /* 使用转换输出流写数据 */ public class Demo { public static void main(String[] args) throws IOException { // 创建输出流对象 //new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(new File(\\\"a.txt\\\")))); OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(\\\"a.txt\\\")); // write // write(int c) 写单个字符 out.write(97); out.write(System.lineSeparator()); // write(char[] c) 写字符数组 String s = \\\"宝,今天我输液了,什么夜,想你的夜\\\"; char[] chars = s.toCharArray(); out.write(chars); out.write(System.lineSeparator()); // write(char[] c, int off ,int len) out.write(chars, 0, 3); out.write(System.lineSeparator()); // write(String s) out.write(s); out.write(System.lineSeparator()); // write(String s, int off ,int len) out.write(s,1,4); // flush out.flush(); // close out.close(); } } \"]},\"807\":{\"h\":\"FileWriter简化流\",\"t\":[\"用来写入字符文件的便捷类\",\"继承关系\",\"image-20221017163038301\",\"构造方法\",\"FileWriter(File file) 根据给定的 File 对象构造一个 FileWriter 对象。\",\"FileWriter(File file, boolean append) 根据给定的 File 对象构造一个 FileWriter 对象。\",\"FileWriter(String fileName) 根据给定的文件名构造一个 FileWriter 对象。\",\"FileWriter(String fileName, boolean append) 根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。\",\"成员方法\",\"5个write\",\"3个跟字符相关的\",\"2个跟字符串相关的\",\"package _17io02.com.cskaoyan.charstream.com.cskoyan._05simple; import java.io.FileWriter; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 16:32 **/ /* 使用简化流写数据 */ public class Demo2 { public static void main(String[] args) throws IOException { // 创建输出流对象 FileWriter fileWriter = new FileWriter(\\\"a.txt\\\"); // write fileWriter.write(\\\"宝,我今天拉便便了,什么便,想你的一遍又一遍\\\"); // flush fileWriter.flush(); // close fileWriter.close(); } } \"]},\"808\":{\"h\":\"BufferedWriter缓冲流\",\"t\":[\"将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。\",\"可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了\",\"继承关系\",\"image-20221017164408121\",\"构造方法\",\"BufferedWriter(Writer out) 创建一个使用默认大小输出缓冲区的缓冲字符输出流。默认缓冲区大小是16KB\",\"BufferedWriter(Writer out, int sz) 创建一个使用给定大小输出缓冲区的新缓冲字符输出流。缓冲区大小size\",\"成员方法\",\"5 + 1\",\"5个常规的write\",\"1个独有的方法\",\"newLine() 写入一个行分隔符。\",\"Demo\",\"package _17io02.com.cskaoyan.charstream.com.cskoyan._06buffer; import java.io.BufferedWriter; import java.io.FileOutputStream; import java.io.FileWriter; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 17:10 **/ /* 使用缓冲输出流写数据 */ public class Demo { public static void main(String[] args) throws IOException { // 创建输出流对象 BufferedWriter bw = new BufferedWriter(new FileWriter(\\\"a.txt\\\")); // write bw.write(\\\"大郎,来喝药!\\\"); // 独有的方法 newLine bw.newLine(); bw.write(\\\"大郎,来喝药!\\\"); // flush bw.flush(); // close bw.close(); } } \"]},\"809\":{\"h\":\"字符输入流\"},\"810\":{\"h\":\"抽象基类Reader\",\"t\":[\"用于读取字符流的抽象类\",\"成员方法\",\"int\",\"read() 读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)，如果已到达流的末尾，则返回 -1 用readData 读取到的字符值\",\"int\",\"read(char[] cbuf) 将字符读入数组。 读取的字符数，如果已到达流的末尾，则返回 -1 用readCount表示 读取到的字符的个数\",\"abstract int\",\"read(char[] cbuf, int off, int len) 将字符读入数组的某一部分。\"]},\"811\":{\"h\":\"具体子类\"},\"812\":{\"h\":\"InputStreamReader转换流\",\"t\":[\"InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。\",\"构造方法\",\"InputStreamReader(InputStream in) 创建一个使用默认字符集的 InputStreamReader。\",\"InputStreamReader(InputStream in, String charsetName) 创建使用指定字符集的 InputStreamReader。\",\"成员方法\",\"3个read方法\",\"read()\",\"read(char[] c)\",\"read(char[] c ,int off, int len)\",\"Demo\",\"package _17io02.com.cskaoyan.charstream.com.cskoyan._03transfer; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; /** * @description: * @author: 景天 * @date: 2022/10/17 16:06 **/ /* 使用转换流读取数据 */ public class Demo2 { public static void main(String[] args) throws IOException { // 创建输入流对象 InputStreamReader in = new InputStreamReader(new FileInputStream(\\\"a.txt\\\")); // read // read() 读取单个字符 int readData = in.read(); System.out.println(((char) readData)); // read(char[] c) 批量读取 char[] chars = new char[1024]; int readCount = in.read(chars); String s = new String(chars, 0, readCount); System.out.println(s); // close in.close(); } } \"]},\"813\":{\"h\":\"FileReader简化流\",\"t\":[\"继承关系\",\"image-20221017163612958\",\"构造方法\",\"FileReader(File file) 在给定从中读取数据的 File 的情况下创建一个新 FileReader。\",\"FileReader(String fileName) 在给定从中读取数据的文件名的情况下创建一个新 FileReader。\",\"成员方法\",\"3个read\",\"Demo\",\"package _17io02.com.cskaoyan.charstream.com.cskoyan._05simple; import java.io.FileReader; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/17 16:37 **/ /* 简化流读取数据 */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建输入流对象 FileReader reader = new FileReader(\\\"D:\\\\\\\\b.txt\\\"); // read char[] chars = new char[1024]; int readCount = reader.read(chars); System.out.println(new String(chars,0,readCount)); // close reader.close(); } } \",\"转换流VS简化流\",\"使用角度, 简化流简单, 转换流麻烦\",\"继承关系, 转换流是简化流的父类\",\"核心区别, 简化流不能指定字符集(使用默认的字符集), 转化流可以指定的字符集\"]},\"814\":{\"h\":\"BufferedReader缓冲流\",\"t\":[\"从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。\",\"可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了\",\"继承关系\",\"image-20221017171413720\",\"构造方法\",\"BufferedReader(Reader in) 创建一个使用默认大小输入缓冲区的缓冲字符输入流。\",\"BufferedReader(Reader in, int sz) 创建一个使用指定大小输入缓冲区的缓冲字符输入流。\",\"成员方法\",\"3+1\",\"3个常规read\",\"1个独有的方法\",\"String\",\"readLine() 读取一个文本行。如果已到达流末尾，则返回 \",\"Demo\",\"package _17io02.com.cskaoyan.charstream.com.cskoyan._06buffer; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; /** * @description: * @author: 景天 * @date: 2022/10/17 17:17 **/ /* 使用缓冲的输入流读取数据 */ public class Demo2 { public static void main(String[] args) throws IOException { // 创建输入流对象 BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\\\"a.txt\\\"))); // 常规read //char[] chars = new char[1024]; //int readCount = br.read(chars); //System.out.println(new String(chars, 0, readCount)); // 自己独有的方法 readLine() String s = br.readLine(); System.out.println(s); String s1 = br.readLine(); System.out.println(s1); String s2 = br.readLine(); System.out.println(s2); // close br.close(); } } package _17io02.com.cskaoyan.charstream.com.cskoyan._06buffer; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; /** * @description: * @author: 景天 * @date: 2022/10/17 17:17 **/ /* 使用缓冲的输入流循环读取数据 readline() */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建输入流对象 BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\\\"a.txt\\\"))); // 自己独有的方法 readLine() String line; while ((line = br.readLine()) != null) { System.out.println(line); } // close br.close(); } } \"]},\"815\":{\"h\":\"数据流\",\"t\":[\"需求: 用字节流向文件中写个整数1000 小数3.14\",\"做不到\"]},\"816\":{\"h\":\"DataOutputStream数据输出流\",\"t\":[\"数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入。\",\"构造方法\",\"DataOutputStream(OutputStream out) 创建一个新的数据输出流，将数据写入指定基础输出流。\",\"成员方法\",\"每种数据类型都有1个对应的write方法\",\"举例\",\"int ----> writeInt(int a)\",\"double ----> writeDouble(double d)\",\"....\"]},\"817\":{\"h\":\"DataInputStream数据输入流\",\"t\":[\"数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型\",\"构造方法\",\"DataInputStream(InputStream in) 使用指定的底层 InputStream 创建一个 DataInputStream。\",\"成员方法\",\"每种数据类型都有1个对应的read方法\",\"举例\",\"int ----> readInt()\",\"double ----> readDouble()\",\"....\",\"package _18io03.com.cskaoyan._01data; import java.io.*; /** * @description: * @author: 景天 * @date: 2022/10/18 10:08 **/ /* 数据流的使用 */ public class Demo2 { public static void main(String[] args) throws IOException { writeData(); readData(); } private static void readData() throws IOException { // 创建输入流对象 DataInputStream in = new DataInputStream(new FileInputStream(\\\"a.txt\\\")); // read int i = in.readInt(); System.out.println(i); double v = in.readDouble(); System.out.println(v); // close in.close(); } private static void writeData() throws IOException { // 创建输出流对象 DataOutputStream out = new DataOutputStream(new FileOutputStream(\\\"a.txt\\\")); // write // 写1000 out.writeInt(1000); // 写3.14 out.writeDouble(3.14); //close out.close(); } } \",\"package _18io03.com.cskaoyan._01data; import java.io.*; /** * @description: * @author: 景天 * @date: 2022/10/18 10:24 **/ public class Demo3 { public static void main(String[] args) throws IOException { write(); read(); } private static void read() throws FileNotFoundException, IOException { DataInputStream dis = new DataInputStream( new FileInputStream(\\\"dos.txt\\\")); byte b = dis.readByte(); System.out.println(b); short s = dis.readShort(); System.out.println(s); int i = dis.readInt(); System.out.println(i); long l = dis.readLong(); System.out.println(l); float f = dis.readFloat(); System.out.println(f); double d = dis.readDouble(); System.out.println(d); char ch = dis.readChar(); System.out.println(ch); boolean bb = dis.readBoolean(); System.out.println(bb); dis.close(); } private static void write() throws IOException { DataOutputStream dos = new DataOutputStream(new FileOutputStream( \\\"dos.txt\\\")); dos.writeByte(1); dos.writeShort(20); dos.writeInt(300); dos.writeLong(4000); dos.writeFloat(12.34f); dos.writeDouble(12.56); dos.writeChar('a'); dos.writeBoolean(true); dos.close(); } } \",\"注意\",\"写的顺序是什么, 读取的时候要按照相同的顺序\",\"image-20221018102410834\"]},\"818\":{\"h\":\"打印流\",\"t\":[\"核心思想: 把不同的数据类型--->String\",\"案例:\",\"定义一个类Printer\",\"定义成员变量OutputStream\",\"定义5个方法\",\"写int的方法 void printInt(int a)\",\"写int并且换行的方法 void printIntLn(int a)\",\"写double的方法 void printDouble(double a)\",\"写double并且换行的方法 void printDoubleLn(double a)\",\"写一个close方法 void close()\",\"package _18io03.com.cskaoyan._02print; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; /** * @description: * @author: 景天 * @date: 2022/10/18 10:54 **/ /* 案例: 定义一个类Printer 定义成员变量OutputStream 定义5个方法 写int的方法 void printInt(int a) 写int并且换行的方法 void printIntLn(int a) 写double的方法 void printDouble(double a) 写double并且换行的方法 void printDoubleLn(double a) 写一个close方法 void close() */ public class Demo { public static void main(String[] args) throws IOException{ // 创建Printer对象 给Out赋值 Printer printer = new Printer(new FileOutputStream(\\\"a.txt\\\")); // 向文件中写1000 printer.printIntLn(1000); // 3.14 printer.printDouble(3.14); // close printer.close(); } } class Printer{ // 定义成员变量OutputStream OutputStream out; public Printer(OutputStream out) { this.out = out; } //写int的方法 void printInt(int a) public void printInt(int a) throws IOException { // int ---> String String s = String.valueOf(a); out.write(s.getBytes()); } //写int并且换行的方法 void printIntLn(int a) public void printIntLn(int a) throws IOException { // int ---> String String s = String.valueOf(a); out.write(s.getBytes()); out.write(System.lineSeparator().getBytes()); } //写double的方法 void printDouble(double a) public void printDouble(double a) throws IOException { // double ---> String String s = String.valueOf(a); out.write(s.getBytes()); } //写double并且换行的方法 void printDoubleLn(double a) public void printDoubleLn(double a) throws IOException { // double ---> String String s = String.valueOf(a); out.write(s.getBytes()); out.write(System.lineSeparator().getBytes()); } //写一个close方法 void close() public void close() throws IOException { out.close(); } } \"]},\"819\":{\"h\":\"PrintStream字节打印流\",\"t\":[\"PrintStream 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式\",\"继承关系\",\"image-20221018110423686\",\"构造方法\",\"PrintStream(File file) 创建具有指定文件且不带自动行刷新的新打印流。\",\"PrintStream(OutputStream out) 创建新的打印流。\",\"PrintStream(OutputStream out, boolean autoFlush) 创建新的打印流。\",\"PrintStream(String fileName) 创建具有指定文件名称且不带自动行刷新的新打印流。\",\"成员方法\",\"每个数据类型都有一个相对应的print方法\",\"举例:\",\"int ---> print(int a)\",\"double ---> print(double d)\",\"......\",\"package _18io03.com.cskaoyan._02print; import java.io.IOException; import java.io.PrintStream; /** * @description: * @author: 景天 * @date: 2022/10/18 11:09 **/ /* 使用字节打印流写数据 */ public class Demo2 { public static void main(String[] args) throws IOException { // 创建输出流对象 PrintStream printStream = new PrintStream(\\\"a.txt\\\"); // print // 写int 1000 printStream.print(1000); // 写true printStream.print(true); // close printStream.close(); } } \"]},\"820\":{\"h\":\"PrintWriter字符打印流\",\"t\":[\"向文本输出流打印对象的格式化表示形式\",\"继承关系\",\"image-20221018110820109\",\"构造方法\",\"PrintWriter(File file) 使用指定文件创建不具有自动行刷新的新 PrintWriter。\",\"PrintWriter(OutputStream out) 根据现有的 OutputStream 创建不带自动行刷新的新 PrintWriter。\",\"PrintWriter(OutputStream out, boolean autoFlush) 通过现有的 OutputStream 创建新的 PrintWriter。\",\"PrintWriter(String fileName) 创建具有指定文件名称且不带自动行刷新的新 PrintWriter。\",\"PrintWriter(Writer out) 创建不带自动行刷新的新 PrintWriter。\",\"PrintWriter(Writer out, boolean autoFlush) 创建新 PrintWriter。\",\"成员方法\",\"每个数据类型都有一个相对应的print方法\",\"举例:\",\"int ---> print(int a)\",\"double ---> print(double d)\",\"......\",\"Demo\",\"package _18io03.com.cskaoyan._02print; import java.io.FileWriter; import java.io.IOException; import java.io.PrintStream; import java.io.PrintWriter; /** * @description: * @author: 景天 * @date: 2022/10/18 11:09 **/ /* 使用字符打印流写数据 */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建输出流对象 PrintWriter printWriter = new PrintWriter(new FileWriter(\\\"a.txt\\\")); // print // 写int 1000 printWriter.print(1000); // 写true printWriter.print(true); // flush printWriter.flush(); // close printWriter.close(); } } \",\"打印流特点\",\"只能操作目的地，不能操作数据来源。 \",\"没有与之相对应的输入流\",\"可以操作任意类型的数据。 \",\"把任意类型的数据--->String (String.valueOf(不同类型的数据))\",\"如果启动了自动刷新，能够自动刷新。 \",\"autoFlush如果为 true，则 println、printf 或 format 方法将刷新输出缓冲区\",\"image-20221018112240762\",\"image-20221018112318534\",\"可以操作文件的流 \",\"构造方法里可以传File对象或者String fileName\"]},\"821\":{\"h\":\"标准输入输出流\",\"t\":[\"标准输入流\",\"System.in\",\"默认输入设备是键盘\",\"本质: InputStream 普通的字节输入流\",\"标准输出流\",\"System.out\",\"默认输出设备 显示器\",\"本质: PrintStream 字节打印流\",\"练习：利用System.in 完成Scanner的nextLine()的功能。\",\"想到BufferedReader 有个readLine\",\"package _18io03.com.cskaoyan._03stander; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; /** * @description: * @author: 景天 * @date: 2022/10/18 11:34 **/ /* 练习：利用System.in 完成Scanner的nextLine()的功能。 System.in 本质InputStream */ public class Demo3 { public static void main(String[] args) throws IOException { // 创建BufferedReader对象 BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // 调用readLine方法 // 更改需求 要求能多次输入 String line; // 通过约定标记结束 比如输入gun 结束 while ((line = br.readLine()) != null) { System.out.println(\\\"line = \\\" + line); if (\\\"gun\\\".equals(line)) { break; } } // close br.close(); } } \"]},\"822\":{\"h\":\"对象流(序列化与反序列化流)\",\"t\":[\"什么是序列化与反序列化?\",\"序列化: 把对象数据转为二进制数据, 存到文件的过程\",\"反序列:(序列化的逆过程) 把二进制数据还原回对象数据的过程\",\"为什么需要序列化?\",\"把对象持久化保存\",\"Student s = new Student(\\\"zs\\\",20); \"]},\"823\":{\"h\":\"ObjectOutputStream序列化流\",\"t\":[\"ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。可以使用 ObjectInputStream 读取（重构）对象。通过在流中使用文件可以实现对象的持久存储。如果流是网络套接字流，则可以在另一台主机上或另一个进程中重构对象。\",\"只能将支持 java.io.Serializable 接口的对象写入流中 Serializable接口是一个空接口, 起到标记的作用\",\"writeObject 方法用于将对象写入流中\",\"继承关系\",\"image-20221018142931216\",\"构造方法\",\"ObjectOutputStream(OutputStream out) 创建写入指定 OutputStream 的 ObjectOutputStream。\",\"成员方法\",\"void\",\"writeObject(Object obj) 将指定的对象写入 ObjectOutputStream。\"]},\"824\":{\"h\":\"ObjectInputStream反序列化流\",\"t\":[\"ObjectInputStream 对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化\",\"继承关系\",\"image-20221018144054272\",\"构造方法\",\"ObjectInputStream(InputStream in) 创建从指定 InputStream 读取的 ObjectInputStream。\",\"成员方法\",\"Object\",\"readObject() 从 ObjectInputStream 读取对象。\",\"package _18io03.com.cskaoyan._04serialize; import java.io.*; /** * @description: * @author: 景天 * @date: 2022/10/18 14:30 **/ public class Demo { public static void main(String[] args) throws IOException, ClassNotFoundException { serialize(); unSerialize(); } private static void unSerialize() throws IOException, ClassNotFoundException { // 创建输入流对象 ObjectInputStream in = new ObjectInputStream(new FileInputStream(\\\"a.txt\\\")); // readObject() Object o = in.readObject(); System.out.println(o); // close in.close(); } private static void serialize() throws IOException { // 创建学生对象 Student student = new Student(\\\"ls\\\", 21,59); // 创建输出流对象 ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\\\"a.txt\\\")); // writeObject(Object o) out.writeObject(student); // close out.close(); } } class Student implements Serializable { String name; int age; // transient修饰不想被序列化的成员变量 transient int score; static final long serialVersionUID = -7889256375299507710L; public Student(String name, int age) { this.name = name; this.age = age; } public Student(String name, int age, int score) { this.name = name; this.age = age; this.score = score; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", score=\\\" + score + '}'; } } \",\"设置自动生成SeriaversionUID\",\"image-20230411163221138\",\"注意\",\"java.io.NotSerializableException 没有实现Serializable接口\",\"java.io.InvalidClassException: _18io03.com.cskaoyan._04serialize.Student; local class incompatible: stream classdesc serialVersionUID = -7889256375299507710, local class serialVersionUID = 7388140007375758175 SerialVersionUID不匹配\",\"transient修饰不想被序列化的成员变量\",\"类型\",\"字节输出流\",\"字节输入流\",\"字符输出流\",\"字符输入流\",\"抽象基类\",\"OutputStream\",\"InputStream\",\"Writer\",\"Reader\",\"文件相关\",\"FileOutputStream\",\"FileInputStream\",\"FileWriter\",\"FileReader\",\"缓冲相关\",\"BufferedOutputStream\",\"BufferedInputStream\",\"BufferedWriter\",\"BufferedReader\",\"转换相关\",\"OutputStreamWriter\",\"InputStreamReader\",\"数据相关\",\"DataOutputStream\",\"DataInputStream\",\"打印相关\",\"PrintStream\",\"PrintWriter\",\"对象相关\",\"ObjectOutpuStream\",\"ObjectInputStream\"]},\"825\":{\"h\":\"15. 多线程基础\",\"t\":[\"学习目标:\",\"除了标记了解的, 其余的都掌握\",\"假如我要实现如下功能 程序不停地在屏幕上输出一句问候的语句(比如“你好”) “同时”，当我通过键盘输入固定输入的时候，程序停止向屏幕输出问候的语句(比如说输入gun)\",\"单线程\",\"无法做到\\\"同时\\\"发生\",\"package _19thread01.com.cskaoyan._01introduction; import java.util.Scanner; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/19 9:11 **/ /* 程序不停地在屏幕上输出一句问候的语句(比如“你好”) ----> sayHello() “同时”，当我通过键盘输入固定输入的时候， --->waitToStop() 程序停止向屏幕输出问候的语句(比如说输入gun) */ public class Demo { public static boolean flag = true; public static void main(String[] args) { System.out.println(\\\"main before\\\"); System.out.println(\\\"hello before\\\"); sayHello(); System.out.println(\\\"hello after\\\"); System.out.println(\\\"wait before\\\"); waitToStop(); System.out.println(\\\"wait after\\\"); System.out.println(\\\"main after\\\"); } private static void waitToStop() { Scanner scanner = new Scanner(System.in); // 多次输入 while (flag) { String s = scanner.nextLine(); if (\\\"gun\\\".equals(s)) { flag = false; break; } } } private static void sayHello() { while (flag) { System.out.println(\\\"你好\\\"); try { // 让程序暂停执行3秒 TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } } } } \",\"多线程\",\"可以做到同时发生\",\"package _19thread01.com.cskaoyan._01introduction; import java.util.Scanner; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/19 9:11 **/ /* 程序不停地在屏幕上输出一句问候的语句(比如“你好”) ----> sayHello() “同时”，当我通过键盘输入固定输入的时候， --->waitToStop() 程序停止向屏幕输出问候的语句(比如说输入gun) 多线程改进 */ public class Demo2 { public static boolean flag = true; public static void main(String[] args) { System.out.println(\\\"main before\\\"); System.out.println(\\\"hello before\\\"); sayHello(); System.out.println(\\\"hello after\\\"); System.out.println(\\\"wait before\\\"); waitToStop(); System.out.println(\\\"wait after\\\"); System.out.println(\\\"main after\\\"); } private static void waitToStop() { new Thread(new Runnable() { @Override public void run() { Scanner scanner = new Scanner(System.in); // 多次输入 while (flag) { String s = scanner.nextLine(); if (\\\"gun\\\".equals(s)) { flag = false; break; } } } }).start(); } private static void sayHello() { new Thread(new Runnable() { @Override public void run() { while (flag) { System.out.println(\\\"你好\\\"); try { // 让程序暂停执行3秒 TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); } } \",\"image-20221019100623466\"]},\"826\":{\"h\":\"进程(process)与线程(thread)\",\"t\":[\"进程\",\"计算机程序在某个数据集合上的运行活动.进程是操作系统进行资源调度与分配的基本单位\",\"正在运行的程序或者软件\",\"线程\",\"进程中有多个子任务,每个子任务就是一个线程. 从执行路径的角度看, 一条执行路径就是一个线程\",\"线程是CPU进行资源调度与分配的基本单位\",\"进程与线程的关系\",\"线程依赖于进程而存在\",\"一个进程中可以有多个线程(最少1个)\",\"线程共享进程资源\",\"举例: 迅雷, Word拼写\"]},\"827\":{\"h\":\"串行(serial),并行(parallel)与并发(concurrency)\",\"t\":[\"串行\",\"一个任务接一个任务按顺序执行\",\"并行\",\"在同一个时间点(时刻)上, 多个任务同时运行\",\"并发\",\"在同一时间段内,多个任务同时运\",\"image-20221019102440447\"]},\"828\":{\"h\":\"同步(synchronization)与异步(asynchronization)\",\"t\":[\"有2个任务(业务) A B\",\"同步:\",\"A任务执行的时候B不能执行,按顺序执行\",\"你走我不走\",\"异步:\",\"A任务执行的时候,B任务可以执行\",\"你走你的,我走我的,互相不干扰\",\"多线程是天生异步的\",\"举例: 去书店买java书, 给老板打了个电话, 问有没有java书\",\"同步: 老板说找一下,然后告诉我, 电话没有挂断, 我在电话另一端等待.\",\"异步:老板说找一下,然后告诉我, 电话挂断. 等老板找到后, 再通知我, 我在电话另一端不用等待\",\"单道批处理: 内存中只能运行一个进程\",\"多道批处理: 内存中可以运行多个进程, \\\"同时\\\"发生 (进程的上下文切换)\",\"现代操作系统: 引入了线程\"]},\"829\":{\"h\":\"java命令+主类类名运行原理\",\"t\":[\"java命令会启动jvm进程, jvm进程会创建一个线程(main线程)\",\"执行main线程里面的main方法\"]},\"830\":{\"h\":\"jvm是单线程还是多线程的\",\"t\":[\"结论: jvm是多线程的\",\"除了main线程外,还有其他线程,起码还有一个垃圾回收线程\",\"线程 是程序中的执行线程。Java 虚拟机允许应用程序并发地运行多个执行线程。\"]},\"831\":{\"h\":\"文档示例\",\"t\":[\"image-20221019111047094\"]},\"832\":{\"h\":\"步骤\",\"t\":[\"定义一个类继承Thread类\",\"重写run方法\",\"创建子类对象\",\"通过start方法启动线程\",\"Demo\",\"package _19thread01.com.cskaoyan._02implone; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/19 11:11 **/ /* 多线程的实现方式一: 1. 定义一个类继承Thread类 2. 重写run方法 3. 创建子类对象 4. 通过start方法启动线程 */ public class Demo { public static void main(String[] args) { System.out.println(\\\"main start\\\"); //3. 创建子类对象 MyThread t = new MyThread(); // 4. 通过start方法启动线程 t.start(); try { TimeUnit.MILLISECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"main end\\\"); } } //1. 定义一个类继承Thread类 class MyThread extends Thread{ //2. 重写run方法 @Override public void run() { System.out.println(\\\"子线程执行了!\\\"); } } \",\"没加等待的结果: main start main end 子线程执行了! 加上等待的结果: main start 子线程执行了! main end \"]},\"833\":{\"h\":\"注意事项\",\"t\":[\"多线程的执行特点是什么?\",\"执行特点是随机的\",\"package _19thread01.com.cskaoyan._02implone; /** * @description: * @author: 景天 * @date: 2022/10/19 11:19 **/ /* 多线程的执行特点 */ public class Demo2 { public static void main(String[] args) { // 创建并启动2个线程 MyThread2 t1 = new MyThread2(); MyThread2 t2 = new MyThread2(); // start() t1.start(); t2.start(); } } class MyThread2 extends Thread{ // run @Override public void run() { for (int i = 0; i < 10; i++) { // getName() 获取线程名称 System.out.println(getName()+\\\"----\\\"+i); } } } \",\"执行结果: Thread-1----0 Thread-1----1 Thread-0----0 Thread-0----1 Thread-0----2 Thread-0----3 Thread-0----4 Thread-0----5 Thread-1----2 Thread-0----6 Thread-0----7 Thread-0----8 Thread-0----9 Thread-1----3 Thread-1----4 Thread-1----5 Thread-1----6 Thread-1----7 Thread-1----8 Thread-1----9 \",\"start方法跟run方法有什么区别?\",\"start方法才是开辟新的执行路径, run方法只是普通方法调用, 并没有开辟新的执行路径, 还是一条执行路径, 仍然是单线程的.\",\"package _19thread01.com.cskaoyan._02implone; /** * @description: * @author: 景天 * @date: 2022/10/19 11:19 **/ /* start() vs run() */ public class Demo3 { public static void main(String[] args) { System.out.println(\\\"main start\\\"); // 创建并启动2个线程 MyThread3 t1 = new MyThread3(); // start() // t1.start(); // run()方法只是一个普通方法调用 t1.run(); System.out.println(\\\"main end\\\"); } } class MyThread3 extends Thread{ // run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(i); } } } \",\"调用start()方法的结果: main start main end 0 1 2 3 4 5 6 7 8 9 调用run()方法的结果: main start 0 1 2 3 4 5 6 7 8 9 main end \",\"同一个线程能否启动多次?\",\"不能启动多次, java.lang.IllegalThreadStateException\",\"package _19thread01.com.cskaoyan._02implone; /** * @description: * @author: 景天 * @date: 2022/10/19 11:19 **/ /* 同一个线程对象能否启动多次? */ public class Demo4 { public static void main(String[] args) { System.out.println(\\\"main start\\\"); // 创建并启动2个线程 MyThread4 t1 = new MyThread4(); // start() t1.start(); t1.start(); System.out.println(\\\"main end\\\"); } } class MyThread4 extends Thread{ // run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(i); } } } \",\"谁才代表一个线程?\",\"Thread及其子类对象才代表线程, 就是t1,t2\",\"获取名字\",\"String\",\"getName() 返回该线程的名称。\",\"默认名字Thread-编号 从0开始\",\"static Thread\",\"currentThread() 返回对当前正在执行的线程对象的引用。\",\"设置名字\",\"void\",\"setName(String name) 改变线程名称，使之与参数 name 相同。\",\"还可以通过**Thread**(String name) 分配新的 Thread 对象。设置名称\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 11:38 **/ /* 设置获取线程名称 */ public class GetSetNameDemo { public static void main(String[] args) { // 获取主线程的名称 // currentThread() // 返回对当前正在执行的线程对象的引用。 Thread thread = Thread.currentThread(); System.out.println(thread.getName()); // 创建并启动2个线程 MyThread t1 = new MyThread(\\\"王道吴彦祖\\\"); MyThread t2 = new MyThread(\\\"王道彭于晏\\\"); // setName(String name) // 改变线程名称，使之与参数 name 相同。 //t1.setName(\\\"王道吴彦祖\\\"); //t2.setName(\\\"王道彭于晏\\\"); t1.start(); t2.start(); } } class MyThread extends Thread{ public MyThread(String name) { super(name); } // run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread().getName()+\\\"----\\\"+i); } } } \"]},\"834\":{\"h\":\"什么是线程调度\",\"t\":[\"概念: 给线程分配CPU处理权的过程\"]},\"835\":{\"h\":\"调度方式的分类\",\"t\":[\"协同式线程调度 \",\"线程的执行时间由线程本身决定, 当这个线程执行完后报告操作系统,切换到下一个线程\",\"抢占式的线程调度方式 \",\"线程的执行时间由系统决定, 哪个线程抢到了CPU的执行,哪个线程执行\"]},\"836\":{\"h\":\"java中采用哪种调度方式\",\"t\":[\"Java中采用的是抢占式的调度方式\"]},\"837\":{\"h\":\"操作系统优先级\",\"t\":[\"动态优先级\",\"正在执行的线程会随着执行时间的延长, 优先级降低\",\"正在等待的线程会随着等待的时间的延长,优先级会升高\",\"静态优先级\",\"固定数值\",\"动态优先级+静态优先级\"]},\"838\":{\"h\":\"java中优先级\",\"t\":[\"静态优先级 1-10\",\"static int\",\"MAX_PRIORITY 线程可以具有的最高优先级。10\",\"static int\",\"MIN_PRIORITY 线程可以具有的最低优先级。 1\",\"static int\",\"NORM_PRIORITY 分配给线程的默认优先级。 5\",\"设置获取优先级\",\"int\",\"getPriority() 返回线程的优先级。\",\"void\",\"setpriority(int n) 设置线程优先级\",\"Demo\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 14:38 **/ /* 获取设置线程优先级 */ public class PriorityDemo { public static void main(String[] args) { // 创建子类对象 MyThread2 t = new MyThread2(); // setPriority(int n) //t.setPriority(Thread.MAX_PRIORITY); t.setPriority(Thread.MIN_PRIORITY); // getPriority() int priority = t.getPriority(); System.out.println(\\\"priority = \\\" + priority); // start t.start(); } } class MyThread2 extends Thread{ //run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(i); } } } \",\"优先级案例\",\"创建并启动2个线程 A B\",\"A线程设置最大优先级10\",\"B线程设置最小优先级 1\",\"每个线程打印10个数\",\"结论: 做不到A先打印完 B打印完\",\"优先级没有卵用.\",\"然而，我们在java语言中设置的线程优先级，它仅仅只能被看做是一种\\\"建议\\\"(对操作系统的建议)， 实际上，操作系统本身，有它自己的一套线程优先级 (静态优先级 + 动态优先级)\",\"java官方： 线程优先级并非完全没有用，我们Thread的优先级，它具有统计意义，总的来说，高优先级的线程 占用的cpu执行时间多一点，低优先级线程，占用cpu执行时间，短一点\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 14:42 **/ /* 优先级案例 创建并启动2个线程 A B A线程设置最大优先级10 B线程设置最小优先级 1 每个线程打印10个数 */ public class Ex { public static void main(String[] args) { // 创建2个线程 MyThread3 t1 = new MyThread3(\\\"A\\\"); MyThread3 t2 = new MyThread3(\\\"B\\\"); // 设置优先级 t1.setPriority(10); t2.setPriority(1); // 启动 t1.start(); t2.start(); } } class MyThread3 extends Thread{ //run public MyThread3(String name) { super(name); } @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(getName()+\\\"-----\\\"+i); } } } \"]},\"839\":{\"h\":\"线程休眠sleep\",\"t\":[\"static void\",\"sleep(long millis) 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。\",\"package _19thread01.com.cskaoyan._03api; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/19 14:50 **/ /* 线程休眠 */ public class SleepDemo { public static void main(String[] args) { System.out.println(\\\"main start\\\"); //ThreadSleep t = new ThreadSleep(); //t.start(); new ThreadSleep().start(); //try { // Thread.sleep(3000); //} catch (InterruptedException e) { // e.printStackTrace(); //} System.out.println(\\\"main end\\\"); } } class ThreadSleep extends Thread{ //run @Override public void run() { System.out.println(\\\"子线程启动\\\"); for (int i = 0; i < 10; i++) { System.out.println(i); // 休眠1s // TimeUnit.SECONDS.sleep(1) 跟 Thread.sleep(1000)等价 try { Thread.sleep(1000); // TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } } } \"]},\"840\":{\"h\":\"线程合并join\",\"t\":[\"void\",\"join() 等待该线程终止。\",\"谁等待?\",\"执行结果上看main线程在等待, join这行代码在哪个线程上运行, 哪个线程等待\",\"等待谁?\",\"执行结果上看等待的是子线程, 哪个线程调用了join, 等待的就是这个线程\",\"image-20221019150652986\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 14:57 **/ /* 线程加入(合并) */ public class JoinDemo { public static void main(String[] args) { System.out.println(\\\"main start\\\"); // 创建线程对象 ThreadJoin t = new ThreadJoin(); // 启动线程 t.start(); // 调用join try { t.join(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"main end\\\"); } } class ThreadJoin extends Thread{ // run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(i); } } } \",\"没有使用join的输出结果: main start main end 0 1 2 3 4 5 6 7 8 9 使用join后输出结果: main start 0 1 2 3 4 5 6 7 8 9 main end \"]},\"841\":{\"h\":\"线程礼让yield\",\"t\":[\"static void\",\"yield() 暂停当前正在执行的线程对象，并执行其他线程。\",\"创建并启动2个线程 A B\",\"都是打印10个数\",\"要求A打印0, B打印0, A打印1, B打印1.....\",\"结论: 通过yield方法做不到\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 15:10 **/ /* 线程礼让 创建并启动2个线程 A B 都是打印10个数 要求A打印0, B打印0, A打印1, B打印1..... */ public class YieldDemo { public static void main(String[] args) { // 创建并启动2个线程 new ThreadYield(\\\"A\\\").start(); new ThreadYield(\\\"B\\\").start(); } } class ThreadYield extends Thread{ public ThreadYield(String name) { super(name); } // run @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(getName()+\\\"----\\\"+i); // 立刻执行yield方法 // 暂停当前正在执行的线程对象，并执行其他线程。 Thread.yield(); // 虽然yield方法使当前线程放弃了CPU的执行权 但是仍然可以参与下轮的CPU的竞争 } } } \"]},\"842\":{\"h\":\"守护线程setDaemon\",\"t\":[\"线程分类\",\"用户线程(默认) \",\"系统的工作线程\",\"守护线程 \",\"为用户线程服务的线程(GC垃圾回收线程), 系统的后台线程, 可以把它当做用户线程的奴仆\",\"void\",\"setDaemon(boolean on) 将该线程标记为守护线程或用户线程\",\"on - 如果为 true，则将该线程标记为守护线程。\",\"注意:\",\"当正在运行的线程都是守护线程时，Java 虚拟机退出。\",\"该方法必须在启动线程前调用。 (start之前) java.lang.IllegalThreadStateException\",\"package _19thread01.com.cskaoyan._03api; /** * @description: * @author: 景天 * @date: 2022/10/19 15:45 **/ /* 守护线程 */ public class DaemonDemo { public static void main(String[] args) { System.out.println(\\\"main start\\\"); // 创建线程对象 ThreadDaemon t = new ThreadDaemon(); // 把t这个线程设置为守护线程 t.setDaemon(true); // start t.start(); // main 打印3个数 for (int i = 0; i < 3; i++) { System.out.println(Thread.currentThread().getName()+ \\\"----\\\"+i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\\\"main end\\\"); } } class ThreadDaemon extends Thread{ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(getName()+\\\"----\\\"+i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } \"]},\"843\":{\"h\":\"线程中断stop(已过时,了解)\",\"t\":[\"void\",\"stop() 已过时。 该方法具有固有的不安全性\"]},\"844\":{\"h\":\"安全中断线程\",\"t\":[\"案例:\",\"定义一个flag标记, true 是正常状态 false中断\",\"主线程打印3个数 打印1个 休眠1秒 中断子线程\",\"创建子线程 打印10个数 休眠1秒\",\"打印之前判断一下是否中断 如果正常----> 打印数据\",\"如果发生了中断-------> 不在打印, 并且把中断信息保存到log.txt文件中\",\"格式 年月日 时分秒 哪个线程发生了中断\",\"package _19thread01.com.cskaoyan._03api; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.Date; /** * @description: * @author: 景天 * @date: 2022/10/19 16:11 **/ /* 安全的中断线程 案例: 定义一个flag标记, true 是正常状态 false中断 主线程打印3个数 打印1个 休眠1秒 中断子线程 创建子线程 打印10个数 休眠1秒 打印之前判断一下是否中断 如果正常----> 打印数据 如果发生了中断-------> 不在打印, 并且把中断信息保存到log.txt文件中 格式 年月日 时分秒 哪个线程发生了中断 */ public class SecurityStopDemo { public static void main(String[] args) { // 创建线程对象 ThreadStop2 t = new ThreadStop2(); // start启动 t.start(); for (int i = 0; i < 3; i++) { System.out.println(\\\"main----\\\"+i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } // 中断子线程 t.flag = false; } } class ThreadStop2 extends Thread{ // 定义一个标记 boolean flag = true; @Override public void run() { for (int i = 0; i < 10; i++) { // 判断是否发生了中断 // 如果正常 正常打印 if (flag) { System.out.println(getName()+\\\"----\\\"+i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } }else { // 发生了中断 // 把中断信息保存log.txt文件中 // 创建输出流对象 FileWriter fileWriter = null; try { fileWriter = new FileWriter(\\\"log.txt\\\"); // 创建SimpleDataFormat对象 指定格式 SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); String date = sdf.format(new Date()); // write(String s) fileWriter.write(date+getName()+\\\"发生了中断!\\\"); // 格式 年月日 时分秒 哪个线程发生了中断 // flush fileWriter.flush(); } catch (IOException e) { e.printStackTrace(); }finally { if (fileWriter != null) { try { fileWriter.close(); } catch (IOException e) { e.printStackTrace(); } } } } } } } \"]},\"845\":{\"h\":\"线程的几种状态\"},\"846\":{\"h\":\"理论层面的状态\",\"t\":[\"新建\",\"刚new出来的线程对象\",\"就绪\",\"线程执行了start()方法后\",\"执行\",\"拥有CPU的执行权\",\"阻塞\",\"线程会处于阻塞状态\",\"死亡\",\"run方法执行完\"]},\"847\":{\"h\":\"代码层面的状态\",\"t\":[\"NEW 至今尚未启动的线程处于这种状态。\",\"RUNNABLE 正在 Java 虚拟机中执行的线程处于这种状态。\",\"BLOCKED 受阻塞并等待某个监视器锁的线程处于这种状态。\",\"WAITING 无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。\",\"TIMED_WAITING 等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。\",\"TERMINATED 已退出的线程处于这种状态。\"]},\"848\":{\"h\":\"线程状态的转换\",\"t\":[\"image-20221019163422301\"]},\"849\":{\"h\":\"文档示例\",\"t\":[\"image-20221019163830087\"]},\"850\":{\"h\":\"步骤\",\"t\":[\"定义一个类实现Runnable接口\",\"重写run方法\",\"创建子类对象\",\"创建线程对象, 把实现了Runnable接口的子类对象作为参数传递\",\"start方法启动线程\",\"Demo\",\"package _19thread01.com.cskaoyan._04impltwo; /** * @description: * @author: 景天 * @date: 2022/10/19 16:40 **/ /* 多线程的实现方式二: 1. 定义一个类实现Runnable接口 2. 重写run方法 3. 创建子类对象 4. 创建线程对象, 把实现了Runnable接口的子类对象作为参数传递 5. start方法启动线程 */ public class Demo { public static void main(String[] args) { //3. 创建子类对象 MyRunnable myRunnable = new MyRunnable(); // 4. 创建线程对象, 把实现了Runnable接口的子类对象作为参数传递 Thread t = new Thread(myRunnable); // 5. start方法启动线程 t.start(); } } //1. 定义一个类实现Runnable接口 class MyRunnable implements Runnable{ @Override public void run() { // 2. 重写run方法 System.out.println(\\\"子线程执行了!\\\"); } } \",\"其他写法 匿名内部类 lambda\",\"package _20thread02.com.cskaoyan._01impltwo; /** * @description: * @author: 景天 * @date: 2022/10/20 9:28 **/ /* 其他写法 */ public class Demo { public static void main(String[] args) { // 匿名内部类 new Thread(new Runnable() { @Override public void run() { System.out.println(\\\"1111\\\"); } }).start(); // lambda new Thread(()->{ System.out.println(\\\"222222\\\"); }).start(); } } \"]},\"851\":{\"h\":\"为什么Runnable中的run方法会运行在子线程中\",\"t\":[\"class Thread implements Runnable{ // 成员变量 private Runnable target; // 构造方法 Thread(Runnable target){ init(target); } void init(Runnable target){ // 左边是成员变量 右边是传过来的参数 给成员变量赋值 this.target = target; } void run(){ if(target != null){ target.run() } } } \",\"步骤上, 方式一4步, 方式二是5步\",\"方式一通过继承的方式(单继承的局限性),方式二通过实现接口的方式\",\"方式二把线程跟线程上要做的事情区分开来(执行路径,跟执行路径上的任务区分开来) 解耦\",\"方式二便于数据共享\",\"多线程仿真如下场景： 假设A电影院正在上映某电影，该电影有100张电影票可供出售，现在假设有3个窗口售票。请设计程序模拟窗口售票的场景。\",\"分析： 3个窗口售票，互不影响，同时进行。 -----> 多线程 3个线程 3个窗口共同出售这100张电影票 -------> 多线程共享数据\",\"package _20thread02.com.cskaoyan._02datasecurity; /** * @description: * @author: 景天 * @date: 2022/10/20 9:55 **/ /* 多线程仿真如下场景： 假设A电影院正在上映某电影，该电影有100张电影票可供出售，现在假设有3个窗口售票。请设计程序模拟窗口售票的场景。 分析： 3个窗口售票，互不影响，同时进行。 3个窗口共同出售这100张电影票 */ public class Demo2 { public static void main(String[] args) { SellWindow2 myRunnable = new SellWindow2(); // 创建3个线程 并启动 Thread t1 = new Thread(myRunnable); Thread t2 = new Thread(myRunnable); Thread t3 = new Thread(myRunnable); t1.setName(\\\"A窗口\\\"); t2.setName(\\\"B窗口\\\"); t3.setName(\\\"C窗口\\\"); // start t1.start(); t2.start(); t3.start(); } } // 方式二模拟 class SellWindow2 implements Runnable{ // 定义成员变量 int tickets = 100; //run @Override public void run() { // 卖票 while (true) { // 分析 重复的票 // 假设ABC3个线程 // 假设A抢到了CPU的执行权 tickets = 100 // 假设B抢到了CPU的执行权 tickets = 100 // C抢到了CPU的执行权 tickets = 100 // 分析不存在的票 // 假设ABC3个线程 // 假设A抢到了CPU的执行权 tickets = 1 // 假设B抢到了CPU的执行权 tickets = 1 // 假设C抢到了CPU的执行权 tickets = 1 // 判断一下 >0 允许卖 if (tickets > 0) { // A进来 睡觉 // B进来 睡觉 // C进来 睡觉 // 模拟网络延时 try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\\\"卖了第\\\"+ (tickets -- ) + \\\"票\\\"); // tickets -- 分为几步? // 1.取值 2.-1 3.重新赋值 // 假设A睡醒 取值100 没来及-1 被抢走了执行权 // B抢到了 取值100 没来及-1 被抢走了执行权 // C抢到了 取值100 // 分析不存在的情况 // 假设A睡醒 A打印 A窗口卖了第1张票 还剩0张 // 假设B睡醒 B窗口卖了第0张票 还剩-1张 // 假设C睡醒 C窗口卖了第-1张票 还剩-2张 } } } } \"]},\"852\":{\"h\":\"造成的现象\",\"t\":[\"出现重复的票\",\"image-20221020100918897\",\"出现不存在的票\",\"image-20221020101103507\"]},\"853\":{\"h\":\"产生原因\",\"t\":[\"多线程的运行环境(需求)\",\"多线程共享数据(需求)\",\"存在非原子操作 \",\"原子操作: 一个不可分割的操作(一个操作要么一次执行完, 要么不执行)\",\"思路: 由产生的原因入手\",\"需求无法更改\",\"只能改非原子操作\",\"引入锁的概念\",\"image-20221020110451908\"]},\"854\":{\"h\":\"synchronized\"},\"855\":{\"h\":\"同步代码块\",\"t\":[\"同步代码块的锁对象(对象 , 用来充当锁的角色)\",\"可以是任意的对象, 但是要保证是同一个\",\"synchronized(锁对象){ // 对共享数据的访问操作 } \",\"package _20thread02.com.cskaoyan._03sync; /** * @description: * @author: 景天 * @date: 2022/10/20 11:07 **/ /* 同步代码块 */ public class Demo { public static void main(String[] args) { SellWindow myRunnable = new SellWindow(); // 创建3个线程 并启动 Thread t1 = new Thread(myRunnable); Thread t2 = new Thread(myRunnable); Thread t3 = new Thread(myRunnable); t1.setName(\\\"A窗口\\\"); t2.setName(\\\"B窗口\\\"); t3.setName(\\\"C窗口\\\"); // start t1.start(); t2.start(); t3.start(); } } class SellWindow implements Runnable{ // 定义成员变量 int tickets = 100; // 定义一把锁 //A obj = new A(); Object obj = new Object(); //run @Override public void run() { // 卖票 while (true) { // 锁对象是谁? synchronized (obj) { // 对共享数据的访问操作 if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\\\"卖了第\\\"+ (tickets -- ) + \\\"票\\\"); } } } } } class A{} \"]},\"856\":{\"h\":\"同步方法\",\"t\":[\"同步方法的锁对象是this\",\"package _20thread02.com.cskaoyan._03sync; /** * @description: * @author: 景天 * @date: 2022/10/20 11:07 **/ /* 同步方法 */ public class Demo2 { public static void main(String[] args) { SellWindow2 myRunnable = new SellWindow2(); // 创建3个线程 并启动 Thread t1 = new Thread(myRunnable); Thread t2 = new Thread(myRunnable); Thread t3 = new Thread(myRunnable); t1.setName(\\\"A窗口\\\"); t2.setName(\\\"B窗口\\\"); t3.setName(\\\"C窗口\\\"); // start t1.start(); t2.start(); t3.start(); } } class SellWindow2 implements Runnable { // 定义成员变量 int tickets = 100; // 定义一把锁 //Object obj = new Object(); //B obj = new B(); int i = 0; //run @Override public void run() { // 卖票 while (true) { if (i % 2 == 0) { synchronized (this) { // 对共享数据的访问操作 if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \\\"卖了第\\\" + (tickets--) + \\\"票\\\"); } } } else { sell(); } i++; } } private synchronized void sell() { // 对共享数据的访问操作 if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \\\"卖了第\\\" + (tickets--) + \\\"票\\\"); } } } class B{} \"]},\"857\":{\"h\":\"静态同步方法\",\"t\":[\"静态同步方法的锁对象是字节码文件对象(Class对象)\",\"package _20thread02.com.cskaoyan._03sync; /** * @description: * @author: 景天 * @date: 2022/10/20 11:07 **/ /* 静态同步方法 */ public class Demo3 { public static void main(String[] args) { SellWindow3 myRunnable = new SellWindow3(); // 创建3个线程 并启动 Thread t1 = new Thread(myRunnable); Thread t2 = new Thread(myRunnable); Thread t3 = new Thread(myRunnable); t1.setName(\\\"A窗口\\\"); t2.setName(\\\"B窗口\\\"); t3.setName(\\\"C窗口\\\"); // start t1.start(); t2.start(); t3.start(); } } class SellWindow3 implements Runnable { // 定义成员变量 static int tickets = 100; // 定义一把锁 Object obj = new Object(); //B obj = new B(); int i = 0; //run @Override public void run() { // 卖票 while (true) { if (i % 2 == 0) { synchronized (SellWindow3.class) { // 静态的同步方法的锁对象是字节码文件对象 Class对象 // 对象.getClass() // 类名.class属性 // Class.forName(String 全类名) // 对共享数据的访问操作 if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \\\"卖了第\\\" + (tickets--) + \\\"票\\\"); } } } else { sell(); } i++; } } private static synchronized void sell() { // 对共享数据的访问操作 if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \\\"卖了第\\\" + (tickets--) + \\\"票\\\"); } } } \"]},\"858\":{\"h\":\"synchronized的细节\"},\"859\":{\"h\":\"执行流程\",\"t\":[\"AB2个线程访问sync代码块中的内容\",\"假设A线程抢到了CPU的执行权, 看一下锁对象是否可用, 可用, A线程就持有了锁对象, A线程访问同步代码块的内容\",\"A还没有访问结束,发生了线程切换,B抢到了执行权,B也想访问同步代码块中的内容, 看一下锁是否可用, 不可用, 对于B线程来说, 只能在sync外面等待, B就处于同步阻塞状态\",\"A再次抢到执行权. A接着执行,访问结束, 退出sync代码块, A释放锁\",\"B线程就可以获取锁, 访问sync代码块中的内容.\",\"package _20thread02.com.cskaoyan._03sync; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/20 11:38 **/ /* synchronized执行流程 */ public class Demo4 { // 定义一把锁 public static final Object OBJECT = new Object(); public static void main(String[] args) { // 创建并启动一个线程 new Thread(()->{ // sync synchronized (OBJECT) { System.out.println(\\\"A进入sync\\\"); // 休眠 try { TimeUnit.SECONDS.sleep(10); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"A退出sync\\\"); } },\\\"A\\\").start(); // main睡眠1秒 try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 创建并启动一个线程 new Thread(()->{ System.out.println(\\\"B线程执行了!\\\"); // sync synchronized (OBJECT) { System.out.println(\\\"B进入sync!\\\"); } },\\\"B\\\").start(); } } \"]},\"860\":{\"h\":\"出现异常会释放锁\",\"t\":[\"package _20thread02.com.cskaoyan._03sync; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/20 14:29 **/ /* 验证异常会释放锁 */ public class Demo5 { // 定义一把锁 public static final Object OBJECT = new Object(); public static int count = 0; public static void main(String[] args) { // 创建并启动一个线程 new Thread(()->{ // sync synchronized (OBJECT) { System.out.println(\\\"A线程进入sync\\\"); while (true) { count++; try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } if (count == 5) { System.out.println(count); // 人为制造异常 System.out.println(10/0); } } } },\\\"A\\\").start(); // sleep try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 创建并启动一个线程 new Thread(()->{ System.out.println(\\\"B线程已经执行了\\\"); // sync synchronized (OBJECT) { System.out.println(\\\"B线程进入sync\\\"); } },\\\"B\\\").start(); } } \"]},\"861\":{\"h\":\"1个对象的内存布局\",\"t\":[\"image-20221020144401249\"]},\"862\":{\"h\":\"2条字节码指令(monitorenter/monitorexit)\",\"t\":[\"image-20221020145322378\",\"image-20221020145617634\"]},\"863\":{\"h\":\"Lock\",\"t\":[\"基本使用\",\"image-20221020145930843\",\"void\",\"lock() 获取锁。\",\"void\",\"unlock() 释放锁\"]},\"864\":{\"h\":\"ReentrantLock可重入锁\",\"t\":[\"一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。\",\"package _20thread02.com.cskaoyan._04lock; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * @description: * @author: 景天 * @date: 2022/10/20 15:02 **/ /* Lock的使用 */ public class Demo { public static void main(String[] args) { SellWindow myRunnable = new SellWindow(); // 创建3个线程 并启动 Thread t1 = new Thread(myRunnable); Thread t2 = new Thread(myRunnable); Thread t3 = new Thread(myRunnable); t1.setName(\\\"A窗口\\\"); t2.setName(\\\"B窗口\\\"); t3.setName(\\\"C窗口\\\"); // start t1.start(); t2.start(); t3.start(); } } class SellWindow implements Runnable{ // 定义成员变量 int tickets = 100; // 定义一把锁 Lock lock = new ReentrantLock(); //run @Override public void run() { // 卖票 while (true) { // 加锁, 获取锁 lock.lock(); try { if (tickets > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\\\"卖了第\\\"+ (tickets -- ) + \\\"票\\\"); } }finally { // 释放锁 lock.unlock(); } } } } \",\"synchronized VS Lock\",\"synchronized是关键字, Lock是个接口\",\"synchronized是一把隐式的锁, 加锁和释放锁是由jvm自动完成的. Lock它是一把真正的(显式的)锁, 我们能看到加锁跟释放锁的过程(lock() , unlock())\"]},\"865\":{\"h\":\"什么是死锁\",\"t\":[\"2个或以上线程因为争抢资源而造成的互相等待的现象\",\"image-20221020151428459\"]},\"866\":{\"h\":\"死锁产生的场景\",\"t\":[\"一般出现在同步代码块嵌套\",\"synchronized(objA){ synchronized(objB){ } } \",\"package _20thread02.com.cskaoyan._05dielock; /** * @description: * @author: 景天 * @date: 2022/10/20 15:17 **/ public class Demo { public static void main(String[] args) { // 创建并启动2个线程 new Thread(new DieLock(true)).start(); new Thread(new DieLock(false)).start(); } } //定义一个锁类 class MyLock{ public static final Object objA = new Object(); public static final Object objB = new Object(); } // 死锁类 class DieLock implements Runnable{ boolean flag; public DieLock(boolean flag) { this.flag = flag; } @Override public void run() { // 同步代码块嵌套 if (flag) { synchronized (MyLock.objA) { // 假设A线程先执行 A线程获取A锁 System.out.println(\\\"if A\\\"); synchronized (MyLock.objB) { System.out.println(\\\"if B\\\"); } } }else{ synchronized (MyLock.objB) { // B线程进来 获取了B锁 System.out.println(\\\"else B\\\"); synchronized (MyLock.objA) { System.out.println(\\\"else A\\\"); } } } } } \"]},\"867\":{\"h\":\"怎么解决死锁\",\"t\":[\"更改加锁的顺序\",\"package _20thread02.com.cskaoyan._05dielock; /** * @description: * @author: 景天 * @date: 2022/10/20 15:17 **/ public class Demo2 { public static void main(String[] args) { // 创建并启动2个线程 new Thread(new DieLock2(true)).start(); new Thread(new DieLock2(false)).start(); } } //定义一个锁类 class MyLock2{ public static final Object objA = new Object(); public static final Object objB = new Object(); } // 死锁类 class DieLock2 implements Runnable{ boolean flag; public DieLock2(boolean flag) { this.flag = flag; } @Override public void run() { // 同步代码块嵌套 if (flag) { synchronized (MyLock2.objA) { // 假设A线程先执行 A线程获取A锁 System.out.println(\\\"if A\\\"); synchronized (MyLock2.objB) { System.out.println(\\\"if B\\\"); } } }else{ synchronized (MyLock2.objA) { // B线程进来 获取了B锁 System.out.println(\\\"else B\\\"); synchronized (MyLock2.objB) { System.out.println(\\\"else A\\\"); } } } } } \",\"再加一把锁, 变成原子操作\",\"package _20thread02.com.cskaoyan._05dielock; /** * @description: * @author: 景天 * @date: 2022/10/20 15:17 **/ public class Demo3 { public static void main(String[] args) { // 创建并启动2个线程 new Thread(new DieLock3(true)).start(); new Thread(new DieLock3(false)).start(); } } //定义一个锁类 class MyLock3{ public static final Object objA = new Object(); public static final Object objB = new Object(); // 新加的锁 public static final Object objC = new Object(); } // 死锁类 class DieLock3 implements Runnable{ boolean flag; public DieLock3(boolean flag) { this.flag = flag; } @Override public void run() { // 同步代码块嵌套 if (flag) { synchronized (MyLock3.objC) { synchronized (MyLock3.objA) { // 假设A线程先执行 A线程获取A锁 System.out.println(\\\"if A\\\"); synchronized (MyLock3.objB) { System.out.println(\\\"if B\\\"); } } } }else{ synchronized (MyLock3.objC) { synchronized (MyLock3.objB) { // B线程进来 获取了B锁 System.out.println(\\\"else B\\\"); synchronized (MyLock3.objA) { System.out.println(\\\"else A\\\"); } } } } } } \",\"image-20221020155255443\",\"V1 使用同步代码块\",\"package _20thread02.com.cskaoyan._07producer_consumer.v1; /** * @description: * @author: 景天 * @date: 2022/10/20 17:22 **/ // 定义蒸笼类 public class Box { // 定义成员变量 Food food; // 定义方法 // 生产包子的方法 只有生产者才执行 public void setFood(Food newFood) { // 表示放入包子 food = newFood; System.out.println(Thread.currentThread().getName() + \\\"生产了\\\" + food); } // 吃包子的方法 只有消费者执行 public void eatFood() { System.out.println(Thread.currentThread().getName() + \\\"吃了\\\" + food); food = null; } // 判断蒸笼状态的方法 public boolean isEmpty() { return food == null; // true ---> 空 // false ---> 非空 } } // 定义包子类 class Food{ // 成员变量 String name; int price; public Food(String name, int price) { this.name = name; this.price = price; } @Override public String toString() { return \\\"Food{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", price=\\\" + price + '}'; } } package _20thread02.com.cskaoyan._07producer_consumer.v1; /** * @description: 消费者任务 * @author: 景天 * @date: 2022/10/20 17:38 **/ public class ConsumerTask implements Runnable { // 成员变量 Box box; public ConsumerTask(Box box) { this.box = box; } @Override public void run() { // 吃包子 while (true) { synchronized (box) { //判断蒸笼状态 if (box.isEmpty()) { // 如果蒸笼为空 , // 没有包子阻止自己吃包子 // wait try { box.wait(); } catch (InterruptedException e) { e.printStackTrace(); } }else { // 如果蒸笼非空 , 有包子 // 消费吃包子通知生产者再生产 box.eatFood(); // notify box.notify(); } } } } } package _20thread02.com.cskaoyan._07producer_consumer.v1; import java.util.Random; /** * @description: 生产任务 * @author: 景天 * @date: 2022/10/20 17:29 **/ public class ProducerTask implements Runnable{ // 成员变量 Box box; Food[] foods = {new Food(\\\"韭菜鸡蛋\\\", 1), new Food(\\\"生蚝包\\\", 10), new Food(\\\"羊腰子包\\\", 20)}; Random random = new Random(); public ProducerTask(Box box) { this.box = box; } @Override public void run() { // 生产包子 while (true) { synchronized (box) { // 判断蒸笼的状态 if (box.isEmpty()) { // 如果蒸笼为空, 没有包子生产包子 放进去 int index = random.nextInt(foods.length); box.setFood(foods[index]); // 通知消费者吃 notify box.notify(); }else{ // 如果蒸笼非空, 有包子 生产者不能生产 // 阻止自己生产 wait try { box.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } } } } } package _20thread02.com.cskaoyan._07producer_consumer.v1; /** * @description: * @author: 景天 * @date: 2022/10/20 17:22 **/ public class Demo { public static void main(String[] args) { // 创建蒸笼对象 Box box = new Box(); // 创建生产者任务 ProducerTask producerTask = new ProducerTask(box); // 创建消费者任务 ConsumerTask consumerTask = new ConsumerTask(box); // 创建生产者线程 Thread t1 = new Thread(producerTask); // 创建消费者线程 Thread t2 = new Thread(consumerTask); t1.setName(\\\"生产者\\\"); t2.setName(\\\"消费者\\\"); // 启动 t1.start(); t2.start(); } } \",\"V2 使用同步方法\",\"package _20thread02.com.cskaoyan._07producer_consumer.v2; /** * @description: * @author: 景天 * @date: 2022/10/20 17:45 **/ public class Box { Food food; // 生产包子的方法 生产者执行 public synchronized void setFood(Food newFood) { // 判断蒸笼的状态 if (food == null) { // 如果蒸笼为空, // 没有包子生产包子 放进去通知消费者吃 food = newFood; System.out.println(Thread.currentThread().getName()+ \\\"生产了\\\"+food); // notify this.notify(); }else{ // 如果蒸笼非空, 有包子生产者不能生产 阻止自己生产 // wait try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } } // 吃包子的方法 消费者执行 public synchronized void eatFood() { // 判断蒸笼状态 if (food == null) { // 如果蒸笼为空 , 没有包子阻止自己吃包子 // wait try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } }else { // 如果蒸笼非空 , 有包子 // 消费吃包子通知生产者再生产 System.out.println(Thread.currentThread().getName()+ \\\"吃了\\\"+food); food = null; // notify this.notify(); } } } class Food{ String name; int price; @Override public String toString() { return \\\"Food{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", price=\\\" + price + '}'; } public Food(String name, int price) { this.name = name; this.price = price; } } package _20thread02.com.cskaoyan._07producer_consumer.v2; /** * @description: * @author: 景天 * @date: 2022/10/20 17:46 **/ public class ConsumerTask implements Runnable { Box box; public ConsumerTask(Box box) { this.box = box; } @Override public void run() { // 只吃包子 while (true) { box.eatFood(); } } } package _20thread02.com.cskaoyan._07producer_consumer.v2; import java.util.Random; /** * @description: * @author: 景天 * @date: 2022/10/20 17:46 **/ public class ProducerTask implements Runnable { Box box; public ProducerTask(Box box) { this.box = box; } Food[] foods = {new Food(\\\"豆沙包\\\", 1), new Food(\\\"小笼包\\\", 6), new Food(\\\"狗不理\\\", 40)}; Random random = new Random(); @Override public void run() { // 只做一件事 生产包子 while (true) { int index = random.nextInt(foods.length); box.setFood(foods[index]); } } } package _20thread02.com.cskaoyan._07producer_consumer.v2; /** * @description: Demo * @author: 景天 * @date: 2022/10/20 17:45 **/ public class Demo { public static void main(String[] args) { // 创建蒸笼对象 Box box = new Box(); // 创建生产者任务 ProducerTask producerTask = new ProducerTask(box); // 创建消费者任务 ConsumerTask consumerTask = new ConsumerTask(box); // 创建生产者线程 Thread t1 = new Thread(producerTask); // 创建消费者线程 Thread t2 = new Thread(consumerTask); t1.setName(\\\"生产者\\\"); t2.setName(\\\"消费者\\\"); // 启动 t1.start(); t2.start(); } } \",\"当有多个生产 多个消费者的时候, 出现\\\"卡顿\\\"的现象, 为什么?\",\"c1,c2,p1,p2 都start c1抢到 > 进入sync , 空的, wait ,释放锁 c2抢到 > 进入sync,空的, wait , 释放锁 p1抢到 > 进入sync, 空的可以生产, notify唤醒c1 , 退出sync,释放锁 p1又抢到 > 进入sync, 非空, wait, 释放锁 p2抢到> 进入sync, 非空, wait 释放锁 c1抢到 > 进入sync, 非空,吃, notify 唤醒c2 ,退出sync 释放锁 c2 > 进入 sync, 空, wait 释放锁 c1 > 进入 sync, 空 , wait 到此 所有线程都wait 怎么解决? notifyAll \"]},\"868\":{\"h\":\"wait与notify机制\",\"t\":[\"wait与notify机制\",\"拥有相同锁的线程才可以实现wait/notify机 制，所以后面的描述中都是假定操作同一个锁。\",\"wait()方法是Object类的方法，它的作用是使当前执行wait()方法的线程等待，在wait()所在的 代码行处暂停执行，并释放锁，直到接到通知被唤醒。在调用wait()之前，线程必须获得锁对象，即只能在同步方法或同步块中调用wait()方法。如果调用wait()时没有持有适当的锁，则抛出 IllegalMonitorStateException，它是 RuntimeException的一个子类，因此不需要try-catch语句捕捉异常。\",\"notify()方法要在同步方法或同步块中调用， 即在调用前，线程必须获得锁对象，如果调用notify() 时没有持有适当的锁，则会抛IllegalMonitorStateException。该方法用来通知那 些可能等待该锁对象的其他线程，如果有多个线程等待，则唤醒其中随机一个线程，并使该线程重新获取锁。\",\"需要说明的是，执行notify()方法后，当 前线程不会马上释放该锁，因wait方法而阻塞的线程也 并不能马上获取该对象锁，要等到执行notify()方 法的线程将程序执行完，也就是退出synchronized 同步区域后，当前线程才会释放锁，而处于阻塞状 态的线程才可以获取该对象锁。当第一个获得了 该对象锁的wait线程运行完毕后，它会释放该对 象锁，此时如果没有再次使用notify语句，那么其 他呈阻塞状态的线程因为没有得到通知，会继续 处于阻塞状态。\",\"总结：wait()方法使线程暂停运行，而notify() 方法通知暂停的线程继续运行\"]},\"869\":{\"h\":\"wait()\",\"t\":[\" 1. 阻塞功能： 当在某线程中，对象上.wait(), 在哪个线程中调用wait(), 导致哪个线程处于阻塞状态 当某线程，因为调用执行某对象的wait(),而处于阻塞状态，我们说，该线程在该对象上阻塞。 2. 唤醒条件 当某线程，因为某对象A的wait(), 而处于阻塞状态时，如果要唤醒该线程，只能在其他线程中， 再同一个对象(即对象A)上调用其notify()或notifyAll() 即在线程的阻塞对象上，调用notify或notifyAll方法，才能唤醒，在该对象上阻塞的线程 3. 运行条件 当前线程必须拥有此对象监视器。 监视器：指synchronized代码块中的锁对象 即我们只能在，当前线程所持有的synchronized代码块中的，锁对象上调用wait方法， 才能正常执行 如果没有锁对象就会有这样一个异常 IllegalMonitorStateException 4. 执行特征 a.该线程发布(release)对此监视器的所有权 b.等待(阻塞) 注意：Thread的sleep方法，执行的时候： 该线程不丢失任何监视器的所属权 \"]},\"870\":{\"h\":\"执行条件与特点\",\"t\":[\"执行条件\",\"需要锁对象\",\"package _20thread02.com.cskaoyan._06wait_notify; /** * @description: * @author: 景天 * @date: 2022/10/20 16:08 **/ /* 使用条件 */ public class Demo { public static void main(String[] args) { // 对象.wait() Object o = new Object(); try { o.wait(); } catch (InterruptedException e) { e.printStackTrace(); } // java.lang.IllegalMonitorStateException } } \",\"执行特点\",\"package _20thread02.com.cskaoyan._06wait_notify; /** * @description: * @author: 景天 * @date: 2022/10/20 16:08 **/ /* 执行特点 */ public class Demo2 { public static void main(String[] args) { // 对象.wait() Object o = new Object(); synchronized (o) { try { System.out.println(\\\"wait before\\\"); o.wait(); System.out.println(\\\"wait after\\\"); } catch (InterruptedException e) { e.printStackTrace(); } /* 输出结果: wait before main线程处于阻塞状态 想要after打印出来, 必须在别的线程中, 同一个锁对象上调用notify方法唤醒 */ } } } \"]},\"871\":{\"h\":\"验证wait释放锁\",\"t\":[\"package _20thread02.com.cskaoyan._06wait_notify; /** * @description: * @author: 景天 * @date: 2022/10/20 16:14 **/ /* wait方法释放锁 */ public class Demo3 { // 定义一把锁 public static final Object OBJECT = new Object(); public static void main(String[] args) { // 创建并启动一个线程 new Thread(()->{ // sync synchronized (OBJECT) { System.out.println(\\\"A线程进入sync\\\"); try { Thread.sleep(10000); System.out.println(\\\"wait before\\\"); OBJECT.wait(); System.out.println(\\\"wait after\\\"); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"A\\\").start(); // sleep try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 创建并启动一个线程 new Thread(()->{ System.out.println(\\\"B线程已经执行了\\\"); // sync synchronized (OBJECT) { System.out.println(\\\"B线程进入sync!\\\"); } },\\\"B\\\").start(); } } \"]},\"872\":{\"h\":\"wait与notify的基本使用\",\"t\":[\"package _20thread02.com.cskaoyan._06wait_notify; /** * @description: * @author: 景天 * @date: 2022/10/20 16:24 **/ /* wait notify的基本使用 */ public class Demo4 { // 定义一把锁 public static final Object OBJECT = new Object(); public static void main(String[] args) { // 创建并启动一个线程 new Thread(()->{ // sync synchronized (OBJECT) { System.out.println(\\\"A进入sync\\\"); // 调用wait try { Thread.sleep(5000); System.out.println(\\\"wait before\\\"); OBJECT.wait(); System.out.println(\\\"wait after\\\"); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"A\\\").start(); // sleep try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 创建并启动一个线程 new Thread(()->{ System.out.println(\\\"B已经执行了\\\"); // sync synchronized (OBJECT) { System.out.println(\\\"B进入sync\\\"); // 调用notify System.out.println(\\\"notify before\\\"); OBJECT.notify(); System.out.println(\\\"notify after\\\"); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"B\\\").start(); } } \",\"练习\",\"创建2个线程A B\",\"A线程打印1,B线程打印2, A线程打印3, B打印4.... B线程打印100(使用wait notify)\",\"package _20thread02.com.cskaoyan._06wait_notify; /** * @description: * @author: 景天 * @date: 2022/10/20 16:37 **/ /* 练习 创建2个线程A B A线程打印1,B线程打印2, A线程打印3, B打印4.... B线程打印100(使用wait notify) */ public class Ex { // 定义一把锁 public static final Object OBJECT = new Object(); public static void main(String[] args) { // 创建A线程 1 3 5....99 new Thread(()->{ // sync synchronized (OBJECT) { for (int i = 1; i < 100; i+=2) { // 唤醒另一个线程 OBJECT.notify(); // 打印 System.out.println(Thread.currentThread().getName()+ \\\"----\\\"+i); // 阻止自己打印 wait try { OBJECT.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // notify 把对方唤醒 OBJECT.notify(); } },\\\"A\\\").start(); // sleep try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } // 创建B线程 2 4 6.....100 new Thread(()->{ // sync synchronized (OBJECT) { for (int i = 2; i <= 100; i+=2) { // 唤醒另一个线程 OBJECT.notify(); // 打印 System.out.println(Thread.currentThread().getName()+ \\\"----\\\"+i); // 阻止自己打印 wait try { OBJECT.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // notify()唤醒对象 OBJECT.notify(); } },\\\"B\\\").start(); } } \"]},\"873\":{\"h\":\"sleep VS wait\",\"t\":[\"Thread.sleep VS Object.wait() 1. 所属不同： a. sleep定义在Thread类，静态方法 b. wait定义在 Object类中，非静态方法 2. 唤醒条件不同 a. sleep: 休眠时间到 b. wait: 在其他线程中，在同一个锁对象上，调用了notify或notifyAll方法 3. 使用条件不同： a. sleep 没有任何前提条件 b. wait(), 必须当前线程，持有锁对象，锁对象上调用wait() 4. 休眠时，对锁对象的持有，不同：（最最核心的区别） a. 线程因为sleep方法而处于阻塞状态的时候，在阻塞的时候不会放弃对锁的持有 b. 但是wait()方法，会在阻塞的时候，放弃锁对象持有 \"]},\"874\":{\"h\":\"notify()\",\"t\":[\"唤醒在此对象监视器上等待的单个线程。\",\"如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。\",\"选择是任意性的\"]},\"875\":{\"h\":\"notifyAll()\",\"t\":[\"唤醒多个等待的线程\"]},\"876\":{\"h\":\"为什么wait,notify,notifyAll方法不定义在Thread类中?\",\"t\":[\"任意Java对象都能充当锁的角色\"]},\"877\":{\"h\":\"理论层面\",\"t\":[\"image-20221021100134163\"]},\"878\":{\"h\":\"代码层面\",\"t\":[\"image-20221021100731019\"]},\"879\":{\"h\":\"线程池\",\"t\":[\"Thread t = new Thread(); t.start(); Thread t1 = new Thread(); t1.start(); \"]},\"880\":{\"h\":\"3种线程池\",\"t\":[\"Executors: 线程工具类, 负责产生线程池\",\"ExecutorServices: 代表线程池对象\",\"//JDK5提供了一Executors来产生线程池，有如下方法： ExecutorService newCachedThreadPool() // 特点: // 1.会根据需要创建新线程，也可以自动删除，60s处于空闲状态的线程 // 2.线程数量可变，立马执行提交的异步任务（异步任务：在子线程中执行的任务） ExecutorService newFixedThreadPool(int nThreads) // 特点: // 1.线程数量固定 // 2.维护一个无界队列（暂存已提交的来不及执行的任务） // 3.按照任务的提交顺序，将任务执行完毕 ExecutorService newSingleThreadExecutor() // 特点: // 1.单个线程 // 2.维护了一个无界队列（暂存已提交的来不及执行的任务） // 3.按照任务的提交顺序，将任务执行完毕 \",\"线程池的使用\",\"Future<?> submit(Runnable task) Future<T> submit(Callable<T> task) \",\"Future 表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并获取计算的结果。\",\"计算完成后只能使用 get 方法来获取结果，如有必要，计算完成前可以阻塞此方法\",\"Future 用来存储返回值的结果(Callable是带返回值的)\",\"V\",\"get() 如有必要，等待计算完成，然后获取其结果。\",\"Runnable类型的任务\",\"package _21thread03.com.cskaoyan._01threadpool; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * @description: * @author: 景天 * @date: 2022/10/21 10:50 **/ /* 向线程池中提交Runnable类型的任务 */ public class Demo { public static void main(String[] args) { // 创建线程池 ExecutorService pool = Executors.newCachedThreadPool(); // 提交任务 // submit(Runnable task) pool.submit(new RunnableTask()); pool.submit(new RunnableTask()); } } class RunnableTask implements Runnable{ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread().getName()+ \\\"----\\\"+i); } } } \",\"提交Callable类型的任务\",\"package _21thread03.com.cskaoyan._01threadpool; import java.util.concurrent.*; /** * @description: * @author: 景天 * @date: 2022/10/21 10:56 **/ /* 提交Callable类型的任务 */ public class Demo2 { public static void main(String[] args) throws ExecutionException, InterruptedException { // 创建线程池 ExecutorService pool = Executors.newFixedThreadPool(2); // 提交任务 // submit(Callable task) Future<String> future = pool.submit(new CallableTask()); // 接收返回值 // get() System.out.println(\\\"get before\\\"); String s = future.get(); System.out.println(\\\"get after\\\"); System.out.println(s); } } class CallableTask implements Callable<String>{ @Override public String call() throws Exception { for (int i = 0; i < 10; i++) { System.out.println(i); } TimeUnit.SECONDS.sleep(10); return \\\"Call执行结束\\\"; } //@Override //public Object call() throws Exception { // return null; //} } \",\"关闭线程池\",\"void\",\"shutdown() 启动一次顺序关闭，执行以前提交的任务，但不接受新任务。\",\"List<Runnable>\",\"shutdownNow() 试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。\"]},\"881\":{\"h\":\"多线程的实现方式三:实现Callable接口\",\"t\":[\"不借助线程池\",\"需要借助FutureTask\",\"FutureTask = Future + Task\",\"构造方法\",\"FutureTask(Callable<V> callable) 创建一个 FutureTask，一旦运行就执行给定的 Callable。\",\"继承关系\",\"image-20221021110859791\",\"基本使用\",\"package _21thread03.com.cskaoyan._02call; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; /** * @description: * @author: 景天 * @date: 2022/10/21 11:09 **/ /* 使用Callable */ public class Demo { public static void main(String[] args) throws ExecutionException, InterruptedException { // 创建FutureTask对象 FutureTask<String> futureTask = new FutureTask<>(new MyCallable()); // 创建线程对象 Thread t = new Thread(futureTask); // start t.start(); // get() 获取结果 String s = futureTask.get(); System.out.println(s); } } class MyCallable implements Callable<String> { @Override public String call() throws Exception { System.out.println(\\\"call执行了\\\"); return \\\"1234\\\"; } } \",\"练习\",\"创建2个线程,A线程计算1+2+3...+100的结果\",\"B线程计算1+2+3+...200的结果\",\"使用Callable\",\"package _21thread03.com.cskaoyan._02call; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; /** * @description: * @author: 景天 * @date: 2022/10/21 11:15 **/ /* 练习 创建2个线程,A线程计算1+2+3...+100的结果 B线程计算1+2+3+...200的结果 使用Callable */ public class Ex { public static void main(String[] args) throws ExecutionException, InterruptedException { // 创建FutureTask对象 FutureTask<Integer> futureTask1 = new FutureTask<>(new SumTask(100)); FutureTask<Integer> futureTask2 = new FutureTask<>(new SumTask(200)); // 创建线程对象 Thread t1 = new Thread(futureTask1); Thread t2 = new Thread(futureTask2); // start启动 t1.start(); t2.start(); // get方法获取计算的结果 Integer result1 = futureTask1.get(); Integer result2 = futureTask2.get(); System.out.println(\\\"result1 = \\\" + result1); System.out.println(\\\"result2 = \\\" + result2); } } class SumTask implements Callable<Integer> { // 成员变量 int num; public SumTask(int num) { this.num = num; } @Override public Integer call() throws Exception { // 计算 int sum =0; for (int i = 1; i <= num ; i++) { sum+=i; } return sum; } } \",\"Runnable VS Callable\",\"Runnable里是run方法, Callable里是call方法\",\"Runnable没有返回值, Callable有返回值\"]},\"882\":{\"h\":\"定时器与定时任务\"},\"883\":{\"h\":\"定时器Timer\",\"t\":[\"一种工具，线程用其安排以后在后台线程中执行的任务。可安排任务执行一次，或者定期重复执行。\",\"构造方法\",\"Timer() 创建一个新计时器。\",\"调度方法\",\"schedule(TimerTask task, Date time) schedule(TimerTask task, long delay, long period) schedule(TimerTask task, Date firstTime, long period) scheduleAtFixedRate(TimerTask task, long delay, long period) schedule VS scheduleAtFixedRate 区别 追赶特性 \",\"void\",\"cancel() 终止此计时器，丢弃所有当前已安排的任务。\"]},\"884\":{\"h\":\"定时任务TimerTask\",\"t\":[\"public abstract class TimerTask\",\"由 Timer 安排为一次执行或重复执行的任务\",\"如何使用:\",\"定义一个任务继承TimerTask\",\"重写run方法\",\"package _21thread03.com.cskaoyan._03timer; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.TimeUnit; /** * @description: * @author: 景天 * @date: 2022/10/21 11:41 **/ public class Demo { public static void main(String[] args) throws ParseException, InterruptedException { // 创建定时器 Timer timer = new Timer(); // 调度 // schedule(TimerTask task, Date time) SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); String time = \\\"2022-10-21 11:48:00\\\"; Date date = sdf.parse(time); // timer.schedule(new MyTask(), date); //schedule(TimerTask task, long delay, long period) timer.schedule(new MyTask(),5000,3000); //schedule(TimerTask task, Date firstTime, long period) //timer.schedule(new MyTask(), date, 3000); //scheduleAtFixedRate(TimerTask task, long delay, long period) // 取消定时器 TimeUnit.SECONDS.sleep(15); timer.cancel(); } } // 定义一个定时任务 // 继承TimerTask // 重写run class MyTask extends TimerTask{ @Override public void run() { System.out.println(\\\"炸弹爆炸了Boom!\\\"); } } \",\"构造方法私有\",\"提供一个全局的自身的成员变量\",\"提供一个静态的方法获取实例\",\"同步方法\",\"package com.cskaoyan._04singleton; /** * @description: * @author: 景天 * @date: 2023/2/23 15:06 **/ public class Singleton { //2. 提供一个全局的自身的成员变量 private static Singleton instance; // 1. 构造方法私有 private Singleton() { } //3. 提供一个静态的方法获取实例 public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } \",\"double check\",\"package com.cskaoyan._04singleton; /** * @description: * @author: 景天 * @date: 2023/2/23 15:06 **/ public class Singleton2 { //2. 提供一个全局的自身的成员变量 private static Singleton2 instance; // 1. 构造方法私有 private Singleton2() { } //3. 提供一个静态的方法获取实例 public static Singleton2 getInstance() { // double check if (instance == null) { // 假设A线程抢到了CPU执行权 A执行 // A持有锁对象 // 切换B线程 B执行 // B没有锁 进入不了sync synchronized (Singleton2.class) { // A线程进来 // B进来了 // 第二次校验 if (instance == null) { instance = new Singleton2(); } } } return instance; } } \"]},\"885\":{\"h\":\"16. 网络编程\",\"t\":[\"学习目标:\",\"掌握UDP编程\",\"掌握TCP编程\",\"所谓的网络编程，就是实现互联网络中的不同计算机上运行程序间的数据交换。Java网络编程，自然就是实现两个Java进程之间的数据交换。（启动一个main方法就是启动一个Java进程）\",\"对于Java程序员而言，日常工作几乎不会直接涉及到底层网络协议和实现细节，网络编程的原理无论是出于面试还是实际开发的需求，都谈不上重要知识点。所以本章节的内容以实现功能为主，无意讲太多计算机网络的基础知识和概念。甚至，我会尽量排除这些知识和概念，我们一起来专注于Java代码本身。\",\"对于实现Java网络编程，我们仅需要知道，两台不同计算机上的进程实现通信交互数据的条件，一般我们把这个概念称之为**“网络通信三要素”**。\",\"这三个要素是：\",\"IP地址（InetAddress）： 是计算机网络中主机的唯一标识，可以用来唯一确定一台主机。比如在一个局域网下，会给每台计算机分配一个IP地址，这个IP地址指向唯一的一台主机。\",\"端口号（port）：光有IP地址确定主机还不够，因为网络编程实现的是两个进程间的通信。端口号用来在网络编程中唯一确定一个（Java）进程。\",\"传输协议（protocol）：有了IP地址和端口号，就可以确定进行通信的主机和进程了。现在只需要双方都遵循一定的通信规则，就可以实现通讯了。这就是传输协议。常见的传输协议是TCP和UDP。\",\"举个例子：\",\"我想找一个人聊天\",\"第一个条件：要先找到这个人（IP地址）\",\"第二个条件：这个人要能正常听到我说话，耳朵。（端口号）\",\"第三个条件：对方只能听懂汉语，那我就必须说汉语。（传输协议）\",\"于是对于两台计算机的一次数据传输通信，就可以大致的、通俗的做以下描述：\",\"A主机作为发送端首先要明确接收端的IP地址和端口号，其上的一个进程（比如Java进程）确认好要传输的数据，然后根据传输协议的不同，选择不同的方式进行传输。\",\"在这里，我们就具体使用两种不同的传输协议来讲解Java网络编程，它们就是：\",\"UDP协议，该协议进行数据传输是一种面向无连接的、不可靠的，但效率更高的传输方式。它的最大特点是，要求传输的过程中将数据封装成数据包然后进行传输。\",\"TCP协议，该协议进行数据传输是一种面向连接的、稳定可靠的，但效率稍低的传输方式。它的最大特点是，需要先建立连接再进行传输，并且传输的过程通过IO流的形式出现（所以TCP网络编程需要使用Java IO）。\",\"image-20221021152055559\"]},\"886\":{\"h\":\"传输原理\",\"t\":[\"image-20221021152154651\"]},\"887\":{\"h\":\"发送端步骤\",\"t\":[\"创建发送端的socket对象\",\"把要发送的数据封装成数据报包\",\"send方法发送数据报包\",\"释放资源close\"]},\"888\":{\"h\":\"接收端步骤\",\"t\":[\"创建接收端的socket对象\",\"创建用于接收的数据报包\",\"receive方法接收数据\",\"解析数据报包\",\"释放资源close\"]},\"889\":{\"h\":\"DatagramSocket\",\"t\":[\"此类表示用来发送和接收数据报包的套接字。\",\"构造方法\",\"DatagramSocket(int port) 创建数据报套接字并将其绑定到本地主机上的指定端口。\",\"成员方法\",\"void\",\"receive(DatagramPacket p) 从此套接字接收数据报包。\",\"void\",\"send(DatagramPacket p) 从此套接字发送数据报包。\"]},\"890\":{\"h\":\"DatagramPacket\",\"t\":[\"此类表示数据报包。\",\"构造方法\",\"用于发送的\",\"DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port) 构造数据报包，用来将长度为 length 偏移量为 offset 的包发送到指定主机上的指定端口号 \",\"用于接收的\",\"DatagramPacket(byte[] buf, int offset, int length) 构造 DatagramPacket，用来接收长度为 length 的包，在缓冲区中指定了偏移量。 \",\"成员方法\",\"byte[]\",\"getData() 返回数据缓冲区。\",\"int\",\"getLength() 返回将要发送或接收到的数据的长度。\",\"int\",\"getOffset() 返回将要发送或接收到的数据的偏移量。\"]},\"891\":{\"h\":\"案例\"},\"892\":{\"h\":\"v1 发送端发送消息,接收端接收并打印\",\"t\":[\"package _22network.com.cskaoyan.udp.v1; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; /** * @description: 接收端 * @author: 景天 * @date: 2022/10/21 15:50 **/ public class Receiver { public static void main(String[] args) throws IOException { // - 创建接收端的socket对象 DatagramSocket datagramSocket = new DatagramSocket(9999); //- 创建用于接收的数据报包 byte[] bytes = new byte[1024]; // DatagramPacket(byte[] buf, int offset, int length) // 构造 DatagramPacket，用来接收长度为 length 的包，在缓冲区中指定了偏移量。 DatagramPacket receivePacket = new DatagramPacket(bytes, 0, bytes.length); //- receive方法接收数据 System.out.println(\\\"receive before\\\"); datagramSocket.receive(receivePacket); System.out.println(\\\"receive after\\\"); //- 解析数据报包 // | byte[] | getData() 返回数据缓冲区。 | //| int | getLength() 返回将要发送或接收到的数据的长度。 | //| int | getOffset() 返回将要发送或接收到的数据的偏移量。 | byte[] data = receivePacket.getData(); int offset = receivePacket.getOffset(); int length = receivePacket.getLength(); String s = new String(data, offset, length); System.out.println(\\\"接收到了:\\\" + s); //- 释放资源close datagramSocket.close(); } } package _22network.com.cskaoyan.udp.v1; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; /** * @description: 发送端 * @author: 景天 * @date: 2022/10/21 15:50 **/ /* v1 发送端发送消息,接收端接收并打印 */ public class Sender { public static void main(String[] args) throws IOException { // - 创建发送端的socket对象 //DatagramSocket(int port) // 创建数据报套接字并将其绑定到本地主机上的指定端口。 DatagramSocket datagramSocket = new DatagramSocket(8888); //- 把要发送的数据封装成数据报包 String s = \\\"hello udp\\\"; byte[] bytes = s.getBytes(); InetAddress targetIP = InetAddress.getByName(\\\"127.0.0.1\\\"); int port = 9999; // DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port) // 构造数据报包，用来将长度为 length 偏移量为 offset 的包发送到指定主机上的指定端口号 DatagramPacket sendPacket = new DatagramPacket(bytes, 0, bytes.length, targetIP, port); //- send方法发送数据报包 datagramSocket.send(sendPacket); //- 释放资源close datagramSocket.close(); } } \"]},\"893\":{\"h\":\"v2 使用工具类优化v1\",\"t\":[\"package utils; import java.net.DatagramPacket; import java.net.InetAddress; import java.net.UnknownHostException; /** * @description: * @author: 景天 * @date: 2022/10/21 16:02 **/ public class NetworkUtils { // 用于获取发送的数据报包 public static DatagramPacket getSendPacket(String msg,String ip,int port) throws UnknownHostException { // 把数据封装成包 byte[] bytes = msg.getBytes(); InetAddress targetIP = InetAddress.getByName(ip); // 创建用于发送的数据报包 DatagramPacket sendPacket = new DatagramPacket(bytes, 0, bytes.length, targetIP, port); //最终 return 装满了数据的一个包 return sendPacket; } // 用于获取接收的数据报包 public static DatagramPacket getReceivePacket() { byte[] bytes = new byte[1024]; DatagramPacket receivePacket = new DatagramPacket(bytes, 0, bytes.length); // return 一个空的数据报包 return receivePacket; } // 用于解析数据报包的方法 public static String parseMsg(DatagramPacket receivePacket) { byte[] data = receivePacket.getData(); int offset = receivePacket.getOffset(); int length = receivePacket.getLength(); String s = new String(data, offset, length); // 最终返回包里的数据 String return s; } } \"]},\"894\":{\"h\":\"v3 发送端接收端相互发送\",\"t\":[\"package _22network.com.cskaoyan.udp.v3; import utils.NetworkUtils; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.util.Scanner; /** * @description: * @author: 景天 * @date: 2022/10/21 16:26 **/ public class Receiver { public static void main(String[] args) throws IOException { // 创建接收端的socket对象 DatagramSocket datagramSocket = new DatagramSocket(9999); // 创建Scanner对象 Scanner scanner = new Scanner(System.in); // while while (true) { // 接收逻辑 // 创建用于接收的数据报包 DatagramPacket receivePacket = NetworkUtils.getReceivePacket(); // receive datagramSocket.receive(receivePacket); //解析 String msg = NetworkUtils.parseMsg(receivePacket); // 打印 System.out.println(\\\"接收到了来自:\\\"+receivePacket.getSocketAddress()+ \\\"的消息: \\\" +msg); // 发送逻辑 // 接收键盘数据 String s = scanner.nextLine(); // 把要发送的数据封装成数据报包 DatagramPacket sendPacket = NetworkUtils.getSendPacket(s, \\\"127.0.0.1\\\", 8888); // send datagramSocket.send(sendPacket); } } } package _22network.com.cskaoyan.udp.v3; import utils.NetworkUtils; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.util.Scanner; /** * @description: 发送端 * @author: 景天 * @date: 2022/10/21 16:20 **/ /* v3 发送端接收端相互发送 */ public class Sender { public static void main(String[] args) throws IOException { // 创建发送端的socket对象 DatagramSocket datagramSocket = new DatagramSocket(8888); // 创建scanner对象 Scanner scanner = new Scanner(System.in); // while循环 while (true) { // 发送逻辑 // 先接收键盘数据 String s = scanner.nextLine(); // 把要发送的数据封装成数据报包 DatagramPacket sendPacket = NetworkUtils.getSendPacket(s, \\\"127.0.0.1\\\", 9999); // send datagramSocket.send(sendPacket); // 接收逻辑 // 创建用于接收的数据报包 DatagramPacket receivePacket = NetworkUtils.getReceivePacket(); // receive接收 datagramSocket.receive(receivePacket); // 解析 String msg = NetworkUtils.parseMsg(receivePacket); // 打印 System.out.println(\\\"接收到了来自:\\\"+receivePacket.getSocketAddress()+ \\\"的消息: \\\" +msg); } } } \"]},\"895\":{\"h\":\"v4 使用多线程优化v3\",\"t\":[\"image-20221021164014788\",\"思路:\",\"定义发送任务 SendTask 专门用来发送消息\",\"定义成员变量\",\"DatagramSocket datagramSocket;\",\"String ip;\",\"int port;\",\"定义接收任务 receiveTask 专门用来接收消息\",\"定义成员变量\",\"DatagramSocket datagramSocket;\",\"OnePerson:\",\"创建用于发送的线程\",\"创建用于接收的线程\",\"AnotherPerson:\",\"创建用于发送的线程\",\"创建用于接收的线程\",\"package _22network.com.cskaoyan.udp.v4; import utils.NetworkUtils; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; /** * @description: 接收任务 * @author: 景天 * @date: 2022/10/21 16:49 **/ public class ReceiveTask implements Runnable { // 定义成员变量 DatagramSocket datagramSocket; public ReceiveTask(DatagramSocket datagramSocket) { this.datagramSocket = datagramSocket; } @Override public void run() { // 只接收消息 while (true) { // 创建用于接收的数据报包 DatagramPacket receivePacket = NetworkUtils.getReceivePacket(); // receive接收 try { datagramSocket.receive(receivePacket); // 解析 String msg = NetworkUtils.parseMsg(receivePacket); // 打印 System.out.println(\\\"接收到了来自:\\\"+receivePacket.getSocketAddress()+ \\\"的消息: \\\" + msg); } catch (IOException e) { e.printStackTrace(); } } } } package _22network.com.cskaoyan.udp.v4; import utils.NetworkUtils; import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.UnknownHostException; import java.util.Scanner; /** * @description: 发送任务 * @author: 景天 * @date: 2022/10/21 16:45 **/ public class SendTask implements Runnable{ // 定义成员变量 DatagramSocket datagramSocket; String ip; int port; public SendTask(DatagramSocket datagramSocket, String ip, int port) { this.datagramSocket = datagramSocket; this.ip = ip; this.port = port; } @Override public void run() { // 只发送消息 // 创建Scanner对象 Scanner scanner = new Scanner(System.in); while (true) { // 键盘接收数据 String s = scanner.nextLine(); // 封装成数据报包 try { DatagramPacket sendPacket = NetworkUtils.getSendPacket(s, ip, port); // send datagramSocket.send(sendPacket); } catch (UnknownHostException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } } package _22network.com.cskaoyan.udp.v4; import java.net.DatagramSocket; /** * @description: * @author: 景天 * @date: 2022/10/21 16:52 **/ public class OnePerson { public static void main(String[] args) throws Exception{ DatagramSocket datagramSocket = new DatagramSocket(8888); // 创建用于发送的线程 //创建用于接收的线程 // start new Thread(new SendTask(datagramSocket, \\\"127.0.0.1\\\", 9999)).start(); new Thread(new ReceiveTask(datagramSocket)).start(); } } package _22network.com.cskaoyan.udp.v4; import java.net.DatagramSocket; /** * @description: * @author: 景天 * @date: 2022/10/21 16:52 **/ public class AnotherPerson { public static void main(String[] args) throws Exception{ DatagramSocket datagramSocket = new DatagramSocket(9999); // 创建用于发送的线程 //创建用于接收的线程 // start new Thread(new SendTask(datagramSocket, \\\"127.0.0.1\\\", 8888)).start(); new Thread(new ReceiveTask(datagramSocket)).start(); } } \"]},\"896\":{\"h\":\"传输原理\",\"t\":[\"image-20221021172051148\"]},\"897\":{\"h\":\"客户端步骤(Client)\",\"t\":[\"创建客户端Socket对象\",\"从socket中获取输入输出流\",\"利用输出输出流进行读写操作\",\"释放资源close\"]},\"898\":{\"h\":\"服务端步骤(Server)\",\"t\":[\"创建服务端的socket对象(ServerSocket)\",\"通过accept建立连接, 得到socket对象\",\"从socket中得到输入输出流\",\"利用输入输出流进行读写操作\",\"释放资源\"]},\"899\":{\"h\":\"Socket\",\"t\":[\"此类实现客户端套接字\",\"构造方法\",\"Socket(String host, int port) 创建一个流套接字并将其连接到指定主机上的指定端口号。\",\"成员方法\",\"InputStream\",\"getInputStream() 返回此套接字的输入流。\",\"OutputStream\",\"getOutputStream() 返回此套接字的输出流。\",\"void\",\"shutdownOutput() 禁用此套接字的输出流。\",\"Socket半关闭\"]},\"900\":{\"h\":\"ServerSocket\",\"t\":[\"此类实现服务器套接字\",\"构造方法\",\"ServerSocket(int port) 创建绑定到特定端口的服务器套接字。\",\"成员方法\",\"Socket\",\"accept() 侦听并接受到此套接字的连接。\"]},\"901\":{\"h\":\"案例\"},\"902\":{\"h\":\"v1 客户端发送消息,服务端接收并打印\",\"t\":[\"package _22network.com.cskaoyan.tcp.v1; import java.io.OutputStream; import java.net.Socket; /** * @description: 客户端 * @author: 景天 * @date: 2022/10/21 17:31 **/ /* v1 客户端发送消息,服务端接收并打印 */ public class Client { public static void main(String[] args) throws Exception{ //- 创建客户端Socket对象 // Socket(String host, int port) // 创建一个流套接字并将其连接到指定主机上的指定端口号。 Socket socket = new Socket(\\\"127.0.0.1\\\", 12306); //- 从socket中获取输入输出流 // getOutputStream() 返回此套接字的输出流。 OutputStream out = socket.getOutputStream(); //- 利用输出输出流进行读写操作 out.write(\\\"hello tcp\\\".getBytes()); //- 释放资源close out.close(); } } package _22network.com.cskaoyan.tcp.v1; import java.io.InputStream; import java.net.ServerSocket; import java.net.Socket; /** * @description: 服务端 * @author: 景天 * @date: 2022/10/21 17:31 **/ public class Server { public static void main(String[] args) throws Exception{ // - 创建服务端的socket对象(ServerSocket) // ServerSocket(int port) // 创建绑定到特定端口的服务器套接字。 ServerSocket serverSocket = new ServerSocket(12306); //- 通过accept建立连接, 得到socket对象 System.out.println(\\\"accept before\\\"); Socket socket = serverSocket.accept(); System.out.println(\\\"accept after\\\"); //- 从socket中得到输入输出流 // getInputStream() 返回此套接字的输入流。 InputStream in = socket.getInputStream(); //- 利用输入输出流进行读写操作 byte[] bytes = new byte[1024]; int readCount = in.read(bytes); String s = new String(bytes, 0, readCount); System.out.println(s); //- 释放资源 socket.close(); serverSocket.close(); } } \"]},\"903\":{\"h\":\"v2 多个客户端发送,服务端接收(多线程处理)\",\"t\":[\"package _22network.com.cskaoyan.tcp.v2; import java.io.OutputStream; import java.net.Socket; import java.util.Scanner; /** * @description: 客户端 * @author: 景天 * @date: 2022/10/21 17:43 **/ /* v2 多个客户端发送,服务端接收(多线程处理) */ public class Client { public static void main(String[] args) throws Exception{ // 创建客户端socket对象 Socket socket = new Socket(\\\"127.0.0.1\\\", 8888); Scanner scanner = new Scanner(System.in); // 循环 while (true) { // 键盘接收数据 String s = scanner.nextLine(); // 从socket中获取输出流 OutputStream out = socket.getOutputStream(); // write out.write(s.getBytes()); } } } package _22network.com.cskaoyan.tcp.v2; import java.io.IOException; import java.io.InputStream; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * @description: 服务端 * @author: 景天 * @date: 2022/10/21 17:43 **/ public class Server { public static void main(String[] args) throws Exception{ // 创建服务端socket对象 ServerSocket serverSocket = new ServerSocket(8888); // 创建线程池 ExecutorService pool = Executors.newFixedThreadPool(2); // 循环 while (true) { // accept方法建立连接 Socket socket = serverSocket.accept(); //new Thread(new ConnectTask(socket)).start(); // 提交任务 pool.submit(new ConnectTask(socket)); } } } class ConnectTask implements Runnable{ // 定义成员变量 Socket socket; public ConnectTask(Socket socket) { this.socket = socket; } @Override public void run() { while (true) { // 得到socket对象 // 从socket中获取输入流 try { InputStream in = socket.getInputStream(); // read byte[] bytes = new byte[1024]; int readCount = in.read(bytes); // 打印 String s = new String(bytes, 0, readCount); System.out.println(\\\"接收到了来自\\\" + Thread.currentThread().getName() + socket.getInetAddress() + \\\":\\\" + socket.getPort() + s); } catch (IOException e) { e.printStackTrace(); } } } } \"]},\"904\":{\"h\":\"v3 客户端发送对象(序列化),服务端接收\",\"t\":[\"package _22network.com.cskaoyan.tcp.v3; import java.io.ObjectOutputStream; import java.io.OutputStream; import java.net.Socket; /** * @description: * @author: 景天 * @date: 2022/10/22 9:46 **/ /* v3 客户端发送对象(序列化),服务端接收 */ public class Client { public static void main(String[] args) throws Exception{ // 创建客户端的socket对象 Socket socket = new Socket(\\\"127.0.0.1\\\", 11111); // 创建学生对象 Student student = new Student(\\\"张三\\\", 20); // 获取输出流 OutputStream OutputStream outputStream = socket.getOutputStream(); // 创建序列化流对象ObjectOutputStream ObjectOutputStream out = new ObjectOutputStream(outputStream); // writeObject() out.writeObject(student); // 释放资源close out.close(); socket.close(); } } package _22network.com.cskaoyan.tcp.v3; import java.io.InputStream; import java.io.ObjectInputStream; import java.net.ServerSocket; import java.net.Socket; /** * @description: * @author: 景天 * @date: 2022/10/22 9:46 **/ public class Server { public static void main(String[] args) throws Exception{ // 创建服务端的socket对象 ServerSocket serverSocket = new ServerSocket(11111); // accept建立练级 得到socket对象 Socket socket = serverSocket.accept(); // 从socket中获取输入流InputStream InputStream inputStream = socket.getInputStream(); // 创建反序列化流对象ObjectInputStream ObjectInputStream in = new ObjectInputStream(inputStream); // readObject() Student student = (Student) in.readObject(); // 打印 System.out.println(student); // close socket.close(); serverSocket.close(); } } package _22network.com.cskaoyan.tcp.v3; import java.io.Serializable; /** * @description: * @author: 景天 * @date: 2022/10/22 9:47 **/ public class Student implements Serializable { private static final long serialVersionUID = -1049823664553329306L; String name; int age; public Student(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \"]},\"905\":{\"h\":\"v4 客户端上传文件到服务端\",\"t\":[\"思路:\",\"image-20221022100647203\",\"package _22network.com.cskaoyan.tcp.v4; import java.io.FileInputStream; import java.io.InputStream; import java.io.OutputStream; import java.net.Socket; /** * @description: * @author: 景天 * @date: 2022/10/22 10:07 **/ /* 客户端上传文件到服务器 */ public class Client { public static void main(String[] args) throws Exception{ // 创建客户端的socket对象 Socket socket = new Socket(\\\"127.0.0.1\\\", 8888); // 创建自己的输入流对象 FileInputStream in = new FileInputStream(\\\"D:\\\\\\\\a.jpg\\\"); //FileInputStream in = new FileInputStream(\\\"D:\\\\\\\\b.txt\\\"); // 从socket中获取输出流 OutputStream out = socket.getOutputStream(); // 边读边写 byte[] bytes = new byte[1024]; int readCount; while ((readCount = in.read(bytes)) != -1) { out.write(bytes,0,readCount); } System.out.println(\\\"while end\\\"); // void shutdownOutput() // 禁用此套接字的输出流。 socket.shutdownOutput(); // 循环结束 文件上传完成 // 接收来自服务端的反馈消息 // 从socket获取输入流 InputStream in2 = socket.getInputStream(); byte[] bytes1 = new byte[1024]; System.out.println(\\\"read before\\\"); int readCount2 = in2.read(bytes1); System.out.println(\\\"read after\\\"); System.out.println(new String(bytes1,0,readCount2)); // close in.close(); socket.close(); } } package _22network.com.cskaoyan.tcp.v4; import java.io.FileOutputStream; import java.io.InputStream; import java.io.OutputStream; import java.net.ServerSocket; import java.net.Socket; /** * @description: * @author: 景天 * @date: 2022/10/22 10:07 **/ public class Server { public static void main(String[] args) throws Exception{ // 创建服务端的socket对象 ServerSocket serverSocket = new ServerSocket(8888); // 创建自己的输出流对象 FileOutputStream out = new FileOutputStream(\\\"server_a.jpg\\\"); //FileOutputStream out = new FileOutputStream(\\\"server_a.txt\\\"); // accept建立连接 得到socket对象 Socket socket = serverSocket.accept(); // 从socket中获取输入流 InputStream in = socket.getInputStream(); // 边读边写 int readCount; byte[] bytes = new byte[1024]; while ((readCount = in.read(bytes)) != -1) { out.write(bytes,0,readCount); } System.out.println(\\\"while end\\\"); // 循环结束 保存完成 // 从socket中获取输出流 // 给客户端一个反馈消息 OutputStream out2 = socket.getOutputStream(); out2.write(\\\"文件已经上传成功\\\".getBytes()); // close out.close(); socket.close(); serverSocket.close(); } } \",\"常见异常\",\"java.net.ConnectException: Connection refused 先启动了Client会造成这个异常\",\"java.net.BindException: Address already in use: JVM_Bind 端口号被占用(换个端口)\"]},\"906\":{\"h\":\"三次握手\",\"t\":[\"三次握手是TCP连接建立过程中的一种握手协议，目的是在客户端和服务器之间建立可靠的连接。\",\"三次握手的过程如下：\",\"第一次握手（SYN）：客户端向服务器发送一个TCP数据包，其中包含一个特殊的标志位“SYN”（synchronize），表示请求建立连接。同时，客户端会设置一个随机的初始序列号。\",\"第二次握手（SYN-ACK）：服务器收到客户端的SYN请求后，会向客户端发送一个确认数据包，其中包含“SYN”和“ACK”（acknowledge）标志位，表示同意建立连接。服务器也会设置一个随机的初始序列号。\",\"第三次握手（ACK）：客户端收到服务器的SYN-ACK确认包后，会向服务器发送一个包含ACK标志位的数据包，表示客户端已经收到了服务器的确认。此时，双方都确认了初始序列号，TCP连接被成功建立。\"]},\"907\":{\"h\":\"四次挥手\",\"t\":[\"四次挥手是TCP连接终止过程中的一种挥手协议，目的是在客户端和服务器之间安全地终止连接。四次挥手的过程如下：\",\"第一次挥手（FIN）：客户端决定关闭与服务器的连接时，会向服务器发送一个包含“FIN”（finish）标志位的数据包，表示客户端已经完成了数据传输，请求关闭连接。\",\"第二次挥手（ACK）：服务器收到客户端的FIN请求后，会向客户端发送一个包含ACK标志位的确认数据包，表示已经收到客户端的关闭请求。此时，客户端到服务器的连接已经关闭，但服务器到客户端的连接仍然打开。\",\"第三次挥手（FIN）：当服务器完成所有数据传输后，会向客户端发送一个包含FIN标志位的数据包，表示服务器也准备好关闭连接了。\",\"第四次挥手（ACK）：客户端收到服务器的FIN请求后，会向服务器发送一个包含ACK标志位的确认数据包，表示已经收到服务器的关闭请求。此时，服务器到客户端的连接也关闭。客户端等待一个预定的时间（2MSL，最长报文段生存时间的两倍）后，关闭整个TCP连接。\"]},\"908\":{\"h\":\"小结\",\"t\":[\"三次握手和四次挥手是为了在客户端和服务器之间建立和终止可靠的连接。在这些过程中，双方通过交换带有特定标志位的数据包来传达自己的意图和状态。\",\"为了更好地理解三次握手和四次挥手，可以将其视为一种对话：\",\"三次握手（建立连接）\",\"客户端：“你好，服务器，我想建立连接。”（发送SYN包）\",\"服务器：“你好，客户端，我同意建立连接。”（发送SYN-ACK包）\",\"客户端：“谢谢，服务器，我知道你同意建立连接了。”（发送ACK包）\",\"四次挥手（终止连接）\",\"客户端：“你好，服务器，我已经完成数据传输，请求关闭连接。”（发送FIN包）\",\"服务器：“你好，客户端，我收到了你的关闭请求。”（发送ACK包）\",\"服务器：“你好，客户端，我也已经完成数据传输，准备好关闭连接了。”（发送FIN包）\",\"客户端：“谢谢，服务器，我知道你准备好关闭连接了。”（发送ACK包）\",\"在实际应用中，TCP协议的三次握手和四次挥手过程可以确保双方在建立和关闭连接时达成共识，以便在网络通信中传输可靠的数据。\",\"更详细的图解，可以参考一篇网络博客：详解三次握手和四次挥手_十九万里的博客\"]},\"909\":{\"h\":\"17. 反射\",\"t\":[\"学习目标:\",\"熟悉类加载过程与类加载器\",\"熟练掌握类加载时机\",\"掌握如何获取字节码文件对象\",\"掌握使用配置文件\",\"掌握Class,Constructor,Field,Method使用\",\"熟悉了解自定义类加载器与双亲委派模型(有能力的同学掌握)\",\"之前学的\",\"image-20221022112026823\"]},\"910\":{\"h\":\"过程\",\"t\":[\"加载\",\"通过类加载器(ClassLoader)加载.class文件,读取到内存\",\"在这个过程中,生成这个类所对应的字节码文件对象(java.lang.Class)\",\"链接\",\"验证: 对字节码文件格式的验证(aced babe 咖啡宝贝 魔法数字)\",\"准备: 给类的静态成员分配内存并赋予默认初始值\",\"static int a =10; \",\"解析: 把符号引(用一组符号来描述被引用的目标)用转化为直接引用(真实的地址)\",\"class Student{ String name; int age; Subject subject; } class Subject{ String name; } \",\"初始化\",\"给静态成员赋真实的值, 并且执行静态代码块中的内容\"]},\"911\":{\"h\":\"类加载器\"},\"912\":{\"h\":\"分类\",\"t\":[\"Bootstrap ClassLoader 根类加载器 负责Java运行时核心类的加载，JDK中JRE的lib目录下rt.jar\",\"Extension ClassLoader 扩展类加载器 负责JRE的扩展目录中jar包的加载，在JDK中JRE的lib目录下ext目录\",\"Sysetm(App) ClassLoader 系统类加载器/应用加载器 负责加载自己定义的Java类\",\"package _23reflect.com.cskaoyan._01introduction; /** * @description: * @author: 景天 * @date: 2022/10/22 11:42 **/ public class Demo { public static void main(String[] args) { // 查看类加载器 // 系统类加载器 ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); System.out.println(systemClassLoader); // 扩展类加载器 ClassLoader parent = systemClassLoader.getParent(); System.out.println(parent); // 根类加载器 null 不是java写的 ClassLoader parent1 = parent.getParent(); System.out.println(parent1); // 看一下加载路径 System.out.println(System.getProperty(\\\"java.class.path\\\") .replace(\\\";\\\", System.lineSeparator())); System.out.println(\\\"-------\\\"); System.out.println(System.getProperty(\\\"java.ext.dirs\\\") .replace(\\\";\\\", System.lineSeparator())); } } \"]},\"913\":{\"h\":\"双亲委派模型\",\"t\":[\"image-20221024094028570\"]},\"914\":{\"h\":\"类加载时机\",\"t\":[\"创建类的实例(首次创建该类对象)\",\"访问类的静态变量(首次)\",\"调用类的静态方法(首次)\",\"加载某个类的子类，会先触发父类的加载\",\"直接使用java.exe命令来运行某个主类，也就是执行了某个类的main()方法\",\"使用反射方式来强制创建某个类或接口对应的java.lang.Class对象\",\"image-20221024095115934\"]},\"915\":{\"h\":\"什么是反射\",\"t\":[\"获取运行时类信息的一种手段\",\"反射的起点是字节码文件对象\"]},\"916\":{\"h\":\"获取字节码文件对象的几种方式\",\"t\":[\"对象.getClass()\",\"类名.class\",\"Class.forName(String className) 全限定名\",\"ClassLoader里的loadClass(String className)\",\"注意:\",\"无论通过什么方式获取的字节码文件对象 都是同一个\",\"Demo\",\"package _23reflect.com.cskaoyan._02cls; /** * @description: * @author: 景天 * @date: 2022/10/24 9:58 **/ /* 获取字节码文件对象的几种方式 */ public class Demo { public static void main(String[] args) throws ClassNotFoundException { // 对象.getClass A a = new A(); Class<? extends A> c1 = a.getClass(); // 类名.class Class<A> c2 = A.class; System.out.println(c1 == c2); // Class.forName(全限定名) Class<?> c3 = Class.forName(\\\"_23reflect.com.cskaoyan._02cls.A\\\"); System.out.println(c1 == c3); // ClassLoader.loadClass(String className) ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); Class<?> c4 = systemClassLoader.loadClass(\\\"_23reflect.com.cskaoyan._02cls.A\\\"); System.out.println(c1 == c4); } } class A{ } \",\"注意\",\"package _23reflect.com.cskaoyan._02cls; /** * @description: * @author: 景天 * @date: 2022/10/24 10:08 **/ public class Demo2 { public static void main(String[] args) throws ClassNotFoundException { // 类名.class // 没有执行静态代码块 //Class<B> c1 = B.class; // Class.forName() // 执行静态代码块 Class<?> c2 = Class.forName(\\\"_23reflect.com.cskaoyan._02cls.B\\\"); } } class B{ static { System.out.println(\\\"静态代码块执行了!\\\"); } } \"]},\"917\":{\"h\":\"关于Class\",\"t\":[\"Class 类的实例表示正在运行的 Java 应用程序中的类和接口\",\"Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。\",\"image-20221024101228387\"]},\"918\":{\"h\":\"配置文件(.properties)\",\"t\":[\"配置文件的几种格式.properties .xml .yml\",\"配置文件的作用: 放配置信息的 (数据库的, 第三方服务的配置信息)\",\".properties的格式 键值对(key-value) key=value key是不能重复的\",\"注释是# 文件里面全是String\",\"image-20221024101640808\",\"获取配置信息\",\"Properties类\",\"Properties 类表示了一个持久的属性集。Properties 可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。\",\"构造方法\",\"Properties() 创建一个无默认值的空属性列表。\",\"成员方法\",\"void\",\"load(InputStream inStream) 从输入流中读取属性列表（键和元素对）。\",\"void\",\"load(Reader reader) 按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。\",\"String\",\"getProperty(String key) 用指定的键在此属性列表中搜索属性。\",\"package _23reflect.com.cskaoyan._03config; import java.io.FileInputStream; import java.io.IOException; import java.util.Properties; /** * @description: * @author: 景天 * @date: 2022/10/24 10:27 **/ public class Demo { public static void main(String[] args) throws IOException { // 创建Properties对象 Properties properties = new Properties(); // load properties.load(new FileInputStream(\\\"config.properties\\\")); // 获取属性值 // getProperty(String key) String port = properties.getProperty(\\\"port\\\"); String user = properties.getProperty(\\\"user\\\"); String password = properties.getProperty(\\\"password\\\"); String host = properties.getProperty(\\\"host\\\"); System.out.println(port); System.out.println(password); System.out.println(user); System.out.println(host); } } \",\"package _23reflect.com.cskaoyan._03config; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.net.URL; import java.util.Properties; /** * @description: * @author: 景天 * @date: 2022/10/24 10:27 **/ public class Demo2 { public static void main(String[] args) throws IOException { // 创建Properties对象 Properties properties = new Properties(); // 通过类加载器 URL systemResource = ClassLoader.getSystemResource(\\\"\\\"); System.out.println(systemResource); InputStream in = ClassLoader.getSystemResourceAsStream(\\\"config.properties\\\"); // load properties.load(in); // 获取属性值 // getProperty(String key) String port = properties.getProperty(\\\"port\\\"); String user = properties.getProperty(\\\"user\\\"); String password = properties.getProperty(\\\"password\\\"); String host = properties.getProperty(\\\"host\\\"); System.out.println(port); System.out.println(password); System.out.println(user); System.out.println(host); } } \",\"有中文的情况\",\"package _23reflect.com.cskaoyan._03config; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.Properties; /** * @description: * @author: 景天 * @date: 2022/10/24 11:26 **/ public class Demo3 { public static void main(String[] args) throws IOException { // 创建Properties对象 Properties properties = new Properties(); // load properties.load( new InputStreamReader( new FileInputStream(\\\"config.properties\\\"),\\\"GBK\\\")); // 获取属性 String user = properties.getProperty(\\\"user\\\"); System.out.println(user); } } \"]},\"919\":{\"h\":\"通过反射获取构造方法(Constructor)\",\"t\":[\"通过反射获取所有构造方法\",\"Constructor[] getConstructors() Constructor[] getDeclaredConstructors() \",\"获取指定构造方法\",\"Constructor<T> getConstructor(Class<?>... parameterTypes) Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) \",\"使用Constructor创建对象\",\"Person p = new Person(\\\"zs\\\",20,true) newInstance(参数列表) \",\"暴力破解\",\"setAccessible(true) \",\"package _23reflect.com.cskaoyan._04api; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; /** * @description: * @author: 景天 * @date: 2022/10/24 11:34 **/ public class ConstructorTest { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 反射技术的起点 获取字节码文件对象 Class<?> stuCls = Class.forName(\\\"_23reflect.com.cskaoyan.bean.Person\\\"); System.out.println(\\\"获取所有的public的构造方法----\\\"); // Constructor[] getConstructors() Constructor<?>[] constructors = stuCls.getConstructors(); for (Constructor<?> constructor : constructors) { System.out.println(constructor); } System.out.println(\\\"获取所有的构造方法----\\\"); //Constructor[] getDeclaredConstructors() Constructor<?>[] declaredConstructors = stuCls.getDeclaredConstructors(); for (Constructor<?> constructor : declaredConstructors) { System.out.println(constructor); } System.out.println(\\\"获取指定的public的构造方法----\\\"); // Constructor<T> getConstructor(Class<?>... parameterTypes) Constructor<?> constructor = stuCls.getConstructor(String.class, int.class, boolean.class); //Constructor<?> constructor = stuCls.getConstructor(String.class, int.class); // java.lang.NoSuchMethodException System.out.println(constructor); System.out.println(\\\"获取指定的构造方法----\\\"); //Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) Constructor<?> declaredConstructor = stuCls.getDeclaredConstructor(String.class, int.class); System.out.println(declaredConstructor); // 使用构造方法对象创建对象 // newInstance Object o = constructor.newInstance(\\\"zs\\\", 20, true); System.out.println(o); // java.lang.IllegalAccessException // setAccessible(true) 忽略java语法检查 declaredConstructor.setAccessible(true); Object o1 = declaredConstructor.newInstance(\\\"ls\\\", 21); System.out.println(o1); } } \"]},\"920\":{\"h\":\"通过反射获取成员变量(Field)\",\"t\":[\"通过反射获取所有成员变量\",\"Field[] getFields() Field[] getDeclaredFields() \",\"获取指定成员变量\",\"Field getField(String name) Field getDeclaredField(String name) \",\"通过Field读写对象的成员变量(可暴力破解)\",\"Object get(Object obj)：获取值，传入对象 void set(Object obj, Object value)：赋值，传入对象 \",\"package _23reflect.com.cskaoyan._04api; import _23reflect.com.cskaoyan.bean.Person; import java.lang.reflect.Constructor; import java.lang.reflect.Field; /** * @description: * @author: 景天 * @date: 2022/10/24 14:25 **/ /* 反射获取成员变量 */ public class FieldTest { public static void main(String[] args) throws Exception{ // 获取字节码文件对象 Class<?> personCls = Class.forName(\\\"_23reflect.com.cskaoyan.bean.Person\\\"); System.out.println(\\\"获取所有的public的成员变量------\\\"); // Field[] getFields() Field[] fields = personCls.getFields(); for (Field field : fields) { System.out.println(field); } System.out.println(\\\"获取所有的成员变量------\\\"); //Field[] getDeclaredFields() Field[] declaredFields = personCls.getDeclaredFields(); for (Field field : declaredFields) { System.out.println(field); } System.out.println(\\\"获取指定的public的成员变量------\\\"); // Field getField(String name) Field nameField = personCls.getField(\\\"name\\\"); System.out.println(nameField); System.out.println(\\\"获取指定的成员变量------\\\"); //Field getDeclaredField(String name) Field ageField = personCls.getDeclaredField(\\\"age\\\"); System.out.println(ageField); // 给成员变量赋值 获取成员变量的值 //void set(Object obj, Object value)：赋值，传入对象 Constructor<?> declaredConstructor = personCls.getDeclaredConstructor(); // 实例化对象 Object o = declaredConstructor.newInstance(); nameField.set(o, \\\"zs\\\"); System.out.println(o); ageField.setAccessible(true); ageField.set(o, 22); System.out.println(o); // Object get(Object obj)：获取值，传入对象 Object o1 = nameField.get(o); System.out.println(o1); } } \"]},\"921\":{\"h\":\"通过反射获取成员方法(Method)\",\"t\":[\"获取所有成员方法\",\"Method[] getMethods()// 父类的也能获取到 Method[] getDeclaredMethods() \",\"获取指定的成员方法\",\"Method getMethod(String name, Class<?>... parameterTypes) Method getDeclaredMethod(String name, Class<?>... parameterTypes) \",\"利用Method调用对象的方法\",\"Object invoke(Object obj, Object... args) \",\"package _23reflect.com.cskaoyan._04api; import _23reflect.com.cskaoyan.bean.Person; import java.lang.reflect.Constructor; import java.lang.reflect.Method; /** * @description: * @author: 景天 * @date: 2022/10/24 14:39 **/ /* 通过反射获取方法 */ public class MethodTest { public static void main(String[] args) throws Exception{ // 获取字节码文件对象 Class<?> personCls = Class.forName(\\\"_23reflect.com.cskaoyan.bean.Person\\\"); System.out.println(\\\"获取所有的public的方法----\\\"); // Method[] getMethods() Method[] methods = personCls.getMethods(); for (Method method : methods) { System.out.println(method); } System.out.println(\\\"获取所有的方法----\\\"); //Method[] getDeclaredMethods() Method[] declaredMethods = personCls.getDeclaredMethods(); for (Method method : declaredMethods) { System.out.println(method); } System.out.println(\\\"获取指定的public的方法----\\\"); // Method getMethod(String name, Class<?>... parameterTypes) Method eatMethod1 = personCls.getMethod(\\\"eat\\\"); System.out.println(eatMethod1); System.out.println(\\\"获取指定的方法----\\\"); //Method getDeclaredMethod(String name, Class<?>... parameterTypes) Method eatMethod2 = personCls.getDeclaredMethod(\\\"eat\\\", String.class); System.out.println(eatMethod2); //Person p = new Person(); //p.eat(); // 反射调用方法 // Object invoke(Object obj, Object... args) Constructor<?> declaredConstructor = personCls.getDeclaredConstructor(); Object o = declaredConstructor.newInstance(); Object invoke = eatMethod1.invoke(o); System.out.println(invoke); eatMethod2.setAccessible(true); eatMethod2.invoke(o, \\\"apple\\\"); } } \"]},\"922\":{\"h\":\"其他API\",\"t\":[\"可以通过Class直接实例化 , 但是要有一个无参构造方法\",\"package _23reflect.com.cskaoyan._04api; import java.lang.reflect.Constructor; /** * @description: * @author: 景天 * @date: 2022/10/24 11:48 **/ public class Demo { public static void main(String[] args) throws Exception{ Class<?> c = Class.forName(\\\"_23reflect.com.cskaoyan._04api.A\\\"); // 通过class对象直接实例化对象 Object o = c.newInstance(); System.out.println(o); } } class A { int a; public A(int a) { this.a = a; } public A() { } } \",\"其他API\",\"package _23reflect.com.cskaoyan.bean; /** * @description: * @author: 景天 * @date: 2022/10/24 11:31 **/ public class Person { // 定义成员变量 public String name; private int age; boolean gender; // 构造方法 public Person(String name, int age, boolean gender) { this.name = name; this.age = age; this.gender = gender; } private Person(String name, int age) { this.name = name; this.age = age; } public Person() { } // 定义成员方法 @Override public String toString() { return \\\"Person{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } public String eat(){ System.out.println(\\\"eat food!\\\"); return \\\"吃了\\\"; } private void eat(String food){ System.out.println(\\\"eat \\\" + food); } } package _23reflect.com.cskaoyan._05add; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.lang.reflect.Modifier; /** * @description: * @author: 景天 * @date: 2022/10/24 14:57 **/ public class OtherApi { public static void main(String[] args) throws Exception{ // 获取字节码文件对象 Class<?> c = Class.forName(\\\"_23reflect.com.cskaoyan.bean.Person\\\"); //Class<?> c = Class.forName(\\\"java.io.OutputStream\\\"); // 获取全限定类名 System.out.println(c.getName()); // 获取简单名称 System.out.println(\\\"c.getSimpleName() = \\\" + c.getSimpleName()); // 获取父类 Class<?> superclass = c.getSuperclass(); System.out.println(\\\"superclass = \\\" + superclass.getSimpleName()); // 获取实现的接口 Class<?>[] interfaces = c.getInterfaces(); for (Class<?> i : interfaces) { System.out.println(i); } // 获取类加载器 ClassLoader classLoader = c.getClassLoader(); System.out.println(\\\"classLoader = \\\" + classLoader); // 获取name这个成员变量对象 Field nameField = c.getDeclaredField(\\\"name\\\"); // 获取权限修饰符 int modifiers = nameField.getModifiers(); System.out.println(modifiers); // static String toString(int mod) // 返回描述指定修饰符中的访问修饰符标志的字符串。 String s = Modifier.toString(modifiers); System.out.println(\\\"s = \\\" + s); // 获取eat(String s)方法对象 Method eatMethod = c.getDeclaredMethod(\\\"eat\\\", String.class); Class<?> returnType = eatMethod.getReturnType(); System.out.println(\\\"returnType = \\\" + returnType); Class<?>[] parameterTypes = eatMethod.getParameterTypes(); for (Class<?> parameterType : parameterTypes) { System.out.println(parameterType.getSimpleName()); } } } \"]},\"923\":{\"h\":\"自定义类加载器\",\"t\":[\"继承ClassLoader\",\"重写findClass方法\",\"package _23reflect.com.cskaoyan._05add; import java.io.ByteArrayOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; /** * @description: * @author: 景天 * @date: 2022/10/24 15:20 **/ // 继承ClassLoader public class MyClassLoader extends ClassLoader{ // 定义成员变量 String classPath; public MyClassLoader(String classPath) { this.classPath = classPath; } // 重写findClass() @Override protected Class<?> findClass(String name) throws ClassNotFoundException { Class<?> aClass = null; // 怎么把数据装到byte[] ? // 读取.class文件 try { byte[] data = getData(); // 字节码文件对象从哪来 defineClass // protected Class<?> defineClass(String name, byte[] b, int off, int len) //将一个 byte 数组转换为 Class 类的实例。 aClass = defineClass(name, data, 0, data.length); } catch (IOException e) { e.printStackTrace(); } // 最终要返回这个类对应的字节码文件对象 return aClass; } private byte[] getData() throws IOException { // 读取Class文件到数组里 FileInputStream in = new FileInputStream(classPath); // 借助于 ByteArrayOutputStream ByteArrayOutputStream out = new ByteArrayOutputStream(); // 此类实现了一个输出流，其中的数据被写入一个 byte 数组。缓冲区会随着数据的不断写入而自动增长。 // 可使用 toByteArray() 和 toString() 获取数据。 // 边读边写 int readCount; byte[] bytes = new byte[1024]; while ((readCount = in.read(bytes)) != -1) { out.write(bytes, 0, readCount); } // toByteArray() byte[] bytes1 = out.toByteArray(); return bytes1; } } package _23reflect.com.cskaoyan._05add; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; /** * @description: * @author: 景天 * @date: 2022/10/24 15:27 **/ public class Demo { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException { // 定义要加载的文件的路径 String classPath = \\\"D:\\\\\\\\Log.class\\\"; // 创建自定义的类加载器对象 MyClassLoader myClassLoader = new MyClassLoader(classPath); // 加载类loadClass(String name) // 得到字节码文件对象 Class<?> logCls = myClassLoader.loadClass(\\\"Log\\\"); // 看一下是哪个类加载器加载 ClassLoader classLoader = logCls.getClassLoader(); System.out.println(classLoader); // 拿到方法对象 Method method = logCls.getDeclaredMethod(\\\"func\\\"); Object o = logCls.newInstance(); // 调用方法invoke method.invoke(o); } } \",\"通过反射获取注解信息\",\"动态代理\",\"ORM(Object Relational Mapping)框架, 数据库框架\",\"image-20221024163122140\"]},\"924\":{\"h\":\"18.注解\",\"t\":[\"学习目标:\",\"掌握注解的定义与使用\",\"熟悉2个元注解的作用\",\"掌握使用注解处理器获取注解信息\",\"注释\",\"单行注释//\",\"多行注释/* */\",\"文档注释/** */\",\"注释的作用:\",\"传递额外的信息进行解释说明, 给程序员看的\",\"注释不参与编译\",\"注释只有语法形式, 具体内容没有要求 // 年龄在18-25之间, [18,25], 18<=age<=25 boolean judegeAge(int age){ } \",\"什么是注解\",\"Annotation其实是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理\",\"注解的作用\",\"通过使用Annotation，程序开发人员可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息\",\"Annotation就像修饰符一样被使用，可用于修类、构造器、方法、成员变量、参数...，这些信息被存储在Annotation的“属性名=属性值”对中\",\"注解 VS 注释\",\"相同点 \",\"都是用来传递额外信息的\",\"不同点 \",\"注解可以参与编译,注释不行\",\"注解有使用范围,注释没有(想咋写咋写)\",\"注解作为一种数据类型,跟class interface具有同等地位\",\"语法\",\"权限修饰符 @interface 注解名字{ // 注解体定义 属性类型 属性名(); 属性类型 属性名(); 属性类型 属性名(); ...... } 举例: public @interface Override { } 属性类型: 基本数据类型 String类型 Class类型 注解类型 枚举类型 以及以上类型的数组形式 \",\"注意:\",\"注解不允许继承\",\"注解和接口的关系：\",\"注解和接口的定义都使用同一个关键字interface，而且注解体的定义也非常类似于接口中的抽象方法。\",\"这当然不是巧合，而是因为注解本身就是一种特殊的接口。查看java.lang.annotation.Annotation接口的JDK文档，原文是：\",\"所有注解类型都隐式扩展自该接口。但要注意，手动扩展该公共接口的接口不会定义为注解类型。还要注意此接口本身不是定义注解型。\",\"也就是说：\",\"当你使用\\\"@interface\\\"关键字定义一个注解类型时，它会自动实现java.lang.annotation.Annotation接口，即使你没有显式地声明这个继承关系。\",\"如果使用\\\"interface\\\"关键字定义一个接口类型，并显式地让它继承java.lang.annotation.Annotation接口，那么这个新接口也不会被视为一个注解类型。\",\"java.lang.annotation.Annotation接口本身并不是一个注解类型，它只是一个普通的接口类型。\",\"注解类型并不能显式地继承其他类或接口，虽然它确实隐式实现了接口java.lang.annotation.Annotation~\",\"当然，以上概念了解即可。虽然注解和接口确实共享了同一个关键字，但它们在实际使用中具有不同的目的和功能，可谓千差万别\",\"元注解的概念来源于元数据，什么是元数据呢？\",\"image-20230817175904439\",\"图中框起来的一列数据是什么意思呢？表头的学校就负责解释这一列数据，所以这一列数据都代表某个学生的学校信息。\",\"像“学校”这样的，用于解释数据的数据，就是元数据 meta data\",\"元注解：描述修饰注解的注解（注解的注解）\",\"image-20230817180042910\",\"常用元注解：\",\"@Retention元注解，来定义我们自己定义的注解的保留级别.\",\"RetentionPolicy.RUNTIME\",\"RetentionPolicy.CLASS 默认\",\"RetentionPolicy.SOURCE\",\"@Target元注解，注解可以作用的目标\",\"对于注解而言，可以作用的目标：\",\"整个类 ElementType.TYPE\",\"成员变量 ElementType.FIELD\",\"构造方法 ElementType.CONSTRUCTOR\",\"成员方法 ElementType.METHOD\",\"类比类对象\",\"User user = new User(\\\"zs\\\",20); User user2 = new User(); \",\"使用的时候注解需要通过@符号进行实例化, 对每个属性都要赋值\",\"@注解名(属性1=属性值,属性2=属性值) \",\"解释：\",\"\\\"@\\\"可以认为相当于“new”关键字，必不可少。\",\"注解相当于给Java代码打上一个标签，所以它必须要修饰Java代码的一个结构。比如修饰一整个类，一整个方法，一个成员变量等等。\",\"实例化注解时，必须给注解的各个属性赋值，赋值方式是：属性名 = 属性值。如果是数组类型的注解属性，用\\\"{}\\\"赋值。如果有多个属性，赋值时用\\\"，\\\"隔开。\",\"注意事项:\",\"每个属性都要赋值\",\"可以不赋值,但是要有默认值, default\",\"数组形式赋值 {}\",\"如果只有1个属性, 名字叫value, 可以简化赋值\",\"如果属性类型是引用类型, 不能是null\",\"示例\",\" @MyAnnotation public class Test { @MyAnnotation(666) int num; @MyAnnotation(value = 777, b = \\\"777\\\", c = {\\\"777\\\",\\\"aaa\\\",\\\"bb\\\"}) public void test() { } } @interface MyAnnotation { int value() default 123; String b() default \\\"abc\\\"; String[] c() default {\\\"123\\\"}; } \",\"什么是注解处理器?\",\"获取注解信息, 根据注解信息进行处理\",\"如何获取注解信息?\",\"通过反射获取注解信息\",\"package _24annotation.com.cskaoyan._04handle; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; import java.lang.reflect.Method; /** * @description: * @author: 景天 * @date: 2022/10/24 17:41 **/ public class Demo { public static void main(String[] args) throws Exception{ // 获取字节码文件对象 Class<?> c = Class.forName(\\\"_24annotation.com.cskaoyan._04handle.Demo\\\"); // 拿到方法对象 Method loginMethod = c.getDeclaredMethod(\\\"login\\\"); // 判断方法上是否使用了注解 boolean annotationPresent = loginMethod.isAnnotationPresent(Login.class); if (annotationPresent) { // 获取注解实例 Login loginAnnotation = loginMethod.getAnnotation(Login.class); // 获取属性值 String password = loginAnnotation.password(); String username = loginAnnotation.username(); // 打印 System.out.println(password); System.out.println(username); }else { System.out.println(\\\"没有使用注解\\\"); } } @Login public static void login(){ } } // 定义注解 @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) @interface Login{ // 属性 String username() default \\\"admin\\\"; String password() default \\\"123456\\\"; } \",\"练习:\",\"定义2个注解\",\"AgeLimit 属性 maxAge minAge\",\"NameLimit 属性 length\",\"定义学生类Student 年龄18-25之间 名字长度不超过5\",\"package _24annotation.com.cskaoyan._04handle; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; /** * @description: * @author: 景天 * @date: 2022/10/25 9:37 **/ public class StudentFactory { public static Class stuCls; static { try { stuCls = Class.forName(\\\"_24annotation.com.cskaoyan._04handle.Student\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } // 提供一个方法 来产生学生对象 public static Student getInstance(String name,int age) throws NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 名字校验 judgeName(name); // 年龄校验 judgeAge(age); // 获取构造方法对象 Constructor declaredConstructor = stuCls.getDeclaredConstructor(String.class, int.class); declaredConstructor.setAccessible(true); // newInstance实例化对象 Student student = (Student) declaredConstructor.newInstance(name, age); return student; // 最终返回学生对象 } private static void judgeAge(int age) throws NoSuchFieldException { // 获取age成员变量 Field ageField = stuCls.getDeclaredField(\\\"age\\\"); // 判断是否用了注解 boolean annotationPresent = ageField.isAnnotationPresent(AgeLimit.class); // 如果用了注解 if (annotationPresent) { // 获取注解实例 AgeLimit ageLimit = ageField.getAnnotation(AgeLimit.class); // 获取属性值 int maxAge = ageLimit.maxAge(); int minAge = ageLimit.minAge(); // 判断是否满足要求 // 如果不满足要求 抛出异常 if (age < minAge || age > maxAge) { throw new IllegalArgumentException(\\\"年龄不合法\\\"); } } } private static void judgeName(String name) throws NoSuchFieldException { // 获取name成员变量 Field nameField = stuCls.getDeclaredField(\\\"name\\\"); // 判断是否用了注解 boolean annotationPresent = nameField.isAnnotationPresent(NameLimit.class); // 如果用了注解 if (annotationPresent) { // 获取注解实例 NameLimit nameLimit = nameField.getAnnotation(NameLimit.class); // 获取属性值 int length = nameLimit.length(); // 判断是否满足要求 // 如果不满足要求 抛出异常 if (name.length() > length) { throw new IllegalArgumentException(\\\"名字不合法\\\"); } } } } \",\"配置文件 优点：可配置，不用改源码。管理方便 缺点：不直观，开发效率低\",\"注解 优点：直观开发效率高 缺点：硬编码，修改之后需要重新编译运行 难以和代码分开独立管理\",\"SE : @Test @Override @Deprecated@FunctionalInterface\",\"EE : @WebService\",\"框架: @AutoWired @Service @Mapping @Data  @Parm\"]},\"925\":{\"h\":\"19. GC\",\"t\":[\"image-20221025101040480\",\"程序计数器 程序计数器（Program Counter Register）是一块较小的内 存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。(每个线程都有自己的程序计数器，线程隔离)\",\"Java虚拟机栈 它描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ）用于存储局部变量表、操作栈、动态链接、方法出口等信息。线程私有(线程隔离)\",\"本地方法栈(线程私有) 本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。\",\"Java堆 此内存区域的唯一目的就是存放对象，一个JVM实例只存在一个堆，堆内存的大小是可以调节的.堆内存是线程共享的。totalMemory 默认是系统64分之一 250M maxMemory 默认是系统的四分之一 4g\",\"-Xms200m -Xmx300m\",\"方法区(线程共享) 方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量 、静态变量等数据。\",\"方法区是逻辑概念\",\"永久代\",\"元空间\",\"image-20221025114142799\",\"显式的内存管理(C/C++) 内存管理(内存的申请和释放)是程序开发者的职责 malloc() free() 常见问题： 内存泄漏：内存空间已经申请，使用完毕后未主动释放 野指针：使用了一个指针，但是该指针指向的内存空间 已经被free 隐式的内存管理(Java/C#) 内存的管理是由垃圾回收器自动管理的 优点：增加了程序的可靠性，减小了memory leak 缺点：无法控制GC的时间，耗费系统性能\"]},\"926\":{\"h\":\"如何确定垃圾\"},\"927\":{\"h\":\"引用计数算法\",\"t\":[\"确定哪些对象已经变成了垃圾，最简单的算法就是引用计数法 给对象添加一个引用计数器 每当一个地方引用它时，计数器加1 每当引用失效时，计数器减少1 当计数器的数值为0时，也就是对象无法被引用时，表明对象不可在使用\",\"但是这个算法存在一个致命的缺陷，无法解决循环引用的问题\",\"为此，引入了另外一种根搜索算法。\"]},\"928\":{\"h\":\"根搜索算法\",\"t\":[\"这个算法的基本思想是将一系列称为“GC Roots”的对象作为起始点 从这些节点开始向下搜索 搜索所走的路径称为引用链 当一个对象到所有的GC root之间没有任何引用链相连，时，就认为该对象变成了垃圾\",\"image-20230223210058412\",\"GC Roots包含对象呢？ 虚拟机栈中引用的对象 方法区中的静态属性引用的对象\"]},\"929\":{\"h\":\"如何回收垃圾\"},\"930\":{\"h\":\"标记清除算法\",\"t\":[\"image-20221025111136554\",\"image-20221025111147963\"]},\"931\":{\"h\":\"标记复制算法\",\"t\":[\"image-20221025111805455\",\"image-20221025111757163\"]},\"932\":{\"h\":\"标记整理算法\",\"t\":[\"image-20221025112108481\"]},\"933\":{\"h\":\"分代收集算法\",\"t\":[\"image-20221025113059119\",\"2个假说\",\"强分代假说 \",\"熬过越多次垃圾收集过程的对象就越难以消亡。(简单理解就是越老的对象就具有”老而不死”的特性)\",\"弱分代假说 \",\"弱分代假说（Weak Generational Hypothesis）: 绝大多数对象都是朝生夕灭的.\"]},\"934\":{\"h\":\"什么时候回收垃圾\",\"t\":[\"申请heap space失败后会触发GC回收\",\"系统进入idle后一段时间会进行回收\",\"主动调用GC进行回收  System.gc()\"]},\"935\":{\"h\":\"20. 泛型\",\"t\":[\"学习目标：\",\"理解泛型的概念及掌握泛型的好处\",\"泛型类、泛型接口的定义\",\"理解泛型在父子继承关系上的表现\",\"理解泛型的擦除\"]},\"936\":{\"h\":\"引入\",\"t\":[\"背景条件\",\"汽车类\",\"汽车的车库(主要用于存放车)。还提供一个方法获取汽车。\",\"/** * 类： 希望被持有的小汽车类 * 功能： 里面只有一个run方法，打印。 */ public class AutoCar { public void run() { System.out.println(\\\"小汽车跑跑跑......\\\"); } } /** * 类：车库类 * 功能： * 1.持有小汽车。 * 2.对外提供获取小汽车方法 */ public class HolderAutoCar { private AutoCar autoCar; public HolderAutoCar(AutoCar autoCar) { this.autoCar = autoCar; } public AutoCar get() { return this.autoCar; } } public class HolderAutoCarDemo1 { public static void main(String[] args) { // 使用方式 HolderAutoCar holderAutoCar = getHolderAutoCar(); AutoCar autoCar = holderAutoCar.get(); autoCar.run(); } private static HolderAutoCar getHolderAutoCar() { AutoCar autoCar = new AutoCar(); // 这里的步骤可能很繁琐。 // 比如这个autoCar需要进行十几个步骤，才能得到 // 我们使用这个方法来屏蔽这十几个步骤。因为这个AutoCar我们可能只使用，创建是其他程序员创建好。 HolderAutoCar holderAutoCar = new HolderAutoCar(autoCar); return holderAutoCar; } } \",\"如果现在又有一个卡车类，也想拥有持有类\",\"// 卡车类 public class Truck { public void run() { System.out.println(\\\"大卡车跑跑跑......\\\"); } } // 持有卡车类的类 public class HolderTruck { private Truck truck; public HolderTruck(Truck truck) { this.truck = truck; } public Truck get() { return this.truck; } } // 使用方式 HolderTruck holderTruck = new HolderTruck(new Truck()); holderTruck.get().run(); \",\"会发现，小汽车持有类和卡车持有类，非常相似，就隔了一个类型。\",\"问题：如果我还有其他的类呢？比如皮卡类，摩托车类？\",\"如果继续这样写下去（一个车写一个车库类），有哪些优点和缺点？\",\"优点：简单。这样可以一直写下去。写一个皮卡类，写一个皮卡车库类。\",\"缺点：持有类的功能很固定，其实就是类型不一样。为每一个都单独写一个类，\",\"解决方案1：\",\"使用Object持有这些类。\",\"好处：可以完成功能\",\"坏处：一旦强转错了，会报错。比如本来存储进去的AutoCar，强转回的时候转成了Truck\",\"public class Holder1 { private Object object; public Holder1(Object object) { this.object = object; } public Object get() { return this.object; } } // 正确使用。存AutoCar Holder1 holder11 = new Holder1(new AutoCar()); ((AutoCar) holder11.get()).run(); // 正确使用。存Truck Holder1 holder12 = new Holder1(new Truck()); Object o = holder12.get(); ((Truck) o).run(); // 错误使用。 o是一个Truck对象，但是却把它转成了AutoCar ((AutoCar) o).run(); \",\"存在类型强转问题,如果类型转换错误，会导致报错。\",\"image-20230128152912943\",\"解决方案2：\",\"抽取公共接口，持有类持有接口。运用多态特性。\",\"public interface Car { void run(); } public class AutoCar implements Car{ public void run() { System.out.println(\\\"小汽车跑跑跑......\\\"); } } public class Truck implements Car { public void run() { System.out.println(\\\"卡车跑跑跑......\\\"); } public void truckMethod() { System.out.println(\\\"我是truck特有的方法\\\"); } } public class Holder2 { private Car car; public Holder2(Car car) { this.car = car; } public Car get() { return car; } } // 具体使用 Holder2 holder2 = new Holder2(new AutoCar()); holder2.get().run(); Holder2 holder21 = new Holder2(new Truck()); holder21.get().run(); // 如果向下转型 Truck truck = (Truck) holder21.get(); truck.truckMethod(); // 如果转错了类型。 AutoCar autoCar = (AutoCar) holder21.get(); \",\"需要修改代码Truck,AutoCar这种类。如果这个AutoCar是别人提供的，我们就无法添加继承关系。\",\"只能调用接口所特有的方法，如果想调用子类单独的方法，需要强转，可能转错。\",\"**解决方案3： **\",\"使用泛型\",\"// 持有类的定义 public class Holder3<T> { private T data; public Holder3(T data) { this.data = data; } public T get() { return data; } } // 使用 // 尖括号的指定的类型。先有一个印象 Holder3<AutoCar> holder3 = new Holder3<>(new AutoCar()); holder3.get().run(); Holder3<Truck> holder31 = new Holder3<>(new Truck()); holder31.get().run(); \"]},\"937\":{\"h\":\"泛型概念\",\"t\":[\"什么是泛型？\",\"参数化类型。我们在写代码的时候, 可能很多时候我们并不能确定某一个参数的具体类型, 或者, 我们希望代码某个参数类型是灵活可变的, 我们可以先假定一种不存在的类型来代指这个参数类型, 当我们真正使用的时候再传入具体的类型。\",\"image-20221101094851766\",\"相当于什么呢？\",\"// 举例来说：比如我们之前定义一个变量 // int i ; // 我们假设i = 1 --> 那i就是1 // 我们假设i = 2 --> 那i就是2 // 现在泛型来说 // 我们使用了一个符号来代替类型。比如我们使用这样一个定义 T data; // 当我们传 T = String 那data就是String类型的 // 当我们传 T = Integer 那data就是Integer类型的 // 当我们传 T = AutoCar 那data就是AutoCar类型的 // 当我们传 T = Truck 那data就是Truck类型的 \"]},\"938\":{\"h\":\"泛型好处\",\"t\":[\"省去了类型强转的麻烦\",\"不用使用强制类型转换。就避免了类型强转问题。 \",\"将运行期遇到的问题转移到了编译期\",\"没有泛型之前，编译器是不会检测集合容器中元素的数据类型的，因为它们全部都是Object。使用泛型后，能让编译器在编译的时候借助传入的类型参数（实参）检查对集合容器的插入，获取等操作是否合法。 \",\"问题越往后才发现，造成的问题也越难以解决，或者说影响越大。\",\"泛型类： 泛型定义在类上。需要重点掌握\",\"泛型接口：泛型定义在接口上，需要重点掌握\",\"泛型方法：泛型定义在方法上，了解即可\",\"泛型通配： 了解即可\",\"泛型擦除：重要，要记住\",\"泛型是在Java 5中被引入的。在Java 5之前，Java的类和方法只能通过Object来实现泛化，这样的代码存在许多问题，如类型转换错误、编译时类型检查缺失等等，限制了代码的可读性、可维护性和安全性。\",\"引入泛型机制后，Java可以在编译时进行更严格的类型检查，使得代码更加健壮、可读性更强，并且避免了许多运行时类型转换错误的问题。\"]},\"939\":{\"h\":\"泛型类\",\"t\":[\"泛型类是一种可以在定义类时使用类型参数来表示类中使用的类型的类。在Java中，泛型类可以用于定义一些通用的数据结构或算法，以便能够适应不同类型的数据。\",\"// 泛型类: 所谓泛型类, 就是把泛型'定义在'类上 // 定义的方法 类名<泛型类型1, 泛型类型2， ...> 格式: class 类名<泛型类型1,…>{ } \",\"注意1：泛型的使用时候写法\",\"// JDK1.7的写法。泛型的写法1 前面写类型，后面直接写 <> User1<String> user1 = new User1<>(); String data = user1.data; // JDK1.5 的时候，泛型刚刚出来时候的写法： // 泛型的写法2 User2<类型> 变量名 = new User2<类型>(); User1<Integer> user11 = new User1<Integer>(); Integer data1 = user11.data; \",\"注意2：默认类型\",\"定义了泛型，但是未写在<>中，会将其直接当做Object使用。\",\"User1 user1 = new User1(); // 如果不使用 <> 来指定类型，这时候T是个什么类型呢？ // 是默认类型，Object Object data = user1.data; \",\"注意3: 泛型类可以定义多个泛型\",\"我们可以在一个泛型类上, 定义多个泛型, 但是建议不要超过两个(并不是语法限制)\",\"当我们给一个泛型类定义多个泛型的时候, 使用的时候, 传泛型就要指明类型, 或者全不指明默认Object\",\"User2<String, Integer> user2 = new User2<>(\\\"zs\\\", 18); // User2<String> user3 = new User2<>(\\\"zs\\\", 18); // 报错，必须全部指定泛型的类型，或者全部不指定。 class User2 <T, E>{ T name; E age; } \",\"注意4: 定义了泛型不使用: 允许\",\"// 定义了一个K, 但是我们没有使用 class User3 <T, E, K> { T name; E age; } \",\"注意5: 泛型标识符\",\"// 我们会假定一种不存在的类型来代替这个参数类型，等我们真正使用的时候再传入具体的类型。 // int i; 这个i是变量。变量名 // T data; 这个T就是标识符。 // 使用单个大写字母。比如 E T K V // E element; T type; K key; V value // 这是一些规范。如果不按照这个规范，写代码也可以跑，但是出问题的风险比较大。 // 切记，不要使用String这种东西作为泛型，极容易认错 \",\"注意6: 泛型必须使用引用类型\",\" User4<int> user1 = new User4<>(); // 报错: 泛型必须使用引用类型 User4<Integer> user2 = new User4<>(); \",\"注意7: 泛型类, 定义了泛型之后, 泛型的作用域\",\"泛型类定义泛型的作用域: 在自己的类上，或者类中。\",\"类上：类的定义这行,可以使用泛型。class Son<T> extends Father\",\"类中：代表类体包含内容，包括内部类，可以使用泛型\",\"class Father1{ // 用不了T, 因为子类定义 } class Son<T> extends Father1{ T t; class SonInner{ T aInnerT; } } class GrandSon extends Son{ // 用不了T, 因为父类定义 } \"]},\"940\":{\"h\":\"泛型在父子继承关系上的表现\",\"t\":[\"public class Demo1 { public static void main(String[] args) { Father<Integer> f = new Father<>(); Integer ft = f.ft; // Son1 定义时没有指定Father泛型的类型，所以默认为Object Son1 son1 = new Son1(); Object ft1 = son1.ft; // Son2 定义时，未指定泛型，指定了 Father泛型为String，所以ft为String Son2 son2 = new Son2(); String ft2 = son2.ft; //Son3 定义时，指定泛型E，指定了 Father泛型为Integer，所以ft为Integer Son3<String> son3 = new Son3<>(); Integer ft3 = son3.ft; // Son4 定义时，指定泛型E，指定了 Father泛型为E，所以ft类型和子类一致 Son4<Integer> son4 = new Son4<>(); Integer ft4 = son4.ft; Son4<String> son41 = new Son4<>(); String ft41 = son41.ft; // Son5 指定T。 与符号无关 Son5<String> son5 = new Son5<>(); String ft5 = son5.ft; } } class Father <T> { T ft; } class Son1 extends Father{ } class Son2 extends Father<String>{} // 这个前面的E叫做定义了一个泛型E class Son3<E> extends Father<Integer>{} // 这里只是看起来好像是Integer。其实是定义了一个泛型叫做Integer。它和 java.lang.Integer有区别。 // class Son3<Integer> extends Father<Integer>{} class Son4<E> extends Father<E>{} class Son5<T> extends Father<T>{} \",\"背景： 如果父类有泛型，子类情况如下：\",\"如果继承时，，则为默认类型。Object\",\"class Son1 extends Father{} Son1 son1 = new Son1(); Object object = son1.ft; \",\"如果继承时，，则为指定类型，无论子类定义泛型与否。\",\"class Son2 extends Father<String>{} --》 父类变量类型为String class Son3<E> extends Father<Integer>{} --》 父类变量类型为Integer \",\"如果继承时，，则父类与子类变量类型一致\",\"class Son4<E> extends Father<E>{} // 等到使用Son4的时候，指定什么类型，就是什么类型 class Son5<T> extends Father<T>{} // 要注意bug // 前面一个 <Integer> 叫泛型的定义，相当于我定义了一个符号 // 后面叫使用 class Son51<Integer> extends Father<Integer>{} \"]},\"941\":{\"h\":\"泛型接口\",\"t\":[\"泛型接口是指在声明接口的时候使用泛型参数，以便在实现接口时指定具体的类型。这样可以使接口更加灵活和通用，可以适应不同类型的数据结构或对象。\",\"在泛型接口中，泛型参数可以用在接口中的方法、常量、嵌套类等地方。例如：\",\"public interface List<T> { void add(T element); T get(int index); int size(); } \",\"在上面的例子中，泛型参数T可以用于add方法的参数类型和get方法的返回类型。\",\"泛型接口使得Java中的容器类更加通用和灵活，可以适应不同类型的数据结构和对象。\",\"// 所谓泛型接口, 就是把泛型定义在接口上 格式: interface 接口名<泛型类型1…> // 标识符。 T E // 能不能用基础类型。 // 能不能定义多个泛型。 // 定义了能不能不使用？ // 泛型标识符。 单个大写字母。 \",\"// 格式: interface 接口名<泛型类型1…> interface Player<T> { T play(T t); } // 如果实现时候，不指定类型，默认为Object class YoungPlayer implements Player{ @Override public Object play(Object data1) { return null; } } // 如果实现时，指定为什么类型，则为什么类型 class ChildPlayer implements Player<Integer>{ @Override public Integer play(Integer data1) { return null; } } // 如果子类也有泛型，则与子类一致 // 等到这个子类，被创建的时候，才会有具体的类型。 class OldPlayer<E> implements Player<E>{ @Override public E play(E data1) { return null; } } \",\"泛型接口类型在什么时候确定？\",\"interface Player<T> { T play(T t); } // 1.子类实现该接口，没有指定泛型。 --> 接口中泛型为Object // class ChildrenPlayer implements Player {} // public Object play(Object o) {} // 2.子类实现该接口，指定了泛型，给接口指定了类型 --> 接口中泛型为指定的类型 // class YoungPlayer implements Player<String> {} // public String play(String s) {} // 3.子类实现该接口，指定了泛型,且符号一致 --> 接口中为指定的泛型 // class OldPlayer<E> implements Player<E>{} // public E play(E e) {} // 1.子接口继承该接口时候 与以上行为一致。 \"]},\"942\":{\"h\":\"案例\",\"t\":[\"// 转换器接口，从一个类型转化到另一个类型 // 转换器，是讲一个类型转到另外一个类型，这时候类型肯定不能写死。 所以需要泛型。 f泛型有两个 // 定义这样的接口，有什么好处？ 通用。 // 一个规范。 只要见到这个东西，我就知道它是转换，把一个类型，转换到另外一个类型。 public interface Converter<T, R> { R convert(T t); } // 从字符串转化为时间类型 我们约定字符串的格式为 yyyy-MM-dd。即这种类型 2022-11-01 public class String2DateConverter implements Converter<String, Date> { @Override public Date convert(String s) { Date parse = null; try { parse = new SimpleDateFormat(\\\"yyyy-MM-dd\\\").parse(s); } catch (ParseException e) { throw new RuntimeException(e); } return parse; } } // 还可以写从String类型的转化为Integer // 从Long 类型转化为 Date类型。 \"]},\"943\":{\"h\":\"泛型方法\",\"t\":[\"// 所谓泛型方法, 把泛型定义在方法上 格式: <泛型类型> 返回类型 方法名(泛型类型) \",\"public class Demo1 { public static void main(String[] args) { A a = new A(); Integer t = a.getT(18); String zs = a.getT(\\\"zs\\\"); } } //格式: <泛型类型> 返回类型 方法名(泛型类型 变量名) class A{ public <T> T getT(T t){ return t; } } \",\"注意事项：\",\"// 1.方法上没有定义泛型，只是使用了泛型，不叫泛型方法。 //比如 class Player<T>{ T play(T t){ System.out.println(t); return t; } } \"]},\"944\":{\"h\":\"泛型的通配: 了解\",\"t\":[\"image-20230129090114444\",\"泛型不允许协变, 又想产生类似协变的效果, 又不想引入协变带来的问题(类型不匹配问题)\",\"0.协变和逆变\",\"Integer是Number的子类。 所以我们可以使用这种形式。 Number number = new Integer(10); 父类引用指向子类对象 那这个有父子继承关系吗 User<Number> User<Integer> 可以这样使用吗？ User<Integer> user1 = new User<>(\\\"zs\\\", 18); User<Number> user2 = user1; 结论： 不行。因为 User<Number> 和 User<Integer> 不是父子继承关系。 这个操作叫做协变。 \",\"协变就是，允许接收该类及该类的子类。\",\"逆变就是，允许接收该类及该类的父类。\",\"// 数组是允许协变的。协变的问题。类型不匹配问题 Animal[] animals = new Cat[10]; animals[0] = new Cat(); animals[1] = new Cat(); // 编译期没有问题。 但是运行期有问题。 animals[2] = new Dog(); \",\"泛型不允许协变，也就是\",\"User<Animal> user = new User<Cat>(); \",\"泛型中，弄出来了几个通配，来让自己可以产生协变的效果。\",\"泛型的通配\",\"① 泛型通配符<?> 任意类型，如果没有明确，那么就是Object以及任意的Java类了 ② ? extends E 向下限定，E及其子类 ③ ? super E 向上限定，E及其父类\",\"1.任意类型\",\"class User<T> { String name; T data; // getter & setter & conctructor } \",\"// 我们想提供一个方法，打印User对象，方法的签名是以下 // 如果是打印Integer的，可以是以下的 public void print(User<Integer> user) { System.out.println(user.getName() + \\\"--\\\" + user.getData()); } // 如果是String类型的，则以上方法用不了 // 可以使用这个类型吗? 也不允许，因为泛型不允许协变 public void print(User<Object> user) { // 可以使用以下类型来接收。？代表任意类型 public void print(User<?> user) { \",\"2.向下限定\",\"? extends E\",\"只允许接收该类及该类子类。\",\"// 允许接收 Number 及Number的子类 public double compute(User<? extends Number> user) { Number data = user.getData(); return data.doubleValue() + 1; } User<Integer> user = new User<>(\\\"zs\\\", 18); User<Double> user2 = new User<>(\\\"zs\\\", 18.0); double val = genericsExtends2.compute(user); double val2 = genericsExtends2.compute(user2); System.out.println(val); System.out.println(val2); \",\"3.向上限定\",\"? super E\",\"只允许接收该类及其父类。\"]},\"945\":{\"h\":\"泛型的擦除: 重要:需要记住\",\"t\":[\"Java中的泛型并不是真的泛型, Java的泛型只存在于编译之前, 当Java中的泛型编译之后, 会把泛型编译成Object以及类型强转\",\"为什么使用泛型，因为泛型不涉及到强制类型转换，效率高一些。 对不对？\",\"效率没有区别。\",\"使用的时候，安全性有区别。 jdk帮你做的。 更安全点。\"]},\"946\":{\"h\":\"21. Collection\"},\"947\":{\"h\":\"数据结构\",\"t\":[\"leecode.很推荐刷刷leetcode。 做业务做准备的。\",\"// 数据结构: 什么是数据结构 // 数据的组织方式, 数据+结构 // 有哪些常见的数据结构: 集合: 一堆无序的数据 线性表: 描述的是一个有序序列, 在这有序序列中除了头和尾数据以外, 每一个数据有唯一的前驱和后继 操作受限的线性表: 栈和队列。都是线性表。 只允许在特定的位置进出数据。 树: 一对多的关系 一个节点，连接多个节点。二叉树： 一个节点，最多连接两个节点 图: 多对多的关系 \",\"常见的四种数据结构_示例图\",\"本节课只会讲线性表，因为后面会用到，其他的如果大家感兴趣可以自己去学习一下。\",\"面试的时候，问可能问到线性表就结束了。\",\"Java --- Go ; 2周就可以转过来，开始写代码\",\"Java ---- 算法 。 3月。\"]},\"948\":{\"h\":\"数组\",\"t\":[\"数组就是一片连续的内存空间，且存储的类型都是一致的。这就说明什么？\",\"int[] numbers = new int[10]; 类型一致说明空间大小一致。\",\"想取第四个位置的元素\",\"说明每一个格子的大小是固定的。我们只要知道头一个地址，后方的地址都可以算出来\",\"Q1: 数组我们都很熟悉，那你理解的数组是什么样的呢？它的最主要特点是什么呢？ // 数组是在内存上连续存储, 所以可以随机访问 // 对应数组下标的物理地址 = 数组首地址 + 下标 * 每一个内存单元大小 // 有一个数组长度是1000的。 现在想访问 index=500。是否可以直接访问到 // 可以。 数组的首地址 + 下标 * 每一个单元格的大小。 // 如果链表的长度是1000。 想访问 第 501个数据。 // 用一个计数器。0 ，访问一次加1. Q2: 为什么数组的效率比链表高？ // 因为数组是连续存储可以做到随机访问, 但是链表是非连续存储不能做到随机访问 \",\"image-20230215154103543\",\"数组的插入数据流程\",\"数组的删除数据流程\",\"数组的查找数据流程\",\"下去一定要自己写一下这个代码。因为面试如果答不上来，基本就挂了。\"]},\"949\":{\"h\":\"链表\",\"t\":[\"链表是一个线型的。\",\"基础的结构是这样的。\",\"// data可以用 泛型。 // 泛型的主要目的： 保证数据类型的可变性，比如下一次要存储Integer了。如果现在写成String，就不行 public class Node<T> { T data; Node<T> next; } \",\"image-20230330093048337\",\"链表的插入数据流程\",\"链表的删除数据流程\",\"链表的查找数据流程\"]},\"950\":{\"h\":\"集合是什么\",\"t\":[\"集合是具有某种特定性质的事物的总体。 这里的“事物”可以是人，物品，也可以是数学元素。\",\"在Java中，指的就是存放数据的容器，是一个载体，可以一次容纳多个对象。\",\"和数组比较像。 为什么要提供一套集合类。 就是因为数组操作起来，操作起来麻烦，但是非常容易出bug。\",\"集合类帮助我们把这个事情隐藏起来。 数组长度不够用了。删除数据的时候挪动数据。\",\"数组也可以存储多个对象，那集合和数组比，好在哪里呢？\",\"// 1.班上有5个同学。 学生有名字，年龄，地址等信息 // 2.现在转学走了一个同学(第三个同学)。 怎么表示 // 3.新学期，又来了三个学生 怎么表示 // 使用数组完成一下这些功能 // 用集合类也完成一下这个功能。 //有啥问题？ // 1.操作起来非常的麻烦，容易出bug。添加一个学生，删除一个学生不好操作 // 2.使用数组，需要手动进行扩容，非常麻烦。 \",\"先使用集合实现一下。\",\"Java中的集合类分为两大类：一类是实现了Collection接口的类，另一类是实现了Map接口的类。\",\"**Collection：**先理解为一个袋子，往里面装数据。有各种各样的子实现。\",\"在Java中，Collection是一个接口，它是所有集合类的顶层接口。它定义了一组通用的方法，用于操作集合中的元素。\",\"Java中的Collection接口定义了一些常用的方法，例如add()、remove()、contains()等，还有用于获取集合大小、判断集合是否为空、清空集合等方法。Java中的集合类包括List、Set和Queue等，它们都是实现了Collection接口的子接口。\",\"Collection是最基本的集合接口，一个 Collection 代表 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。\",\"比如存储一组学生\",\"比如存储一组手机号码\",\"主要存储的就是单列数据。比如一个学生，一个老师。这种都叫单列数据。\",\"**Map：**存储key-value结构的数据。key-value结构：就是可以根据一个key，找到一个对应的value。\",\"Map 接口存储一组键值对象，提供key（键）到value（值）的映射。\",\"比如根据手机号，快速获取到姓名\",\"比如根据身份证号，快速获取到人的信息\"]},\"951\":{\"h\":\"工作中的作用\",\"t\":[\"工作，主要是处理业务信息。返回老板/前端需要的数据。\",\"我们一般在工作过程中，都是在处理数据。比如对某些数据进行筛选。\",\"都是使用集合类，在对数据进行处理。\",\"学完之后，，对比各个容器的不同。\",\"整理不同容器的结构思维导图。\",\"面试的时候，会被问到\",\"写代码的时候，需要使用\",\"CRUD boy。\",\"学习目标：\",\"了解Collection接口的作用(描述数据增删查的一些方法。 )\",\"掌握Collection的增、删、查方法（add addAll remove removeAll contains containsAll retainAll）\",\"掌握Collection的遍历方法(很重要)\",\"掌握Collection遍历方法的特点及迭代器方法需要小心的bug。toArray有什么特点？迭代器的并发修改异常问题，在使用迭代器的过程中，不能去修改原有集合。\",\"熟练掌握什么场景下使用Collection及其子类\",\"遍历使用的非常多。比如，现在让你判断一下，有多少同学在18岁以下。 想看一下有多少同学来自江西。 想看一下我们班这次考试的最高分。\",\"集合类讲课的大致顺序：\",\"特点 --》 对这个容器有一个基础的认识。\",\"API --》 基础使用\",\"迭代方法 -- 在日常写代码过程中，使用最多的一类方法\",\"使用过程中，容易出现的问题。---》为了让大家了解这个问题，防止bug。\",\"我们在学习任何一个接口之前，会给大家讲 接口的特点。\",\"这个接口的特点，是重点。大家了解了这个特点，基本对这个接口的一些基本行为有一个认知。\",\"zs ls wu --> zs ls wu\"]},\"952\":{\"h\":\"特点\",\"t\":[\"Collection是顶级接口，用描述数据存储的接口.\",\"Collection的一些子实现有序，一些无序\",\"一些子实现允许存储重复的数据，一些不允许\",\"一些子实现允许存储null，一些不允许\",\"传统的三件套。 数据存储是否有序。\",\"什么叫有序，什么叫无序？\",\"指的是存储和读取的顺序，比如存入进去的是 1 2 3 4 9。读取出来的是1 2 3 4 9。或者 9 4 3 2 1 均称为有序。存进去的顺序和读取出来的顺序完全一致或者完全相反。\"]},\"953\":{\"h\":\"API\",\"t\":[\"// ---------------------------------增删改查方法--------------------------------- // 需要熟练使用，清楚特点。 // boolean add(E e): 添加一个元素进入Collection // boolean addAll(Collection<? extends E> c): 添加一个Collection进目标Collection // boolean remove(Object o)： 删除元素， 只删除第一个出现的(如果存在多个) // boolean removeAll(Collection<?> c)： 删除Collection中的所有存在的元素,会全部删除，如果存在多个 // boolean contains(Object o)： 判断是否存在指定元素 // boolean containsAll(Collection<?> c)： 判断给定的collection中是否全部存在于目标Collection // boolean retainAll(Collection<?> c)： 将原有collection只保留传入的collection。 // ---------------------------------特殊方法--------------------------------- // void clear()： 清空collection // boolean equals(Object o) ： 判断是否相等 // int hashCode()： 计算hashCode // boolean isEmpty(): 是否为空 // int size()： collection里面的元素个数 // // ---------------------------------方便遍历方法--------------------------------- // Object[] toArray(): 将collection转成一个数组，方便遍历 // <T> T[] toArray(T[] a)：类似，只是传入了一个数组 // Iterator<E> iterator()：返回一个迭代器 \",\"遍历：对一个集合中的元素，按照一定的顺序，访问且仅访问一遍。对集合的元素，挨个访问\",\"添加方法\",\"boolean add(E e): 添加一个元素进入Collection boolean addAll(Collection<? extends E> c): 添加一个Collection进目标Collection \",\"example\",\"@Test public void addDemo1() { // Collection的add方法 // ArrayList是Collection接口的一个子实现。ArrayList的底层是一个数组。 Collection<String> collection = new ArrayList<>(); // 往Collection中添加了两个数据。 zs 景天叔叔 collection.add(\\\"zs\\\"); collection.add(\\\"景天叔叔\\\"); // ArrayList重写了toString() System.out.println(collection); // [zs, 景天叔叔] } @Test public void addAllDemo1() { Collection<Integer> c1 = new ArrayList<>(); c1.add(10); c1.add(6); c1.add(2); c1.add(8); Collection<Integer> c2 = new ArrayList<>(); // 将c1中的所有元素 添加到c2 // 是将数据添加到c2中 c2.addAll(c1); System.out.println(c2); } \",\"删除方法\",\"boolean remove(Object o)： 删除元素， 只删除第一个出现的(如果存在多个) boolean removeAll(Collection<?> c)： 删除Collection中的所有存在的元素,会全部删除，如果存在多个 \",\"@Test public void removeDemo1() { Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); // 现在collection中有 五个元素. System.out.println(collection); // [zs, ls, wu, zs, ls] // 删除 zs； 删除第一个 zs。有多个 zs,只会删除第一个 collection.remove(\\\"zs\\\"); System.out.println(collection); // [ls, wu, zs, ls] } @Test public void removeAllDemo1() { Collection<String> c1 = new ArrayList<>(); c1.add(\\\"zs\\\"); c1.add(\\\"ls\\\"); c1.add(\\\"wu\\\"); c1.add(\\\"zs\\\"); c1.add(\\\"ls\\\"); Collection<String> c2 = new ArrayList<>(); c2.add(\\\"zs\\\"); // 会从c1中删除所有的c2,无论c1中有多少个元素 c1.removeAll(c2); System.out.println(c1); //[ls, wu, ls] } \",\"查询方法\",\"boolean contains(Object o)： 判断是否存在指定元素 boolean containsAll(Collection<?> c)： 判断给定的collection中是否全部存在于目标Collection \",\"@Test public void containsDemo1() { Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); // 判断 Collection中，是否包含元素 “zs”; 如果包含，返回true;否则返回false boolean contains = collection.contains(\\\"zs\\\"); System.out.println(contains); // true boolean contains1 = collection.contains(\\\"景天叔叔\\\"); System.out.println(contains1); // false } @Test public void containsAllDemo1() { Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); collection.add(\\\"zl\\\"); // 新建一个Collection，里面的元素是 zs zhou // Arrays.asList 是一个创建集合的方法。但是需要注意，创建出来的集合，不能添加和删除数据 Collection<String> collection1= Arrays.asList(\\\"zs\\\", \\\"zhou\\\"); boolean containsAll = collection.containsAll(collection1); System.out.println(containsAll); // 判断 collection中 是否包含 collection1里面的所有元素 Collection<String> collection2= Arrays.asList(\\\"zs\\\"); boolean containsAll1 = collection.containsAll(collection2); // 判断 collection中 是否包含 // collection2里面的所有元素 System.out.println(containsAll1); } \"]},\"954\":{\"h\":\"toArray 方法\",\"t\":[\"就是直接拷贝一份数据，创建一个新的数组。\",\"image-20230223192132808\",\"// 底层是数组的实现 class ArrayList{ //elementData: 存储数据的数组 Object[] elementData; // 数组列表的大小（它包含的元素数） int size; } \",\"image-20230118112659456\",\"// ArrayList底层是数组、 class ArrayList{ // elementData就是底层用来存储数据的数组 Object[] elementData; // size ： ArrayList底层实际存储的数据的长度。 // 比如最开始 初始化 长度10； elementData = new Object[10]; // size = 0; size=1; int size; //是ArrayList的toArray实现 // a = new String[3] // ArrayList里面，实际存了3个元素 public <T> T[] toArray(T[] a) { // a.length(3) < size(3) if (a.length < size) // 如果你传入的数组长度，小于集合的长度。 这时候，会直接 复制底层存储的数据，只使用类型。 return (T[]) Arrays.copyOf(elementData, size, a.getClass()); // 只要走到这一行。说明 a.length >= size 。 传进来的数组长度，大于等于 元素个数 // arraycopy 就是把一个数组 copy。 // 把elementData的所有数据 拷贝到 a(传进来的数组) System.arraycopy(elementData, 0, a, 0, size); // 传入的数组长度，大于size(实际存储的数据长度) if (a.length > size) // 直接把elementData后面的位置，赋了null。 a[size] = null; return a; } } \",\"// 这是系统提供的一个数组拷贝方法。 --》 把一个数组复制到另外一个数组 // src 源数组 // srcPos 从什么地址开始复制（starting position in the source array.） // dest 目标数组 // destPos 粘贴到的下标位置 // length 复制的长度（the number of array elements to be copied.） public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); \",\"// a是什么东西？ 是我们放进来的数组 // elementData 是ArrayList底层的数组， size 是元素的个数 public <T> T[] toArray(T[] a) { // a.length （传入的数组长度） < 元素个数 if (a.length < size) { // 如果传入的数组，长度不够。 我直接复制一下，只使用你传入的数组类型。 return (T[]) Arrays.copyOf(elementData, size, a.getClass()); } // 将elementData的数据拷贝到 a 里面。 拷贝size长度 System.arraycopy(elementData, 0, a, 0, size); if (a.length > size) // 把它赋值为null a[size] = null; return a; } \",\"传入的数组长度与集合长度的对比。\",\"1.如果数组长度集合长度。只会使用传入的数组的类型，不会使用这个数组 2.如果数组长度集合长度，会直接使用这个数组 3.如果数组长度集合长度，也会使用这个数组，并且将数组的index=length位置的元素设置为null\",\"直接使用toArray这个有什么弊端？\",\"toArray是将原Collection直接copy了一份。（1w）\",\"对于遍历来说，我一般主要是干什么？一般就是想统计一下符合条件的。\",\"耗费时间，需要将原有collection全部拷贝一遍\",\"耗费空间，两倍的collection占有空间\",\"后续使用完毕，还需要gc\",\"我们一般遍历一个集合，有时候是想统计个数，有时候是想找出符合条件的，如果每次都复制一次，不仅耗费时间，而且使用完后，还需要gc。\",\"在处理大量数据时，使用toArray方法需要谨慎考虑，因为它会将集合中的所有元素都复制到新的数组中，占用大量的内存空间。如果数据量非常大，可能会导致内存溢出的风险。\",\"在处理大量数据时，建议使用迭代器进行遍历，而不是将集合转换为数组。迭代器可以逐个访问集合中的元素，并且不需要将所有元素都复制到新的数组中，从而减少内存的占用。\"]},\"955\":{\"h\":\"iterator 方法\",\"t\":[\"比如对于一个数组来说，我需要遍历数组。\",\"其实迭代器的思路很简单。 如果是大家来遍历数组，会怎样操作？\",\"复制一遍\",\"直接使用一个int来遍历。\",\"迭代器（iterator），有时又称光标（cursor）是程序设计的软件设计模式，可在容器对象（container，例如链表或数组）上遍历的接口，设计人员无需关心容器对象的内存分配的实现细节。\",\"是用来遍历这个容器对象所有数据的接口。\",\"迭代器相当于只保留了一个标识，标识我可以怎么拿到这个数据，不copy数据。所有操作的数据都是针对的原有的Collection。\",\"比如对于一个集合来说（底层实现：数组）。我想遍历这个集合。 下标\",\"集合来说（底层实现：链表）。我想遍历这个链表。 指针就可以。\",\"好处是什么？\",\"Iterator是个接口，接口只定义规范，我们获取到了iterator，就可以使用这个对象对数据进行遍历。把接口与实现隔离。\",\"// boolean hasNext(): 是否有下一个元素 // E next()： 获取下一个元素 // void remove()： 删除刚刚遍历过的元素 \",\"image-20230609150654612\",\"比如Collection底层有的是数组，有的是链表。\",\"数组的Iterator里面维护的是下标\",\"链表的Iterator里面维护的是指针。\",\"所有的具体实现都交给具体的子类。接口只定义一个规范。\",\"image-20230223193627276\",\"image-20230223193847526\",\"迭代器是个游标，它遍历的时候，被别的线程，把原集合中加了几个元素，减了几个元素，那这时候这次遍历的意义大吗？\",\"JDK采用了存储一个值的方式，去保证在迭代器使用过程中，原有的集合不被修改（当前线程、其他线程）。\",\"在Collection内部，有一个modCount,用来标识结构变化的次数(get/contains 这种查询不叫结构变化)\",\"生成迭代器的时候，存储这个expectedModCount=modCount,在调用 next remove时候，会检查\",\"使用迭代器过程中，如果原结构发生了变化，会报并发修改异常（ConcurrentModificationException）。\",\"如果见到了，需要检查，是不是在迭代器使用过程中，修改了原有集合。\",\"迭代器怎样使用\",\"// boolean hasNext(): 是否有下一个元素 // E next()： 获取下一个元素 // void remove()： 删除刚刚遍历过的元素 @Test public void iteratorDemo1() { Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); // 现有collection里面有 三个元素。 [zs, ls, wu] System.out.println(collection); // 调用iterator()方法，生成一个迭代器。迭代器本身不存储数据。所以它操作的数据都是原有集合的 Iterator<String> iterator = collection.iterator(); // 现在的迭代器和数据 示意图： // 数据： [ zs ls wu ] // 迭代器位置： | // 迭代器后是否有元素。 System.out.println(iterator.hasNext()); // 将指针往后挪动，并返回刚刚经过的元素 String next = iterator.next(); System.out.println(next); // 现在的迭代器和数据 示意图： // 数据： [ zs ls wu ] // 迭代器位置： ------- | } \",\"不要在迭代器迭代过程中，去修改原集合。要不就是在迭代器生成之前，要不就在迭代器使用完成之后，再去修改原有集合。\",\" Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); collection.add(\\\"zs\\\"); // ========================= 这个位置之前叫做迭代器生成之前 ========================= Iterator<String> iterator = collection.iterator(); while (iterator.hasNext()) { // 不能边使用，边修改原有集合。 // collection.remove(\\\"zs\\\"); String next = iterator.next(); System.out.println(next); } // ========================= 这个位置之前叫做迭代器生成之后 ========================= \"]},\"956\":{\"h\":\"foreach\",\"t\":[\"工作中一般使用foreach居多。底层也是iterator。\",\"所以需要注意，在foreach中，不要去改变Collection的结构。\",\"Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); for (String s : collection) { System.out.println(s); } \",\"// 1.存储一组学生。包括 姓名 年龄，总分，入学日期 // 2.找出总分最高的学生？ // 3.找出总分最低的学生 // 4.求平均分 // 5.删除低于平均分的学生 // 6.找出2年内入学的学生。 // 7.需要删除叫张三的学生 // 8.删除年龄小于18的学生 \",\"// 存储一组订单数据。订单的信息包括，订单号，订单金额，订单时间，订单状态(未付款、已付款、已发货、已评价)，订单更新时间 // 新建5条订单放入 // 2.找出下单时间最早的订单，并打印 // 3.找出订单状态是已付款的 // 4.找出订单金额超过200的，并且订单状态是已发货 if(order.getMonecy() > 200 && SHIPPED.equals(order.getStatus())) // 思考一下，这些条件怎么传？ 一定要注意： 命名的问题和代码抽方法的问题。 \",\"获取到一段描述后，需要掌握以下能力。将描述转化为代码的能力。\",\"总结\",\"怎样去遍历Collection接口\",\"// 使用 iterator Collection<String> collection = new ArrayList<>(); collection.add(\\\"zs\\\"); collection.add(\\\"ls\\\"); collection.add(\\\"wu\\\"); // 使用的时候，先生成一个迭代器 Iterator<String> iterator = collection.iterator(); while (iterator.hasNext()) { String next = iterator.next(); System.out.println(next); } // 使用foreach for (String next : collection) { System.out.println(next); } String[] strings = collection.toArray(new String[0]); // 数组的foreach 底层就是fori for (String string : strings) { System.out.println(string); } // 三种 迭代器，foreach，toArray \",\"如何删除Collection中所有的zs和ls数据？\",\"// 遍历，删除 // 1.方式1 // 创建一个新的集合； // 遍历原有集合。 // 判断。是否 zs ls ; 是的话，添加到新集合 // removeAll() // 遍历新集合 --》 remove() // 2.方式2 // 迭代器 // 创建一个迭代器。遍历这个迭代器(while hasNext() next() ) // 判断， 是不是zs 或者 ls 。 是的话，remove iterator.remove() // 切记，不能通过原有集合的remove() // 使用一个集合类，把所有的zs 和ls 都存起来。然后遍历集合类，再调用原有集合类的remove方法 // 使用一个集合类，存储 zs ls 调用removeAll方法 // 使用迭代器的删除方法 // Collection<String> // Collection<Student> \",\"遍历Collection接口的时候，有什么需要注意的事项\",\"注意并发修改异常。出现的原因，以及解决的办法。\",\"学习目标\",\"重点掌握List接口的特点，及其使用场景（存储数据有序，允许存储重复元素，允许存储null。）\",\"掌握List接口特殊的方法。（相对Collection，新增了很多下标的操作。 add(int index, E e) remove(int index), set(int index, E e ), get(index) indexOf lastIndexOf）\",\"掌握List接口的特有遍历方式。（iterator foreach toArray） fori\",\"ArrayList的底层结构。初始化容量，扩容策略.(数组， 10， 1.5倍)\",\"LinkedList的底层结构(双向链表)。\",\"（面试）Vector和ArrayList的区别？为什么被替换掉\",\"Stack是什么？在Java中想使用栈，应该怎么创建（Deque）\",\"一定要注意： 面试官如果和你强调 ArrayList和LinkedList的区别.你一定要知道，他是在问你数组和链表的区别。\",\"使用的时候，一般的使用方式\",\"// 一般这样用 List<String> list = new ArrayList<>(); // 不会这样用 Collection<String> collection = new ArrayList<>(); ArrayList<String> collection = new ArrayList<>(); \"]},\"957\":{\"h\":\"特点(重点)\",\"t\":[\"List是Collection的子接口。（父子继承关系，想对原有接口进行增强。）\",\"数据结构表现为线性表。\",\"存储数据有序。（存储进去的顺序和读取出来的顺序。 完全一致或者完全相反）\",\"可以存储重复元素\",\"可以存储null\",\"线性表，全名为线性存储结构。使用线性表存储数据的方式可以这样理解，即“把所有数据用一根线儿串起来，再存储到物理空间中”。\",\"image-20230130194449819\",\"就是一对一的数据结构。一个数据元素，除了第一个元素和最后一个元素，都只有一个前驱一个后继。\",\"一定要掌握。数组的插入数据，删除数据流程，查找；链表的插入数据，删除数据流程，查找。\",\"是一个超级减分项。\"]},\"958\":{\"h\":\"List 的 API\",\"t\":[\"List是Collection的子接口。所有肯定有Collection的所有方法。\",\"Collection的API我们已经学习过，所以直接学习List所特有的。\",\"// List是线性表的实现，所以它相对于Collection增加了很多下标相关的API // void add(int index, E element)： 在指定位置添加元素。list添加的位置，只能在[0,length之间] // boolean addAll(int index, Collection<? extends E> c)： 在指定位置添加一个Collection的所有元素 // E remove(int index)：删除指定下标的元素，只能删除下标的位置[0, lenth-1]。返回的是删除的元素 // E set(int index, E element)： 设置指定下标的元素为element. array[index] = element; // E get(int index)： 获取指定下标元素 // int indexOf(Object o)： 获取元素首次出现的下标。如果元素不存在。 返回的是-1 // int lastIndexOf(Object o)： 获取元素最后一次出现的下标。 // ListIterator<E> listIterator()： // ListIterator<E> listIterator(int index) // List<E> subList(int fromIndex, int toIndex) \",\"需要注意的东西\",\"画图，理清操作的是哪个位置。 \",\"add（1， “666”）\",\"add(5,\\\"888\\\")\",\"add(6，“777”)\",\"image-20220922161951139\"]},\"959\":{\"h\":\"listIterator 方法\",\"t\":[\"返回一个ListIterator的对象。这个与迭代器类似，只是可以前后移动，可以返回index。\",\"有参构造，返回的迭代器对象，调用next返回的是指定下标的元素。\",\"[0,length]\",\"public interface ListIterator<E> extends Iterator<E> //boolean hasNext() : 判断后面是否还有元素可以遍历 //E next() : 向后遍历 //void remove() : 删除刚刚遍历的数据 //boolean hasPrevious() : 向前是否可以遍历 //E previous() : 向前遍历 //int nextIndex() : 向后遍历的数据的下标 //int previousIndex() : 向前遍历的下标 //void add(E e) : 添加一个数据到当前遍历位置,并且把指针往后挪一下 //void set(E e) : 修改刚刚遍历过的元素位置 \",\"二进制的计算\"]},\"960\":{\"h\":\"subList 方法\",\"t\":[\"看名字，会误认为是： 子/截取 生成一个新的List\",\"但是其实是，返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。\",\"视图：只是原表的一个映射，并没有把数据复制一份。它和iterator很相似，只是维护了几个标记。操作subList产生的对象，会影响原来的对象。\",\"相当于，只是一个看起来和原有数组一致，可以把它理解为镜子。\",\"注意：它也会存在并发修改的问题。当生成了subList之后，如果再修改原集合。再访问subList的对象，会报错。\",\"注意一些坑：\",\"注意oom，因为subList只是一个视图，它保留了原始的数组。所以如果错误估计，可能会oom\",\"image-20230223200636090\",\"怎么出现oom，设置小堆内存。切记不要直接跑，可能会导致电脑死机 IDEA中，可以针对当前代码，设置最大的运行内存 Edit Configurations --> Add VM options --> -Xmx500m -Xms500m -Xmx500m 最大堆内存 500m -Xms500m 初始堆内存 \",\"注意并发修改异常\"]},\"961\":{\"h\":\"ArrayList\",\"t\":[\"底层是数组。JDK在实现ArrayList的时候，和我们自己写的，区别不大。怎么实现的添加。删除。\",\"大部分的东西，在List接口里面已经讲了。\",\"List<String> list = new ArrayList<>(); ArrayList<String> list = new ArrayList<>(); \",\"// 今后我们写代码的时候。 // Collection List ArrayList // 在工作中，是采用哪种方式写得多？ Collection<String> collection = new ArrayList<>(); // 第一种，尽量不要使用。因为Collection和ArrayList还隔了一层。 List<String> list = new ArrayList<>(); // 在工作过程中，最常用的一种写法。 ArrayList<String> list = new ArrayList<>(); // 也有人用。但不建议。 \",\"ArrayList是Java集合框架中的一种，它实现了List接口，可以动态地添加、删除和修改元素。与传统的数组不同，ArrayList的大小可以根据需要自动增长，因此非常适用于需要频繁添加或删除元素的场景。\",\"ArrayList内部实际上是一个动态数组，它可以存储任意类型的对象。当创建一个ArrayList时，它的初始容量是10个元素，当元素数量超过容量时，ArrayList会自动增加容量，以便能够容纳更多的元素。\",\"ArrayList提供了一系列方法，可以方便地操作其中的元素，例如add()方法可以在末尾添加元素，remove()方法可以删除指定位置的元素，get()方法可以获取指定位置的元素，set()方法可以修改指定位置的元素等等。\",\"image-20230417164529031\"]},\"962\":{\"h\":\"特点\",\"t\":[\"ArrayList是List的实现\",\"ArrayList数据结构表现为线性表\",\"底层结构是数组\",\"存储元素，有序\",\"可以存储重复元素\",\"可以存储null\"]},\"963\":{\"h\":\"构造方法\",\"t\":[\"怎么创建这个类的。\",\"// ArrayList() 构造一个初始容量为 10 的空列表。 // ArrayList(Collection<? extends E> c)：构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。 // ArrayList(int initialCapacity)：构造一个具有指定初始容量的空列表。 // List接口。 接口没有构造方法 \"]},\"964\":{\"h\":\"ArrayList 的 API\",\"t\":[\"// Object clone() // 返回此 ArrayList 实例的浅表副本。 // void ensureCapacity(int minCapacity) // 如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。 // void trimToSize() // 将此 ArrayList 实例的容量调整为列表的当前大小。 \"]},\"965\":{\"h\":\"LinkedList\",\"t\":[\"双向链表。\",\"Queue 队列\",\"Deque 双端队列\",\"LinkedList是Java集合框架中的一种，它实现了List和Deque接口，是一个双向链表。与ArrayList不同的是，LinkedList在内部并不使用数组来存储元素，而是使用一个链表来存储元素，因此可以高效地进行插入和删除操作。\",\"LinkedList的每个节点都包含了一个指向前一个节点和后一个节点的指针，因此可以方便地进行双向遍历。在向LinkedList中添加元素时，只需要创建一个新的节点，并将其插入到链表中即可。同样，在删除元素时，只需要将该元素的前后节点的指针重新指向即可，不需要像ArrayList一样将其后面的元素全部向前移动。\",\"LinkedList提供了一系列方法，可以方便地操作其中的元素。例如add()方法可以在指定位置添加元素，remove()方法可以删除指定位置的元素，get()方法可以获取指定位置的元素，set()方法可以修改指定位置的元素等等。除此之外，LinkedList还提供了一些特殊的方法，例如offer()和poll()方法用于在链表的首尾添加和删除元素，push()和pop()方法用于在链表的首部添加和删除元素等等。\"]},\"966\":{\"h\":\"特点\",\"t\":[\"LinkedList是List的子实现\",\"LinkedList数据结构表现为线性表\",\"LinkedList底层结构是双向链表\",\"存储元素有序\",\"可以存储null\",\"可以存储重复元素\"]},\"967\":{\"h\":\"LinkedList 的构造方法\",\"t\":[\"//LinkedList() // 构造一个空列表。 //LinkedList(Collection<? extends E> c) // 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列。 \"]},\"968\":{\"h\":\"LinkedList 的 API\",\"t\":[\"LinkedList里面的API分两类。第一类，是List接口继承过来的； 第二类，是Deque接口。\",\"不需要大家死记硬背。 考理解去记忆。 只要知道里面有这么个方法，完成这个事情，有什么注意事项。 如果这个API忘了，用idea点一下。\",\"队列：先进先出，从队尾进，队头出。\",\"双端队列：队头和队尾都可以进出。\",\"栈：先进后出。\",\"// 来自Collection // 来自List的 // ----------------------------来自普通队列 // boolean offer (E e) // 将指定元素添加到此列表的末尾（最后一个元素）。 // E peek () 获取但不移除此列表的头（第一个元素）。 // E poll () 获取并移除此列表的头（第一个元素） // ---------------------------- 作为Stack的 // E pop()： 从此列表所表示的堆栈处弹出一个元素。 // void push(E e): 将元素推入此列表所表示的堆栈。 // ---------------------------- 作为双端队列 // boolean offerFirst (E e) // 在此列表的开头插入指定的元素。 // boolean offerLast (E e) // 在此列表末尾插入指定的元素。 // // E peekFirst () 获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。 // E peekLast () 获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null。 // // E pollFirst () 获取并移除此列表的第一个元素；如果此列表为空，则返回 null。 // E pollLast () 获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。 // ----------------------------以下的API了解即可 // void addFirst (E e)： 将指定元素插入此列表的开头。 // void addLast (E e)： 将指定元素添加到此列表的结尾。 // E removeFirst () 移除并返回此列表的第一个元素。 // E removeLast () 移除并返回此列表的最后一个元素 // E getFirst () 返回此列表的第一个元素。 // E getLast () 返回此列表的最后一个元素。 // boolean removeFirstOccurrence (Object o) // 从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表时）。 // boolean removeLastOccurrence (Object o) // 从此列表中移除最后一次出现的指定元素（从头部到尾部遍历列表时）。 // Iterator<E> descendingIterator () 返回以逆向顺序在此双端队列的元素上进行迭代的迭代器。 // E element () 获取但不移除此列表的头（第一个元素）。 \",\"插入和删除快。真的吗？\",\"查找也需要时间，所以算起来和ArrayList类似。一般需要使用，直接使用ArrayList。除非在极个别情况下，才会用LinkedList。\",\"List<String> list = new ArrayList<>();\",\"img\"]},\"969\":{\"h\":\"Vector\",\"t\":[\"Vector是List的子实现\",\"Vector的数据结构表现是线性表\",\"底层结构是数组\",\"存储的数据有序，可重复，可存储null。\",\"线程安全。\",\"Vector是JDK1.0出现，ArrayList是JDK1.2出现。\",\"**为什么被弃用 **\",\"Vector为啥被替代。因为效率低，因为它所有的方法都有锁。\",\"效率低，在所有的接口上都加了synchronized关键字。线程安全是没问题了，但是效率却有问题。因为绝大部分都不涉及到多线程情况，所以jdk1.2采用了ArrayList来替代Vector\",\"image-20230130201817297\",\"image-20230130201836688\",\"在工作中，禁止使用Vector，面试专用。\",\"面试一般会怎么问： 1.同学，了不了解Vector。2.是否了解ArrayList和Vector的区别。3.是否了解最开始的一个线程安全的List。\",\"一般这样答：\",\"1.Vector是LIst的子实现。 List的底层是线性表。\",\"2.存储数据是否有序，是否允许存储重复元素，是否允许存储null\",\"3.线程安全问题。Vector是线程安全的，ArrayList是线程不安全的。\",\"4.ArrayList是在JDK1.2出现，出现就是为了替代Vector。所以写代码的时候，我们不用Vector.\",\"不要死记硬背面经。 八股文。一定要带着自己的理解去背，去答。\",\"补充： 什么叫线程安全问题？\",\"当多个线程同时对一个变量进行操作时，结果的预期与单线程下是一致的。这就是线程安全的。\",\"比如多个线程对i进行操作，i初始值是0，有5个线程，每个线程累加10000次。最终结果应该是50000。 但真实情况不是这样的，这就是线程安全问题。\"]},\"970\":{\"h\":\"Stack\",\"t\":[\"Stack是Vector的子实现\",\"栈，是先进后出的数据容器。但是不建议使用这个来完成，效率是大问题。使用Deque来替代Stack --》 见jdk源码\",\"image-20230130201740973\",\"在Java中，要用栈，能不能使用Stack这个类？ 不要用。因为在Stack类的上面，明确告诉你了，要用栈，使用Deque。\",\"学习目标\",\"掌握Queue的结构，以及Queue是什么。（操作受限的线性表）\",\"了解Queue两组增删查API及区别（add remove element | offer poll peek 极端情况下表现不一致）\",\"了解Deque的结构（offerFirst offerLast addFirst addLast .使用API成组使用）\",\"了解ArrayDeque的循环数组，是什么，以及为什么使用这种形式。\",\"ArrayDeque是一个循环数组。底层是一个数组，使用两个int值来代表头和尾。避免从队列中获取数据的时候，频繁挪动数据，使用int值，就可以只操作int值，来模拟头和尾，提高了效率。\",\"了解ArrayDeque的初始化容量及扩容策略。 如果传入一个非2的幂次方，它是怎么把它变成2的幂次方的。\",\"了解BlockingQueue是什么。\",\"集合类\",\"Queue：在Java中，队列（Queue）是一种数据结构，用于存储元素并支持在队列的末尾添加元素和从队列的头部移除元素。队列的工作方式类似于排队等待服务的过程。\",\"Java中的队列通常是先进先出（FIFO）的数据结构，这意味着最先添加的元素将最先被移除。Java中的队列接口（java.util.Queue）定义了队列的基本操作，如添加元素、移除元素、获取队列头部元素等。\",\"image-20230131194559788\",\"只能从队头出队列，从队尾进队列。\"]},\"971\":{\"h\":\"特点\",\"t\":[\"Queue是Collection的子接口。\",\"数据结构表现为：队列。一定要知道什么是队列。\",\"存储元素有序\",\"存储元素可重复\",\"不能存储null（除了LinkedList子实现）\"]},\"972\":{\"h\":\"API\",\"t\":[\"//boolean add(E e): 将指定的元素插入此队列（如果立即可行且不会违反容量限制），在成功时返回 true，如果当前没有可用的空间，则抛出 IllegalStateException。 //E remove():获取并移除此队列的头。 //E element() :获取，但是不移除此队列的头。 //boolean offer(E e):将指定的元素插入此队列（如果立即可行且不会违反容量限制），当使用有容量限制的队列时，此方法通常要优于 add(E)，后者可能无法插入元素，而只是抛出一个异常。 //E poll():获取并移除此队列的头，如果此队列为空，则返回 null。 //E peek(): 获取但不移除此队列的头；如果此队列为空，则返回 null。 \",\"在极端情况下，两组API的表现不一致。极端情况指的是\",\"插入的时候，队列满了\",\"删除或者获取的时候，队列空了。\",\"抛出异常\",\"返回特殊值\",\"插入\",\"add(e)\",\"offer(e)\",\"移除\",\"remove()\",\"poll()\",\"检查\",\"element()\",\"peek()\"]},\"973\":{\"h\":\"Deque\",\"t\":[\"双端队列（Deque），是一种可以在队列的两端添加或删除元素的数据结构。\",\"双端队列支持在队列的头部和尾部进行插入、删除和获取元素的操作，因此它可以同时用作栈和队列，是一种比较灵活的数据结构。在Java中，Deque接口提供了双端队列的实现，具有以下特点：\",\"可以在队列的头部或尾部添加或删除元素。\",\"可以获取队列头部或尾部的元素。\",\"可以用作栈或队列来进行数据操作。\",\"image-20230131194559788\",\"从队头可以进出，从队尾也可以进出。\"]},\"974\":{\"h\":\"特点\",\"t\":[\"Deque是Queue的子接口\",\"数据结构表现：队列，栈，双端队列\",\"存储元素有序\",\"可存储重复元素\",\"不能存储null（LinkedList除外）\"]},\"975\":{\"h\":\"API\",\"t\":[\"// ------------- 作为Queue的 // E peek()： 获取队头元素，但不移除它 // E poll()：从队头移除元素 // boolean offer(E e)： 添加一个元素到队尾 // ------------- 作为Stack的 // E pop()： 从此列表所表示的堆栈处弹出一个元素。 // void push(E e): 将元素推入此列表所表示的堆栈。 // ------------- 作为双端队列 // boolean offerFirst(E e)： 从第一个位置插入指定元素 // boolean offerLast(E e)： 从最后一个位置插入指定元素 // E peekFirst()： 获取但是不移除第一个元素，如果列表为空，返回null // E peekLast()： 获取但是不移除最后一个元素，如果列表为空，返回null // E pollFirst()： 从第一个位置移除元素 // E pollLast()： 从最后一个位置移除元素，如果列表为空，返回null // -------------- 作为普通List的 // boolean add(E e):将指定元素添加到此列表的结尾。 // E remove()：获取并移除此列表的头（第一个元素）。 // void addFirst(E e): 将指定元素插入此列表的开头。 // void addLast(E e): 将指定元素添加到此列表的结尾。 // E getFirst()： 返回此列表的第一个元素。 // E getLast(): 返回此列表的最后一个元素。 // E removeFirst(): 移除并返回此列表的第一个元素。 // E removeLast()： 移除并返回此列表的最后一个元素。 // 这个API，大家觉得应不应该出现在Deque这个接口里面。 // boolean removeFirstOccurrence(Object o)： 从此列表中移除第一次出现的指定元素 // boolean removeLastOccurrence(Object o)： 从列表中移除最后一次出现的指定元素 // Iterator<E> descendingIterator()：获取一个倒序的迭代器 // E element()：获取元素 \",\"第一个元素（头部）\",\"第一个元素（头部）\",\"最后一个元素（尾部）\",\"最后一个元素（尾部）\",\"抛出异常\",\"特殊值\",\"抛出异常\",\"特殊值\",\"插入\",\"addFirst(e)\",\"offerFirst(e)\",\"addLast(e)\",\"offerLast(e)\",\"移除\",\"removeFirst()\",\"pollFirst()\",\"removeLast()\",\"pollLast()\",\"获取\",\"getFirst()\",\"peekFirst()\",\"getLast()\",\"peekLast()\"]},\"976\":{\"h\":\"ArrayDeque\",\"t\":[\"循环数组（Cyclic Array），也称为环形数组，是一种数据结构，是数组的一种特殊形式。在循环数组中，数组的最后一个元素与第一个元素相邻，形成了一个环，因此可以通过数组下标进行循环遍历。\",\"在循环数组中，每次增加数组下标时，需要考虑到下标越界的情况。一般来说，可以将下标对数组长度取模，实现在下标增加到数组最后一个元素时，返回到数组的第一个元素。同样地，当下标减小到数组的第一个元素时，可以通过将下标加上数组长度来返回到最后一个元素。\",\"循环数组在实际应用中具有一定的优势，例如在循环队列、循环缓冲区等场景中，循环数组可以有效地实现元素的循环存储和遍历。同时，循环数组的空间利用率也相对较高，因为数组的最后一个元素可以直接连接到第一个元素，不需要额外的空间进行维护。\",\"使用两个int值来存储头和尾的位置，来避免每一次出队列都需要让所有数据都挪动一遍，提高效率。\"]},\"977\":{\"h\":\"特点\",\"t\":[\"ArrayDeque是Deque的子实现\",\"数据结构表现：队列，栈，双端队列\",\"底层实现： 。要理解一下循环数组的好处。\",\"存储元素有序\",\"存储元素可重复\",\"不可存储null\"]},\"978\":{\"h\":\"构造方法\",\"t\":[\"ArrayDeque() 构造一个初始容量能够容纳 16 个元素的空数组双端队列。 扩容机制 *2 ArrayDeque(Collection<? extends E> c) 构造一个包含指定 collection 的元素的双端队列，这些元素按 collection 的迭代器返回的顺序排列。 ArrayDeque(int numElements) 构造一个初始容量能够容纳指定数量的元素的空数组双端队列。 容量问题。如果传入的初始化容量小于8，则直接分配8个空间，如果传入的数字大于等于8，则直接找到(大于)数字的最近一个2的幂次方。 \",\"一个结论： 如果b是2的幂次方,(2 4 8 )。 a%b = a&(b-1) 1053876 % 100 = 76 = (1000000 + 50000 + 3000 + 800 + 76) % 100 = 76 ： 方便理解这个过程、 53 % 16 = (0011 0101) % (0001 0000) = (0011 0101) & (0000 1111) a % b = a & (b-1) \",\"20586 % 100 = (20000 + 500 + 86) % 100 = 86 \",\"53 % 16 = = 1111 0101 % 0001 0000 = 1111 0101 & 0000 1111 = a % b = a & (b-1) \",\"循环数组。tail 的计算公式是 tail = (tail +1) % length\",\"public void addLast(E e) { if (e == null) throw new NullPointerException(); elements[tail] = e; // tail就是尾指针 head就是头指针。 // 先思考一个问题： 什么时候会扩容。 // (tail = (tail + 1) & (elements.length - 1)) <==> tail = (tail + 1) % length if ( (tail = (tail + 1) & (elements.length - 1)) == head) doubleCapacity(); } \",\"2的幂次方。 是类似于2的一次方，2的二次方，2的三次方。\",\" 10568 % 100 = (10000 + 500 + 68) % 100 = 0 + 0 + 68 = 68 a % b = a & (b-1) 53 % 16 = 0011 0101 % (0001 0000) = (0011 0101) & (0000 1111) = (0000 0101) 如果能理解更好，不能记住，先死记住。 b是2的幂次方。 a % b = a & (b-1) 如果不会推导，直接记死这个结论。 53 % 16= 00110101 = 0010 0000 + 0001 0000 + 0000 0101 00010000 =53& (16-1) 0011 0101 =0000 1111 十进制： 10568 % 100 = (10000 + 500 + 68) % 100 b是2的幂次方。 2 --》 10 4 --》 100 8 --》 1000 34 % 16 = 0010 0010 % 0001 0000 0010 0010 0001 0000 0010 0010 &0000 1111 例如 34 % 16= 0010 0010 % 0001 0000 = 0010 0010 & (0000 1111) = 01000 0010 0010 & 0000 1111 0000 0010 = 2 34%16 = 2 \",\"image-20230131200522855\",\"比如：\",\"24=0001 1000\",\"32=0010 0000\",\"24 --》 32（0010 0000） 32 --》64（0100 0000） // 19 private static int calculateSize(int numElements) { // initialCapacity = 8； // int MIN_INITIAL_CAPACITY = 8; int initialCapacity = MIN_INITIAL_CAPACITY; // Find the best power of two to hold elements. // 19 >= 8 成立的。 if (numElements >= initialCapacity) { // initialCapacity = 19 initialCapacity = numElements; // a += 3; ===> a = a+1 // initialCapacity |= b; ==> initialCapacity = initialCapacity | b // initialCapacity = 0001 0011 // (initialCapacity >>> 1) = 0000 1001 // initialCapacity |= (initialCapacity >>> 1); // initialCapacity = initialCapacity | (initialCapacity >>> 1) // 0001 0011 = initialCapacity // 0000 1001 = (initialCapacity >>> 1) // 0001 1011 initialCapacity |= (initialCapacity >>> 1); // 0001 1011 = initialCapacity // (initialCapacity >>> 2) = 0000 0110 // 0001 1011 = initialCapacity // 0000 0110 = (initialCapacity >>> 2) // 0001 1111 initialCapacity |= (initialCapacity >>> 2); initialCapacity |= (initialCapacity >>> 4); initialCapacity |= (initialCapacity >>> 8); initialCapacity |= (initialCapacity >>> 16); initialCapacity++; if (initialCapacity < 0) // Too many elements, must back off initialCapacity >>>= 1;// Good luck allocating 2 ^ 30 elements } return initialCapacity; } \",\"24 --》 32（0010 0000） 32 --》64（0100 0000） // 找到大于这个值的最小2的幂次方。 // 32 private static int calculateSize(int numElements) { // initialCapacity = 8 int initialCapacity = MIN_INITIAL_CAPACITY; if (numElements >= initialCapacity) { // initialCapacity = 32 = 0010 0000 initialCapacity = numElements; // 0010 0000 = initialCapacity // 0001 0000 = (initialCapacity >>> 1) // 0011 0000 ==> initialCapacity initialCapacity |= (initialCapacity >>> 1); // 0011 0000 = initialCapacity // 0000 1100 = (initialCapacity >>> 2) // 0011 1100 ==> initialCapacity initialCapacity |= (initialCapacity >>> 2); // 0011 1100 = initialCapacity // 0000 0011 (initialCapacity >>> 4) // 0011 1111 initialCapacity |= (initialCapacity >>> 4); initialCapacity |= (initialCapacity >>> 8); initialCapacity |= (initialCapacity >>> 16); // 64 initialCapacity++; if (initialCapacity < 0) // Too many elements, must back off initialCapacity >>>= 1;// Good luck allocating 2 ^ 30 elements } return initialCapacity; } \"]},\"979\":{\"h\":\"BlockingQueue\",\"t\":[\"阻塞队列。\",\"什么叫阻塞队列。一个大小有限的队列。\",\"插入时，。\",\"从队列中获取元素时，。\",\"image-20230201142123219\",\"学习目标：\",\"掌握Set接口存储数据的特点\",\"掌握Set的子类。HashSet，LinkedHashSet，TreeSet存储数据的特点 \",\"是否有序\",\"对重复的定义\",\"是否允许存储null\",\"了解Set子类的实现方式\",\"熟练掌握Set的使用场景\"]},\"980\":{\"h\":\"特点\",\"t\":[\"Set是Collection的子接口\",\"Set数据结构是: 集合（不能存储重复元素）\",\"有些子实现无序(HashSet), 有些子实现是有序的(LinkedHashSet, TreeSet大小有序)\",\"所有子实现都不允许存储重复元素（什么叫重复。 HashSet或者LinkedHashSet hashCode相同& equals 为true TreeSet是Comparable接口返回0，叫重复。）\",\"有些子实现允许存储null(HashSet, LinkedHashSet), 有些子实现不允许存储null(TreeSet)\"]},\"981\":{\"h\":\"Set的API\",\"t\":[\"// -------------------------set接口, 没有在Collection的基础上额外定义什么api--------- // ---------------------------------增删改查方法--------------------------------- // boolean add(E e): 添加一个元素进入Collection // boolean addAll(Collection<? extends E> c): 添加一个Collection进指定的Collection // boolean remove(Object o)： 删除元素， 只删除第一个出现的(如果存在多个) // boolean removeAll(Collection<?> c)： 删除Collection中的所有存在的元素,会全部删除，如果存在多个 // boolean contains(Object o)： 判断是否存在指定元素 // boolean containsAll(Collection<?> c)： 判断给定的collection中是否全部存在于目标Collection // boolean retainAll(Collection<?> c)： 将原有collection只保留传入的collection。 // ---------------------------------特殊方法--------------------------------- // void clear()： 清空collection // boolean equals(Object o) ： 判断是否相等 // int hashCode()： 计算hashCode // boolean isEmpty(): 是否为空 // int size()： collection里面的元素个数 // // ---------------------------------方便遍历方法--------------------------------- // Object[] toArray(): 将collection转成一个数组，方便遍历， // <T> T[] toArray(T[] a)：类似，只是传入了一个数组 // Iterator<E> iterator()：返回一个迭代器 \"]},\"982\":{\"h\":\"HashSet\"},\"983\":{\"h\":\"HashSet的特点\",\"t\":[\"HashSet是Set接口的子实现\",\"HashSet底层持有了一个HashMap对象 \",\"我们存储到HashSet中的数据, 实际上都存储到底层持有的HashMap的key上\",\"HashSet的特点和HashMap对key的特点保持一致\",\"HashSet存储数据无序\",\"HashSet不允许存储重复数据。注意这个重复的定义。\",\"HashSet允许存储null元素\"]},\"984\":{\"h\":\"HashSet的构造方法\",\"t\":[\"HashSet() 构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75。 HashSet(Collection<? extends E> c) 构造一个包含指定 collection 中的元素的新 set。 HashSet(int initialCapacity) 构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（0.75）。 HashSet(int initialCapacity, float loadFactor) 构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子。 \"]},\"985\":{\"h\":\"HashSet的api\",\"t\":[\"// ----------HashSet , set接口, 没有在Collection的基础上额外定义什么api--------- \"]},\"986\":{\"h\":\"LinkedHashSet\"},\"987\":{\"h\":\"LinkedHashSet的特点\",\"t\":[\"LinkedHashSet是HashSet一个子类\",\"LinkedHashSet底层持有一个LinkedHashMap对象 \",\"LinkedHashSet的特点和LinkedHashMap的key保持一致\",\"LinkedHashSet存储数据有序\",\"LinkedHashSet 不允许存储重复数据\",\"LinekdHashSet允许存储null\",\"线程不安全\",\"与HashSet唯一的不同：\",\"存储数据有序\",\"我们所有的集合类，基本没提过线程安全，都是线程不安全的。\",\"线程安全的都被干掉。 Vector Hashtable\",\"ArrayList LinkeList\"]},\"988\":{\"h\":\"LinkedHashSet的构造方法\",\"t\":[\"LinkedHashSet() 构造一个带默认初始容量 (16) 和加载因子 (0.75) 的新空链接哈希 set。 LinkedHashSet(Collection<? extends E> c) 构造一个与指定 collection 中的元素相同的新链接哈希 set。 LinkedHashSet(int initialCapacity) 构造一个带指定初始容量和默认加载因子 (0.75) 的新空链接哈希 set。 LinkedHashSet(int initialCapacity, float loadFactor) 构造一个带有指定初始容量和加载因子的新空链接哈希 set。 \"]},\"989\":{\"h\":\"LinkedHashSet的api\",\"t\":[\"// --LinkedHashSet, HashSet , set接口, 没有在Collection的基础上额外定义什么api--------- \"]},\"990\":{\"h\":\"TreeSet\"},\"991\":{\"h\":\"TreeSet的特点\",\"t\":[\"TreeSet是Set接口的子实现\",\"TreeSet底层持有了一个TreeMap对象 \",\"TreeSet存储数据的特点和TreeMap的key保持一致\",\"TreeSet存储数据大小有序（大小有序 不是存储的顺序）\",\"TreeSet不允许存储重复数据: ( Comparable接口返回的 是0 ；大小重复)\",\"TreeSet不允许存储null\",\"线程不安全\"]},\"992\":{\"h\":\"TreeSet的构造方法\",\"t\":[\"TreeSet() 构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。 TreeSet(Collection<? extends E> c) 构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的自然顺序进行排序。 TreeSet(Comparator<? super E> comparator) 构造一个新的空 TreeSet，它根据指定比较器进行排序。 TreeSet(SortedSet<E> s) 构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet。 \"]},\"993\":{\"h\":\"TreeSet的api\",\"t\":[\"// --TreeSet , set接口, 没有在Collection的基础上额外定义什么api--------- NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) 返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。 SortedSet<E> subSet(E fromElement, E toElement) 返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。 SortedSet<E> tailSet(E fromElement) 返回此 set 的部分视图，其元素大于等于 fromElement。 NavigableSet<E> tailSet(E fromElement, boolean inclusive) 返回此 set 的部分视图，其元素大于（或等于，如果 inclusive 为 true）fromElement。 // 见到这名字，你知不知道这个API在干啥？ // 不太知道。 搜一下。或者ChatGPT一下。 \",\"**有序 **\",\"LinkedHashSet （有序的）--》 它的有序，指的是 add 顺序。添加进去的顺序\",\"TreeSet (有序的)-->是根据 Comparable 返回的结果。\",\"重复\",\"LinkedHashSet HashSet ： hashCode && （equals）\",\"TreeSet：   Comparable 返回0\"]},\"994\":{\"h\":\"22. Map\",\"t\":[\"学习目标：\",\"会使用Map的增删改查API。遍历Map的方式\",\"掌握HashMap存储数据的特点\",\"熟练掌握对常见的场景进行Map的使用.你的业务怎样需要，Map的key和value就可以怎样定义。\",\"掌握HashMap的底层结构（面试）\",\"掌握HashMap的添加一份key-value数据的流程\",\"掌握HashMap的初始化容量及扩容机制，对重复的key的定义\",\"掌握LinkedHashMap和TreeMap存储数据的特点\",\"重点，难点，面试常考点\",\"面试的时候问集合。 90%会问到HashMap。\",\"是否了解List接口，Set接口，Map接口。\",\"是否了解List的子类。有什么特点？数组和链表。\"]},\"995\":{\"h\":\"Map是什么\",\"t\":[\"什么是Map呢？Map就是用来存储键值对的接口，注意，它与Collection的区别。Collection存储的是单列数据，Map存储的键值对。什么叫键值对。就是一个key，一个value。我们举一个生活中的例子，我们把一些常见的公共电话与它的功能做一个对应。\",\"比如 110 是警察局\",\"120 是医院\",\"119 是火警\",\"122 是车辆救援\",\"12345 是消费者权益保护。用一个键，可以快速获取一个值。\",\"比如，如果我们想在1-20中间随机生成10000个数，需要记录每个数生成了多少次，怎么存呢？\",\"那如果是 1-10_000_000中间生成1000次呢？\",\"使用数组实现不现实。 如果是int范围内生成呢？\",\"需要使用Map。\",\"等学完了Map的API，实现一下。\"]},\"996\":{\"h\":\"特点\",\"t\":[\"Map是Map体系的顶级接口，用来存储键值对数据\",\"Map存储的数据，有一些子接口有序，有一些无序\",\"Map存储的数据，不能重复（指的是key）\",\"Map存储的数据，有一些允许为null，有一些不允许。（指的key）\"]},\"997\":{\"h\":\"API\",\"t\":[\"//---------------------------新增，删除，查找数据接口 // V put(K key, V value): 添加键值对。 如果键存在，是更新数据 // void putAll(Map<? extends K,? extends V> m)： 将一个map的所有键值对都放入这个map // V get(Object key)： 根据一个key，获取value，如果key不存在，返回null // V remove(Object key)： 删除map中所包含的这个key // boolean containsKey(Object key): 判断map中是否包含这个key // boolean containsValue(Object value): 判断map中是否包含这个value //---------------------------辅助接口 // void clear() : 清空map // boolean equals(Object o)： 判断两个map是否相等 // int hashCode(): 返回此映射的哈希码值。 // boolean isEmpty(): map中是否有元素 // int size() ：返回键-值映射关系数。 //---------------------------视图方法 // 在Map里面 Entry 代表存储了key和value的一个接口体 // Set<Map.Entry<K,V>> entrySet()： 返回此映射中包含的映射关系的 Set 视图。 // Set<K> keySet()： 返回此映射中包含的键的 Set 视图。 // Collection<V> values()： 返回此映射中包含的值的 Collection 视图。 \",\"实现一下这个\",\"如果我们想在1-20中间随机生成10000个数。怎么存？\",\"1-10_000_000中间生成1000次？\",\"班级里有一些学生，我想根据省份进行分组，应该怎么做？\",\"private static List<Student> generateStudents() { List<Student> students = new ArrayList<>(); List<String> provinceList = Arrays.asList(\\\"hubei\\\", \\\"hunan\\\", \\\"guangdong\\\"); for (int i = 0; i < 50; i++) { Student student = new Student(); student.setName(\\\"student\\\" + i); student.setAge(15); // 从省份的list中，获取出一个省份，设置到学生上 String province = provinceList.get(i % 3); student.setProvince(province); students.add(student); } return students; } class Student { String name; int age; String province; } \",\"要学会完成抽象化的任务\",\"比如你想统计一个班上每个省份的学生人数。应该怎么设计这个Map？\",\"想统计一个班上，男生和女生的人数\",\"一个班级的，语文分按照 [0,60), [60,80), [80,100]分三个层级 差，良，优秀。怎么统计每个层级的人数？(抽方法有什好处)\",\"Map进行增删改查的API\",\"遍历Map的key-value数据的方式\"]},\"998\":{\"h\":\"准备知识\"},\"999\":{\"h\":\"什么是Hash\",\"t\":[\"映射（函数）的概念：\",\"设A和B是两个非空集合，并存在某种对应关系f\",\"按照这种对应关系f，对于集合A中的任何一个元素a，在集合B中都存在一个元素b与之对应\",\"那么，这样的对应（包括集合A，B，以及集合A到集合B的对应关系f）叫做集合A到集合B的映射\",\"y=f(x)。 一个x对应一个y。 一个y可能对应多少个x。\",\"对于一个x，只能有一个y与之对应\",\"对于一个y，可以有多个x与之对应。\",\"映射。 对于一个x，只能有一个y；对于一个y,可能有多个x\",\"注意：\",\"映射不要求元素一一对应，允许出现多对一，但绝不允许一（x）对多(y)。\",\"明白映射的概念后，哈希映射(hash)就不难理解了。哈希映射也是一种特殊的映射，要求：\",\"集合A（x）必须是一个无限大小，具有无穷多元素的集合。\",\"集合B(y)必须是一个元素有限的集合。\",\"x是无限的，y是有限的。 一定会出现，一个y对应多个x。\",\"y=f(x)\",\"化无限为有限，这就是哈希映射。将任意长度的输入通过散列算法变换成固定长度的输出。\",\"在哈希映射当中，集合A和B之间的对应关系f，就是一种映射的规则，称之为哈希函数、哈希方法或者哈希算法等。\",\"而通过哈希算法，求得的集合B中的元素，称之为哈希值。\"]},\"1000\":{\"h\":\"好的Hash算法希望的特点\",\"t\":[\"y=f(x).也希望尽可能的均匀。\",\"因为输入是无限数目的。而hash算法的结果(hash值)是有限的。所以肯定会遇到碰撞(hash值相同)。\",\"好的hash算法希望对于不同的输入，得到不同的输出结果。\"]},\"1001\":{\"h\":\"2的幂取余问题\",\"t\":[\"// 先说一个结论 // 1.当 b 是2的幂次。则 a % b = a & (b-1) // 比如 25 % 16 // 25 % 16 // = 11001 % 10000 // = 11001 & (10000-1) // = 11001 & 01111 // = 01001 // 2.当b是2的幂次， a%b 相当于是取a的低位。 53 % 16 = （0011 0101） % （0001 0000） =（0011 0101） & （0000 1111） = 0101 \"]},\"1002\":{\"h\":\"HashMap的底层结构\",\"t\":[\"HashMap底层结构是数组+链表+红黑树。\",\"HashMap的底层结构是一个数组。 想往HashMap中添加一个键值对。要经过哪些流程呢？\",\"首先，会对键，计算得到一个int类型的值\",\"然后与数组长度取余，得到键在数组上的位置。（为什么要取余， 因为整数太大了，数组不一定能存下。 ）\",\"如果数组位置上没有元素，则直接插入\",\"如果数组位置上有元素，我们采用的链表，存储落在同一个位置上的元素。挨个比较，比较完成后，如果没有就插入到链表的最后一个位置\",\"链表太长了有什么问题？\",\"效率太低，因为比如链表有1w个节点，那就要比较1w次。效率差。所以链表太长了时会转化为红黑树。\",\"面试题： 为什么HashMap的底层，是数组+链表+红黑树？\",\"把添加的流程答出来，然后分析，链表是必不可少的（因为存在多个key落在同一个数组位置）。如果链表长度太长，这时候，效率太差，采用红黑树提高效率。\",\"答面试题，一定要注意，听懂面试官的问题。你要知道他在考你什么。\",\"有的时候，如果就是没听懂，怎么办？\"]},\"1003\":{\"h\":\"特点\",\"t\":[\"HashMap是Map接口的子实现。用来存储key-value数据\",\"底层结构，是数组+链表+红黑树\",\"数组默认长度16，扩容机制是2倍。（数组的长度一直是2的幂次方， a%b = a&(b-1)）\",\"存储元素是无序的。对于key来说的\",\"不允许存储重复元素， 重复是指的它的键\",\"允许存储null。对于key来说的\",\"为什么HashMap的底层是数组+链表+红黑树。\",\"错误答法：不知道。写JDK那帮人写得。\",\"如果不知道，可以说不知道。但是不要说的这么理所当然。\",\"一定要注意一个问题。 面试的时候，要去理解记忆。不要一股脑全背出来。\"]},\"1004\":{\"h\":\"HashMap的一些注意事项(面试题)\"},\"1005\":{\"h\":\"初始化容量及扩容\",\"t\":[\"// HashMap的底层是数组+链表+红黑树。 // 数组默认长度是16。 扩容机制2倍 // 所以说明 // 1.数组长度一直都是2的幂次。说明 a%b=a&(b-1) // 我们的第二步，对计算得到的int值，对数组长度进行取余。 可以转换以下 hash % length = hash & (length - 1) \"]},\"1006\":{\"h\":\"加载因子\",\"t\":[\"// HashMap底层是数组+链表+红黑树。如果不限制，其实可以存无限的数据，但是这样效率较低 // 在HashMap底层维护的了一个加载因子，用来表示存储到多少就会扩容 // 比如默认的数组长度是16。 加载因子是0.75f // 阈值 = 16 * 0.75（加载因子） = 12 // HashMap存储的key-value数据数目超过 阈值, 就要引发数组扩容 // key-value键值对的数目，包括链表上挂着的东西。 // 加载因子是控制什么事情？ 主要是控制数组上能存储的数据。 // 加载因子。不建议大家调整。JDK 0.75 结合工程实践，对很多场景进行测试。所以loadFactor不建议大家调整。 // if (++size > threshold) // resize(); // 0.75*16 // threshold = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); // 思考一下，添加数据的效率，查找数据的效率，删除数据的效率。 大概是多少？ \"]},\"1007\":{\"h\":\"HashMap底层数组结构\",\"t\":[\"// HashMap底层数组存储的key-value 是以Node结点存储的 // 里面存储了四个东西， key值 value值 hash 下一个节点 class Node{ K key, V value, int hash, Node next } Node[] \"]},\"1008\":{\"h\":\"hash的计算\",\"t\":[\"static final int hash(Object key) { int h; // key==null // 1.为null的时候，返回0 // 2.不为null。 返回后面的。 // (h = key.hashCode()) ^ (h >>> 16) // 首先计算hashCode。赋值给h。 h无符号右移16位， 再取异或。 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } // 为什么要这样写。 直接hashCode，代码也能跑。为啥要 // 2.当b是2的幂次， a%b 相当于是取a的低位。 // 53 % 16 = （0011 0101） % （0001 0000） =（0011 0101） & （0000 1111） = 0101 // 如果是直接计算hashCode. 那最后得到的下标，只有低位会参与。 // 假设hashCode // 有一个key 的hashCode： 0101 1010 // 还有个keyu hashCode 1101 1010 // 对16进行取余。 // 也可以思考一下： 为什么使用的是 ^; 为什么没有用这两个 & | \",\"// hash() 就是为了计算给定的key的int值 static final int hash(Object key) { int h; // key == null // 如果key为null的时候，返回0 // 如果key不为null。 (h = key.hashCode()) ^ (h >>> 16) // 计算hashCode. h=hashCode // (h) ^ (h >>> 16) // 就是为了让计算 得到下标的时候。高位和低位同时生效。 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } // a % b = a & (b-1) // 0010 0111 0110 0110(10086) //& 0000 0000 0000 1111 // a和b取余的时候。 谁生效 低位生效 (hashCode) ^ (hashCode >>> 8) \",\"// (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16) // 对于任意一个输入，我们需要得到一个数字与之对应 // 如果key为null，则直接返回0 // 如果key不为null。首先计算hashCode。然后hashCode无符号右移动16位，然后与原数取异或。 // 是为了充分混合，让key落得位置更加均匀。 // 数组长度是2的幂次。 对这个2的幂次取余，最终起效果的就是数字的 后面位置。 // 例如，计算得到的hash值是77。 // 当数组底层长度是n的时候。计算得到的下标： // 16: 77(0100 1101) % 16(0001 0000) // 77(0100 1101) & (0000 1111) // = 0100 1101 & 0000 1111 = 1101 (就是最后四位，取的低位) // 这时候，高位和低位取个异或，会让高位和低位对在数组上的下标起作用 \"]},\"1009\":{\"h\":\"（重要） HashMap对重复的key的定义\",\"t\":[\"// p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))) // p就是 当前数组位置的元素。 Node( hash key value next) // 如果你传入的key， 计算得到的hash和 数组上元素的hash相同。 这时候才会进入后面的逻辑。 // ((k = p.key) == key || (key != null && key.equals(k))) // 如果传入的key和我数组上的key 是同一个(地址相同) ； 或者equals返回true，也认为是相同的。 // 如果key等于null的时候呢？ // 在前面的代码已经判断出来了。 (k = p.key) == key \",\"// p指的是原本存在的元素 // hash 是我们传入的hash值（int） key // (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) // 1.hash值相同，才往下判断 // 2.如果地址相同。 || 如果equals返回相同， // 为什么需要重写？ // 比如，现在使用自定义的类 User(name, age)作为key。 // 为什么必须要重写hashCode和equals方法？ // 1.计算int值。计算int hashCode。 // 2.代码这里，怎么判断相等的？ new User(\\\"zs\\\", 18); new User(\\\"zs\\\", 18) \",\"这就要求我们，使用一些类作为key时。必须同时重写hashCode和equals方法。\",\"不建议大家使用自定义的类当做key。一般使用字符串或者Integer。\"]},\"1010\":{\"h\":\"存储重复元素\",\"t\":[\"map.put(\\\"zs\\\", \\\"hubei\\\");\",\"map.put(\\\"zs\\\", \\\"hunan\\\");\",\"HashMap不允许存储重复的key, 当我们存储一份重复的key-value数据时, 是直接用新value是替代旧value，然后，返回了旧值。\"]},\"1011\":{\"h\":\"链表什么时候转化为红黑树\",\"t\":[\"// 当某个下标位置, 链表长度, 超过8达到9个时候(算上新加的结点), 就要由链表转化为红黑树 \"]},\"1012\":{\"h\":\"当链表数目从8到达9，一定会转化为红黑树吗？\",\"t\":[\"// 不一定会 // 如果数组的长度小于64.直接resize 扩容。 // 如果数组长度, 小于64, 即使某个下标位置,链表长度已经超过8, 达到9了, 不会转化为红黑树, 而是扩容, 扩容会导致原本存在于这个位置的数据, 拆成两部分 \",\"思考一下，为什么这么设计？\",\"当链表的长度，到达9的时候，会转化为红黑树。\",\"数组长度是32。是最大的情况。\",\"当前位置，有9个元素。其他31个位置，假设已经有12个元素。阈值是32*0.75=24.\",\"当前元素，有 9 +12 = 21。所以，过一会，可能就扩容了。\",\"与其现在把链表转换为红黑树，等会扩容了又会变成链表，不如我直接扩容。设计者认为这样设计，可以提高效率。\"]},\"1013\":{\"h\":\"扩容后位置问题\",\"t\":[\"// 现在，假设位置在x位置上的元素，扩容之后会落到新数组的什么位置 // 旧数组的容量 16 // 新数组的容量 32 // hash % 16 = x ==> hash = x + 16 * n // hash % 32 = (x + 16 * n) % 32 = x 或者 x+16 // x = hash % Oldlen = hash % 16 // 用x把hash表示出来。 hash = x + 16 * n // 现在落在新数组什么位置： hash % 32 = (x + 16 * n) % 32 = x + 16 ; x // 所以说，就只能落在两种位置： 要么原index位置，要么index + oldCapacity // 在HashMap中, 存储的数据量大于HashMap的阈值(加载因子*数组长度), 会产生扩容, 当扩容之后一个原本在旧数组x位置的key-value数据, 要和新数组长度取模,得到一个新的下标, 这个新的下标只有两个选择: x位置, 旧数组长度+x的位置 // 扩2倍。 \"]},\"1014\":{\"h\":\"红黑树转化为链表\",\"t\":[\"// 有两个情况: // 第一个情况, 删除数据的时候; 要删除的数据在红黑树上, 删除数据导致红黑树上数据量变少, 由红黑树转化为链表 // 第二个情况: 扩容的时候, 一个红黑树再扩容之后, 被拆成两部分, 任一部分数据量过少, 也会由红黑树转化为链表 // 红黑树拆成低位(旧位置)和高位(旧位置+旧数组长度: 新位置)两部分, 这两部分, 任何一部分分配的数据量小于等于6个, 就要由红黑树转化为链表 \"]},\"1015\":{\"h\":\"如果我们在HashMap已经添加了一份key-value数据, 建议尽量不要再通过key的引用直接修改key, 有可能会无法 再操作这个数据 (了解)\",\"t\":[\"// 重写了hashCode和equals。则两个对象的hashCode是一样的。落在了数组上的同一个位置。 // 如果这时候通过了原对象的引用去修改了变量值。则会导致一个现象。hashCode会改变。不会落在同一个位置。则操作不会生效，比如remove。 // 建议： Map里面的key, 直接用String. // 不要通过引用来修改。 \"]},\"1016\":{\"h\":\"（重要） HashMap的添加流程\",\"t\":[\"// 1.当我们想往一个HashMap中添加一个数据。 key=zs,value=20 // 2.对key计算它的hash。 也就是对zs取hash。 // 计算hash的方法：(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16) // 3.使用计算得到的hash。与数组长度取余，得到这个key在数组上的位置 // a%b=a&(b-1) // 4.检查数组位置上是否有键值对。 // 4.1 如果数组上没有元素，则直接新建节点，然后插入到数组。 // Node key,value,hash,next(Node) // 4.2 如果数组位置有元素，比较是否相等。 // 怎么判断相等：p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))) // 1)如果相等，则直接使用新的value替代旧的value。结束 // 2)如果不相等，则挨个进行比较。 链表直接调用next，树就是左小右大。一直比较到没有元素。 // 一直到最后一个。 // 5.如果是链表，插入后的长度超过阈值(8)。则会转化为红黑树 // 如果数组长度小于64。不会转化为红黑树，会直接进行扩容。 // 6.如果没有重复，插入后，map中节点数超过阈值。 默认为数组长度的0.75。则会进行扩容，扩容2倍。 // 扩容后的位置： x或x+len 。len为数组的长度。 // 7.上述所有的扩容, 都有可能导致原本数组某个位置如果有红黑树, 红黑树被拆成两部分(低位和高位), 任一位置结点数变少, 又有可能导致红黑树转化为链表 \",\"// 比如，我们现在想存储 zs,18进入我们的HashMap。 它会经历怎样的痛苦。 流程 // 1.对key进行计算，得到一个int值。 zs // (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); // 2.对数组长度进行取余。 hash % length = hash & (length) ( a%b = a&(b-1)) // length是2的幂次方。 数组初始长度是16，扩容是2倍。 // 3.如果数组位置没有元素，直接将数据存储到该数组位置。 // K key,V value,int hash,Node next // 4.如果数组位置有元素， 会进行比较 // 4.1 如果不相等。 挨个进行比较。 如果是链表，按链表的方式进行比较； 如果是红黑树，按照红黑树的方式进行比较 // HashMap中，什么叫key相等。 (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) // 4.2 如果最后发现，没有相同的key。挂到链表的尾端。 // 链表长度如果过长。会转换为红黑树。链表长度超过8，到达9的时候。会转换为红黑树‘ // 超过8，到达9，是否一定会转化为红黑树。 --》 有可能会导致扩容。 // 扩容后的位置问题： x 或者 x+oldCapacity // 5.如果上述插入了。可能会导致扩容。 \",\"// 删除方法 // 查找方法 // 把添加流程弄懂，其他的流程很好弄懂。 \"]},\"1017\":{\"h\":\"HashMap的构造方法\",\"t\":[\"HashMap() 构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。 HashMap(int initialCapacity) 构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。 会找到大于等于当前值的一个2的幂次方 HashMap(int initialCapacity, float loadFactor) 构造一个带指定初始容量和加载因子的空 HashMap。 HashMap(Map<? extends K,? extends V> m) 构造一个映射关系与指定 Map 相同的新 HashMap。 \"]},\"1018\":{\"h\":\"HashMap的API\",\"t\":[\"//---------------------------新增，删除，查找数据接口 // V put(K key, V value): 添加键值对 // void putAll(Map<? extends K,? extends V> m)： 将一个map的所有键值对都放入这个map // V get(Object key)： 根据一个key，获取value，如果key不存在，返回null // V remove(Object key)： 删除map中所包含的这个key // boolean containsKey(Object key): 判断map中是否包含这个key // boolean containsValue(Object value): 判断map中是否包含这个value //---------------------------辅助接口 // void clear() : 清空map // boolean equals(Object o)： 判断两个map是否相等 // int hashCode(): 返回此映射的哈希码值。 // boolean isEmpty(): map中是否有元素 // int size() ：返回键-值映射关系数。 //---------------------------视图方法 // Set<Map.Entry<K,V>> entrySet()： 返回此映射中包含的映射关系的 Set 视图。 // Set<K> keySet()： 返回此映射中包含的键的 Set 视图。 // Collection<V> values()： 返回此映射中包含的值的 Collection 视图。 \"]},\"1019\":{\"h\":\"组装数据\",\"t\":[\"有三个类，其中一个存着学生的一些信息\",\"// 工作中，一般都是这种业务题。 // 类的命名： 大驼峰。 UserService UserServiceImpl // 方法的命名： 小驼峰 getStudentInfo() // 变量的命名: 小驼峰 // 常量的命名： 全大写字母。 字母分割用 _ // 一组学生数据，学生信息里有以下信息。 // (id, name, age, teacher_id) // 一组班主任数据，有以下信息 // (id, name, age) // 我们这样认为：一个老师对应n个学生，一个学生只对应一个老师。 // 现在需求方需要一个数据，需要返回 班主任的信息，然后和对应班级同学的信息。 // 提供两份数据： // List<Teacher> teachers = new ArrayList<>(); // List<Student> students = new ArrayList<>(); class Grade{ Teacher teacher; List<Student> students; } // key是老师id。value是学生集合。 List<Grade> \"]},\"1020\":{\"h\":\"特点\",\"t\":[\"Hashtable是Map接口的一个子实现\",\"Hashtable底层结构是数组+链表 (和HashMap在jdk1.8之前是一样的)\",\"底层数组默认的初始长度11 ; 默认的扩容机制 2倍+1 .\",\"存储元素无序\",\"不允许存储重复的key: (对key的重复的定义和HashMap一样)\",\"不允许存储null作为key, 也不允许存储null作为value\",\"线程安全\",\"jdk1.0时候出现, (HashMap是jdk1.2时候出现, HashMap的出现就是为了取代Hashtable的)\",\"一般面试官问，了解HashMap和Hashtable吗？\",\"说一下HashMap和Hashtable的区别？ 同学，是否了解Hashtable。\",\"首先先说一下共同点 1.两个都是Map的子实现。都用来存储key-value数据 2.在1.8之前，两者底层结构都是数组+链表。但在1.8之后，HashMap变成了数组+链表+红黑树。 3.存储元素无序，都不能存储重复元素。HashMap允许存储null。Hashtable不允许存储null // 如果记得，你就答一下。如果不记得。可以直接跳过。 // 不要在这想。如果忘记了，不要在这想太久，（比如想2min） 4.HashMap线程不安全，Hashtable线程安全。 5.HashMap在1.2出现，就是为了替代Hashtable的。新写代码不使用Hashtable \",\"面试答问题，要往自己熟悉的上面引。不要瞎引。\",\"面试官问你一个问题，你要把自己熟悉的都答出来，不要面试官问你什么你就答什么，这样会很被动。\",\"不能面试官问你，了解这个吗。你说了解。 面试官问你使用过这个吗。你说使用过。 面试官问你这个，是想让你说你的认识。不是想听你回答了解，使用过这些的。大家要注意。 \",\"1.掌握先大后小顺序。先把整体的印象答出来。比如是谁的接口，用来干什么。\",\"答好了之后，再答细节。切记上来就开始答细节。\",\"2.要有逻辑。不要左答一点，右答一点。面试是向面试官展示你思考方式的机会。\",\"不是说面试官提了10个题，你答了9个。就通过了。\",\"面试官是试图通过这10个题，了解你的基础，了解你解问题的思路。了解你的潜力。\",\"切记。。。\"]},\"1021\":{\"h\":\"LinkedHashMap的特点\",\"t\":[\"LinkedHashMap是HashMap的一个子类\",\"LinkedHashMap底层基本上完全复用了父类HashMap的结构/参数/方法\",\"LinkedHashMap在HashMap的基础上, 额外的维护了一个双向链表, 以保证迭代顺序\",\"LinkedHashMap存储元素有序\",\"LinkedHashMap不允许存储重复数据（怎么定义重复）\",\"LinkedHashMap允许存储null\"]},\"1022\":{\"h\":\"LinkedHashMap的构造方法\",\"t\":[\"LinkedHashMap() 构造一个带默认初始容量 (16) 和加载因子 (0.75) 的空插入顺序 LinkedHashMap 实例。 LinkedHashMap(int initialCapacity) 构造一个带指定初始容量和默认加载因子 (0.75) 的空插入顺序 LinkedHashMap 实例。 LinkedHashMap(int initialCapacity, float loadFactor) 构造一个带指定初始容量和加载因子的空插入顺序 LinkedHashMap 实例。 LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) 构造一个带指定初始容量、加载因子和排序模式的空 LinkedHashMap 实例。 LinkedHashMap(Map<? extends K,? extends V> m) 构造一个映射关系与指定映射相同的插入顺序 LinkedHashMap 实例。 \"]},\"1023\":{\"h\":\"LinkedHashMap的api\",\"t\":[\"//---------------------------新增，删除，查找数据接口 // V put(K key, V value): 添加键值对 // void putAll(Map<? extends K,? extends V> m)： 将一个map的所有键值对都放入这个map // V get(Object key)： 根据一个key，获取value，如果key不存在，返回null // V remove(Object key)： 删除map中所包含的这个key // boolean containsKey(Object key): 判断map中是否包含这个key // boolean containsValue(Object value): 判断map中是否包含这个value //---------------------------辅助接口 // void clear() : 清空map // boolean equals(Object o)： 判断两个map是否相等 // int hashCode(): 返回此映射的哈希码值。 // boolean isEmpty(): map中是否有元素 // int size() ：返回键-值映射关系数。 //---------------------------视图方法 // Set<Map.Entry<K,V>> entrySet()： 返回此映射中包含的映射关系的 Set 视图。 // Set<K> keySet()： 返回此映射中包含的键的 Set 视图。 // Collection<V> values()： 返回此映射中包含的值的 Collection 视图。 \"]},\"1024\":{\"h\":\"TreeMap的特点\",\"t\":[\"TreeMap是Map接口的子实现\",\"TreeMap的数据结构红黑树。（左小右大）\",\"TreeMap存储数据大小有序。\",\"TreeMap不允许存储重复的key (什么叫重复: key的大小一样)\",\"TreeMap不允许存储null作为key: null没有办法比较大小\",\"最大的一个特点就是有序。\"]},\"1025\":{\"h\":\"TreeMap的构造方法\",\"t\":[\"构造方法摘要 TreeMap() 使用键的自然顺序构造一个新的、空的树映射。 TreeMap(Comparator<? super K> comparator) 构造一个新的、空的树映射，该映射根据给定比较器进行排序。 TreeMap(Map<? extends K,? extends V> m) 构造一个与给定映射具有相同映射关系的新的树映射，该映射根据其键的自然顺序 进行排序。 TreeMap(SortedMap<K,? extends V> m) 构造一个与指定有序映射具有相同映射关系和相同排序顺序的新的树映射。 \"]},\"1026\":{\"h\":\"TreeMap的api\",\"t\":[\"// ----------------------从Map接口继承来的---------------------------- // boolean containsKey(Object key) // 如果此映射包含指定键的映射关系，则返回 true。 // boolean containsValue(Object value) // 如果此映射为指定值映射一个或多个键，则返回 true。 // V put(K key, V value) // 将指定值与此映射中的指定键进行关联。 // void putAll(Map<? extends K,? extends V> map) // 将指定映射中的所有映射关系复制到此映射中。 // V remove(Object key) // 如果此 TreeMap 中存在该键的映射关系，则将其删除。 // V get(Object key) // 返回指定键所映射的值，如果对于该键而言，此映射不包含任何映射关系，则返回 null。 // void clear() // 从此映射中移除所有映射关系。 // Object clone() // 返回此 TreeMap 实例的浅表副本。 // int size() // 返回此映射中的键-值映射关系数。 // Collection<V> values() // 返回此映射包含的值的 Collection 视图。 // Set<K> keySet() // 返回此映射包含的键的 Set 视图。 // Set<Map.Entry<K,V>> entrySet() // 返回此映射中包含的映射关系的 Set 视图。 // ------------------------TreeMap定义大小操作相关的api------------------------ // Map.Entry<K,V> ceilingEntry(K key): 大于等于给定key的最小键值对 // K ceilingKey(K key): 大于等于给定key的最小key // Map.Entry<K,V> floorEntry(K key): 小于等于key的最大的键值对 // K floorKey(K key): 小于等于key最大的key // Map.Entry<K,V> higherEntry(K key): 大于给定key的最小键值对 // K higherKey(K key): 大于给定key的最小key // Map.Entry<K,V> lowerEntry(K key): 小于key的最大的键值对 // K lowerKey(K key): 小于key最大的key // Map.Entry<K,V> firstEntry(): 返回最小的键值对 // K firstKey(): 返回最小的key // Map.Entry<K,V> lastEntry(): 返回最大的键值对 // K lastKey(): 返回最大的key // Map.Entry<K,V> pollFirstEntry(): 删除最小的键值对 // Map.Entry<K,V> pollLastEntry(): 删除最大的键值对 // ---------------------视图方法----------------------------- // NavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) // 返回此映射的部分视图，其键的范围从 fromKey 到 toKey。 // SortedMap<K,V> subMap(K fromKey, K toKey) // 返回此映射的部分视图，其键值的范围从 fromKey（包括）到 toKey（不包括）。 // SortedMap<K,V> tailMap(K fromKey) // 返回此映射的部分视图，其键大于等于 fromKey。 // NavigableMap<K,V> tailMap(K fromKey, boolean inclusive) // 返回此映射的部分视图，其键大于（或等于，如果 inclusive 为 true）fromKey。 // SortedMap<K,V> headMap(K toKey) // 返回此映射的部分视图，其键值严格小于 toKey。 // NavigableMap<K,V> headMap(K toKey, boolean inclusive) // 返回此映射的部分视图，其键小于（或等于，如果 inclusive 为 true）toKey。 // -------------------------一些特殊的api: 了解------------------------------- // NavigableSet<K> descendingKeySet() // 返回此映射中所包含键的逆序 NavigableSet 视图。 // NavigableMap<K,V> descendingMap() // 返回此映射中所包含映射关系的逆序视图。 // NavigableSet<K> navigableKeySet() // 返回此映射中所包含键的 NavigableSet 视图。 // Comparator<? super K> comparator() // 返回对此映射中的键进行排序的比较器；如果此映射使用键的自然顺序，则返回 null。 \",\"假设我们需要实现一个功能，即存储某个城市的天气预报，并且需要按照时间排序。在这种情况下，我们可以使用TreeMap来存储天气预报信息。\",\"具体来说，我们可以将预报时间作为key，将天气预报信息（如温度[temperature](javascript:😉、湿度[humidity](javascript:😉、气压[air_pressure](javascript:;)等）作为value存储在TreeMap中。由于TreeMap是有序的，因此我们可以方便地按照时间顺序遍历元素，从而实现预报信息的展示和查询功能。\",\"想根据 2023-04-24这天的天气。\",\"想获取 17-23号的天气。\",\"如果需要Map中的key，有序的时候，可以使用这个TreeMap。\",\"map.subMap(new Date(\\\"2023-04-17\\\"), true,new Date(\\\"2023-04-24\\\"), false)\",\"// HashMap + ArrayList\",\"// ArrayList里面存时间。 对ArrayList排序。\",\"// 要了解 ArrayList和HashMap的常见操作，时间复杂度。\",\"在工作中，还会用到。需要掌握。 一般都是使用它来从properties配置文件中读取信息，其他的不用它。\",\"Hashtable的子类\",\"当做配置文件使用，只能存入String类型的。\",\"// 注意，只能存入String类型的key，value。否则在存储为properties文件的时候，会报错 // 新增key,value 使用的方法 setProperty() // 根据key查询value的方法，使用 getProperty() \",\"properties文件(1.properties)\",\"# key=value 格式去写 username=zhangsan password=admin \",\"读取properties文件\",\"Properties properties1 = new Properties(); properties1.load(new FileInputStream(\\\"1.properties\\\")); \"]},\"1027\":{\"h\":\"23. Stream\",\"t\":[\"学习目标\",\"掌握流的使用\",\"掌握流的几个重要中间操作。（filter，map）\",\"掌握流的几个重要终止操作（collect）\",\"会使用流进行数据的处理工作\"]},\"1028\":{\"h\":\"引言\",\"t\":[\"public class Student { // 常量。 public enum Address { BJ, SH, WH, SZ } public Student(String name, int age, int height, Address address) { this.name = name; this.age = age; this.height = height; this.address = address; } private String name; private int age; private int height; private Address address; // todo getter & setter // hashcode & equals } \",\"public class StudentList { public List<Student> studentList; public StudentList() { this.studentList = new ArrayList<>(); studentList.add(new Student(\\\"aa\\\", 18, 170, Student.Address.BJ)); studentList.add(new Student(\\\"bb\\\", 20, 163, Student.Address.SH)); studentList.add(new Student(\\\"cc\\\", 30, 182, Student.Address.WH)); studentList.add(new Student(\\\"dd\\\", 16, 190, Student.Address.BJ)); studentList.add(new Student(\\\"ee\\\", 15, 210, Student.Address.SH)); studentList.add(new Student(\\\"ff\\\", 17, 160, Student.Address.WH)); studentList.add(new Student(\\\"gg\\\", 18, 169, Student.Address.BJ)); studentList.add(new Student(\\\"hh\\\", 20, 173, Student.Address.WH)); studentList.add(new Student(\\\"ii\\\", 22, 192, Student.Address.SH)); studentList.add(new Student(\\\"jj\\\", 25, 172, Student.Address.SH)); studentList.add(new Student(\\\"kk\\\", 24, 188, Student.Address.BJ)); // 重复元素 kk // studentList.add(new Student(\\\"kk\\\", 24, 188, Student.Address.BJ)); studentList.add(new Student(\\\"ll\\\", 17, 161, Student.Address.WH)); studentList.add(new Student(\\\"mm\\\", 18, 169, Student.Address.SH)); studentList.add(new Student(\\\"nn\\\", 20, 162, Student.Address.BJ)); studentList.add(new Student(\\\"oo\\\", 22, 166, Student.Address.SH)); studentList.add(new Student(\\\"pp\\\", 24, 176, Student.Address.WH)); studentList.add(new Student(\\\"qq\\\", 22, 173, Student.Address.BJ)); // 重复元素 qq // studentList.add(new Student(\\\"qq\\\", 22, 173, Student.Address.BJ)); studentList.add(new Student(\\\"rr\\\", 24, 177, Student.Address.BJ)); studentList.add(new Student(\\\"ss\\\", 17, 169, Student.Address.SH)); studentList.add(new Student(\\\"tt\\\", 18, 170, Student.Address.SH)); studentList.add(new Student(\\\"uu\\\", 20, 171, Student.Address.WH)); studentList.add(new Student(\\\"vv\\\", 22, 172, Student.Address.WH)); studentList.add(new Student(\\\"ww\\\", 24, 181, Student.Address.BJ)); studentList.add(new Student(\\\"xx\\\", 18, 188, Student.Address.SH)); studentList.add(new Student(\\\"yy\\\", 20, 183, Student.Address.BJ)); studentList.add(new Student(\\\"zz\\\", 22, 191, Student.Address.WH)); } } \",\"我们要对这个学生列表进行处理: 得到来自北京同学, 并且高度最高的三个同学\",\"应该怎么做？\",\"public static void main(String[] args) { StudentList studentList = new StudentList(); List<Student> students = studentList.studentList; TreeSet<Student> treeSet = new TreeSet<>(new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { int com = o2.getHeight() - o1.getHeight(); if (com != 0) { return com; } com = com == 0 ? o2.getName().compareTo(o1.getName()) : com; com = com == 0 ? o2.getAge() - o1.getAge() : com; com = com == 0 ? o2.getAddress().compareTo(o1.getAddress()) : com; return com; } }); for (Student student : students) { if (student.getAddress() == Student.Address.BJ) { studentTreeSet.add(student); } } System.out.println(studentTreeSet.first()); studentTreeSet.pollFirst(); System.out.println(studentTreeSet.first()); studentTreeSet.pollFirst(); System.out.println(studentTreeSet.first()); studentTreeSet.pollFirst(); } \"]},\"1029\":{\"h\":\"使用流解决上述问题\",\"t\":[\"public void testWithStream() { List<Student> studentList = new StudentList().studentList; List<Student> students = studentList.stream().filter(p -> p.getAddress() == Student.Address.BJ).sorted(new Comparator<Student>() { @Override public int compare(Student s1, Student s2) { return s2.getHeight() - s1.getHeight(); } }).limit(3).collect(Collectors.toList()); System.out.println(students); } \"]},\"1030\":{\"h\":\"流的概述\"},\"1031\":{\"h\":\"什么是流\",\"t\":[\"Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。\",\"这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。\",\"通俗的讲: 也就是说, Stream流是Java在JDK1.8提供的对集合数据进行优化/简化操作的一种数据处理方式。\",\"流 IO流。\"]},\"1032\":{\"h\":\"流用来解决什么问题\",\"t\":[\"Stream流一般用来处理Java中的集合类数据, 进以避免在日常代码书写中的对集合数据操作的性能以及代码冗长问题。\"]},\"1033\":{\"h\":\"怎么使用流\",\"t\":[\"使用一个流的时候，通常包括三个基本步： 1. 一个数据源, 创建一个流 2. 多个/0个 中间操作, 形成一条流水线 3. 一个终止/终端操作, 执行流水线,并生成结果 \"]},\"1034\":{\"h\":\"创建流\",\"t\":[\"1. 调用集合类的stream方法,生成一个流(最常用/常见)\",\"Collection collection = new ArrayList(); Stream stream = collection.stream(); \",\"由值创建\",\"Stream<String> zs = Stream.of(\\\"zs\\\", \\\"ls\\\", \\\"wu\\\", \\\"zl\\\"); \",\"3.由数组创建\",\"String [] strs = {\\\"zs\\\", \\\"ls\\\", \\\"wu\\\"}; Stream<String> stream = Arrays.stream(strs); \"]},\"1035\":{\"h\":\"中间操作\",\"t\":[\"两个简单的中止操作：\",\"count(): 流里面有多少元素，最终会返回Long类型。\",\"collect(Collectors.toList())： 将流里面的元素，存储为一个List;\"]},\"1036\":{\"h\":\"filter(过滤操作)\",\"t\":[\"filter方法用于通过设置的条件过滤出元素。\",\"使用场景：\",\"对元素进行过滤。比如想要某个地区的学生，比如想要年龄大于20的学生。\",\"List<Student> studentList = new StudentList().studentList; // 获取所有北京地区的同学 List<Student> collect = studentList.stream() .filter(s -> s.getAddress().equals(Student.Address.BJ)) .collect(Collectors.toList()); System.out.println(collect); \",\"注意: 每次中间操作会返回一个 Stream (可以有多次中间操作),这就允许对其操作可以像链条一样排列,变成一个管道。\",\"// Stream<T> filter(Predicate<? super T> predicate); // public interface Predicate{} // filter方法参数---- 需要传入的是一个 Predicate类型的实例。 // Predicate 里面只有一个方法。输入参数根据流里的数据确定，输出参数是个boolean \"]},\"1037\":{\"h\":\"distinct(去重)\",\"t\":[\"distinct方法用于筛选元素(相当于去除重复元素)\",\"使用场景：\",\"对元素进行去重处理。底层是LinkedHashSet\",\"所以需要注意：如果使用自定义的类，调用distinct，需要重写hashCode和equals方法\",\"// Stream<T> distinct(); // distinct方法----筛选元素, 筛选的机制是根据元素的hashCode和equals判断重复 List<Student> studentList = new StudentList().studentList; // 北京的人 long beijingCount = studentList.stream() // 过滤 只取出北京的 .filter(s -> Student.Address.BJ.equals(s.getAddress())).count(); // 去重后北京的人 long distinctBeijingCount = studentList.stream() .filter(s -> Student.Address.BJ.equals(s.getAddress())).distinct().count(); System.out.println(beijingCount); System.out.println(distinctBeijingCount); \"]},\"1038\":{\"h\":\"limit(截取)\",\"t\":[\"limit 方法用于获取指定数量(最大)的流。\",\"// Stream<T> limit(long maxSize); // limit(n)方法, 返回前n个元素. // 如果流中有10个元素，limit(3) 则只返回3个元素。 // 如果流中有1个元素，limit(3) 则只返回1个元素。 List<Student> studentList = new StudentList().studentList; // 获取身高高于210的 List<Student> superHighPeople = studentList.stream().filter(s -> s.getHeight() > 210) .limit(3).collect(Collectors.toList()); System.out.println(superHighPeople); // 获取身高高于180的 List<Student> highPeople = studentList.stream().filter(s -> s.getHeight() > 180) .limit(3).collect(Collectors.toList()); System.out.println(highPeople); // 获取高于160的 List<Student> normalPeople = studentList.stream().filter(s -> s.getHeight() > 160) .limit(3).collect(Collectors.toList()); System.out.println(normalPeople); \"]},\"1039\":{\"h\":\"skip(跳过)\",\"t\":[\"skip(n)方法, 跳过前n个元素\",\" List<Person> personList = StudentList.personList; // Stream<T> skip(long n); // skip(n)方法, 跳过前n个元素, 返回之后的元素. (如果整体不够n个, 返回空流) List<Student> studentList = new StudentList().studentList; // 总共五个元素 List<Student> collect1 = studentList.stream().filter(s -> s.getAge() > 22 && s.getAge() < 25) .collect(Collectors.toList()); System.out.println(collect1); // 跳过1个元素，只剩下4个 List<Student> collect2 = studentList.stream().filter(s -> s.getAge() > 22 && s.getAge() < 25) .skip(1).collect(Collectors.toList()); System.out.println(collect2); \"]},\"1040\":{\"h\":\"map(转换)\",\"t\":[\"map 方法用于映射每个元素到对应的结果。\",\"从一个类型转换到另外一种类型。或者不变化类型\",\"使用场景：\",\"输入的是一个类型，希望以另外一个类型输出。\",\"比如我想将一批人的年龄，转化为 青年（0-29），中青年（30-39），中年（40-49），中老年（50岁以上）。\",\"比如我想将身高，映射为 超高人，高人，普通人。[190, +无穷), [175, 190) , (-无穷, 175]\",\"// <R> Stream<R> map(Function<? super T, ? extends R> mapper); // TODO: map映射返回新的数据, map的参数是一个方法 // 获取所有学生姓名 List<Student> studentList = new StudentList().studentList; List<String> collect = studentList.stream().map(student -> student.getName()) .collect(Collectors.toList()); System.out.println(collect); \",\" // 获取所有学生姓名的首字母 List<String> collect1 = studentList.stream().map(s -> s.getName().substring(0, 1)) .collect(Collectors.toList()); System.out.println(collect1); \",\" // 获取非常高的学生(超过190) 返回高人这个类 List<SuperPerson> collect2 = studentList.stream().filter(s -> s.getHeight() > 190) .map(s -> new SuperPerson(s.getName(), s.getHeight())) .collect(Collectors.toList()); System.out.println(collect2); class SuperPerson{ String name; int height; } \",\"// 只需要人是什么类型的 // 超高人，高人，普通人 // [190, +无穷), [175, 190) , (-无穷, 175] List<Student> studentList = new StudentList().studentList; List<String> collect = studentList.stream() .filter(s -> Student.Address.BJ.equals(s.getAddress())).map(s -> { int height = s.getHeight(); if (height >= 190) { return \\\"超高人\\\"; } else if (height >= 175) { return \\\"高人\\\"; } else { return \\\"普通人\\\"; } }).collect(Collectors.toList()); System.out.println(collect); \"]},\"1041\":{\"h\":\"sorted(排序)\",\"t\":[\"sorted 方法用于对流进行排序\",\"// Stream<T> sorted();: 自然顺序排序 // Stream<T> sorted(Comparator<? super T> comparator);: 提供一个比较器 // 对高于180的同学根据身高进行排序 List<Student> studentList = new StudentList().studentList; List<Student> collect = studentList.stream(). filter(s -> s.getHeight() > 180) .sorted((s1, s2) -> s1.getHeight() - s2.getHeight()) .collect(Collectors.toList()); System.out.println(collect); \",\" // 对高于180的同学根据身高进行排序(从高到低) List<Student> studentList = new StudentList().studentList; List<Student> collect = studentList.stream(). filter(s -> s.getHeight() > 180) .sorted((s1, s2) -> s2.getHeight() - s1.getHeight()) .collect(Collectors.toList()); System.out.println(collect); \"]},\"1042\":{\"h\":\"终止操作\"},\"1043\":{\"h\":\"anyMatch(是否有任意一个匹配)\",\"t\":[\"anyMatch:检查流到最后的数据, 是否有一个/多个数据匹配某种情况。\",\"比如，流里面最终有10个元素， 使用anyMatch。 只要有一个为真，则为真。\",\"// boolean anyMatch(Predicate<? super T> predicate); // anyMatch: 判断该stream中的所有元素, 是否存在某个/某些元素,可以根据某个条件处理之后, 满足true // 判断是否存在北京的同学 List<Student> studentList = new StudentList().studentList; boolean b1 = studentList.stream() .anyMatch(a -> { return a.getAddress() == Student.Address.BJ; }); System.out.println(b1); // 判断高于190的是否存在北京的同学 boolean b2 = studentList.stream() .filter(s -> s.getHeight() > 190) .anyMatch(a -> { return a.getAddress() == Student.Address.BJ; }); System.out.println(b2); \"]},\"1044\":{\"h\":\"allMatch(是否所有的全匹配)\",\"t\":[\"allMatch:检查是否所有元素都匹配\",\"// boolean allMatch(Predicate<? super T> predicate); // allMatch: 判断该stream中的所有元素, 是否所有元素 可以根据某个条件处理之后, 满足true // 判断是否都是北京的同学 List<Student> studentList = new StudentList().studentList; boolean b1 = studentList.stream() .allMatch(a -> { return a.getAddress() == Student.Address.BJ; }); System.out.println(b1); // 判断高于200的是否都是上海的同学 boolean b2 = studentList.stream().filter(s -> s.getHeight() >= 200) .allMatch(s -> s.getAddress() == Student.Address.SH); System.out.println(b2); \"]},\"1045\":{\"h\":\"noneMatch(没有匹配)\",\"t\":[\"noneMatch: 检查是否没有匹配元素\",\"// boolean noneMatch(Predicate<? super T> predicate); // noneMatch: 判断该stream中的所有元素, 是否所有元素 可以根据某个条件处理之后, 满足false List<Student> studentList = new StudentList().studentList; // 判断是否不存在深圳的同学 boolean b1 = studentList.stream().noneMatch(s -> Student.Address.SZ.equals(s.getAddress())); System.out.println(b1); \"]},\"1046\":{\"h\":\"findAny(找到任意一个)\",\"t\":[\"findAny:返回流中任意元素: 默认第一个\",\"// Optional<T> findAny(); // findAny: 返回任意元素(默认第一个) // 返回任意一个同学 List<Student> studentList = new StudentList().studentList; Optional<Student> any = studentList.stream() .findAny(); //TODO: 注意, Optional作为一个容器代表一个值存在或者不存在 //TODO: Optional中存在几个方法, 可以让使用者显式的检查值存在或者不存在 // <1>: isPresent()方法: 如果 Optional包含值返回true, 否则返回false // <2>: ifPresent(代码块)方法: 会将Optional包含的值, 传给指定的代码块 // <3>: get()方法: 如果Optional包含值, 返回包含的值, 否则抛出异常 // <4>: orElse(默认值): 如果Optional包含值, 返回包含的值, 否则返回默认值 any.isPresent(); any.ifPresent(a -> System.out.println(a)); any.get(); any.orElse(new Student(\\\"默认值\\\", 18, 140, Student.Address.SH)); System.out.println(any); // 一般的用法 if (any.isPresent()){ Student student = any.get(); System.out.println(student); } \",\" // 返回任意一个身高小于170同学 List<Student> studentList = new StudentList().studentList; // 找到任意一个小于170的 Optional<Student> any = studentList.stream().filter(s -> s.getHeight() < 170).findAny(); if (any.isPresent()) { Student student = any.get(); System.out.println(\\\"这里有一个170以下的学生\\\" + student); } else { System.out.println(\\\"没有170以下的学生\\\"); } \"]},\"1047\":{\"h\":\"findFirst(找到第一个)\",\"t\":[\"findFirst:返回第一个元素\",\"// Optional<T> findFirst(); // findFirst: 返回第一个元素 // 获得年龄最小的同学 Optional<Student> any = studentList.parallelStream() .sorted((o1, o2) -> o1.getAge() - o2.getAge()).findAny(); System.out.println(any.get()); \"]},\"1048\":{\"h\":\"forEach\",\"t\":[\"forEach: 遍历流\",\"// void forEach(Consumer<? super T> action); // forEach: 遍历元素(void方法) // 遍历列表 List<Student> studentList = new StudentList().studentList; studentList.stream() .sorted((o1, o2) -> o1.getAge() - o2.getAge()) .forEach(a -> System.out.println(a)); \"]},\"1049\":{\"h\":\"count\",\"t\":[\"count: 返回元素中数量\",\"// long count(); // count: 计算元素个数 // 北京同学的数量 List<Student> studentList = new StudentList().studentList; long count = studentList.stream() .filter(a -> a.getAddress() == Student.Address.BJ) .count(); System.out.println(count); \"]},\"1050\":{\"h\":\"reduce\",\"t\":[\"reduce: 计算元素\",\"reduce: 将参加计算的元素按照某种方式减少。\",\"比如，两个元素比较，返回大的； 按照这个方式，最终会拿到最大的\",\"两个元素，返回和； 按照这个方式，最终会拿到所有的和\",\"MapReduce。\",\" List<Person> personList = StudentList.personList; // TODO: 规约 reduce // <1>一参情况: Optional<T> reduce(BinaryOperator<T> accumulator) // <2>二参情况: T reduce(T identity, BinaryOperator<T> accumulator); // 1参数: // 返回值类型为Optional, 是应对如果流中没有任何元素情况(这种情况没有初始值就无法返回结果) // 所以1参是把结果包裹在一个Optional对象里(可以通过get方法获取),用以表明/处理结果可能不存在情况 // 2参数: // BinaryOperator: 将两个元素合起来产生一个新值 // identity: 计算的初始值/起始值(用来和第一个元素计算结果) // TODO:班级同学年龄总和 Optional<Integer> optional = studentList.stream() .map(a -> a.getAge()) .reduce((a, b) -> a + b); Integer sum = optional.get(); System.out.println(sum); \",\"List<Student> studentList = new StudentList().studentList; // 年龄最大的学生 Optional<Integer> reduce2 = studentList.stream().map(a -> a.getAge()).reduce((a, b) -> { if (a > b) { return a; } return b; }); Optional<Integer> reduce3 = studentList.stream().map(a -> a.getAge()).reduce(Integer::max); // 年龄最小的学生 Optional<Integer> reduce4 = studentList.stream().map(a -> a.getAge()).reduce((a, b) -> { if (a > b) { return b; } else { return a; } }); Optional<Integer> reduce5 = studentList.stream().map(a -> a.getAge()).reduce(Integer::min); System.out.println(reduce2 + \\\"==\\\" + reduce3); System.out.println(reduce4 + \\\"==\\\" + reduce5); \"]},\"1051\":{\"h\":\"collect\",\"t\":[\"collect: 收集器, 用于收集数据经过流计算的结果\"]},\"1052\":{\"h\":\"收集\",\"t\":[\"作用是将元素分别归纳进可变容器 List、Map、Set、Collection 或者ConcurrentMap\",\"// Collectors.toList() // Collectors.toCollection() // Collectors.toSet() // Collectors.toMap() \",\" List<Student> studentList = new StudentList().studentList; // 获取武汉同学的集合 toList List<Student> collect = studentList.stream().filter(a -> a.getAddress() == Student.Address.WH) .collect(Collectors.toList()); System.out.println(collect); \",\"// 获得武汉同学集合: toCollection LinkedList<Student> collect = studentList.stream().filter(a -> a.getAddress() == Student.Address.WH) .collect(Collectors.toCollection(() -> new LinkedList<>())); \",\" // 获得武汉同学集合: toSet Set<Student> studentSet = studentList.stream().filter(a -> a.getAddress() == Student.Address.WH) .collect(Collectors.toSet()); \",\"// 获得武汉同学集合(姓名和年龄): toMap Map<String, Integer> collect1 = studentList.stream().filter(a -> a.getAddress() == Student.Address.WH) .collect(Collectors.toMap(Student::getName, student -> student.getAge())); System.out.println(collect1); // 获得武汉同学集合(姓名和对象本身) Map<String, Student> collect2 = studentList.stream().filter(a -> a.getAddress() == Student.Address.WH) .collect(Collectors.toMap(Student::getName, student -> student)); System.out.println(collect2); \"]},\"1053\":{\"h\":\"使用案例\",\"t\":[\"// 1.找出一个集合中来自北京的人 // filter // 2.找出来自武汉，年龄大于20的人数 // filter count() // 3.给一个集合，需要一个根据名字到对应年龄的Map // collect(Collectors.toMap(student-> student.getName(), student-> student.getAge())) \",\"// 在使用Map的时候，首先要确定就是你的key代表什么东西，value代表什么东西。 // 可读性怎么样？ 可读性很差 // 流，自己学习的时候，可以用。 // 在工作过程中，你的同事用，你再用。 \",\"// 如果你们公司，没人用流。 你在写代码的过程，不要用流。 // 你们公司用流。 就可以用流。 \"]},\"1054\":{\"h\":\"苹果 1\"},\"1055\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1056\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1057\":{\"c\":[\"苹果\"]},\"1058\":{\"c\":[\"红\",\"大\",\"圆\"]},\"1059\":{\"h\":\"苹果 2\",\"t\":[\"一个被星标了的苹果文章。\"]},\"1060\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1061\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1062\":{\"c\":[\"苹果\"]},\"1063\":{\"c\":[\"红\",\"大\",\"圆\"]},\"1064\":{\"h\":\"苹果 3\"},\"1065\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1066\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1067\":{\"c\":[\"苹果\",\"水果\"]},\"1068\":{\"c\":[\"红\",\"大\",\"圆\"]},\"1069\":{\"h\":\"苹果 4\"},\"1070\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1071\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1072\":{\"c\":[\"苹果\",\"水果\"]},\"1073\":{\"c\":[\"红\",\"大\",\"圆\"]},\"1074\":{\"h\":\"01. Servlet\"},\"1075\":{\"h\":\"学习目标\",\"t\":[\"掌握Tomcat的使用，以及IDEA中使用Tomcat应用的方式\",\"掌握Web应用的目录结构\",\"标准目录结构（应用部署、编译）\",\"Maven开发的目录结构\",\"使用IDEA来开发Web应用\",\"熟悉Servlet的执行流程和生命周期\",\"掌握service方法\",\"掌握init、destroy方法执行时机和次数\",\"熟悉Servlet使用和相关配置\",\"熟悉ServletContext的功能\",\"了解XML配置方式\"]},\"1076\":{\"h\":\"前置知识准备\",\"t\":[\"面向对象编程（对象、类）\",\"Tomcat的应用程序和启动、docBase配置 → 要在IDEA中直接使用Tomcat\",\"开发工具：Postman\"]},\"1077\":{\"h\":\"JavaEE介绍\",\"t\":[\"JavaSE（Java Platform, Standard Edition）是Java平台的标准版，它提供了Java语言的核心库和运行环境，用于开发和部署独立的Java应用程序。JavaSE包含了Java的基本功能和特性，如面向对象编程、异常处理、集合框架、多线程、输入输出等。它是Java开发的基础，所有其他的Java技术都是建立在JavaSE之上的。\",\"JavaEE（Java Platform, Enterprise Edition）是Java平台的企业版，它是建立在JavaSE之上的一组扩展和标准，专注于开发和部署企业级的分布式应用程序。Web服务器。JavaEE提供了一系列的API和规范，用于实现企业级应用所需的各种功能，如Web应用开发、数据库访问、消息传递、事务处理、安全性等。JavaEE还包括一些服务器端的技术和组件，如Java Servlet、JavaServer Pages（JSP）、Enterprise JavaBeans（EJB）、Java Message Service（JMS）等。\",\"JavaSE和JavaEE可以看作是Java平台的两个不同的版本，它们的关系是JavaEE是建立在JavaSE之上的扩展和增强。JavaSE提供了Java语言的基本功能和库，而JavaEE在此基础上提供了更多面向企业级应用的功能和组件，用于开发大型、复杂的分布式系统。因此，如果你只是开发简单的独立应用程序，使用JavaSE就足够了；而如果你需要开发企业级的应用程序，特别是涉及到Web开发、事务处理等方面，那么JavaEE会更适合。\",\"服务器：服务器硬件、服务器应用（软件）\",\"B/S和C/S是指不同的客户端/服务器架构模型。\",\"B/S代表浏览器/服务器（Browser/Server），它是一种网络应用程序的架构模型。在B/S模型中，用户通过浏览器作为客户端向服务器发送请求，服务器处理请求并返回响应。这种模型常见于Web应用程序，其中浏览器负责展示用户界面，而服务器处理逻辑和数据处理。\",\"C/S代表客户端/服务器（Client/Server），这是另一种常见的架构模型。在C/S模型中，客户端和服务器之间有直接的通信，客户端发送请求给服务器，服务器处理请求并返回响应。这种模型通常用于桌面应用程序或本地网络环境中。\"]},\"1078\":{\"h\":\"Servlet介绍\",\"t\":[\"Server Applet 缩写组成的，小程序，指的是运行在JavaEE容器（Tomcat）下的小程序\",\"Servlet是一种Java编程语言的服务器端组件，它主要用于扩展Web服务器的功能。Servlet运行在服务器上，接收来自客户端（通常是Web浏览器）的请求并生成响应。它是Java企业版（Java Enterprise Edition，简称Java EE）的一部分，用于构建基于Web的应用程序。\",\"Servlet通过Java编程语言编写，遵循Servlet API规范。它可以被部署到支持Servlet规范的Web容器（如Apache Tomcat、Jetty等）中运行。通过Servlet，开发人员可以处理HTTP请求、执行业务逻辑、访问数据库、生成动态内容并将响应发送回客户端。\",\"思考：\",\"我们开发为什么要定义规范？\",\"有一个类叫Father，抽象类，它有3个儿子（子类） Son1、Son2、Son3 ，有一个方法叫play\",\"Son1 son1 = new Son1();\",\"Son2 son2 = new Son2();\",\"son1.play();\",\"son2.play();\",\"变化一下写法\",\"Father son1 = new Son1();\",\"Father son2 = new Son2();\",\"son1.play();\",\"son2.play();\",\"如果做了这样的事情\",\"Father son2 = new Son3();\",\"son2.play();\",\"不同的子类对象调用抽象类中定义的方法，实现不同的业务\",\"通过Tomcat可以访问静态资源和动态资源，静态资源就是我们前端学的内容，比如HTML、JS、CSS、xml、字体文件、图片等内容，而Servlet提供的是动态资源的访问\",\"Servlet的开发其实就是Servlet中的service方法的开发 → Servlet的开发规范\",\"我们接下来的需求：访问http://localhost:8080/ee/user/login,页面上出现 LOGIN SUCCESS\",\"import javax.servlet.GenericServlet; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.annotation.WebServlet; import java.io.IOException; /** * @author stone * @date 2023/01/12 22:44 */ @WebServlet(\\\"/user/login\\\") public class UserServlet extends GenericServlet { @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { servletResponse.getWriter().write(\\\"LOGIN SUCCESS\\\"); } } \"]},\"1079\":{\"h\":\"pom.xml\",\"t\":[\"<packaging>war</packaging> <dependencies> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> </dependencies> \"]},\"1080\":{\"h\":\"打包方式\",\"t\":[\"packaging = war\",\"pom 父工程，提供子工程通用的内容，只有一个pom.xml，没有代码和文件\",\"war web应用，要满足web应用的目录结构，要放在JavaEE容器下运行\",\"jar 默认的打包方式，如果想要运行jar，里面要包含main方法\"]},\"1081\":{\"h\":\"scope作用域\",\"t\":[\"默认的作用域是compile\",\"javax.servlet-api 的作用域是provided，编译的时候需要，而打包、运行的时候都不需要\",\"因为已经有了，Tomcat中已经有了这个依赖，在tomcat的lib目录中有一个jar包servlet-api.jar\",\"如果硬是要打包进去，有可能会发生冲突，导致未知的错误\"]},\"1082\":{\"h\":\"Servlet开发(后面会单独重点讲解)\",\"t\":[\"开发好的Servlet和资源文件 编译后（target/{artifactId}-{version}目录） 放入到Tomcat下的webapp目录里是可以访问的\",\"image-20230202164950511\"]},\"1083\":{\"h\":\"docBase 设置来访问资源\",\"t\":[\"image-20230202165526995\",\"demo2.xml文件中的内容，指定docBase，其实访问的这个指定的这个路径下的资源\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Context docBase=\\\"D:\\\\WorkSpace\\\\cskaoyan2023\\\\02-备课\\\\JavaEE\\\\prepare_talk2\\\\resources_new\\\\codes\\\\servlet2\\\\demo1-first-servlet\\\\target\\\\demo1-first-servlet-1.0-SNAPSHOT\\\"/> \"]},\"1084\":{\"h\":\"★_IDEA中使用Tomcat\",\"t\":[\"image-20230202170140154\",\"image-20230202170604997\",\"image-20230202171744609\",\"JavaEE阶段都会在IDEA中使用Tomcat\",\"SpringMVC阶段也会在IDEA中使用Tomcat\",\"需要大家做的事情\",\"packaging=war\",\"增加Tomcat server\",\"提供deployment的配置（docBase） \",\"artifact → war exploded\",\"application context → 路径\",\"image-20230825162742023\"]},\"1085\":{\"h\":\"GenericServlet和HttpServlet\",\"t\":[\"都可以使用 来进行Servlet的开发\",\"通过继承，来实现其方法\",\"GenericServlet 实现其抽象方法service\",\"HttpServlet 重写doGet、doPost方法\",\"这两种方式其实都是执行的是service方法，HttpServlet是GenericServlet的子类，只不过是HttpServlet里的service方法给你实现好了\",\"image-20230202172514996\",\"它会根据你的请求方法不同，去执行HttpServlet中的不同方法\",\"public abstract class HttpServlet extends GenericServlet { protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method = req.getMethod(); if (method.equals(\\\"GET\\\")) { this.doGet(req, resp); } else if (method.equals(\\\"POST\\\")) { this.doPost(req, resp); } } } \",\"/** * 继承GenericServlet * 实现其抽象方法service * localhost:8080/demo1/servlet1 * 控制台里打印hello servlet1 * @author stone * @date 2023/02/02 17:29 */ @WebServlet(\\\"/servlet1\\\") public class Servlet1 extends GenericServlet { @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { System.out.println(\\\"hello servlet1\\\"); } } /** * 继承HttpServletServlet * 重写其doGet、doPost方法 * localhost:8080/demo1/servlet2 * 控制台里打印hello servlet2 * @author stone * @date 2023/02/02 17:29 */ @WebServlet(\\\"/servlet2\\\") public class Servlet2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 接下来会使用浏览器方法，通过浏览器的地址栏发送的请求是GET请求 System.out.println(\\\"hello servlet2\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 自己写业务 } } \",\"我们在上面的代码中需要做的就是继承GenericServlet或HttpServlet，然后通过不同的实现类来完成不同的业务处理，而我们处理业务的核心方法就是\",\"doService\",\"doGet/doPost\"]},\"1086\":{\"h\":\"@WebServlet注解\",\"t\":[\"务必要记住value属性即可\",\"@Target({ElementType.TYPE}) // 该注解可以写在类上 @Retention(RetentionPolicy.RUNTIME) // 该注解运行时生效 @Documented public @interface WebServlet { String name() default \\\"\\\"; String[] value() default {}; // 该Servlet的路径，通过该路径可以访问到这个servlet的service或doGet、doPost方法 String[] urlPatterns() default {}; // 和value属性的功能是一致的 int loadOnStartup() default -1; // 默认值是负数；如果为负数的话，意味着放访问该servlet路径的时候，该Servlet才初始化；如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet WebInitParam[] initParams() default {}; // 提供初始化参数，当前基本不用 boolean asyncSupported() default false; String smallIcon() default \\\"\\\"; String largeIcon() default \\\"\\\"; String description() default \\\"\\\"; String displayName() default \\\"\\\"; } \"]},\"1087\":{\"h\":\"value属性（或urlPatterns）\",\"t\":[\"我们通常使用的是其value属性\",\"功能上和urlPatterns其实是一样的，但是value属性有一个好处就是如果说该注解只使用了value属性的话，value= 可以省略不写\",\"使用其@Value属性建立URL和Servlet之间的映射关系\"]},\"1088\":{\"h\":\"一个Servlet可以对应多个URL-Pattern\",\"t\":[\"一个URL-Pattern不能对应多个Servlet\",\"@WebServlet注解的时候，value属性和url-pattern属性，接收的值的类型String[]\",\"@WebServlet({\\\"/hello1\\\",\\\"/hello2\\\",\\\"/hello3\\\"}) public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"hello servlet\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } } \"]},\"1089\":{\"h\":\"★★★URL-Pattern\",\"t\":[\"使用@WebServlet的value属性或url-pattern属性来维护，简历url-pattern和Servlet之间的映射关系\",\"@WebServlet注解的value属性的用法\"]},\"1090\":{\"h\":\"合法写法\",\"t\":[\"/路径匹配\",\"语法：/xxx或/xxx/*\",\"注意事项：\",\"以/作为开头（不能省略开头的/），可以写多级的url\",\"可以使用通配符* \",\"举个例子/hello/*, 这里的*可以代表多级的任意URL；\",\"/类型匹配\",\"语法：*.xxx\",\"注意事项：\",\"*.do、*.action这样的一些写法，比如 hello.do就可以找到*.do对应的Servlet来处理请求\",\"当前基本上不再使用\",\"比如一些特殊的资源，可以使用特殊的Servlet来处理，比如jpg、css等这些资源\",\"缺省匹配\",\"语法：/\",\"注意事项：非常特殊的写法\"]},\"1091\":{\"h\":\"优先级\",\"t\":[\"1.路径匹配 > 类型匹配\",\"2.使用的是匹配度更高的Servlet，/abc/d ，存在两个Servlet，分别url-pattern是/abc/* 和/\",\"通常是我们访问某一个请求，只有一个对应Servlet\"]},\"1092\":{\"h\":\"缺省Servlet\",\"t\":[\"提供了一个页面 hello.html，也提供一个servlet，这个Servlet映射的url-pattern也是hello.html\",\"image-20230207155457330\",\"Tomcat会提供缺省的Servlet，本身是用来做静态资源访问的，如果你想要提供缺省的Servlet，可以做，将自定义的这个Servlet它的URL-Pattern设置为/ 即可，但是会导致原有的缺省Servlet失效\",\"如果你没有提供，我给你提供一个默认的；如果你提供了，则以你提供的为准，后面SpringMVC就是在此基础上做了设计的\"]},\"1093\":{\"h\":\"Servlet的生命周期\",\"t\":[\"LifeCycle\",\"生命周期：在一些特定的时间会去执行一些方法，而时间通常指某个东西从初始化到结束在整个阶段中会遇到的一些时间点\",\"这里我们讲的是Servlet的生命周期，指的是每一个Servlet的生命周期，每一个Servlet它的生命周期都需要单独去考虑\",\"方法：后续去讲生命周期的时候，都会围绕着方法展开；话题都会是这个方法在什么时候执行，会执行多少次\",\"方法名\",\"时间\",\"次数\",\"说明\",\"init\",\"Servlet初始化\",\"1\",\"只执行一次，在service之前，用来用来做一些初始化\",\"service\",\"访问Servlet对应的URL\",\"n\",\"执行多次，用来处理业务\",\"destroy\",\"Servlet销毁\",\"1\",\"只执行一次，通常用来做资源的释放\",\"Servlet是何时初始化的：前面讲@WebServlet注解的时候，有一个属性load-on-startup\",\"默认值是负数；\",\"如果为负数的话，意味着放访问该servlet路径的时候，该Servlet才初始化；\",\"如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet\",\"Servlet是何时销毁的：\",\"Tomcat停的时候\",\"增加几个Servlet\",\"@WebServlet(value = \\\"/hello\\\",loadOnStartup = -2) public class HelloServlet extends HttpServlet {} @WebServlet(value = \\\"/first\\\",loadOnStartup = 1) public class FirstServlet extends HttpServlet {} @WebServlet(value = \\\"/second\\\",loadOnStartup = 2) public class SecondServlet extends HttpServlet {} \",\"想要看到他们的init、service（doGet）、destroy\",\"应用程序启动 → first init 、 second init\",\"分别访问 （不分先后顺序） \",\"/first → first service\",\"/second → second service\",\"/hello → hello init 、hello service\",\"再次访问/hello → hello service\",\"应用程序关闭 \",\"destroy\",\"键值对配置\",\"放入配置\",\"获取配置\",\"要通过ServletConfig实例（对象）来进行操作，每一个Servlet都有与之对应的ServletConfig\"]},\"1094\":{\"h\":\"放入配置\",\"t\":[\"场景，将username=root这样的键值对放入到ServletConfig\",\"@WebServlet(value = \\\"/hello\\\", initParams = {@WebInitParam(name = \\\"username\\\",value = \\\"root\\\"), @WebInitParam(name = \\\"password\\\",value = \\\"123456\\\")}) public class HelloServlet extends HttpServlet { } \",\"在HelloServlet父类的父类GenericServlet中有一个成员变量config是ServletConfig类型的\",\"而在init方法中有给这个成员变量做赋值\",\"也就是这个成员变量在初始化阶段，已经获得了这些值\",\"意味着在service方法（doGet、doPost）中，可以获得这个成员变量，并且从中获取值\"]},\"1095\":{\"h\":\"取出配置\",\"t\":[\"在Servlet中已经提供了一个方法getServletConfig方法，就是获得GenericServlet中的ServletConfig类型的成员变量config\",\"public ServletConfig getServletConfig() { return this.config; } \",\"子类中可以使用父类的方法，也就是在我们自行开发的Servlet中可以直接来来调用方法来获得\",\"@WebServlet(value = \\\"/hello\\\", initParams = {@WebInitParam(name = \\\"username\\\",value = \\\"root\\\"), @WebInitParam(name = \\\"password\\\",value = \\\"123456\\\")}) public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletConfig servletConfig = getServletConfig(); String username = servletConfig.getInitParameter(\\\"username\\\"); String password = servletConfig.getInitParameter(\\\"password\\\"); System.out.println(username + \\\":\\\" + password); } } \",\"整个Web应用提供的共享空间，应用程序启动的时候会初始化，可以通过键值对的方式在存储和取出数据\",\"Servlet上下文，开发过程中使用ServletContext实例（对象），使用这个实例其实维护的也是键值对\",\"前面的ServletConfig是每一个Servlet使用的单独的一个ServletConfig\",\"而ServletContext是所有的Servlet共享的\",\"在所有的Servlet中都可以通过方法直接获得ServletContext，并且获得的是同一个ServletContext，在ServletContext中提供的数据其实就是被所有的Servlet共享了\"]},\"1096\":{\"h\":\"获得方式\",\"t\":[\"在Servlet中直接使用getServletContext()\",\"通过ServletConfig提供的getServletContext方法来获得\",\"@WebServlet(\\\"/hello\\\") public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletContext servletContext1 = getServletContext(); ServletContext servletContext2 = getServletConfig().getServletContext(); System.out.println(\\\"servletContext1 = \\\" + servletContext1); System.out.println(\\\"servletContext2 = \\\" + servletContext2); } } \",\"@WebServlet(\\\"/bye\\\") public class GoodbyeServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletContext servletContext = getServletContext(); System.out.println(\\\"servletContext = \\\" + servletContext); } } \",\"想要在所有的Servlet中共享数据\",\"username=root\",\"password=123456\",\"@WebServlet(value = \\\"/parameter\\\",loadOnStartup = 1)// 写正数，意味着应用程序启动的时候初始化，初始化会开始生命周期的init方法 public class ParameterServlet extends HttpServlet { @Override public void init() throws ServletException { ServletContext servletContext = getServletContext(); servletContext.setAttribute(\\\"username\\\",\\\"root\\\"); servletContext.setAttribute(\\\"password\\\",\\\"123456\\\"); } } \"]},\"1097\":{\"h\":\"获得真实路径（了解）\",\"t\":[\"// 获得web资源的真实路径 → docBase里的真实路径 String realPath = servletContext1.getRealPath(\\\"\\\"); System.out.println(\\\"realPath = \\\" + realPath); String realPath1 = servletContext1.getRealPath(\\\"hello.html\\\"); System.out.println(\\\"realPath1 = \\\" + realPath1); \",\"当前使用的是注解的方式来配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!--value属性（或url-pattern属性）：映射的url-pattern initParams属性：提供的初始化参数，可以通过ServletConfig来获得 load-on-startup属性 @WebServlet(value = \\\"/HelloServlet\\\", initParams = @WebInitParam(name = \\\"username\\\",value = \\\"root\\\"), loadOnStartup = 1)--> <servlet> <servlet-name>hello</servlet-name> <servlet-class>com.cskaoyan.service.HelloServlet</servlet-class> <init-param> <param-name>username</param-name> <param-value>root</param-value> </init-param> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>hello</servlet-name> <url-pattern>/HelloServlet</url-pattern> </servlet-mapping> </web-app> \",\"Server处理请求的入口\",\"@WebServlet的 value属性\",\"ServletContext对象 → 伴随应用程序启动创建的一个全局共享的对象\",\"编译为Tomcat所支持的web应用\"]},\"1098\":{\"h\":\"Web应用的目录结构\",\"t\":[\"Web应用的根目录（idea → target/artifactid-version → 配置tomcat做的虚拟映射的docBase） \",\"可以直接访问的资源（主要是静态资源，比如html、js、css、图片等）\",\"WEB-INF文件夹 （受保护的资源的文件） \",\"classes文件夹（web应用的类加载路径classpath：字节码文件、配置文件）\",\"lib文件夹(第三方的依赖)\",\"web.xml(web应用的描述文件 → 基本上可以不使用了)\",\"其他的文件（其他不想被直接访问的资源）\",\"image-20230202151408305\"]},\"1099\":{\"h\":\"Maven工程的目录结构\",\"t\":[\"Maven工程的根目录 \",\"src文件夹 \",\"main文件夹（开发） \",\"java文件夹（java代码）\",\"resources文件夹（配置文件）\",\"webapp文件夹（web资源-对应的是web资源目录） \",\"WEB-INF\",\"test文件夹（测试）\",\"pom.xml文件\",\"target文件夹 \",\"classes文件夹\",\"{artifactid}-{version}文件夹（tomcat虚拟映射的docBase）\"]},\"1100\":{\"h\":\"对应关系图（核心）\",\"t\":[\"image-20230202152234992\",\"非常重要：贯穿整个阶段\",\"遇到一些问题：\",\"ClassNotFound：编译后的内容里没有这个类 → target/artifactid-version/WEB-INF/ 里的classes、lib目录 \",\"classes里没有 → src/main/java\",\"lib里没有 → pom.xml\",\"FileNotFound → target/artifactid-version/\"]},\"1101\":{\"h\":\"02. Request&Response\"},\"1102\":{\"h\":\"学习目标\",\"t\":[\"理解Request、Response和HTTP报文之间的关系\",\"掌握通过Request能够获得的信息 \",\"请求URL、URI、请求协议\",\"请求头、客户机和主机\",\"请求参数\",\"掌握通过Response能够完成的设置 \",\"响应中文乱码问题\",\"响应（Json）字符串、图片（文件）\",\"了解特殊的响应头\",\"逐步通过反射能够解决一些通用问题\"]},\"1103\":{\"h\":\"前置知识准备\",\"t\":[\"HTTP 请求报文和响应报文 \",\"请求报文和响应报文分别包含哪些部分\",\"反射reflect \",\"获得Class对象\",\"获得成员变量并给成员变量赋值\",\"获得方法并且能够调用指定方法\",\"MyBatis的基本使用\",\"通过form表单分别构造get请求和post请求，能构造文件上传的请求\",\"解析字符串获得其中的信息\"]},\"1104\":{\"h\":\"请求报文\",\"t\":[\"请求报文的组成部分\",\"请求行 \",\"请求方法\",\"请求的URL http://localhost:8080/hello\",\"请求协议\",\"请求头 \",\"格式是key：value\",\"比较特殊的请求头： \",\"Content-Type 由浏览器提供给服务器的正文类型\",\"Accept 浏览器期望从服务器获得正文的类型（ 服务器提供给浏览器的正文类型）\",\"Host 主机ip\",\"（空行）\",\"请求正文 \",\"普通的Get请求和form表单提供的Get/Post请求 如果携带了参数它的格式是 key1=value1&key2=value2&key3=value3等\",\"携带Json数据的post请求 {}或[]\",\"图片/文件\",\"POST http://101.43.69.31:8083/admin/auth/login HTTP/1.1 Host: 101.43.69.31:8083 Connection: keep-alive Content-Length: 45 Accept: application/json, text/plain, */* User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78 Content-Type: application/json;charset=UTF-8 Origin: http://101.43.69.31:8080 Referer: http://101.43.69.31:8080/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 {\\\"username\\\":\\\"admin123\\\",\\\"password\\\":\\\"admin123\\\"} \",\"分析一个请求体\",\"对应的form表单如下\",\"<form action=\\\"/hello\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"username\\\"><br> <input type=\\\"text\\\" name=\\\"password\\\"><br> <input type=\\\"file\\\" name=\\\"avatar\\\"><br> <input type=\\\"submit\\\" value=\\\"Submit\\\"> </form> \",\"image-20230828101512945\"]},\"1105\":{\"h\":\"响应报文\",\"t\":[\"响应报文的组成\",\"响应行 \",\"协议\",\"状态码\",\"响应头 \",\"格式是key=value\",\"Content-Type 服务器提供给浏览器的正文类型，后面通常会跟charset，比如application/json;charset=utf-8\",\"（空行）\",\"响应正文 \",\"如果是json，Content-Type中通常是application/json\",\"HTTP/1.1 200 Vary: accept-encoding,origin,access-control-request-headers,access-control-request-method,accept-encoding Set-Cookie: rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Sun, 12-Feb-2023 06:51:56 GMT Set-Cookie: JSESSIONID=24287278-5ebb-407d-a3f7-56b74782c4c7; Path=/; HttpOnly Access-Control-Allow-Origin: * Content-Type: application/json;charset=UTF-8 Date: Mon, 13 Feb 2023 06:51:56 GMT Content-Length: 200 {\\\"errno\\\":0,\\\"data\\\":{\\\"adminInfo\\\":{\\\"nickName\\\":\\\"admin123\\\",\\\"avatar\\\":\\\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\\\"},\\\"token\\\":\\\"24287278-5ebb-407d-a3f7-56b74782c4c7\\\"},\\\"errmsg\\\":\\\"成功\\\"} \"]},\"1106\":{\"h\":\"反射\"},\"1107\":{\"h\":\"获得Class对象\",\"t\":[\"获得Class对象的方式\",\"定义了一个类，这个类，处于com.cskaoyan.service包下，类名为UserServiceImpl，我们想要获得这个Class对象，如何获得呢？\",\"UserServiceImpl.class\",\"UserServiceImpl userService = new UserServiceImpl();\",\"useService.getClass();\",\"Class.forName(\\\"com.cskaoyan.service.UserServiceImpl\\\")\",\"Class<UserServiceImpl> clazz1 = UserServiceImpl.class; UserServiceImpl userService = new UserServiceImpl(); Class<? extends UserServiceImpl> clazz2 = userService.getClass(); Class<?> clazz3 = Class.forName(\\\"com.cskaoyan.service.UserServiceImpl\\\"); \",\"如果我们想要使用一些通用性的代码，我们用哪种方式？\",\"Class.forName\",\"public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException { InputStream inputStream = DriverDemo.class.getClassLoader().getResourceAsStream(\\\"parameter.properties\\\"); Properties properties = new Properties(); properties.load(inputStream); String driver = (String) properties.get(\\\"driver\\\"); Class<?> driverClass = Class.forName(driver); Object instance = driverClass.newInstance(); } \",\"# parameter.properties # driver=com.cskaoyan.service.UserServiceImpl driver=com.mysql.cj.jdbc.Driver \",\"我们使用的mysql版本是5.7，对应的驱动是com.mysql.jdbc.Driver\",\"如果使用mysql版本8，对应的驱动com.mysql.cj.jdbc.Driver\"]},\"1108\":{\"h\":\"获得成员变量并给成员变量赋值\",\"t\":[\"// 通过class能够获得实例 // 可以直接使用newInstance方法 Object instance1 = clazz3.newInstance(); // 可以先获得构造器（构造方法），通过构造方法实例化 Constructor<?> constructor = clazz3.getDeclaredConstructor(); Object instance2 = constructor.newInstance(); // 利用反射方式获得Field，通过反射的方式复制 Field usernameField = clazz3.getDeclaredField(\\\"username\\\"); // user3.setUsername(\\\"\\\") usernameField.setAccessible(true); usernameField.set(instance2,\\\"zhangsan\\\");// instance2的username这个成员变量赋值zhangsan // instance2.username = \\\"zhangsan\\\"; // 我们并不建议直接通过反射的方式给成员变量赋值，我们建议使用set方法做赋值 \"]},\"1109\":{\"h\":\"获得方法并且能够调用方法\",\"t\":[\"//UserServiceImpl userServiceImpl = (UserServiceImpl) instance1; //userServiceImpl.setUsername(\\\"lisi\\\"); // 通过反射的方式实现通用性的设置 Properties properties = new Properties(); properties.load(ReflectExecution.class.getClassLoader().getResourceAsStream(\\\"parameter.properties\\\")); String className = (String) properties.get(\\\"className\\\"); String method = (String)properties.get(\\\"method\\\"); String value = (String)properties.get(\\\"value\\\"); Class<?> clazz = Class.forName(className); Object instance = clazz.newInstance();//instance的username成员变量是否是lisi Method declaredMethod = clazz.getDeclaredMethod(method, String.class); declaredMethod.setAccessable(\\\"true\\\"); Object invoke = declaredMethod.invoke(instance, value); // method.invoke \",\"Object invoke = method.invoke(instance,args)\",\"变量名\",\"类型\",\"含义\",\"method\",\"Method → clazz.getDeclaredMethod\",\"通过反射获得的Method\",\"instance\",\"Object 1. new XXX ; 2.反射,比如clazz.newInstance\",\"就是实例（对象）\",\"args\",\"Object[]\",\"参数，把所有的参数封装为数组\",\"invoke\",\"Object\",\"instance对象执行method的返回值\",\"/** * 通过反射的方式执行UserServiceImpl中的sayHello */ public static void main(String[] args) throws Exception{ Properties properties = new Properties(); properties.load(ReflectExecution.class.getClassLoader().getResourceAsStream(\\\"parameter.properties\\\")); String className = (String) properties.get(\\\"className\\\"); String method = (String)properties.get(\\\"method\\\"); String value = (String)properties.get(\\\"value\\\"); //String parameter1 = (String)properties.get(\\\"parameter1\\\"); //String parameter2 = (String)properties.get(\\\"parameter2\\\"); Object parameter1 = properties.get(\\\"parameter1\\\"); Object parameter2 = properties.get(\\\"parameter2\\\"); Class<?> clazz = Class.forName(className); Object instance = clazz.newInstance(); Method setUsername = clazz.getDeclaredMethod(\\\"setUsername\\\", String.class); setUsername.invoke(instance, value); //Method declaredMethod = clazz.getDeclaredMethod(method, String.class,String.class); Method declaredMethod = clazz.getDeclaredMethod(method, parameter1.getClass(),parameter2.getClass()); //执行sayHello方法 Object result = declaredMethod.invoke(instance, new Object[]{parameter1, parameter2}); } \"]},\"1110\":{\"h\":\"MyBatis\",\"t\":[\"SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(\\\"mybatis.xml\\\")); // 在整个应用程序中维护这个对象，想要在多个Servlet中共享这个对象 // ServletContext // 提供一个Servlet，loadOnStartup为正数，且数值比较小，这个Servlet在应用程序启动过程中就会率先开始初始化，我们就可以利用生命周期的init方法去初始化SqlSessionFactory实例，并且将其放入到ServletContext中 \",\"Request 请求\",\"Response 响应\",\"先看我们之前开发的Servlet，在Servlet中的service以及HttpServlet的doGet、doPost方法中的形参\",\"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { } \",\"在Tomcat的时候就会产生Request，同时也会产生Response\",\"可以这样子理解，当我们通过浏览器（或客户端）发送请求，在服务器应用中整个过程中的信息流通都是通过Request、Response流通的\",\"Request：获得提供的信息，主要使用的是其getXXX方法\",\"Response：设置信息提供给客户端（浏览器），主要使用的是其setXXX方法\",\"image-20230213172659060\",\"每次发起请求，其实产生一组新的Request和Response对象\",\"记住一个点：使用Request主要为了输入，使用Response主要为了输出。\",\"为了提供统一的规范，提供统一的规范接口ServletRequest和ServletResponse，为什么提供的是接口，接口能够提供统一的规范\",\"HttpServletRequest 获得HTTP请求报文中携带的信息\",\"POST http://101.43.69.31:8083/admin/auth/login HTTP/1.1 Host: 101.43.69.31:8083 Connection: keep-alive Content-Length: 45 Accept: application/json, text/plain, */* User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78 Content-Type: application/json;charset=UTF-8 Origin: http://101.43.69.31:8080 Referer: http://101.43.69.31:8080/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 {\\\"username\\\":\\\"admin123\\\",\\\"password\\\":\\\"admin123\\\"} \",\"请求报文的组成\",\"请求行\",\"请求头\",\"（空行）\",\"请求体\"]},\"1111\":{\"h\":\"请求行\",\"t\":[\"POST http://101.43.69.31:8083/admin/auth/login HTTP/1.1 \",\"GET http://localhost:8080/demo3/hello?username=zhangsan HTTP/1.1 \",\"信息\",\"内容\",\"方法\",\"返回值\",\"说明\",\"请求方法\",\"POST、GET\",\"getMethod()\",\"String\",\"获得请求方法\",\"URL\",\"http://101.43.69.31:8083/admin/auth/login\",\"getRequestURL()\",\"StringBuffer\",\"获得请求URL\",\"URI\",\"/admin/auth/login、/demo3/hello\",\"getRequestURI()\",\"String\",\"获得请求URI\",\"context-path\",\"/demo3\",\"getContextPath()\",\"String\",\"获得上下文\",\"服务器ip\",\"101.43.69.31、localhost\",\"getLocalAddr()\",\"String\",\"获得ip\",\"端口号\",\"8083、8080\",\"getLocalPort()\",\"int\",\"获得端口号\",\"QueryString\",\"username=zhangsan\",\"getQueryString()\",\"String\",\"获得Get请求的查询字符串\",\"协议\",\"HTTP/1.1\",\"getProtocol()\",\"String\",\"获得通讯协议\",\"代码\",\"@WebServlet(\\\"/line\\\") public class LineServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { // http://localhost:8080/demo3/line?username=zhangsan // http://192.168.0.180:8080/demo3/line?username=zhangsan // 192.168.0.180可以修改为自己的ip // 请求方法 String method = request.getMethod(); // 请求URL和URI String url = request.getRequestURL().toString(); String uri = request.getRequestURI(); // 服务器本地的IP和端口号 String localAddr = request.getLocalAddr(); int localPort = request.getLocalPort(); // 应用的上下文路径 String contextPath = request.getContextPath(); // 请求协议 String protocol = request.getProtocol(); } } \"]},\"1112\":{\"h\":\"请求头\",\"t\":[\"Host: 101.43.69.31:8083 Connection: keep-alive Content-Length: 45 Accept: application/json, text/plain, */* User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78 Content-Type: application/json;charset=UTF-8 Origin: http://101.43.69.31:8080 Referer: http://101.43.69.31:8080/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 \",\"请求头中的信息，都是key：value的形式\",\"可以知道有哪一些请求头 Key → 获得所有的请求头\",\"也可以知道这些请求头当中的值是什么 Value → 获得特定Key对应的Value\",\"方法\",\"返回值\",\"说明\",\"getHeaderNames()\",\"Enumeration<String>\",\"获得所有的请求头，可以通过遍历的方式来使用，使用方式类似于Iterator\",\"getHeader(String)\",\"String\",\"传入的是请求头的Key，返回的是请求头的value\",\"构造一个请求，请求报文\",\"GET http://192.168.0.180:8080/demo4/header HTTP/1.1 Host: 192.168.0.180:8080 Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.41 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 \",\"代码\",\"@WebServlet(\\\"/header\\\") public class HeaderServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { Enumeration<String> headerNames = request.getHeaderNames(); System.out.println(\\\"所有的请求头\\\"); while (headerNames.hasMoreElements()) { String headerName = headerNames.nextElement(); System.out.println(headerName); } // 想要获得Host请求头的值 String hostValue = request.getHeader(\\\"Host\\\"); System.out.println(\\\"hostValue = \\\" + hostValue); } } \",\"控制台输出的结果\",\"所有的请求头 host connection cache-control upgrade-insecure-requests user-agent accept accept-encoding accept-language hostValue = 192.168.0.180:8080 \",\"可以直接输入对应的key-value\",\"Enumeration<String> headerNames = request.getHeaderNames(); System.out.println(\\\"所有的请求头\\\"); while (headerNames.hasMoreElements()) { String headerName = headerNames.nextElement(); String headerValue = request.getHeader(headerName); System.out.println(headerName + \\\":\\\" + headerValue); } \",\"小练习：能够判断，是否包含某个请求头呢?如果包含，请把对应值打印出来\",\"注意事项：请求头大小写不敏感\",\"// 想要获得Host请求头的值 String hostValue = request.getHeader(\\\"Host\\\"); String hostValue2 = request.getHeader(\\\"host\\\"); String hostValue3 = request.getHeader(\\\"HOST\\\"); \"]},\"1113\":{\"h\":\"请求体\",\"t\":[\"请求报文是\",\"POST http://localhost:8080/demo5/body HTTP/1.1 User-Agent: PostmanRuntime/7.29.2 Accept: */* Host: localhost:8080 Accept-Encoding: gzip, deflate, br Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 17 username=zhangsan \",\"请求体的部分\",\"username=zhangsan\",\"字节流InputStream、字符流Reader\",\"内容\",\"方法\",\"返回值\",\"描述\",\"字节流\",\"getInputStream()\",\"ServletInputStream\",\"获得字节流\",\"字符流\",\"getReader()\",\"BufferedReader\",\"获得字符流\",\"字节流\",\"@WebServlet(\\\"/body1\\\") public class BodyServlet1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { ServletInputStream inputStream = request.getInputStream(); File file = new File(\\\"D:\\\\\\\\tmp\\\", \\\"1.txt\\\"); FileOutputStream outputStream = new FileOutputStream(file); int length = 0; byte[] bytes = new byte[1024]; while ((length = inputStream.read(bytes)) != -1) { outputStream.write(bytes,0,length); } outputStream.close(); inputStream.close(); } } \",\"字符流\",\"@WebServlet(\\\"/body2\\\") public class BodyServlet2 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { BufferedReader reader = request.getReader(); File file = new File(\\\"D:\\\\\\\\tmp\\\", \\\"2.txt\\\"); BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file)); String str = null; while ((str = reader.readLine()) != null) { bufferedWriter.write(str); } bufferedWriter.flush(); bufferedWriter.close(); reader.close(); } } \"]},\"1114\":{\"h\":\"特殊信息\"},\"1115\":{\"h\":\"客户机和服务器主机信息(了解)\",\"t\":[\"请求是从客户机发到服务器的，在服务器中处理信息的获得，那么对于服务器，本地local是服务器，远程remote是客户机\",\"我们在Servlet中可以获得本地的IP和Port，也可以获得远程IP和Port\",\"信息\",\"方法\",\"返回值\",\"本地（服务器）IP\",\"getLocalAddr()\",\"String\",\"本地（服务器）端口号\",\"getLocalPort()\",\"int\",\"远程（客户机）IP\",\"getRemoteAddr()\",\"String\",\"远程（客户机）端口号\",\"getRemotePort()\",\"int\",\"@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 获得服务器端的信息 String localAddr = req.getLocalAddr(); int localPort = req.getLocalPort(); // 获得客户机端的信息 String remoteAddr = req.getRemoteAddr(); int remotePort = req.getRemotePort(); System.out.println(\\\"由\\\" + remoteAddr + \\\":\\\" + remotePort + \\\"发送到\\\" + localAddr + \\\":\\\" + localPort); } \"]},\"1116\":{\"h\":\"★请求参数\",\"t\":[\"请求参数的场景：\",\"请求参数 在请求行中\",\"getQueryString()\",\"请求参数 在请求体中\",\"getInputStream()/getReader()\",\"指的是key=value&key=value\",\"@WebServlet(\\\"/origin\\\") public class OriginServlet extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { String parameterString = null; if (\\\"GET\\\".equals(request.getMethod())) { parameterString = request.getQueryString(); }else { //ServletInputStream inputStream = request.getInputStream(); //byte[] bytes = new byte[1024]; //inputStream.read(bytes); //parameterString = new String(bytes); BufferedReader reader = request.getReader(); parameterString = reader.readLine(); } Map<String,String> parameterMap = executeMap(parameterString); String username = parameterMap.get(\\\"username\\\"); System.out.println(username); } private Map<String, String> executeMap(String parameterString) { HashMap<String, String> map = new HashMap<>(); if (parameterString == null || \\\"\\\".equals(parameterString)) { return map; } //parameterArray[0] = \\\"username=zhangsan\\\" //parameterArray[1] = \\\"password=lisi\\\" String[] parameterArray = parameterString.split(\\\"\\\\\\\\&\\\"); for (String parameter : parameterArray) { int index = parameter.indexOf(\\\"=\\\"); String key = parameter.substring(0,index); String value = parameter.substring(index + 1, parameter.length()); map.put(key, value); } return map; } } \"]},\"1117\":{\"h\":\"直接封装\",\"t\":[\"但是实际开发中并不需要我们自己这么做，因为Request已经帮我们封装了可以直接使用的方法了\",\"request.getParameterXXX这样的一些方法\",\"方法\",\"返回值\",\"说明\",\"getParameterNames()\",\"Enumeration<String>\",\"获得所有的key\",\"getParameterMap()\",\"Map<String,String[]>\",\"获得所有的请求参数\",\"getParameter(String)\",\"String\",\"获得第一个值\",\"getParameterValues(String)\",\"String[]\",\"获得所有值\",\"request对于请求参数的封装实际上，封装为一个Map<String,String[]>\",\"image-20230214165452004\",\"/** * GET http://localhost:8080/demo7/parameter?key1=a1&key1=a2&key1=a3&key2=b1&key2=b2&key2=b3&key3=c1&key3=c2&key3=c3 * key1: a1,a2,a3 * key2: b1,b2,b3 * key3: c1,c2,c3 * @author stone * @date 2023/02/14 16:49 */ @WebServlet(\\\"/parameter\\\") public class ParameterServlet extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { Map<String, String[]> parameterMap = request.getParameterMap(); Enumeration<String> parameterNames = request.getParameterNames(); while (parameterNames.hasMoreElements()) { String parameterName = parameterNames.nextElement(); System.out.println(\\\"parameterName = \\\" + parameterName); } String key1 = request.getParameter(\\\"key1\\\"); System.out.println(\\\"key1 = \\\" + key1); String[] key1s = request.getParameterValues(\\\"key1\\\"); System.out.println(\\\"key1s = \\\" + Arrays.asList(key1s)); } } \"]},\"1118\":{\"h\":\"引用类型\",\"t\":[\"GET http://localhost:8080/demo7/register?username=root&password=123456&age=20&birthday=2000-10-15 HTTP/1.1 \",\"将请求参数封装为一个引用类型的对象，比如User\",\"个性化（并不是一个褒义词）\",\"User user = new User(); user.setUsername(request.getParameter(\\\"username\\\")); user.setPassword(request.getParameter(\\\"password\\\")); \",\"反射\",\"BeanUtils.transfer(instance,parameterMap);//通过自己写的工具类，进行转换 \",\"public class WdBeanUtils { @SneakyThrows public static <T> T transfer(Class<T> clazz, Map<String, String[]> parameterMap) { // 先创建clazz对应的实例 T instance = clazz.newInstance(); // 给其成员变量赋值 → // 反射直接给成员变量赋值 field.set(instance,value) // 反射通过set方法间接给成员变量赋值 setMethod.invoke(instance,value) Iterator<String> iterator = parameterMap.keySet().iterator(); // 反射直接给field赋值 // giveFieldValue(clazz, parameterMap, instance, iterator); // 反射直接调用set方法，给set方法传入形参，通过形参给field赋值 giveMethodValue(clazz, parameterMap, instance, iterator); // 赋值完成之后给其返回去 return instance; } private static <T> void giveMethodValue(Class<T> clazz, Map<String, String[]> parameterMap, T instance, Iterator<String> iterator) throws NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException { while (iterator.hasNext()) { String fieldName = iterator.next(); // 拼接set方法名 // username → setUsername // password → setPassword // fieldName 首字母大写 char[] chars = fieldName.toCharArray(); chars[0] -= 32; String upperFirst = new String(chars); String setMethodName = \\\"set\\\" + upperFirst; // 获得形参的类型 → 成员变量的类型 Field field = clazz.getDeclaredField(fieldName); Class<?> type = field.getType(); Method method = clazz.getDeclaredMethod(setMethodName, type);//set方法 String[] value = parameterMap.get(fieldName); if (field.getType().isArray()) { method.invoke(instance, (Object) value); } else { //method.invoke(instance, value); method.invoke(instance, value[0]); } } } private static <T> void giveFieldValue(Class<T> clazz, Map<String, String[]> parameterMap, T instance, Iterator<String> iterator) throws NoSuchFieldException, IllegalAccessException { while (iterator.hasNext()) { // 请求参数名 → 成员变量名 String fieldName = iterator.next(); Field field = clazz.getDeclaredField(fieldName); field.setAccessible(true); // 判断field对应的成员变量的类型是否是数组， // 如果是数组，给其的值是value // 如果不是数组，给其的值是value[0] String[] value = parameterMap.get(fieldName); if (field.getType().isArray()) { field.set(instance, value); } else { field.set(instance, value[0]); } } } } \",\"BeanUtils\",\"引入依赖commons-beanutils\",\"BeanUtils.copyProperties(instance, parameterMap);//直接使用其提供的copyProperties方法 \"]},\"1119\":{\"h\":\"Post请求请求参数乱码\",\"t\":[\"乱码问题：编解码不一致\",\"构造一个form表单，一个Get请求，一个是Post请求，分别去获得请求参数，查看通过Get和Post请求获得的请求参数\",\"<h1>GET请求</h1> <form action=\\\"/demo8/parameter\\\" method=\\\"get\\\"> <input name=\\\"username\\\"><input type=\\\"submit\\\"> </form> <h1>POST请求</h1> <form action=\\\"/demo8/parameter\\\" method=\\\"post\\\"> <input name=\\\"username\\\"><input type=\\\"submit\\\"> </form> \",\"@Override protected void doPost(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { request.setCharacterEncoding(\\\"utf-8\\\"); String username = request.getParameter(\\\"username\\\"); System.out.println(\\\"username = \\\" + username); } \"]},\"1120\":{\"h\":\"文件上传\",\"t\":[\"在实际的开发过程中，有些场景需要做文件上传，比如上传头像，上传商品的描述图片等。\",\"我们首先来看文件上传的请求的form表单如何构造\",\"然后来看其对应的请求报文是什么样子的，然后我们在做进一步的分析\",\"创建了一个form表单如下\",\"<form action=\\\"/demo9/upload\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\"> 用户：<input type=\\\"text\\\" name=\\\"username\\\"><br> 头像：<input type=\\\"file\\\" name=\\\"avatar\\\"><br> <input type=\\\"submit\\\" name=\\\"提交\\\"> </form> \",\"显示效果如下\",\"image-20230310101121087\",\"然后构造请求数据\",\"image-20230310101252663\",\"接下来发送请求，并且通过fiddler来抓取请求报文\",\"POST http://localhost:8080/demo9/upload HTTP/1.1 Host: localhost:8080 Connection: keep-alive Content-Length: 1148487 Cache-Control: max-age=0 sec-ch-ua: \\\"Chromium\\\";v=\\\"110\\\", \\\"Not A(Brand\\\";v=\\\"24\\\", \\\"Microsoft Edge\\\";v=\\\"110\\\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \\\"Windows\\\" Upgrade-Insecure-Requests: 1 Origin: http://localhost:8080 Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1pgACDbBGFGBPZYi User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Referer: http://localhost:8080/demo15/upload.html Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 Cookie: Idea-dcbc35b9=2a0b80c2-0c01-4b8f-846d-d0915e770aa6 ------WebKitFormBoundary1pgACDbBGFGBPZYi Content-Disposition: form-data; name=\\\"username\\\" wangdao ------WebKitFormBoundary1pgACDbBGFGBPZYi Content-Disposition: form-data; name=\\\"avatar\\\"; filename=\\\"logo.png\\\" Content-Type: image/png PNG \\u001a IHDR \\b\\u0006 v pHYs .# .#\\u0001x ?v \\u0001_iCCPPhotoshop ICC profile xڭ ?( q\\u001c ?]\\u001d n0 ʟ 3 \\u0018 (\\u0011ud L z _ \\u00167)\\u0016 A \\u0018 20\\u0018$\\u0003 后面省略了很多很多内容 \",\"我们来分析一下上面的请求报文，首先能够进入眼帘的是，响应报文中出现了一堆未知的字符\",\"这些内容其实包含了图片的字节数据\",\"image-20230310105852598\",\"另外在请求信息之间出现了这样的一块内容,出现了两次\",\"------WebKitFormBoundary1pgACDbBGFGBPZYi\",\"这块内容其实就是分隔符，用来分割普通的请求数据和文件的请求数据的，在上面的请求头Content-Type的值中也可以看到。如果我们拿到请求体中的内容，通过分隔符，也就可以拿到图片的字节数据，拿到字节数据的话就可以通过OutputStream做写出了\",\"但是呢，这个过程如果我们自己来完成的话，非常的复杂。在Servlet3.0之前，我们可以借助第三方工具来封装，比如commons-fileupload（FileUpload – Using FileUpload (apache.org)），但是这个过程仍然是非常繁琐。\",\"Servlet3.0提供了对文件上传的支持，通过@MultipartConfig标注和HttpServletRequest提供的方法可以完成文件部分的获取，我们当前可以使用Request中的getPart方法直接拿到其图片部分\",\"Part getPart(String var1) throws IOException, ServletException; \",\"该方法的参数需要传入一个字符串值，该值是请求参数名，如果拿的是上面请求中图片文件的信息，则需要传入 avatar\",\"<!--intput标签中的name属性值其实就是请求参数名，分隔符中name对应的值也是这个--> 头像：<input type=\\\"file\\\" name=\\\"avatar\\\"><br> \",\"获得Part对象，通过Part中提供的方法可以获得其他具体的信息\",\"方法\",\"返回值\",\"说明\",\"getInputStream()\",\"InputStream\",\"获得字节输入流，可以读取字节数据将其保存下来\",\"getContentType()\",\"String\",\"获得正文类型，比如png图片，其值为image/png\",\"getSize()\",\"long\",\"获得文件字节大小\",\"getName()\",\"String\",\"获得请求参数名（这里就是avatar）\",\"getSubmittedFileName()\",\"String\",\"获得上传的原始文件名（这里是logo.png）\",\"@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Part avatar = req.getPart(\\\"avatar\\\"); InputStream inputStream = avatar.getInputStream(); String contentType = avatar.getContentType(); long size = avatar.getSize(); String name = avatar.getName(); String submittedFileName = avatar.getSubmittedFileName(); } \",\"如果要将图片以原始文件名保存在web资源根目录，我们可以写这样的代码\",\"@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Part avatar = req.getPart(\\\"avatar\\\"); InputStream inputStream = avatar.getInputStream(); String submittedFileName = avatar.getSubmittedFileName(); byte[] bytes = new byte[1024]; int length = 0; FileOutputStream outputStream = new FileOutputStream(new File(getServletContext().getRealPath(submittedFileName))); while ((length = inputStream.read(bytes)) != -1) { outputStream.write(bytes, 0, length); } inputStream.close(); } \"]},\"1121\":{\"h\":\"Request做请求转发（了解）\",\"t\":[\"实际开发过程中，基本不会再涉及到，当前基本上不再使用JSP技术，JSP技术使用过程中会做请求转发。\",\"JSP，而JSP是一种特殊的Servlet\",\"但是jsp目前已经没有什么使用场景了。目前架构主要是前后端分离。所以关于转发了解即可。\",\"image-20221103150745249\",\"如果是jsp的话，jsp其实也是一个servlet\",\"image-20221103150836330\",\"可以通过IDEA中的Tomcat的CATALINA_BASE看一下其生成的jsp 相关的java文件\",\"image-20221103152321797\",\"请求转发，其实就是在一个Servlet处理业务，处理完业务，继续由另外一个Servlet处理业务。\",\"其中一个关注点，转发的两个请求之间的数据共享\",\"Request域，转发的请求之间数据共享\",\"request.setAttribute\",\"request.getAttribute\",\"响应报文的封装，设置响应报文\",\"HTTP/1.1 200 Vary: accept-encoding,origin,access-control-request-headers,access-control-request-method,accept-encoding Set-Cookie: rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Sun, 12-Feb-2023 06:51:56 GMT Set-Cookie: JSESSIONID=24287278-5ebb-407d-a3f7-56b74782c4c7; Path=/; HttpOnly Access-Control-Allow-Origin: * Content-Type: application/json;charset=UTF-8 Date: Mon, 13 Feb 2023 06:51:56 GMT Content-Length: 200 {\\\"errno\\\":0,\\\"data\\\":{\\\"adminInfo\\\":{\\\"nickName\\\":\\\"admin123\\\",\\\"avatar\\\":\\\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\\\"},\\\"token\\\":\\\"24287278-5ebb-407d-a3f7-56b74782c4c7\\\"},\\\"errmsg\\\":\\\"成功\\\"} \",\"响应报文的组成\",\"响应行\",\"响应头\",\"(空行)\",\"响应体（正文） \",\"字符信息\",\"字节信息\"]},\"1122\":{\"h\":\"响应行\",\"t\":[\"协议就不设置了，设置一下响应状态码\",\"方法名\",\"参数\",\"说明\",\"setStatus(int)\",\"参数就是状态码\",\"设置响应状态码\",\"@WebServlet(\\\"/line\\\") public class LineServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException { response.setStatus(302); } } \",\"发送请求后接收到的响应报文\",\"HTTP/1.1 302 Content-Length: 0 Date: Wed, 15 Feb 2023 03:20:18 GMT Keep-Alive: timeout=20 Connection: keep-alive \"]},\"1123\":{\"h\":\"响应头\",\"t\":[\"响应头也是key：value的格式，提供了通用的方法，可以设置响应头的key和value；也提供了一些特定的方法，特定的方法做的事情，就是设置特定响应头的值\",\"方法\",\"参数\",\"说明\",\"setHeader(String,String)\",\"参数1提供key，参数2提供value\",\"通用的方法\",\"@WebServlet(\\\"/header\\\") public class HeaderServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException { // 第一个参数是key，第二个参数是value response.setHeader(\\\"custom-header\\\",\\\"abcdef\\\"); } } \",\"HTTP/1.1 200 custom-header: abcdef Content-Length: 0 Date: Wed, 15 Feb 2023 03:28:04 GMT Keep-Alive: timeout=20 Connection: keep-alive \"]},\"1124\":{\"h\":\"响应体\",\"t\":[\"响应体（正文）\",\"可以使用字符流，也可以使用字节流。\",\"方法\",\"返回值\",\"描述\",\"getWriter()\",\"PrintWriter\",\"字符流\",\"getOutputStream()\",\"ServletOutputStream\",\"字节流\",\"字符流\",\"@WebServlet(\\\"/body1\\\") public class BodyServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //resp.getWriter().println(\\\"hello world\\\"); //resp.getWriter().append(\\\"hello world\\\"); resp.getWriter().write(\\\"hello world\\\"); } } \",\"@WebServlet(\\\"/body2\\\") public class BodyServlet2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletOutputStream outputStream = resp.getOutputStream(); InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(\\\"dlrb.jpg\\\"); byte[] bytes = new byte[1024]; int length = 0; while ((length = inputStream.read(bytes)) != -1) { outputStream.write(bytes,0,length); } inputStream.close(); } } \",\"场景：\",\"字符流：响应文本数据，最主要的场景就是前后端分离之后，通过字符流响应Json数据\",\"字节流：响应图片、文件，也通常在文件下载的场景下使用\"]},\"1125\":{\"h\":\"特殊响应头\",\"t\":[\"特殊的几个响应头\",\"refresh → 定时刷新、跳转\",\"content-type → 限定响应的正文（也可以解决中文乱码问题）\",\"content-disposition → 文件下载\",\"location → 重定向\"]},\"1126\":{\"h\":\"refresh\",\"t\":[\"private void refreshAndForward(HttpServletResponse resp) { resp.setHeader(\\\"refresh\\\",\\\"3;url=/demo12/hello\\\"); } private void refreshPerSecond(HttpServletResponse resp) throws IOException { resp.setHeader(\\\"refresh\\\",\\\"1\\\"); Date date = new Date(); String dateStr = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\").format(date); resp.getWriter().write(dateStr); } \"]},\"1127\":{\"h\":\"Content-Type\",\"t\":[\"通常不需要设置\",\"比如我们响应Json数据给前端，我们可以设置Content-Type：application/json\",\"我们要在这里做字符集的设置，如果没有做有可能出现中文乱码\",\"比如我们响应Json，想要设置字符集为utf-8\",\"Content-Type:application/json;charset=utf-8\",\"@WebServlet(\\\"/contenttype\\\") public class ContentTypeServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 这里不是json而是普通字符，就设置了text/html了 resp.setHeader(\\\"content-type\\\",\\\"text/html;charset=utf-8\\\"); resp.getWriter().write(\\\"你好\\\"); } } \",\"也可以直接使用Response来调用其setContentType方法\"]},\"1128\":{\"h\":\"content-disposition\",\"t\":[\"下载的场景会使用\",\"content-disposition: attachment;filename=1.jpg\",\"以1.jpg来下载正文\",\"@WebServlet(\\\"/disposition\\\") public class ContentDispositionServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setHeader(\\\"content-disposition\\\",\\\"attachment;filename=1.jpg\\\"); ServletOutputStream outputStream = resp.getOutputStream(); InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(\\\"dlrb.jpg\\\"); byte[] bytes = new byte[1024]; int length = 0; while ((length = inputStream.read(bytes)) != -1) { outputStream.write(bytes,0,length); } inputStream.close(); outputStream.close(); } } \"]},\"1129\":{\"h\":\"location\",\"t\":[\"重定向\",\"@WebServlet(\\\"/location\\\") public class LocationServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"访问到LocationServlet\\\"); resp.setStatus(302); resp.setHeader(\\\"location\\\",\\\"http://localhost:8080/demo12/hello\\\"); } } \",\"请求体和响应体分别要使用到输入流和输出流\",\"关闭流，如果是通过request和response获得流，不手动关闭也可以；如果是自己创建的流，要及时关闭\",\"同一个请求处理过程中，不能既获得字节流又获得字符流\"]},\"1130\":{\"h\":\"请求分发案例\",\"t\":[\"场景：有多个请求\",\"Http://localhost:8080/user/login → 登录\",\"http://localhost:8080/user/create → 注册\",\"http://localhost:8080/user/info → 查看用户信息\",\"按照我们之前的写法，我们需要写3个Servlet，如果不想写3个Servlet，只写一个UserServlet可以不？\",\"Servlet的url-pattern的合法写法 /xxx/*,我们在这个UserServlet上可否写一个/user/*\",\"@WebServlet(\\\"/user/*\\\") public class UserServlet extends HttpServlet{ } \",\"获得请求的URI，根据uri 的user后面的值的不同做不同的处理\",\"@WebServlet(\\\"/user/*\\\") public class UserServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String requestURI = req.getRequestURI(); // 截取URI字符串，举例 /demo13/user/login int index = requestURI.lastIndexOf(\\\"/\\\"); String operation = requestURI.substring(index + 1, requestURI.length()); resp.setHeader(\\\"content-type\\\",\\\"text/html;charset=utf-8\\\"); // 请求URI的最后一级 if (\\\"login\\\".equals(operation)) { method1(req,resp); } else if (\\\"create\\\".equals(operation)) { method2(req,resp); } else if (\\\"info\\\".equals(operation)) { method3(req,resp); } //resp.getWriter().write(requestURI); } private void method1(HttpServletRequest req, HttpServletResponse resp) throws IOException { resp.getWriter().write(\\\"访问登录\\\"); } private void method2(HttpServletRequest req, HttpServletResponse resp) throws IOException { resp.getWriter().write(\\\"访问注册\\\"); } private void method3(HttpServletRequest req, HttpServletResponse resp) throws IOException { resp.getWriter().write(\\\"访问查看信息\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } } \"]},\"1131\":{\"h\":\"登录案例\",\"t\":[\"请求：先访问登录请求，登录如果成功，那么接着 先提示登录成功，然后过两秒访问到info请求\",\"这个请求由登录页面提供，我们可以通过html提供一个登录表单，该表单会发出请求\",\"http://localhost:8080/user/login → Servlet → 检查用户名和密码是否正确（使用一下MyBatis） →\",\"如果正确，那么就提示登录成功\",\"如果错误，那么刷新登录页面\",\"任务拆解：\",\"包含登录表单的 login.html文件，放在webapp目录下\",\"开发UserServlet \",\"/user/login对应的处理方法，使用MyBatis做查询\",\"/user/info对应的处理方法\",\"整合MyBatis，在应用程序中维护SqlSessionFactory实例\",\"/** * Servlet如果它的loadOnStartup为正数，则应用程序启动的时候初始化； * 如果为负数，则访问其URL-Pattern时才初始化 * 想让其应用程序启动的时候就初始化 → 提供一个SqlSessionFactory的实例，然后共享该实例 * @author stone * @date 2023/02/16 16:16 */ @WebServlet(value = \\\"/mybatis/init\\\",loadOnStartup = 1) public class MyBatisInitializationServlet extends HttpServlet { @SneakyThrows @Override public void init() throws ServletException { ServletContext servletContext = getServletContext(); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(\\\"mybatis.xml\\\")); servletContext.setAttribute(\\\"sqlSessionFactory\\\",sqlSessionFactory); } } \",\"@WebServlet(\\\"/user/*\\\") public class UserServlet extends HttpServlet { SqlSessionFactory sqlSessionFactory; @Override public void init() throws ServletException { sqlSessionFactory = (SqlSessionFactory) getServletContext().getAttribute(\\\"sqlSessionFactory\\\"); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String operation = URIUtil.fetchOperation(req); switch (operation) { case \\\"login\\\": login(req, resp); break; case \\\"info\\\": info(req, resp); break; default: resp.setHeader(\\\"content-type\\\",\\\"text/html;charset=utf-8\\\"); resp.getWriter().write(\\\"请求有误，请联系管理员\\\"); } } private void login(HttpServletRequest req, HttpServletResponse resp) throws UnsupportedEncodingException { // 判断用户名和密码是否符合要求 //Object sqlSessionFactory = getServletContext().getAttribute(\\\"sqlSessionFactory\\\"); SqlSession sqlSession = sqlSessionFactory.openSession(true); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); req.setCharacterEncoding(\\\"utf-8\\\"); String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); CskaoyanUser cskaoyanUser = userMapper.selectByUsernameAndPassword(username, password); if (cskaoyanUser == null) { resp.setStatus(302); resp.setHeader(\\\"location\\\",\\\"/demo14/login.html\\\"); }else { //先把user信息暂存一下 getServletContext().setAttribute(\\\"user\\\",cskaoyanUser); resp.setHeader(\\\"refresh\\\",\\\"2;/demo14/user/info\\\"); } } private void info(HttpServletRequest req, HttpServletResponse resp) throws IOException { CskaoyanUser user = (CskaoyanUser) getServletContext().getAttribute(\\\"user\\\"); System.out.println(\\\"user = \\\" + user); resp.setHeader(\\\"content-type\\\",\\\"text/html;charset= utf-8\\\"); resp.getWriter().write(\\\"欢迎你，\\\" + user.getUsername()); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } } \"]},\"1132\":{\"h\":\"（项目）会员管理\",\"t\":[\"查询会员信息\",\"GET http://101.43.69.31:8083/admin/user/list?page=1&limit=20&sort=add_time&order=desc HTTP/1.1 Host: 101.43.69.31:8083 Connection: keep-alive Accept: application/json, text/plain, */* X-CskaoyanMarket-Admin-Token: 85b7dffc-f6c6-4cf6-bc20-3c280f28f1bf User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62 Origin: http://101.43.69.31:8080 Referer: http://101.43.69.31:8080/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 \",\"请求URL是什么？\",\"http://101.43.69.31:8083/admin/user/list\",\"uri的部分 /admin/user/list\",\"a. 配置tomcat的话，要考虑虚拟映射的path → /\",\"b. 开发的Servlet的url-pattern，@WebServlet的value属性值 → /admin/user/*\",\"c. 最后一级是list，如果集成BaseServlet的话，需要UserServlet中有一个名称为list的方法\",\"image-20230829150425075\",\"@WebServlet(\\\"/admin/user/*\\\") public class UserServlet extends BaseServlet { public void list(HttpServletRequest request, HttpServletResponse response) { } } \",\"请求参数\",\"a. request.getParameter相关的方法\",\"​ (1). 在queryString里面出现了key=value形式的请求参数\",\"​ (2). 请求体里出现key=value\",\"b. request.getReader().readLine() 返回字符串信息\",\"​ (1).请求体里出现字符串 → 使用使用这个方法获得的是Json\",\"c. request.getPart() 获得Part对象\",\"​ (1).multipart/form-data请求，通常会携带文件(字节数据) → Part中的getInputStream做处理\",\"当前这个场景，我们的请求参数属于上面的哪种请求？ a1\",\"@WebServlet(\\\"/admin/user/*\\\") public class UserServlet extends BaseServlet { //queryString的值 page=1&limit=20&sort=add_time&order=desc @SneakyThrows public void list(HttpServletRequest request, HttpServletResponse response) { //Integer page = Integer.valueOf(request.getParameter(\\\"page\\\")); //Integer limit = Integer.valueOf(request.getParameter(\\\"limit\\\")); //String sort = request.getParameter(\\\"sort\\\"); //String order = request.getParameter(\\\"order\\\"); BaseParam baseParam = new BaseParam(); BeanUtils.copyProperties(baseParam,request.getParameterMap()); } } \",\"在这里已经接收到请求参数，我们需要完成的业务？\",\"增删改查中的哪一个或哪一些？\",\"这里应该做查询 → 根据add_time做降序查询user表中的page和limit对应的user信息\",\"-- limit 第一个值 (page -1) * limit -- limit 第二个值 limit SELECT * FROM market_user order by add_time desc limit 0,20\",\"整合MyBatis完成上面的业务\",\"@WebServlet(\\\"/admin/user/*\\\") public class UserServlet extends BaseServlet { SqlSessionFactory sqlSessionFactory = null; @Override public void init() throws ServletException { sqlSessionFactory = (SqlSessionFactory) getServletContext().getAttribute(\\\"sqlSessionFactory\\\"); } //queryString的值 page=1&limit=20&sort=add_time&order=desc @SneakyThrows public void list(HttpServletRequest request, HttpServletResponse response) { //Integer page = Integer.valueOf(request.getParameter(\\\"page\\\")); //Integer limit = Integer.valueOf(request.getParameter(\\\"limit\\\")); //String sort = request.getParameter(\\\"sort\\\"); //String order = request.getParameter(\\\"order\\\"); BaseParam baseParam = new BaseParam(); BeanUtils.copyProperties(baseParam,request.getParameterMap()); UserMapper mapper = sqlSessionFactory.openSession(true).getMapper(UserMapper.class); baseParam.initOffset(); List<MarketUser> userList = mapper.selectUserList(baseParam); } } \",\"返回值什么样子？\",\"我们刚刚只复制了请求报文，并不知道响应报文的响应体需要我们提供什么样的数据\",\"应该找到相应报文，找到其中的响应体\",\"HTTP/1.1 200 Vary: accept-encoding,origin,access-control-request-headers,access-control-request-method,accept-encoding Access-Control-Allow-Origin: * Content-Type: application/json;charset=UTF-8 Date: Tue, 29 Aug 2023 06:58:59 GMT Content-Length: 9805 {\\\"errno\\\":0,\\\"data\\\":{\\\"total\\\":79,\\\"pages\\\":4,\\\"limit\\\":20,\\\"page\\\":1,\\\"list\\\":[{\\\"id\\\":80,\\\"username\\\":\\\"user456\\\",\\\"password\\\":\\\"$2a$10$KairBY9XjiT0IqTj10Fz3uUumKqlbSX0oVVhTpfhkis1eJV9VSjm2\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-14 21:09:29\\\",\\\"lastLoginIp\\\":\\\"171.113.245.233\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"user456\\\",\\\"mobile\\\":\\\"15310888954\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-14 21:09:29\\\",\\\"updateTime\\\":\\\"2023-08-29 11:42:24\\\",\\\"deleted\\\":false},{\\\"id\\\":79,\\\"username\\\":\\\"wangshuai\\\",\\\"password\\\":\\\"$2a$10$wpa0FmHqaE6aNWrGDtmh.O3/NiNhR3pxig38/WWDeuiQJbZL8teyy\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-13 21:43:30\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"wangshuai\\\",\\\"mobile\\\":\\\"18839219012\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-13 21:43:30\\\",\\\"updateTime\\\":\\\"2023-08-13 21:43:30\\\",\\\"deleted\\\":false},{\\\"id\\\":78,\\\"username\\\":\\\"dsfnjdnc\\\",\\\"password\\\":\\\"$2a$10$z1DC5UXeljtOECGST5Ht5un2UXYdHUY.zUoFVEuoU0Foqmg9KiET6\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 09:59:36\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"dsfnjdnc\\\",\\\"mobile\\\":\\\"17889948070\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-12 09:59:36\\\",\\\"updateTime\\\":\\\"2023-08-12 09:59:36\\\",\\\"deleted\\\":false},{\\\"id\\\":77,\\\"username\\\":\\\"lipanl\\\",\\\"password\\\":\\\"$2a$10$2e3ZiDI6yU/d9jDGh3ow2ubtBxAyVTaNUr5NrA2rw2coo/thKhkJO\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 09:26:55\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"lipanl\\\",\\\"mobile\\\":\\\"15605215755\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-12 09:13:41\\\",\\\"updateTime\\\":\\\"2023-08-12 09:26:55\\\",\\\"deleted\\\":false},{\\\"id\\\":76,\\\"username\\\":\\\"abc123\\\",\\\"password\\\":\\\"$2a$10$zJXzS2hqfwrwH9qBpEWf6reIaBOoBRsDON4aSAyVTaX3f.a7PXl18G\\\",\\\"gender\\\":1,\\\"lastLoginTime\\\":\\\"2023-08-12 09:05:24\\\",\\\"lastLoginIp\\\":\\\"171.43.248.95\\\",\\\"userLevel\\\":1,\\\"nickname\\\":\\\"abc1232\\\",\\\"mobile\\\":\\\"189649576691\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":1,\\\"addTime\\\":\\\"2023-08-12 09:03:46\\\",\\\"updateTime\\\":\\\"2023-08-19 20:41:06\\\",\\\"deleted\\\":false},{\\\"id\\\":75,\\\"username\\\":\\\"userhhh\\\",\\\"password\\\":\\\"$2a$10$EuMQSEIACrpFiXKX9D8CC./1tjqZZA7gcz7ruKc2D58n0gblIw2yq\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 08:52:56\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"userhhh\\\",\\\"mobile\\\":\\\"18338708454\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-12 08:52:56\\\",\\\"updateTime\\\":\\\"2023-08-12 08:52:56\\\",\\\"deleted\\\":false},{\\\"id\\\":74,\\\"username\\\":\\\"11tong\\\",\\\"password\\\":\\\"$2a$10$xiufPksECD4y7WudNGleae6MDNabNUSDiEH4xz63V94PANvVCvjsG\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 23:41:56\\\",\\\"lastLoginIp\\\":\\\"37.128.243.180\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"11tong\\\",\\\"mobile\\\":\\\"18193408088\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 23:04:45\\\",\\\"updateTime\\\":\\\"2023-08-11 23:41:56\\\",\\\"deleted\\\":false},{\\\"id\\\":73,\\\"username\\\":\\\"6666666\\\",\\\"password\\\":\\\"$2a$10$4DGAP3HtGGf9fiJAR5FsUe580LglFuc8AlkwbQRhiofVz.2cfu1hu\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 22:28:46\\\",\\\"lastLoginIp\\\":\\\"171.113.246.131\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"6666666\\\",\\\"mobile\\\":\\\"19149355\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 22:28:46\\\",\\\"updateTime\\\":\\\"2023-08-11 22:53:53\\\",\\\"deleted\\\":false},{\\\"id\\\":72,\\\"username\\\":\\\"shibowen\\\",\\\"password\\\":\\\"$2a$10$xDgPrbO8hR1XhQf4bXxrP.Ly/vwWjXGtDtnShDUWB2DsTodOV/HWe\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 22:20:15\\\",\\\"lastLoginIp\\\":\\\"171.113.246.131\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"shibowen\\\",\\\"mobile\\\":\\\"15364314469\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 22:20:15\\\",\\\"updateTime\\\":\\\"2023-08-11 22:21:27\\\",\\\"deleted\\\":false},{\\\"id\\\":71,\\\"username\\\":\\\"cpj123\\\",\\\"password\\\":\\\"$2a$10$1ilmyiwiIIE3mIW9HZPYfenJRaEWDUZzj7u0sYYL1fLcTW58tf5Vi\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 10:59:52\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"cpj123\\\",\\\"mobile\\\":\\\"15213480588\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 16:54:45\\\",\\\"updateTime\\\":\\\"2023-08-12 10:59:52\\\",\\\"deleted\\\":false},{\\\"id\\\":70,\\\"username\\\":\\\"qianqian\\\",\\\"password\\\":\\\"$2a$10$9lZkUEdw1GVcBwk03L47JOetj8SRZDOun74fQ25gSJCXbuDUpXT6q\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 15:55:18\\\",\\\"lastLoginIp\\\":\\\"38.181.73.70\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"qianqian\\\",\\\"mobile\\\":\\\"17302213266\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 15:55:18\\\",\\\"updateTime\\\":\\\"2023-08-11 17:09:03\\\",\\\"deleted\\\":false},{\\\"id\\\":69,\\\"username\\\":\\\"13428689333\\\",\\\"password\\\":\\\"$2a$10$Fl3B9m6dRAJ42.ZJw5Vbsucgd8a7WE7YEJbGq2NMrrDejqfeM6vVC\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 14:39:58\\\",\\\"lastLoginIp\\\":\\\"171.113.246.131\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"13428689333\\\",\\\"mobile\\\":\\\"13428689333\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 14:39:58\\\",\\\"updateTime\\\":\\\"2023-08-11 14:41:19\\\",\\\"deleted\\\":false},{\\\"id\\\":68,\\\"username\\\":\\\"141d54\\\",\\\"password\\\":\\\"$2a$10$39XcI1ZFVlZ./Q4/hk9U2.t/2XvwfWZWlqhuhxtAzPCpICO7DS9Ku\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 12:52:49\\\",\\\"lastLoginIp\\\":\\\"171.113.246.131\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"141d54\\\",\\\"mobile\\\":\\\"18571475083\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 12:52:49\\\",\\\"updateTime\\\":\\\"2023-08-11 12:52:49\\\",\\\"deleted\\\":false},{\\\"id\\\":67,\\\"username\\\":\\\"haodene\\\",\\\"password\\\":\\\"$2a$10$3wUuWJgmJrswpf7vMjyNKu2QaS7OcIWMoJIoZqeA.j2QxZX0hc3Gq\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 12:38:06\\\",\\\"lastLoginIp\\\":\\\"210.3.159.237\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"haodene\\\",\\\"mobile\\\":\\\"17332885067\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 12:38:06\\\",\\\"updateTime\\\":\\\"2023-08-11 12:38:54\\\",\\\"deleted\\\":false},{\\\"id\\\":66,\\\"username\\\":\\\"xn1111\\\",\\\"password\\\":\\\"$2a$10$6NYttr6pchyPDRN776peiuMqI.P.tk2Nexu/ExPF2zLrpdsw91.UW\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 13:01:41\\\",\\\"lastLoginIp\\\":\\\"171.43.247.130\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"xn1111\\\",\\\"mobile\\\":\\\"15543400379\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 12:17:09\\\",\\\"updateTime\\\":\\\"2023-08-12 13:01:41\\\",\\\"deleted\\\":false},{\\\"id\\\":65,\\\"username\\\":\\\"999999\\\",\\\"password\\\":\\\"$2a$10$IVMS2c3U94iwOiu9gRpM...zuO9AEmjvz3q7hqIqtcog..nKp4d06\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 12:01:34\\\",\\\"lastLoginIp\\\":\\\"171.113.246.131\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"999999\\\",\\\"mobile\\\":\\\"17863013913\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 12:01:34\\\",\\\"updateTime\\\":\\\"2023-08-11 17:54:15\\\",\\\"deleted\\\":false},{\\\"id\\\":64,\\\"username\\\":\\\"uer123\\\",\\\"password\\\":\\\"$2a$10$8iSnFilcnMLl0SxgCnnniuxsTCwSJB/toW9QTK3L7Z6/NMggZpzFS\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 11:44:41\\\",\\\"lastLoginIp\\\":\\\"38.181.73.70\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"uer123\\\",\\\"mobile\\\":\\\"17353291393\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-11 11:44:41\\\",\\\"updateTime\\\":\\\"2023-08-11 11:44:41\\\",\\\"deleted\\\":false},{\\\"id\\\":63,\\\"username\\\":\\\"aaaaaa\\\",\\\"password\\\":\\\"$2a$10$xz7HJbKtqb0r4eFTXZHZrufncjSL8TLypxrQf1RtY30O6J4NFDF.O\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-11 10:37:50\\\",\\\"lastLoginIp\\\":\\\"210.3.159.237\\\",\\\"userLevel\\\":1,\\\"nickname\\\":\\\"aaaaaa\\\",\\\"mobile\\\":\\\"17332855555\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":2,\\\"addTime\\\":\\\"2023-08-11 10:37:50\\\",\\\"updateTime\\\":\\\"2023-08-11 11:38:32\\\",\\\"deleted\\\":false},{\\\"id\\\":62,\\\"username\\\":\\\"czc123\\\",\\\"password\\\":\\\"$2a$10$CDVT5W1oGx7VpmVbR/y3jeSuul3cK2fKHYgXO0RSoJEOIwLRl6NKy\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-12 09:04:19\\\",\\\"lastLoginIp\\\":\\\"171.43.248.189\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"czc123\\\",\\\"mobile\\\":\\\"15374579055\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-10 21:36:07\\\",\\\"updateTime\\\":\\\"2023-08-12 09:04:19\\\",\\\"deleted\\\":false},{\\\"id\\\":61,\\\"username\\\":\\\"wangao4\\\",\\\"password\\\":\\\"$2a$10$SNfWiy4zIB9EZx39y5aaHuWgI32gC7.6V67l1OlreBPpWQHim0exe\\\",\\\"gender\\\":0,\\\"lastLoginTime\\\":\\\"2023-08-10 19:59:31\\\",\\\"lastLoginIp\\\":\\\"171.113.241.66\\\",\\\"userLevel\\\":0,\\\"nickname\\\":\\\"wangao4\\\",\\\"mobile\\\":\\\"13593956279\\\",\\\"avatar\\\":\\\"https://yanxuan.nosdn.127.net/80841d741d7fa3073e0ae27bf487339f.jpg?imageView&quality=90&thumbnail=64x64\\\",\\\"weixinOpenid\\\":\\\"\\\",\\\"sessionKey\\\":\\\"\\\",\\\"status\\\":0,\\\"addTime\\\":\\\"2023-08-10 19:59:31\\\",\\\"updateTime\\\":\\\"2023-08-10 19:59:31\\\",\\\"deleted\\\":false}]},\\\"errmsg\\\":\\\"成功\\\"} \",\"在浏览器中看到的json\",\"image-20230829160911344\",\"@Data public class UserListVo{ Object data; // 跟着{ 可以Object或Map String errmsg;// 跟着 \\\" int errno; // 跟着数据 // 如果跟着[ 就是数组或List等集合类型 } \",\"image-20230829161523950\",\"@Data public class ListVo { Integer limit; List list; Integer page; Integer total; Integer pages; } \",\"image-20230829161617787\",\"@Data public class ListVo { Integer limit; List<MarketUser> list; Integer page; Integer total; Integer pages; } \",\"介绍一个工具 GsonFormat（或GsonFormatPlus） 安装之后，在类中使用alt+s快捷键\",\"@NoArgsConstructor @Data public class GsonFormatVo { private Integer errno; private DataDTO data; private String errmsg; @NoArgsConstructor @Data public static class DataDTO { private Integer total; private Integer pages; private Integer limit; private Integer page; private List<MarketUser> list; } // alt + s } \",\"响应对应的JSON数据\",\"令Servlet中的方法返回值为Object，BaseServlet就会将这个Object转换为Json字符串，然后使用字符输出流写出\",\"@SneakyThrows public UserListVo list(HttpServletRequest request, HttpServletResponse response) { //Integer page = Integer.valueOf(request.getParameter(\\\"page\\\")); //Integer limit = Integer.valueOf(request.getParameter(\\\"limit\\\")); //String sort = request.getParameter(\\\"sort\\\"); //String order = request.getParameter(\\\"order\\\"); BaseParam baseParam = new BaseParam(); BeanUtils.copyProperties(baseParam,request.getParameterMap()); UserMapper mapper = sqlSessionFactory.openSession(true).getMapper(UserMapper.class); baseParam.initOffset(); List<MarketUser> userList = mapper.selectUserList(baseParam); UserListVo userListVo = new UserListVo(); userListVo.setErrno(0); userListVo.setErrmsg(\\\"成功\\\"); ListVo data = new ListVo(); data.setList(userList); data.setPage(baseParam.getPage()); data.setLimit(baseParam.getLimit()); //data.setPages(); //data.setTotal(); userListVo.setData(data); return userListVo; } \"]},\"1133\":{\"h\":\"小结\",\"t\":[\"找Servlet\",\"处理请求参数\",\"在Servlet中根据参数完成对应业务处理(增删改查)\",\"返回对应的json数据\",\"写熟练了 都是洒洒水\"]},\"1134\":{\"h\":\"练习题\",\"t\":[\"market\",\"http://101.43.69.31:8080\",\"开发对应的请求 → 行政区域\",\"MyBatis的多表查询\",\"查询出来使用Stream来做封装也可以\"]},\"1135\":{\"h\":\"03. Conversation\"},\"1136\":{\"h\":\"学习目标\",\"t\":[\"理解使用会话技术的原因\",\"理解客户端技术和服务器技术之间的区别\",\"掌握Cookie的设置（构造），熟悉Cookie的获取，能够通过浏览器查看Cookie信息\",\"理解Session维护的机制，能够分析Session的失效原因\",\"熟悉使用Session存储和获取信息\",\"掌握Cookie和Session的使用场景\"]},\"1137\":{\"h\":\"前置知识准备\",\"t\":[\"响应头的设置\",\"Postman中设置请求头\",\"URL编码(浏览器地址栏不能写中文或一些特殊的字符)\",\"同一个客户端向服务器中发送的多个请求，需要信息共享\",\"在做服务器开发过程中，我们的客户端和服务器之间，会有请求报文和响应报文\",\"客户端给服务器发送请求：请求报文\",\"服务器给客户端发送响应：响应报文\",\"HTTP协议的无状态性，会导致一个问题，服务器不清楚究竟是哪一个客户端\",\"image-20230217145950266\",\"通过这种方式，携带了一些信息，服务器确实是可以知道 请求来自于哪一个客户端？\",\"通过上面这种方式，是否有弊端？\",\"用户信息不安全\",\"客户端和浏览器每一次发送请求的时候都需要携带请求参数比较繁琐\",\"image-20230217150128380\",\"image-20230217150416160\",\"以会话的形式来体现客户端和服务器之间的交流，最重要的一件事情是要让服务器知道客户端是谁。\",\"李雷（客户端）：韩梅梅你好，我想请你吃饭\",\"韩梅梅（服务器）：（韩梅梅不知道你是谁）你是谁呀？\",\"李雷（客户端）：韩梅梅你好，我是李雷，我想请你吃饭\",\"韩梅梅（服务器）：可以啊，在哪里吃饭呢\",\"李雷（客户端）：我们去吃香他她煲仔饭吧\",\"韩梅梅（服务器）：你是谁，我是和谁去吃煲仔饭\",\"李雷（客户端）：吃完饭去看电影吧\",\"韩梅梅（服务器）：你是谁，我是和谁去看电影\",\"如果没有会话技术，服务器不清楚每一次请求来源于哪一个客户端\",\"如果引入会话技术，这段会话就会变成这个样子\",\"李雷（客户端）：韩梅梅你好，我是李雷，我想请你吃饭\",\"韩梅梅（服务器）：好啊，那吃什么\",\"李雷（客户端）：我们去吃香他她香他她煲仔饭吧\",\"韩梅梅（服务器）：好啊，那说好了，李雷咱两去吃煲仔饭，几点见面\",\"李雷（客户端）：晚上6点可以吗\",\"韩梅梅（服务器）：可以啊，那吃完饭呢\",\"李雷（客户端）：吃完饭去看电影吧\",\"韩梅梅（服务器）：好吧\",\"如果做到的这件事情呢？\",\"一种情况是，我直接告知你我的信息\",\"李雷（客户端）：韩梅梅你好，我是李雷，我想请你吃饭\",\"韩梅梅（服务器）：好啊，那吃什么 (我给你提醒，你要告诉我你是李雷)\",\"李雷（客户端）：我们去吃香他她香他她煲仔饭吧 （我是李雷）\",\"韩梅梅（服务器）：好啊，那说好了，李雷咱两去吃煲仔饭，几点见面\",\"李雷（客户端）：晚上6点可以吗（我是李雷）\",\"韩梅梅（服务器）：可以啊，那吃完饭呢\",\"李雷（客户端）：吃完饭去看电影吧（我是李雷）\",\"韩梅梅（服务器）：好吧\",\"还有种情况，类似于你服务器端有个保险柜，告知我你的保险柜的编号，就可以获得保险柜，然后从保险柜中获得信息\",\"李雷（客户端）：韩梅梅你好，我是李雷，我想请你吃饭\",\"韩梅梅（服务器）：好啊，那吃什么 (我给你一个编号，这个编号是89757)\",\"李雷（客户端）：我们去吃香他她香他她煲仔饭吧 （编号89757）\",\"韩梅梅（服务器）：好啊，那说好了，李雷咱两去吃煲仔饭，几点见面\",\"李雷（客户端）：晚上6点可以吗（编号89757）\",\"韩梅梅（服务器）：可以啊，那吃完饭呢\",\"李雷（客户端）：吃完饭去看电影吧（编号89757）\",\"韩梅梅（服务器）：好吧\",\"如果是客户端直接携带确切的信息，这个就是客户端技术；如果是通过客户端提供的编号，进而在服务器中进一步获得信息，那么这个就是服务器技术\",\"服务器会话技术，是在客户端会话技术基础上的\",\"归根结底：（身份）信息，究竟是客户端维护的，还是服务器维护的\",\"客户端技术：Cookie\",\"服务器技术：Session\",\"携带信息：客户端（浏览器）在向服务器发起请求的时候直接携带了信息，这些信息是通过请求头中一个特殊的请求头携带的\",\"这个特殊的请求头叫Cookie\"]},\"1138\":{\"h\":\"Cookie的格式\",\"t\":[\"Cookie：key1=value1;key2=value2\",\"携带的是键值对信息，携带的键值对信息都是字符串信息\",\"可以携带多组键值对信息，如果携带多组，中间使用分号分隔开\",\"image-20230829173101441\",\"GET http://localhost:8080/ HTTP/1.1 Host: localhost:8080 Connection: keep-alive Cache-Control: max-age=0 sec-ch-ua: \\\"Chromium\\\";v=\\\"116\\\", \\\"Not)A;Brand\\\";v=\\\"24\\\", \\\"Microsoft Edge\\\";v=\\\"116\\\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \\\"Windows\\\" Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 Cookie: name=lilei; age=18; gender=male; height=180 \"]},\"1139\":{\"h\":\"构造Cookie信息\",\"t\":[\"这个过程是指，客户端（浏览器）在发起这个请求的时候，通过请求报文封装信息，请求报文中的请求头Cookie包含了对应的值\",\"那么这里我们要构造Cookie信息，想办法让请求头Cookie里面包含对应的值\",\"浏览器构造Cookie\",\"Postman构造Cookie\",\"服务器构造Cookie\"]},\"1140\":{\"h\":\"浏览器构造Cookie\",\"t\":[\"步骤\",\"打开开发者工具，快捷键F12\",\"找应用程序（Application）\",\"应用程序里找 存储（Storage）里的Cookie\",\"image-20230217160439567\",\"请求报文：\",\"GET http://localhost:8080/demo1/cookie/fetch HTTP/1.1 Host: localhost:8080 Connection: keep-alive Cache-Control: max-age=0 sec-ch-ua: \\\"Chromium\\\";v=\\\"110\\\", \\\"Not A(Brand\\\";v=\\\"24\\\", \\\"Microsoft Edge\\\";v=\\\"110\\\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \\\"Windows\\\" Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.46 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 Cookie: zhangsan=123456; lisi=654321 \",\"第17行里的值\",\"Cookie: zhangsan=123456; lisi=654321\"]},\"1141\":{\"h\":\"Postman构造Cookie\",\"t\":[\"也是构造Cookie这个请求头\",\"image-20230217160834421\",\"请求报文\",\"GET http://localhost:8080/demo1/cookie/fetch HTTP/1.1 Cookie: zhaoliu=123456;wangwu=789987 User-Agent: PostmanRuntime/7.29.2 Accept: */* Host: localhost:8080 Accept-Encoding: gzip, deflate, br Connection: keep-alive \",\"第2行\",\"Cookie: zhaoliu=123456;wangwu=789987\"]},\"1142\":{\"h\":\"服务器构造Cookie\",\"t\":[\"客户端 → 服务器，请求\",\"服务器 → 客户端，响应\",\"客户端 → 服务器，请求\",\"服务器能给客户端做的是响应\",\"而我们希望的是客户端请求的时候携带Cookie\",\"服务器提供特殊的响应报文，客户端获得这个特殊的请求报文之后，就会设置Cookie，在发送请求的时候就会携带Cookie了\",\"特殊的响应报文，使用的是特殊的响应头，这个特殊的响应头set-cookie\",\"/** * 发送请求 * http://localhost:8080/demo1/cookie/set?username=lilei * @author stone * @date 2023/02/17 16:13 */ @WebServlet(\\\"/cookie/set\\\") public class CookieSetServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String username = req.getParameter(\\\"username\\\"); // 把这个通过响应报文给到浏览器，并且让浏览器发起请求的时候，通过Cookie来携带 resp.setHeader(\\\"set-cookie\\\",\\\"username=\\\" + username); } } \",\"来看一下这个请求的响应报文\",\"HTTP/1.1 200 set-cookie: username=lilei Content-Length: 0 Date: Fri, 17 Feb 2023 08:15:48 GMT Keep-Alive: timeout=20 Connection: keep-alive \",\"image-20230217161620669\",\"Response是针对于Cookie有提供特定的方法，能够让我们直接设置Cookie\",\"resp.addCookie(new Cookie(\\\"username\\\",username));\"]},\"1143\":{\"h\":\"获取Cookie\",\"t\":[\"要获得的是Cookie这个请求头\",\"String result = request.getHeader(\\\"Cookie\\\");\",\"去解析里面的键值对\",\"实际上我们并没有这样做，Request中提供了直接获得Cookie的方法\",\"Cookie[] cookies = request.getCookies();\",\"单个Cookie，我们先获得其键值对信息\",\"键：cookie.getName()\",\"值：cookie.getValue()\",\"@WebServlet(\\\"/cookie/fetch\\\") public class CookieServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException { Cookie[] cookies = request.getCookies(); for (Cookie cookie : cookies) { String name = cookie.getName(); String value = cookie.getValue(); System.out.println(name + \\\" -> \\\" + value); } } } \"]},\"1144\":{\"h\":\"Cookie中的信息\",\"t\":[\"Cookie这个类的实例中封装信息\",\"信息\",\"方法\",\"说明\",\"name\",\"有参构造方法\",\"核心值\",\"value\",\"有参构造方法\",\"核心值\",\"Path\",\"setPath(String)\",\"设置Cookie的有效URI\",\"Domain\",\"setDomain(String)\",\"域名，做Cookie的共享\",\"MaxAge\",\"setMaxAge(int)\",\"设置过期时间，单位是秒，如果超过这个时间Cookie就会过期\",\"image-20230217173529919\"]},\"1145\":{\"h\":\"Path\",\"t\":[\"cookie.setPath(String path)\",\"如果没有手动setPath，cookie会给你设置一个默认的path，这个默认的path就是你当前这个请求的path\",\"举个例子，比如http://localhost:8080/demo1/cookie/fetch,当前这个请求的path其实就是/demo1/cookie\",\"验证一下，我们构造一个新的请求http://localhost:8080/demo1/cookie/path1\",\"@WebServlet(\\\"/cookie/path1\\\") public class PathServlet1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.addCookie(new Cookie(\\\"username\\\",\\\"zhangsan\\\")); } } \",\"image-20230220095604889\",\"设置了path有什么用，访问该path对应的请求的时候才会获得（携带）该cookie\",\"针对于上面的请求，也就是接下来要访问的url应该是这样的\",\"http://localhost:8080/demo1/cookie/*\",\"我们也可以自己指定path\",\"@WebServlet(\\\"/cookie/path2\\\") public class PathServlet2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie cookie = new Cookie(\\\"username\\\", \\\"zhangsan\\\"); cookie.setPath(\\\"/demo1\\\"); resp.addCookie(cookie); } } \",\"可以做到应用之间的数据共享\",\"举个例子：比如在demo1中构造一个Cookie，在demo2中获得demo1中的Cookie的值不就是数据共享了么\",\"http://localhost:8080/demo1/cookie/path3 设置Cookie的path为 /demo2或/，demo2中是可以获得这个cookie的\"]},\"1146\":{\"h\":\"Domain\",\"t\":[\"设置域名或ip，用来说不同域名下Cookie共享\",\"如果设置了Cookie的父域名，子域名下的请求可以共享父域名下的Cookie\",\"image-20230217174121261\",\"image-20230217174125606\",\"image-20230217174206288\",\"发送请求到我这台服务器\",\"ccc.com:8080/demo1/cookie/fetch\",\"sub.ccc.com:8080/demo1/cookie/fetch\",\"third.sub.ccc.com:8080/demo1/cookie/fetch\",\"fourth.third.sub.ccc.com:8080/demo1/cookie/fetch\",\"先来做domain的设置\",\"// 需要访问的ccc.com:8080/domain @WebServlet(\\\"/domain\\\") public class DomainServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie cookie = new Cookie(\\\"jd\\\", \\\"liuqiangdong\\\"); // 打算以ccc.com作为父域名 // 后面发送请求 ccc.com:8080/demo1/cookie/fetch cookie.setDomain(\\\"ccc.com\\\"); resp.addCookie(cookie); } } \",\"注意：不能设置和当前域名无关的domain，比如访问localhost时候设置一个ccc.com这样的domain是不可以的，否则浏览器会直接无视\"]},\"1147\":{\"h\":\"MaxAge\",\"t\":[\"如果没有设置，则默认情况下存在于浏览器的内存中。关闭浏览器，则cookie信息失效。如果希望\",\"cookie可以持久化保存，则可以设置一个maxAge=正数的时间，表示会在硬盘上面存活多少秒。\",\"@WebServlet(\\\"/cookie/maxAge\\\") public class MaxAgeServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie cookie = new Cookie(\\\"expired-time\\\", \\\"aha\\\"); cookie.setMaxAge(5);//设置过期时间为5s，如果没有设置，则浏览器关闭时会被清楚 resp.addCookie(cookie); } } \",\"如果maxAge设置为0的话，则做的是删除\",\"@WebServlet(\\\"/cookie/remove\\\") public class CookieRemoveServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie cookie = new Cookie(\\\"username\\\",\\\"\\\"); cookie.setMaxAge(0);//删除cookie：1.name为username；2.path为/demo1/cookie resp.addCookie(cookie); } } \",\"注意事项：要关注path\"]},\"1148\":{\"h\":\"案例\",\"t\":[\"在访问一个请求的时候，输出上一次访问的时间\",\"思路：\",\"访问该请求的时候，生成时间，放入到cookie中\",\"访问该请求的时候，从cookie中取出这个时间，并且使用response做响应\",\"{ private static final String LAST = \\\"last\\\"; public static final String UTF_8 = \\\"utf-8\\\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // cookie获取 Cookie[] cookies = req.getCookies(); if (cookies != null && cookies.length != 0) { for (Cookie cookie : cookies) { String name = cookie.getName(); if (LAST.equals(name)) { String value = cookie.getValue(); String decodeDate = URLDecoder.decode(value, UTF_8); resp.getWriter().println(decodeDate); } } } // cookie设置 Date date = new Date(); // value不支持特殊字符和中文；但是可以将其装换为URL编码 String format = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\").format(date); String dateEncode = URLEncoder.encode(format, UTF_8); Cookie cookie = new Cookie(LAST, dateEncode); resp.addCookie(cookie); } } \",\"过程中使用URL编解码，原因是Cookie中不支持特殊字符和中文\"]},\"1149\":{\"h\":\"小结\",\"t\":[\"1.优点：小巧、减轻了服务器压力、可以很轻松的实现多台主机、多个应用下的资源共享\",\"2.缺点：存储容量有限制 4kb、数据类型有限制、只可以存储一些非敏感数据\",\"浏览器（客户端）向服务器发起请求的时候，可以通过Cookie的方式来携带一些信息\",\"在服务器内存中存储了一些数据，每一个用户（客户端）都可以有这样的空间。也就是大家需要携带一些信息过来才能找到自己的空间\",\"Session相当于每个用户存在服务器的保险柜，保险柜里可以存一些数据，这些数据也可以是敏感数据；要获得保险柜要带着钥匙，如果钥匙丢了，就打不开这个保险柜\"]},\"1150\":{\"h\":\"提供Session\",\"t\":[\"Session不需要专门去提供，当我们获取Session的时候，其实就提供了Session给客户端\",\"当我们在服务端获取Session的时候，其实会提供一个响应头set-cookie\",\"HTTP/1.1 200 Set-Cookie: JSESSIONID=F1500D1D295B3953DCBBF89AD614F1E6; Path=/demo2; HttpOnly Content-Length: 0 Date: Mon, 20 Feb 2023 06:55:17 GMT Keep-Alive: timeout=20 Connection: keep-alive \",\"JSESSIONID这样的一个key，其实就是保险柜的钥匙；我们下一次发起请求的时候，其实就会在Cookie中携带这个Cookie\",\"第二次发起请求的请求头\",\"GET http://localhost:8080/demo2/hello HTTP/1.1 Host: localhost:8080 Connection: keep-alive Cache-Control: max-age=0 sec-ch-ua: \\\"Chromium\\\";v=\\\"110\\\", \\\"Not A(Brand\\\";v=\\\"24\\\", \\\"Microsoft Edge\\\";v=\\\"110\\\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \\\"Windows\\\" Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.46 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 Cookie: JSESSIONID=F1500D1D295B3953DCBBF89AD614F1E6 \",\"这个JSESSION这个Cookie的name对应的value就是Session对象的id，通过这个id对应的就是一个session对象\"]},\"1151\":{\"h\":\"获取Session\",\"t\":[\"获得Session可以使用Request提供的getSession方法\",\"getSession()\",\"如果还没有创建Session，那么就创建一个Session；如果已经有了Session，那么就返回这个Session。当前这个客户端或用户第一个调用getSession方法的时候创建了Session\",\"getSession(boolean create)\",\"如果create的值为true则同上；\",\"如果create的值为false，那么如果有了Session则返回Session对象，如果没有则返回null，就不会创建Session\",\"实际上我们使用的无参方法更多一些\",\"image-20230830114536311\"]},\"1152\":{\"h\":\"使用Session\",\"t\":[\"在服务器端创建Session，它才能够获得Session\",\"Session其实就像一个保险柜 → key-value形式的保险柜\",\"key：String\",\"value：Object\",\"存：setAttribute(String,Object)\",\"取：getAttribute(String)\",\"@WebServlet(\\\"/session/set\\\") public class SessionSetServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 如果是第一次访问，那么做的事情就是创建并获取Session HttpSession session = req.getSession(); session.setAttribute(\\\"mobile\\\",\\\"18666778899\\\"); session.setAttribute(\\\"userid\\\",\\\"65536\\\"); } } \",\"@WebServlet(\\\"/session/get\\\") public class SessionGetServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 如果是第一次访问，那么做的事情就是创建并获取Session HttpSession session = req.getSession(); Object mobile = session.getAttribute(\\\"mobile\\\"); Object userid = session.getAttribute(\\\"userid\\\"); String result = userid + \\\" : \\\" + mobile; resp.getWriter().println(result); } } \",\"只要是同一个用户（客户端），即使是不同的Servlet，都是可以从Session中存取数据的；其中有一个关键点，如何识别为同一个用户，客户端发起请求携带的Cookie中的JSESSIONID对应的值相同\",\"通常使用Session维护的是一些敏感数据，比如用户id或用户信息（user对象之类）\"]},\"1153\":{\"h\":\"Session的生命周期\",\"t\":[\"对象生命周期：\",\"对象的创建：request.getSession()\",\"对象的销毁：关闭服务器、卸载应用\",\"数据的生命周期\",\"数据的产生：session域(空间)\",\"数据的销毁：对象的销毁不会导致数据的销毁。数据的销毁只有 以下两种可能性：\",\"session有效期到达（默认是30min）\",\"主动调用session.invalidate()方法-----用在注销的场景下。\"]},\"1154\":{\"h\":\"常见问题\"},\"1155\":{\"h\":\"关闭浏览器，Session是否被销毁\",\"t\":[\"并没有\",\"只不过当前浏览器发起请求的时候，通常没有继续携带之前的JSESSIONID，但如果你仍然携带之前的JSESSIONID，那么仍然可以获取数据\"]},\"1156\":{\"h\":\"服务器关闭，Session发生了什么\",\"t\":[\"Session对象会被销毁，并且会被序列化。\",\"当服务器重启时，会被反序列化，重新加载到内容。\",\"当时要注意，重启前后的Session对象并不是同一个，但是JSESSIONID是同一个值\",\"来写一个例子\"]},\"1157\":{\"h\":\"Session失效，原因会是啥\",\"t\":[\"Session失效就是从Session中获取不到其存储的信息，则可以认为Session失效\",\"跨域请求Session不能共享 → ip或端口号或域名发生变化，都叫跨域\",\"比如192.168.3.15:8080 前端 访问了 192.168.3.15:8083 → 端口号发生了变化，跨域\",\"过期或手动设置\",\"请求携带的JSESSIONID变了\"]},\"1158\":{\"h\":\"禁用Cookie之后的session策略\",\"t\":[\"session底层是依赖于cookie的，但是如果浏览器禁用了cookie，那么session还可以使用吗？还可以。但是必须采用一种URL重写的方式。此时session的编号会附着在地址栏的后面，以;形式来进行分割。\",\"举个例子：http://localhost:8080/demo2/session/fetch;JSESSIONID=XXXX\"]},\"1159\":{\"h\":\"思考\",\"t\":[\"如果让你自定义一个类似于Session的技术，你能做出来吗？\",\"如果要实现一个自定义的Session，需要做什么事情？\",\"能够获取自定义Session的方法，获取自定义Session的这个方法，也能够返回一把钥匙\",\"考虑数据存储的问题，我们应该创建一个什么样的结构的数据 Map<钥匙,自定义Session>\",\"自定义的Session应该是什么结构的数据，key为String，value为Object的键值对，Map<String,Object> \",\"setAttribute(String,Object) → map.put(String,Object)\",\"getAtrribute(String) → map.get(String)\",\"过期时间，自定义Session中定义一个成员变量，就叫过期时间，当我们获取session(的信息)的时候，先检查当前时间和过期时间的关系；也可以增加让你的Session失效的方法，map里的信息清除\",\"可以自己尝试来做一下？\",\"后面做项目的时候会给大家一个参考\",\"重构登录案例，并且增加注销功能\",\"我们 在前面Request和Response学习阶段实现的登录案例其实是有些瑕疵的，前面案例我们在登录成功之后将用户信息存储在ServletContext中，这是不合理的。我们应该在Session中存储用户信息，保证不同的用户获取的时候是自己Session中的信息，另外通过Session的invalidate方法实现注销功能\",\"session.setAttribute(\\\"username\\\",username)\",\"session.invalidate()\",\"@WebServlet(\\\"/login\\\") public class LoginServlet extends HttpServlet { SqlSessionFactory sqlSessionFactory; @Override public void init() throws ServletException { sqlSessionFactory = (SqlSessionFactory) getServletContext().getAttribute(MyBatisUtil.SQL_SESSION_FACTORY); } @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { SqlSession sqlSession = sqlSessionFactory.openSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); String username = request.getParameter(\\\"username\\\"); String password = request.getParameter(\\\"password\\\"); List<String> passwordFromDb = userMapper.selectPasswordByUsername(username); response.setContentType(\\\"text/html;charset=utf-8\\\"); if (passwordFromDb != null && passwordFromDb.size() == 1 && password.equals(passwordFromDb.get(0))) { response.getWriter().println(\\\"登录成功,即将查看个人信息\\\"); response.setHeader(\\\"refresh\\\",\\\"2;url=/demo3/info\\\"); request.getSession().setAttribute(\\\"username\\\", username); }else{ response.getWriter().println(\\\"登录失败，即将跳转到登录页面重新登录\\\"); response.setHeader(\\\"refresh\\\",\\\"2;url=/demo3/login.html\\\"); } } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { this.doGet(request, response); } } \",\"@WebServlet(\\\"/info\\\") public class InfoServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { SqlSessionFactory sqlSessionFactory = (SqlSessionFactory) getServletContext().getAttribute(MyBatisUtil.SQL_SESSION_FACTORY); UserMapper userMapper = sqlSessionFactory.openSession().getMapper(UserMapper.class); String username = (String) req.getSession().getAttribute(\\\"username\\\"); List<CskaoyanUser> cskaoyanUsers = userMapper.selectUserByName(username); CskaoyanUser user = null; resp.setContentType(\\\"text/html;charset=utf-8\\\"); if (cskaoyanUsers != null && cskaoyanUsers.size() == 1) { user = cskaoyanUsers.get(0); resp.getWriter().println(user.toString()); }else { resp.getWriter().println(\\\"获取数据有误，请重新登录\\\"); resp.setHeader(\\\"refresh\\\",\\\"2;url=/demo3/login.html\\\"); } } } \",\"@WebServlet(\\\"/logout\\\") public class LogoutServlet extends HttpServlet { private void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException { response.setContentType(\\\"text/html;charset=utf-8\\\"); HttpSession session = request.getSession(); session.invalidate(); response.getWriter().println(\\\"注销成功，返回登录页面\\\"); response.setHeader(\\\"refresh\\\", \\\"2;url=\\\" + request.getContextPath() + \\\"/login.html\\\"); } } \"]},\"1160\":{\"h\":\"Cookie和Session\",\"t\":[\"联系：Cookie和Session都是为了让服务端获取客户端提供的信息；提供的信息都是键值对形式的；Session技术是在Cookie技术的基础上进行的，都需要对请求头做处理\",\"区别：\",\"信息位置 \",\"Cookie是客户端技术，信息存储在客户端（浏览器），也意味着前端可以操作\",\"Session是服务器技术，信息储存在服务器\",\"敏感性 \",\"Cookie共享的是常规信息，直接抓包获取的是对应的值\",\"Session通常共享的是敏感信息，直接抓包获取的是id\",\"值类型 \",\"Cookie的值为String字符串\",\"Session的值为Object\",\"跨应用 \",\"Cookie信息可以跨应用共享\",\"Session信息局限于当前应用\"]},\"1161\":{\"h\":\"数据共享\",\"t\":[\"Request域：存在转发关系的Servlet之间的数据共享，比如Servlet和JSP数据共享\",\"Context域：整个应用之中的数据共享，比如整个应用中的SqlSessionFactory、properties等\",\"Session域：同一个用户（客户端）中的数据共享，比如登录之后的用户信息\"]},\"1162\":{\"h\":\"香蕉 1\"},\"1163\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1164\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1165\":{\"c\":[\"香蕉\",\"水果\"]},\"1166\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"1167\":{\"h\":\"香蕉 2\",\"t\":[\"一个被数字 10 星标了的香蕉文章。\"]},\"1168\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1169\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1170\":{\"c\":[\"香蕉\",\"水果\"]},\"1171\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"1172\":{\"h\":\"香蕉 3\"},\"1173\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1174\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1175\":{\"c\":[\"香蕉\"]},\"1176\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"1177\":{\"h\":\"香蕉 4\"},\"1178\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"1179\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"1180\":{\"c\":[\"香蕉\"]},\"1181\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"1182\":{\"h\":\"01. Git\",\"t\":[\"学习目标：\",\"git是什么，用来解决什么问题\",\"掌握git的核心流程（工作区、暂存区、本地仓库）\",\"熟练git的核心命令\",\"如何处理冲突\",\"git的分支是什么，有什么好处\",\"了解企业中分支的使用方式\",\"在idea上进行git操作\",\"https://www.progit.cn/\"]},\"1183\":{\"h\":\"介绍\",\"t\":[\"最早是用于Linux的代码管理，这是Linus写得代码。它也会有一些代码的写得有问题。但是早期都是通过邮件给Linus发信息，告诉这里有问题。但是随着参与的人越来越多，这样不可行。\",\"Bitkeeper公司，将自己的版本控制工具给到Linux使用。但是后续Linux的一群开发者都是技术大佬，想办法破解。惹怒了BitKeeper公司。\",\"Linus 的第二个伟大作品。2005年由于BitKeeper软件公司对Linux社区停止了免费使用权。Linus迫不得己自己开发了一个分布式版本控制工具，从而Git诞生了。 据说Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git。一个月之内，Linux系统的源码已经由Git管理了。\",\"Git 是一个版本控制工具。可以记录和追踪 某个文件 在某一个时刻的内容和状态。\",\"Git的使用有点像一个 网盘，这个网盘大家都可以来操作。只是Git比网盘要高级一点，体现在哪里呢？其实就是Git可以追踪这个网盘 中 文件的历史版本状态。\",\"Git 可以 记录某个文件夹下的 不同文件 在不同时间节点的不同状态。Git可以去记录这些文件产生的变化\",\"写论文其实就有这样一个过程 。 手动管理版本。 软件帮助管理版本。\",\"发展历史：Linus，为了管理Linux的核心代码来开发的一个分布式的版本控制工具。\",\"Git的特点：\",\"分布式\",\"离线可用\",\"可以回退\",\"Git和SVN的对比\",\"Git：分布式版本控制工具\",\"SVN：集中式版本控制工具\",\"image-20220526111136071\",\"image-20220526111920966\",\"git学了 svn也会用。因为命令基本类似。\"]},\"1184\":{\"h\":\"安装Git\"},\"1185\":{\"h\":\"下载\",\"t\":[\"官方下载地址\"]},\"1186\":{\"h\":\"安装\",\"t\":[\"直接傻瓜式安装即可。\",\"image-20220526113721503\",\"安装的时候，要注意 让Windows 记住登录凭证\"]},\"1187\":{\"h\":\"Git的使用\"},\"1188\":{\"h\":\"Git核心流程\",\"t\":[\"image-20220526113143360\"]},\"1189\":{\"h\":\"Git 命令\"},\"1190\":{\"h\":\"注册相关网站\",\"t\":[\"以Gitee为例。\",\"记住注册的时候 使用的 \",\"用户名（推荐使用英文）\",\"密码\",\"手机号\",\"邮箱(可以注册后自行设置)\",\"密码一定要记得。\"]},\"1191\":{\"h\":\"建立远程仓库\",\"t\":[\"image-20220526114956920\"]},\"1192\":{\"h\":\"clone\",\"t\":[\"把远程仓库，克隆到本地。（一定是第一次）\",\".git文件夹，是git自己的元信息的一个文件夹，大家不要动。\",\"# 下载远程仓库的内容，并且在本地创建一个和远程仓库名同名的文件夹 git clone https://gitee.com/common-zhou/test_50th.git # 克隆远程仓库，到本地，文件夹的名字叫做 test53th1。如果文件夹不存在，会创建一个。 # 文件夹可以有两种状态。 如果这个文件夹不存在，那就替你新建一个；如果文件夹存在且为空， 这时候用你的文件夹。 # 如果这个文件夹存在，且不为空。会报错。 大家要注意一下报错信息。 git clone https://gitee.com/common-zhou/test53th.git test53th1 git clone https://gitee.com/ciggar/test-40th.git dirName \",\"在git中管理文件的版本，需要使用文本文件。\",\".txt .md ; 不要使用docx pptx\",\"在git中，对比文件的变化，是一行一行来进行比较的。所以我们需要追踪文本文件，docx是类似压缩包的文件，没有办法对比每一行。\"]},\"1193\":{\"h\":\"status\",\"t\":[\"这个命令可以帮助我们查看工作区和缓冲区中的变化。\",\"工作区中的变化\",\"缓冲区中的变化\",\"image-20220526144014440\"]},\"1194\":{\"h\":\"add\",\"t\":[\"这个命令可以帮助我们把工作区中的变化提交到缓冲区。\",\"# 有以下的三种提交方式 # 文件的名字 git add fileName # 文件的类型，通配符添加 # 只添加 .java文件结尾的文件 。从工作空间提交到缓冲区 git add *.java # 所有文件 git add . \"]},\"1195\":{\"h\":\"commit\",\"t\":[\"我们这个commit，和我们在写论文的时候，什么比较像？提交了一个版本。\",\"commit这个命令可以帮助我们把git仓库中 缓冲区中的内容提交到本地仓库。\",\"第一次提交的时候，需要设置 用户名和邮箱\",\"有两种设置的方式\",\"直接去用户目录下，设置 .gitconfig 这个文件,假如没有这个文件，就创建一个\",\"[user] name = ciggar email = 291136733@qq.com \",\"执行命令去设置\",\"git config --global user.email 222@qq.com git config --global user.name xxx \",\"设置完之后，就可以提交了，会产生一个版本信息\",\"image-20230111111257900\",\"这一步需要大家注意几件事情：\",\"这一步会产生一个文件的版本号，只是前7位。\",\"如果是第一次commit，需要设置用户名和邮件地址\",\"只会把缓冲区中的变化提交到本地仓库，不会把工作区中的变化提交到本地仓库\",\"commit的时候需要指定提交的信息，提交的信息一般要去设置模板\",\"# 提交 git commit -m \\\"msg\\\" ## msg:msg信息一般要有统一的格式 例如：描述信息 (issue号) # 1.描述信息 (issue号) # 2.(issue号) 描述信息 git commit -m \\\"某某bug的修改\\\" git commit -m \\\"HashMap的练习\\\" # 尽量做到，见到描述信息可以知道这次提交是干什么的。 # 不要写什么 1 abc # \",\"设置完之后，就可以提交了，会产生一个版本信息\",\"image-20220526145749580\"]},\"1196\":{\"h\":\"push\",\"t\":[\"image-20230111111257900\",\"push这个命令可以帮助我们把本地仓库中的所有变化 推送到远程仓库。\",\"这一步在第一次操作的时候，需要去填写对应用户名和密码\",\"image-20220526150144318\",\"push的时候，能不能指定文件去 push呢？ 不能\",\"只有当本地仓库中的版本领先于远程仓库的时候，才可以push\"]},\"1197\":{\"h\":\"pull\",\"t\":[\"会拉取远程仓库中的所有的变化到本地。并且会显示出版本号\",\"image-20220526151312030\",\"当本地仓库中的版本落后于远程仓库的时候，就要pull\",\"“ 落后就要pull”\",\"<<<< 这中间的代码，就是自己写得代码。 ====== 别的提交写得代码 >>>>>>> 处理冲突。首先要决定留哪些代码，是留你的，还是留你的同事的； 或者两份都留 其次，删除分隔符。 <<<<<<< HEAD 同事B也做了一些事情。 ======= 这是同事A的第一次提交 第二行提交 >>>>>>> c58c7c2b23823ca5ba375ddb39e8bf136b8ddd9b \"]},\"1198\":{\"h\":\"log\",\"t\":[\"查看仓库中的所有的版本信息\",\"image-20220526151518200\"]},\"1199\":{\"h\":\"协作开发\"},\"1200\":{\"h\":\"邀请成员加入仓库\",\"t\":[\"不管是 开源的仓库，还是私有的仓库，都是 只有仓库中的成员才能去修改仓库中的代码。\",\"开源：所有人都可以访问到\",\"私有：只有仓库指定的成员才能看到\",\"image-20220526152352372\",\"私有仓库只能添加总共五个管理员（带主账号）。所以如果想把整个小组都拉进来，可以把仓库设置成公开仓库，可以添加小组全部成员。\"]},\"1201\":{\"h\":\"处理冲突\",\"t\":[\"模拟冲突处理流程：\",\"image-20220526162705623\",\"总结：\",\"先push的人不处理冲突，后push的人要处理 冲突\",\"和组员一起开发的时候，尽量不要开发同一个文件，很容易产生冲突\",\"push之前最好先pull一下，不然可能会push失败\",\"早上上班之后，第一件事情，拉取最新的代码（pull）\",\"晚上下班之前，最后一件事情，把最新的本地代码推送上去（push）。代码一定要能编译通过有没有bug无所谓。\",\"Vim怎样使用\",\"1.点击i 表示是编辑。才能输入 2.保存的时候，怎么保存呢？ 点击esc; 输入一个冒号 shift+: (英文状态下) ; 输入wq（保存并退出） \",\"冲突的处理\",\"<<<<<<<< HEAD =============== >>>>>>>>> fgfskljasdljdlkasjksalk // 左到=。就是你自己的代码版本 <<<<<<<<< --> ============ // =到> 是远端的版本 ========= --> >>>>>>>>>>>> 需要告诉git，如果保留代码。 比如是留你的版本，还是留你同事版本。 1.留代码 2.删除分隔符 3. 处理好所有的冲突之后， git add . ; git commit -m \\\"处理和同事1的冲突\\\" 4. push 。 需要抓紧push，防止别人又push了代码 \",\"多练习。\",\"冲突分两种情况：\",\"1.两次提交。修改了不同的文件： 这个是git可以帮我们处理这个问题。 git会保存最新的代码，比如一个人修改了 1 3 5 ； 另一个提交修改 2 4 7 。 最后，保存最新的 123457这些信息即可。 git需要我们输入一个信息， 会直接进入vim界面。你在这个界面输入提交信息， wq。\",\"2.两次提交，修改了相同的文件。 这时候，git没有办法帮我们处理。我们需要手动处理。需要决定留哪一份，或者合并全留。\",\"如果不知道我们同时修改了哪个文件： 可以用 git status 。\",\"add commit .\",\"<<<<<<<<<< heAD ==================== >>>>>>>>>>>>>>>>>>>> \"]},\"1202\":{\"h\":\"后悔药\",\"t\":[\"Git给我们提供了一些可以回退的措施，也叫作后悔药。\",\"image-20220526163624301\",\"git checkout\",\"需要指定需要回退的文件\",\"$ git checkout text.txt $ git checkout . \",\"这个命令，危险吗？ 危险！慎用\",\"注意：回退的内容，是找不回来的，要慎用。比如你写了一天的代码，都是在工作区的。\",\"git reset\",\"把缓冲区中的变化，回退到工作区。注意：git reset不会改变文件中的内容\",\"问题：能不能指定文件reset呢？ 能\",\"git reset --hard version\",\"就指的是版本号。 我们每一次commit都有一个版本号\",\"image-20220526171556679\",\"大家觉得，回退用的多不多？用的不多，因为我们再企业中写代码，不可能写了一个月代码，全丢掉。\"]},\"1203\":{\"h\":\"忽略文件\",\"t\":[\"git在做版本控制的时候，可以让我们忽略一些文件，不去追踪这个仓库中这些文件的变化。\",\"怎么做呢？\",\"可以在Git仓库的根目录下 添加 一个 .gitignore 这个名字的文件，可以在这个文件中声明哪些文件不被git追踪版本信息\",\"对于Java项目来说，我们可以忽略哪些内容呢？\",\"# 单个文件 xxx.txt # 配置文件夹 .idea # 配置文件的类型 *.iml target/*.class *.class \",\"# 就是让git忽略一些文件。 不要去追踪这些文件。 比如class文件 # 一些私密信息（密码）这些不要让git管理。 # 代表我不想让其追踪 4.txt的文件 4.txt # 这个就是代表我想忽略 target文件夹 target/ # 一定要注意，如果git已经追踪上了。再添加到.gitIgnore文件里面，无效。 1.txt # 比如，现在就是想忽略掉1.txt。 怎么办？ # 把1.txt剪切换一个位置 ; add commit ; 把1.txt文件拷贝回来。 这样我们就可以忽略掉这些文件。 \",\"注意事项：\",\"忽略文件最好是在创建这个远程仓库的时候，就应该自动创建出来\",\"image-20220526172640586\",\"一旦一个文件已经被追踪并且提交到远程仓库中去了，那么再在.gitignore 这个文件中去忽略它的变化，是无效的\"]},\"1204\":{\"h\":\"分支管理\",\"t\":[\"Git分支是Git版本控制系统中的一种重要概念，用于在同一个Git仓库中独立开发多个功能或特性。在Git中，每个分支都代表着仓库中的一个完整版本，并且可以在分支上进行独立的开发和提交。\",\"使用分支的好处是可以让多个人在同一个仓库中同时进行开发，不会相互干扰，同时也可以随时回到之前的某个状态进行修复或重新开发。当一个分支的开发完成后，可以将其合并到主分支或其他分支上。\",\"Git默认创建一个主分支，通常称为“master”或“main”，其他分支可以基于主分支或其他分支创建，每个分支都有一个唯一的名称。在开发过程中，可以在不同的分支之间进行切换，以便进行不同的工作。例如，可以创建一个分支来解决某个bug，同时在另一个分支上开发一个新的功能，而不会影响彼此之间的工作。\",\"总之，Git分支是一种非常有用的功能，可以帮助开发人员更好地管理代码并提高开发效率。\",\"分支操作\",\"# 查看所有分支 $ git branch # 创建分支并切换 iss53 $ git checkout -b iss53 # 切换分支 $ git checkout iss53 # 合并分支 $ git merge iss53 \",\"工作过程中的一般使用步骤\",\"# 一般会有一个master 主分支 # 会有一个dev分支 # 1. 如果有需求，会从dev拉一个分支，比如 dev-feature1，所有的提交都提交在这个分支上 # 1.1 从dev拉取一个分支，并切换到这个分支 git checkout -b dev-feature1 # 2. 等到开发完成，会把这个分支合并到dev。 dev经过测试，会合并到master # 2.1先切换到dev分支 git checkout dev # 2.2合并刚刚的分支 git merge dev-feature1 \",\"有一些不知道的操作，我想知道命令。\",\"上google\",\"上群里（比较危险。 ） 。 如果别人给了你命令，你不确定。先去问问chatGPT。\",\"问问chatGPT\",\"不认识的命令，不要随意去执行。\",\"sudo rm -rf /\",\"git push -f\"]},\"1205\":{\"h\":\"在idea上进行git操作\",\"t\":[\"首先配置好git路径\",\"image-20230406111436344\",\"点击Test有版本。\",\"红色代表是新增的文件\",\"蓝色代表是文件有改动\",\"绿色代表已经提交。其他的操作与git基本操作一致。\",\"在文件中，可以看到文件的变动\",\"image-20230406112925347\",\"git可以右键，然后add commit 提交信息。\",\"备注：\",\"学完之后，要多练习git。把日常的代码，使用git管理起来。因为后面写项目的时候，要大量使用git。\",\"先使用命令行，不要使用idea中的可视化。用命令行，你可以清楚的知道发生了什么。\",\"多练习一下分支\",\"冲突处理一定要会。\",\"常见问题\",\"如果在git配置中报错fatal: Authentication failed for ''，其实就是凭证失败的意思\",\"解决办法如下：凭证失败解决\"]},\"1206\":{\"h\":\"Posts\"},\"1207\":{\"h\":\"Database\"},\"1208\":{\"h\":\"Java\"},\"1209\":{\"h\":\"Java Se\"},\"1210\":{\"h\":\"Apple\"},\"1211\":{\"h\":\"Spring\"},\"1212\":{\"h\":\"Banana\"},\"1213\":{\"h\":\"Git\"},\"1214\":{\"h\":\"Tools\"}},\"dirtCount\":0,\"index\":[[\"凭证失败解决\",{\"1\":{\"1205\":1}}],[\"凭空出现\",{\"1\":{\"540\":1}}],[\"绿色代表已经提交\",{\"1\":{\"1205\":1}}],[\"蓝色代表是文件有改动\",{\"1\":{\"1205\":1}}],[\"慎用\",{\"1\":{\"1202\":1}}],[\"危险\",{\"1\":{\"1202\":1}}],[\"危险吗\",{\"1\":{\"1202\":1}}],[\"危险容器\",{\"1\":{\"57\":1}}],[\"留代码\",{\"1\":{\"1201\":1}}],[\"留个整数的就三位\",{\"1\":{\"153\":1}}],[\"晚上下班之前\",{\"1\":{\"1201\":1}}],[\"晚上6点可以吗\",{\"1\":{\"1137\":3}}],[\"拉取最新的代码\",{\"1\":{\"1201\":1}}],[\"拉丁码表\",{\"1\":{\"799\":1}}],[\"早上上班之后\",{\"1\":{\"1201\":1}}],[\"早在诺基亚\",{\"1\":{\"303\":1}}],[\"冲突处理一定要会\",{\"1\":{\"1205\":1}}],[\"冲突分两种情况\",{\"1\":{\"1201\":1}}],[\"冲突的处理\",{\"1\":{\"1201\":1}}],[\"冲突\",{\"1\":{\"1201\":1}}],[\"邀请成员加入仓库\",{\"0\":{\"1200\":1}}],[\"落后就要pull\",{\"1\":{\"1197\":1}}],[\"落在了数组上的同一个位置\",{\"1\":{\"1015\":1}}],[\"推送到远程仓库\",{\"1\":{\"1196\":1}}],[\"推荐使用英文\",{\"1\":{\"1190\":1}}],[\"推荐使用bigdecimal这个类完成运算\",{\"1\":{\"675\":1}}],[\"推荐使用\",{\"1\":{\"592\":1}}],[\"推荐使用的\",{\"1\":{\"510\":1}}],[\"推荐使用匿名对象\",{\"1\":{\"483\":1}}],[\"推荐使用类名\",{\"1\":{\"474\":1}}],[\"推荐在有混合录入多种数据的需求时\",{\"1\":{\"352\":1}}],[\"推荐增加\",{\"1\":{\"251\":1}}],[\"推荐大家使用的写法\",{\"1\":{\"254\":1}}],[\"推荐大家使用\",{\"1\":{\"149\":1}}],[\"推荐\",{\"1\":{\"130\":1}}],[\"邮箱\",{\"1\":{\"1190\":1}}],[\"集中式版本控制工具\",{\"1\":{\"1183\":1}}],[\"集合框架\",{\"1\":{\"1077\":1}}],[\"集合b\",{\"1\":{\"999\":1}}],[\"集合b必须是一个元素有限的集合\",{\"1\":{\"679\":1}}],[\"集合来说\",{\"1\":{\"955\":1}}],[\"集合类\",{\"1\":{\"970\":1}}],[\"集合类讲课的大致顺序\",{\"1\":{\"951\":1}}],[\"集合类帮助我们把这个事情隐藏起来\",{\"1\":{\"950\":1}}],[\"集合类容器\",{\"1\":{\"283\":1}}],[\"集合是具有某种特定性质的事物的总体\",{\"1\":{\"950\":1}}],[\"集合是什么\",{\"0\":{\"950\":1}}],[\"集合只能存储对象\",{\"1\":{\"712\":1}}],[\"集合当中使用\",{\"1\":{\"712\":1}}],[\"集合a\",{\"1\":{\"999\":1}}],[\"集合a中的同一个元素\",{\"1\":{\"682\":1}}],[\"集合a和b之间的对应关系f\",{\"1\":{\"679\":1,\"999\":1}}],[\"集合a必须是一个无限大小\",{\"1\":{\"679\":1}}],[\"集合工具类collections\",{\"1\":{\"478\":1}}],[\"集合的工具而存在\",{\"1\":{\"417\":1}}],[\"集合中的某一个元素\",{\"1\":{\"417\":1}}],[\"集合中单个元素的类型\",{\"1\":{\"279\":1}}],[\"集合\",{\"1\":{\"213\":1,\"393\":1,\"413\":1,\"947\":1,\"980\":1}}],[\"离线可用\",{\"1\":{\"1183\":1}}],[\"网盘\",{\"1\":{\"1183\":1}}],[\"网络通信三要素\",{\"1\":{\"885\":1}}],[\"网络编程的原理无论是出于面试还是实际开发的需求\",{\"1\":{\"885\":1}}],[\"网络编程\",{\"0\":{\"885\":1}}],[\"网络中断\",{\"1\":{\"746\":1}}],[\"网络操作\",{\"1\":{\"690\":1}}],[\"网络模型\",{\"0\":{\"112\":1}}],[\"网络传输中的通讯协议\",{\"0\":{\"110\":1}}],[\"据说linus花了两周时间自己用c写了一个分布式版本控制系统\",{\"1\":{\"1183\":1}}],[\"惹怒了bitkeeper公司\",{\"1\":{\"1183\":1}}],[\"星标了的香蕉文章\",{\"1\":{\"1167\":1}}],[\"星期\",{\"1\":{\"724\":1}}],[\"弯曲的\",{\"2\":{\"1166\":1,\"1171\":1,\"1176\":1,\"1181\":1}}],[\"香蕉\",{\"0\":{\"1162\":1,\"1167\":1,\"1172\":1,\"1177\":1},\"2\":{\"1165\":1,\"1170\":1,\"1175\":1,\"1180\":1}}],[\"香港地区的一个繁体字编码方案\",{\"1\":{\"799\":1}}],[\"跨应用\",{\"1\":{\"1160\":1}}],[\"跨域\",{\"1\":{\"1157\":1}}],[\"跨域请求session不能共享\",{\"1\":{\"1157\":1}}],[\"敏感性\",{\"1\":{\"1160\":1}}],[\"归根结底\",{\"1\":{\"1137\":1}}],[\"告知我你的保险柜的编号\",{\"1\":{\"1137\":1}}],[\"告诉这里有问题\",{\"1\":{\"1183\":1}}],[\"告诉程序员发生了什么问题\",{\"1\":{\"749\":1}}],[\"告诉了我们\",{\"1\":{\"682\":1}}],[\"告诉它lambda表达式是哪个接口的子类对象\",{\"1\":{\"653\":1}}],[\"告诉别人\",{\"1\":{\"510\":2}}],[\"告诉代码的使用者\",{\"1\":{\"510\":1}}],[\"告诉java的编译器\",{\"1\":{\"320\":1}}],[\"告诉浏览器正文的长度\",{\"1\":{\"121\":1}}],[\"告诉浏览器去请求新的地址\",{\"1\":{\"121\":1}}],[\"告诉服务器\",{\"1\":{\"116\":1}}],[\"韩梅梅不知道你是谁\",{\"1\":{\"1137\":1}}],[\"韩梅梅\",{\"1\":{\"1137\":16}}],[\"韩梅梅你好\",{\"1\":{\"1137\":5}}],[\"韩文\",{\"1\":{\"315\":1}}],[\"携带\",{\"1\":{\"1145\":1}}],[\"携带的键值对信息都是字符串信息\",{\"1\":{\"1138\":1}}],[\"携带的是键值对信息\",{\"1\":{\"1138\":1}}],[\"携带信息\",{\"1\":{\"1137\":1}}],[\"携带了一些信息\",{\"1\":{\"1137\":1}}],[\"携带json数据的post请求\",{\"1\":{\"1104\":1}}],[\"令servlet中的方法返回值为object\",{\"1\":{\"1132\":1}}],[\"欢迎你\",{\"1\":{\"1131\":1}}],[\"\\u0016\",{\"1\":{\"1120\":1}}],[\"\\u00167\",{\"1\":{\"1120\":1}}],[\"\\u0011ud\",{\"1\":{\"1120\":1}}],[\"\\u0018\",{\"1\":{\"1120\":2}}],[\"ʟ\",{\"1\":{\"1120\":1}}],[\"\\u001d\",{\"1\":{\"1120\":1}}],[\"\\u0001\",{\"1\":{\"1120\":1}}],[\"\\u0001x\",{\"1\":{\"1120\":1}}],[\"\\b\\u0006\",{\"1\":{\"1120\":1}}],[\"\\u001a\",{\"1\":{\"1120\":1}}],[\"头像\",{\"1\":{\"1120\":2}}],[\"头部\",{\"1\":{\"975\":2}}],[\"拼接set方法名\",{\"1\":{\"1118\":1}}],[\"拼接set关键字\",{\"1\":{\"269\":1}}],[\"远程\",{\"1\":{\"1115\":2}}],[\"远程remote是客户机\",{\"1\":{\"1115\":1}}],[\"远志\",{\"1\":{\"127\":2}}],[\"里的cookie\",{\"1\":{\"1140\":1}}],[\"里的classes\",{\"1\":{\"1100\":1}}],[\"里面要包含main方法\",{\"1\":{\"1080\":1}}],[\"里面只有一个方法\",{\"1\":{\"1036\":1}}],[\"里面只有一个run方法\",{\"1\":{\"936\":1}}],[\"里面存储了四个东西\",{\"1\":{\"1007\":1}}],[\"里面存放的全部是手机\",{\"1\":{\"263\":1}}],[\"里面\",{\"1\":{\"954\":1}}],[\"里面没有任何内容\",{\"1\":{\"696\":1}}],[\"里面的元素是\",{\"1\":{\"953\":1}}],[\"里面的元素都具有默认值\",{\"1\":{\"434\":1}}],[\"里面的每个一维数组的长度都相同\",{\"1\":{\"434\":1}}],[\"里面的connection不会自动提交\",{\"1\":{\"244\":1}}],[\"里面有哪些字段\",{\"1\":{\"263\":1}}],[\"里面有\",{\"1\":{\"253\":2}}],[\"里面有一个execute\",{\"1\":{\"201\":1}}],[\"里面有一个bin目录\",{\"1\":{\"144\":1}}],[\"里面就是写得绝对路径\",{\"1\":{\"249\":1}}],[\"里面封装了\",{\"1\":{\"234\":1}}],[\"里面包含多条数据\",{\"1\":{\"146\":1}}],[\"里面配置context节点信息\",{\"1\":{\"136\":1}}],[\"里面制定了非常详细的方法\",{\"1\":{\"128\":1}}],[\"贯穿整个阶段\",{\"1\":{\"1100\":1}}],[\"伴随应用程序启动创建的一个全局共享的对象\",{\"1\":{\"1097\":1}}],[\"话题都会是这个方法在什么时候执行\",{\"1\":{\"1093\":1}}],[\"务必要记住value属性即可\",{\"1\":{\"1086\":1}}],[\"★请求参数\",{\"0\":{\"1116\":1}}],[\"★★★url\",{\"0\":{\"1089\":1}}],[\"★\",{\"0\":{\"1084\":1}}],[\"缩写组成的\",{\"1\":{\"1078\":1}}],[\"缩放\",{\"0\":{\"40\":1}}],[\"苹果\",{\"0\":{\"1054\":1,\"1059\":1,\"1064\":1,\"1069\":1},\"2\":{\"1057\":1,\"1062\":1,\"1067\":1,\"1072\":1}}],[\"苹果支付\",{\"1\":{\"720\":1}}],[\"获得session可以使用request提供的getsession方法\",{\"1\":{\"1151\":1}}],[\"获得上传的原始文件名\",{\"1\":{\"1120\":1}}],[\"获得上下文\",{\"1\":{\"1111\":1}}],[\"获得文件字节大小\",{\"1\":{\"1120\":1}}],[\"获得正文类型\",{\"1\":{\"1120\":1}}],[\"获得part对象\",{\"1\":{\"1120\":1,\"1132\":1}}],[\"获得形参的类型\",{\"1\":{\"1118\":1}}],[\"获得所有值\",{\"1\":{\"1117\":1}}],[\"获得所有的请求参数\",{\"1\":{\"1117\":1}}],[\"获得所有的请求头\",{\"1\":{\"1112\":2}}],[\"获得所有的key\",{\"1\":{\"1117\":1}}],[\"获得第一个值\",{\"1\":{\"1117\":1}}],[\"获得客户机端的信息\",{\"1\":{\"1115\":1}}],[\"获得服务器端的信息\",{\"1\":{\"1115\":1}}],[\"获得字节输入流\",{\"1\":{\"1120\":1}}],[\"获得字节流\",{\"1\":{\"1113\":1}}],[\"获得字符流\",{\"1\":{\"1113\":1}}],[\"获得特定key对应的value\",{\"1\":{\"1112\":1}}],[\"获得通讯协议\",{\"1\":{\"1111\":1}}],[\"获得get请求的查询字符串\",{\"1\":{\"1111\":1}}],[\"获得端口号\",{\"1\":{\"1111\":1}}],[\"获得ip\",{\"1\":{\"1111\":1}}],[\"获得请求的uri\",{\"1\":{\"1130\":1}}],[\"获得请求参数名\",{\"1\":{\"1120\":1}}],[\"获得请求uri\",{\"1\":{\"1111\":1}}],[\"获得请求url\",{\"1\":{\"1111\":1}}],[\"获得请求方法\",{\"1\":{\"1111\":1}}],[\"获得http请求报文中携带的信息\",{\"1\":{\"1110\":1}}],[\"获得提供的信息\",{\"1\":{\"1110\":1}}],[\"获得方法并且能够调用方法\",{\"0\":{\"1109\":1}}],[\"获得方法并且能够调用指定方法\",{\"1\":{\"1103\":1}}],[\"获得方式\",{\"0\":{\"1096\":1}}],[\"获得成员变量并给成员变量赋值\",{\"0\":{\"1108\":1},\"1\":{\"1103\":1}}],[\"获得class对象的方式\",{\"1\":{\"1107\":1}}],[\"获得class对象\",{\"0\":{\"1107\":1},\"1\":{\"1103\":1}}],[\"获得web资源的真实路径\",{\"1\":{\"1097\":1}}],[\"获得真实路径\",{\"0\":{\"1097\":1}}],[\"获得武汉同学集合\",{\"1\":{\"1052\":4}}],[\"获得年龄最小的同学\",{\"1\":{\"1047\":1}}],[\"获取自定义session的这个方法\",{\"1\":{\"1159\":1}}],[\"获取自动提交的sqlsession\",{\"1\":{\"244\":1}}],[\"获取cookie\",{\"0\":{\"1143\":1}}],[\"获取配置\",{\"1\":{\"1093\":1}}],[\"获取配置信息\",{\"1\":{\"918\":1}}],[\"获取武汉同学的集合\",{\"1\":{\"1052\":1}}],[\"获取非常高的学生\",{\"1\":{\"1040\":1}}],[\"获取高于160的\",{\"1\":{\"1038\":1}}],[\"获取身高高于180的\",{\"1\":{\"1038\":1}}],[\"获取身高高于210的\",{\"1\":{\"1038\":1}}],[\"获取出一个省份\",{\"1\":{\"997\":1}}],[\"获取出来的语句\",{\"1\":{\"155\":1}}],[\"获取value\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"获取但是不移除最后一个元素\",{\"1\":{\"975\":1}}],[\"获取但是不移除第一个元素\",{\"1\":{\"975\":1}}],[\"获取但不移除此队列的头\",{\"1\":{\"972\":1}}],[\"获取但不移除此列表的最后一个元素\",{\"1\":{\"968\":1}}],[\"获取但不移除此列表的第一个元素\",{\"1\":{\"968\":1}}],[\"获取但不移除此列表的头\",{\"1\":{\"968\":2}}],[\"获取队头元素\",{\"1\":{\"975\":1}}],[\"获取队列头部元素等\",{\"1\":{\"970\":1}}],[\"获取并移除此队列的头\",{\"1\":{\"972\":2}}],[\"获取并移除此列表的最后一个元素\",{\"1\":{\"968\":1}}],[\"获取并移除此列表的第一个元素\",{\"1\":{\"968\":1}}],[\"获取并移除此列表的头\",{\"1\":{\"968\":1,\"975\":1}}],[\"获取元素\",{\"1\":{\"975\":1}}],[\"获取元素最后一次出现的下标\",{\"1\":{\"958\":1}}],[\"获取元素首次出现的下标\",{\"1\":{\"958\":1}}],[\"获取下一个元素\",{\"1\":{\"955\":2}}],[\"获取等操作是否合法\",{\"1\":{\"938\":1}}],[\"获取name成员变量\",{\"1\":{\"924\":1}}],[\"获取name这个成员变量对象\",{\"1\":{\"922\":1}}],[\"获取age成员变量\",{\"1\":{\"924\":1}}],[\"获取构造方法对象\",{\"1\":{\"924\":1}}],[\"获取注解实例\",{\"1\":{\"924\":3}}],[\"获取注解信息\",{\"1\":{\"924\":1}}],[\"获取eat\",{\"1\":{\"922\":1}}],[\"获取权限修饰符\",{\"1\":{\"922\":1}}],[\"获取类加载器\",{\"1\":{\"922\":1}}],[\"获取实现的接口\",{\"1\":{\"922\":1}}],[\"获取父类\",{\"1\":{\"922\":1}}],[\"获取简单名称\",{\"1\":{\"922\":1}}],[\"获取全限定类名\",{\"1\":{\"922\":1}}],[\"获取所有学生姓名的首字母\",{\"1\":{\"1040\":1}}],[\"获取所有学生姓名\",{\"1\":{\"1040\":1}}],[\"获取所有北京地区的同学\",{\"1\":{\"1036\":1}}],[\"获取所有成员方法\",{\"1\":{\"921\":1}}],[\"获取所有的方法\",{\"1\":{\"921\":1}}],[\"获取所有的成员变量\",{\"1\":{\"920\":1}}],[\"获取所有的public的方法\",{\"1\":{\"921\":1}}],[\"获取所有的public的成员变量\",{\"1\":{\"920\":1}}],[\"获取所有的public的构造方法\",{\"1\":{\"919\":1}}],[\"获取所有的构造方法\",{\"1\":{\"919\":1}}],[\"获取成员变量的值\",{\"1\":{\"920\":1}}],[\"获取值\",{\"1\":{\"920\":2}}],[\"获取值的方法\",{\"1\":{\"202\":1}}],[\"获取指定下标元素\",{\"1\":{\"958\":1}}],[\"获取指定成员变量\",{\"1\":{\"920\":1}}],[\"获取指定的方法\",{\"1\":{\"921\":1}}],[\"获取指定的成员方法\",{\"1\":{\"921\":1}}],[\"获取指定的成员变量\",{\"1\":{\"920\":1}}],[\"获取指定的public的方法\",{\"1\":{\"921\":1}}],[\"获取指定的public的成员变量\",{\"1\":{\"920\":1}}],[\"获取指定的public的构造方法\",{\"1\":{\"919\":1}}],[\"获取指定的构造方法\",{\"1\":{\"919\":1}}],[\"获取指定构造方法\",{\"1\":{\"919\":1}}],[\"获取属性\",{\"1\":{\"918\":1}}],[\"获取属性值\",{\"1\":{\"918\":2,\"924\":3}}],[\"获取属性值和修改属性值\",{\"1\":{\"453\":1}}],[\"获取字节码文件对象\",{\"1\":{\"919\":1,\"920\":1,\"921\":1,\"922\":1,\"924\":1}}],[\"获取字节码文件对象的几种方式\",{\"0\":{\"916\":1},\"1\":{\"916\":1}}],[\"获取字符串对象代表字符序列中\",{\"1\":{\"737\":2}}],[\"获取运行时类信息的一种手段\",{\"1\":{\"915\":1}}],[\"获取运行时类对象后\",{\"1\":{\"667\":1}}],[\"获取输出流\",{\"1\":{\"904\":1}}],[\"获取结果\",{\"1\":{\"881\":1}}],[\"获取了b锁\",{\"1\":{\"866\":1,\"867\":2}}],[\"获取锁\",{\"1\":{\"863\":1,\"864\":1}}],[\"获取设置线程优先级\",{\"1\":{\"838\":1}}],[\"获取主线程的名称\",{\"1\":{\"833\":1}}],[\"获取名字\",{\"1\":{\"833\":1}}],[\"获取线程名称\",{\"1\":{\"833\":1}}],[\"获取文件或者目录的名字\",{\"1\":{\"775\":1}}],[\"获取file对象表示的抽象文件\",{\"1\":{\"775\":1}}],[\"获取file对象表示的抽象文件的绝对路径\",{\"1\":{\"775\":1}}],[\"获取异常类名和异常信息\",{\"1\":{\"753\":2}}],[\"获取异常信息\",{\"1\":{\"753\":1}}],[\"获取的file数组中file对象遍历一遍\",{\"1\":{\"777\":1}}],[\"获取的是用来表示字符串对象字符序列的\",{\"1\":{\"738\":2}}],[\"获取的同一个mapper\",{\"1\":{\"285\":1}}],[\"获取功能\",{\"0\":{\"737\":1},\"1\":{\"737\":1,\"743\":2}}],[\"获取当前时间戳\",{\"1\":{\"741\":1}}],[\"获取当前字符串对象中\",{\"1\":{\"737\":2}}],[\"获取当前date对象的时间戳的毫秒值\",{\"1\":{\"724\":1}}],[\"获取当前数据库的隔离级别\",{\"1\":{\"212\":1}}],[\"获取一个倒序的迭代器\",{\"1\":{\"975\":1}}],[\"获取一个用来表示字符串对象字符序列的\",{\"1\":{\"738\":2}}],[\"获取一些最值之类的常量\",{\"1\":{\"712\":1}}],[\"获取一维数组后\",{\"1\":{\"437\":1}}],[\"获取该类型的全限定类名\",{\"1\":{\"667\":1}}],[\"获取二维数组中一维数组的长度\",{\"1\":{\"436\":1}}],[\"获取二维数组的长度\",{\"1\":{\"436\":1}}],[\"获取\",{\"1\":{\"402\":1,\"972\":1,\"975\":1}}],[\"获取数组中的最值\",{\"0\":{\"418\":1},\"1\":{\"418\":1}}],[\"获取数组长度\",{\"0\":{\"402\":1}}],[\"获取数据有误\",{\"1\":{\"1159\":1}}],[\"获取数据\",{\"1\":{\"115\":1,\"923\":1}}],[\"获取长度等等\",{\"1\":{\"399\":1}}],[\"获取用math\",{\"1\":{\"386\":1}}],[\"获取扫描到的内容\",{\"1\":{\"353\":1}}],[\"获取insert\",{\"1\":{\"274\":1}}],[\"获取接口的代理对象\",{\"1\":{\"244\":1}}],[\"获取代理对象\",{\"1\":{\"235\":1,\"240\":1}}],[\"获取session\",{\"0\":{\"1151\":1}}],[\"获取sqlsessionfactory\",{\"1\":{\"244\":1}}],[\"获取sqlsession\",{\"1\":{\"235\":1,\"240\":1,\"244\":2}}],[\"获取statement\",{\"1\":{\"200\":1}}],[\"获取statement对象\",{\"1\":{\"192\":1}}],[\"获取preparedstatement\",{\"1\":{\"204\":1,\"207\":1}}],[\"获取返回的结果集\",{\"1\":{\"201\":1}}],[\"获取影响的行数\",{\"1\":{\"201\":1}}],[\"获取到一段描述后\",{\"1\":{\"956\":1}}],[\"获取到的sqlsession\",{\"1\":{\"237\":1,\"244\":1}}],[\"获取到的连接对象实际上是\",{\"1\":{\"199\":1}}],[\"获取到referer请求头的值\",{\"1\":{\"128\":1}}],[\"获取连接的方法\",{\"1\":{\"213\":1}}],[\"获取连接\",{\"1\":{\"199\":2,\"203\":1,\"204\":1,\"209\":1}}],[\"获取java的id\",{\"1\":{\"184\":1}}],[\"获取班级平均语文成绩大于60分的\",{\"1\":{\"167\":1,\"168\":1}}],[\"获取班级人数大于三个人的班级\",{\"1\":{\"167\":1,\"168\":1}}],[\"获取班级的平均分\",{\"1\":{\"167\":1,\"168\":1}}],[\"获取语文成绩大于90分的\",{\"1\":{\"167\":1,\"168\":1}}],[\"获取某个列的不重复值\",{\"1\":{\"163\":1}}],[\"获取请求方法\",{\"1\":{\"128\":1}}],[\"获取请求方法名称\",{\"1\":{\"128\":1}}],[\"获取请求头\",{\"1\":{\"128\":2}}],[\"获取版本协议\",{\"1\":{\"128\":2}}],[\"获取客户端提交过来的信息\",{\"1\":{\"127\":1}}],[\"满足false\",{\"1\":{\"1045\":1}}],[\"满足true\",{\"1\":{\"1043\":1,\"1044\":1}}],[\"北京同学的数量\",{\"1\":{\"1049\":1}}],[\"北京的人\",{\"1\":{\"1037\":1}}],[\"北京时间是1970年01月01日08时00分00秒\",{\"1\":{\"722\":1}}],[\"终端操作\",{\"1\":{\"1033\":1}}],[\"终止操作\",{\"0\":{\"1042\":1}}],[\"终止连接\",{\"1\":{\"908\":1}}],[\"终止此计时器\",{\"1\":{\"883\":1}}],[\"聚合等\",{\"1\":{\"1031\":1}}],[\"聚合函数一般用来计算列相关的指定值\",{\"1\":{\"168\":1}}],[\"聚合函数\",{\"0\":{\"168\":1},\"1\":{\"168\":2}}],[\"流里面最终有10个元素\",{\"1\":{\"1043\":1}}],[\"流里面有多少元素\",{\"1\":{\"1035\":1}}],[\"流用来解决什么问题\",{\"0\":{\"1032\":1}}],[\"流\",{\"1\":{\"1031\":1,\"1053\":1}}],[\"流在管道中传输\",{\"1\":{\"1031\":1}}],[\"流的概述\",{\"0\":{\"1030\":1}}],[\"流程\",{\"1\":{\"541\":1,\"1016\":1}}],[\"流程图\",{\"0\":{\"73\":1}}],[\"气压\",{\"1\":{\"1026\":1}}],[\"湿度\",{\"1\":{\"1026\":1}}],[\"额外的维护了一个双向链表\",{\"1\":{\"1021\":1}}],[\"旧位置+旧数组长度\",{\"1\":{\"1014\":1}}],[\"旧位置\",{\"1\":{\"1014\":1}}],[\"旧数组长度+x的位置\",{\"1\":{\"1013\":1}}],[\"旧数组的容量\",{\"1\":{\"1013\":1}}],[\"拆成两部分\",{\"1\":{\"1012\":1}}],[\"拆箱与自动装箱\",{\"1\":{\"703\":1}}],[\"拆箱\",{\"1\":{\"703\":2}}],[\"拆箱和装箱的概念\",{\"1\":{\"703\":1}}],[\"达到9了\",{\"1\":{\"1012\":1}}],[\"达成上述两个条件\",{\"1\":{\"542\":1}}],[\"低位和高位\",{\"1\":{\"1016\":1}}],[\"低位生效\",{\"1\":{\"1008\":1}}],[\"低优先级线程\",{\"1\":{\"838\":1}}],[\"阈值是32\",{\"1\":{\"1012\":1}}],[\"阈值\",{\"1\":{\"1006\":2}}],[\"听懂面试官的问题\",{\"1\":{\"1002\":1}}],[\"听不懂面试官的问题\",{\"1\":{\"213\":1}}],[\"挨个进行比较\",{\"1\":{\"1016\":1}}],[\"挨个比较\",{\"1\":{\"1002\":1}}],[\"挨个访问\",{\"1\":{\"953\":1}}],[\"良\",{\"1\":{\"997\":1}}],[\"差\",{\"1\":{\"997\":1}}],[\"辅助接口\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"搜一下\",{\"1\":{\"993\":1}}],[\"搜索所走的路径称为引用链\",{\"1\":{\"928\":1}}],[\"搜索树\",{\"1\":{\"220\":1}}],[\"搜索搜索\",{\"1\":{\"147\":1}}],[\"尾部\",{\"1\":{\"975\":2}}],[\"八股文\",{\"1\":{\"969\":1}}],[\"八种基本数据类型中\",{\"1\":{\"341\":1}}],[\"队头和队尾都可以进出\",{\"1\":{\"968\":1}}],[\"队头出\",{\"1\":{\"968\":1}}],[\"队列空了\",{\"1\":{\"972\":1}}],[\"队列满了\",{\"1\":{\"972\":1}}],[\"队列的工作方式类似于排队等待服务的过程\",{\"1\":{\"970\":1}}],[\"队列\",{\"1\":{\"965\":1,\"968\":1,\"970\":1,\"971\":1,\"974\":1,\"977\":1}}],[\"队伍分数+3\",{\"1\":{\"472\":2}}],[\"视图方法\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"视图\",{\"1\":{\"960\":1,\"997\":3,\"1018\":3,\"1023\":3,\"1026\":5}}],[\"视频文件\",{\"1\":{\"796\":2}}],[\"画图\",{\"1\":{\"958\":1}}],[\"画出这个过程的内存图\",{\"1\":{\"540\":1}}],[\"及其使用场景\",{\"1\":{\"956\":1}}],[\"及number的子类\",{\"1\":{\"944\":1}}],[\"怎样去遍历collection接口\",{\"1\":{\"956\":1}}],[\"怎么保存呢\",{\"1\":{\"1201\":1}}],[\"怎么保证这种关系\",{\"1\":{\"171\":1}}],[\"怎么使用流\",{\"0\":{\"1033\":1}}],[\"怎么使用可变参数\",{\"1\":{\"422\":1}}],[\"怎么定义重复\",{\"1\":{\"1021\":1}}],[\"怎么判断相等\",{\"1\":{\"1016\":1}}],[\"怎么判断相等的\",{\"1\":{\"1009\":1}}],[\"怎么统计每个层级的人数\",{\"1\":{\"997\":1}}],[\"怎么存\",{\"1\":{\"997\":1}}],[\"怎么存呢\",{\"1\":{\"995\":1}}],[\"怎么创建这个类的\",{\"1\":{\"963\":1}}],[\"怎么实现的添加\",{\"1\":{\"961\":1}}],[\"怎么出现oom\",{\"1\":{\"960\":1}}],[\"怎么表示\",{\"1\":{\"950\":2}}],[\"怎么把数据装到byte\",{\"1\":{\"923\":1}}],[\"怎么推断呢\",{\"1\":{\"653\":1}}],[\"怎么进行\",{\"1\":{\"619\":1,\"632\":1}}],[\"怎么描述它们呢\",{\"1\":{\"595\":1}}],[\"怎么查看protected成员的访问权限呢\",{\"1\":{\"536\":1}}],[\"怎么理解不同包子类能够访问\",{\"0\":{\"535\":1}}],[\"怎么改呢\",{\"1\":{\"530\":1}}],[\"怎么做呢\",{\"1\":{\"519\":1,\"1203\":1}}],[\"怎么得到一个对象呢\",{\"1\":{\"446\":1}}],[\"怎么选择if和switch\",{\"0\":{\"360\":1}}],[\"怎么算\",{\"1\":{\"348\":1}}],[\"怎么唯一表示sql语句\",{\"1\":{\"234\":1}}],[\"怎么解决死锁\",{\"0\":{\"867\":1}}],[\"怎么解决\",{\"1\":{\"214\":1,\"867\":1}}],[\"怎么办呢\",{\"1\":{\"459\":1}}],[\"怎么办\",{\"1\":{\"214\":1,\"232\":1,\"429\":1,\"1002\":1,\"1203\":1}}],[\"怎么从里面获取数据\",{\"1\":{\"201\":1}}],[\"怎么确认安装完成了\",{\"1\":{\"144\":1}}],[\"订单更新时间\",{\"1\":{\"956\":1}}],[\"订单状态\",{\"1\":{\"956\":1}}],[\"订单时间\",{\"1\":{\"956\":1}}],[\"订单金额\",{\"1\":{\"956\":1}}],[\"订单号\",{\"1\":{\"956\":1}}],[\"订单的信息包括\",{\"1\":{\"956\":1}}],[\"订单和商品\",{\"1\":{\"174\":1}}],[\"入学日期\",{\"1\":{\"956\":1}}],[\"边修改原有集合\",{\"1\":{\"955\":1}}],[\"边读边写\",{\"1\":{\"905\":2,\"923\":1}}],[\"耗费空间\",{\"1\":{\"954\":1}}],[\"耗费时间\",{\"1\":{\"954\":1}}],[\"耗费系统性能\",{\"1\":{\"925\":1}}],[\"粘贴到的下标位置\",{\"1\":{\"954\":1}}],[\"拷贝size长度\",{\"1\":{\"954\":1}}],[\"拷贝到\",{\"1\":{\"954\":1}}],[\"拷贝的是引用\",{\"1\":{\"699\":1}}],[\"清空map\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"清空collection\",{\"1\":{\"953\":1,\"981\":1}}],[\"清空集合等方法\",{\"1\":{\"950\":1}}],[\"清楚特点\",{\"1\":{\"953\":1}}],[\"均称为有序\",{\"1\":{\"952\":1}}],[\"迭代器后是否有元素\",{\"1\":{\"955\":1}}],[\"迭代器位置\",{\"1\":{\"955\":2}}],[\"迭代器本身不存储数据\",{\"1\":{\"955\":1}}],[\"迭代器怎样使用\",{\"1\":{\"955\":1}}],[\"迭代器是个游标\",{\"1\":{\"955\":1}}],[\"迭代器相当于只保留了一个标识\",{\"1\":{\"955\":1}}],[\"迭代器\",{\"1\":{\"955\":1,\"956\":2}}],[\"迭代器可以逐个访问集合中的元素\",{\"1\":{\"954\":1}}],[\"迭代器的并发修改异常问题\",{\"1\":{\"951\":1}}],[\"迭代方法\",{\"1\":{\"951\":1}}],[\"物品\",{\"1\":{\"950\":1}}],[\"物归原主\",{\"1\":{\"585\":1}}],[\"事物\",{\"1\":{\"950\":1}}],[\"事务处理等方面\",{\"1\":{\"1077\":1}}],[\"事务处理\",{\"1\":{\"1077\":1}}],[\"事务管理器\",{\"1\":{\"248\":1}}],[\"事务\",{\"0\":{\"241\":1}}],[\"事务2修改的过程中\",{\"1\":{\"212\":1}}],[\"事务与事务之间是互相隔离的\",{\"1\":{\"210\":1}}],[\"事务必须使数据库从一个一致性状态到另外一个一致性状态\",{\"1\":{\"210\":1}}],[\"事务中的操作要么就都成功\",{\"1\":{\"210\":1}}],[\"事务是一个不可分割的操作单元\",{\"1\":{\"210\":1}}],[\"事务通常具有四个标准特性\",{\"1\":{\"210\":1}}],[\"事务就是要保证一组数据库操作\",{\"1\":{\"208\":1}}],[\"事务由事务开始与事务结束之间执行的全部数据库操作组成\",{\"1\":{\"208\":1}}],[\"事务相关的api\",{\"1\":{\"200\":1}}],[\"事务的隔离级别\",{\"1\":{\"189\":1,\"211\":1}}],[\"③\",{\"1\":{\"944\":1}}],[\"②\",{\"1\":{\"944\":1}}],[\"①\",{\"1\":{\"944\":1}}],[\"弄出来了几个通配\",{\"1\":{\"944\":1}}],[\"逆变就是\",{\"1\":{\"944\":1}}],[\"省去了类型强转的麻烦\",{\"1\":{\"938\":1}}],[\"省份和城市\",{\"1\":{\"173\":1}}],[\"省份表\",{\"1\":{\"171\":2}}],[\"尖括号的指定的类型\",{\"1\":{\"936\":1}}],[\"坏处\",{\"1\":{\"936\":1}}],[\"摩托车类\",{\"1\":{\"936\":1}}],[\"摩托罗拉流行的年代\",{\"1\":{\"303\":1}}],[\"车库类\",{\"1\":{\"936\":1}}],[\"汽车的车库\",{\"1\":{\"936\":1}}],[\"汽车类\",{\"1\":{\"936\":1}}],[\"汽车有很多类型\",{\"1\":{\"513\":1}}],[\"泛型中\",{\"1\":{\"944\":1}}],[\"泛型不允许协变\",{\"1\":{\"944\":2}}],[\"泛型参数t可以用于add方法的参数类型和get方法的返回类型\",{\"1\":{\"941\":1}}],[\"泛型参数可以用在接口中的方法\",{\"1\":{\"941\":1}}],[\"泛型在父子继承关系上的表现\",{\"0\":{\"940\":1}}],[\"泛型必须使用引用类型\",{\"1\":{\"939\":2}}],[\"泛型标识符\",{\"1\":{\"939\":1,\"941\":1}}],[\"泛型刚刚出来时候的写法\",{\"1\":{\"939\":1}}],[\"泛型的主要目的\",{\"1\":{\"949\":1}}],[\"泛型的擦除\",{\"0\":{\"945\":1}}],[\"泛型的通配\",{\"0\":{\"944\":1},\"1\":{\"944\":1}}],[\"泛型的作用域\",{\"1\":{\"939\":1}}],[\"泛型的写法2\",{\"1\":{\"939\":1}}],[\"泛型的写法1\",{\"1\":{\"939\":1}}],[\"泛型的使用时候写法\",{\"1\":{\"939\":1}}],[\"泛型是在java\",{\"1\":{\"938\":1}}],[\"泛型擦除\",{\"1\":{\"938\":1}}],[\"泛型通配符<\",{\"1\":{\"944\":1}}],[\"泛型通配\",{\"1\":{\"938\":1}}],[\"泛型方法\",{\"0\":{\"943\":1},\"1\":{\"938\":1}}],[\"泛型定义在方法上\",{\"1\":{\"938\":1}}],[\"泛型定义在接口上\",{\"1\":{\"938\":1}}],[\"泛型定义在类上\",{\"1\":{\"938\":1}}],[\"泛型接口类型在什么时候确定\",{\"1\":{\"941\":1}}],[\"泛型接口使得java中的容器类更加通用和灵活\",{\"1\":{\"941\":1}}],[\"泛型接口是指在声明接口的时候使用泛型参数\",{\"1\":{\"941\":1}}],[\"泛型接口\",{\"0\":{\"941\":1},\"1\":{\"938\":1}}],[\"泛型接口的定义\",{\"1\":{\"935\":1}}],[\"泛型好处\",{\"0\":{\"938\":1}}],[\"泛型概念\",{\"0\":{\"937\":1}}],[\"泛型类型\",{\"1\":{\"943\":2}}],[\"泛型类型2\",{\"1\":{\"939\":1}}],[\"泛型类定义泛型的作用域\",{\"1\":{\"939\":1}}],[\"泛型类可以定义多个泛型\",{\"1\":{\"939\":1}}],[\"泛型类可以用于定义一些通用的数据结构或算法\",{\"1\":{\"939\":1}}],[\"泛型类是一种可以在定义类时使用类型参数来表示类中使用的类型的类\",{\"1\":{\"939\":1}}],[\"泛型类\",{\"0\":{\"939\":1},\"1\":{\"935\":1,\"938\":1,\"939\":2}}],[\"泛型\",{\"0\":{\"935\":1},\"1\":{\"949\":1}}],[\"申请heap\",{\"1\":{\"934\":1}}],[\"弱分代假说\",{\"1\":{\"933\":2}}],[\"弱化了类型的约束力\",{\"1\":{\"530\":1}}],[\"熬过越多次垃圾收集过程的对象就越难以消亡\",{\"1\":{\"933\":1}}],[\"野指针\",{\"1\":{\"925\":1}}],[\"永久代\",{\"1\":{\"925\":1}}],[\"永远先执行父类的构造方法\",{\"1\":{\"542\":1}}],[\"永远最先进行\",{\"1\":{\"497\":1}}],[\"永远使用nextline方法\",{\"1\":{\"352\":1}}],[\"永远只会插入到索引树的右侧\",{\"1\":{\"233\":1}}],[\"管理方便\",{\"1\":{\"924\":1}}],[\"管理多个数据库\",{\"1\":{\"152\":1}}],[\"符号进行实例化\",{\"1\":{\"924\":1}}],[\"符合条件的留下\",{\"1\":{\"777\":1}}],[\"符合javadoc规范的文档注释可以使用javadoc指令\",{\"1\":{\"318\":1}}],[\"元空间\",{\"1\":{\"925\":1}}],[\"元注解\",{\"1\":{\"924\":1}}],[\"元注解的概念来源于元数据\",{\"1\":{\"924\":1}}],[\"元素个数\",{\"1\":{\"954\":2}}],[\"元素值\",{\"1\":{\"441\":1}}],[\"元素\",{\"1\":{\"434\":3}}],[\"元素取值\",{\"1\":{\"409\":2}}],[\"元素的新\",{\"1\":{\"992\":1}}],[\"元素的访问\",{\"0\":{\"438\":1}}],[\"元素的赋值\",{\"0\":{\"401\":1}}],[\"元素的下标\",{\"1\":{\"271\":1}}],[\"元素3\",{\"1\":{\"397\":3,\"398\":1}}],[\"元素2\",{\"1\":{\"397\":3,\"398\":1,\"434\":3}}],[\"元素1\",{\"1\":{\"397\":3,\"398\":1,\"434\":6}}],[\"元素产生过渡动画效果\",{\"1\":{\"31\":1}}],[\"元素使其拥有多个动画片段\",{\"1\":{\"25\":1}}],[\"元素上添加属性\",{\"1\":{\"5\":1}}],[\"框架\",{\"1\":{\"923\":1,\"924\":1}}],[\"忽略文件最好是在创建这个远程仓库的时候\",{\"1\":{\"1203\":1}}],[\"忽略文件\",{\"0\":{\"1203\":1}}],[\"忽略java语法检查\",{\"1\":{\"919\":1}}],[\"忽略字符串大小写比较字符串内容\",{\"1\":{\"736\":1}}],[\"暴力破解\",{\"1\":{\"919\":1}}],[\"暴露给外部访问的一个入口\",{\"1\":{\"715\":1}}],[\"键\",{\"1\":{\"950\":1,\"1143\":1}}],[\"键和元素对\",{\"1\":{\"918\":2}}],[\"键值对配置\",{\"1\":{\"1093\":1}}],[\"键值对\",{\"1\":{\"918\":1}}],[\"键盘输入abc\",{\"1\":{\"738\":2}}],[\"键盘接收数据\",{\"1\":{\"895\":1,\"903\":1}}],[\"键盘接收数据abc\",{\"1\":{\"738\":1}}],[\"键盘接收分数\",{\"1\":{\"764\":1}}],[\"键盘接收nextline\",{\"1\":{\"730\":1}}],[\"键盘接收int数据\",{\"1\":{\"352\":1}}],[\"键盘录入两个值\",{\"1\":{\"386\":1}}],[\"键盘录入月份的值\",{\"1\":{\"358\":1}}],[\"键盘录入x的值\",{\"1\":{\"358\":1}}],[\"键盘录入double数值\",{\"1\":{\"352\":1}}],[\"键盘录入int数值\",{\"1\":{\"352\":1}}],[\"键盘录入int数据\",{\"1\":{\"352\":1}}],[\"键盘录入string字符串\",{\"1\":{\"352\":1}}],[\"魔法数字\",{\"1\":{\"910\":1}}],[\"咖啡宝贝\",{\"1\":{\"910\":1}}],[\"谢谢\",{\"1\":{\"908\":2}}],[\"侦听并接受到此套接字的连接\",{\"1\":{\"900\":1}}],[\"稳定可靠的\",{\"1\":{\"885\":1}}],[\"耳朵\",{\"1\":{\"885\":1}}],[\"光有ip地址确定主机还不够\",{\"1\":{\"885\":1}}],[\"光走age不行\",{\"1\":{\"233\":1}}],[\"炸弹爆炸了boom\",{\"1\":{\"884\":1}}],[\"试图停止所有正在执行的活动任务\",{\"1\":{\"880\":1}}],[\"试着说一说下述访问\",{\"1\":{\"619\":1,\"632\":1}}],[\"试着分析\",{\"1\":{\"378\":1}}],[\"立马执行提交的异步任务\",{\"1\":{\"880\":1}}],[\"立刻执行yield方法\",{\"1\":{\"841\":1}}],[\"监视器\",{\"1\":{\"869\":1}}],[\"象锁\",{\"1\":{\"868\":1}}],[\"态的线程才可以获取该对象锁\",{\"1\":{\"868\":1}}],[\"法的线程将程序执行完\",{\"1\":{\"868\":1}}],[\"法国数学家布莱士\",{\"1\":{\"441\":1}}],[\"些可能等待该锁对象的其他线程\",{\"1\":{\"868\":1}}],[\"制\",{\"1\":{\"868\":1}}],[\"制定了一系列的接口\",{\"1\":{\"128\":1}}],[\"拥有相同锁的线程才可以实现wait\",{\"1\":{\"868\":1}}],[\"拥有cpu的执行权\",{\"1\":{\"846\":1}}],[\"唤醒多个等待的线程\",{\"1\":{\"875\":1}}],[\"唤醒对象\",{\"1\":{\"872\":1}}],[\"唤醒另一个线程\",{\"1\":{\"872\":2}}],[\"唤醒条件不同\",{\"1\":{\"873\":1}}],[\"唤醒条件\",{\"1\":{\"869\":1}}],[\"唤醒c2\",{\"1\":{\"867\":1}}],[\"唤醒在此对象监视器上等待的所有线程\",{\"1\":{\"658\":1}}],[\"唤醒在此对象监视器上等待的单个线程\",{\"1\":{\"658\":1,\"874\":1}}],[\"卡顿\",{\"1\":{\"867\":1}}],[\"卡车跑跑跑\",{\"1\":{\"936\":1}}],[\"卡车类\",{\"1\":{\"936\":1}}],[\"卡车\",{\"1\":{\"513\":1}}],[\"豆沙包\",{\"1\":{\"867\":1}}],[\"豆豆\",{\"1\":{\"110\":1}}],[\"阻止自己打印\",{\"1\":{\"872\":2}}],[\"阻止自己生产\",{\"1\":{\"867\":2}}],[\"阻塞队列\",{\"1\":{\"979\":1}}],[\"阻塞功能\",{\"1\":{\"869\":1}}],[\"阻塞\",{\"1\":{\"846\":1,\"869\":1}}],[\"羊腰子包\",{\"1\":{\"867\":1}}],[\"韭菜鸡蛋\",{\"1\":{\"867\":1}}],[\"消息传递\",{\"1\":{\"1077\":1}}],[\"消息头和正文内容之间要用空行\",{\"1\":{\"114\":1,\"119\":1}}],[\"消费者执行\",{\"1\":{\"867\":1}}],[\"消费者\",{\"1\":{\"867\":2}}],[\"消费者任务\",{\"1\":{\"867\":1}}],[\"消费吃包子通知生产者再生产\",{\"1\":{\"867\":2}}],[\"锁\",{\"1\":{\"864\":1}}],[\"锁对象上调用wait\",{\"1\":{\"873\":1}}],[\"锁对象上调用wait方法\",{\"1\":{\"869\":1}}],[\"锁对象是谁\",{\"1\":{\"855\":1}}],[\"锁对象\",{\"1\":{\"855\":1}}],[\"休眠时\",{\"1\":{\"873\":1}}],[\"休眠时间到\",{\"1\":{\"873\":1}}],[\"休眠\",{\"1\":{\"859\":1}}],[\"休眠1秒\",{\"1\":{\"844\":4}}],[\"休眠1s\",{\"1\":{\"839\":1}}],[\"退出sync\",{\"1\":{\"867\":2}}],[\"退出sync代码块\",{\"1\":{\"859\":1}}],[\"退格\",{\"1\":{\"356\":1}}],[\"造成的问题也越难以解决\",{\"1\":{\"938\":1}}],[\"造成的现象\",{\"0\":{\"852\":1}}],[\"造成资源的浪费\",{\"1\":{\"689\":1}}],[\"票\",{\"1\":{\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"864\":1}}],[\"卖了第\",{\"1\":{\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"864\":1}}],[\"卖票\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"睡觉\",{\"1\":{\"851\":3}}],[\"死锁类\",{\"1\":{\"866\":1,\"867\":2}}],[\"死锁产生的场景\",{\"0\":{\"866\":1}}],[\"死亡\",{\"1\":{\"846\":1}}],[\"死循环\",{\"0\":{\"366\":1}}],[\"刚new出来的线程对象\",{\"1\":{\"846\":1}}],[\"守护线程\",{\"1\":{\"842\":2}}],[\"守护线程setdaemon\",{\"0\":{\"842\":1}}],[\"合法写法\",{\"0\":{\"1090\":1}}],[\"合法的递归\",{\"1\":{\"442\":1}}],[\"合并分支\",{\"1\":{\"1204\":1}}],[\"合并\",{\"1\":{\"840\":1}}],[\"暂存区\",{\"1\":{\"1182\":1}}],[\"暂存已提交的来不及执行的任务\",{\"1\":{\"880\":2}}],[\"暂停处理正在等待的任务\",{\"1\":{\"880\":1}}],[\"暂停当前正在执行的线程对象\",{\"1\":{\"841\":2}}],[\"暂停执行\",{\"1\":{\"839\":1}}],[\"暂时不建议使用\",{\"1\":{\"247\":1}}],[\"暂时没用\",{\"1\":{\"246\":1}}],[\"暂时可以不写\",{\"1\":{\"235\":1}}],[\"暂时可以任意取名\",{\"1\":{\"234\":1}}],[\"抢占式的线程调度方式\",{\"1\":{\"835\":1}}],[\"协作开发\",{\"0\":{\"1199\":1}}],[\"协变的问题\",{\"1\":{\"944\":1}}],[\"协变就是\",{\"1\":{\"944\":1}}],[\"协变和逆变\",{\"1\":{\"944\":1}}],[\"协同式线程调度\",{\"1\":{\"835\":1}}],[\"协议就不设置了\",{\"1\":{\"1122\":1}}],[\"协议版本\",{\"1\":{\"115\":1}}],[\"协议在各种情境下都是一种规范和约定\",{\"1\":{\"110\":1}}],[\"协议在不同场景中有不同的含义\",{\"1\":{\"106\":1}}],[\"协议\",{\"0\":{\"106\":1},\"1\":{\"111\":1,\"144\":2,\"192\":1,\"1105\":1,\"1111\":1}}],[\"调度\",{\"1\":{\"884\":1}}],[\"调度方法\",{\"1\":{\"883\":1}}],[\"调度方式的分类\",{\"0\":{\"835\":1}}],[\"调用distinct\",{\"1\":{\"1037\":1}}],[\"调用集合类的stream方法\",{\"1\":{\"1034\":1}}],[\"调用next返回的是指定下标的元素\",{\"1\":{\"959\":1}}],[\"调用notify\",{\"1\":{\"872\":1}}],[\"调用notify或notifyall方法\",{\"1\":{\"869\":1}}],[\"调用iterator\",{\"1\":{\"955\":1}}],[\"调用类的静态方法\",{\"1\":{\"914\":1}}],[\"调用了notify或notifyall方法\",{\"1\":{\"873\":1}}],[\"调用wait\",{\"1\":{\"872\":1}}],[\"调用join\",{\"1\":{\"840\":1}}],[\"调用removeall方法\",{\"1\":{\"956\":1}}],[\"调用readline方法\",{\"1\":{\"821\":1}}],[\"调用run\",{\"1\":{\"833\":1}}],[\"调用start\",{\"1\":{\"833\":1}}],[\"调用func\",{\"1\":{\"789\":1}}],[\"调用者\",{\"1\":{\"739\":2}}],[\"调用clone方法得到对象的过程\",{\"1\":{\"697\":1}}],[\"调用cat单参构造方法\",{\"1\":{\"471\":1}}],[\"调用tostring方法的对象\",{\"1\":{\"666\":1}}],[\"调用叫的方法即可\",{\"1\":{\"581\":1}}],[\"调用结果\",{\"1\":{\"580\":1}}],[\"调用同名成员方法\",{\"1\":{\"575\":1}}],[\"调用同名方法会体现出不同的行为\",{\"1\":{\"575\":1}}],[\"调用同名方法\",{\"1\":{\"555\":1}}],[\"调用其方法的时候\",{\"1\":{\"533\":1}}],[\"调用方式不同\",{\"1\":{\"477\":1}}],[\"调用方式\",{\"1\":{\"477\":1}}],[\"调用方法invoke\",{\"1\":{\"923\":1}}],[\"调用方法\",{\"1\":{\"460\":1,\"465\":1,\"662\":1}}],[\"调用方法是有代价的\",{\"1\":{\"442\":1}}],[\"调用方法时需要传入的是该接口的子类对象\",{\"1\":{\"603\":1}}],[\"调用方法时需要传入的是该抽象类的子类对象\",{\"1\":{\"603\":1}}],[\"调用方法时需要传入的是该类的对象或者该类的子类对象\",{\"1\":{\"603\":1}}],[\"调用方法时\",{\"1\":{\"423\":2,\"424\":1}}],[\"调用方法时传入的具体数据参数称之为实际参数\",{\"1\":{\"382\":1}}],[\"调用方法时用的\",{\"1\":{\"382\":1}}],[\"调用单参构造\",{\"1\":{\"471\":1}}],[\"调用2参构造\",{\"1\":{\"471\":1}}],[\"调用成员方法\",{\"1\":{\"459\":1}}],[\"调用该方法查看结果\",{\"1\":{\"459\":2}}],[\"调用行为\",{\"1\":{\"453\":1}}],[\"调用可变参数的方法时\",{\"1\":{\"422\":1}}],[\"调用一个有返回值的方法\",{\"1\":{\"383\":1}}],[\"调用对应的接口\",{\"1\":{\"235\":1,\"240\":1}}],[\"老而不死\",{\"1\":{\"933\":1}}],[\"老板说找一下\",{\"1\":{\"828\":2}}],[\"老师会详细讲解\",{\"1\":{\"680\":1}}],[\"串行\",{\"0\":{\"827\":1},\"1\":{\"827\":1}}],[\"串行化\",{\"1\":{\"211\":1,\"212\":2}}],[\"迅雷\",{\"1\":{\"826\":1}}],[\"独有的方法\",{\"1\":{\"808\":1}}],[\"独立于对象之外的\",{\"1\":{\"472\":1}}],[\"独立的个体就是\",{\"1\":{\"445\":1}}],[\"独立团团长\",{\"1\":{\"158\":1}}],[\"宝\",{\"1\":{\"806\":1,\"807\":1}}],[\"序列化的逆过程\",{\"1\":{\"822\":1}}],[\"序列化\",{\"0\":{\"904\":1},\"1\":{\"822\":1,\"904\":1}}],[\"序列化与反序列化流\",{\"0\":{\"822\":1}}],[\"序列\",{\"1\":{\"801\":2}}],[\"序号从\",{\"1\":{\"204\":1}}],[\"序号\",{\"1\":{\"153\":2}}],[\"融合了多种文字\",{\"1\":{\"799\":1}}],[\"融合了更多的中文文字符号\",{\"1\":{\"799\":1}}],[\"俗称\",{\"1\":{\"799\":1}}],[\"欧洲码表\",{\"1\":{\"799\":1}}],[\"美国标准信息交换码\",{\"1\":{\"799\":1}}],[\"美元符号\",{\"1\":{\"315\":2,\"316\":1}}],[\"东哥说了\",{\"1\":{\"796\":1}}],[\"东土大唐\",{\"1\":{\"180\":1,\"275\":1}}],[\"快捷键f12\",{\"1\":{\"1140\":1}}],[\"快捷方式\",{\"1\":{\"562\":1}}],[\"快速获取到人的信息\",{\"1\":{\"950\":1}}],[\"快速获取到姓名\",{\"1\":{\"950\":1}}],[\"快递装车里\",{\"1\":{\"796\":1}}],[\"快递小哥1次送一个\",{\"1\":{\"796\":1}}],[\"买了5个快递\",{\"1\":{\"796\":1}}],[\"买卖双方达成的书面协议\",{\"1\":{\"109\":1}}],[\"复杂的分布式系统\",{\"1\":{\"1077\":1}}],[\"复制一遍\",{\"1\":{\"955\":1}}],[\"复制的长度\",{\"1\":{\"954\":1}}],[\"复制底层存储的数据\",{\"1\":{\"954\":1}}],[\"复制出错\",{\"1\":{\"796\":2}}],[\"复用代码后\",{\"1\":{\"519\":1}}],[\"复用代码\",{\"1\":{\"519\":1}}],[\"复用类的成员\",{\"1\":{\"519\":1}}],[\"复用遍历代码\",{\"1\":{\"415\":1}}],[\"缓冲相关\",{\"1\":{\"824\":1}}],[\"缓冲区中的内容提交到本地仓库\",{\"1\":{\"1195\":1}}],[\"缓冲区中的变化\",{\"1\":{\"1193\":1}}],[\"缓冲区会随着数据的不断写入而自动增长\",{\"1\":{\"923\":1}}],[\"缓冲区大小size\",{\"1\":{\"808\":1}}],[\"缓冲区满了会自动刷新\",{\"1\":{\"790\":1}}],[\"缓冲各个字符\",{\"1\":{\"808\":1,\"814\":1}}],[\"缓存的内容存储在sqlsession中管理\",{\"1\":{\"284\":1}}],[\"缓存就是把数据存储在内存上\",{\"1\":{\"283\":1}}],[\"缓存\",{\"1\":{\"283\":1}}],[\"缓存是指在mybatis中\",{\"1\":{\"283\":1}}],[\"批量读取\",{\"1\":{\"812\":1}}],[\"批量的方式会减少跟操作系统的交互\",{\"1\":{\"796\":1}}],[\"批量\",{\"1\":{\"795\":1}}],[\"批量写\",{\"1\":{\"788\":1}}],[\"批量插入\",{\"0\":{\"271\":1}}],[\"刷新此输出流并强制写出所有缓冲的输出字节\",{\"1\":{\"786\":1}}],[\"刷新的网址是\",{\"1\":{\"121\":1}}],[\"纯文本文件用字符流\",{\"1\":{\"784\":1}}],[\"丢弃所有当前已安排的任务\",{\"1\":{\"883\":1}}],[\"丢弃\",{\"1\":{\"777\":1}}],[\"效果只是重命名\",{\"1\":{\"772\":1}}],[\"效率太差\",{\"1\":{\"1002\":1}}],[\"效率太低\",{\"1\":{\"1002\":1}}],[\"效率是大问题\",{\"1\":{\"970\":1}}],[\"效率没有区别\",{\"1\":{\"945\":1}}],[\"效率怎么样\",{\"1\":{\"741\":2}}],[\"效率低\",{\"1\":{\"442\":1,\"444\":1,\"969\":1}}],[\"效率都很高\",{\"1\":{\"394\":1}}],[\"效率比较高\",{\"1\":{\"262\":1}}],[\"效率就会越低\",{\"1\":{\"211\":1}}],[\"效率差\",{\"1\":{\"184\":1,\"1002\":1}}],[\"效率会很差\",{\"1\":{\"172\":1}}],[\"效率高一些\",{\"1\":{\"945\":1}}],[\"效率高\",{\"1\":{\"125\":1}}],[\"连同目标目录一起\",{\"1\":{\"771\":1}}],[\"连接多个节点\",{\"1\":{\"947\":1}}],[\"连接\",{\"1\":{\"497\":1}}],[\"连接值就可以了\",{\"1\":{\"334\":1}}],[\"连接一样操作\",{\"1\":{\"213\":1}}],[\"连接仍会有网络和\",{\"1\":{\"213\":1}}],[\"连接池c提供的获取连接的方法\",{\"1\":{\"213\":1}}],[\"连接池b提供的获取连接的方法\",{\"1\":{\"213\":1}}],[\"连接池a提供的获取连接的方法\",{\"1\":{\"213\":1}}],[\"连接池对象\",{\"1\":{\"213\":1}}],[\"连接池是创建和管理一个连接的缓冲池的技术\",{\"1\":{\"213\":1}}],[\"连接池\",{\"0\":{\"213\":1},\"1\":{\"213\":1}}],[\"连接配置放入到配置文件中\",{\"1\":{\"203\":1}}],[\"连接mysql服务器\",{\"1\":{\"187\":1}}],[\"连接查询最重要的\",{\"1\":{\"183\":1}}],[\"连接查询\",{\"0\":{\"180\":1,\"277\":1,\"280\":1,\"283\":1}}],[\"判读一下是否在区间内\",{\"1\":{\"764\":1}}],[\"判断用户名和密码是否符合要求\",{\"1\":{\"1131\":1}}],[\"判断field对应的成员变量的类型是否是数组\",{\"1\":{\"1118\":1}}],[\"判断file对象是否表示的是一个目录\",{\"1\":{\"774\":1}}],[\"判断file对象是否表示的是一个文件\",{\"1\":{\"774\":1}}],[\"判断高于200的是否都是上海的同学\",{\"1\":{\"1044\":1}}],[\"判断高于190的是否存在北京的同学\",{\"1\":{\"1043\":1}}],[\"判断该stream中的所有元素\",{\"1\":{\"1043\":1,\"1044\":1,\"1045\":1}}],[\"判断两个map是否相等\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"判断两个对象的类型是否一致\",{\"1\":{\"663\":1}}],[\"判断map中是否包含这个value\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"判断map中是否包含这个key\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"判断后面是否还有元素可以遍历\",{\"1\":{\"959\":1}}],[\"判断给定的collection中是否全部存在于目标collection\",{\"1\":{\"953\":2,\"981\":1}}],[\"判断集合是否为空\",{\"1\":{\"950\":1}}],[\"判断方法上是否使用了注解\",{\"1\":{\"924\":1}}],[\"判断蒸笼的状态\",{\"1\":{\"867\":2}}],[\"判断蒸笼状态\",{\"1\":{\"867\":2}}],[\"判断蒸笼状态的方法\",{\"1\":{\"867\":1}}],[\"判断一下\",{\"1\":{\"851\":1}}],[\"判断一个字符串\",{\"1\":{\"736\":1}}],[\"判断是否不存在深圳的同学\",{\"1\":{\"1045\":1}}],[\"判断是否都是北京的同学\",{\"1\":{\"1044\":1}}],[\"判断是否存在北京的同学\",{\"1\":{\"1043\":1}}],[\"判断是否存在指定元素\",{\"1\":{\"953\":2,\"981\":1}}],[\"判断是否相等\",{\"1\":{\"953\":1,\"981\":1}}],[\"判断是否满足要求\",{\"1\":{\"924\":2}}],[\"判断是否用了注解\",{\"1\":{\"924\":2}}],[\"判断是否发生了中断\",{\"1\":{\"844\":1}}],[\"判断是不是文件\",{\"1\":{\"776\":1}}],[\"判断如果是文件\",{\"1\":{\"776\":1}}],[\"判断某个目录\",{\"1\":{\"776\":2}}],[\"判断\",{\"1\":{\"769\":1,\"771\":1,\"774\":1,\"953\":3,\"956\":2}}],[\"判断当前字符串\",{\"1\":{\"736\":1}}],[\"判断当前字符串对象\",{\"1\":{\"736\":1}}],[\"判断当前字符串对象是否包含\",{\"1\":{\"736\":1}}],[\"判断功能\",{\"0\":{\"736\":1,\"774\":1}}],[\"判断就是false\",{\"1\":{\"709\":1}}],[\"判断就是true\",{\"1\":{\"709\":1}}],[\"判断到底是否该接口\",{\"1\":{\"696\":1}}],[\"判断结果是true后\",{\"1\":{\"586\":1}}],[\"判断不为null之后才能使用该引用访问对象\",{\"1\":{\"412\":1}}],[\"判断出引用不会指向null后再使用引用操作对象\",{\"1\":{\"412\":1}}],[\"判断输出结果\",{\"1\":{\"359\":1}}],[\"考虑数据存储的问题\",{\"1\":{\"1159\":1}}],[\"考虑到oracle可能会将其闭源\",{\"1\":{\"143\":1}}],[\"考理解去记忆\",{\"1\":{\"968\":1}}],[\"考试分数异常超出范围\",{\"1\":{\"764\":1}}],[\"考试成绩必须在0\",{\"1\":{\"764\":2}}],[\"捕获并处理try\",{\"1\":{\"759\":1}}],[\"捕获异常信息\",{\"0\":{\"753\":1}}],[\"捕获异常\",{\"0\":{\"750\":1}}],[\"处于com\",{\"1\":{\"1107\":1}}],[\"处于阻塞状态\",{\"1\":{\"868\":1}}],[\"处理和同事1的冲突\",{\"1\":{\"1201\":1}}],[\"处理好所有的冲突之后\",{\"1\":{\"1201\":1}}],[\"处理冲突\",{\"0\":{\"1201\":1},\"1\":{\"1197\":1}}],[\"处理请求参数\",{\"1\":{\"1133\":1}}],[\"处理完业务\",{\"1\":{\"1121\":1}}],[\"处理结果可能不存在情况\",{\"1\":{\"1050\":1}}],[\"处理一下\",{\"1\":{\"756\":1}}],[\"处理编译时异常\",{\"1\":{\"756\":1}}],[\"处理子类的异常分支写在前面\",{\"1\":{\"754\":1}}],[\"处理的异常类型\",{\"1\":{\"754\":1}}],[\"处在外部类成员方法中的局部内部类\",{\"1\":{\"639\":1}}],[\"处在继承顶层的类\",{\"1\":{\"533\":1}}],[\"处在student类中\",{\"1\":{\"509\":1}}],[\"处在最后的阶段\",{\"1\":{\"487\":1}}],[\"匹配规则\",{\"1\":{\"754\":1}}],[\"匹配成功提示登陆成功\",{\"1\":{\"354\":1}}],[\"块中在错误代码之后的代码\",{\"1\":{\"752\":1}}],[\"收集\",{\"0\":{\"1052\":1}}],[\"收集器\",{\"1\":{\"1051\":1}}],[\"收集错误信息\",{\"1\":{\"749\":1,\"752\":1}}],[\"收费版\",{\"1\":{\"143\":1}}],[\"错误答法\",{\"1\":{\"1003\":1}}],[\"错误使用\",{\"1\":{\"936\":1}}],[\"错误处理器中的代码\",{\"1\":{\"752\":1}}],[\"错误处理代码\",{\"1\":{\"752\":1}}],[\"错误程度小\",{\"1\":{\"747\":1}}],[\"错误x\",{\"1\":{\"434\":2}}],[\"追赶特性\",{\"1\":{\"883\":1}}],[\"追加到此字符序列的尾部\",{\"1\":{\"743\":2}}],[\"追求快速发展\",{\"1\":{\"143\":2}}],[\"容量问题\",{\"1\":{\"978\":1}}],[\"容量是capacity\",{\"1\":{\"742\":1}}],[\"容易出现的问题\",{\"1\":{\"951\":1}}],[\"容易出bug\",{\"1\":{\"950\":1}}],[\"容易因为程序员的记忆和修改导致bug产生\",{\"1\":{\"254\":1}}],[\"带主账号\",{\"1\":{\"1200\":1}}],[\"带比较器的arrays\",{\"1\":{\"741\":1}}],[\"带注解\",{\"1\":{\"254\":2}}],[\"填充数组\",{\"1\":{\"740\":1,\"741\":1}}],[\"冒泡排序\",{\"1\":{\"739\":1}}],[\"冒号\",{\"1\":{\"376\":1}}],[\"替换功能\",{\"1\":{\"743\":2}}],[\"替换旧\",{\"1\":{\"739\":2}}],[\"替换为你的数据库密码\",{\"1\":{\"234\":1}}],[\"替换为你的数据库用户名\",{\"1\":{\"234\":1}}],[\"替换为你的数据库连接信息\",{\"1\":{\"234\":1}}],[\"倒着遍历字符数组\",{\"1\":{\"738\":1}}],[\"→\",{\"1\":{\"738\":2,\"739\":2,\"1076\":1,\"1078\":1,\"1084\":2,\"1093\":5,\"1097\":2,\"1098\":3,\"1100\":4,\"1109\":1,\"1112\":2,\"1118\":5,\"1125\":4,\"1130\":3,\"1131\":4,\"1132\":5,\"1134\":1,\"1142\":3,\"1152\":1,\"1157\":2,\"1159\":2}}],[\"次数\",{\"1\":{\"1093\":1}}],[\"次\",{\"1\":{\"737\":1}}],[\"次之\",{\"1\":{\"207\":1}}],[\"课堂练习\",{\"1\":{\"737\":4,\"738\":4,\"739\":4}}],[\"截取uri字符串\",{\"1\":{\"1130\":1}}],[\"截取\",{\"0\":{\"1038\":1},\"1\":{\"728\":1,\"960\":1}}],[\"の\",{\"1\":{\"728\":1,\"782\":1,\"800\":1}}],[\"格林威治时间1970\",{\"1\":{\"724\":1}}],[\"格式去写\",{\"1\":{\"1026\":1}}],[\"格式\",{\"1\":{\"844\":3,\"939\":1,\"941\":2,\"943\":2}}],[\"格式化\",{\"1\":{\"726\":1}}],[\"格式是key=value\",{\"1\":{\"1105\":1}}],[\"格式是key\",{\"1\":{\"1104\":1}}],[\"格式是\",{\"1\":{\"724\":1}}],[\"格式三\",{\"1\":{\"433\":1}}],[\"格式二\",{\"1\":{\"395\":1,\"433\":1}}],[\"格式一\",{\"1\":{\"395\":1,\"433\":1}}],[\"格式为return\",{\"1\":{\"382\":1}}],[\"格式固定\",{\"1\":{\"308\":1}}],[\"格式使用数学公式\",{\"1\":{\"11\":1}}],[\"难点\",{\"1\":{\"994\":1}}],[\"难以和代码分开独立管理\",{\"1\":{\"924\":1}}],[\"难以转换\",{\"1\":{\"724\":1}}],[\"难道它未卜先知吗\",{\"1\":{\"456\":1}}],[\"天数\",{\"1\":{\"724\":1}}],[\"天明\",{\"1\":{\"204\":1,\"283\":1}}],[\"毫秒数\",{\"1\":{\"722\":1}}],[\"精确到毫秒\",{\"1\":{\"721\":1}}],[\"精度丢失\",{\"1\":{\"336\":1}}],[\"派件\",{\"1\":{\"721\":1}}],[\"派生类\",{\"1\":{\"522\":1}}],[\"信息储存在服务器\",{\"1\":{\"1160\":1}}],[\"信息存储在客户端\",{\"1\":{\"1160\":1}}],[\"信息位置\",{\"1\":{\"1160\":1}}],[\"信息\",{\"1\":{\"746\":1,\"1111\":1,\"1115\":1,\"1137\":1,\"1144\":1}}],[\"信息容器\",{\"1\":{\"57\":1}}],[\"信用卡\",{\"1\":{\"721\":1}}],[\"已评价\",{\"1\":{\"956\":1}}],[\"已发货\",{\"1\":{\"956\":1}}],[\"已付款\",{\"1\":{\"956\":1}}],[\"已退出的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"已过时\",{\"0\":{\"843\":1},\"1\":{\"843\":1}}],[\"已签收\",{\"1\":{\"721\":1}}],[\"已揽收\",{\"1\":{\"721\":1}}],[\"已取消\",{\"1\":{\"721\":1}}],[\"已支付\",{\"1\":{\"721\":1}}],[\"已完成\",{\"1\":{\"721\":1}}],[\"已经获得了这些值\",{\"1\":{\"1094\":1}}],[\"已经获取到了请求资源\",{\"1\":{\"127\":1}}],[\"已经表明了\",{\"1\":{\"666\":1}}],[\"已经提到过一次了\",{\"1\":{\"534\":1}}],[\"已经很多了\",{\"1\":{\"533\":1}}],[\"已经存在的某个类\",{\"1\":{\"520\":1}}],[\"已经被free\",{\"1\":{\"925\":1}}],[\"已经被作用域限制死了作用范围\",{\"1\":{\"509\":1}}],[\"已经被方法限制了作用域\",{\"1\":{\"474\":1}}],[\"已经见过了\",{\"1\":{\"452\":1}}],[\"已经取消了数组的声明格式二\",{\"1\":{\"395\":1}}],[\"已经\",{\"1\":{\"231\":1}}],[\"支付宝\",{\"1\":{\"721\":1}}],[\"支付宝支付\",{\"1\":{\"720\":2}}],[\"支付id=\",{\"1\":{\"720\":3}}],[\"支付类型测试\",{\"1\":{\"720\":1}}],[\"支持此方法是为了提高哈希表\",{\"1\":{\"678\":1,\"679\":1}}],[\"支持的类型不丰富\",{\"1\":{\"144\":1}}],[\"支持网络\",{\"1\":{\"144\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"65\":1}}],[\"银联支付\",{\"1\":{\"720\":2}}],[\"银联\",{\"1\":{\"720\":1}}],[\"银行卡\",{\"1\":{\"721\":1}}],[\"银行\",{\"1\":{\"143\":2}}],[\"见到描述信息可以知道这次提交是干什么的\",{\"1\":{\"1195\":1}}],[\"见到这名字\",{\"1\":{\"993\":1}}],[\"见jdk源码\",{\"1\":{\"970\":1}}],[\"见名知意\",{\"1\":{\"717\":1}}],[\"见阿里编程规范\",{\"1\":{\"171\":1}}],[\"周日\",{\"1\":{\"715\":1,\"717\":1}}],[\"周六\",{\"1\":{\"715\":1,\"717\":1}}],[\"周五\",{\"1\":{\"715\":1,\"717\":1}}],[\"周四\",{\"1\":{\"715\":1,\"717\":1}}],[\"周三\",{\"1\":{\"715\":1,\"717\":1}}],[\"周二\",{\"1\":{\"715\":1,\"717\":1}}],[\"周一\",{\"1\":{\"715\":1,\"717\":1}}],[\"周一到周日\",{\"1\":{\"713\":1}}],[\"浅克隆之所以两个对象没有真正独立\",{\"1\":{\"699\":1}}],[\"浅克隆\",{\"1\":{\"699\":1}}],[\"抛出一个该异常信息封装成的对象\",{\"1\":{\"749\":1}}],[\"抛出一个异常\",{\"1\":{\"312\":1}}],[\"抛出异常\",{\"0\":{\"755\":1},\"1\":{\"696\":1,\"764\":1,\"924\":2,\"972\":1,\"975\":2}}],[\"感兴趣自己玩一下\",{\"1\":{\"690\":1}}],[\"感兴趣自己测试一下\",{\"1\":{\"571\":1}}],[\"善后\",{\"1\":{\"688\":2,\"689\":1}}],[\"析构函数设计的\",{\"1\":{\"689\":1}}],[\"析构函数\",{\"1\":{\"688\":1}}],[\"足够了\",{\"1\":{\"683\":1}}],[\"挂到链表的尾端\",{\"1\":{\"1016\":1}}],[\"挂\",{\"1\":{\"680\":1}}],[\"化无限为有限\",{\"1\":{\"679\":2,\"999\":1}}],[\"明白映射的概念后\",{\"1\":{\"679\":1,\"999\":1}}],[\"明确告诉你了\",{\"1\":{\"970\":1}}],[\"明确lambda表达式所表示的对象的类型\",{\"1\":{\"653\":1}}],[\"明确一个值\",{\"1\":{\"571\":1}}],[\"明确指出调用父类的某个构造方法来完成父类成员变量的赋值\",{\"1\":{\"543\":1}}],[\"明确指出m\",{\"1\":{\"438\":2}}],[\"明确以上两点后\",{\"1\":{\"487\":1}}],[\"明确上述语法后\",{\"1\":{\"383\":1}}],[\"财务金额上的运算是不推荐使用浮点数的\",{\"1\":{\"675\":1}}],[\"始终是不同于基本数据类型的\",{\"1\":{\"708\":1}}],[\"始终返回\",{\"1\":{\"674\":1}}],[\"始终够用\",{\"1\":{\"442\":1}}],[\"认为的对象相等的比较规则\",{\"1\":{\"673\":1}}],[\"真的吗\",{\"1\":{\"968\":1}}],[\"真实的地址\",{\"1\":{\"910\":1}}],[\"真实请求是没有这个url的\",{\"1\":{\"115\":1}}],[\"真或假\",{\"1\":{\"671\":1}}],[\"李雷咱两去吃煲仔饭\",{\"1\":{\"1137\":3}}],[\"李雷\",{\"1\":{\"1137\":16}}],[\"李四\",{\"1\":{\"669\":1}}],[\"李云龙\",{\"1\":{\"158\":2,\"278\":1,\"281\":1}}],[\"紧接第二条\",{\"1\":{\"663\":1}}],[\"克隆远程仓库\",{\"1\":{\"1192\":1}}],[\"克隆到本地\",{\"1\":{\"1192\":1}}],[\"克隆异常\",{\"1\":{\"748\":1}}],[\"克隆后获取真正独立的两个对象\",{\"1\":{\"699\":1}}],[\"克隆后的两个对象调用equals方法\",{\"1\":{\"698\":1}}],[\"克隆最好不要改变数据类型\",{\"1\":{\"698\":1}}],[\"克隆必须是一个新的独立的对象\",{\"1\":{\"698\":1}}],[\"克隆使用中的细节问题\",{\"0\":{\"695\":1}}],[\"克隆方法clone\",{\"1\":{\"693\":1}}],[\"克隆\",{\"1\":{\"658\":1,\"693\":1,\"694\":1}}],[\"笼统的认识\",{\"1\":{\"658\":1}}],[\"极端情况指的是\",{\"1\":{\"972\":1}}],[\"极端情况下表现不一致\",{\"1\":{\"970\":1}}],[\"极容易认错\",{\"1\":{\"939\":1}}],[\"极大得简化了代码\",{\"1\":{\"657\":1}}],[\"极限情况下\",{\"1\":{\"615\":1}}],[\"种类\",{\"1\":{\"655\":1}}],[\"讲解一下lambda表达式的进阶使用\",{\"1\":{\"654\":1}}],[\"借助于\",{\"1\":{\"923\":1}}],[\"借助于带append参数的构造方法\",{\"1\":{\"789\":1}}],[\"借助于int\",{\"1\":{\"737\":2}}],[\"借助于hosts文件\",{\"1\":{\"124\":1}}],[\"借助方法完成类型推断\",{\"1\":{\"653\":1}}],[\"答好了之后\",{\"1\":{\"1020\":1}}],[\"答面试题\",{\"1\":{\"1002\":1}}],[\"答\",{\"1\":{\"652\":1,\"684\":1}}],[\"酌情使用匿名内部类对象\",{\"1\":{\"649\":1}}],[\"影响代码可读性\",{\"1\":{\"643\":1}}],[\"影响了增加\",{\"1\":{\"171\":1}}],[\"场景\",{\"1\":{\"1094\":1,\"1124\":1,\"1130\":1}}],[\"场景四\",{\"1\":{\"643\":1}}],[\"场景三\",{\"1\":{\"643\":1}}],[\"场景二\",{\"1\":{\"643\":1}}],[\"场景一\",{\"1\":{\"643\":1}}],[\"场景如下\",{\"1\":{\"472\":1}}],[\"毕竟你住人家房子里\",{\"1\":{\"629\":1}}],[\"轻松继承一个静态内部类\",{\"1\":{\"624\":1}}],[\"啃老族\",{\"1\":{\"623\":1}}],[\"螺壳\",{\"1\":{\"623\":1}}],[\"寄居蟹\",{\"1\":{\"623\":1}}],[\"心脏\",{\"1\":{\"623\":1}}],[\"嵌套类等地方\",{\"1\":{\"941\":1}}],[\"嵌套\",{\"1\":{\"623\":1}}],[\"嵌套循环是很好的锻炼逻辑思维能力的知识点\",{\"1\":{\"370\":1}}],[\"嵌套循环极大的增加了代码的阅读难度\",{\"1\":{\"370\":1}}],[\"嵌套循序\",{\"0\":{\"367\":1}}],[\"搞清楚\",{\"1\":{\"623\":1}}],[\"搞清楚其中赋值的顺序\",{\"1\":{\"471\":1}}],[\"补齐outer类代码\",{\"1\":{\"650\":1}}],[\"补全程序\",{\"1\":{\"619\":1}}],[\"补充其他常用类型\",{\"0\":{\"700\":1}}],[\"补充类加载过程\",{\"0\":{\"497\":1}}],[\"补充\",{\"1\":{\"323\":2,\"326\":1,\"342\":1,\"969\":1}}],[\"补充条款\",{\"1\":{\"116\":1}}],[\"匿名内部类它们都有自己独立的作用域\",{\"1\":{\"656\":1}}],[\"匿名内部类基本取代了局部内部类的作用\",{\"1\":{\"649\":1}}],[\"匿名内部类经常使用在以下两个场景中\",{\"1\":{\"649\":1}}],[\"匿名内部类实际上就是更简单的局部内部类\",{\"1\":{\"649\":1}}],[\"匿名内部类对象的两种使用方式\",{\"1\":{\"648\":1}}],[\"匿名内部类是特殊的局部内部类\",{\"1\":{\"648\":1}}],[\"匿名内部类的本质是\",{\"1\":{\"647\":1}}],[\"匿名内部类指的是\",{\"1\":{\"646\":1}}],[\"匿名内部类\",{\"0\":{\"646\":1},\"1\":{\"608\":1,\"642\":1,\"650\":1,\"741\":1,\"777\":2,\"850\":2}}],[\"匿名对象使用场景\",{\"0\":{\"483\":1}}],[\"匿名对象由于没有引用指向\",{\"1\":{\"482\":1}}],[\"匿名对象在使用完毕后会立刻成为\",{\"1\":{\"482\":1}}],[\"匿名对象\",{\"1\":{\"481\":1,\"690\":1,\"777\":1}}],[\"匿名对象主要有两个用途\",{\"1\":{\"481\":1}}],[\"匿名对象的含义是这个对象是没有名字\",{\"1\":{\"646\":1}}],[\"匿名对象的优缺点\",{\"0\":{\"482\":1}}],[\"匿名对象的用途\",{\"0\":{\"481\":1}}],[\"匿名对象的语法很简单\",{\"1\":{\"480\":1}}],[\"匿名对象指的就是没有名字的对象\",{\"1\":{\"480\":1}}],[\"广义的内部类指的是定义在另一类当中的一个类\",{\"1\":{\"608\":1}}],[\"广告统计等应用中更加灵活和可控\",{\"1\":{\"116\":1}}],[\"局限\",{\"1\":{\"606\":1}}],[\"局部内部类对象作为方法的返回值\",{\"1\":{\"642\":1}}],[\"局部内部类经常使用在以下两个场景中\",{\"1\":{\"641\":1}}],[\"局部内部类在外部类的静态成员方法中\",{\"0\":{\"640\":1}}],[\"局部内部类在外部类的成员方法中\",{\"0\":{\"639\":1}}],[\"局部内部类访问外部类成员仍不受权限限制\",{\"1\":{\"638\":1}}],[\"局部内部类的经典使用\",{\"0\":{\"641\":1}}],[\"局部内部类的访问特点\",{\"0\":{\"638\":1}}],[\"局部内部类的成员特点和成员内部类一模一样\",{\"1\":{\"636\":1}}],[\"局部内部类可以继承和实现外部的类或者接口\",{\"1\":{\"637\":1}}],[\"局部内部类不能用static关键字修饰\",{\"1\":{\"635\":1}}],[\"局部内部类和局部变量一样\",{\"1\":{\"635\":1}}],[\"局部内部类和成员内部类很相似\",{\"1\":{\"633\":1}}],[\"局部内部类是定义在一个方法或者一个作用域里面的类\",{\"1\":{\"633\":1}}],[\"局部内部类\",{\"0\":{\"633\":1},\"1\":{\"608\":1,\"641\":2,\"650\":1,\"656\":1}}],[\"局部常量\",{\"1\":{\"568\":1}}],[\"局部代码块\",{\"1\":{\"484\":1}}],[\"局部\",{\"1\":{\"427\":1}}],[\"局部位置\",{\"1\":{\"331\":2,\"486\":1,\"493\":1,\"608\":1,\"633\":2,\"647\":2}}],[\"局部位置的概念\",{\"1\":{\"331\":1}}],[\"局部变量不能使用访问权限修饰符修饰\",{\"1\":{\"509\":1}}],[\"局部变量只在作用域的局部生效\",{\"1\":{\"457\":1}}],[\"局部变量没有默认初始化过程\",{\"1\":{\"457\":1}}],[\"局部变量和方法\",{\"1\":{\"457\":1}}],[\"局部变量和成员变量的比较\",{\"1\":{\"457\":1}}],[\"局部变量和成员变量是java程序开发时\",{\"1\":{\"456\":1}}],[\"局部变量随着方法的执行\",{\"1\":{\"457\":1}}],[\"局部变量存储在栈上的栈帧中\",{\"1\":{\"457\":1}}],[\"局部变量定义在\",{\"1\":{\"457\":1}}],[\"局部变量就被销毁了\",{\"1\":{\"407\":1}}],[\"局部变量开辟空间生效了\",{\"1\":{\"407\":1}}],[\"局部变量失效\",{\"1\":{\"403\":1}}],[\"局部变量也被销毁\",{\"1\":{\"403\":1}}],[\"局部变量生效\",{\"1\":{\"403\":1}}],[\"局部变量会直接存储在栈帧中\",{\"1\":{\"403\":1}}],[\"局部变量声明\",{\"0\":{\"333\":1}}],[\"局部变量的作用域\",{\"0\":{\"335\":1}}],[\"局部变量的特点除了需要定义在局部位置\",{\"1\":{\"332\":1}}],[\"局部变量的使用\",{\"0\":{\"332\":1}}],[\"局部变量\",{\"0\":{\"331\":1},\"1\":{\"331\":2,\"474\":1,\"509\":1,\"568\":1}}],[\"局部开关\",{\"1\":{\"283\":1,\"286\":1}}],[\"秀一波~~~\",{\"1\":{\"606\":1}}],[\"商品对象\",{\"1\":{\"601\":1}}],[\"商家可以通过防盗链的方式\",{\"1\":{\"116\":1}}],[\"商家可以通过解析referer来确定哪些用户是通过该主播的直播间进入的\",{\"1\":{\"116\":1}}],[\"跟着数据\",{\"1\":{\"1132\":1}}],[\"跟着\",{\"1\":{\"1132\":2}}],[\"跟class\",{\"1\":{\"924\":1}}],[\"跟执行路径上的任务区分开来\",{\"1\":{\"851\":1}}],[\"跟\",{\"1\":{\"839\":1}}],[\"跟try\",{\"1\":{\"760\":1}}],[\"跟的是异常对象名\",{\"1\":{\"758\":1}}],[\"跟的是异常类名\",{\"1\":{\"758\":1}}],[\"跟上面那个不一样\",{\"1\":{\"707\":1}}],[\"跟乒乓球相关的人员都需要学习英语\",{\"1\":{\"601\":1}}],[\"跟随机数进行比较\",{\"1\":{\"354\":1}}],[\"乒乓球教练和篮球教练\",{\"1\":{\"601\":1}}],[\"他是在问你数组和链表的区别\",{\"1\":{\"956\":1}}],[\"他呈阻塞状态的线程因为没有得到通知\",{\"1\":{\"868\":1}}],[\"他的父母\",{\"1\":{\"623\":1}}],[\"他实现了电动车和汽油车两个标准\",{\"1\":{\"599\":1}}],[\"他们的值在创建之后不可更改\",{\"1\":{\"730\":1}}],[\"他们都是用来存储数据的\",{\"1\":{\"144\":1}}],[\"他们两者之间的区别主要在于是否支持长连接\",{\"1\":{\"115\":1}}],[\"他们约定了一种格式\",{\"1\":{\"110\":1}}],[\"他们需要遵循相同的通讯协议\",{\"1\":{\"110\":1}}],[\"部分猫和狗经过特殊训练\",{\"1\":{\"595\":1}}],[\"部署资源\",{\"0\":{\"133\":1},\"1\":{\"130\":1}}],[\"蹭公司网\",{\"1\":{\"594\":1}}],[\"蹭公司电\",{\"1\":{\"594\":1}}],[\"许多公司的开发规范中\",{\"1\":{\"592\":1}}],[\"抽方法有什好处\",{\"1\":{\"997\":1}}],[\"抽取公共接口\",{\"1\":{\"936\":1}}],[\"抽取出全体对象的共性特征\",{\"1\":{\"469\":1}}],[\"抽取出方法\",{\"1\":{\"415\":1}}],[\"抽取出来\",{\"1\":{\"267\":1}}],[\"抽象基类\",{\"1\":{\"824\":1}}],[\"抽象基类reader\",{\"0\":{\"810\":1}}],[\"抽象基类writer\",{\"0\":{\"804\":1}}],[\"抽象基类inputstream\",{\"0\":{\"792\":1}}],[\"抽象基类outputstream\",{\"0\":{\"786\":1}}],[\"抽象内部类和接口用来自己继承和实现\",{\"1\":{\"613\":1}}],[\"抽象的员工类\",{\"1\":{\"594\":1}}],[\"抽象子类可以自由选择实现\",{\"1\":{\"592\":1}}],[\"抽象子类不需要实现抽象方法\",{\"1\":{\"592\":1}}],[\"抽象类是作为继承层次中的顶层父类存在的\",{\"1\":{\"606\":1}}],[\"抽象类和接口除了都是抽象外\",{\"1\":{\"606\":1}}],[\"抽象类不能被多继承\",{\"1\":{\"606\":1}}],[\"抽象类可以实现多个接口\",{\"1\":{\"606\":1}}],[\"抽象类可以定义普通类中能够定义的所有成员方法\",{\"1\":{\"592\":1}}],[\"抽象类可以定义普通类中能够定义的所有成员变量\",{\"1\":{\"592\":1}}],[\"抽象类\",{\"1\":{\"605\":1,\"606\":1,\"1078\":1}}],[\"抽象类中的实现方法是用来作为子类的默认实现的\",{\"1\":{\"600\":1}}],[\"抽象类继承一个普通类\",{\"1\":{\"599\":1}}],[\"抽象类继承一个抽象类\",{\"1\":{\"599\":1}}],[\"抽象类实现接口\",{\"1\":{\"598\":1,\"599\":1}}],[\"抽象类实际上和普通类能够定义的成员是一样的\",{\"1\":{\"592\":1}}],[\"抽象类编码练习\",{\"1\":{\"594\":1}}],[\"抽象类还可以继承一个普通类\",{\"1\":{\"592\":1}}],[\"抽象类就不需要实现父类中的抽象方法了\",{\"1\":{\"592\":1}}],[\"抽象类虽然不能创建对象\",{\"1\":{\"592\":1}}],[\"抽象类的成员\",{\"1\":{\"606\":1}}],[\"抽象类的成员特点\",{\"1\":{\"592\":1}}],[\"抽象类的作用是\",{\"1\":{\"594\":1}}],[\"抽象类的子类可以有两种情况\",{\"1\":{\"592\":1}}],[\"抽象类的使用\",{\"1\":{\"592\":1}}],[\"抽象类的特点我们主要从以下角度\",{\"1\":{\"592\":1}}],[\"抽象类仍然是一个类\",{\"1\":{\"592\":1}}],[\"抽象方法和全局常量的集合\",{\"1\":{\"606\":1}}],[\"抽象方法最重要的作用是起到\",{\"1\":{\"592\":1}}],[\"抽象方法\",{\"1\":{\"592\":2,\"606\":2}}],[\"抽象方法必须写在一个抽象类中\",{\"1\":{\"591\":1}}],[\"抽象方法没有方法体\",{\"1\":{\"591\":1}}],[\"狗不理\",{\"1\":{\"867\":1}}],[\"狗叫\",{\"1\":{\"590\":1,\"595\":1}}],[\"狗两种动物的叫声研究\",{\"1\":{\"581\":1}}],[\"猫狗案例代码\",{\"1\":{\"595\":1}}],[\"猫叫\",{\"1\":{\"590\":1,\"595\":1}}],[\"猫和狗\",{\"1\":{\"581\":1}}],[\"琢磨琢磨语法也就差不多了\",{\"1\":{\"588\":1}}],[\"孔子喜欢玩大乱斗\",{\"1\":{\"588\":1}}],[\"孔二愣子\",{\"1\":{\"196\":1}}],[\"论语\",{\"1\":{\"588\":1}}],[\"麻痹大意\",{\"1\":{\"587\":1}}],[\"稍有不慎就会导致程序异常\",{\"1\":{\"583\":1}}],[\"稍微需要注意的是\",{\"1\":{\"306\":1}}],[\"角色父类引用\",{\"1\":{\"582\":1}}],[\"角色4引用\",{\"1\":{\"582\":1}}],[\"角色3引用\",{\"1\":{\"582\":1}}],[\"角色2引用\",{\"1\":{\"582\":1}}],[\"角色1引用\",{\"1\":{\"582\":1}}],[\"角色们都能释放技能\",{\"1\":{\"582\":1}}],[\"释放锁\",{\"1\":{\"863\":1,\"864\":1,\"867\":7}}],[\"释放资源close\",{\"1\":{\"887\":1,\"888\":1,\"892\":2,\"897\":1,\"902\":1,\"904\":1}}],[\"释放资源\",{\"1\":{\"788\":2,\"898\":1,\"902\":1}}],[\"释放系统资源\",{\"1\":{\"690\":1}}],[\"释放出不同的技能\",{\"1\":{\"582\":1}}],[\"释放内存\",{\"1\":{\"442\":1}}],[\"科学家要收集动物的叫声去研究\",{\"1\":{\"581\":1}}],[\"科学数据\",{\"1\":{\"153\":2}}],[\"情况表现出不同的状态\",{\"1\":{\"575\":1}}],[\"肯定不可能改变对象的类型\",{\"1\":{\"694\":1}}],[\"肯定不是同包\",{\"1\":{\"692\":1}}],[\"肯定不是同一个类中\",{\"1\":{\"563\":1}}],[\"肯定是有些问题的\",{\"1\":{\"694\":1}}],[\"肯定会报错\",{\"1\":{\"570\":1,\"653\":1}}],[\"肯定需要声明初始化一个二维数组\",{\"1\":{\"441\":1}}],[\"误以为是方法重写\",{\"1\":{\"560\":1}}],[\"范围在\",{\"1\":{\"810\":1}}],[\"范围内的\",{\"1\":{\"792\":1,\"794\":1}}],[\"范围\",{\"1\":{\"706\":1}}],[\"范围都是一个编译上的概念\",{\"1\":{\"557\":1}}],[\"范围更大\",{\"1\":{\"323\":1}}],[\"综合对象名点访问成员方法的范围和结果\",{\"1\":{\"559\":1}}],[\"综合对象名点访问成员变量的范围和结果\",{\"1\":{\"553\":1}}],[\"综上\",{\"1\":{\"303\":1,\"324\":1,\"394\":1,\"442\":1,\"590\":1,\"592\":2,\"641\":1,\"648\":1}}],[\"儿子\",{\"1\":{\"551\":3}}],[\"爸爸\",{\"1\":{\"551\":2}}],[\"究竟是客户端维护的\",{\"1\":{\"1137\":1}}],[\"究竟能够访问到哪些成员方法\",{\"1\":{\"556\":1}}],[\"究竟能够访问到哪些成员变量\",{\"1\":{\"549\":1}}],[\"究其原因在于\",{\"1\":{\"353\":1}}],[\"切记上来就开始答细节\",{\"1\":{\"1020\":1}}],[\"切记不要直接跑\",{\"1\":{\"960\":1}}],[\"切记\",{\"1\":{\"939\":1,\"956\":1,\"1020\":1}}],[\"切记类加载是懒加载\",{\"1\":{\"546\":1}}],[\"切换分支\",{\"1\":{\"1204\":1}}],[\"切换b线程\",{\"1\":{\"884\":1}}],[\"切换到下一个线程\",{\"1\":{\"835\":1}}],[\"切换服务器麻烦\",{\"1\":{\"128\":1}}],[\"装满了数据的一个包\",{\"1\":{\"893\":1}}],[\"装箱\",{\"1\":{\"703\":1}}],[\"装载进方法区\",{\"1\":{\"555\":1}}],[\"装有main方法的那个类的类加载\",{\"1\":{\"546\":1}}],[\"装东西\",{\"1\":{\"392\":1}}],[\"否为空格\",{\"1\":{\"705\":1}}],[\"否\",{\"1\":{\"544\":1}}],[\"否则浏览器会直接无视\",{\"1\":{\"1146\":1}}],[\"否则返回默认值\",{\"1\":{\"1046\":1}}],[\"否则返回false\",{\"1\":{\"327\":1,\"953\":1,\"1046\":1}}],[\"否则抛出异常\",{\"1\":{\"1046\":1}}],[\"否则在存储为properties文件的时候\",{\"1\":{\"1026\":1}}],[\"否则将接受平台默认的字符集\",{\"1\":{\"806\":1}}],[\"否则都会返回false\",{\"1\":{\"673\":1}}],[\"否则都会抛出数组下标越界异常\",{\"1\":{\"413\":1}}],[\"否则仍然会报错\",{\"1\":{\"442\":1}}],[\"否则无法使用\",{\"1\":{\"407\":1}}],[\"否则编译报错\",{\"1\":{\"382\":1}}],[\"否则如果\",{\"1\":{\"358\":1}}],[\"否则就\",{\"1\":{\"358\":1}}],[\"否则登陆失败\",{\"1\":{\"354\":1}}],[\"否则执行表达式2\",{\"1\":{\"349\":1}}],[\"否则为1\",{\"1\":{\"348\":2}}],[\"否则为0\",{\"1\":{\"348\":1}}],[\"否则会报错\",{\"1\":{\"364\":1,\"400\":1,\"499\":1}}],[\"否则会导致程序可读性变差\",{\"1\":{\"349\":1}}],[\"否则会编译报错\",{\"1\":{\"341\":1,\"570\":1}}],[\"否则会删除所有数据\",{\"1\":{\"161\":1}}],[\"否则根据disk来进行匹配\",{\"1\":{\"266\":2}}],[\"否则根据传入的memory\",{\"1\":{\"266\":2}}],[\"否则拒绝登录\",{\"1\":{\"204\":1}}],[\"否则认为是非法插入\",{\"1\":{\"169\":1}}],[\"否则\",{\"1\":{\"160\":1,\"178\":1,\"265\":1,\"358\":1}}],[\"况且构造方法也不是普通方法\",{\"1\":{\"539\":1}}],[\"叫重复\",{\"1\":{\"980\":1}}],[\"叫泛型的定义\",{\"1\":{\"940\":1}}],[\"叫\",{\"1\":{\"598\":1}}],[\"叫在\",{\"1\":{\"538\":1}}],[\"叫做集合a到集合b的映射\",{\"1\":{\"679\":1,\"999\":1}}],[\"叫做代码块\",{\"1\":{\"484\":1}}],[\"叫做\",{\"1\":{\"267\":1}}],[\"叫做回表\",{\"1\":{\"233\":1}}],[\"叫做hash索引\",{\"1\":{\"220\":1}}],[\"叫做requesta\",{\"1\":{\"128\":1}}],[\"兄弟姐妹对象\",{\"1\":{\"535\":1}}],[\"兄弟姐妹\",{\"1\":{\"533\":2,\"537\":1,\"538\":1}}],[\"祖先类而存在的\",{\"1\":{\"594\":1}}],[\"祖先类\",{\"1\":{\"533\":1}}],[\"间接父类是c\",{\"1\":{\"533\":1}}],[\"间接父类\",{\"1\":{\"533\":1}}],[\"父工程\",{\"1\":{\"1080\":1}}],[\"父子继承关系\",{\"1\":{\"957\":1}}],[\"父子类方法重写中\",{\"1\":{\"605\":1}}],[\"父子类中一旦存在父子类同名的成员方法\",{\"1\":{\"559\":1}}],[\"父子类中的成员方法也是可以同名的\",{\"1\":{\"555\":1}}],[\"父子类中的同名成员变量它们各自有存储的区域\",{\"1\":{\"553\":1}}],[\"父子类的成员是允许同名的\",{\"1\":{\"548\":1}}],[\"父子类成员变量的赋值顺序的\",{\"1\":{\"542\":1}}],[\"父子类成员赋值\",{\"1\":{\"541\":1}}],[\"父子类加载\",{\"1\":{\"541\":1}}],[\"父\",{\"1\":{\"648\":1}}],[\"父接口的名字\",{\"1\":{\"653\":1}}],[\"父接口\",{\"1\":{\"596\":1}}],[\"父类变量类型为integer\",{\"1\":{\"940\":1}}],[\"父类变量类型为string\",{\"1\":{\"940\":1}}],[\"父类如果抛出exception\",{\"1\":{\"756\":1}}],[\"父类如果还有父类也算上\",{\"1\":{\"551\":1,\"557\":1}}],[\"父类方法\",{\"1\":{\"560\":1}}],[\"父类构造器执行完毕\",{\"1\":{\"545\":1}}],[\"父类构造器优先于子类构造器执行\",{\"1\":{\"541\":1}}],[\"父类对象\",{\"1\":{\"544\":1}}],[\"父类中的方法返回一个接口类型\",{\"1\":{\"605\":1}}],[\"父类中的方法返回一个抽象类类型\",{\"1\":{\"605\":1}}],[\"父类中的方法返回一个普通类类型\",{\"1\":{\"605\":1}}],[\"父类中没有该方法\",{\"1\":{\"588\":1}}],[\"父类中没有aa\",{\"1\":{\"588\":1}}],[\"父类中私有方法不能被重写\",{\"1\":{\"562\":1}}],[\"父类中有默认的构造方法\",{\"1\":{\"542\":1}}],[\"父类中对成员进行修改\",{\"1\":{\"530\":1}}],[\"父类的也能获取到\",{\"1\":{\"921\":1}}],[\"父类的异常分支写在后面\",{\"1\":{\"754\":1}}],[\"父类的引用转换成子类的引用\",{\"1\":{\"584\":1}}],[\"父类的同名成员变量被子类同名成员变量隐藏了\",{\"1\":{\"553\":1}}],[\"父类的构造器为什么优先于子类构造器执行\",{\"1\":{\"541\":1}}],[\"父类的成员变量也需要赋值\",{\"1\":{\"540\":1}}],[\"父类的成员从何而来\",{\"1\":{\"540\":2}}],[\"父类成员变量的赋值一定先于子类\",{\"1\":{\"542\":1}}],[\"父类成员变量的赋值等相关的问题\",{\"1\":{\"540\":1}}],[\"父类成员区域\",{\"1\":{\"541\":1}}],[\"父类引用father就可以强转为son\",{\"1\":{\"585\":1}}],[\"父类引用father就可以强转为son或者grandson引用\",{\"1\":{\"585\":1}}],[\"父类引用指向的真实对象的类型\",{\"1\":{\"585\":2}}],[\"父类引用指向子类对象\",{\"1\":{\"526\":1,\"944\":1}}],[\"父类引用限制了子类对象的功能\",{\"1\":{\"583\":1}}],[\"父类引用限制了子类对象的方法访问范围\",{\"1\":{\"580\":1}}],[\"父类引用就是功能受限的遥控器\",{\"1\":{\"580\":1}}],[\"父类引用转换成子类引用\",{\"1\":{\"529\":1}}],[\"父类引用\",{\"1\":{\"529\":1,\"584\":1}}],[\"父类不能当成子类使用\",{\"1\":{\"523\":1}}],[\"父类能当子类用吗\",{\"1\":{\"523\":1}}],[\"父类\",{\"1\":{\"523\":3,\"524\":1,\"528\":1,\"551\":1,\"557\":1}}],[\"父表\",{\"1\":{\"171\":1}}],[\"青年\",{\"1\":{\"1040\":1}}],[\"青出于蓝而胜于蓝\",{\"1\":{\"520\":1}}],[\"青蛙跳台阶\",{\"1\":{\"442\":1}}],[\"教练\",{\"1\":{\"601\":1}}],[\"教学两种行为\",{\"1\":{\"519\":1}}],[\"教师号两个属性\",{\"1\":{\"519\":1}}],[\"教师类\",{\"1\":{\"519\":1}}],[\"余额大于100\",{\"1\":{\"517\":1}}],[\"余额\",{\"1\":{\"517\":1}}],[\"赋了null\",{\"1\":{\"954\":1}}],[\"赋予默认值\",{\"1\":{\"517\":2}}],[\"赋值完成之后给其返回去\",{\"1\":{\"1118\":1}}],[\"赋值完毕后\",{\"1\":{\"441\":1}}],[\"赋值时用\",{\"1\":{\"924\":1}}],[\"赋值方式是\",{\"1\":{\"924\":1}}],[\"赋值代码等等\",{\"1\":{\"669\":1}}],[\"赋值给h\",{\"1\":{\"1008\":1}}],[\"赋值给左边\",{\"1\":{\"345\":1}}],[\"赋值给整型时\",{\"1\":{\"342\":1}}],[\"赋值\",{\"1\":{\"345\":1,\"350\":1,\"396\":1,\"474\":1,\"920\":2,\"924\":1}}],[\"赋值运算符的优先级往往最低\",{\"1\":{\"350\":1}}],[\"赋值运算符是从右向左结合\",{\"1\":{\"350\":1}}],[\"赋值运算符总是把右边的操作数\",{\"1\":{\"345\":1}}],[\"赋值运算符可以分为两类\",{\"1\":{\"345\":1}}],[\"赋值运算符需要连接两个操作数\",{\"1\":{\"345\":1}}],[\"赋值运算符\",{\"0\":{\"345\":1},\"1\":{\"343\":1,\"350\":1}}],[\"赋值语句等\",{\"1\":{\"342\":1}}],[\"员工信息\",{\"1\":{\"517\":1}}],[\"轿车\",{\"1\":{\"513\":1}}],[\"继承httpservletservlet\",{\"1\":{\"1085\":1}}],[\"继承genericservlet\",{\"1\":{\"1085\":1}}],[\"继承classloader\",{\"1\":{\"923\":2}}],[\"继承timertask\",{\"1\":{\"884\":1}}],[\"继承关系\",{\"1\":{\"701\":1,\"786\":1,\"788\":1,\"790\":1,\"792\":1,\"794\":1,\"795\":1,\"804\":1,\"806\":1,\"807\":1,\"808\":1,\"813\":2,\"814\":1,\"819\":1,\"820\":1,\"823\":1,\"824\":1,\"881\":1}}],[\"继承和实现\",{\"0\":{\"613\":1,\"624\":1,\"637\":1},\"1\":{\"608\":1,\"621\":1}}],[\"继承另外的一个类\",{\"1\":{\"599\":1}}],[\"继承这个抽象类也不符合继承的\",{\"1\":{\"595\":1}}],[\"继承猫狗\",{\"1\":{\"595\":1}}],[\"继承体系代码如下\",{\"1\":{\"595\":1}}],[\"继承保证\",{\"1\":{\"582\":1}}],[\"继承仅考虑普通成员而不考虑静态成员\",{\"1\":{\"539\":1}}],[\"继承过来干嘛呢\",{\"1\":{\"539\":1}}],[\"继承来的东西也是可以修改的\",{\"1\":{\"533\":1}}],[\"继承自父类object\",{\"1\":{\"533\":1}}],[\"继承链中越处于上流越先执行\",{\"1\":{\"542\":1}}],[\"继承链可以无限延伸下去\",{\"1\":{\"533\":1}}],[\"继承链\",{\"1\":{\"533\":1}}],[\"继承层次中需要注意的地方\",{\"1\":{\"533\":1}}],[\"继承层次\",{\"1\":{\"533\":1}}],[\"继承层级\",{\"0\":{\"533\":1}}],[\"继承仍然是继承了\",{\"1\":{\"530\":1}}],[\"继承打破了java引用数据类型的类型限制\",{\"1\":{\"525\":1}}],[\"继承其他类的类主要称呼有\",{\"1\":{\"522\":1}}],[\"继承父类的叫做子类\",{\"1\":{\"522\":1}}],[\"继承只考虑对象相关成员的继承\",{\"1\":{\"520\":1}}],[\"继承中两个类的关系\",{\"0\":{\"521\":1}}],[\"继承中的父子类具有\",{\"1\":{\"523\":1}}],[\"继承中的方法覆盖\",{\"0\":{\"554\":1},\"1\":{\"518\":1}}],[\"继承中的属性隐藏\",{\"0\":{\"547\":1},\"1\":{\"518\":1}}],[\"继承中2个类的关系\",{\"1\":{\"518\":1}}],[\"继承的根本原因是因为要复用\",{\"1\":{\"599\":1}}],[\"继承的定义中\",{\"1\":{\"539\":1}}],[\"继承的限制\",{\"0\":{\"539\":1}}],[\"继承的缺点\",{\"1\":{\"530\":1}}],[\"继承的出现\",{\"1\":{\"530\":1}}],[\"继承的出现减少了代码冗余\",{\"1\":{\"530\":1}}],[\"继承的优点\",{\"1\":{\"530\":1}}],[\"继承的优缺点\",{\"0\":{\"530\":1}}],[\"继承的本质是成员的复用\",{\"1\":{\"520\":1}}],[\"继承的层次\",{\"0\":{\"531\":1},\"1\":{\"518\":1}}],[\"继承的基本语法与特点\",{\"1\":{\"518\":1}}],[\"继承不仅增强了代码的复用性\",{\"1\":{\"513\":1}}],[\"继承主要描述的是类与类之间的关系\",{\"1\":{\"513\":1}}],[\"继承\",{\"0\":{\"513\":1},\"1\":{\"525\":1,\"595\":2,\"596\":2,\"599\":2,\"641\":1}}],[\"继续由另外一个servlet处理业务\",{\"1\":{\"1121\":1}}],[\"继续\",{\"1\":{\"377\":1}}],[\"封装为一个map<string\",{\"1\":{\"1117\":1}}],[\"封装成数据报包\",{\"1\":{\"895\":1}}],[\"封装了该类所有类型信息\",{\"1\":{\"662\":1}}],[\"封装练习\",{\"0\":{\"517\":1}}],[\"封装实现步骤\",{\"0\":{\"516\":1}}],[\"封装的好处\",{\"1\":{\"515\":1}}],[\"封装在一起\",{\"1\":{\"515\":1}}],[\"封装就是面向对象的核心思想\",{\"1\":{\"512\":1}}],[\"封装\",{\"0\":{\"512\":1},\"1\":{\"515\":1,\"641\":1,\"649\":1}}],[\"隐藏类\",{\"1\":{\"643\":1}}],[\"隐藏自身存在的一个普通类\",{\"1\":{\"625\":1}}],[\"隐藏实现细节\",{\"1\":{\"510\":1}}],[\"隐式的内存管理\",{\"1\":{\"925\":1}}],[\"隐式对象初始化的必要条件\",{\"1\":{\"542\":1}}],[\"隐式子类对象初始化\",{\"0\":{\"542\":1}}],[\"隐式传参\",{\"1\":{\"460\":1}}],[\"隐式内连接\",{\"1\":{\"182\":1}}],[\"隐式\",{\"1\":{\"182\":1}}],[\"受保护的资源的文件\",{\"1\":{\"1098\":1}}],[\"受阻塞并等待某个监视器锁的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"受权限控制\",{\"1\":{\"630\":1}}],[\"受访问权限控制\",{\"1\":{\"544\":1}}],[\"受谁保护的概念\",{\"1\":{\"508\":1}}],[\"受控的资源使用\",{\"1\":{\"213\":1}}],[\"智能导包是一种十分高效且方便的导包方式\",{\"1\":{\"504\":1}}],[\"智能导入\",{\"0\":{\"504\":1}}],[\"干脆把其中一个studnet改名会更好\",{\"1\":{\"503\":1}}],[\"另外通过session的invalidate方法实现注销功能\",{\"1\":{\"1159\":1}}],[\"另外在请求信息之间出现了这样的一块内容\",{\"1\":{\"1120\":1}}],[\"另外两个浮点数进行减法和比较运算时也容易出问题\",{\"1\":{\"153\":1}}],[\"另一个提交修改\",{\"1\":{\"1201\":1}}],[\"另一个导包或者就近原则直接使用就可以了\",{\"1\":{\"503\":1}}],[\"另一类是实现了map接口的类\",{\"1\":{\"950\":1}}],[\"另一方面\",{\"1\":{\"533\":1}}],[\"咋办\",{\"1\":{\"503\":1}}],[\"准确的定位到一个类的\",{\"1\":{\"500\":1}}],[\"准备知识\",{\"0\":{\"998\":1}}],[\"准备好关闭连接了\",{\"1\":{\"908\":1}}],[\"准备和解析可以统称为\",{\"1\":{\"497\":1}}],[\"准备\",{\"1\":{\"497\":2,\"910\":1}}],[\"杨幂\",{\"1\":{\"498\":1}}],[\"杨超越\",{\"1\":{\"498\":1}}],[\"杨辉三角从纯粹数字规律上来说\",{\"1\":{\"441\":1}}],[\"杨辉三角\",{\"0\":{\"441\":1},\"1\":{\"441\":1}}],[\"马化腾\",{\"1\":{\"498\":1}}],[\"马上讲\",{\"1\":{\"385\":1}}],[\"卸载应用\",{\"1\":{\"1153\":1}}],[\"卸载\",{\"1\":{\"497\":1}}],[\"源数组\",{\"1\":{\"954\":1}}],[\"源码如下\",{\"1\":{\"495\":1,\"702\":1}}],[\"源代码文件\",{\"1\":{\"308\":1}}],[\"紫色\",{\"1\":{\"491\":1}}],[\"却进行了赋值\",{\"1\":{\"487\":1}}],[\"谁生效\",{\"1\":{\"1008\":1}}],[\"谁等待\",{\"1\":{\"840\":1}}],[\"谁才代表一个线程\",{\"1\":{\"833\":1}}],[\"谁也没有两个亲爹吧\",{\"1\":{\"532\":1}}],[\"谁先谁后执行的问题\",{\"1\":{\"496\":1}}],[\"谁写在代码顺序的上面\",{\"1\":{\"494\":1}}],[\"谁写在代码书写顺序的上面\",{\"1\":{\"487\":1}}],[\"谁就先执行\",{\"1\":{\"487\":1,\"494\":1}}],[\"谁在后\",{\"1\":{\"358\":1}}],[\"今天我输液了\",{\"1\":{\"806\":1}}],[\"今天略过它\",{\"1\":{\"484\":1}}],[\"今天来详细的学习一下代码块\",{\"1\":{\"484\":1}}],[\"今后我们写代码的时候\",{\"1\":{\"961\":1}}],[\"今后建议大家\",{\"1\":{\"231\":1}}],[\"今后如果想从服务器a切换到服务器b\",{\"1\":{\"128\":1}}],[\"降低代码性能\",{\"1\":{\"483\":1}}],[\"降序排序\",{\"1\":{\"166\":1}}],[\"频繁挪动数据\",{\"1\":{\"970\":1}}],[\"频繁使用匿名对象会导致频繁创建对象\",{\"1\":{\"483\":1}}],[\"频繁创建匿名对象\",{\"1\":{\"483\":1}}],[\"频繁去改表\",{\"1\":{\"153\":1}}],[\"像\",{\"1\":{\"924\":1}}],[\"像上述代码中的类integer其实就是包装类\",{\"1\":{\"700\":1}}],[\"像上面这样定义\",{\"1\":{\"599\":1}}],[\"像以上object类当中的clone方法的实现\",{\"1\":{\"699\":1}}],[\"像以下代码频繁创建匿名对象是得不偿失的\",{\"1\":{\"483\":1}}],[\"像notify\",{\"1\":{\"658\":1}}],[\"像cloneable这种没有声明定义任何成员的\",{\"1\":{\"696\":1}}],[\"像computer这种\",{\"1\":{\"608\":1}}],[\"像cpu这种\",{\"1\":{\"608\":1}}],[\"像math\",{\"1\":{\"570\":1}}],[\"像object类中的getclass\",{\"1\":{\"567\":1}}],[\"像java这种\",{\"1\":{\"532\":1}}],[\"像成员变量name\",{\"1\":{\"519\":1}}],[\"像string\",{\"1\":{\"503\":1}}],[\"像下图一样执行\",{\"1\":{\"356\":1}}],[\"利用反射方式获得field\",{\"1\":{\"1108\":1}}],[\"利用method调用对象的方法\",{\"1\":{\"921\":1}}],[\"利用输入输出流进行读写操作\",{\"1\":{\"898\":1,\"902\":1}}],[\"利用输出输出流进行读写操作\",{\"1\":{\"897\":1,\"902\":1}}],[\"利用system\",{\"1\":{\"821\":2}}],[\"利用带过滤器的listfiles方法\",{\"1\":{\"777\":1}}],[\"利用一个字符数组创建字符数组\",{\"1\":{\"729\":2}}],[\"利用字节数数组的一部分\",{\"1\":{\"729\":2}}],[\"利用字节数组\",{\"1\":{\"729\":2}}],[\"利用了static成员变量类全局唯一\",{\"1\":{\"478\":1}}],[\"利用这些数据\",{\"1\":{\"141\":1}}],[\"吃完饭去看电影吧\",{\"1\":{\"1137\":4}}],[\"吃\",{\"1\":{\"867\":1}}],[\"吃包子\",{\"1\":{\"867\":1}}],[\"吃包子的方法\",{\"1\":{\"867\":2}}],[\"吃了\",{\"1\":{\"867\":2,\"922\":1}}],[\"吃饭\",{\"1\":{\"478\":1}}],[\"吃掉了你的脑子~真香~\",{\"1\":{\"469\":1}}],[\"投篮\",{\"1\":{\"474\":3}}],[\"投篮必进\",{\"1\":{\"472\":2}}],[\"思想\",{\"1\":{\"606\":1}}],[\"思路\",{\"1\":{\"472\":2,\"796\":1,\"853\":1,\"895\":1,\"905\":1,\"1148\":1}}],[\"思考两个问题\",{\"1\":{\"652\":1}}],[\"思考程序输出的顺序\",{\"1\":{\"471\":1}}],[\"思考一下animal类的继承体系\",{\"1\":{\"590\":1}}],[\"思考一下怎么能够找到系统中类\",{\"1\":{\"469\":1}}],[\"思考一下\",{\"1\":{\"430\":1,\"956\":1,\"1006\":1,\"1012\":1}}],[\"思考以下问题\",{\"1\":{\"429\":1}}],[\"思考\",{\"0\":{\"1159\":1},\"1\":{\"392\":1,\"394\":1,\"413\":1,\"459\":1,\"508\":1,\"566\":1,\"584\":1,\"1078\":1}}],[\"梦之队有5名顶级球员kobe\",{\"1\":{\"472\":2}}],[\"攻击\",{\"1\":{\"469\":2}}],[\"攻击力\",{\"1\":{\"469\":2}}],[\"攻击者可以以任何用户的身份登录系统\",{\"1\":{\"204\":1}}],[\"攻击者可以在输入框中输入一些恶意代码\",{\"1\":{\"204\":1}}],[\"攻击者利用这种漏洞向网站或应用程序的数据库中插入恶意代码\",{\"1\":{\"204\":1}}],[\"植物大战僵尸\",{\"1\":{\"469\":1}}],[\"技能\",{\"1\":{\"582\":5}}],[\"技能战斗\",{\"1\":{\"469\":1}}],[\"技术手段如referer请求头和防盗链\",{\"1\":{\"116\":1}}],[\"技术手段\",{\"1\":{\"116\":2}}],[\"爱的魔力转圈圈\",{\"1\":{\"469\":1}}],[\"勇气\",{\"1\":{\"469\":1}}],[\"沉默打击\",{\"1\":{\"469\":1}}],[\"少见但不是见不到\",{\"1\":{\"469\":1}}],[\"王道彭于晏\",{\"1\":{\"833\":2}}],[\"王道吴彦祖\",{\"1\":{\"833\":2}}],[\"王菲\",{\"1\":{\"498\":1}}],[\"王冰冰\",{\"1\":{\"468\":1}}],[\"王有胜\",{\"1\":{\"278\":1,\"281\":1}}],[\"权限修饰符\",{\"1\":{\"608\":1,\"924\":1}}],[\"权限修饰符先使用public\",{\"1\":{\"464\":1}}],[\"权限判断\",{\"1\":{\"516\":1}}],[\"权限这个东西\",{\"1\":{\"510\":1}}],[\"权重\",{\"1\":{\"116\":1}}],[\"构造cookie信息\",{\"0\":{\"1139\":1}}],[\"构造一个form表单\",{\"1\":{\"1119\":1}}],[\"构造一个请求\",{\"1\":{\"1112\":1}}],[\"构造一个与给定映射具有相同映射关系的新的树映射\",{\"1\":{\"1025\":1}}],[\"构造一个与指定有序映射具有相同映射关系和相同排序顺序的新的树映射\",{\"1\":{\"1025\":1}}],[\"构造一个与指定有序\",{\"1\":{\"992\":1}}],[\"构造一个与指定\",{\"1\":{\"988\":1}}],[\"构造一个映射关系与指定映射相同的插入顺序\",{\"1\":{\"1022\":1}}],[\"构造一个映射关系与指定\",{\"1\":{\"1017\":1}}],[\"构造一个具有默认初始容量\",{\"1\":{\"1017\":1}}],[\"构造一个具有指定初始容量的空列表\",{\"1\":{\"963\":1}}],[\"构造一个带指定初始容量\",{\"1\":{\"1022\":1}}],[\"构造一个带指定初始容量和加载因子的空插入顺序\",{\"1\":{\"1022\":1}}],[\"构造一个带指定初始容量和加载因子的空\",{\"1\":{\"1017\":1}}],[\"构造一个带指定初始容量和默认加载因子\",{\"1\":{\"988\":1,\"1017\":1,\"1022\":1}}],[\"构造一个带有指定初始容量和加载因子的新空链接哈希\",{\"1\":{\"988\":1}}],[\"构造一个带默认初始容量\",{\"1\":{\"988\":1,\"1022\":1}}],[\"构造一个初始容量能够容纳指定数量的元素的空数组双端队列\",{\"1\":{\"978\":1}}],[\"构造一个初始容量能够容纳\",{\"1\":{\"978\":1}}],[\"构造一个初始容量为\",{\"1\":{\"963\":1}}],[\"构造一个空列表\",{\"1\":{\"967\":1}}],[\"构造一个包含指定\",{\"1\":{\"963\":1,\"967\":1,\"978\":1,\"984\":1,\"992\":1}}],[\"构造一个新的空\",{\"1\":{\"984\":3,\"992\":2}}],[\"构造一个新的\",{\"1\":{\"801\":2,\"1025\":1}}],[\"构造\",{\"1\":{\"890\":1,\"892\":1,\"1136\":1}}],[\"构造数据报包\",{\"1\":{\"890\":1,\"892\":1}}],[\"构造函数\",{\"1\":{\"688\":1}}],[\"构造代码块赋值\",{\"1\":{\"541\":1,\"570\":1}}],[\"构造代码块能不能用于给静态成员变量赋值\",{\"1\":{\"491\":1}}],[\"构造代码块毕竟是给成员变量赋值用的\",{\"1\":{\"490\":1}}],[\"构造代码块最大的特点就是其中的代码\",{\"1\":{\"490\":1}}],[\"构造代码块中的代码要放入构造器的首几行\",{\"1\":{\"488\":1}}],[\"构造代码块都会随之执行\",{\"1\":{\"488\":1}}],[\"构造代码块\",{\"0\":{\"485\":1},\"1\":{\"484\":1,\"487\":2,\"498\":2}}],[\"构造器等\",{\"1\":{\"662\":1}}],[\"构造器除了可以自己用\",{\"1\":{\"592\":1}}],[\"构造器不能继承\",{\"1\":{\"562\":1}}],[\"构造器最后去执行\",{\"1\":{\"546\":1}}],[\"构造器调用\",{\"1\":{\"544\":1}}],[\"构造器在整个对象的成员变量赋值过程中\",{\"1\":{\"487\":1}}],[\"构造器\",{\"1\":{\"487\":2,\"498\":3,\"592\":2,\"598\":2,\"924\":1}}],[\"构造器写在\",{\"1\":{\"469\":1}}],[\"构造器debug模式练习\",{\"1\":{\"468\":1}}],[\"构造器是不能被继承的\",{\"1\":{\"539\":1}}],[\"构造器是每一次new对象都会执行一次\",{\"1\":{\"488\":1}}],[\"构造器是最后执行的\",{\"1\":{\"467\":1}}],[\"构造器是完成对象的初始化\",{\"1\":{\"466\":1}}],[\"构造器赋值final成员常量\",{\"1\":{\"570\":1}}],[\"构造器赋值\",{\"1\":{\"467\":1,\"541\":1,\"570\":1}}],[\"构造器的赋值顺序\",{\"0\":{\"467\":1}}],[\"构造器的作用不是创建对象\",{\"1\":{\"465\":1}}],[\"构造器的作用是用来给成员变量赋值的\",{\"1\":{\"465\":1}}],[\"构造器中还可以用this表示调用其它构造器\",{\"1\":{\"466\":1}}],[\"构造器没有返回值\",{\"1\":{\"466\":1}}],[\"构造器只是告诉jvm在创建对象过程中\",{\"1\":{\"465\":1}}],[\"构造器作用与使用\",{\"0\":{\"465\":1}}],[\"构造器语法\",{\"0\":{\"464\":1}}],[\"构造方法摘要\",{\"1\":{\"1025\":1}}],[\"构造方法里可以传file对象或者string\",{\"1\":{\"820\":1}}],[\"构造方法是private的\",{\"1\":{\"719\":1}}],[\"构造方法私有\",{\"1\":{\"715\":2,\"717\":1,\"884\":3}}],[\"构造方法引用\",{\"1\":{\"655\":3}}],[\"构造方法\",{\"0\":{\"723\":1,\"725\":1,\"729\":1,\"769\":1,\"963\":1,\"978\":1},\"1\":{\"567\":1,\"577\":1,\"606\":1,\"675\":1,\"729\":1,\"732\":1,\"763\":1,\"764\":1,\"769\":1,\"771\":1,\"788\":1,\"790\":1,\"794\":1,\"795\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":1,\"816\":1,\"817\":1,\"819\":1,\"820\":1,\"823\":1,\"824\":1,\"851\":1,\"881\":1,\"883\":1,\"889\":1,\"890\":1,\"899\":1,\"900\":1,\"918\":1,\"922\":1,\"924\":1,\"1108\":1}}],[\"构造方法的名字必须和类名一模一样\",{\"1\":{\"466\":1}}],[\"构造方法无法通过普通方法的调用方式调用\",{\"1\":{\"465\":1}}],[\"构造方法没有返回值\",{\"1\":{\"464\":1}}],[\"构造方法名必须跟类名相同\",{\"1\":{\"464\":1}}],[\"构造方法体\",{\"1\":{\"464\":2,\"465\":1}}],[\"构造方法也是方法\",{\"1\":{\"464\":1}}],[\"何为兼容呢\",{\"1\":{\"561\":1}}],[\"何为当前对象\",{\"1\":{\"460\":1}}],[\"何时比较适合使用三目运算符呢\",{\"1\":{\"349\":1}}],[\"黑色\",{\"1\":{\"459\":1,\"491\":1}}],[\"垃圾\",{\"1\":{\"457\":1,\"482\":2}}],[\"垃圾回收是java和c++之间的一道围墙\",{\"1\":{\"407\":1}}],[\"首字母大写\",{\"1\":{\"1118\":1}}],[\"首字母大写准换\",{\"1\":{\"739\":1}}],[\"首要用途是隐藏类\",{\"1\":{\"632\":1}}],[\"首次出现的位置\",{\"1\":{\"737\":2}}],[\"首次\",{\"1\":{\"476\":2,\"541\":2,\"914\":2}}],[\"首次创建该类对象\",{\"1\":{\"456\":1,\"914\":1}}],[\"首先配置好git路径\",{\"1\":{\"1205\":1}}],[\"首先能够进入眼帘的是\",{\"1\":{\"1120\":1}}],[\"首先先说一下共同点\",{\"1\":{\"1020\":1}}],[\"首先先拿到java的id\",{\"1\":{\"184\":1}}],[\"首先计算hashcode\",{\"1\":{\"1008\":2}}],[\"首先计算出表达式的值\",{\"1\":{\"359\":1}}],[\"首先查看一个经典报错\",{\"1\":{\"700\":1}}],[\"首先就要解决的就是访问权限的问题\",{\"1\":{\"694\":1}}],[\"首先注意访问权限\",{\"1\":{\"692\":1}}],[\"首先注意访问权限是protected\",{\"1\":{\"687\":1}}],[\"首先hashcode方法中规定\",{\"1\":{\"684\":1}}],[\"首先找到数组的下标\",{\"1\":{\"680\":1}}],[\"首先它的访问权限修饰符是public\",{\"1\":{\"660\":1}}],[\"首先它肯定是存在的\",{\"1\":{\"548\":1,\"555\":1}}],[\"首先需要外部类权限\",{\"1\":{\"611\":1,\"622\":1}}],[\"首先需要明确新数组的长度\",{\"1\":{\"421\":1}}],[\"首先抽象类可以没有抽象方法\",{\"1\":{\"592\":1}}],[\"首先编译器会从引用的数据类型的那个类中\",{\"1\":{\"551\":1}}],[\"首先是\",{\"1\":{\"549\":1,\"556\":1}}],[\"首先是在栈上分配一片空间给引用数据类型的引用\",{\"1\":{\"405\":1}}],[\"首先去找到new对象的构造器\",{\"1\":{\"546\":1}}],[\"首先程序要从main方法启动\",{\"1\":{\"546\":1}}],[\"首先我们从数组对象的初始化开始\",{\"1\":{\"540\":1}}],[\"首先构造器不能算成员\",{\"1\":{\"539\":1}}],[\"首先为每一个一维数组的首尾元素赋值1\",{\"1\":{\"441\":1}}],[\"首先在调用方法的栈帧中声明两个数组的引用拷贝\",{\"1\":{\"426\":1}}],[\"首先要决定留哪些代码\",{\"1\":{\"1197\":1}}],[\"首先要确定就是你的key代表什么东西\",{\"1\":{\"1053\":1}}],[\"首先要明确\",{\"1\":{\"731\":1}}],[\"首先要明确的是\",{\"1\":{\"337\":1}}],[\"首先要考虑的就是类加载\",{\"1\":{\"541\":1}}],[\"首先要进行声明和初始化\",{\"1\":{\"432\":1}}],[\"首先要声明\",{\"1\":{\"395\":1}}],[\"首先定义一个public修饰的class\",{\"1\":{\"308\":1}}],[\"首先写sql\",{\"1\":{\"255\":1}}],[\"首先\",{\"1\":{\"188\":1,\"222\":1,\"232\":1,\"307\":1,\"308\":1,\"441\":1,\"497\":1,\"534\":1,\"539\":2,\"721\":1,\"724\":1,\"1002\":1}}],[\"首先尝试使用浏览器缓存查找\",{\"1\":{\"124\":1}}],[\"迫不得已才加载\",{\"1\":{\"456\":1}}],[\"换个端口\",{\"1\":{\"905\":1}}],[\"换句话说是比较两个引用是否指向同一个对象\",{\"1\":{\"673\":1}}],[\"换句话说\",{\"1\":{\"525\":1,\"580\":1,\"673\":1}}],[\"换句话说创建一个类的对象必然触发该类的类加载\",{\"1\":{\"456\":1}}],[\"换行\",{\"1\":{\"353\":1,\"356\":1}}],[\"换行符的单个字符串\",{\"1\":{\"353\":1}}],[\"换行符或者制表符\",{\"1\":{\"353\":1}}],[\"行政区域\",{\"1\":{\"1134\":1}}],[\"行为根本不是个体\",{\"1\":{\"595\":1}}],[\"行为是一致的\",{\"1\":{\"674\":1}}],[\"行为是工作和加班\",{\"1\":{\"594\":1}}],[\"行为是工作\",{\"1\":{\"594\":2}}],[\"行为是上课\",{\"1\":{\"463\":1}}],[\"行为是可以跑\",{\"1\":{\"459\":1}}],[\"行为\",{\"1\":{\"445\":1,\"450\":1,\"469\":2,\"478\":1,\"598\":2}}],[\"行列相同就是最后一个元素\",{\"1\":{\"441\":1}}],[\"共有七个阶段\",{\"1\":{\"497\":1}}],[\"共计创建了\",{\"1\":{\"478\":1}}],[\"共同实现程序的功能\",{\"1\":{\"445\":1}}],[\"共用模式\",{\"1\":{\"312\":1}}],[\"个性化\",{\"1\":{\"1118\":1}}],[\"个元素的空数组双端队列\",{\"1\":{\"978\":1}}],[\"个数据字节读入\",{\"1\":{\"792\":1,\"794\":1}}],[\"个数少的在上面\",{\"1\":{\"469\":1}}],[\"个高位将被忽略\",{\"1\":{\"786\":1,\"788\":1}}],[\"个学生\",{\"1\":{\"478\":1}}],[\"个体能够做什么\",{\"1\":{\"445\":1}}],[\"个体的状态信息\",{\"1\":{\"445\":1}}],[\"个体之间通过交互共同组成了这个世界\",{\"1\":{\"445\":1}}],[\"个字节写入此输出流\",{\"1\":{\"786\":1,\"788\":1}}],[\"个字节从指定的\",{\"1\":{\"786\":1,\"788\":1}}],[\"个字节\",{\"1\":{\"153\":1}}],[\"金毛\",{\"1\":{\"444\":2}}],[\"金融\",{\"1\":{\"303\":1}}],[\"黄\",{\"2\":{\"1166\":1,\"1171\":1,\"1176\":1,\"1181\":1}}],[\"黄色\",{\"1\":{\"444\":2,\"491\":1}}],[\"黄白色\",{\"1\":{\"444\":2}}],[\"黄杰\",{\"1\":{\"209\":1}}],[\"柯基\",{\"1\":{\"444\":2}}],[\"萨摩耶\",{\"1\":{\"444\":2}}],[\"斐波那契\",{\"1\":{\"442\":1}}],[\"既耗时\",{\"1\":{\"741\":2}}],[\"既可以是电动车\",{\"1\":{\"599\":1}}],[\"既可以访问静态成员的\",{\"1\":{\"475\":1}}],[\"既不会被继承\",{\"1\":{\"566\":1}}],[\"既占用空间效率还低\",{\"1\":{\"442\":1}}],[\"既然需要重写equals方法\",{\"1\":{\"674\":1}}],[\"既然有需求\",{\"1\":{\"662\":1}}],[\"既然有重复\",{\"1\":{\"519\":1}}],[\"既然定义内部类\",{\"1\":{\"622\":1}}],[\"既然是比较对象相等\",{\"1\":{\"672\":1}}],[\"既然是定义了一个类\",{\"1\":{\"608\":1}}],[\"既然是赋值\",{\"1\":{\"334\":1,\"345\":1}}],[\"既然已经成为了成员\",{\"1\":{\"607\":1}}],[\"既然子类有最大的控制权限\",{\"1\":{\"537\":1}}],[\"既然不需要对象\",{\"1\":{\"510\":1}}],[\"既然所有的方法\",{\"1\":{\"510\":1}}],[\"既然必须在第一行\",{\"1\":{\"466\":1}}],[\"既然this指向当前对象\",{\"1\":{\"462\":1}}],[\"既然this已经指向当前对象\",{\"1\":{\"461\":1}}],[\"既然类是模板\",{\"1\":{\"446\":1}}],[\"既然引用数据类型具有默认初始化\",{\"1\":{\"408\":1}}],[\"既然都转换\",{\"1\":{\"389\":1}}],[\"既然都没有编译进二进制字节码文件\",{\"1\":{\"334\":1}}],[\"既然return已经将方法结束了\",{\"1\":{\"378\":1}}],[\"既然方法结束了\",{\"1\":{\"378\":1}}],[\"既然myisam不支持事务\",{\"1\":{\"228\":1}}],[\"阶乘的结果\",{\"1\":{\"442\":1}}],[\"阶乘的结果就需要知道\",{\"1\":{\"442\":1}}],[\"阶码\",{\"1\":{\"323\":1}}],[\"观察这样的一个代码\",{\"1\":{\"442\":1}}],[\"掘金\",{\"1\":{\"442\":1}}],[\"百度\",{\"1\":{\"442\":1}}],[\"百度查找将string转换成int的方法\",{\"1\":{\"352\":1}}],[\"热知识\",{\"1\":{\"442\":1}}],[\"产生原因\",{\"0\":{\"853\":1}}],[\"产生的原因\",{\"1\":{\"801\":1}}],[\"产生一个描述错误的对象\",{\"1\":{\"749\":1}}],[\"产生栈溢出错误的原因在于\",{\"1\":{\"442\":1}}],[\"产生问题的代码行数\",{\"1\":{\"410\":1}}],[\"报错\",{\"1\":{\"939\":2}}],[\"报错递归栈溢出错误\",{\"1\":{\"442\":1}}],[\"报错了\",{\"1\":{\"214\":1}}],[\"递归\",{\"1\":{\"776\":1}}],[\"递归输出某个目录下的所有java文件\",{\"1\":{\"776\":2}}],[\"递归是一把伤人亦伤己的利器\",{\"1\":{\"442\":1}}],[\"递归是方法自我调用的过程\",{\"1\":{\"442\":1}}],[\"递归很危险\",{\"1\":{\"442\":1}}],[\"递归会非常好用\",{\"1\":{\"442\":1}}],[\"递归体\",{\"1\":{\"442\":1}}],[\"递归出口\",{\"1\":{\"442\":3}}],[\"递归的思想很符合人的思维\",{\"1\":{\"442\":1}}],[\"递归的代码会非常简洁\",{\"1\":{\"442\":1}}],[\"递归的深度也不能超过栈空间的大小\",{\"1\":{\"442\":1}}],[\"递归的使用有很多限制\",{\"1\":{\"442\":1}}],[\"递归的定义\",{\"0\":{\"442\":1}}],[\"帕斯卡\",{\"1\":{\"441\":1}}],[\"现有collection里面有\",{\"1\":{\"955\":1}}],[\"现有的异常体系不满足需求\",{\"1\":{\"761\":1}}],[\"现代操作系统\",{\"1\":{\"828\":1}}],[\"现实很骨感\",{\"1\":{\"595\":1}}],[\"现实中存在的个体\",{\"1\":{\"445\":1}}],[\"现已遗失\",{\"1\":{\"441\":1}}],[\"现在就是想忽略掉1\",{\"1\":{\"1203\":1}}],[\"现在需求方需要一个数据\",{\"1\":{\"1019\":1}}],[\"现在需要统计\",{\"1\":{\"392\":1}}],[\"现在需要根据条件来预测一下\",{\"1\":{\"263\":1}}],[\"现在需要怎么写\",{\"1\":{\"136\":1}}],[\"现在落在新数组什么位置\",{\"1\":{\"1013\":1}}],[\"现在使用自定义的类\",{\"1\":{\"1009\":1}}],[\"现在的迭代器和数据\",{\"1\":{\"955\":2}}],[\"现在的需求是\",{\"1\":{\"519\":1}}],[\"现在collection中有\",{\"1\":{\"953\":1}}],[\"现在让你判断一下\",{\"1\":{\"951\":1}}],[\"现在转学走了一个同学\",{\"1\":{\"950\":1}}],[\"现在想访问\",{\"1\":{\"948\":1}}],[\"现在想找有哪些同学学了java\",{\"1\":{\"184\":1}}],[\"现在泛型来说\",{\"1\":{\"937\":1}}],[\"现在假设有3个窗口售票\",{\"1\":{\"851\":2}}],[\"现在只需要双方都遵循一定的通信规则\",{\"1\":{\"885\":1}}],[\"现在只需要\",{\"1\":{\"699\":1}}],[\"现在不用管它\",{\"1\":{\"687\":1}}],[\"现在你已经大概知道\",{\"1\":{\"679\":1}}],[\"现在还剩下\",{\"1\":{\"469\":2}}],[\"现在做如下解释\",{\"1\":{\"452\":1}}],[\"现在先了解一下基本使用\",{\"1\":{\"417\":1}}],[\"现在默认为public\",{\"1\":{\"382\":1}}],[\"现在有乒乓球运动员和篮球运动员\",{\"1\":{\"601\":1}}],[\"现在有三个需求\",{\"1\":{\"380\":1,\"387\":1}}],[\"现在有一个图书信息表\",{\"1\":{\"153\":2}}],[\"现在有一个学生表\",{\"1\":{\"153\":1,\"158\":1}}],[\"现在我规定一个整数值1对应字符\",{\"1\":{\"324\":1}}],[\"现在我们已经对类加载很熟悉了\",{\"1\":{\"662\":1}}],[\"现在我们有了新需求\",{\"1\":{\"595\":1}}],[\"现在我们直接创建子类对象\",{\"1\":{\"548\":1}}],[\"现在我们学习了继承的概念\",{\"1\":{\"540\":1}}],[\"现在我们需要创建以下对象\",{\"1\":{\"463\":1}}],[\"现在我们需要找\",{\"1\":{\"137\":1}}],[\"现在我们要根据一个类来创建它的对象\",{\"1\":{\"456\":1}}],[\"现在我们知道了对象对程序世界的重要性\",{\"1\":{\"446\":1}}],[\"现在我们使用数组这个容器\",{\"1\":{\"420\":1}}],[\"现在我们就来实现它\",{\"1\":{\"308\":1}}],[\"现在安卓开发使用一种类java的语言的kotlin\",{\"1\":{\"303\":1}}],[\"现在企业都倾向于使用使用vue\",{\"1\":{\"303\":1}}],[\"现在传入了一个品牌\",{\"1\":{\"263\":1}}],[\"现在在数据库里面\",{\"1\":{\"208\":1}}],[\"现在zs要给ls转账\",{\"1\":{\"208\":1}}],[\"现在即使再去改库的字符集\",{\"1\":{\"157\":1}}],[\"现在要查看一个机器的cpu和内存\",{\"1\":{\"147\":1}}],[\"现在\",{\"1\":{\"136\":1,\"139\":1,\"666\":1,\"694\":1,\"1013\":1}}],[\"现在写回了一张图片\",{\"1\":{\"123\":1}}],[\"奇怪的方式\",{\"1\":{\"433\":1}}],[\"奇数方法返回false\",{\"1\":{\"386\":1}}],[\"仍先明确以下两点\",{\"1\":{\"626\":1}}],[\"仍指向原先的数组\",{\"1\":{\"426\":1}}],[\"仍然是单线程的\",{\"1\":{\"833\":1}}],[\"仍然是一维数组\",{\"1\":{\"430\":1}}],[\"仍然选择调用父类默认实现\",{\"1\":{\"699\":1}}],[\"仍然使用idea快捷键alt\",{\"1\":{\"669\":1}}],[\"仍然要写在局部位置\",{\"1\":{\"653\":1}}],[\"仍然定义在局部位置\",{\"1\":{\"651\":1}}],[\"仍然用外部类类名\",{\"1\":{\"639\":1}}],[\"仍然建议私有化\",{\"1\":{\"622\":1}}],[\"仍然建议每位同学弄懂它\",{\"1\":{\"323\":1}}],[\"仍然在方法栈帧中创建存储\",{\"1\":{\"569\":1}}],[\"仍然可以使用super关键字去访问到\",{\"1\":{\"559\":1}}],[\"仍然会死循环\",{\"1\":{\"362\":1}}],[\"仍然会存在数据失真的问题\",{\"1\":{\"345\":1}}],[\"仍然属于强转\",{\"1\":{\"345\":1}}],[\"仍然能够通过注释很快理解代码\",{\"1\":{\"319\":1}}],[\"证明java只有值传递\",{\"1\":{\"426\":1}}],[\"证明java值传递\",{\"0\":{\"426\":1}}],[\"证书颁发者\",{\"1\":{\"125\":1}}],[\"证书\",{\"1\":{\"125\":1}}],[\"检测到流末尾或者抛出异常前\",{\"1\":{\"792\":1,\"794\":1}}],[\"检索数据\",{\"1\":{\"420\":1}}],[\"检查用户名和密码是否正确\",{\"1\":{\"1131\":1}}],[\"检查是否没有匹配元素\",{\"1\":{\"1045\":1}}],[\"检查是否所有元素都匹配\",{\"1\":{\"1044\":1}}],[\"检查流到最后的数据\",{\"1\":{\"1043\":1}}],[\"检查数组位置上是否有键值对\",{\"1\":{\"1016\":1}}],[\"检查\",{\"1\":{\"972\":1}}],[\"检查对集合容器的插入\",{\"1\":{\"938\":1}}],[\"检查左操作数的值是否小于或等于右操作数的值\",{\"1\":{\"346\":1}}],[\"检查左操作数的值是否小于右操作数的值\",{\"1\":{\"346\":1}}],[\"检查左操作数的值是否大于或等于右操作数的值\",{\"1\":{\"346\":1}}],[\"检查左操作数的值是否大于右操作数的值\",{\"1\":{\"346\":1}}],[\"检查如果两个操作数的值是否相等\",{\"1\":{\"346\":2}}],[\"工号\",{\"1\":{\"594\":1}}],[\"工号以及工资\",{\"1\":{\"594\":2}}],[\"工资以及奖金\",{\"1\":{\"594\":1}}],[\"工资在10k\",{\"1\":{\"517\":2}}],[\"工资\",{\"1\":{\"517\":2}}],[\"工具类\",{\"1\":{\"478\":1,\"510\":1}}],[\"工程中也会需要存放大量数据\",{\"1\":{\"420\":1}}],[\"工作区中的变化\",{\"1\":{\"1193\":1}}],[\"工作区\",{\"1\":{\"1182\":1}}],[\"工作中\",{\"1\":{\"1019\":1}}],[\"工作中一般使用foreach居多\",{\"1\":{\"956\":1}}],[\"工作中的作用\",{\"0\":{\"951\":1}}],[\"工作中常用的\",{\"1\":{\"799\":1}}],[\"工作\",{\"1\":{\"688\":2,\"689\":1,\"951\":1}}],[\"工作用到更多一些\",{\"1\":{\"264\":1}}],[\"工作过程需要的数据库知识\",{\"1\":{\"212\":1}}],[\"工作过程中的一般使用步骤\",{\"1\":{\"1204\":1}}],[\"工作过程中\",{\"1\":{\"150\":1}}],[\"详解三次握手和四次挥手\",{\"1\":{\"908\":1}}],[\"详细去讲\",{\"1\":{\"417\":1}}],[\"详情容器\",{\"1\":{\"57\":1}}],[\"附一个长度为0的数组的经典用途\",{\"1\":{\"413\":1}}],[\"异步任务\",{\"1\":{\"880\":1}}],[\"异步\",{\"1\":{\"828\":2}}],[\"异常处理\",{\"1\":{\"1077\":1}}],[\"异常处理体系当中\",{\"1\":{\"760\":1}}],[\"异常处理器\",{\"1\":{\"754\":3}}],[\"异常策略选择\",{\"0\":{\"759\":1}}],[\"异常对象\",{\"1\":{\"757\":1,\"764\":1}}],[\"异常对象的主要作用是描述程序运行出现不正常情况时各种信息\",{\"1\":{\"410\":1}}],[\"异常列表\",{\"1\":{\"756\":2}}],[\"异常类型3\",{\"1\":{\"752\":1}}],[\"异常类型2\",{\"1\":{\"752\":1,\"756\":1}}],[\"异常类型1\",{\"1\":{\"752\":1,\"756\":1}}],[\"异常类型\",{\"1\":{\"752\":1,\"754\":3}}],[\"异常类型名\",{\"1\":{\"749\":1}}],[\"异常原因\",{\"1\":{\"749\":1}}],[\"异常体系与分类\",{\"0\":{\"747\":1}}],[\"异常\",{\"0\":{\"745\":1},\"1\":{\"563\":1}}],[\"异常的名称\",{\"1\":{\"410\":1}}],[\"异常的简单介绍\",{\"0\":{\"410\":1}}],[\"异常指的是\",{\"1\":{\"410\":1}}],[\"异常我们会在后续的课程中\",{\"1\":{\"410\":1}}],[\"异或\",{\"1\":{\"348\":2}}],[\"举个例子\",{\"1\":{\"885\":1,\"1090\":1,\"1145\":2,\"1158\":1}}],[\"举个例子来说\",{\"1\":{\"408\":1}}],[\"举一个例子来说\",{\"1\":{\"725\":1}}],[\"举例2\",{\"1\":{\"478\":1}}],[\"举例1\",{\"1\":{\"478\":1}}],[\"举例来说\",{\"1\":{\"234\":1,\"510\":1,\"937\":1}}],[\"举例\",{\"1\":{\"153\":1,\"155\":1,\"158\":1,\"159\":1,\"160\":1,\"684\":1,\"738\":2,\"796\":1,\"800\":1,\"816\":1,\"817\":1,\"819\":1,\"820\":1,\"826\":1,\"828\":1,\"924\":1,\"1130\":1}}],[\"墙内的人却想出去\",{\"1\":{\"407\":1}}],[\"墙外的人想进来\",{\"1\":{\"407\":1}}],[\"孤零零\",{\"1\":{\"407\":1}}],[\"栈\",{\"1\":{\"968\":1,\"970\":1,\"974\":1,\"977\":1}}],[\"栈和队列\",{\"1\":{\"947\":1}}],[\"栈溢出\",{\"1\":{\"747\":1}}],[\"栈溢出错误警告\",{\"1\":{\"442\":1}}],[\"栈溢出错误\",{\"1\":{\"442\":1}}],[\"栈内存不会溢出\",{\"1\":{\"442\":1}}],[\"栈上的局部变量的生命周期和栈帧保持一致\",{\"1\":{\"407\":1}}],[\"栈上的局部变量没有默认值\",{\"1\":{\"407\":1}}],[\"栈上的引用通过存储对象的地址\",{\"1\":{\"405\":1}}],[\"栈上存储的是局部变量\",{\"1\":{\"407\":1}}],[\"栈中只有处于栈顶的栈帧才会生效\",{\"1\":{\"403\":1}}],[\"示意图\",{\"1\":{\"955\":2}}],[\"示意图如下\",{\"1\":{\"403\":1}}],[\"示例图\",{\"1\":{\"947\":1}}],[\"示例\",{\"1\":{\"201\":1,\"924\":1}}],[\"堆一样\",{\"1\":{\"925\":1}}],[\"堆内存是线程共享的\",{\"1\":{\"925\":1}}],[\"堆内存的大小是可以调节的\",{\"1\":{\"925\":1}}],[\"堆内存用来存储对象\",{\"1\":{\"403\":1}}],[\"堆溢出\",{\"1\":{\"747\":1}}],[\"堆中的对象的地址返回给p\",{\"1\":{\"467\":1}}],[\"堆中分配空间\",{\"1\":{\"467\":1}}],[\"堆中\",{\"1\":{\"430\":1}}],[\"堆上的这个类所对应的字节码文件对象\",{\"1\":{\"477\":1}}],[\"堆上的对象变成垃圾后\",{\"1\":{\"407\":1}}],[\"堆上的对象使用完毕后\",{\"1\":{\"407\":1}}],[\"堆上对象中的变量具有默认值\",{\"1\":{\"407\":1}}],[\"堆上存储的是new出来的东西\",{\"1\":{\"407\":1}}],[\"堆和栈中内容的区别\",{\"0\":{\"407\":1}}],[\"堆和jvm栈\",{\"1\":{\"403\":1}}],[\"堆是jvm内存中最大的一块\",{\"1\":{\"403\":1}}],[\"堆\",{\"1\":{\"403\":2}}],[\"划分\",{\"0\":{\"403\":1}}],[\"销毁时间等特点皆有不同\",{\"1\":{\"402\":1}}],[\"销户\",{\"1\":{\"240\":1}}],[\"决定这个键值对在数组中的存储位置\",{\"1\":{\"680\":1}}],[\"决定\",{\"1\":{\"398\":1}}],[\"线程不安全\",{\"1\":{\"987\":1,\"991\":1}}],[\"线程安全的都被干掉\",{\"1\":{\"987\":1}}],[\"线程安全问题\",{\"1\":{\"969\":1}}],[\"线程安全是没问题了\",{\"1\":{\"969\":1}}],[\"线程安全\",{\"1\":{\"969\":1,\"1020\":1}}],[\"线程共享\",{\"1\":{\"925\":1}}],[\"线程共享进程资源\",{\"1\":{\"826\":1}}],[\"线程私有\",{\"1\":{\"925\":2}}],[\"线程隔离\",{\"1\":{\"925\":2}}],[\"线程用其安排以后在后台线程中执行的任务\",{\"1\":{\"883\":1}}],[\"线程数量固定\",{\"1\":{\"880\":1}}],[\"线程数量可变\",{\"1\":{\"880\":1}}],[\"线程工具类\",{\"1\":{\"880\":1}}],[\"线程因为sleep方法而处于阻塞状态的时候\",{\"1\":{\"873\":1}}],[\"线程必须获得锁对象\",{\"1\":{\"868\":2}}],[\"线程状态的转换\",{\"0\":{\"848\":1}}],[\"线程会处于阻塞状态\",{\"1\":{\"846\":1}}],[\"线程执行了start\",{\"1\":{\"846\":1}}],[\"线程的几种状态\",{\"0\":{\"845\":1}}],[\"线程的执行时间由系统决定\",{\"1\":{\"835\":1}}],[\"线程的执行时间由线程本身决定\",{\"1\":{\"835\":1}}],[\"线程中断stop\",{\"0\":{\"843\":1}}],[\"线程分类\",{\"1\":{\"842\":1}}],[\"线程礼让\",{\"1\":{\"841\":1}}],[\"线程礼让yield\",{\"0\":{\"841\":1}}],[\"线程加入\",{\"1\":{\"840\":1}}],[\"线程合并join\",{\"0\":{\"840\":1}}],[\"线程休眠\",{\"1\":{\"839\":1}}],[\"线程休眠sleep\",{\"0\":{\"839\":1}}],[\"线程优先级并非完全没有用\",{\"1\":{\"838\":1}}],[\"线程可以具有的最低优先级\",{\"1\":{\"838\":1}}],[\"线程可以具有的最高优先级\",{\"1\":{\"838\":1}}],[\"线程依赖于进程而存在\",{\"1\":{\"826\":1}}],[\"线程是cpu进行资源调度与分配的基本单位\",{\"1\":{\"826\":1}}],[\"线程\",{\"1\":{\"826\":1,\"830\":1}}],[\"线程池的使用\",{\"1\":{\"880\":1}}],[\"线程池\",{\"0\":{\"879\":1},\"1\":{\"213\":1}}],[\"线程池有什么好处\",{\"1\":{\"213\":1}}],[\"线性表\",{\"1\":{\"394\":1,\"947\":1,\"957\":1}}],[\"专注于开发和部署企业级的分布式应用程序\",{\"1\":{\"1077\":1}}],[\"专门用来接收消息\",{\"1\":{\"895\":1}}],[\"专门用来发送消息\",{\"1\":{\"895\":1}}],[\"专门提供给外界使用的\",{\"1\":{\"510\":1}}],[\"专门针对数字0\",{\"1\":{\"348\":1}}],[\"专业的术语称之为下标或者索引\",{\"1\":{\"393\":1}}],[\"袋子\",{\"1\":{\"392\":1}}],[\"购物需要\",{\"1\":{\"392\":1}}],[\"购房协议是指在购房交易中\",{\"1\":{\"109\":1}}],[\"购房协议\",{\"0\":{\"109\":1},\"1\":{\"106\":1}}],[\"某某bug的修改\",{\"1\":{\"1195\":1}}],[\"某类名或接口名的子类的类体\",{\"1\":{\"647\":1}}],[\"某电商系统后台\",{\"1\":{\"601\":1}}],[\"某个文件\",{\"1\":{\"1183\":1}}],[\"某个普通类实现一个接口往往会报错\",{\"1\":{\"696\":1}}],[\"某个类的对象的集合\",{\"1\":{\"679\":1}}],[\"某个类的类加载在一次程序运行过程中\",{\"1\":{\"663\":1}}],[\"某个类的class对象是jvm在类加载某个类的同时\",{\"1\":{\"663\":1}}],[\"某个类的class对象当中\",{\"1\":{\"662\":1}}],[\"某个类的运行时类对象\",{\"1\":{\"662\":1}}],[\"某个类的某个静态成员变量只有一份\",{\"1\":{\"474\":1}}],[\"某个类本身就是另一个类的一部分\",{\"1\":{\"623\":1}}],[\"某个类在一开始并不被jvm\",{\"1\":{\"456\":1}}],[\"某个引用修改了对象的状态\",{\"1\":{\"456\":1}}],[\"某个二维数组\",{\"1\":{\"440\":1}}],[\"某一门课程的平均成绩\",{\"1\":{\"392\":1}}],[\"某些元素\",{\"1\":{\"1043\":1}}],[\"某些程序员会在接口的所在位置\",{\"1\":{\"598\":1}}],[\"某些程序员会在接口的命名前加大写字母\",{\"1\":{\"598\":1}}],[\"某些整型在自动转换成浮点型时\",{\"1\":{\"338\":1}}],[\"某些字段分组\",{\"1\":{\"167\":1}}],[\"呢\",{\"1\":{\"389\":1,\"575\":1}}],[\"近似\",{\"1\":{\"544\":1}}],[\"近似看做super指向当前子类对象的父类对象\",{\"1\":{\"541\":1}}],[\"近似看成一个父类对象\",{\"1\":{\"541\":1}}],[\"近\",{\"1\":{\"389\":2}}],[\"距离\",{\"1\":{\"389\":1}}],[\"机制时\",{\"1\":{\"549\":1,\"556\":1}}],[\"机制\",{\"1\":{\"387\":1,\"703\":1}}],[\"机身内存\",{\"1\":{\"263\":1}}],[\"机身存储\",{\"1\":{\"263\":1}}],[\"半径\",{\"1\":{\"386\":1}}],[\"偶数方法返回true\",{\"1\":{\"386\":1}}],[\"理清操作的是哪个位置\",{\"1\":{\"958\":1}}],[\"理论层面\",{\"0\":{\"877\":1}}],[\"理论层面的状态\",{\"0\":{\"846\":1}}],[\"理论值\",{\"1\":{\"743\":2}}],[\"理论上很快成为垃圾对象\",{\"1\":{\"690\":1}}],[\"理论上来说\",{\"1\":{\"385\":1}}],[\"理想是很美好的\",{\"1\":{\"689\":1}}],[\"理想很美好\",{\"1\":{\"595\":1}}],[\"理解session维护的机制\",{\"1\":{\"1136\":1}}],[\"理解客户端技术和服务器技术之间的区别\",{\"1\":{\"1136\":1}}],[\"理解使用会话技术的原因\",{\"1\":{\"1136\":1}}],[\"理解request\",{\"1\":{\"1102\":1}}],[\"理解泛型的擦除\",{\"1\":{\"935\":1}}],[\"理解泛型的概念及掌握泛型的好处\",{\"1\":{\"935\":1}}],[\"理解泛型在父子继承关系上的表现\",{\"1\":{\"935\":1}}],[\"理解为一种文化符号\",{\"1\":{\"782\":1}}],[\"理解何为对象死亡的\",{\"1\":{\"688\":1}}],[\"理解这句话\",{\"1\":{\"623\":1}}],[\"理解jvm运行时内存\",{\"1\":{\"402\":1}}],[\"理解jvm运行时内存是学习java的基本\",{\"1\":{\"402\":1}}],[\"理解就近原则\",{\"1\":{\"389\":1}}],[\"理解什么是回表\",{\"1\":{\"218\":1}}],[\"理解索引是什么\",{\"1\":{\"218\":1}}],[\"理解连接池是什么\",{\"1\":{\"213\":1}}],[\"理解事务的四大特性\",{\"1\":{\"189\":1}}],[\"静态同步方法的锁对象是字节码文件对象\",{\"1\":{\"857\":1}}],[\"静态同步方法\",{\"0\":{\"857\":1},\"1\":{\"857\":1}}],[\"静态优先级\",{\"1\":{\"837\":1,\"838\":2}}],[\"静态内部类的成员方法中\",{\"1\":{\"632\":1}}],[\"静态内部类的继承与实现和成员内部类并没有太大不同\",{\"1\":{\"624\":1}}],[\"静态内部类内部访问外部类\",{\"0\":{\"627\":1}}],[\"静态内部类对象完全不依赖于部围类对象而存在\",{\"1\":{\"626\":1}}],[\"静态内部类对象不会持有外部类对象引用\",{\"1\":{\"625\":1}}],[\"静态内部类访问外部其他类成员\",{\"0\":{\"630\":1}}],[\"静态内部类访问特点\",{\"0\":{\"626\":1}}],[\"静态内部类访问权限修饰符\",{\"1\":{\"620\":1}}],[\"静态内部类很特殊\",{\"1\":{\"625\":1}}],[\"静态内部类只能继承一个静态内部类\",{\"1\":{\"624\":1}}],[\"静态内部类到底和外部类是什么关系\",{\"1\":{\"623\":1}}],[\"静态内部类和外补类之间本身没有依赖关系\",{\"1\":{\"631\":1}}],[\"静态内部类和外部类之间的类加载\",{\"1\":{\"631\":1}}],[\"静态内部类和外部类就是独立的两个类\",{\"1\":{\"623\":1}}],[\"静态内部类和成员内部类一样\",{\"1\":{\"622\":1}}],[\"静态内部类和局部内部类都属于定义了一个类\",{\"1\":{\"645\":1}}],[\"静态内部类和局部内部类\",{\"1\":{\"608\":1}}],[\"静态内部类\",{\"0\":{\"620\":1},\"1\":{\"608\":1}}],[\"静态代码块执行了\",{\"1\":{\"916\":1}}],[\"静态代码块没有执行\",{\"1\":{\"571\":1}}],[\"静态代码块的代码一定会执行\",{\"1\":{\"546\":1}}],[\"静态代码块的执行\",{\"1\":{\"494\":1}}],[\"静态代码块也经常被用来测试类加载的顺序\",{\"1\":{\"496\":1}}],[\"静态代码块用得不多\",{\"1\":{\"496\":1}}],[\"静态代码块可以近似看成一个\",{\"1\":{\"496\":1}}],[\"静态代码块可以看成是一个在类加载过程中\",{\"1\":{\"494\":1}}],[\"静态代码块在类中的作用\",{\"1\":{\"494\":1}}],[\"静态代码块\",{\"0\":{\"492\":1},\"1\":{\"484\":1,\"494\":1,\"498\":2,\"571\":1,\"612\":1}}],[\"静态变量等数据\",{\"1\":{\"925\":1}}],[\"静态变量可以通过类名调用\",{\"1\":{\"477\":1}}],[\"静态变量随着类的加载而加载\",{\"1\":{\"477\":1}}],[\"静态变量存储于方法区的静态域\",{\"1\":{\"477\":1}}],[\"静态方法引用\",{\"1\":{\"655\":2}}],[\"静态方法中就不存在任何对象了\",{\"1\":{\"640\":1}}],[\"静态方法名\",{\"1\":{\"600\":1,\"655\":2}}],[\"静态方法\",{\"1\":{\"600\":2,\"606\":1,\"612\":1,\"873\":1}}],[\"静态方法在使用现象上\",{\"1\":{\"562\":1}}],[\"静态方法的最主要特点就是\",{\"1\":{\"478\":1}}],[\"静态方法调用的时候\",{\"1\":{\"475\":1}}],[\"静态方法无法直接调用非静态的方法和属性\",{\"1\":{\"475\":1}}],[\"静态成员直接类名点访问\",{\"1\":{\"618\":1}}],[\"静态成员我们先暂时不考虑\",{\"1\":{\"520\":1}}],[\"静态成员和非静态成员的区别就很明显\",{\"1\":{\"477\":1}}],[\"静态成员需要在类加载时期\",{\"1\":{\"476\":1}}],[\"静态成员的访问并不依赖于创建对象\",{\"1\":{\"474\":1}}],[\"静态成员方法\",{\"0\":{\"475\":1},\"1\":{\"473\":1,\"478\":1,\"498\":1}}],[\"静态成员变量和局部变量\",{\"1\":{\"565\":1}}],[\"静态成员变量在父子类中也存在同名的情况\",{\"1\":{\"553\":1}}],[\"静态成员变量的显式赋值\",{\"1\":{\"479\":1}}],[\"静态成员变量的访问\",{\"1\":{\"474\":1}}],[\"静态成员变量属于类\",{\"1\":{\"477\":1}}],[\"静态成员变量属于类的\",{\"1\":{\"474\":1}}],[\"静态成员变量可以通过类名\",{\"1\":{\"474\":1}}],[\"静态成员变量\",{\"0\":{\"474\":1},\"1\":{\"473\":1,\"478\":1,\"568\":1,\"598\":2}}],[\"静态成员\",{\"0\":{\"473\":1},\"1\":{\"592\":1}}],[\"静态初始化很固定地为元素赋值\",{\"1\":{\"434\":1}}],[\"静态初始化一个数组\",{\"1\":{\"409\":2}}],[\"静态初始化和动态初始化叠加使用\",{\"1\":{\"398\":1}}],[\"静态初始化有简写的形式\",{\"1\":{\"397\":1}}],[\"静态初始化指的是\",{\"1\":{\"397\":1}}],[\"静态初始化\",{\"0\":{\"397\":1},\"1\":{\"396\":1,\"434\":1}}],[\"静态的同步方法的锁对象是字节码文件对象\",{\"1\":{\"857\":1}}],[\"静态的方法只能访问静态的\",{\"1\":{\"475\":1}}],[\"静态的\",{\"1\":{\"385\":1}}],[\"静态资源就是我们前端学的内容\",{\"1\":{\"1078\":1}}],[\"静态资源\",{\"1\":{\"126\":1}}],[\"公司将员工分为三类\",{\"1\":{\"594\":1}}],[\"公司正在开发一套员工管理系统\",{\"1\":{\"594\":1}}],[\"公里每小时疾驰\",{\"1\":{\"459\":2}}],[\"公开的\",{\"1\":{\"385\":1}}],[\"公钥解密\",{\"1\":{\"125\":1}}],[\"公钥\",{\"1\":{\"125\":1}}],[\"公钥无法解\",{\"1\":{\"125\":1}}],[\"公钥加密\",{\"1\":{\"125\":3}}],[\"形成一条流水线\",{\"1\":{\"1033\":1}}],[\"形成一种像驼峰一样的凹凸\",{\"1\":{\"316\":1}}],[\"形成了一个环\",{\"1\":{\"976\":1}}],[\"形式来进行分割\",{\"1\":{\"1158\":1}}],[\"形式是不同的\",{\"1\":{\"689\":1}}],[\"形式参数列表\",{\"1\":{\"382\":4,\"422\":1}}],[\"形参一定是那些\",{\"1\":{\"654\":1}}],[\"形参数据类型是引用数据类型时\",{\"1\":{\"641\":1,\"649\":1}}],[\"形参数量和数据类型都相同时\",{\"1\":{\"388\":1}}],[\"形参数量相同时\",{\"1\":{\"388\":1}}],[\"形参数量不同\",{\"1\":{\"388\":1}}],[\"形参如果写一个接口\",{\"1\":{\"603\":1}}],[\"形参如果写一个抽象类\",{\"1\":{\"603\":1}}],[\"形参如果写一个普通类\",{\"1\":{\"603\":1}}],[\"形参用final修饰后\",{\"1\":{\"569\":1}}],[\"形参列表中的数量\",{\"1\":{\"655\":2}}],[\"形参列表中起关键作用的是数据类型\",{\"1\":{\"384\":1}}],[\"形参列表必须保持严格一致\",{\"1\":{\"561\":1}}],[\"形参列表可以为空\",{\"1\":{\"464\":1}}],[\"形参列表\",{\"1\":{\"450\":1,\"464\":1,\"465\":1,\"475\":1,\"481\":1,\"561\":1,\"567\":1,\"591\":1,\"600\":2,\"653\":2,\"654\":1,\"756\":1}}],[\"形参列表还相同的话\",{\"1\":{\"389\":1}}],[\"形参列表不同意味着\",{\"1\":{\"388\":1}}],[\"形参名字无所谓\",{\"1\":{\"655\":2}}],[\"形参名叫什么其实无所谓\",{\"1\":{\"384\":1}}],[\"形参名只是一个标识符\",{\"1\":{\"382\":1}}],[\"形参地名字实际上就是一个代号\",{\"1\":{\"384\":1}}],[\"形参完全可以理解成一个占位符\",{\"1\":{\"382\":1}}],[\"形参中起关键决定性作用的是形参的数据类型\",{\"1\":{\"382\":1}}],[\"形参的名字不同\",{\"1\":{\"388\":1}}],[\"形参的数据类型是可以省略的\",{\"1\":{\"654\":1}}],[\"形参的数据类型的顺序不同\",{\"1\":{\"388\":1}}],[\"形参的数据类型不同\",{\"1\":{\"388\":1}}],[\"形参的作用域仅在方法内部\",{\"1\":{\"382\":1}}],[\"形参的个数不受限\",{\"1\":{\"382\":1}}],[\"形参可以是基本数据类型变量\",{\"1\":{\"382\":1}}],[\"修饰方法表示无法重写的方法\",{\"1\":{\"760\":1}}],[\"修饰变量表示一个常量\",{\"1\":{\"760\":1}}],[\"修饰类\",{\"1\":{\"760\":1}}],[\"修饰符\",{\"1\":{\"756\":1}}],[\"修饰符列表不同\",{\"1\":{\"388\":1}}],[\"修饰符列表不是必须的\",{\"1\":{\"382\":1}}],[\"修饰符列表\",{\"1\":{\"382\":3,\"422\":1,\"450\":1,\"481\":2,\"591\":2}}],[\"修饰\",{\"1\":{\"645\":1}}],[\"修饰的全局常量对象\",{\"1\":{\"719\":1}}],[\"修饰的公共的抽象方法\",{\"1\":{\"598\":1}}],[\"修饰的公共的全局常量\",{\"1\":{\"598\":1}}],[\"修饰的是引用而不是对象\",{\"1\":{\"568\":1}}],[\"修饰引用数类型\",{\"0\":{\"572\":1}}],[\"修饰引用数据类型时\",{\"1\":{\"568\":1}}],[\"修饰静态成员变量\",{\"0\":{\"571\":1}}],[\"修饰成员变量\",{\"0\":{\"570\":1}}],[\"修饰局部变量\",{\"0\":{\"569\":1}}],[\"修饰基本数据类型时\",{\"1\":{\"568\":1}}],[\"修饰学校信息\",{\"1\":{\"478\":1}}],[\"修改了相同的文件\",{\"1\":{\"1201\":1}}],[\"修改了不同的文件\",{\"1\":{\"1201\":1}}],[\"修改了原有集合\",{\"1\":{\"955\":1}}],[\"修改刚刚遍历过的元素位置\",{\"1\":{\"959\":1}}],[\"修改之后需要重新编译运行\",{\"1\":{\"924\":1}}],[\"修改之后的目标文件当不在同一目录的时候\",{\"1\":{\"772\":1}}],[\"修改方法的访问权限\",{\"1\":{\"538\":1}}],[\"修改属性值也是类似的做法\",{\"1\":{\"453\":1}}],[\"修改用户信息\",{\"1\":{\"240\":1}}],[\"修改不需要返回值类型\",{\"1\":{\"235\":1}}],[\"修改标签\",{\"1\":{\"234\":1}}],[\"修改的性能\",{\"1\":{\"171\":1}}],[\"修改的protocal\",{\"1\":{\"139\":1}}],[\"修改\",{\"0\":{\"239\":1},\"1\":{\"171\":2,\"420\":1}}],[\"修改数据的sql\",{\"1\":{\"201\":1}}],[\"修改数据\",{\"0\":{\"160\":1}}],[\"修改数据库\",{\"0\":{\"151\":1}}],[\"修改某列的类型\",{\"1\":{\"156\":1}}],[\"修改表字符集\",{\"1\":{\"156\":1}}],[\"修改表名\",{\"1\":{\"156\":1}}],[\"修改表\",{\"0\":{\"156\":1}}],[\"修改指定库的\",{\"1\":{\"151\":1}}],[\"修改和分发postgresql\",{\"1\":{\"143\":1}}],[\"修改操作了解即可\",{\"1\":{\"140\":2}}],[\"修改logging\",{\"1\":{\"139\":1}}],[\"核心值\",{\"1\":{\"1144\":2}}],[\"核心\",{\"0\":{\"1100\":1}}],[\"核心思想\",{\"1\":{\"818\":1}}],[\"核心区别\",{\"1\":{\"813\":1}}],[\"核心需求就是\",{\"1\":{\"380\":1}}],[\"核心类库\",{\"1\":{\"304\":1}}],[\"控制台里打印hello\",{\"1\":{\"1085\":2}}],[\"控制台打印张三\",{\"1\":{\"669\":1}}],[\"控制台打印李四\",{\"1\":{\"669\":1}}],[\"控制台输出的结果\",{\"1\":{\"1112\":1}}],[\"控制台输出各种数据类型\",{\"1\":{\"390\":1}}],[\"控制台输出13次\",{\"1\":{\"377\":1}}],[\"控制台输出7次\",{\"1\":{\"377\":1}}],[\"控制台输出2次\",{\"1\":{\"377\":1}}],[\"控制语句\",{\"1\":{\"342\":1}}],[\"延续\",{\"1\":{\"377\":1}}],[\"了不了解vector\",{\"1\":{\"969\":1}}],[\"了\",{\"1\":{\"376\":1,\"427\":1}}],[\"了解企业中分支的使用方式\",{\"1\":{\"1182\":1}}],[\"了解特殊的响应头\",{\"1\":{\"1102\":1}}],[\"了解xml配置方式\",{\"1\":{\"1075\":1}}],[\"了解你的潜力\",{\"1\":{\"1020\":1}}],[\"了解你的基础\",{\"1\":{\"1020\":1}}],[\"了解你解问题的思路\",{\"1\":{\"1020\":1}}],[\"了解这个吗\",{\"1\":{\"1020\":1}}],[\"了解这些后\",{\"1\":{\"431\":1}}],[\"了解hashmap和hashtable吗\",{\"1\":{\"1020\":1}}],[\"了解set子类的实现方式\",{\"1\":{\"979\":1}}],[\"了解blockingqueue是什么\",{\"1\":{\"970\":1}}],[\"了解arraydeque的初始化容量及扩容策略\",{\"1\":{\"970\":1}}],[\"了解arraydeque的循环数组\",{\"1\":{\"970\":1}}],[\"了解deque的结构\",{\"1\":{\"970\":1}}],[\"了解queue两组增删查api及区别\",{\"1\":{\"970\":1}}],[\"了解collection接口的作用\",{\"1\":{\"951\":1}}],[\"了解该类型\",{\"1\":{\"662\":1}}],[\"了解多态的优缺点\",{\"1\":{\"573\":1}}],[\"了解多表设计\",{\"1\":{\"140\":1}}],[\"了解和使用的地方\",{\"1\":{\"510\":1}}],[\"了解类加载\",{\"1\":{\"454\":1}}],[\"了解类是一种自定义数据类型\",{\"1\":{\"454\":1}}],[\"了解即可\",{\"1\":{\"254\":1,\"351\":1,\"598\":1,\"938\":2}}],[\"了解了mysql的结构之后\",{\"1\":{\"221\":1}}],[\"了解jdbc是什么\",{\"1\":{\"189\":1}}],[\"了解数据库设计三大范式\",{\"1\":{\"140\":1}}],[\"了解关系型数据库\",{\"1\":{\"140\":1}}],[\"了解\",{\"0\":{\"137\":1,\"185\":1,\"348\":1,\"617\":1,\"618\":1,\"686\":1,\"719\":1,\"843\":1,\"944\":1,\"1015\":1,\"1097\":1,\"1115\":1,\"1121\":1},\"1\":{\"343\":1,\"643\":1,\"1026\":1}}],[\"了解tomcat是什么\",{\"1\":{\"105\":1}}],[\"触发某个条件\",{\"1\":{\"375\":1}}],[\"至今尚未启动的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"至于java8之后提供的新日期类\",{\"1\":{\"721\":1}}],[\"至于说到原理\",{\"1\":{\"494\":1}}],[\"至于其他的我不关系\",{\"1\":{\"128\":1}}],[\"至少应该解决我们以下三个痛点\",{\"1\":{\"380\":1}}],[\"至此\",{\"1\":{\"375\":1}}],[\"跳过1个元素\",{\"1\":{\"1039\":1}}],[\"跳过前n个元素\",{\"1\":{\"1039\":2}}],[\"跳过\",{\"0\":{\"1039\":1}}],[\"跳转\",{\"1\":{\"1125\":1}}],[\"跳转回new对象构造器\",{\"1\":{\"489\":2}}],[\"跳转回this语句要指示执行的构造器\",{\"1\":{\"489\":1}}],[\"跳转控制关键字\",{\"0\":{\"375\":1}}],[\"跳回执行this构造器代码\",{\"1\":{\"468\":1}}],[\"跳到下一个tab位置\",{\"1\":{\"356\":1}}],[\"打算以ccc\",{\"1\":{\"1146\":1}}],[\"打包方式\",{\"0\":{\"1080\":1}}],[\"打断\",{\"1\":{\"376\":1}}],[\"打印user对象\",{\"1\":{\"944\":1}}],[\"打印数据\",{\"1\":{\"844\":2}}],[\"打印数组元素即可\",{\"1\":{\"415\":1}}],[\"打印之前判断一下是否中断\",{\"1\":{\"844\":2}}],[\"打印10个数\",{\"1\":{\"844\":2}}],[\"打印1个\",{\"1\":{\"844\":2}}],[\"打印3个数\",{\"1\":{\"842\":1}}],[\"打印相关\",{\"1\":{\"824\":1}}],[\"打印流特点\",{\"1\":{\"820\":1}}],[\"打印流\",{\"0\":{\"818\":1}}],[\"打印到控制台上\",{\"1\":{\"749\":1}}],[\"打印这个对象\",{\"1\":{\"724\":1}}],[\"打印\",{\"1\":{\"668\":1,\"730\":1,\"737\":1,\"872\":2,\"894\":2,\"895\":1,\"903\":1,\"904\":1,\"924\":1,\"936\":1}}],[\"打印基本信息的成员方法\",{\"1\":{\"517\":1}}],[\"打印对象名会打印地址值\",{\"1\":{\"668\":1}}],[\"打印对象\",{\"1\":{\"460\":1}}],[\"打印出来仍然是null\",{\"1\":{\"408\":1}}],[\"打印变量名\",{\"1\":{\"406\":1}}],[\"打印变量名就是该变量具体的数值\",{\"1\":{\"406\":1}}],[\"打印变量名区别\",{\"1\":{\"406\":1}}],[\"打印九九乘法表\",{\"1\":{\"374\":1}}],[\"打印以下图案\",{\"1\":{\"370\":1}}],[\"打印的结果就是\",{\"1\":{\"367\":1}}],[\"打开开发者工具\",{\"1\":{\"1140\":1}}],[\"打开jdk的安装目录\",{\"1\":{\"307\":1}}],[\"打开一个\",{\"1\":{\"262\":1}}],[\"打开命令行工具\",{\"1\":{\"307\":1}}],[\"打开命令行\",{\"1\":{\"187\":2}}],[\"打开tomcat\",{\"1\":{\"139\":1}}],[\"打开软件\",{\"1\":{\"115\":1}}],[\"纸张的厚度开始超过珠峰\",{\"1\":{\"363\":1}}],[\"珠峰的高度是8848m\",{\"1\":{\"363\":1}}],[\"习惯上使用i\",{\"1\":{\"362\":1}}],[\"几点见面\",{\"1\":{\"1137\":3}}],[\"几种实现方式\",{\"1\":{\"650\":1}}],[\"几乎就只有final\",{\"1\":{\"592\":1}}],[\"几乎包含了世界上绝大多数非英语国家的文字字符\",{\"1\":{\"315\":1}}],[\"几个使用的注意事项\",{\"1\":{\"362\":1}}],[\"固定数值\",{\"1\":{\"837\":1}}],[\"固定值的判断\",{\"1\":{\"360\":1}}],[\"固定写法\",{\"1\":{\"153\":1}}],[\"针对于上面的请求\",{\"1\":{\"1145\":1}}],[\"针对结果是固定类型\",{\"1\":{\"360\":1}}],[\"针对结果是布尔类型的判断\",{\"1\":{\"360\":1}}],[\"针对服务器这部分\",{\"1\":{\"128\":1}}],[\"依赖本地方法实现创建对象\",{\"1\":{\"692\":1}}],[\"依赖类中的equals方法\",{\"1\":{\"684\":1}}],[\"依赖于本地方法的执行\",{\"1\":{\"495\":1}}],[\"依赖于类加载只有一次的原理\",{\"1\":{\"495\":1}}],[\"依赖于java成熟的类库和框架体系\",{\"1\":{\"303\":1}}],[\"依然主要从以下几个角度分析\",{\"1\":{\"621\":1}}],[\"依次比较\",{\"1\":{\"418\":1}}],[\"依次比较case的取值\",{\"1\":{\"359\":1}}],[\"逐步通过反射能够解决一些通用问题\",{\"1\":{\"1102\":1}}],[\"逐位字符也一样\",{\"1\":{\"739\":1}}],[\"逐一比较返回第一个不一样字符的编码值的差值\",{\"1\":{\"739\":1}}],[\"逐一比对key\",{\"1\":{\"680\":1}}],[\"逐个部分简化\",{\"1\":{\"654\":1}}],[\"逐个解释用途\",{\"1\":{\"361\":1}}],[\"逐个解释语法\",{\"1\":{\"359\":1}}],[\"逐渐掌握常见关键字的作用与使用\",{\"1\":{\"310\":1}}],[\"哪个类哪个方法哪一行报错了\",{\"1\":{\"749\":1}}],[\"哪个线程发生了中断\",{\"1\":{\"844\":3}}],[\"哪个线程调用了join\",{\"1\":{\"840\":1}}],[\"哪个线程等待\",{\"1\":{\"840\":1}}],[\"哪个线程执行\",{\"1\":{\"835\":1}}],[\"哪个线程抢到了cpu的执行\",{\"1\":{\"835\":1}}],[\"哪个线程\",{\"1\":{\"749\":1}}],[\"哪个condition结果是true\",{\"1\":{\"358\":1}}],[\"哪些具体类\",{\"1\":{\"601\":1}}],[\"哪些接口\",{\"1\":{\"601\":1}}],[\"哪些地方应该使用\",{\"1\":{\"510\":1}}],[\"哪些地方不要触碰\",{\"1\":{\"510\":1}}],[\"哪一行能正常运行\",{\"1\":{\"573\":2}}],[\"哪行不能\",{\"1\":{\"573\":1}}],[\"哪里完全不会指向null\",{\"1\":{\"412\":1}}],[\"哪句会编译失败\",{\"1\":{\"341\":1}}],[\"括号中的条件\",{\"1\":{\"358\":1}}],[\"括号里面写有哪些列\",{\"1\":{\"153\":1}}],[\"撇号\",{\"1\":{\"356\":1}}],[\"翻页等等字符\",{\"1\":{\"355\":1}}],[\"猜数字小游戏\",{\"1\":{\"354\":1}}],[\"密码一定要记得\",{\"1\":{\"1190\":1}}],[\"密码长度6位\",{\"1\":{\"517\":1}}],[\"密码\",{\"1\":{\"354\":1,\"517\":1,\"680\":1,\"1190\":1,\"1203\":1}}],[\"密码加密的文章\",{\"0\":{\"48\":1}}],[\"混用两种scanner方法\",{\"1\":{\"353\":1}}],[\"混合加密\",{\"1\":{\"125\":1}}],[\"知乎\",{\"1\":{\"442\":1,\"680\":2}}],[\"知不知道原因是无所谓的\",{\"1\":{\"352\":1}}],[\"知道即可\",{\"1\":{\"729\":2}}],[\"知道重写的原则后\",{\"1\":{\"683\":1}}],[\"知道什么是全类名\",{\"1\":{\"498\":1}}],[\"知道杨辉三角是一个二维数组后\",{\"1\":{\"441\":1}}],[\"知道引用数据类型与基本数据类型的区别\",{\"1\":{\"391\":1}}],[\"知道使用的场景\",{\"1\":{\"357\":1}}],[\"知道是怎么回事\",{\"1\":{\"283\":1}}],[\"知道有这个东西就可以了\",{\"1\":{\"156\":1}}],[\"逗号\",{\"1\":{\"350\":1,\"717\":1}}],[\"点操作符\",{\"1\":{\"350\":1}}],[\"点击test有版本\",{\"1\":{\"1205\":1}}],[\"点击esc\",{\"1\":{\"1201\":1}}],[\"点击i\",{\"1\":{\"1201\":1}}],[\"点击新建按钮\",{\"1\":{\"307\":1}}],[\"点击高级\",{\"1\":{\"307\":1}}],[\"点击form表单的提交按钮\",{\"1\":{\"115\":1}}],[\"负数\",{\"1\":{\"675\":1}}],[\"负数补1\",{\"1\":{\"348\":2}}],[\"负责加载自己定义的java类\",{\"1\":{\"912\":1}}],[\"负责jre的扩展目录中jar包的加载\",{\"1\":{\"912\":1}}],[\"负责java运行时核心类的加载\",{\"1\":{\"912\":1}}],[\"负责产生线程池\",{\"1\":{\"880\":1}}],[\"负责对象的生命周期的\",{\"1\":{\"688\":1}}],[\"负责统筹规划\",{\"1\":{\"594\":1}}],[\"负责技术开发\",{\"1\":{\"594\":1}}],[\"负责杂项工作\",{\"1\":{\"594\":1}}],[\"负责执行某种操作\",{\"1\":{\"342\":1}}],[\"负责监听端口\",{\"1\":{\"105\":1}}],[\"负责获取数据\",{\"1\":{\"105\":1}}],[\"移除\",{\"1\":{\"972\":1,\"975\":1}}],[\"移除元素\",{\"1\":{\"970\":1}}],[\"移除并返回此列表的最后一个元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"移除并返回此列表的第一个元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"移位\",{\"1\":{\"350\":1}}],[\"移位运算符\",{\"1\":{\"348\":1}}],[\"移动文件\",{\"1\":{\"772\":1}}],[\"移动得到的空位以零填充\",{\"1\":{\"348\":1}}],[\"移动游标方法\",{\"1\":{\"202\":1}}],[\"移动的时候会扫描一些行\",{\"1\":{\"202\":1}}],[\"甚至\",{\"1\":{\"885\":1}}],[\"甚至都不知道自己有几个\",{\"1\":{\"551\":1}}],[\"甚至可以写一个main方法\",{\"1\":{\"600\":1}}],[\"甚至可以忽略\",{\"1\":{\"171\":1}}],[\"甚至可能把正数左移成负数\",{\"1\":{\"348\":1}}],[\"甚至已经不把\",{\"1\":{\"347\":1}}],[\"若要比较内容\",{\"1\":{\"734\":1}}],[\"若想要获取数组中元素的取值\",{\"1\":{\"400\":1}}],[\"若左边的操作数已经能够决定表达式的值了\",{\"1\":{\"347\":1}}],[\"若它的右子树不空\",{\"1\":{\"220\":1}}],[\"若它的左子树不空\",{\"1\":{\"220\":1}}],[\"短一点\",{\"1\":{\"838\":1}}],[\"短路逻辑运算符的计算结果不变\",{\"1\":{\"347\":1}}],[\"短路就是依据这种原理\",{\"1\":{\"347\":1}}],[\"短整型只比字节型稍大\",{\"1\":{\"322\":1}}],[\"短整数类型\",{\"1\":{\"312\":1}}],[\"成立的\",{\"1\":{\"978\":1}}],[\"成为了\",{\"1\":{\"607\":1}}],[\"成为逻辑异或运算符\",{\"1\":{\"347\":1}}],[\"成功\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":2}}],[\"成功返回true\",{\"1\":{\"601\":1}}],[\"成功的前提\",{\"1\":{\"585\":1}}],[\"成员仍和原先对象一致\",{\"1\":{\"693\":1}}],[\"成员内部类和静态内部类的用途\",{\"1\":{\"632\":1}}],[\"成员内部类和静态内部类的区别\",{\"1\":{\"623\":1}}],[\"成员内部类和外部类的关系是\",{\"1\":{\"623\":1}}],[\"成员内部类必须依赖外部类存在\",{\"1\":{\"623\":1}}],[\"成员内部类的成员方法中\",{\"1\":{\"619\":1}}],[\"成员内部类的访问特点\",{\"0\":{\"614\":1}}],[\"成员内部类访问外部其他类成员\",{\"0\":{\"618\":1}}],[\"成员内部类成员变量\",{\"1\":{\"615\":1}}],[\"成员内部类内部访问外部类\",{\"0\":{\"615\":1}}],[\"成员内部类对象不存在\",{\"1\":{\"616\":1}}],[\"成员内部类对象不能单独创建\",{\"1\":{\"614\":1}}],[\"成员内部类对象依赖外部类对象而存在\",{\"1\":{\"616\":2}}],[\"成员内部类对象中保存了一个它所寄生的外部类对象的引用\",{\"1\":{\"614\":1}}],[\"成员内部类依赖于外部类\",{\"1\":{\"614\":1}}],[\"成员内部类可以看成外部类的一个成员\",{\"1\":{\"614\":1}}],[\"成员内部类可以看成另一个类的成员\",{\"1\":{\"611\":1}}],[\"成员内部类是最普通的内部类\",{\"1\":{\"609\":1}}],[\"成员内部类\",{\"0\":{\"609\":1},\"1\":{\"608\":1,\"609\":1,\"645\":1}}],[\"成员特点\",{\"0\":{\"612\":1,\"623\":1,\"636\":1},\"1\":{\"592\":1,\"598\":2,\"608\":1,\"621\":1}}],[\"成员\",{\"1\":{\"570\":1,\"607\":1}}],[\"成员常量是很少见的\",{\"1\":{\"570\":1}}],[\"成员常量的赋值\",{\"1\":{\"570\":1}}],[\"成员常量\",{\"1\":{\"568\":1}}],[\"成员访问\",{\"1\":{\"544\":1}}],[\"成员位置\",{\"1\":{\"486\":2,\"493\":2,\"608\":1}}],[\"成员的所属\",{\"1\":{\"477\":1}}],[\"成员方法的语法\",{\"1\":{\"561\":1}}],[\"成员方法的访问机制\",{\"0\":{\"556\":1}}],[\"成员方法的合集\",{\"1\":{\"540\":1}}],[\"成员方法的集合\",{\"1\":{\"523\":1}}],[\"成员方法的上面\",{\"1\":{\"469\":1}}],[\"成员方法总会需要一个对象\",{\"1\":{\"460\":1}}],[\"成员方法本质上就是操作\",{\"1\":{\"455\":1}}],[\"成员方法名\",{\"1\":{\"453\":1,\"655\":4}}],[\"成员方法和我们之前使用的方法不一样\",{\"1\":{\"450\":1}}],[\"成员方法\",{\"0\":{\"580\":1,\"724\":1,\"726\":1,\"770\":1},\"1\":{\"450\":1,\"455\":1,\"592\":1,\"612\":1,\"675\":1,\"760\":1,\"786\":1,\"788\":1,\"790\":1,\"792\":1,\"794\":1,\"795\":1,\"804\":1,\"806\":1,\"807\":1,\"808\":1,\"810\":1,\"812\":1,\"813\":1,\"814\":1,\"816\":1,\"817\":1,\"819\":1,\"820\":1,\"823\":1,\"824\":1,\"889\":1,\"890\":1,\"899\":1,\"900\":1,\"918\":1,\"924\":1}}],[\"成员变量描述的是对象的属性或者外貌特征\",{\"1\":{\"579\":1}}],[\"成员变量赋值先父后子如何保证\",{\"1\":{\"541\":1}}],[\"成员变量赋值顺序练习\",{\"0\":{\"471\":1}}],[\"成员变量和成员方法\",{\"1\":{\"520\":1}}],[\"成员变量还未定义\",{\"1\":{\"487\":1}}],[\"成员变量只能通过对象名调用\",{\"1\":{\"477\":1}}],[\"成员变量随着对象的创建而存在\",{\"1\":{\"477\":1}}],[\"成员变量存储于堆内存\",{\"1\":{\"477\":1}}],[\"成员变量存储在堆中的对象中\",{\"1\":{\"457\":1}}],[\"成员变量属于对象\",{\"1\":{\"477\":1}}],[\"成员变量对成员变量进行赋值\",{\"1\":{\"461\":1}}],[\"成员变量在整个类的成员方法中都可以使用\",{\"1\":{\"457\":1}}],[\"成员变量在对象创建以后就存在了\",{\"1\":{\"457\":1}}],[\"成员变量本质上就是数据\",{\"1\":{\"455\":1}}],[\"成员变量\",{\"0\":{\"579\":1},\"1\":{\"450\":2,\"453\":2,\"454\":2,\"455\":1,\"457\":2,\"516\":1,\"517\":1,\"568\":2,\"592\":1,\"598\":2,\"760\":1,\"851\":1,\"867\":3,\"881\":1,\"924\":2}}],[\"成员变量的访问机制\",{\"0\":{\"549\":1}}],[\"成员变量的访问权限应该尽量收紧\",{\"1\":{\"518\":1}}],[\"成员变量的合集\",{\"1\":{\"540\":1}}],[\"成员变量的集合\",{\"1\":{\"523\":1}}],[\"成员变量的显式赋值和构造代码块\",{\"1\":{\"488\":1}}],[\"成员变量的显式赋值演示\",{\"1\":{\"458\":1}}],[\"成员变量的下面\",{\"1\":{\"469\":1}}],[\"成员变量的值分别是什么\",{\"1\":{\"467\":1}}],[\"成员变量的赋值\",{\"0\":{\"458\":1}}],[\"成员变量的取值\",{\"1\":{\"456\":1,\"470\":1}}],[\"成员变量的类型\",{\"1\":{\"276\":1,\"1118\":1}}],[\"成员变量的名字\",{\"1\":{\"276\":1,\"279\":1}}],[\"成员变量的时候\",{\"1\":{\"262\":1}}],[\"成员变量名不一样\",{\"1\":{\"259\":1}}],[\"成员变量名\",{\"1\":{\"252\":4,\"265\":3,\"450\":1,\"516\":1,\"1118\":1}}],[\"称为父类\",{\"1\":{\"599\":1}}],[\"称为子类\",{\"1\":{\"599\":1}}],[\"称为无参构造方法\",{\"1\":{\"464\":1}}],[\"称为短路或逻辑运算符\",{\"1\":{\"347\":1}}],[\"称为短路与逻辑运算符\",{\"1\":{\"347\":1}}],[\"称为逻辑非运算符\",{\"1\":{\"347\":1}}],[\"称为逻辑或运算符\",{\"1\":{\"347\":1}}],[\"称为逻辑与运算符\",{\"1\":{\"347\":1}}],[\"称之为哈希值\",{\"1\":{\"679\":1,\"999\":1}}],[\"称之为哈希函数\",{\"1\":{\"679\":1,\"999\":1}}],[\"称之为equals方法重写的常规协定\",{\"1\":{\"674\":1}}],[\"称之为子类\",{\"1\":{\"520\":1}}],[\"称之为静态代码块\",{\"1\":{\"493\":1}}],[\"称之为构造代码块\",{\"1\":{\"486\":1}}],[\"称之为类加载的时机\",{\"1\":{\"456\":1}}],[\"称之为类加载\",{\"1\":{\"456\":1,\"540\":1}}],[\"称之为递归\",{\"1\":{\"442\":1}}],[\"称之为改变对象的状态\",{\"1\":{\"427\":1}}],[\"称之为对象或者实例\",{\"1\":{\"403\":1,\"405\":1}}],[\"称之为当前栈帧\",{\"1\":{\"403\":1}}],[\"称之为方法的出栈\",{\"1\":{\"403\":1}}],[\"称之为方法进栈\",{\"1\":{\"403\":1}}],[\"称之为栈帧\",{\"1\":{\"403\":1}}],[\"称之为强制类型转换\",{\"1\":{\"341\":1}}],[\"称之为自动类型转换\",{\"1\":{\"341\":1}}],[\"称之为\",{\"1\":{\"340\":1,\"446\":1,\"530\":1,\"532\":1,\"541\":1,\"542\":1,\"553\":1,\"583\":1,\"597\":1,\"679\":1,\"696\":1,\"703\":2}}],[\"称之为该\",{\"1\":{\"324\":1}}],[\"逻辑单位是字符\",{\"1\":{\"782\":1}}],[\"逻辑单位是字节\",{\"1\":{\"782\":1}}],[\"逻辑关系的数据\",{\"1\":{\"394\":1}}],[\"逻辑或\",{\"1\":{\"350\":1}}],[\"逻辑与\",{\"1\":{\"350\":1}}],[\"逻辑与和逻辑或有短路与非短路两种类型\",{\"1\":{\"347\":1}}],[\"逻辑\",{\"1\":{\"347\":1}}],[\"逻辑运算符\",{\"0\":{\"347\":1},\"1\":{\"343\":1}}],[\"得出不同的行为\",{\"1\":{\"582\":1}}],[\"得不偿失\",{\"1\":{\"483\":1}}],[\"得不到小数\",{\"1\":{\"344\":1}}],[\"得分\",{\"1\":{\"474\":4}}],[\"得到来自北京同学\",{\"1\":{\"1028\":1}}],[\"得到这个key在数组上的位置\",{\"1\":{\"1016\":1}}],[\"得到下标的时候\",{\"1\":{\"1008\":1}}],[\"得到键在数组上的位置\",{\"1\":{\"1002\":1}}],[\"得到不同的输出结果\",{\"1\":{\"1000\":1}}],[\"得到字节码文件对象\",{\"1\":{\"923\":1}}],[\"得到socket对象\",{\"1\":{\"898\":1,\"902\":1,\"903\":1,\"904\":1,\"905\":1}}],[\"得到weekdaynum\",{\"1\":{\"719\":1}}],[\"得到一个int值\",{\"1\":{\"1016\":1}}],[\"得到一个新的下标\",{\"1\":{\"1013\":1}}],[\"得到一个和原先对象\",{\"1\":{\"693\":1}}],[\"得到一个307状态码\",{\"1\":{\"120\":1}}],[\"得到相同基因型后代的过程\",{\"1\":{\"693\":1}}],[\"得到两个对象后\",{\"1\":{\"616\":1}}],[\"得到的行为也会随之不不同\",{\"1\":{\"575\":1}}],[\"得到的是默认初始值\",{\"1\":{\"438\":1}}],[\"得到了父类的所有成员\",{\"1\":{\"523\":1}}],[\"得到要求解的大规模问题的解\",{\"1\":{\"442\":1}}],[\"得到\",{\"1\":{\"348\":1}}],[\"得到49\",{\"1\":{\"348\":1}}],[\"得到61\",{\"1\":{\"348\":1}}],[\"得到12\",{\"1\":{\"348\":1}}],[\"得到余数\",{\"1\":{\"344\":1}}],[\"得到商\",{\"1\":{\"344\":1}}],[\"得到积\",{\"1\":{\"344\":1}}],[\"得到差\",{\"1\":{\"344\":1}}],[\"得到和\",{\"1\":{\"344\":1}}],[\"得到class字节码文件\",{\"1\":{\"309\":1}}],[\"得到class文件\",{\"1\":{\"308\":1}}],[\"得到哈希值\",{\"1\":{\"188\":1}}],[\"例子\",{\"1\":{\"344\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"例如在循环队列\",{\"1\":{\"976\":1}}],[\"例如offer\",{\"1\":{\"965\":1}}],[\"例如链表或数组\",{\"1\":{\"955\":1}}],[\"例如add\",{\"1\":{\"950\":1,\"961\":1,\"965\":1}}],[\"例如hh\",{\"1\":{\"725\":1}}],[\"例如dd\",{\"1\":{\"725\":1}}],[\"例如mm\",{\"1\":{\"725\":2}}],[\"例如yyyy\",{\"1\":{\"725\":1}}],[\"例如this\",{\"1\":{\"543\":1}}],[\"例如ss\",{\"1\":{\"725\":1}}],[\"例如super\",{\"1\":{\"543\":1}}],[\"例如string\",{\"1\":{\"382\":1}}],[\"例如student\",{\"1\":{\"316\":2}}],[\"例如对于下列建立一张用来\",{\"1\":{\"431\":1}}],[\"例如下列代码\",{\"1\":{\"367\":1,\"560\":1}}],[\"例如下列代码就是合法的\",{\"1\":{\"345\":1}}],[\"例如转换成int类型\",{\"1\":{\"353\":1}}],[\"例如以下代码\",{\"1\":{\"353\":1}}],[\"例如1\",{\"1\":{\"328\":2}}],[\"例如com\",{\"1\":{\"316\":1}}],[\"例如主键\",{\"1\":{\"177\":1}}],[\"例如国内的华为\",{\"1\":{\"143\":1}}],[\"例如\",{\"1\":{\"110\":1,\"184\":1,\"188\":1,\"204\":3,\"308\":1,\"312\":1,\"316\":1,\"328\":2,\"336\":1,\"342\":2,\"352\":1,\"504\":1,\"512\":1,\"513\":1,\"514\":1,\"652\":1,\"678\":1,\"679\":1,\"941\":1,\"978\":1,\"1008\":1,\"1195\":1,\"1204\":1}}],[\"描述信息\",{\"1\":{\"1195\":3}}],[\"描述数据增删查的一些方法\",{\"1\":{\"951\":1}}],[\"描述的是一个有序序列\",{\"1\":{\"947\":1}}],[\"描述的是java的\",{\"1\":{\"403\":1}}],[\"描述修饰注解的注解\",{\"1\":{\"924\":1}}],[\"描述子类对象初始化的过程\",{\"1\":{\"540\":1}}],[\"描述这些鸭子\",{\"1\":{\"530\":1}}],[\"描述对象的共有行为\",{\"1\":{\"450\":1}}],[\"描述对象的共有属性\",{\"1\":{\"450\":1}}],[\"描述\",{\"1\":{\"344\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"1113\":1,\"1124\":1}}],[\"往collection中添加了两个数据\",{\"1\":{\"953\":1}}],[\"往里面装数据\",{\"1\":{\"950\":1}}],[\"往往会让某个对象持有另外一个对象的引用作为自身的成员变量\",{\"1\":{\"469\":1}}],[\"往往一个方法就能解决问题\",{\"1\":{\"442\":1}}],[\"往往和循环体语句放在一起\",{\"1\":{\"364\":1}}],[\"往往不能以分号结尾\",{\"1\":{\"342\":1}}],[\"往后拿5\",{\"1\":{\"230\":1}}],[\"诸如声明语句\",{\"1\":{\"342\":1}}],[\"诸葛亮\",{\"1\":{\"161\":1}}],[\"体现在哪里呢\",{\"1\":{\"1183\":1}}],[\"体现在语法上就是\",{\"1\":{\"342\":1}}],[\"体现了它经过了特殊训练\",{\"1\":{\"595\":1}}],[\"体现出它们是特殊的经过训练的动物呢\",{\"1\":{\"595\":1}}],[\"体重\",{\"1\":{\"153\":1}}],[\"聪明\",{\"1\":{\"342\":1}}],[\"谨慎使用\",{\"1\":{\"341\":1}}],[\"虚线表示\",{\"1\":{\"338\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"928\":1}}],[\"虚拟机以及通过调用类加载器中的\",{\"1\":{\"917\":1}}],[\"虚拟机中执行的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"虚拟机退出\",{\"1\":{\"842\":1}}],[\"虚拟机允许应用程序并发地运行多个执行线程\",{\"1\":{\"830\":1}}],[\"虚拟机的调用目录\",{\"1\":{\"767\":1}}],[\"虚拟地映射到tomcat的webapps目录下\",{\"1\":{\"135\":1}}],[\"虚拟映射的优先级高\",{\"1\":{\"139\":1}}],[\"虚拟映射也可以配置一个root\",{\"1\":{\"139\":1}}],[\"虚拟映射和直接部署冲突的时候\",{\"1\":{\"138\":1}}],[\"虚拟映射\",{\"0\":{\"135\":1},\"1\":{\"139\":1}}],[\"虚拟部署\",{\"1\":{\"105\":1}}],[\"箭头表示类型转换的方向\",{\"1\":{\"338\":1}}],[\"帮我们创建\",{\"1\":{\"789\":1}}],[\"帮我们完成类型转换呢\",{\"1\":{\"338\":1}}],[\"帮助我们在mapper和mapper\",{\"1\":{\"263\":1}}],[\"帮助业务方更好地管理和运营\",{\"1\":{\"116\":1}}],[\"帮助广告联盟统计广告效果和提供适当的报酬\",{\"1\":{\"116\":1}}],[\"帮助你控制注入图片或视频的大小\",{\"1\":{\"15\":1}}],[\"强分代假说\",{\"1\":{\"933\":1}}],[\"强制的\",{\"1\":{\"592\":1}}],[\"强制类型转换条件\",{\"1\":{\"529\":1}}],[\"强制类型转换很容易导致数据失真\",{\"1\":{\"341\":1}}],[\"强制类型转换的语法是\",{\"1\":{\"339\":1}}],[\"强制类型转换\",{\"0\":{\"339\":1,\"529\":1},\"1\":{\"337\":1,\"527\":1}}],[\"强转失败会导致程序抛出异常\",{\"1\":{\"586\":1}}],[\"强转回的时候转成了truck\",{\"1\":{\"936\":1}}],[\"强转回去就不会出错\",{\"1\":{\"585\":1}}],[\"强转回son类的引用\",{\"1\":{\"585\":1}}],[\"强转后的引用类型必须能够真正的指向该对象\",{\"1\":{\"585\":1}}],[\"强转相当于把父类对象当子类对象去使用\",{\"1\":{\"529\":1}}],[\"强转额外代码的语法\",{\"1\":{\"529\":1}}],[\"强行赋值会编译报错\",{\"1\":{\"342\":1}}],[\"强类型语言对于变量的数据类型限制得相对严格\",{\"1\":{\"319\":1}}],[\"强类型语言是一种强制类型定义的编程语言\",{\"1\":{\"319\":1}}],[\"强类型语言介绍\",{\"1\":{\"319\":1}}],[\"尤其要注意以下两点\",{\"1\":{\"442\":1}}],[\"尤其注意不能使用\",{\"1\":{\"708\":1}}],[\"尤其注意不能是boolean类型\",{\"1\":{\"360\":1}}],[\"尤其注意\",{\"1\":{\"359\":1}}],[\"尤其不适合用于货币运算\",{\"1\":{\"336\":1}}],[\"尤其是\",{\"1\":{\"669\":1}}],[\"尤其是不同包下\",{\"1\":{\"510\":1}}],[\"尤其是c\",{\"1\":{\"426\":1}}],[\"尤其是在循环当中\",{\"1\":{\"411\":1}}],[\"尤其是工作过程中\",{\"1\":{\"150\":1}}],[\"尤其是mysql\",{\"1\":{\"148\":1}}],[\"尤其是响应体里面的图片\",{\"1\":{\"121\":1}}],[\"正文\",{\"1\":{\"1121\":1,\"1124\":1}}],[\"正数\",{\"1\":{\"675\":1}}],[\"正数补0\",{\"1\":{\"348\":2}}],[\"正确使用\",{\"1\":{\"936\":2}}],[\"正确使用api\",{\"1\":{\"658\":1}}],[\"正确来说\",{\"1\":{\"663\":1}}],[\"正确情况下\",{\"1\":{\"469\":1}}],[\"正是由于强转的条件苛刻\",{\"1\":{\"586\":1}}],[\"正是因为强制类型转换比较危险\",{\"1\":{\"339\":1}}],[\"正在\",{\"1\":{\"847\":1}}],[\"正在等待的线程会随着等待的时间的延长\",{\"1\":{\"837\":1}}],[\"正在执行的线程会随着执行时间的延长\",{\"1\":{\"837\":1}}],[\"正在运行的程序或者软件\",{\"1\":{\"826\":1}}],[\"正在以\",{\"1\":{\"469\":1}}],[\"正在被\",{\"1\":{\"469\":2}}],[\"正在攻击\",{\"1\":{\"469\":2}}],[\"正在使用\",{\"1\":{\"469\":1}}],[\"正常打印\",{\"1\":{\"844\":1}}],[\"正常复制\",{\"1\":{\"796\":4}}],[\"正常给变量初始化赋值\",{\"1\":{\"456\":1}}],[\"正常使用for循环的代码\",{\"1\":{\"442\":1}}],[\"正常情况下\",{\"1\":{\"359\":1,\"503\":1,\"537\":1,\"566\":1,\"675\":1,\"698\":1}}],[\"正常情况下short\",{\"1\":{\"345\":1}}],[\"正常情况下来说\",{\"1\":{\"135\":1}}],[\"正斜杠在计算机中还表示除号\",{\"1\":{\"356\":1}}],[\"正斜杠在日常生活中使用\",{\"1\":{\"356\":1}}],[\"正序排列\",{\"1\":{\"336\":1}}],[\"十九万里的博客\",{\"1\":{\"908\":1}}],[\"十时十分十秒\",{\"1\":{\"725\":1}}],[\"十六进制的地址值\",{\"1\":{\"453\":1}}],[\"十六位无符号数\",{\"1\":{\"324\":1}}],[\"十进制\",{\"1\":{\"356\":1,\"978\":1}}],[\"十进制正小数\",{\"1\":{\"336\":1}}],[\"虽然注解和接口确实共享了同一个关键字\",{\"1\":{\"924\":1}}],[\"虽然它确实隐式实现了接口java\",{\"1\":{\"924\":1}}],[\"虽然yield方法使当前线程放弃了cpu的执行权\",{\"1\":{\"841\":1}}],[\"虽然编译不会报错\",{\"1\":{\"585\":1}}],[\"虽然看起来像\",{\"1\":{\"533\":1}}],[\"虽然直接父类只有一个\",{\"1\":{\"533\":1}}],[\"虽然这里是外部调用方法传入的对象\",{\"1\":{\"509\":1}}],[\"虽然有两个部分\",{\"1\":{\"405\":1}}],[\"虽然我们无需具体记忆这些优先级\",{\"1\":{\"350\":1}}],[\"虽然java语法允许一行定义多个相同数据类型的变量\",{\"1\":{\"336\":1}}],[\"虽然解决了硬编码的问题\",{\"1\":{\"235\":1}}],[\"禁止使用vector\",{\"1\":{\"969\":1}}],[\"禁止使用小写\",{\"1\":{\"336\":1}}],[\"禁止访问\",{\"1\":{\"505\":1}}],[\"禁用cookie之后的session策略\",{\"0\":{\"1158\":1}}],[\"禁用此套接字的输出流\",{\"1\":{\"899\":1,\"905\":1}}],[\"禁用\",{\"2\":{\"47\":1}}],[\"禁用了如下功能\",{\"1\":{\"45\":1}}],[\"禁用展示\",{\"1\":{\"43\":1,\"67\":1}}],[\"细节问题\",{\"1\":{\"336\":1,\"596\":1}}],[\"仅能够在自身类中创建自身对象\",{\"1\":{\"687\":1}}],[\"仅能用一次\",{\"1\":{\"648\":1}}],[\"仅自己和自己比较时\",{\"1\":{\"673\":1}}],[\"仅需要注意两点\",{\"1\":{\"671\":1}}],[\"仅需要记住下面一点就可以了\",{\"1\":{\"327\":1}}],[\"仅有一次\",{\"1\":{\"663\":1}}],[\"仅作了解\",{\"1\":{\"658\":2}}],[\"仅作为内部实现功能使用\",{\"1\":{\"510\":1}}],[\"仅用于作为被继承和重写一个方法声明\",{\"1\":{\"590\":1}}],[\"仅保留一个声明让子类去重写就可以了\",{\"1\":{\"590\":1}}],[\"仅供了解\",{\"1\":{\"522\":1}}],[\"仅对自身类中的其他成员可见\",{\"1\":{\"509\":1}}],[\"仅使用一次\",{\"1\":{\"483\":1}}],[\"仅定义一个public\",{\"1\":{\"469\":1}}],[\"仅会影响方法内部如何使用外部传入地数据\",{\"1\":{\"384\":1}}],[\"仅占1个字节内存空间\",{\"1\":{\"322\":1}}],[\"±1\",{\"1\":{\"326\":1}}],[\"±3\",{\"1\":{\"326\":1}}],[\"~取反位运算符\",{\"1\":{\"348\":1}}],[\"~\",{\"1\":{\"326\":4}}],[\"~galles\",{\"1\":{\"220\":1}}],[\"汉字\",{\"1\":{\"324\":1}}],[\"汉语这种自然语言去书写的\",{\"1\":{\"319\":1}}],[\"于是对于两台计算机的一次数据传输通信\",{\"1\":{\"885\":1}}],[\"于是程序员在程序的运行时期\",{\"1\":{\"662\":1}}],[\"于是我们定义抽象类\",{\"1\":{\"595\":1}}],[\"于是干脆不要创建对象了\",{\"1\":{\"590\":1}}],[\"于是开始按照这个类中构造代码块和显式赋值的代码书写顺序\",{\"1\":{\"546\":1}}],[\"于是触发父类类加载\",{\"1\":{\"546\":1}}],[\"于是自然父类成员变量的赋值顺序都会先于子类的\",{\"1\":{\"542\":1}}],[\"于是就形成了下面几个概念\",{\"1\":{\"533\":1}}],[\"于是\",{\"1\":{\"323\":1,\"403\":1,\"455\":1,\"488\":1,\"542\":1,\"595\":1,\"607\":1,\"639\":1,\"667\":1}}],[\"×\",{\"1\":{\"323\":1}}],[\"遵循servlet\",{\"1\":{\"1078\":1}}],[\"遵循大驼峰式的书写规范\",{\"1\":{\"596\":1}}],[\"遵循ieee754标准\",{\"1\":{\"323\":1}}],[\"遵守命名规范\",{\"1\":{\"568\":1}}],[\"遵守\",{\"1\":{\"144\":2}}],[\"占4个字节\",{\"1\":{\"325\":1}}],[\"占用大量的内存空间\",{\"1\":{\"954\":1}}],[\"占用大量栈内存\",{\"1\":{\"442\":1}}],[\"占用cpu执行时间\",{\"1\":{\"838\":1}}],[\"占用的cpu执行时间多一点\",{\"1\":{\"838\":1}}],[\"占用一些系统资源\",{\"1\":{\"689\":1}}],[\"占用空间大小\",{\"1\":{\"456\":1}}],[\"占用8个字节内存空间\",{\"1\":{\"322\":1,\"323\":1}}],[\"占用4个字节内存空间\",{\"1\":{\"322\":1,\"323\":1}}],[\"占用2个字节内存空间\",{\"1\":{\"322\":1}}],[\"占位\",{\"1\":{\"162\":1,\"592\":1}}],[\"位置必须都对应上\",{\"1\":{\"655\":2}}],[\"位置\",{\"1\":{\"410\":1}}],[\"位运算符仅做了解\",{\"1\":{\"348\":1}}],[\"位运算符\",{\"0\":{\"348\":1},\"1\":{\"343\":1,\"348\":1}}],[\"位是最小的存储单位\",{\"1\":{\"321\":1}}],[\"位\",{\"1\":{\"321\":1,\"326\":1,\"348\":1}}],[\"典型的强类型语言有\",{\"1\":{\"319\":1}}],[\"典型的业务场景就是一次插入大量的数据\",{\"1\":{\"204\":1}}],[\"养成良好的习惯\",{\"1\":{\"319\":1}}],[\"官方下载地址\",{\"1\":{\"1185\":1}}],[\"官方jdk文档\",{\"1\":{\"318\":2}}],[\"官网下载\",{\"1\":{\"306\":1}}],[\"官网\",{\"1\":{\"214\":1,\"234\":1}}],[\"故称之为驼峰命名法\",{\"1\":{\"316\":1}}],[\"驼峰命名法就被发明了\",{\"1\":{\"316\":1}}],[\"英雄类\",{\"1\":{\"469\":1}}],[\"英文状态下\",{\"1\":{\"1201\":1}}],[\"英文单词在字典中出现的先后顺序\",{\"1\":{\"739\":1}}],[\"英文大于号字符组成\",{\"1\":{\"653\":1}}],[\"英文句号\",{\"1\":{\"315\":1}}],[\"英文逗号\",{\"1\":{\"315\":1}}],[\"英语和数学去重后的结果\",{\"1\":{\"163\":1}}],[\"英语0\",{\"1\":{\"162\":2}}],[\"英语单词\",{\"1\":{\"116\":1}}],[\"经理包含4个属性\",{\"1\":{\"594\":1}}],[\"经理负责统筹规划\",{\"1\":{\"594\":1}}],[\"经过测试\",{\"1\":{\"713\":1}}],[\"经过无性繁殖\",{\"1\":{\"693\":1}}],[\"经过了特殊训练\",{\"1\":{\"595\":1}}],[\"经过上面的测试\",{\"1\":{\"551\":1}}],[\"经过代码测试\",{\"1\":{\"487\":1}}],[\"经典问题\",{\"1\":{\"706\":1}}],[\"经典案例\",{\"0\":{\"538\":1}}],[\"经典错误\",{\"1\":{\"475\":1}}],[\"经常需要一些方法\",{\"1\":{\"510\":1}}],[\"经常需要在程序中定义一些符号来标记一些名称\",{\"1\":{\"314\":1}}],[\"经常有两个大的语法结构需要被解释\",{\"1\":{\"318\":1}}],[\"经历怎样的过程\",{\"1\":{\"229\":1}}],[\"概述\",{\"0\":{\"351\":1,\"355\":1,\"484\":1,\"505\":1,\"515\":1,\"574\":1,\"645\":1}}],[\"概括来说就是\",{\"1\":{\"313\":1}}],[\"概念\",{\"0\":{\"126\":1,\"460\":1},\"1\":{\"834\":1}}],[\"绝大多数对象都是朝生夕灭的\",{\"1\":{\"933\":1}}],[\"绝大多数我们都会在javase阶段学习和使用\",{\"1\":{\"312\":1}}],[\"绝对对外界隐藏\",{\"1\":{\"641\":1,\"649\":1}}],[\"绝对\",{\"1\":{\"353\":1}}],[\"绝对路径名的前缀始终是\",{\"1\":{\"768\":1}}],[\"绝对路径名是\",{\"1\":{\"767\":1}}],[\"绝对路径\",{\"1\":{\"249\":1,\"765\":1,\"767\":1,\"768\":2}}],[\"私有仓库只能添加总共五个管理员\",{\"1\":{\"1200\":1}}],[\"私有\",{\"1\":{\"1200\":1}}],[\"私有的\",{\"1\":{\"506\":1,\"534\":1}}],[\"私用模式\",{\"1\":{\"312\":1}}],[\"私钥加密\",{\"1\":{\"125\":1}}],[\"私钥\",{\"1\":{\"125\":1}}],[\"私钥解密\",{\"1\":{\"125\":1}}],[\"私钥解\",{\"1\":{\"125\":1}}],[\"枚举体中的单个常量的名字应该全部大写\",{\"1\":{\"717\":1}}],[\"枚举体的定义\",{\"1\":{\"717\":1}}],[\"枚举体\",{\"1\":{\"717\":1}}],[\"枚举类型使用代码\",{\"1\":{\"719\":1}}],[\"枚举类型当中定义的常量\",{\"1\":{\"719\":1}}],[\"枚举类型就是一个class类\",{\"1\":{\"719\":1}}],[\"枚举类型是一种引用数据类型\",{\"1\":{\"719\":1}}],[\"枚举类型\",{\"1\":{\"717\":1,\"719\":1,\"924\":1}}],[\"枚举类型的原理\",{\"1\":{\"719\":1}}],[\"枚举类型的名字可以看成类名\",{\"1\":{\"717\":1}}],[\"枚举类型的访问权限修饰符和class类是一致的\",{\"1\":{\"717\":1}}],[\"枚举类型的定义使用关键字enum\",{\"1\":{\"717\":1}}],[\"枚举类型名字\",{\"1\":{\"717\":1}}],[\"枚举的定义举例\",{\"1\":{\"717\":1}}],[\"枚举的定义语法\",{\"1\":{\"717\":1}}],[\"枚举的两种实现方式\",{\"0\":{\"714\":1}}],[\"枚举对象通常为只读\",{\"1\":{\"715\":1}}],[\"枚举对象名通常使用大写\",{\"1\":{\"715\":1}}],[\"枚举\",{\"1\":{\"312\":1}}],[\"布尔型对象相等的比较\",{\"0\":{\"711\":1}}],[\"布尔表达式\",{\"1\":{\"361\":1,\"362\":3}}],[\"布尔常量\",{\"1\":{\"328\":1}}],[\"布尔类型boolean是不允许写在switch选择中的\",{\"1\":{\"359\":1}}],[\"布尔类型变量具体占用内存的大小\",{\"1\":{\"325\":1}}],[\"布尔类型也只有一个\",{\"1\":{\"325\":1}}],[\"布尔类型\",{\"0\":{\"325\":1},\"1\":{\"312\":1,\"325\":1,\"407\":1}}],[\"布局与功能禁用\",{\"0\":{\"45\":1}}],[\"布局\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1}}],[\"含义\",{\"1\":{\"312\":1,\"544\":1,\"1109\":1}}],[\"起始值\",{\"1\":{\"1050\":1}}],[\"起码还有一个垃圾回收线程\",{\"1\":{\"830\":1}}],[\"起到标记的作用\",{\"1\":{\"823\":1}}],[\"起到警告\",{\"1\":{\"510\":1}}],[\"起名字是很常见的操作\",{\"1\":{\"316\":1}}],[\"起名字为\",{\"1\":{\"308\":1}}],[\"起别名\",{\"1\":{\"247\":1}}],[\"业务\",{\"1\":{\"828\":1}}],[\"业务代码\",{\"1\":{\"669\":1}}],[\"业务逻辑如下\",{\"1\":{\"601\":1}}],[\"业务场景中查询条件比较多的\",{\"1\":{\"233\":1}}],[\"业界有一个共识就是\",{\"1\":{\"308\":1}}],[\"搭载在塞班系统上的很多游戏都是java开发的\",{\"1\":{\"303\":1}}],[\"塞班系统非常普及\",{\"1\":{\"303\":1}}],[\"狭义的桌面应用可以看成基于c\",{\"1\":{\"303\":1}}],[\"越野\",{\"1\":{\"513\":1}}],[\"越来越少人使用java开发android\",{\"1\":{\"303\":1}}],[\"越大代表优先级越高\",{\"1\":{\"116\":1}}],[\"必不可少\",{\"1\":{\"924\":1}}],[\"必然会觉得时间戳和现实的时间格式差距比较大\",{\"1\":{\"724\":1}}],[\"必然要先进行加载和连接\",{\"1\":{\"497\":1}}],[\"必然不可能做任何操作\",{\"1\":{\"456\":1}}],[\"必然是1或者0\",{\"1\":{\"336\":1}}],[\"必然需要服务端作出响应\",{\"1\":{\"303\":1}}],[\"必须同时重写hashcode和equals方法\",{\"1\":{\"1009\":1}}],[\"必须全部指定泛型的类型\",{\"1\":{\"939\":1}}],[\"必须给注解的各个属性赋值\",{\"1\":{\"924\":1}}],[\"必须当前线程\",{\"1\":{\"873\":1}}],[\"必须按照成员变量的取值重写equals方法\",{\"1\":{\"698\":1}}],[\"必须符合equals方法返回true\",{\"1\":{\"682\":1}}],[\"必须有且仅有一个必须要实现的抽象方法\",{\"1\":{\"652\":1}}],[\"必须依赖于类的对象而存在\",{\"1\":{\"614\":1}}],[\"必须保持一模一样\",{\"1\":{\"605\":1}}],[\"必须保证类的每个构造器都能完成成员变量的赋值\",{\"1\":{\"570\":1}}],[\"必须实现所有抽象方法\",{\"1\":{\"599\":1}}],[\"必须实现所有的抽象方法\",{\"1\":{\"592\":1,\"598\":1}}],[\"必须发生在类与接口之间\",{\"1\":{\"599\":1}}],[\"必须发生在父子类之间\",{\"1\":{\"563\":1}}],[\"必须显式赋值\",{\"1\":{\"598\":1}}],[\"必须显式的指出该返回值\",{\"1\":{\"382\":1}}],[\"必须将父类引用转换成它的子类引用\",{\"1\":{\"585\":1}}],[\"必须存在父类引用指向子类对象\",{\"1\":{\"576\":1}}],[\"必须存在方法重写\",{\"1\":{\"576\":1}}],[\"必须存在继承\",{\"1\":{\"576\":1}}],[\"必须且只能选择其一\",{\"1\":{\"571\":1}}],[\"必须\",{\"1\":{\"570\":1,\"571\":1}}],[\"必须不同\",{\"1\":{\"563\":1}}],[\"必须相同\",{\"1\":{\"563\":3}}],[\"必须至少保持一致\",{\"1\":{\"561\":1}}],[\"必须在别的线程中\",{\"1\":{\"870\":1}}],[\"必须在作用域内部创建\",{\"1\":{\"633\":1}}],[\"必须在外部类对象的基础上创建\",{\"1\":{\"614\":1}}],[\"必须在同类中\",{\"1\":{\"563\":1}}],[\"必须在子类中\",{\"1\":{\"536\":1,\"538\":2}}],[\"必须在不同包下寻找时\",{\"1\":{\"503\":1}}],[\"必须创建对象\",{\"1\":{\"477\":1}}],[\"必须创建对象才能访问它们\",{\"1\":{\"453\":1}}],[\"必须手动初始化赋值\",{\"1\":{\"457\":1}}],[\"必须没有static修饰\",{\"1\":{\"450\":1}}],[\"必须先初始化其中的一维数组\",{\"1\":{\"438\":1}}],[\"必须先默认初始化\",{\"1\":{\"408\":1}}],[\"必须事先为数组规划好合理的空间\",{\"1\":{\"394\":1}}],[\"必须一致地返回相同的整数\",{\"1\":{\"682\":1}}],[\"必须一致\",{\"1\":{\"393\":1}}],[\"必须明确方法的名字和形参列表\",{\"1\":{\"389\":1}}],[\"必须放在最后面\",{\"1\":{\"358\":1}}],[\"必须是一个元素有限的集合\",{\"1\":{\"999\":1}}],[\"必须是一个无限大小\",{\"1\":{\"999\":1}}],[\"必须是一个布尔表达式\",{\"1\":{\"358\":1}}],[\"必须是public修饰的\",{\"1\":{\"606\":1}}],[\"必须是强转后的引用能够指向的对象\",{\"1\":{\"585\":1}}],[\"必须是在普通成员方法中\",{\"1\":{\"462\":1}}],[\"必须是合法的标识符\",{\"1\":{\"382\":1}}],[\"必须是注解名\",{\"1\":{\"271\":1}}],[\"必须是array\",{\"1\":{\"271\":1}}],[\"必须通过\",{\"1\":{\"252\":1,\"253\":1}}],[\"必须得有一个主键\",{\"1\":{\"226\":1}}],[\"必须对用户输入的值进行过滤和转义\",{\"1\":{\"204\":1}}],[\"必须要先实现一个接口\",{\"1\":{\"694\":1}}],[\"必须要重写的抽象方法的\",{\"1\":{\"653\":1}}],[\"必须要重写的抽象方法的形参列表\",{\"1\":{\"653\":1}}],[\"必须要重新启动一下客户端\",{\"1\":{\"212\":1}}],[\"必须要显式写代码处理\",{\"1\":{\"341\":1}}],[\"必须要有jre\",{\"1\":{\"304\":1}}],[\"必须要有resulttype\",{\"1\":{\"257\":1}}],[\"必须要遵循的规则\",{\"1\":{\"235\":1}}],[\"必须要写所有value\",{\"1\":{\"158\":1}}],[\"必须要把这个图片进行\",{\"1\":{\"121\":1}}],[\"医疗等\",{\"1\":{\"303\":1}}],[\"架构实现\",{\"1\":{\"303\":1}}],[\"普遍使用包装类型类名\",{\"1\":{\"705\":1}}],[\"普遍情况下\",{\"1\":{\"586\":1}}],[\"普遍采用b\",{\"1\":{\"303\":1}}],[\"普通人\",{\"1\":{\"1040\":3}}],[\"普通用户\",{\"1\":{\"721\":1}}],[\"普通方法\",{\"1\":{\"606\":1}}],[\"普通员工包含3个属性\",{\"1\":{\"594\":1}}],[\"普通员工负责杂项工作\",{\"1\":{\"594\":1}}],[\"普通类不可能直接访问\",{\"1\":{\"607\":1}}],[\"普通类没有私有概念\",{\"1\":{\"607\":1}}],[\"普通类继承一个抽象类\",{\"1\":{\"599\":1}}],[\"普通类继承抽象类\",{\"1\":{\"592\":1}}],[\"普通类实现接口\",{\"1\":{\"598\":1,\"599\":1}}],[\"普通类中有的东西它都有\",{\"1\":{\"592\":1}}],[\"普通类中能够定义的成员\",{\"1\":{\"592\":1}}],[\"普通成员需创建外部类对象去访问\",{\"1\":{\"618\":1}}],[\"普通成员\",{\"1\":{\"592\":1}}],[\"普通成员方法访问任意的\",{\"1\":{\"475\":1}}],[\"普通成员方法当中\",{\"1\":{\"475\":1}}],[\"普通的get请求和form表单提供的get\",{\"1\":{\"1104\":1}}],[\"普通的字节输入流\",{\"1\":{\"821\":1}}],[\"普通的做法就是再new一个一模一样的\",{\"1\":{\"693\":1}}],[\"普通的手段是做不到了\",{\"1\":{\"459\":1}}],[\"普通的在中间的元素\",{\"1\":{\"440\":1}}],[\"普通的日志数据\",{\"1\":{\"228\":1}}],[\"普通\",{\"1\":{\"403\":2,\"477\":1}}],[\"普通列映射\",{\"1\":{\"261\":1}}],[\"普通索引等\",{\"1\":{\"218\":1}}],[\"顾名思义是一种可以通过web\",{\"1\":{\"303\":1}}],[\"顾名思义是对于同一行记录\",{\"1\":{\"211\":1}}],[\"游戏中有很多角色\",{\"1\":{\"582\":1}}],[\"游戏\",{\"1\":{\"303\":2}}],[\"游标可以移动\",{\"1\":{\"202\":1}}],[\"桌面应用开发是c\",{\"1\":{\"303\":1}}],[\"桌面应用\",{\"1\":{\"303\":2}}],[\"确认好要传输的数据\",{\"1\":{\"885\":1}}],[\"确定哪些对象已经变成了垃圾\",{\"1\":{\"927\":1}}],[\"确定指定字符是否为数字\",{\"1\":{\"705\":1}}],[\"确定指定字符是否为字母\",{\"1\":{\"705\":1}}],[\"确定指定字符是否为字母或数字\",{\"1\":{\"705\":1}}],[\"确定指定字符是否为小写字母\",{\"1\":{\"705\":1}}],[\"确定指定字符是否为大写字母\",{\"1\":{\"705\":1}}],[\"确定\",{\"1\":{\"307\":1}}],[\"确实能够提高mybatis的性能\",{\"1\":{\"287\":1}}],[\"确保备份和恢复操作的安全性和准确性\",{\"1\":{\"188\":1}}],[\"确保只有通过主播合法渠道进入店铺的用户才能享受相应的优惠或奖励\",{\"1\":{\"116\":1}}],[\"确保只有合法的来源才能显示图片\",{\"1\":{\"116\":1}}],[\"确保请求者有权访问资源\",{\"1\":{\"116\":1}}],[\"确保通信双方能够正确地解释和处理数据\",{\"1\":{\"110\":1}}],[\"确保双方在交易中有明确的权益和责任\",{\"1\":{\"109\":1}}],[\"走缓存\",{\"1\":{\"285\":2}}],[\"同事b也做了一些事情\",{\"1\":{\"1197\":1}}],[\"同学\",{\"1\":{\"969\":1,\"1020\":1}}],[\"同步区域后\",{\"1\":{\"868\":1}}],[\"同步方法的锁对象是this\",{\"1\":{\"856\":1}}],[\"同步方法\",{\"0\":{\"856\":1},\"1\":{\"856\":1,\"884\":1}}],[\"同步\",{\"0\":{\"828\":1},\"1\":{\"828\":2}}],[\"同步代码块嵌套\",{\"1\":{\"866\":1,\"867\":2}}],[\"同步代码块的锁对象\",{\"1\":{\"855\":1}}],[\"同步代码块\",{\"0\":{\"855\":1},\"1\":{\"484\":2,\"855\":1}}],[\"同类型class对象唯一\",{\"1\":{\"663\":1}}],[\"同一种事物\",{\"1\":{\"575\":1}}],[\"同一包其他类\",{\"1\":{\"506\":1,\"534\":1}}],[\"同一包中的子类或者其它类能够访问\",{\"1\":{\"506\":1,\"534\":1}}],[\"同一类中\",{\"1\":{\"506\":1,\"534\":1}}],[\"同一个用户\",{\"1\":{\"1161\":1}}],[\"同一个客户端向服务器中发送的多个请求\",{\"1\":{\"1137\":1}}],[\"同一个请求处理过程中\",{\"1\":{\"1129\":1}}],[\"同一个锁对象上调用notify方法唤醒\",{\"1\":{\"870\":1}}],[\"同一个线程对象能否启动多次\",{\"1\":{\"833\":1}}],[\"同一个线程能否启动多次\",{\"1\":{\"833\":1}}],[\"同一个父类引用指向不同子类对象时\",{\"1\":{\"575\":1}}],[\"同一个引用\",{\"1\":{\"575\":1}}],[\"同一个事物\",{\"1\":{\"575\":1}}],[\"同一个类中的static方法互相调用可以省略类名\",{\"1\":{\"475\":1}}],[\"同一个类中的static方法之间\",{\"1\":{\"383\":1}}],[\"同一个mapper\",{\"1\":{\"286\":1}}],[\"同一个sqlsession获取的不同mapper\",{\"1\":{\"285\":1}}],[\"同一个sqlsession获取不同的的mapper\",{\"1\":{\"285\":1}}],[\"同一个sqlsession\",{\"1\":{\"285\":1}}],[\"同包下是可以随意访问的\",{\"1\":{\"536\":1}}],[\"同包中的其他类都可以访问\",{\"1\":{\"509\":1}}],[\"同包中都可以使用\",{\"1\":{\"506\":1,\"534\":1}}],[\"同包中已存在student类\",{\"1\":{\"504\":1}}],[\"同包已经存在这个类了\",{\"1\":{\"503\":1}}],[\"同生共死\",{\"1\":{\"457\":1}}],[\"同种类型的对象\",{\"1\":{\"447\":1}}],[\"同理逻辑与也是意义\",{\"1\":{\"347\":1}}],[\"同样地\",{\"1\":{\"976\":1}}],[\"同样需要大驼峰书写\",{\"1\":{\"717\":1}}],[\"同样\",{\"1\":{\"635\":1,\"717\":1,\"965\":1}}],[\"同样没有多态\",{\"1\":{\"577\":1}}],[\"同样比较多见于jdk源码中\",{\"1\":{\"567\":1}}],[\"同样先执行显式赋值和构造代码块后执行构造器\",{\"1\":{\"546\":1}}],[\"同样的代码在多处同时生效\",{\"1\":{\"519\":1}}],[\"同样使用类arrays\",{\"1\":{\"440\":1}}],[\"同样是最基本操作\",{\"1\":{\"440\":1}}],[\"同样是用byte类型接收的值\",{\"1\":{\"342\":1}}],[\"同样可以使用标签\",{\"1\":{\"377\":1}}],[\"同样具有for循环具有的5个部分\",{\"1\":{\"363\":1}}],[\"同样一个\",{\"1\":{\"335\":1}}],[\"同时在另一个分支上开发一个新的功能\",{\"1\":{\"1204\":1}}],[\"同时进行\",{\"1\":{\"851\":2}}],[\"同时有吃饭\",{\"1\":{\"519\":2}}],[\"同时\",{\"1\":{\"218\":1,\"780\":1,\"825\":4,\"828\":1,\"906\":1,\"976\":1}}],[\"同时也可以随时回到之前的某个状态进行修复或重新开发\",{\"1\":{\"1204\":1}}],[\"同时也可以更好地保障数据的完整性和一致性\",{\"1\":{\"171\":1}}],[\"同时也会产生response\",{\"1\":{\"1110\":1}}],[\"同时也减少了一些资源管理的复杂性\",{\"1\":{\"213\":1}}],[\"电话挂断\",{\"1\":{\"828\":1}}],[\"电话没有挂断\",{\"1\":{\"828\":1}}],[\"电视机的案例\",{\"1\":{\"580\":1}}],[\"电脑挂了\",{\"1\":{\"283\":1}}],[\"电力等行业\",{\"1\":{\"143\":1}}],[\"磁盘\",{\"1\":{\"782\":2}}],[\"磁盘上\",{\"1\":{\"283\":1}}],[\"磁盘io的次数会减少\",{\"1\":{\"220\":1}}],[\"案例2\",{\"1\":{\"442\":1}}],[\"案例1\",{\"1\":{\"442\":1}}],[\"案例\",{\"0\":{\"891\":1,\"901\":1,\"942\":1,\"1148\":1},\"1\":{\"283\":1,\"601\":1,\"818\":2,\"844\":2}}],[\"懒加载\",{\"1\":{\"283\":1,\"456\":1}}],[\"懒加载又叫做延迟加载\",{\"1\":{\"283\":1}}],[\"懒加载和mybatis缓存作为了解\",{\"1\":{\"283\":1}}],[\"赵刚\",{\"1\":{\"281\":1}}],[\"楚云飞\",{\"1\":{\"278\":1,\"281\":1}}],[\"张飞\",{\"1\":{\"278\":1}}],[\"张三养了3只狗\",{\"1\":{\"444\":1}}],[\"张三\",{\"1\":{\"149\":2,\"233\":1,\"458\":1,\"467\":1,\"468\":1,\"471\":1,\"669\":1,\"730\":2,\"904\":1}}],[\"手机号\",{\"1\":{\"1190\":1}}],[\"手机的id\",{\"1\":{\"274\":1}}],[\"手动管理版本\",{\"1\":{\"1183\":1}}],[\"手动扩展该公共接口的接口不会定义为注解类型\",{\"1\":{\"924\":1}}],[\"手动拆箱\",{\"1\":{\"703\":1}}],[\"手动装箱\",{\"1\":{\"703\":1}}],[\"手动装修\",{\"1\":{\"703\":1}}],[\"手动导包的目的是明确告诉编译器应该使用哪个包下的类\",{\"1\":{\"503\":1}}],[\"手写接口类实现\",{\"1\":{\"741\":1}}],[\"手写类实现接口\",{\"1\":{\"650\":1}}],[\"手写出父类方法的名字\",{\"1\":{\"562\":1}}],[\"手写实现类\",{\"1\":{\"741\":1}}],[\"手写实现\",{\"0\":{\"415\":1}}],[\"手写服务器\",{\"1\":{\"127\":1}}],[\"手写简易服务器\",{\"0\":{\"127\":1}}],[\"配车\",{\"1\":{\"796\":1}}],[\"配合集合类去使用\",{\"1\":{\"657\":1}}],[\"配合起来一起使用的\",{\"1\":{\"267\":1}}],[\"配置tomcat的话\",{\"1\":{\"1132\":1}}],[\"配置tomcat做的虚拟映射的docbase\",{\"1\":{\"1098\":1}}],[\"配置文件夹\",{\"1\":{\"1203\":1}}],[\"配置文件的类型\",{\"1\":{\"1203\":1}}],[\"配置文件的作用\",{\"1\":{\"918\":1}}],[\"配置文件的几种格式\",{\"1\":{\"918\":1}}],[\"配置文件\",{\"0\":{\"918\":1},\"1\":{\"924\":1,\"1098\":1,\"1099\":1}}],[\"配置文件文件夹\",{\"1\":{\"130\":1}}],[\"配置某个包下的所有的配置文件\",{\"1\":{\"249\":1}}],[\"配置方式二\",{\"1\":{\"249\":1}}],[\"配置方式一\",{\"1\":{\"249\":1}}],[\"配置mapper\",{\"1\":{\"249\":1}}],[\"配置mybatis的主配置文件\",{\"1\":{\"244\":1}}],[\"配置一个专门用来存放sql语句的配置文件\",{\"1\":{\"234\":1}}],[\"配置一个mybatis的主配置文件\",{\"1\":{\"234\":1}}],[\"配置2\",{\"1\":{\"234\":1,\"286\":1}}],[\"配置1\",{\"1\":{\"234\":1,\"286\":1}}],[\"配置的参数\",{\"1\":{\"214\":1}}],[\"配置的docbase一定要是一个路径\",{\"1\":{\"139\":1}}],[\"配置\",{\"0\":{\"53\":1,\"307\":1},\"1\":{\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"284\":1}}],[\"引言\",{\"0\":{\"1028\":1}}],[\"引出来static关键字\",{\"1\":{\"472\":1}}],[\"引用计数算法\",{\"0\":{\"927\":1}}],[\"引用接收对象\",{\"1\":{\"648\":1}}],[\"引用类型\",{\"0\":{\"1118\":1},\"1\":{\"603\":1,\"604\":1,\"605\":1,\"728\":1}}],[\"引用名\",{\"1\":{\"586\":1}}],[\"引用所指向的真实对象\",{\"1\":{\"585\":1}}],[\"引用通过存储地址指向堆上的对象\",{\"1\":{\"540\":1}}],[\"引用和对象都有对应的数据类型\",{\"1\":{\"526\":1}}],[\"引用和引用拷贝指向的对象本身被改变了\",{\"1\":{\"425\":1}}],[\"引用传递\",{\"1\":{\"424\":1}}],[\"引用值不是null\",{\"1\":{\"408\":1}}],[\"引用不是null\",{\"1\":{\"408\":1}}],[\"引用\",{\"1\":{\"406\":1,\"526\":1,\"675\":1,\"680\":1}}],[\"引用作为一个局部变量\",{\"1\":{\"406\":1}}],[\"引用数据用比较运算符比较的地址就是这个地址\",{\"1\":{\"403\":1}}],[\"引用数据类型成员变量\",{\"1\":{\"669\":1}}],[\"引用数据类型要成功\",{\"1\":{\"587\":1}}],[\"引用数据类型出现了数据类型转换的概念\",{\"1\":{\"530\":1}}],[\"引用数据类型转换分类\",{\"0\":{\"527\":1}}],[\"引用数据类型转换的前提\",{\"0\":{\"525\":1}}],[\"引用数据类型变量\",{\"1\":{\"526\":1}}],[\"引用数据类型同样存在\",{\"1\":{\"524\":1}}],[\"引用数据类型是\",{\"1\":{\"523\":1}}],[\"引用数据类型是java的两大数据类型之一\",{\"1\":{\"405\":1}}],[\"引用数据类型默认值是null\",{\"1\":{\"407\":1}}],[\"引用数据类型在栈帧中存储引用\",{\"1\":{\"406\":1}}],[\"引用数据类型的强制类型转换\",{\"0\":{\"584\":1}}],[\"引用数据类型的类型转换跟基本数据类型一样\",{\"1\":{\"527\":1}}],[\"引用数据类型的类型转换必须发生在具有父子关系的两个类之间\",{\"1\":{\"525\":1}}],[\"引用数据类型的类型转换\",{\"0\":{\"524\":1},\"1\":{\"518\":1}}],[\"引用数据类型的创建分为两部分\",{\"1\":{\"405\":1}}],[\"引用数据类型的比较\",{\"1\":{\"346\":1}}],[\"引用数据类型的变量比较只能使用\",{\"1\":{\"346\":1}}],[\"引用数据类型和引用数据类型比\",{\"1\":{\"346\":1}}],[\"引用数据类型也能够发生类型转换\",{\"1\":{\"341\":1}}],[\"引用数据类型\",{\"0\":{\"327\":1},\"1\":{\"320\":1,\"406\":1,\"455\":1,\"540\":2,\"561\":1}}],[\"引申出\",{\"1\":{\"406\":1}}],[\"引申\",{\"0\":{\"404\":1}}],[\"引例\",{\"0\":{\"444\":1,\"459\":1,\"463\":1,\"472\":1,\"502\":1,\"519\":1,\"548\":1,\"555\":1,\"590\":1,\"595\":1,\"607\":1},\"1\":{\"380\":1,\"387\":1,\"392\":1,\"429\":1,\"607\":1}}],[\"引入依赖commons\",{\"1\":{\"1118\":1}}],[\"引入泛型机制后\",{\"1\":{\"938\":1}}],[\"引入锁的概念\",{\"1\":{\"853\":1}}],[\"引入了另外一种根搜索算法\",{\"1\":{\"927\":1}}],[\"引入了线程\",{\"1\":{\"828\":1}}],[\"引入了类加载的概念\",{\"1\":{\"540\":1}}],[\"引入\",{\"0\":{\"380\":1,\"387\":1,\"392\":1,\"713\":1,\"936\":1},\"1\":{\"267\":2}}],[\"引入外部配置文件\",{\"1\":{\"245\":1}}],[\"引号中\",{\"1\":{\"265\":1}}],[\"筛选的机制是根据元素的hashcode和equals判断重复\",{\"1\":{\"1037\":1}}],[\"筛选元素\",{\"1\":{\"1037\":1}}],[\"筛选小米手机\",{\"1\":{\"263\":1}}],[\"筛选荣耀的手机\",{\"1\":{\"263\":1}}],[\"荣耀\",{\"1\":{\"263\":4}}],[\"荣耀90\",{\"1\":{\"263\":1}}],[\"优秀\",{\"1\":{\"997\":1}}],[\"优秀的程序员\",{\"1\":{\"319\":1}}],[\"优先级\",{\"0\":{\"1091\":1}}],[\"优先级没有卵用\",{\"1\":{\"838\":1}}],[\"优先级案例\",{\"1\":{\"838\":2}}],[\"优先级会升高\",{\"1\":{\"837\":1}}],[\"优先级降低\",{\"1\":{\"837\":1}}],[\"优先使用接口\",{\"1\":{\"606\":1}}],[\"优缺点\",{\"0\":{\"657\":1}}],[\"优势\",{\"1\":{\"262\":1}}],[\"优点是\",{\"1\":{\"648\":2}}],[\"优点\",{\"0\":{\"582\":1,\"597\":1},\"1\":{\"171\":1,\"178\":1,\"220\":1,\"267\":1,\"482\":1,\"643\":1,\"657\":1,\"924\":2,\"925\":1,\"936\":1,\"1149\":1}}],[\"名称不一致会有什么问题\",{\"1\":{\"261\":1}}],[\"名字不合法\",{\"1\":{\"924\":1}}],[\"名字不一致\",{\"1\":{\"261\":1}}],[\"名字校验\",{\"1\":{\"924\":1}}],[\"名字长度不超过5\",{\"1\":{\"924\":1}}],[\"名字叫value\",{\"1\":{\"924\":1}}],[\"名字叫做阿妈粽的\",{\"1\":{\"159\":1}}],[\"名字叫做user1\",{\"1\":{\"136\":1}}],[\"名字为\",{\"1\":{\"469\":1}}],[\"名字为固定的\",{\"1\":{\"215\":2}}],[\"名字\",{\"1\":{\"171\":1,\"316\":1}}],[\"更安全点\",{\"1\":{\"945\":1}}],[\"更详细的图解\",{\"1\":{\"908\":1}}],[\"更改加锁的顺序\",{\"1\":{\"867\":1}}],[\"更改需求\",{\"1\":{\"821\":1}}],[\"更改s内容\",{\"1\":{\"730\":1}}],[\"更改分数\",{\"1\":{\"474\":3}}],[\"更具体一点来说\",{\"1\":{\"721\":1}}],[\"更具体来说\",{\"1\":{\"663\":1}}],[\"更准确\",{\"1\":{\"596\":1}}],[\"更不可能强求映射是完全一一对应的\",{\"1\":{\"679\":1}}],[\"更不能重写\",{\"1\":{\"567\":1}}],[\"更不能被重写\",{\"1\":{\"562\":1}}],[\"更不会被修改\",{\"1\":{\"566\":1}}],[\"更不谈重写\",{\"1\":{\"562\":1}}],[\"更流行超类\",{\"1\":{\"522\":1}}],[\"更好的选择是使用动态初始化格式二\",{\"1\":{\"441\":1}}],[\"更优美\",{\"1\":{\"415\":1}}],[\"更重要的是\",{\"1\":{\"595\":1}}],[\"更重要的是能够更方便地修改代码\",{\"1\":{\"519\":1}}],[\"更重要的是多个变量单独定义且单独存在\",{\"1\":{\"392\":1}}],[\"更重要的是它还限制了这组数据能够执行的操作\",{\"1\":{\"320\":1}}],[\"更多是自于前端页面\",{\"1\":{\"351\":1}}],[\"更加优雅并且逻辑更加直观\",{\"1\":{\"349\":1}}],[\"更灵活\",{\"1\":{\"261\":1}}],[\"更新商品\",{\"1\":{\"601\":1}}],[\"更新数据\",{\"1\":{\"420\":1}}],[\"更新和删除操作与java对象之间的映射的方式\",{\"1\":{\"234\":1}}],[\"更新和管理关系数据库系统\",{\"1\":{\"144\":1,\"146\":1}}],[\"更新语句\",{\"1\":{\"162\":1}}],[\"更新湖北的人\",{\"1\":{\"160\":1}}],[\"更新满足条件的表记录\",{\"1\":{\"160\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"82\":1}}],[\"更新时间\",{\"1\":{\"45\":1,\"171\":2}}],[\"输出上一次访问的时间\",{\"1\":{\"1148\":1}}],[\"输出参数是个boolean\",{\"1\":{\"1036\":1}}],[\"输出流\",{\"1\":{\"782\":1}}],[\"输出\",{\"1\":{\"779\":1}}],[\"输出某个目录\",{\"1\":{\"777\":2}}],[\"输出绝对路径\",{\"1\":{\"776\":2}}],[\"输出到控制台窗口中\",{\"1\":{\"749\":1}}],[\"输出结果\",{\"1\":{\"737\":1,\"738\":1,\"739\":2,\"870\":1}}],[\"输出结果是多少\",{\"1\":{\"730\":1}}],[\"输出结果如下图\",{\"1\":{\"307\":2}}],[\"输出相应结果\",{\"1\":{\"471\":1}}],[\"输出数组的长度为0\",{\"1\":{\"413\":1}}],[\"输出数组名\",{\"1\":{\"409\":1}}],[\"输出数组名及元素\",{\"1\":{\"409\":1}}],[\"输出第二个数组的数组名\",{\"1\":{\"409\":1}}],[\"输出对应的季节\",{\"1\":{\"358\":1}}],[\"输出对应的说明文档\",{\"1\":{\"318\":1}}],[\"输出语句\",{\"1\":{\"342\":1}}],[\"输出映射是指mybatis是如何把sql语句执行结果映射为\",{\"1\":{\"256\":1}}],[\"输入wq\",{\"1\":{\"1201\":1}}],[\"输入一个冒号\",{\"1\":{\"1201\":1}}],[\"输入输出等\",{\"1\":{\"1077\":1}}],[\"输入的是一个类型\",{\"1\":{\"1040\":1}}],[\"输入参数根据流里的数据确定\",{\"1\":{\"1036\":1}}],[\"输入流\",{\"1\":{\"782\":1}}],[\"输入数值后回车\",{\"1\":{\"353\":1}}],[\"输入命令\",{\"1\":{\"307\":1}}],[\"输入命令java\",{\"1\":{\"307\":1}}],[\"输入映射中可以写什么\",{\"1\":{\"265\":1}}],[\"输入映射中的参数\",{\"1\":{\"264\":1}}],[\"输入映射可以写什么\",{\"1\":{\"264\":1}}],[\"输入映射其实就是在说mybatis是如何传值的\",{\"1\":{\"249\":1}}],[\"输入密码\",{\"1\":{\"147\":1}}],[\"输入\",{\"1\":{\"139\":1,\"779\":1}}],[\"水平制表\",{\"1\":{\"356\":1}}],[\"水平拆分成10个\",{\"1\":{\"256\":1}}],[\"水果\",{\"2\":{\"93\":1,\"98\":1,\"1067\":1,\"1072\":1,\"1165\":1,\"1170\":1}}],[\"维护了一个无界队列\",{\"1\":{\"880\":1}}],[\"维护一个无界队列\",{\"1\":{\"880\":1}}],[\"维护起来非常抓狂\",{\"1\":{\"253\":1}}],[\"维护这些索引树的成本也就提升了\",{\"1\":{\"233\":1}}],[\"模仿\",{\"1\":{\"689\":1}}],[\"模板中有才能体现在对象中\",{\"1\":{\"454\":1}}],[\"模板\",{\"1\":{\"446\":1}}],[\"模拟冲突处理流程\",{\"1\":{\"1201\":1}}],[\"模拟网络延时\",{\"1\":{\"851\":1}}],[\"模拟释放资源\",{\"1\":{\"690\":1}}],[\"模拟对人名的相关操作\",{\"1\":{\"420\":1}}],[\"模拟登陆功能\",{\"1\":{\"354\":1}}],[\"模\",{\"1\":{\"344\":1}}],[\"模块会使用自带的管理器来覆盖前面的配置\",{\"1\":{\"248\":1}}],[\"模糊匹配查找数据库\",{\"1\":{\"148\":1}}],[\"属于\",{\"1\":{\"584\":1}}],[\"属于对象\",{\"1\":{\"570\":1}}],[\"属于全体对象所共享而不是独属于某个对象的成员变量\",{\"1\":{\"478\":1}}],[\"属于类\",{\"1\":{\"474\":1}}],[\"属于同包关系\",{\"1\":{\"469\":1}}],[\"属于mybatis的底层处理\",{\"1\":{\"247\":1}}],[\"属性值\",{\"1\":{\"924\":1}}],[\"属性2=属性值\",{\"1\":{\"924\":1}}],[\"属性1=属性值\",{\"1\":{\"924\":1}}],[\"属性类型\",{\"1\":{\"924\":4}}],[\"属性列表中每个键及其对应值都是一个字符串\",{\"1\":{\"918\":1}}],[\"属性的访问还是成员方法的访问\",{\"1\":{\"557\":1}}],[\"属性的隐藏\",{\"1\":{\"553\":1}}],[\"属性隐藏\",{\"0\":{\"550\":1}}],[\"属性名=属性值\",{\"1\":{\"924\":1}}],[\"属性名\",{\"1\":{\"254\":1,\"924\":4}}],[\"属性名和属性值\",{\"1\":{\"253\":1}}],[\"属性\",{\"1\":{\"171\":1,\"307\":1,\"445\":1,\"450\":1,\"478\":1,\"515\":1,\"593\":1,\"715\":1,\"924\":3}}],[\"属性局部设置\",{\"1\":{\"29\":1}}],[\"属性改变元素的动画顺序\",{\"1\":{\"27\":1}}],[\"属性自定义幻灯片背景\",{\"1\":{\"17\":1}}],[\"映射为\",{\"1\":{\"1040\":1}}],[\"映射\",{\"1\":{\"999\":2}}],[\"映射到一个有限大小的集合\",{\"1\":{\"679\":1}}],[\"映射到对应的参数中\",{\"1\":{\"274\":1}}],[\"映射不要求元素一一对应\",{\"1\":{\"679\":1,\"999\":1}}],[\"映射的url\",{\"1\":{\"1097\":1}}],[\"映射的概念\",{\"1\":{\"679\":1}}],[\"映射的类型\",{\"1\":{\"247\":1}}],[\"映射关系\",{\"1\":{\"324\":1}}],[\"映射路径问题\",{\"1\":{\"139\":1}}],[\"采取了特殊的命名风格\",{\"1\":{\"247\":1}}],[\"采用红黑树提高效率\",{\"1\":{\"1002\":1}}],[\"采用采用银联信支付\",{\"1\":{\"720\":1}}],[\"采用采用微信支付\",{\"1\":{\"720\":1}}],[\"采用支付宝支付\",{\"1\":{\"720\":1}}],[\"采用mvc分层思想\",{\"1\":{\"601\":1}}],[\"采用isxxx\",{\"1\":{\"518\":1}}],[\"采用二分法\",{\"1\":{\"220\":1}}],[\"采用gpl授权许可\",{\"1\":{\"143\":1}}],[\"测试指定抽象路径名是否应该包含在某个路径名列表中\",{\"1\":{\"777\":1}}],[\"测试方法\",{\"1\":{\"718\":1}}],[\"测试finalize方法\",{\"0\":{\"690\":1}}],[\"测试后\",{\"1\":{\"598\":1}}],[\"测试后结果仍然是\",{\"1\":{\"557\":1}}],[\"测试以后\",{\"1\":{\"592\":1}}],[\"测试\",{\"0\":{\"285\":1,\"287\":1},\"1\":{\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":2,\"287\":1,\"1099\":1}}],[\"测试环境和生产环境等可能需要有不同的配置\",{\"1\":{\"248\":1}}],[\"测试包\",{\"1\":{\"244\":1}}],[\"测试remark\",{\"1\":{\"160\":1}}],[\"好吧\",{\"1\":{\"1137\":3}}],[\"好啊\",{\"1\":{\"1137\":6}}],[\"好的hash算法希望对于不同的输入\",{\"1\":{\"1000\":1}}],[\"好的hash算法希望的特点\",{\"0\":{\"1000\":1}}],[\"好的注释能大幅度提升团队开发效率\",{\"1\":{\"319\":1}}],[\"好在哪里呢\",{\"1\":{\"950\":1}}],[\"好在idea知道程序员们都不愿动脑筋\",{\"1\":{\"683\":1}}],[\"好兄弟\",{\"1\":{\"607\":1,\"626\":1,\"638\":1}}],[\"好处分析\",{\"1\":{\"267\":1}}],[\"好处\",{\"1\":{\"262\":1,\"936\":1}}],[\"好处是什么\",{\"1\":{\"955\":1}}],[\"好处是显而易见的\",{\"1\":{\"510\":1}}],[\"好处是\",{\"1\":{\"128\":1,\"560\":1}}],[\"好认出来\",{\"1\":{\"235\":1}}],[\"好认\",{\"1\":{\"235\":1}}],[\"命名的问题和代码抽方法的问题\",{\"1\":{\"956\":1}}],[\"命名为\",{\"1\":{\"598\":1}}],[\"命名规范\",{\"0\":{\"316\":1}}],[\"命名空间\",{\"1\":{\"234\":2,\"244\":1}}],[\"命令后\",{\"1\":{\"308\":1}}],[\"命令\",{\"0\":{\"1189\":1},\"1\":{\"209\":1}}],[\"命令行\",{\"0\":{\"187\":1}}],[\"到本地\",{\"1\":{\"1192\":1}}],[\"到达9\",{\"1\":{\"1016\":1}}],[\"到达9的时候\",{\"1\":{\"1012\":1,\"1016\":1}}],[\"到value\",{\"1\":{\"950\":1}}],[\"到此\",{\"1\":{\"867\":1}}],[\"到end\",{\"1\":{\"737\":2}}],[\"到结束的那部分字符串\",{\"1\":{\"737\":2}}],[\"到现在的秒数\",{\"1\":{\"722\":1}}],[\"到其祖先类的路径\",{\"1\":{\"533\":1}}],[\"到卸载出内存为止\",{\"1\":{\"497\":1}}],[\"到目前学习过的类加载时机\",{\"1\":{\"476\":1}}],[\"到目前为止\",{\"1\":{\"446\":1}}],[\"到目前为此\",{\"1\":{\"375\":1}}],[\"到时候再解释\",{\"1\":{\"389\":1}}],[\"到底抛不抛\",{\"1\":{\"756\":1}}],[\"到底是哪个接口的子类对象呢\",{\"1\":{\"653\":1}}],[\"到底是默认值还是数据库中为空\",{\"1\":{\"247\":1}}],[\"到底什么关系\",{\"1\":{\"614\":1}}],[\"到底谁在\",{\"1\":{\"338\":1}}],[\"到\",{\"1\":{\"234\":1,\"792\":1,\"794\":1,\"810\":1,\"993\":2,\"1026\":2}}],[\"说一下hashmap和hashtable的区别\",{\"1\":{\"1020\":1}}],[\"说出执行结果\",{\"1\":{\"588\":2}}],[\"说出程序输出的顺序\",{\"1\":{\"491\":1}}],[\"说得更准确一点\",{\"1\":{\"497\":1}}],[\"说的更清楚一点\",{\"1\":{\"480\":1}}],[\"说白了所有继承了该抽象类的对象\",{\"1\":{\"594\":1}}],[\"说白了\",{\"1\":{\"234\":1,\"496\":1,\"666\":1}}],[\"说明每一个格子的大小是固定的\",{\"1\":{\"948\":1}}],[\"说明方法没有调用\",{\"1\":{\"690\":1}}],[\"说明方法执行了\",{\"1\":{\"690\":1}}],[\"说明它没有被完全类加载\",{\"1\":{\"496\":1}}],[\"说明一下嵌套循环\",{\"1\":{\"367\":1}}],[\"说明比较牛\",{\"1\":{\"217\":1}}],[\"说明登录成功\",{\"1\":{\"204\":1}}],[\"说明\",{\"1\":{\"158\":1,\"183\":1,\"464\":1,\"465\":1,\"520\":1,\"566\":1,\"567\":1,\"658\":1,\"954\":1,\"1005\":1,\"1093\":1,\"1111\":1,\"1112\":1,\"1117\":1,\"1120\":1,\"1122\":1,\"1123\":1,\"1144\":1}}],[\"说明访问的是欢迎页面\",{\"1\":{\"139\":1}}],[\"说明访问的是root应用\",{\"1\":{\"139\":1}}],[\"底层数组默认的初始长度11\",{\"1\":{\"1020\":1}}],[\"底层结构\",{\"1\":{\"1003\":1}}],[\"底层结构是数组\",{\"1\":{\"962\":1,\"969\":1}}],[\"底层是linkedhashset\",{\"1\":{\"1037\":1}}],[\"底层是一个数组\",{\"1\":{\"970\":1}}],[\"底层是数组\",{\"1\":{\"961\":1}}],[\"底层是数组的实现\",{\"1\":{\"954\":1}}],[\"底层就是fori\",{\"1\":{\"956\":1}}],[\"底层也是iterator\",{\"1\":{\"956\":1}}],[\"底层实现\",{\"1\":{\"955\":2,\"977\":1}}],[\"底层使用valueof\",{\"1\":{\"706\":4}}],[\"底层使用的是hash表\",{\"1\":{\"220\":1}}],[\"底下层1k一行\",{\"1\":{\"233\":1}}],[\"节省空间\",{\"1\":{\"325\":1}}],[\"节点大小是16k\",{\"1\":{\"233\":1}}],[\"节约资源和简化开发\",{\"1\":{\"213\":1}}],[\"节约资源\",{\"1\":{\"213\":1}}],[\"尽量做到\",{\"1\":{\"1195\":1}}],[\"尽量避免哈希冲突\",{\"1\":{\"682\":1}}],[\"尽量避免写\",{\"1\":{\"233\":1}}],[\"尽量少给public\",{\"1\":{\"510\":1}}],[\"尽量私有化\",{\"1\":{\"510\":1,\"518\":1}}],[\"尽量不要开发同一个文件\",{\"1\":{\"1201\":1}}],[\"尽量不要使用\",{\"1\":{\"961\":1}}],[\"尽量不要将自增自减组成的表达式放在其它表达式中\",{\"1\":{\"344\":1}}],[\"尽量不要代码放置在含有空格\",{\"1\":{\"130\":1}}],[\"尽量写在where标签内部\",{\"1\":{\"264\":1}}],[\"尽量的使用包装类型\",{\"1\":{\"259\":1}}],[\"尽量使用\",{\"1\":{\"255\":1}}],[\"尽量使用主键查询\",{\"1\":{\"233\":1}}],[\"尽量用包装类\",{\"1\":{\"247\":1}}],[\"遍历列表\",{\"1\":{\"1048\":1}}],[\"遍历元素\",{\"1\":{\"1048\":1}}],[\"遍历流\",{\"1\":{\"1048\":1}}],[\"遍历map的key\",{\"1\":{\"997\":1}}],[\"遍历map的方式\",{\"1\":{\"994\":1}}],[\"遍历collection接口的时候\",{\"1\":{\"956\":1}}],[\"遍历这个迭代器\",{\"1\":{\"956\":1}}],[\"遍历新集合\",{\"1\":{\"956\":1}}],[\"遍历原有集合\",{\"1\":{\"956\":1}}],[\"遍历\",{\"1\":{\"953\":1,\"956\":1}}],[\"遍历使用的非常多\",{\"1\":{\"951\":1}}],[\"遍历字符串数组\",{\"1\":{\"739\":1}}],[\"遍历获取字符串中的每一个字符\",{\"1\":{\"737\":2}}],[\"遍历装了具体元素的一维数组\",{\"1\":{\"441\":1}}],[\"遍历数组\",{\"1\":{\"441\":1,\"776\":2}}],[\"遍历的过程也会更复杂\",{\"1\":{\"440\":1}}],[\"遍历其他元素\",{\"1\":{\"418\":1}}],[\"遍历整个主键索引树\",{\"1\":{\"233\":1}}],[\"遍历每一行\",{\"1\":{\"110\":1}}],[\"尝试一个可能抛出异常的程序块\",{\"1\":{\"312\":1}}],[\"尝试建索引\",{\"1\":{\"232\":1}}],[\"尝试把这两个项目起起来了\",{\"1\":{\"212\":1}}],[\"覆盖重新开始写\",{\"1\":{\"789\":1}}],[\"覆盖了\",{\"1\":{\"231\":1}}],[\"覆盖索引\",{\"0\":{\"231\":1}}],[\"避免从队列中获取数据的时候\",{\"1\":{\"970\":1}}],[\"避免单继承的局限\",{\"1\":{\"606\":1}}],[\"避免栈溢出错误\",{\"1\":{\"442\":1}}],[\"避免导致方法调用失效情况出现\",{\"1\":{\"423\":1}}],[\"避免空指针异常是java程序员的必修课之一\",{\"1\":{\"412\":1}}],[\"避免写select\",{\"1\":{\"267\":1}}],[\"避免出错\",{\"1\":{\"264\":1}}],[\"避免回表过程呢\",{\"1\":{\"230\":1}}],[\"避免过度使用索引导致数据库性能下降\",{\"1\":{\"218\":1}}],[\"条记录\",{\"1\":{\"230\":1}}],[\"条件要苛刻的多\",{\"1\":{\"617\":1}}],[\"条件会更加很苛刻\",{\"1\":{\"529\":1}}],[\"条件判断语句后面的分号不能省略\",{\"1\":{\"364\":1}}],[\"条件判断语句省略后\",{\"1\":{\"362\":1}}],[\"条件判断语句的结果是一个布尔类型的值\",{\"1\":{\"362\":1}}],[\"条件判断语句\",{\"1\":{\"361\":2,\"362\":3,\"363\":1,\"364\":1}}],[\"条件表达式\",{\"1\":{\"349\":1}}],[\"条件为真\",{\"1\":{\"347\":2}}],[\"条件才为真\",{\"1\":{\"347\":2}}],[\"条件语句的引导词\",{\"1\":{\"312\":1}}],[\"条件\",{\"0\":{\"162\":1},\"1\":{\"160\":1,\"161\":1,\"162\":2,\"168\":2,\"350\":1}}],[\"回退用的多不多\",{\"1\":{\"1202\":1}}],[\"回退到工作区\",{\"1\":{\"1202\":1}}],[\"回退的内容\",{\"1\":{\"1202\":1}}],[\"回过头执行try中的return\",{\"1\":{\"760\":1}}],[\"回答输出结果\",{\"1\":{\"706\":1,\"707\":1}}],[\"回答注释问题\",{\"1\":{\"573\":1}}],[\"回想一下我们之前学过的方法的重载\",{\"1\":{\"563\":1}}],[\"回车\",{\"1\":{\"356\":1,\"499\":1}}],[\"回车等\",{\"1\":{\"315\":1}}],[\"回到new对象的类中\",{\"1\":{\"546\":1}}],[\"回到上面那个案例\",{\"1\":{\"389\":1}}],[\"回到一个块的开始处\",{\"1\":{\"312\":1}}],[\"回到主键索引树搜索的过程\",{\"1\":{\"230\":1}}],[\"回主键索引树\",{\"1\":{\"230\":2}}],[\"回表了两次\",{\"1\":{\"230\":1}}],[\"回表了一次\",{\"1\":{\"230\":1}}],[\"回表\",{\"0\":{\"230\":1},\"1\":{\"233\":2}}],[\"回滚事务\",{\"1\":{\"209\":3}}],[\"意味文件里读取完了\",{\"1\":{\"794\":1}}],[\"意味着应用程序启动的时候初始化\",{\"1\":{\"1096\":1}}],[\"意味着在service方法\",{\"1\":{\"1094\":1}}],[\"意味着放访问该servlet路径的时候\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"意味着程序具有了动态性\",{\"1\":{\"662\":1}}],[\"意味着一个表可以有多个索引树\",{\"1\":{\"224\":1}}],[\"意译过来\",{\"1\":{\"700\":1}}],[\"意思就是提交了事务之后\",{\"1\":{\"210\":1}}],[\"基础使用\",{\"1\":{\"951\":1}}],[\"基础的结构是这样的\",{\"1\":{\"949\":1}}],[\"基类\",{\"1\":{\"522\":1}}],[\"基本上可以不使用了\",{\"1\":{\"1098\":1}}],[\"基本没提过线程安全\",{\"1\":{\"987\":1}}],[\"基本对这个接口的一些基本行为有一个认知\",{\"1\":{\"951\":1}}],[\"基本就挂了\",{\"1\":{\"948\":1}}],[\"基本获取功能\",{\"0\":{\"775\":1}}],[\"基本介绍\",{\"0\":{\"728\":1},\"1\":{\"728\":1}}],[\"基本类型和void\",{\"1\":{\"605\":1}}],[\"基本类型\",{\"1\":{\"603\":1,\"604\":1}}],[\"基本语法\",{\"1\":{\"474\":1,\"475\":1,\"756\":1,\"757\":1}}],[\"基本概念\",{\"0\":{\"424\":1,\"455\":1,\"575\":1},\"1\":{\"608\":1}}],[\"基本使用\",{\"0\":{\"422\":1,\"648\":1,\"653\":1,\"718\":1},\"1\":{\"517\":1,\"863\":1,\"881\":1}}],[\"基本的赋值运算符\",{\"1\":{\"345\":1}}],[\"基本数据类型名value\",{\"1\":{\"703\":1}}],[\"基本数据类型与包装类型的相互转换\",{\"0\":{\"703\":1}}],[\"基本数据类型与引用数据类型有什么区别\",{\"0\":{\"406\":1}}],[\"基本数据类型存在类型转换\",{\"1\":{\"524\":1}}],[\"基本数据类型不能等于null\",{\"1\":{\"407\":1}}],[\"基本数据类型不存在引用的概念\",{\"1\":{\"406\":1}}],[\"基本数据类型和引用类型的引用\",{\"1\":{\"407\":1}}],[\"基本数据类型和基本数据类型比\",{\"1\":{\"346\":1}}],[\"基本数据类型的变量必然都是局部变量\",{\"1\":{\"406\":1}}],[\"基本数据类型的数值类型和char是可以相互比较的\",{\"1\":{\"346\":1}}],[\"基本数据类型的数值类型的比较\",{\"1\":{\"346\":1}}],[\"基本数据类型的数据类型转换必须在byte\",{\"1\":{\"337\":1}}],[\"基本数据类型的类型转换\",{\"1\":{\"341\":1}}],[\"基本数据类型中的整型和浮点型都是表示纯粹的数值的\",{\"1\":{\"326\":1}}],[\"基本数据类型\",{\"0\":{\"321\":1},\"1\":{\"321\":1,\"326\":1,\"406\":1,\"701\":1,\"924\":1}}],[\"基本数据类型之一\",{\"1\":{\"312\":8}}],[\"基本不会再涉及到\",{\"1\":{\"1121\":1}}],[\"基本不会出问题\",{\"1\":{\"324\":1}}],[\"基本不会使用\",{\"1\":{\"283\":1}}],[\"基本不用\",{\"1\":{\"221\":1}}],[\"基于某个编码表\",{\"1\":{\"798\":1}}],[\"基于x类或x接口的匿名内部类对象\",{\"1\":{\"649\":2}}],[\"基于数据的一组合法操作\",{\"1\":{\"540\":1}}],[\"基于数据的操作\",{\"1\":{\"523\":1}}],[\"基于已存在的类创建新的类\",{\"1\":{\"520\":1}}],[\"基于等号扩展而来的扩展赋值运算符\",{\"1\":{\"345\":1}}],[\"基于hadoop提供的分布式计算框架\",{\"1\":{\"303\":1}}],[\"基于内存的key\",{\"1\":{\"144\":1}}],[\"基于web的应用程序管理功能\",{\"1\":{\"143\":1}}],[\"亲儿子\",{\"1\":{\"221\":1}}],[\"叶子节点之间维护一个指针\",{\"1\":{\"220\":1}}],[\"树就是左小右大\",{\"1\":{\"1016\":1}}],[\"树\",{\"1\":{\"947\":1}}],[\"树的高度降低了之后\",{\"1\":{\"220\":1}}],[\"树的高度降低了\",{\"1\":{\"220\":1}}],[\"树的高度是20\",{\"1\":{\"220\":1}}],[\"树的高度会升高\",{\"1\":{\"220\":1}}],[\"树形模型\",{\"1\":{\"142\":1}}],[\"历史数据\",{\"1\":{\"220\":2,\"228\":1}}],[\"二进制的计算\",{\"1\":{\"959\":1}}],[\"二叉树\",{\"1\":{\"947\":1}}],[\"二叉搜索树\",{\"1\":{\"220\":2}}],[\"二级制\",{\"1\":{\"798\":1}}],[\"二级缓存空间对于用户来说是完全透明的\",{\"1\":{\"287\":1}}],[\"二级缓存有没有用呢\",{\"1\":{\"287\":1}}],[\"二级缓存中无对应数据\",{\"1\":{\"286\":1}}],[\"二级缓存是在namespace级别下的缓存\",{\"1\":{\"287\":1}}],[\"二级缓存是\",{\"1\":{\"286\":1}}],[\"二级缓存是一个namespace级别\",{\"1\":{\"286\":1}}],[\"二级缓存开关配置\",{\"1\":{\"286\":1}}],[\"二级缓存\",{\"0\":{\"286\":1}}],[\"二\",{\"1\":{\"642\":1}}],[\"二维数组因为本身比一维数组复杂\",{\"1\":{\"440\":1}}],[\"二维数组使用双层for循环去遍历\",{\"1\":{\"440\":1}}],[\"二维数组中有关长度的\",{\"1\":{\"436\":1}}],[\"二维数组\",{\"1\":{\"434\":1}}],[\"二维数组名\",{\"1\":{\"433\":3,\"434\":6,\"436\":2,\"437\":1,\"438\":1}}],[\"二维数组在计算机领域的应用也大多和矩阵相关\",{\"1\":{\"431\":1}}],[\"二维数组很像线性代数中的矩阵\",{\"1\":{\"431\":1}}],[\"二维数组和一维数组有本质区别吗\",{\"1\":{\"430\":1}}],[\"二维数组的遍历\",{\"1\":{\"440\":2}}],[\"二维数组的基本操作\",{\"0\":{\"435\":1}}],[\"二维数组的基本概念\",{\"0\":{\"428\":1}}],[\"二维数组的静态初始化语法\",{\"1\":{\"434\":1}}],[\"二维数组的初始化\",{\"1\":{\"434\":1}}],[\"二维数组的声明应该用上述格式一\",{\"1\":{\"433\":1}}],[\"二维数组的声明\",{\"1\":{\"433\":1}}],[\"二维数组的声明和初始化\",{\"0\":{\"432\":1}}],[\"二维数组的理解\",{\"0\":{\"431\":1}}],[\"二维数组的数据类型由其中一维数组的类型决定\",{\"1\":{\"430\":1}}],[\"二维数组的实质\",{\"1\":{\"430\":1}}],[\"二维数组的本质\",{\"0\":{\"430\":1}}],[\"二维数组的引入\",{\"0\":{\"429\":1}}],[\"二分法\",{\"1\":{\"419\":1}}],[\"二班学生成绩\",{\"1\":{\"431\":1}}],[\"二班\",{\"1\":{\"161\":3,\"162\":2,\"185\":2,\"278\":1}}],[\"链式调用的本质在于\",{\"1\":{\"606\":1}}],[\"链式调用\",{\"0\":{\"606\":1},\"1\":{\"606\":1}}],[\"链表直接调用next\",{\"1\":{\"1016\":1}}],[\"链表长度超过8\",{\"1\":{\"1016\":1}}],[\"链表长度如果过长\",{\"1\":{\"1016\":1}}],[\"链表长度已经超过8\",{\"1\":{\"1012\":1}}],[\"链表长度\",{\"1\":{\"1011\":1}}],[\"链表什么时候转化为红黑树\",{\"0\":{\"1011\":1}}],[\"链表是必不可少的\",{\"1\":{\"1002\":1}}],[\"链表是一个线型的\",{\"1\":{\"949\":1}}],[\"链表太长了有什么问题\",{\"1\":{\"1002\":1}}],[\"链表的插入数据\",{\"1\":{\"957\":1}}],[\"链表的插入数据流程\",{\"1\":{\"949\":1}}],[\"链表的iterator里面维护的是指针\",{\"1\":{\"955\":1}}],[\"链表的查找数据流程\",{\"1\":{\"949\":1}}],[\"链表的删除数据流程\",{\"1\":{\"949\":1}}],[\"链表\",{\"0\":{\"949\":1},\"1\":{\"220\":3,\"955\":1}}],[\"链接\",{\"1\":{\"45\":1,\"57\":1,\"910\":1}}],[\"特定的方法做的事情\",{\"1\":{\"1123\":1}}],[\"特殊响应头\",{\"0\":{\"1125\":1}}],[\"特殊信息\",{\"0\":{\"1114\":1}}],[\"特殊值\",{\"1\":{\"975\":2}}],[\"特殊方法\",{\"1\":{\"953\":1,\"981\":1}}],[\"特殊情况\",{\"1\":{\"760\":1}}],[\"特殊情况下\",{\"1\":{\"461\":1,\"544\":1,\"654\":1}}],[\"特殊操作\",{\"1\":{\"719\":1}}],[\"特殊\",{\"1\":{\"655\":1}}],[\"特殊的响应报文\",{\"1\":{\"1142\":1}}],[\"特殊的几个响应头\",{\"1\":{\"1125\":1}}],[\"特殊的\",{\"1\":{\"340\":1,\"654\":1}}],[\"特殊的二叉搜索树\",{\"1\":{\"220\":1}}],[\"特点和使用\",{\"0\":{\"598\":1}}],[\"特点和使用方式也会随之产生差异\",{\"1\":{\"402\":1}}],[\"特点\",{\"0\":{\"952\":1,\"957\":1,\"962\":1,\"966\":1,\"971\":1,\"974\":1,\"977\":1,\"980\":1,\"996\":1,\"1003\":1,\"1020\":1},\"1\":{\"592\":1,\"760\":1,\"880\":3,\"951\":1}}],[\"特点与使用\",{\"0\":{\"592\":1}}],[\"特点快\",{\"1\":{\"283\":1}}],[\"特别是涉及到web开发\",{\"1\":{\"1077\":1}}],[\"特别是对于大型数据表和复杂查询语句的情况下\",{\"1\":{\"218\":1}}],[\"特别强调一点\",{\"1\":{\"642\":1}}],[\"特别强调\",{\"1\":{\"598\":1,\"663\":1}}],[\"特别的\",{\"1\":{\"442\":1}}],[\"特别注意\",{\"1\":{\"382\":1}}],[\"特别需要注意的是\",{\"1\":{\"378\":1}}],[\"特别慢\",{\"1\":{\"232\":1}}],[\"特性\",{\"0\":{\"210\":1}}],[\"拿成员变量为例\",{\"1\":{\"477\":1}}],[\"拿回来一个resultset对象\",{\"1\":{\"234\":1}}],[\"拿id=500的数据\",{\"1\":{\"230\":1}}],[\"拿到字节数据的话就可以通过outputstream做写出了\",{\"1\":{\"1120\":1}}],[\"拿到方法对象\",{\"1\":{\"923\":1,\"924\":1}}],[\"拿到k=6\",{\"1\":{\"230\":1}}],[\"拿到id=500\",{\"1\":{\"230\":1}}],[\"拿到id=300\",{\"1\":{\"230\":1}}],[\"拿到一个resultset\",{\"1\":{\"201\":1}}],[\"拿什么字段\",{\"1\":{\"230\":1}}],[\"拿这个报错去搜索引擎搜索搜索\",{\"1\":{\"215\":1}}],[\"遇到一些问题\",{\"1\":{\"1100\":1}}],[\"遇到这类问题\",{\"1\":{\"214\":1}}],[\"遇到了一个statement接口\",{\"1\":{\"201\":1}}],[\"无效\",{\"1\":{\"1203\":1}}],[\"无意讲太多计算机网络的基础知识和概念\",{\"1\":{\"885\":1}}],[\"无限期地等待另一个线程来执行某一特定操作的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"无限制的递归调用方法\",{\"1\":{\"442\":1}}],[\"无限制的递归下去\",{\"1\":{\"442\":1}}],[\"无穷\",{\"1\":{\"1040\":2}}],[\"无穷小很多特殊的概念\",{\"1\":{\"675\":1}}],[\"无穷大\",{\"1\":{\"675\":1}}],[\"无返回值两个参数的功能接口\",{\"1\":{\"654\":1}}],[\"无返回值有一个参数的功能接口\",{\"1\":{\"654\":1}}],[\"无返回值无参数的功能接口\",{\"1\":{\"654\":1}}],[\"无条件地访问外部类的所有元素\",{\"1\":{\"643\":1}}],[\"无所谓\",{\"1\":{\"561\":1,\"563\":3}}],[\"无必要的则无需提供\",{\"1\":{\"516\":1}}],[\"无须知道手机内部时如何工作的\",{\"1\":{\"512\":1}}],[\"无参构造\",{\"1\":{\"655\":1}}],[\"无参构造器当中使用了以下代码来获取一个毫秒值\",{\"1\":{\"723\":1}}],[\"无参构造器是不能给成员变量赋值的\",{\"1\":{\"541\":1}}],[\"无参构造器\",{\"1\":{\"498\":1}}],[\"无参构造方法\",{\"1\":{\"465\":1}}],[\"无参\",{\"1\":{\"466\":1}}],[\"无参的构造方法执行了\",{\"1\":{\"465\":1}}],[\"无法解决循环引用的问题\",{\"1\":{\"927\":1}}],[\"无法控制gc的时间\",{\"1\":{\"925\":1}}],[\"无法做到\",{\"1\":{\"825\":1}}],[\"无法在编译期确定其值\",{\"1\":{\"735\":1}}],[\"无法在循环外使用\",{\"1\":{\"377\":1}}],[\"无法强转\",{\"1\":{\"648\":1}}],[\"无法直接输出它\",{\"1\":{\"544\":1}}],[\"无法发生类型转换\",{\"1\":{\"525\":1}}],[\"无法改变局部变量\",{\"1\":{\"470\":1}}],[\"无法进行任何操作\",{\"1\":{\"413\":1}}],[\"无需再手动调用方法\",{\"1\":{\"703\":2}}],[\"无需再写强制类型转换的语法\",{\"1\":{\"345\":1}}],[\"无需子类实现\",{\"1\":{\"652\":1}}],[\"无需考虑是何种对象\",{\"1\":{\"553\":1}}],[\"无需程序员写额外代码\",{\"1\":{\"528\":1}}],[\"无需创建对象就可以直接通过类名点直接调用\",{\"1\":{\"475\":1}}],[\"无需创建对象使用\",{\"1\":{\"474\":1}}],[\"无需花费大量精力来管理堆内存\",{\"1\":{\"407\":1}}],[\"无需经过其它元素\",{\"1\":{\"394\":1}}],[\"无需加\",{\"1\":{\"376\":1}}],[\"无需加大括号\",{\"1\":{\"359\":1}}],[\"无注解\",{\"1\":{\"253\":1}}],[\"无人维护\",{\"1\":{\"214\":1}}],[\"无论c1中有多少个元素\",{\"1\":{\"953\":1}}],[\"无论子类定义泛型与否\",{\"1\":{\"940\":1}}],[\"无论通过什么方式获取的字节码文件对象\",{\"1\":{\"916\":1}}],[\"无论私有\",{\"1\":{\"607\":1}}],[\"无论引用指向的对象\",{\"1\":{\"586\":1}}],[\"无论你是张三或者李四\",{\"1\":{\"478\":1}}],[\"无论成员变量还是成员方法\",{\"1\":{\"453\":1}}],[\"无论如何都至少要执行一次\",{\"1\":{\"364\":1}}],[\"无论是java还是c++中\",{\"1\":{\"689\":1}}],[\"无论是构造代码块\",{\"1\":{\"592\":1}}],[\"无论是隐式还是显式子类对象初始化\",{\"1\":{\"546\":1}}],[\"无论是静态成员变量还是成员变量\",{\"1\":{\"479\":1}}],[\"无论是1还是2都需要类型转换才能匹配\",{\"1\":{\"389\":1}}],[\"无论是for\",{\"1\":{\"361\":1}}],[\"无论是什么if结构\",{\"1\":{\"358\":1}}],[\"无论是正数负数\",{\"1\":{\"348\":1}}],[\"无论是单行注释还是多行注释\",{\"1\":{\"318\":1}}],[\"无论原先的数是正是负\",{\"1\":{\"348\":1}}],[\"无论怎么转账\",{\"1\":{\"210\":1}}],[\"无论存储多少长度的字符串\",{\"1\":{\"153\":1}}],[\"无论题目怎么要求\",{\"1\":{\"149\":1}}],[\"无论使用哪个软件\",{\"1\":{\"130\":1}}],[\"扩2倍\",{\"1\":{\"1013\":1}}],[\"扩容是2倍\",{\"1\":{\"1016\":1}}],[\"扩容后的位置问题\",{\"1\":{\"1016\":1}}],[\"扩容后的位置\",{\"1\":{\"1016\":1}}],[\"扩容后位置问题\",{\"0\":{\"1013\":1}}],[\"扩容2倍\",{\"1\":{\"1016\":1}}],[\"扩容的时候\",{\"1\":{\"1014\":1}}],[\"扩容之后会落到新数组的什么位置\",{\"1\":{\"1013\":1}}],[\"扩容会导致原本存在于这个位置的数据\",{\"1\":{\"1012\":1}}],[\"扩容\",{\"1\":{\"1012\":1}}],[\"扩容机制2倍\",{\"1\":{\"1005\":1}}],[\"扩容机制是2倍\",{\"1\":{\"1003\":1}}],[\"扩容机制\",{\"1\":{\"978\":1}}],[\"扩容策略\",{\"1\":{\"956\":1}}],[\"扩容数量的优化\",{\"1\":{\"213\":1}}],[\"扩展类加载器\",{\"1\":{\"912\":2}}],[\"扩展一点\",{\"1\":{\"530\":1}}],[\"扩展一下\",{\"1\":{\"324\":1}}],[\"扩展的赋值运算符隐含强制类型转换\",{\"1\":{\"345\":1}}],[\"扩展\",{\"0\":{\"54\":1,\"55\":1},\"1\":{\"55\":1,\"394\":1,\"520\":1,\"663\":1}}],[\"放在webapp目录下\",{\"1\":{\"1131\":1}}],[\"放在循环体语句中\",{\"1\":{\"362\":1}}],[\"放入到cookie中\",{\"1\":{\"1148\":1}}],[\"放入到tomcat下的webapp目录里是可以访问的\",{\"1\":{\"1082\":1}}],[\"放入配置\",{\"0\":{\"1094\":1},\"1\":{\"1093\":1}}],[\"放入构造代码块中\",{\"1\":{\"490\":1}}],[\"放配置信息的\",{\"1\":{\"918\":1}}],[\"放弃锁对象持有\",{\"1\":{\"873\":1}}],[\"放进去通知消费者吃\",{\"1\":{\"867\":1}}],[\"放进去\",{\"1\":{\"867\":1}}],[\"放回池子\",{\"1\":{\"213\":1}}],[\"放给第二个\",{\"1\":{\"184\":1}}],[\"池化技术是一种非常有用的技术\",{\"1\":{\"213\":1}}],[\"池化技术会自动将其标记为无效实例\",{\"1\":{\"213\":1}}],[\"池化技术可以通过配置文件或代码来管理资源实例\",{\"1\":{\"213\":1}}],[\"池化技术可以限制资源实例的数量\",{\"1\":{\"213\":1}}],[\"池化技术可以监控资源实例的状态\",{\"1\":{\"213\":1}}],[\"池化技术可以避免频繁地创建和销毁资源实例\",{\"1\":{\"213\":1}}],[\"池化技术的好处包括\",{\"1\":{\"213\":1}}],[\"池化技术\",{\"1\":{\"213\":2}}],[\"池化思想\",{\"1\":{\"213\":1,\"217\":1}}],[\"允许存储null\",{\"1\":{\"956\":1,\"1003\":1}}],[\"允许存储重复元素\",{\"1\":{\"956\":1}}],[\"允许接收\",{\"1\":{\"944\":1}}],[\"允许接收该类及该类的父类\",{\"1\":{\"944\":1}}],[\"允许接收该类及该类的子类\",{\"1\":{\"944\":1}}],[\"允许\",{\"1\":{\"939\":1}}],[\"允许卖\",{\"1\":{\"851\":1}}],[\"允许出现多对一\",{\"1\":{\"679\":1,\"999\":1}}],[\"允许定义字面值常量赋值的全局常量\",{\"1\":{\"612\":1}}],[\"允许访问\",{\"1\":{\"505\":1}}],[\"允许用户直接使用jdbc编程技术\",{\"1\":{\"213\":1}}],[\"允许为空\",{\"1\":{\"170\":1}}],[\"驱动的开销\",{\"1\":{\"213\":1}}],[\"驱动管理器\",{\"1\":{\"199\":1}}],[\"锦上添花\",{\"1\":{\"212\":1}}],[\"未付款\",{\"1\":{\"956\":1}}],[\"未指定泛型\",{\"1\":{\"940\":1}}],[\"未支付\",{\"1\":{\"721\":1}}],[\"未实现哪些功能\",{\"1\":{\"213\":1}}],[\"未提交变更对其他事务也是不可见的\",{\"1\":{\"211\":1}}],[\"未修改\",{\"1\":{\"120\":1}}],[\"读入缓冲区的总字节数\",{\"1\":{\"792\":1,\"794\":1}}],[\"读作goes\",{\"1\":{\"653\":1}}],[\"读程序题\",{\"1\":{\"491\":1}}],[\"读程序\",{\"1\":{\"359\":1,\"564\":1,\"573\":1}}],[\"读已提交\",{\"1\":{\"212\":2}}],[\"读未提交\",{\"1\":{\"212\":2}}],[\"读未提交是指\",{\"1\":{\"211\":1}}],[\"读锁\",{\"1\":{\"211\":1}}],[\"读\",{\"1\":{\"211\":1,\"779\":1}}],[\"读提交是指\",{\"1\":{\"211\":1}}],[\"读取properties文件\",{\"1\":{\"1026\":1}}],[\"读取出来的是1\",{\"1\":{\"952\":1}}],[\"读取class文件到数组里\",{\"1\":{\"923\":1}}],[\"读取对象\",{\"1\":{\"824\":1}}],[\"读取\",{\"1\":{\"823\":1,\"923\":1}}],[\"读取的\",{\"1\":{\"824\":1}}],[\"读取的时候要按照相同的顺序\",{\"1\":{\"817\":1}}],[\"读取的字符数\",{\"1\":{\"810\":1}}],[\"读取一个文本行\",{\"1\":{\"814\":1}}],[\"读取字节并将其解码为字符\",{\"1\":{\"812\":1}}],[\"读取到内存\",{\"1\":{\"910\":1}}],[\"读取到的字符的个数\",{\"1\":{\"810\":1}}],[\"读取到的字符值\",{\"1\":{\"810\":1}}],[\"读取到了另外一个事务插入或者删除的数据\",{\"1\":{\"211\":1}}],[\"读取到了另外一个事务已经提交的数据\",{\"1\":{\"211\":1}}],[\"读取源文件\",{\"1\":{\"796\":1}}],[\"读取数据填充到数组\",{\"1\":{\"795\":2}}],[\"读取数据的步骤\",{\"1\":{\"794\":1}}],[\"读取单个字符\",{\"1\":{\"810\":1,\"812\":1}}],[\"读取单个字节\",{\"1\":{\"795\":1}}],[\"读取单字节\",{\"1\":{\"794\":1}}],[\"读取不存在的文件\",{\"1\":{\"746\":1}}],[\"读取进jvm内存中的方法区实现的\",{\"1\":{\"456\":1}}],[\"读取配置文件\",{\"1\":{\"234\":1,\"244\":1}}],[\"读取同一个表数据\",{\"1\":{\"211\":1}}],[\"读取同一个数据\",{\"1\":{\"211\":1}}],[\"幻读\",{\"1\":{\"211\":2}}],[\"幻灯片演示\",{\"0\":{\"3\":1}}],[\"幻灯片页\",{\"0\":{\"2\":1}}],[\"脏读\",{\"1\":{\"211\":1}}],[\"互不影响\",{\"1\":{\"851\":2}}],[\"互不影响的\",{\"1\":{\"210\":1}}],[\"互相不干扰\",{\"1\":{\"828\":1}}],[\"互相访问\",{\"1\":{\"626\":1}}],[\"互相访问成员都不受访问权限限制\",{\"1\":{\"607\":1}}],[\"互联网\",{\"1\":{\"303\":1}}],[\"互为一对多\",{\"1\":{\"174\":1}}],[\"隔离级别\",{\"0\":{\"211\":1},\"1\":{\"212\":1}}],[\"隔离性\",{\"1\":{\"210\":1}}],[\"隔开\",{\"1\":{\"114\":1,\"119\":1,\"316\":1,\"499\":1,\"568\":1,\"717\":1,\"924\":1}}],[\"殿熙\",{\"1\":{\"209\":1}}],[\"浩铭\",{\"1\":{\"209\":2}}],[\"扣a的钱\",{\"1\":{\"209\":1}}],[\"扣500\",{\"1\":{\"208\":1}}],[\"扣zs的钱\",{\"1\":{\"208\":1}}],[\"转发的请求之间数据共享\",{\"1\":{\"1121\":1}}],[\"转发的两个请求之间的数据共享\",{\"1\":{\"1121\":1}}],[\"转化为\",{\"1\":{\"1040\":1}}],[\"转化流可以指定的字符集\",{\"1\":{\"813\":1}}],[\"转而执行jvm自己的错误处理流程\",{\"1\":{\"749\":1}}],[\"转而继续执行后面的循环\",{\"1\":{\"377\":1}}],[\"转为字符数组\",{\"1\":{\"738\":1}}],[\"转为小写的\",{\"1\":{\"738\":1}}],[\"转移字符最重要的用途是\",{\"1\":{\"355\":1}}],[\"转换\",{\"0\":{\"1040\":1}}],[\"转换到另外一个类型\",{\"1\":{\"942\":1}}],[\"转换器\",{\"1\":{\"942\":1}}],[\"转换器接口\",{\"1\":{\"942\":1}}],[\"转换相关\",{\"1\":{\"824\":1}}],[\"转换流是简化流的父类\",{\"1\":{\"813\":1}}],[\"转换流麻烦\",{\"1\":{\"813\":1}}],[\"转换流vs简化流\",{\"1\":{\"813\":1}}],[\"转换大写\",{\"1\":{\"738\":1}}],[\"转换功能\",{\"0\":{\"738\":1},\"1\":{\"738\":2}}],[\"转换工具\",{\"1\":{\"724\":1}}],[\"转换的是什么\",{\"0\":{\"526\":1}}],[\"转换为大写\",{\"1\":{\"705\":1}}],[\"转换为小写\",{\"1\":{\"705\":1}}],[\"转换为其对应基本数据类型变量\",{\"1\":{\"703\":1}}],[\"转换为其对应包装类的引用数据类型变量\",{\"1\":{\"703\":1}}],[\"转换为\",{\"1\":{\"338\":1}}],[\"转换成一个十进制的数字来实现的\",{\"1\":{\"667\":1}}],[\"转换成int接收即可\",{\"1\":{\"353\":1}}],[\"转换成了什么数据类型\",{\"1\":{\"337\":1}}],[\"转换成二进制\",{\"1\":{\"336\":1}}],[\"转义字符的作用是什么\",{\"1\":{\"355\":1}}],[\"转义字符\",{\"1\":{\"265\":1,\"356\":1}}],[\"转500\",{\"1\":{\"208\":1}}],[\"转成二进制\",{\"1\":{\"121\":1}}],[\"账户余额表\",{\"1\":{\"208\":1}}],[\"时没有持有适当的锁\",{\"1\":{\"868\":2}}],[\"时刻\",{\"1\":{\"827\":1}}],[\"时区缩写\",{\"1\":{\"724\":1}}],[\"时的访问特征\",{\"1\":{\"578\":1}}],[\"时\",{\"1\":{\"353\":2,\"412\":1,\"578\":1,\"604\":1,\"674\":1,\"688\":1,\"928\":1}}],[\"时间复杂度\",{\"1\":{\"1026\":1}}],[\"时间复杂度是常数级别的o\",{\"1\":{\"394\":1}}],[\"时间戳本身是一个比较复杂的概念\",{\"1\":{\"722\":1}}],[\"时间戳\",{\"0\":{\"722\":1},\"1\":{\"724\":1}}],[\"时间和空间复杂度都不占优势\",{\"1\":{\"442\":1}}],[\"时间\",{\"1\":{\"207\":1,\"1093\":1}}],[\"时分秒\",{\"1\":{\"153\":1,\"844\":3}}],[\"循环缓冲区等场景中\",{\"1\":{\"976\":1}}],[\"循环数组的空间利用率也相对较高\",{\"1\":{\"976\":1}}],[\"循环数组可以有效地实现元素的循环存储和遍历\",{\"1\":{\"976\":1}}],[\"循环数组在实际应用中具有一定的优势\",{\"1\":{\"976\":1}}],[\"循环数组\",{\"1\":{\"976\":1,\"978\":1}}],[\"循环读取数据\",{\"1\":{\"794\":1}}],[\"循环读取\",{\"1\":{\"794\":1}}],[\"循环结束\",{\"1\":{\"737\":2,\"905\":2}}],[\"循环结构主要包括三种实现方式\",{\"1\":{\"361\":1}}],[\"循环结构\",{\"0\":{\"361\":1},\"1\":{\"356\":1}}],[\"循环结构的使用\",{\"1\":{\"356\":1}}],[\"循环会从int类型最大值循环到int类型最小值\",{\"1\":{\"700\":1}}],[\"循环求n的阶乘\",{\"1\":{\"442\":1}}],[\"循环必然也终止了\",{\"1\":{\"378\":1}}],[\"循环语句中\",{\"1\":{\"376\":1}}],[\"循环是可以嵌套定义的\",{\"1\":{\"367\":1}}],[\"循环体\",{\"1\":{\"366\":2}}],[\"循环体语句如果是一条语句\",{\"1\":{\"362\":1}}],[\"循环体语句\",{\"1\":{\"361\":2,\"362\":4,\"363\":1,\"364\":1}}],[\"循环虽然有终止条件\",{\"1\":{\"362\":1}}],[\"循环就没有终止条件了\",{\"1\":{\"362\":1}}],[\"循环不能终止\",{\"1\":{\"361\":1}}],[\"循环终止\",{\"1\":{\"361\":1,\"362\":2,\"364\":2}}],[\"循环继续\",{\"1\":{\"361\":1}}],[\"循环控制语句省略后\",{\"1\":{\"362\":1}}],[\"循环控制语句都不是必须的\",{\"1\":{\"362\":1}}],[\"循环控制语句\",{\"1\":{\"361\":2,\"362\":3,\"363\":1,\"364\":1}}],[\"循环控制变量仍要初始化\",{\"1\":{\"362\":1}}],[\"循环控制变量\",{\"1\":{\"361\":1}}],[\"循环中的元素名\",{\"1\":{\"271\":1}}],[\"循环的时候\",{\"1\":{\"271\":1}}],[\"循环\",{\"1\":{\"207\":1,\"213\":1,\"737\":2,\"794\":1,\"903\":2}}],[\"开源\",{\"1\":{\"1200\":1}}],[\"开源的仓库\",{\"1\":{\"1200\":1}}],[\"开个玩笑的说法\",{\"1\":{\"532\":1}}],[\"开头\",{\"1\":{\"336\":2}}],[\"开头结尾\",{\"1\":{\"316\":1}}],[\"开发对应的请求\",{\"1\":{\"1134\":1}}],[\"开发的servlet的url\",{\"1\":{\"1132\":1}}],[\"开发userservlet\",{\"1\":{\"1131\":1}}],[\"开发\",{\"1\":{\"1099\":1}}],[\"开发过程中使用servletcontext实例\",{\"1\":{\"1095\":1}}],[\"开发好的servlet和资源文件\",{\"1\":{\"1082\":1}}],[\"开发人员可以处理http请求\",{\"1\":{\"1078\":1}}],[\"开发人员需要根据实际需求选择合适的索引类型\",{\"1\":{\"218\":1}}],[\"开发工具\",{\"1\":{\"1076\":1}}],[\"开发工具包\",{\"1\":{\"304\":1}}],[\"开发效率低\",{\"1\":{\"303\":1,\"924\":1}}],[\"开发效率也很高\",{\"1\":{\"303\":1}}],[\"开发动态资源的技术有很多种\",{\"1\":{\"126\":1}}],[\"开启自动生成序列化id\",{\"1\":{\"286\":1}}],[\"开启配置\",{\"1\":{\"274\":1}}],[\"开启事务\",{\"1\":{\"209\":3}}],[\"开启了rewritebatchedstatements之后\",{\"1\":{\"207\":1}}],[\"开始写代码\",{\"1\":{\"947\":1}}],[\"开始的\",{\"1\":{\"786\":1,\"788\":1}}],[\"开始执行被跳转的构造器\",{\"1\":{\"546\":1}}],[\"开始执行子类构造方法\",{\"1\":{\"542\":1}}],[\"开始进行测试工作\",{\"1\":{\"502\":1}}],[\"开始按照杨辉三角的格式打印二维数组\",{\"1\":{\"441\":1}}],[\"开始赋值\",{\"1\":{\"441\":1}}],[\"开始循环\",{\"1\":{\"362\":1,\"364\":1}}],[\"开始扫描\",{\"1\":{\"353\":1}}],[\"开始事务\",{\"1\":{\"209\":1}}],[\"开始\",{\"1\":{\"204\":1}}],[\"预编译占位\",{\"1\":{\"255\":1}}],[\"预编译\",{\"1\":{\"204\":1}}],[\"预编译的statement\",{\"1\":{\"204\":1}}],[\"预览模式\",{\"0\":{\"36\":1}}],[\"根搜索算法\",{\"0\":{\"928\":1}}],[\"根类加载器\",{\"1\":{\"912\":2}}],[\"根目录\",{\"1\":{\"768\":1}}],[\"根本的原因\",{\"1\":{\"204\":1}}],[\"根据add\",{\"1\":{\"1132\":1}}],[\"根据uri\",{\"1\":{\"1130\":1}}],[\"根据key查询value的方法\",{\"1\":{\"1026\":1}}],[\"根据一个key\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"根据其元素的自然顺序进行排序\",{\"1\":{\"992\":1}}],[\"根据其位置和声明方式的不同\",{\"1\":{\"484\":1}}],[\"根据注解信息进行处理\",{\"1\":{\"924\":1}}],[\"根据现有的\",{\"1\":{\"820\":1}}],[\"根据给定的文件名以及指示是否附加写入数据的\",{\"1\":{\"807\":1}}],[\"根据给定的文件名构造一个\",{\"1\":{\"807\":1}}],[\"根据给定的\",{\"1\":{\"807\":2}}],[\"根据实际的异常对象的类型\",{\"1\":{\"754\":1}}],[\"根据实参列表决定调用哪个构造器\",{\"1\":{\"466\":1}}],[\"根据处理方式的不同\",{\"1\":{\"747\":1}}],[\"根据错误的严重程度分\",{\"1\":{\"747\":1}}],[\"根据指定比较器产生的顺序对指定对象数组进行排序\",{\"1\":{\"741\":1}}],[\"根据指向实际对象的不同\",{\"1\":{\"575\":1}}],[\"根据以上反编译代码\",{\"1\":{\"719\":1}}],[\"根据内部类在类中定义的位置不同\",{\"1\":{\"608\":1}}],[\"根据上述定义\",{\"1\":{\"576\":1}}],[\"根据个人习惯使用即可\",{\"1\":{\"571\":1}}],[\"根据什么来决定\",{\"1\":{\"549\":2,\"556\":2}}],[\"根据情况执行\",{\"1\":{\"546\":1}}],[\"根据我们之前学过的知识\",{\"1\":{\"519\":1}}],[\"根据静态成员方法调用简单的特点\",{\"1\":{\"478\":1}}],[\"根据static关键字的一些特点来明确它的使用场景\",{\"1\":{\"478\":1}}],[\"根据static修饰的内容不同\",{\"1\":{\"473\":1}}],[\"根据北宋时期的数学家贾宪的作品\",{\"1\":{\"441\":1}}],[\"根据不同的情况\",{\"1\":{\"413\":1}}],[\"根据数组的首地址和下标\",{\"1\":{\"394\":1}}],[\"根据循环控制变量写布尔表达式\",{\"1\":{\"361\":1}}],[\"根据jvm规范中提供的数据\",{\"1\":{\"325\":1}}],[\"根据操作系统选择版本后\",{\"1\":{\"306\":1}}],[\"根据同一个mapper\",{\"1\":{\"285\":1}}],[\"根据用户选择的支付方式进行记录\",{\"1\":{\"720\":1}}],[\"根据用户的名字查询出用户信息以及用户对应购买的商品信息\",{\"1\":{\"282\":1}}],[\"根据用户名和密码查询用户\",{\"1\":{\"204\":1}}],[\"根据id查找支付类型\",{\"1\":{\"720\":1}}],[\"根据id找不到该商品即删除失败返回false\",{\"1\":{\"601\":1}}],[\"根据id获取name来查找数据\",{\"1\":{\"251\":1}}],[\"根据id来查找这个账户\",{\"1\":{\"250\":1}}],[\"根据学生去查班主任的名字变得更简单了\",{\"1\":{\"178\":1}}],[\"根据英语成绩\",{\"1\":{\"167\":1}}],[\"根据英语成绩进行分组\",{\"1\":{\"167\":1}}],[\"传给指定的代码块\",{\"1\":{\"1046\":1}}],[\"传进来的数组\",{\"1\":{\"954\":1}}],[\"传进来的数组长度\",{\"1\":{\"954\":1}}],[\"传统的三件套\",{\"1\":{\"952\":1}}],[\"传统的jdbc查询代码\",{\"1\":{\"234\":1}}],[\"传泛型就要指明类型\",{\"1\":{\"939\":1}}],[\"传递额外的信息进行解释说明\",{\"1\":{\"924\":1}}],[\"传递性\",{\"1\":{\"674\":2}}],[\"传递的参数\",{\"1\":{\"276\":1}}],[\"传递对象\",{\"1\":{\"254\":1}}],[\"传递多个参数\",{\"1\":{\"249\":1}}],[\"传递参数\",{\"1\":{\"204\":1}}],[\"传入的数组长度与集合长度的对比\",{\"1\":{\"954\":1}}],[\"传入的数组长度\",{\"1\":{\"954\":2}}],[\"传入的是请求头的key\",{\"1\":{\"1112\":1}}],[\"传入的是当前对象\",{\"1\":{\"460\":1}}],[\"传入的是实参变量的地址\",{\"1\":{\"424\":1}}],[\"传入的是实参的拷贝而不是实参本身\",{\"1\":{\"424\":1}}],[\"传入对象\",{\"1\":{\"920\":4}}],[\"传入数据实现功能后\",{\"1\":{\"380\":1}}],[\"传入一个字符串\",{\"1\":{\"353\":1}}],[\"传入一个参数\",{\"1\":{\"254\":1}}],[\"传入多个参数\",{\"1\":{\"254\":1}}],[\"传入sql语句的坐标\",{\"1\":{\"234\":1}}],[\"传入用户名和密码\",{\"1\":{\"204\":1}}],[\"传输原理\",{\"0\":{\"886\":1,\"896\":1}}],[\"传输协议\",{\"1\":{\"885\":2}}],[\"传输过程全程明文传输\",{\"1\":{\"125\":1}}],[\"传输\",{\"1\":{\"111\":1}}],[\"然而\",{\"1\":{\"204\":1,\"838\":1}}],[\"然后add\",{\"1\":{\"1205\":1}}],[\"然后从保险柜中获得信息\",{\"1\":{\"1137\":1}}],[\"然后从上到下\",{\"1\":{\"359\":1}}],[\"然后共享该实例\",{\"1\":{\"1131\":1}}],[\"然后过两秒访问到info请求\",{\"1\":{\"1131\":1}}],[\"然后构造请求数据\",{\"1\":{\"1120\":1}}],[\"然后我们在做进一步的分析\",{\"1\":{\"1120\":1}}],[\"然后我们学习了对象与类的概念\",{\"1\":{\"540\":1}}],[\"然后来看其对应的请求报文是什么样子的\",{\"1\":{\"1120\":1}}],[\"然后通过不同的实现类来完成不同的业务处理\",{\"1\":{\"1085\":1}}],[\"然后和对应班级同学的信息\",{\"1\":{\"1019\":1}}],[\"然后插入到数组\",{\"1\":{\"1016\":1}}],[\"然后与原数取异或\",{\"1\":{\"1008\":1}}],[\"然后与数组长度取余\",{\"1\":{\"1002\":1}}],[\"然后hashcode无符号右移动16位\",{\"1\":{\"1008\":1}}],[\"然后分析\",{\"1\":{\"1002\":1}}],[\"然后分别给数组中的元素赋值\",{\"1\":{\"409\":1}}],[\"然后遍历集合类\",{\"1\":{\"956\":1}}],[\"然后遍历原先的数组\",{\"1\":{\"421\":1}}],[\"然后根据传输协议的不同\",{\"1\":{\"885\":1}}],[\"然后获取其结果\",{\"1\":{\"880\":1}}],[\"然后告诉我\",{\"1\":{\"828\":2}}],[\"然后逐个判断\",{\"1\":{\"777\":1}}],[\"然后返回一个date对象\",{\"1\":{\"726\":1}}],[\"然后返回一个日期字符串string对象\",{\"1\":{\"726\":1}}],[\"然后让克隆后的引用指向它\",{\"1\":{\"699\":1}}],[\"然后如果存在哈希冲突\",{\"1\":{\"680\":1}}],[\"然后如果能看懂后端代码\",{\"1\":{\"212\":1}}],[\"然后每个节点都存储下一个节点的地址\",{\"1\":{\"680\":1}}],[\"然后直接作为返回值返回给外界\",{\"1\":{\"649\":1}}],[\"然后创建内部类对象\",{\"1\":{\"643\":1}}],[\"然后创建对象\",{\"1\":{\"641\":1}}],[\"然后还需要静态内部类权限\",{\"1\":{\"622\":1}}],[\"然后还需要成员内部类权限\",{\"1\":{\"611\":1}}],[\"然后将对象插入数组\",{\"1\":{\"601\":1}}],[\"然后将字符串转换成各种需要的数据类型\",{\"1\":{\"352\":1}}],[\"然后做一次自动类型转换\",{\"1\":{\"585\":1}}],[\"然后做出对应的响应\",{\"1\":{\"127\":1}}],[\"然后定义具体动物类\",{\"1\":{\"581\":1}}],[\"然后用引用名访问成员\",{\"1\":{\"578\":1}}],[\"然后观察第一行\",{\"1\":{\"546\":1}}],[\"然后调用test方法\",{\"1\":{\"502\":1}}],[\"然后传入引用\",{\"1\":{\"481\":1}}],[\"然后把所有的小规模的子问题的解\",{\"1\":{\"442\":1}}],[\"然后把数据写回给浏览器\",{\"1\":{\"138\":1}}],[\"然后拷贝赋值\",{\"1\":{\"421\":1}}],[\"然后修正程序\",{\"1\":{\"412\":1}}],[\"然后声明第二个数组\",{\"1\":{\"409\":1}}],[\"然后给出直立行走的方法就算完事了\",{\"1\":{\"595\":1}}],[\"然后给第二个数组赋值\",{\"1\":{\"409\":1}}],[\"然后给数组中的元素赋值\",{\"1\":{\"409\":1}}],[\"然后给b账户增加钱\",{\"1\":{\"208\":1}}],[\"然后才能赋其它具体值\",{\"1\":{\"408\":1}}],[\"然后进行元素赋值\",{\"1\":{\"396\":1}}],[\"然后小数部分继续乘2\",{\"1\":{\"336\":1}}],[\"然后加以改正\",{\"1\":{\"319\":1}}],[\"然后运行程序\",{\"1\":{\"319\":1}}],[\"然后字节码文件在java虚拟机中解释执行\",{\"1\":{\"309\":1}}],[\"然后打开cmd命令行窗口\",{\"1\":{\"308\":1}}],[\"然后写main方法\",{\"1\":{\"308\":1}}],[\"然后在该包下写接口的实现类\",{\"1\":{\"598\":1}}],[\"然后在做强转之前\",{\"1\":{\"587\":1}}],[\"然后在方法体中\",{\"1\":{\"581\":1}}],[\"然后在方法中访问同名成员方法\",{\"1\":{\"555\":1}}],[\"然后在打开的文本编辑框中写java代码\",{\"1\":{\"308\":1}}],[\"然后在后方\",{\"1\":{\"158\":1}}],[\"然后点击编辑按钮\",{\"1\":{\"307\":1}}],[\"然后右键我的电脑\",{\"1\":{\"307\":1}}],[\"然后复制当前的路径\",{\"1\":{\"307\":1}}],[\"然后使用字符输出流写出\",{\"1\":{\"1132\":1}}],[\"然后使用\",{\"1\":{\"255\":1}}],[\"然后key是索引的值\",{\"1\":{\"227\":1}}],[\"然后再用引用访问成员\",{\"1\":{\"648\":1}}],[\"然后再引入\",{\"1\":{\"267\":1}}],[\"然后再标签中写sql\",{\"1\":{\"240\":1}}],[\"然后再根据主键值查询主键索引树\",{\"1\":{\"233\":1}}],[\"然后再顺着走\",{\"1\":{\"220\":1}}],[\"然后再执行sql\",{\"1\":{\"186\":1}}],[\"然后再把这个id=1\",{\"1\":{\"184\":1}}],[\"然后拿上sql就上生产环境去执行sql了\",{\"1\":{\"156\":1}}],[\"然后不能存储中文\",{\"1\":{\"149\":1}}],[\"然后发送命令给server端执行\",{\"1\":{\"147\":1}}],[\"然后取出请求资源部分\",{\"1\":{\"127\":1}}],[\"然后\",{\"1\":{\"127\":1,\"468\":1,\"489\":1,\"499\":1,\"816\":1,\"1010\":1}}],[\"该cookie\",{\"1\":{\"1145\":1}}],[\"该表单会发出请求\",{\"1\":{\"1131\":1}}],[\"该值是请求参数名\",{\"1\":{\"1120\":1}}],[\"该servlet才初始化\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"该servlet的路径\",{\"1\":{\"1086\":1}}],[\"该stream\",{\"1\":{\"657\":1}}],[\"该注解运行时生效\",{\"1\":{\"1086\":1}}],[\"该注解可以写在类上\",{\"1\":{\"1086\":1}}],[\"该映射根据其键的自然顺序\",{\"1\":{\"1025\":1}}],[\"该映射根据给定比较器进行排序\",{\"1\":{\"1025\":1}}],[\"该\",{\"1\":{\"992\":1}}],[\"该协议进行数据传输是一种面向连接的\",{\"1\":{\"885\":1}}],[\"该协议进行数据传输是一种面向无连接的\",{\"1\":{\"885\":1}}],[\"该协议通常包括租赁期限\",{\"1\":{\"108\":1}}],[\"该线程不丢失任何监视器的所属权\",{\"1\":{\"869\":1}}],[\"该线程发布\",{\"1\":{\"869\":1}}],[\"该线程在该对象上阻塞\",{\"1\":{\"869\":1}}],[\"该电影有100张电影票可供出售\",{\"1\":{\"851\":2}}],[\"该文件通过文件系统中的路径名\",{\"1\":{\"794\":1}}],[\"该文件通过文件系统中的\",{\"1\":{\"794\":1}}],[\"该字符串只包含当前字符串中\",{\"1\":{\"737\":2}}],[\"该构造器的参数pattern用来表示日期字符串的格式\",{\"1\":{\"725\":1}}],[\"该构造函数使用当前日期和时间来创建对象\",{\"1\":{\"723\":1}}],[\"该函数自动被调用\",{\"1\":{\"689\":1}}],[\"该tostring\",{\"1\":{\"668\":1}}],[\"该对象锁的wait线程运行完毕后\",{\"1\":{\"868\":1}}],[\"该对象通过compare方法传入比较的规则\",{\"1\":{\"741\":1}}],[\"该对象的十六进制地址值\",{\"1\":{\"667\":1}}],[\"该对象没有栈上的引用指向\",{\"1\":{\"480\":1}}],[\"该变量必须是final的\",{\"1\":{\"656\":1}}],[\"该局部变量需要是一个常量\",{\"1\":{\"645\":1}}],[\"该怎么去描述这个cpu呢\",{\"1\":{\"607\":1}}],[\"该行在执行时\",{\"1\":{\"564\":1}}],[\"该行语句表示去调用父类的无参构造方法\",{\"1\":{\"542\":1}}],[\"该条语句必须在第一行\",{\"1\":{\"543\":2}}],[\"该类实现缓冲的输出流\",{\"1\":{\"790\":1}}],[\"该类不能被继承\",{\"1\":{\"760\":1}}],[\"该类的构造器源码如下\",{\"1\":{\"723\":1}}],[\"该类的有效范围仅在作用域内部\",{\"1\":{\"633\":1}}],[\"该类的全限定类名\",{\"1\":{\"453\":1}}],[\"该类还有父类\",{\"1\":{\"546\":1}}],[\"该类中描述了汽车的普通属性和功能\",{\"1\":{\"513\":1}}],[\"该类具有一个int属性age\",{\"1\":{\"470\":1}}],[\"该有什么行为\",{\"1\":{\"447\":1}}],[\"该方法用来通知那\",{\"1\":{\"868\":1}}],[\"该方法具有固有的不安全性\",{\"1\":{\"843\":1}}],[\"该方法必须在启动线程前调用\",{\"1\":{\"842\":1}}],[\"该方法被调用时就要处理这个编译异常\",{\"1\":{\"756\":1}}],[\"该方法可以看成是o1\",{\"1\":{\"741\":1}}],[\"该方法需要传入一个\",{\"1\":{\"726\":1}}],[\"该方法需要传入一个date对象\",{\"1\":{\"726\":1}}],[\"该方法需要传入一个一维数组\",{\"1\":{\"416\":1}}],[\"该方法还是挺有用的\",{\"1\":{\"723\":1}}],[\"该方法会根据操作系统时间来获取当前的时间戳\",{\"1\":{\"723\":1}}],[\"该方法会返回一个字符串\",{\"1\":{\"667\":1}}],[\"该方法是有参数的\",{\"1\":{\"671\":1}}],[\"该方法是将一个十进制整数转换成十六进制字符串\",{\"1\":{\"667\":1}}],[\"该方法的参数需要传入一个字符串值\",{\"1\":{\"1120\":1}}],[\"该方法的作用是输出该date对象所表示的时间\",{\"1\":{\"724\":1}}],[\"该方法的作用是\",{\"1\":{\"679\":1}}],[\"该方法的作用可以通过查阅api文档了解\",{\"1\":{\"660\":1}}],[\"该方法的返回值字符串就是\",{\"1\":{\"667\":1}}],[\"该方法的默认实现是通过计算对象的地址\",{\"1\":{\"667\":1}}],[\"该方法的栈帧随之销毁\",{\"1\":{\"403\":1}}],[\"该方法并不常用\",{\"1\":{\"658\":1}}],[\"该方法在java9开始\",{\"1\":{\"658\":1}}],[\"该方法本身作用不大\",{\"1\":{\"658\":1}}],[\"该方法不负责创建class对象\",{\"1\":{\"663\":1}}],[\"该方法不能有修饰符\",{\"1\":{\"593\":1}}],[\"该方法不会因为空格或制表符号而结束扫描\",{\"1\":{\"353\":1}}],[\"该方法单纯就是让子类继承并重写的\",{\"1\":{\"590\":1}}],[\"该数组仍然不能使用\",{\"1\":{\"396\":1}}],[\"该编号\",{\"1\":{\"393\":1}}],[\"该传入什么类型的参数\",{\"1\":{\"382\":1}}],[\"该语句只会执行一次\",{\"1\":{\"362\":1,\"364\":1}}],[\"该体系中double是取值范围最大的\",{\"1\":{\"338\":1}}],[\"该大括号锁包含的代码区域便是这个变量的作用域\",{\"1\":{\"335\":1}}],[\"该种数据类型的内存空间只能存储该种数据类型的变量\",{\"1\":{\"320\":1}}],[\"该页面的后端代码使用sql查询语句来验证用户的身份\",{\"1\":{\"204\":1}}],[\"解码指定的\",{\"1\":{\"801\":1}}],[\"解码过程\",{\"1\":{\"801\":1}}],[\"解码\",{\"1\":{\"800\":1}}],[\"解释一下\",{\"1\":{\"653\":1}}],[\"解释一下这个字符串的由来\",{\"1\":{\"400\":1}}],[\"解释说明\",{\"1\":{\"585\":1,\"647\":1,\"655\":1,\"756\":1}}],[\"解释\",{\"1\":{\"450\":1,\"660\":1,\"717\":1,\"924\":1}}],[\"解释如下\",{\"1\":{\"385\":1}}],[\"解释执行的\",{\"1\":{\"309\":1}}],[\"解决\",{\"1\":{\"801\":1}}],[\"解决同一类问题\",{\"1\":{\"380\":1}}],[\"解决的办法有很多种\",{\"1\":{\"353\":1}}],[\"解决办法如下\",{\"1\":{\"1205\":1}}],[\"解决办法三\",{\"1\":{\"244\":1}}],[\"解决办法二\",{\"1\":{\"243\":1}}],[\"解决办法一\",{\"1\":{\"242\":1}}],[\"解决方案3\",{\"1\":{\"936\":1}}],[\"解决方案2\",{\"1\":{\"936\":1}}],[\"解决方案1\",{\"1\":{\"936\":1}}],[\"解决方案\",{\"1\":{\"444\":1}}],[\"解决方案三\",{\"0\":{\"244\":1}}],[\"解决方案二\",{\"0\":{\"243\":1}}],[\"解决方案一\",{\"0\":{\"242\":1}}],[\"解耦\",{\"1\":{\"203\":1,\"851\":1}}],[\"解析字符串获得其中的信息\",{\"1\":{\"1103\":1}}],[\"解析数据报包\",{\"1\":{\"888\":1,\"892\":1}}],[\"解析结果集\",{\"1\":{\"192\":1,\"197\":1}}],[\"解析请求报文的请求行部分\",{\"1\":{\"127\":1}}],[\"解析请求报文的请求头部分\",{\"1\":{\"127\":1}}],[\"解析之后的请求头存放在哪\",{\"1\":{\"127\":1}}],[\"解析\",{\"1\":{\"113\":1,\"497\":2,\"726\":1,\"894\":2,\"895\":1,\"910\":1}}],[\"让windows\",{\"1\":{\"1186\":1}}],[\"让key落得位置更加均匀\",{\"1\":{\"1008\":1}}],[\"让程序暂停执行3秒\",{\"1\":{\"825\":2}}],[\"让其拼接10000次\",{\"1\":{\"741\":2}}],[\"让其按照学生的年龄的大小\",{\"1\":{\"740\":1}}],[\"让这个代码不死循环也很简单\",{\"1\":{\"700\":1}}],[\"让这个类从原先不是这个接口的子类\",{\"1\":{\"696\":1}}],[\"让他们的实现这个接口\",{\"1\":{\"599\":1}}],[\"让他们实现这个接口\",{\"1\":{\"595\":1}}],[\"让超级猫狗类去继承这个抽象类\",{\"1\":{\"595\":1}}],[\"让第一层常驻内存\",{\"1\":{\"233\":1}}],[\"让我快速知道如何去使用它\",{\"1\":{\"201\":1}}],[\"让代码自动在周五晚8点去备份\",{\"1\":{\"188\":1}}],[\"给其的值是value\",{\"1\":{\"1118\":2}}],[\"给其成员变量赋值\",{\"1\":{\"1118\":1}}],[\"给set方法传入形参\",{\"1\":{\"1118\":1}}],[\"给sqlsessionfactory\",{\"1\":{\"244\":2}}],[\"给一个集合\",{\"1\":{\"1053\":1}}],[\"给一维数组的首尾赋值为1\",{\"1\":{\"441\":1}}],[\"给接口指定了类型\",{\"1\":{\"941\":1}}],[\"给程序员看的\",{\"1\":{\"924\":1}}],[\"给静态成员赋真实的值\",{\"1\":{\"910\":1}}],[\"给类的静态成员分配内存并赋予默认初始值\",{\"1\":{\"910\":1}}],[\"给客户端一个反馈消息\",{\"1\":{\"905\":1}}],[\"给线程分配cpu处理权的过程\",{\"1\":{\"834\":1}}],[\"给老板打了个电话\",{\"1\":{\"828\":1}}],[\"给out赋值\",{\"1\":{\"818\":1}}],[\"给出一句英文句子\",{\"1\":{\"739\":2}}],[\"给出抽象方法\",{\"1\":{\"595\":1}}],[\"给对象添加一个引用计数器\",{\"1\":{\"927\":1}}],[\"给对象的死亡做\",{\"1\":{\"688\":1}}],[\"给对象赋值\",{\"1\":{\"466\":1}}],[\"给大家以后使用static关键字做一下参考\",{\"1\":{\"478\":1}}],[\"给成员变量赋值\",{\"1\":{\"465\":1,\"487\":1,\"688\":1,\"851\":1,\"920\":1}}],[\"给成员变量赋什么值\",{\"1\":{\"465\":1}}],[\"给第一个元素赋值\",{\"1\":{\"441\":1}}],[\"给每一个一维数组\",{\"1\":{\"441\":1}}],[\"给新数组赋值\",{\"1\":{\"421\":1}}],[\"给方法起个名字\",{\"1\":{\"382\":1}}],[\"给变量赋初始值的过程就是初始化\",{\"1\":{\"334\":1}}],[\"给ls增加钱\",{\"1\":{\"208\":1}}],[\"给我写个demo\",{\"1\":{\"201\":1}}],[\"给学生分宿舍\",{\"1\":{\"110\":1}}],[\"五个元素\",{\"1\":{\"953\":1}}],[\"五班\",{\"1\":{\"196\":1}}],[\"五层\",{\"1\":{\"112\":1}}],[\"断开连接\",{\"1\":{\"192\":1}}],[\"断电后会挂掉\",{\"1\":{\"144\":1}}],[\"云飞兄\",{\"1\":{\"192\":1}}],[\"云服务器\",{\"1\":{\"126\":1}}],[\"端口号发生了变化\",{\"1\":{\"1157\":1}}],[\"端口号被占用\",{\"1\":{\"905\":1}}],[\"端口号用来在网络编程中唯一确定一个\",{\"1\":{\"885\":1}}],[\"端口号\",{\"1\":{\"885\":2,\"1111\":1,\"1115\":2}}],[\"端口\",{\"1\":{\"192\":1}}],[\"生蚝包\",{\"1\":{\"867\":1}}],[\"生产者执行\",{\"1\":{\"867\":1}}],[\"生产者\",{\"1\":{\"867\":2}}],[\"生产者不能生产\",{\"1\":{\"867\":1}}],[\"生产包子\",{\"1\":{\"867\":2}}],[\"生产包子的方法\",{\"1\":{\"867\":2}}],[\"生产任务\",{\"1\":{\"867\":1}}],[\"生产了\",{\"1\":{\"867\":2}}],[\"生物学意义上的克隆\",{\"1\":{\"693\":1}}],[\"生命周期不同\",{\"1\":{\"457\":2}}],[\"生命周期\",{\"1\":{\"407\":2,\"568\":1,\"570\":1,\"1093\":1}}],[\"生成时间\",{\"1\":{\"1148\":1}}],[\"生成动态内容并将响应发送回客户端\",{\"1\":{\"1078\":1}}],[\"生成一个流\",{\"1\":{\"1034\":1}}],[\"生成一个新的list\",{\"1\":{\"960\":1}}],[\"生成一个迭代器\",{\"1\":{\"955\":1}}],[\"生成一个md5值\",{\"1\":{\"188\":1}}],[\"生成迭代器的时候\",{\"1\":{\"955\":1}}],[\"生成这个类所对应的字节码文件对象\",{\"1\":{\"910\":1}}],[\"生成序列化id\",{\"1\":{\"286\":1}}],[\"生活中几乎不会使用反斜杠\",{\"1\":{\"356\":1}}],[\"生活中excel\",{\"1\":{\"141\":1}}],[\"生活中的例子\",{\"1\":{\"141\":1}}],[\"肉眼观察是一种不合适且不可靠的方式\",{\"1\":{\"188\":1}}],[\"执行命令去设置\",{\"1\":{\"1195\":1}}],[\"执行多次\",{\"1\":{\"1093\":1}}],[\"执行业务逻辑\",{\"1\":{\"1078\":1}}],[\"执行流水线\",{\"1\":{\"1033\":1}}],[\"执行流程都和while循环类似\",{\"1\":{\"364\":1}}],[\"执行流程\",{\"0\":{\"859\":1},\"1\":{\"358\":3,\"364\":1,\"467\":1}}],[\"执行以前提交的任务\",{\"1\":{\"880\":1}}],[\"执行条件\",{\"1\":{\"870\":1}}],[\"执行条件与特点\",{\"0\":{\"870\":1}}],[\"执行的时候\",{\"1\":{\"869\":1}}],[\"执行的是整个try代码块之后的代码\",{\"1\":{\"752\":1}}],[\"执行特点\",{\"1\":{\"870\":2}}],[\"执行特点是随机的\",{\"1\":{\"833\":1}}],[\"执行特征\",{\"1\":{\"869\":1}}],[\"执行notify\",{\"1\":{\"868\":1}}],[\"执行n次\",{\"1\":{\"207\":2}}],[\"执行路径\",{\"1\":{\"851\":1}}],[\"执行结果上看等待的是子线程\",{\"1\":{\"840\":1}}],[\"执行结果上看main线程在等待\",{\"1\":{\"840\":1}}],[\"执行结果\",{\"1\":{\"833\":1}}],[\"执行main线程里面的main方法\",{\"1\":{\"829\":1}}],[\"执行close方法会自动执行flush\",{\"1\":{\"790\":1}}],[\"执行throw则一定抛出了某种异常\",{\"1\":{\"758\":1}}],[\"执行开发者自己写的\",{\"1\":{\"752\":1}}],[\"执行过程\",{\"1\":{\"749\":1}}],[\"执行类中的显式赋值和构造代码块\",{\"1\":{\"546\":1}}],[\"执行静态代码块\",{\"1\":{\"497\":1,\"916\":1}}],[\"执行静态成员变量的显式赋值\",{\"1\":{\"497\":1}}],[\"执行其中的代码\",{\"1\":{\"489\":1}}],[\"执行完毕new对象构造器\",{\"1\":{\"546\":1}}],[\"执行完毕后\",{\"1\":{\"489\":4}}],[\"执行完sql语句之后\",{\"1\":{\"242\":2,\"243\":2}}],[\"执行构造方法进行赋值\",{\"1\":{\"471\":1}}],[\"执行到这里\",{\"1\":{\"471\":1}}],[\"执行一次循环控制语句\",{\"1\":{\"362\":1,\"364\":1}}],[\"执行一次循环体语句\",{\"1\":{\"362\":1}}],[\"执行布尔表达式进行条件判断\",{\"1\":{\"362\":1,\"364\":1}}],[\"执行初始化语句\",{\"1\":{\"362\":1,\"364\":1}}],[\"执行循环体语句\",{\"1\":{\"361\":1}}],[\"执行default中的statement\",{\"1\":{\"359\":1}}],[\"执行代码的范围\",{\"1\":{\"359\":1}}],[\"执行最后的else中的语句\",{\"1\":{\"358\":1}}],[\"执行表达式1\",{\"1\":{\"349\":1}}],[\"执行次数\",{\"1\":{\"207\":1}}],[\"执行1次\",{\"1\":{\"207\":1}}],[\"执行\",{\"1\":{\"206\":1,\"235\":1,\"240\":1,\"846\":1}}],[\"执行单次sql语句的时候\",{\"1\":{\"204\":1}}],[\"执行预编译\",{\"1\":{\"204\":1}}],[\"执行非法操作等\",{\"1\":{\"204\":1}}],[\"执行查询的方法\",{\"1\":{\"201\":1}}],[\"执行增删改的方法\",{\"1\":{\"201\":1}}],[\"执行文件中的sql语句\",{\"1\":{\"187\":1}}],[\"执行sayhello方法\",{\"1\":{\"1109\":1}}],[\"执行statement2中的语句\",{\"1\":{\"358\":1}}],[\"执行statement1中的语句\",{\"1\":{\"358\":1}}],[\"执行statement语句\",{\"1\":{\"358\":1}}],[\"执行startup\",{\"1\":{\"131\":1}}],[\"执行sql语句\",{\"1\":{\"201\":1,\"204\":1,\"207\":1,\"234\":1}}],[\"执行sql语句并处理查询结果\",{\"1\":{\"191\":1}}],[\"执行shutdown\",{\"1\":{\"132\":1}}],[\"恢复数据\",{\"1\":{\"187\":1}}],[\"恢复\",{\"1\":{\"187\":1}}],[\"备课\",{\"1\":{\"1083\":1}}],[\"备份和恢复操作可能会导致数据丢失\",{\"1\":{\"188\":1}}],[\"备份\",{\"1\":{\"187\":1}}],[\"备份产生的sql\",{\"1\":{\"186\":1}}],[\"备注\",{\"1\":{\"153\":2,\"1205\":1}}],[\"联系\",{\"1\":{\"1160\":1}}],[\"联系电话\",{\"1\":{\"153\":1}}],[\"联合索引\",{\"1\":{\"232\":1}}],[\"联合查询\",{\"0\":{\"185\":1}}],[\"由浏览器提供给服务器的正文类型\",{\"1\":{\"1104\":1}}],[\"由数组创建\",{\"1\":{\"1034\":1}}],[\"由值创建\",{\"1\":{\"1034\":1}}],[\"由红黑树转化为链表\",{\"1\":{\"1014\":1}}],[\"由产生的原因入手\",{\"1\":{\"853\":1}}],[\"由这4个抽象基类派生的子类都是以其父类名作为后缀的\",{\"1\":{\"783\":1}}],[\"由该方法的调用者来处理\",{\"1\":{\"758\":1}}],[\"由对象的垃圾回收器调用此方法\",{\"1\":{\"658\":1}}],[\"由某个祖先类派生出来的所有类的集合叫做继承层次\",{\"1\":{\"533\":1}}],[\"由包名加上类名组成的字符串\",{\"1\":{\"500\":1}}],[\"由若干条java语句组成\",{\"1\":{\"484\":1}}],[\"由程序员显式的\",{\"1\":{\"397\":1}}],[\"由大括号包裹起来\",{\"1\":{\"382\":1}}],[\"由\",{\"1\":{\"253\":1,\"681\":1,\"884\":1,\"1115\":1}}],[\"由于treemap是有序的\",{\"1\":{\"1026\":1}}],[\"由于this本身就是隐含的\",{\"1\":{\"461\":1}}],[\"由于a已经实现了接口\",{\"1\":{\"696\":1}}],[\"由于lambda表达式表示的子类对象并没有自己独有的成员\",{\"1\":{\"653\":1}}],[\"由于成员内部类属于外部类的一个成员\",{\"1\":{\"617\":1}}],[\"由于已经通过语法创建了对象\",{\"1\":{\"608\":1}}],[\"由于多态中\",{\"1\":{\"583\":1}}],[\"由于\",{\"1\":{\"542\":1}}],[\"由于子类\",{\"1\":{\"528\":1}}],[\"由于子查询会增加查询的复杂度和执行时间\",{\"1\":{\"184\":1}}],[\"由于就近原则的影响\",{\"1\":{\"459\":1}}],[\"由于基本数据类型是jvm当中已经预先定义好的\",{\"1\":{\"456\":1}}],[\"由于每个一维数组的长度不同\",{\"1\":{\"441\":1}}],[\"由于java代码最终需要解释执行\",{\"1\":{\"410\":1}}],[\"由于java是面向对象语言\",{\"1\":{\"403\":1}}],[\"由于分支之间绝对平行\",{\"1\":{\"359\":1}}],[\"由于nextline\",{\"1\":{\"353\":1}}],[\"由于能够直接对位\",{\"1\":{\"348\":1}}],[\"由于表达式的运算结果是唯一的\",{\"1\":{\"340\":1}}],[\"由于表示有效数字的位数是有限的\",{\"1\":{\"336\":1}}],[\"由于有这两个目的\",{\"1\":{\"333\":1}}],[\"由于不是学习重点\",{\"1\":{\"323\":1}}],[\"由于覆盖索引可以减少树的搜索次数\",{\"1\":{\"231\":1}}],[\"由于查询结果所需要的数据只在主键索引上有\",{\"1\":{\"230\":1}}],[\"由于1等于1始终为真\",{\"1\":{\"204\":1}}],[\"由瑞典mysql\",{\"1\":{\"143\":1}}],[\"子域名下的请求可以共享父域名下的cookie\",{\"1\":{\"1146\":1}}],[\"子\",{\"1\":{\"960\":1}}],[\"子接口继承该接口时候\",{\"1\":{\"941\":1}}],[\"子接口中可以将抽象方法返回值类型重写为子类类型\",{\"1\":{\"598\":1}}],[\"子线程启动\",{\"1\":{\"839\":1}}],[\"子线程执行了\",{\"1\":{\"832\":3,\"850\":1}}],[\"子类中可以使用父类的方法\",{\"1\":{\"1095\":1}}],[\"子类中重写的方法\",{\"1\":{\"561\":4}}],[\"子类实现该接口\",{\"1\":{\"941\":3}}],[\"子类实现接口\",{\"1\":{\"606\":1}}],[\"子类情况如下\",{\"1\":{\"940\":1}}],[\"子类重写父类方法注意\",{\"1\":{\"756\":1}}],[\"子类继承抽象类\",{\"1\":{\"606\":1}}],[\"子类继承父类必须无条件接收父类的所有成员\",{\"1\":{\"530\":1}}],[\"子类都必须实现它\",{\"1\":{\"600\":1}}],[\"子类是抽象类\",{\"1\":{\"592\":1}}],[\"子类是普通类\",{\"1\":{\"592\":1}}],[\"子类变得越来越具体\",{\"1\":{\"591\":1}}],[\"子类独有的成员是无法使用父类引用访问的\",{\"1\":{\"583\":1}}],[\"子类只需要乖乖继承\",{\"1\":{\"567\":1}}],[\"子类方法不能比父类抛出更多的编译时异常\",{\"1\":{\"756\":1}}],[\"子类方法可以返回该类型\",{\"1\":{\"605\":2}}],[\"子类方法中可以返回该类型\",{\"1\":{\"605\":1}}],[\"子类方法返回值类型保持兼容\",{\"1\":{\"563\":1}}],[\"子类方法的访问权限\",{\"1\":{\"563\":1}}],[\"子类方法\",{\"1\":{\"560\":1}}],[\"子类知道自己的\",{\"1\":{\"551\":1}}],[\"子类自身的成员仍会存储在自身对象当中\",{\"1\":{\"541\":1}}],[\"子类类名\",{\"1\":{\"584\":2}}],[\"子类类加载会触发父类类加载\",{\"1\":{\"541\":1}}],[\"子类类型\",{\"1\":{\"529\":1}}],[\"子类会继承父类的成员\",{\"1\":{\"540\":1}}],[\"子类处在下面\",{\"1\":{\"529\":1}}],[\"子类的构造器中没有显式使用super调用父类的构造方法\",{\"1\":{\"542\":1}}],[\"子类的类加载会触发父类的类加载\",{\"1\":{\"541\":1}}],[\"子类的类名\",{\"1\":{\"529\":1}}],[\"子类的对象名\",{\"1\":{\"529\":1}}],[\"子类引用转换成父类引用\",{\"1\":{\"528\":1}}],[\"子类往往比父类功能要强大\",{\"1\":{\"523\":1}}],[\"子类关系\",{\"1\":{\"523\":1}}],[\"子类就覆盖了父类的成员\",{\"1\":{\"523\":1}}],[\"子类就获取到了父类的所有成员\",{\"1\":{\"520\":1}}],[\"子类通过继承父类\",{\"1\":{\"523\":1}}],[\"子类对象本身可能是十分强大\",{\"1\":{\"580\":1}}],[\"子类对象就是一台功能强大的电视机\",{\"1\":{\"580\":1}}],[\"子类对象的显式初始化\",{\"1\":{\"541\":1}}],[\"子类对象的隐式初始化是调用父类无参构造方法\",{\"1\":{\"543\":1}}],[\"子类对象的隐式初始化是调用父类无参构造器实现的\",{\"1\":{\"541\":1}}],[\"子类对象的隐式初始化\",{\"1\":{\"541\":1,\"542\":1}}],[\"子类对象的初始化\",{\"0\":{\"540\":1}}],[\"子类对象中会专门开辟一片独立的区域\",{\"1\":{\"541\":1}}],[\"子类对象能够直接访问父类成员\",{\"1\":{\"541\":1}}],[\"子类对象是可以当成父类使用的\",{\"1\":{\"524\":1}}],[\"子类对象被当成了父类对象去使用了\",{\"1\":{\"523\":1}}],[\"子类对象初始化流程\",{\"0\":{\"541\":1},\"1\":{\"518\":1}}],[\"子类可以根据自身情况选择重写它\",{\"1\":{\"666\":1}}],[\"子类可以选择直接使用\",{\"1\":{\"592\":1,\"594\":1}}],[\"子类可以自由扩展功能\",{\"1\":{\"533\":1}}],[\"子类可以在继承父类成员方法之后\",{\"1\":{\"530\":1}}],[\"子类可以当做父类去使用\",{\"1\":{\"523\":1}}],[\"子类可以当作父类来使用\",{\"1\":{\"523\":1}}],[\"子类可以近似地看成是一个父类\",{\"1\":{\"523\":1}}],[\"子类\",{\"1\":{\"522\":1,\"596\":1,\"1078\":1}}],[\"子类不能继承父类没有的成员\",{\"1\":{\"520\":1}}],[\"子类在继承父类的同时\",{\"1\":{\"520\":1}}],[\"子查询可以用于实现各种复杂的查询需求\",{\"1\":{\"184\":1}}],[\"子查询可以嵌套多层\",{\"1\":{\"184\":1}}],[\"子查询通常用于在查询结果中过滤\",{\"1\":{\"184\":1}}],[\"子查询是指在一个\",{\"1\":{\"184\":1}}],[\"子查询\",{\"0\":{\"184\":1}}],[\"子行\",{\"1\":{\"171\":1}}],[\"保存最新的\",{\"1\":{\"1201\":1}}],[\"保存并退出\",{\"1\":{\"1201\":1}}],[\"保存的时候\",{\"1\":{\"1201\":1}}],[\"保存完成\",{\"1\":{\"905\":1}}],[\"保障安全性\",{\"1\":{\"587\":1}}],[\"保持兼容\",{\"1\":{\"561\":1}}],[\"保证不同的用户获取的时候是自己session中的信息\",{\"1\":{\"1159\":1}}],[\"保证数据类型的可变性\",{\"1\":{\"949\":1}}],[\"保证数量是固定的\",{\"1\":{\"715\":1}}],[\"保证是常量\",{\"1\":{\"715\":1}}],[\"保证的\",{\"1\":{\"542\":1}}],[\"保证安全合理\",{\"1\":{\"515\":1}}],[\"保护模式\",{\"1\":{\"312\":1}}],[\"保留字对java代码来说没有任何含义\",{\"1\":{\"313\":1}}],[\"保留字就是那些java官方不使用\",{\"1\":{\"313\":1}}],[\"保留字是对当前版本的java\",{\"1\":{\"313\":1}}],[\"保留字的定义\",{\"1\":{\"313\":1}}],[\"保留字的官方定义是这样的\",{\"1\":{\"313\":1}}],[\"保留字\",{\"0\":{\"313\":1},\"1\":{\"315\":1}}],[\"保留关键字\",{\"1\":{\"312\":2}}],[\"保留匹配的数据\",{\"1\":{\"183\":1}}],[\"保险柜里可以存一些数据\",{\"1\":{\"1149\":1}}],[\"保险\",{\"1\":{\"143\":1}}],[\"右答一点\",{\"1\":{\"1020\":1}}],[\"右边是传过来的参数\",{\"1\":{\"851\":1}}],[\"右边实际上是不需要再进行计算的\",{\"1\":{\"347\":1}}],[\"右移后最高位空缺位补0\",{\"1\":{\"348\":1}}],[\"右移虽然不会改变正负\",{\"1\":{\"348\":1}}],[\"右移就是把右边移出去的低位截断\",{\"1\":{\"348\":1}}],[\"右移位赋值运算符\",{\"1\":{\"345\":1}}],[\"右子树的所有值\",{\"1\":{\"220\":1}}],[\"右子树也分别为二叉排序树\",{\"1\":{\"220\":1}}],[\"右表中没有匹配的行将被填充为null值\",{\"1\":{\"183\":1}}],[\"右外连接的语法如下\",{\"1\":{\"183\":1}}],[\"右外连接返回右表中的所有行以及左表中与右表匹配的行\",{\"1\":{\"183\":1}}],[\"右外连接\",{\"1\":{\"183\":2}}],[\"左到=\",{\"1\":{\"1201\":1}}],[\"左到右\",{\"1\":{\"350\":12}}],[\"左边是成员变量\",{\"1\":{\"851\":1}}],[\"左边必须是一个变量来接收这个值\",{\"1\":{\"345\":1}}],[\"左中括号表示该数据类型是一个\",{\"1\":{\"400\":1}}],[\"左移就是把左边移出去的高位截断\",{\"1\":{\"348\":1}}],[\"左移位赋值运算符\",{\"1\":{\"345\":1}}],[\"左操作数的值按右操作数指定的位数右移\",{\"1\":{\"348\":1}}],[\"左操作数按位右移右操作数指定的位数\",{\"1\":{\"348\":1}}],[\"左操作数按位左移右操作数指定的位数\",{\"1\":{\"348\":1}}],[\"左操作数除以右操作数\",{\"1\":{\"344\":2}}],[\"左操作数减去右操作数\",{\"1\":{\"344\":1}}],[\"左子树的所有值\",{\"1\":{\"220\":1}}],[\"左小右大\",{\"1\":{\"220\":1,\"1024\":1}}],[\"左表中没有匹配的行将被填充为null值\",{\"1\":{\"183\":1}}],[\"左外连接\",{\"1\":{\"183\":2}}],[\"左外连接的语法如下\",{\"1\":{\"183\":1}}],[\"左外连接返回左表中的所有行以及右表中与左表匹配的行\",{\"1\":{\"183\":1}}],[\"左右表中的数据都保留\",{\"1\":{\"183\":1}}],[\"外界感受不到该类存在\",{\"1\":{\"643\":1}}],[\"外部其他类已经完全无法访问到局部内部类了\",{\"1\":{\"638\":1}}],[\"外部其他类访问静态内部类成员\",{\"0\":{\"629\":1}}],[\"外部其他类访问成员内部类成员\",{\"0\":{\"617\":1}}],[\"外部其他类的静态成员方法中\",{\"1\":{\"619\":1,\"632\":1}}],[\"外部其他类的成员方法中\",{\"1\":{\"619\":1,\"632\":1}}],[\"外部其他类要访问成员内部类成员\",{\"1\":{\"617\":1}}],[\"外部其他类\",{\"1\":{\"608\":2}}],[\"外部类中只有装着局部内部类的作用域内\",{\"1\":{\"638\":1}}],[\"外部类仍然把局部内部类当\",{\"1\":{\"638\":1}}],[\"外部类访问静态内部类成员\",{\"0\":{\"628\":1}}],[\"外部类访问成员内部类成员\",{\"0\":{\"616\":1},\"1\":{\"616\":1}}],[\"外部类可以保护静态内部类\",{\"1\":{\"622\":1}}],[\"外部类可以保护成员内部类\",{\"1\":{\"611\":1}}],[\"外部类的静态成员方法中\",{\"1\":{\"619\":1,\"632\":1}}],[\"外部类的静态成员方法中访问成员内部类成员\",{\"1\":{\"616\":1}}],[\"外部类的成员方法中\",{\"1\":{\"619\":1,\"632\":1,\"639\":1}}],[\"外部类的成员方法中访问成员内部类成员\",{\"1\":{\"616\":1}}],[\"外部类成员变量三者都同名的情况\",{\"1\":{\"615\":1}}],[\"外部类对象用外部类类名\",{\"1\":{\"615\":1}}],[\"外部类\",{\"1\":{\"608\":2,\"609\":1,\"620\":1}}],[\"外面谁都不能用\",{\"1\":{\"506\":1,\"534\":1}}],[\"外层是遍历二维数组\",{\"1\":{\"441\":1}}],[\"外层for应该遍历二维数组中的一维数组\",{\"1\":{\"440\":1}}],[\"外层for控制行数\",{\"1\":{\"370\":1}}],[\"外层for每执行一次\",{\"1\":{\"367\":1}}],[\"外连接有左外连接\",{\"1\":{\"183\":1}}],[\"外连接\",{\"0\":{\"183\":1},\"1\":{\"183\":1}}],[\"外键对于效率的影响就会很大\",{\"1\":{\"171\":1}}],[\"外键对效率的影响比较小\",{\"1\":{\"171\":1}}],[\"外键的优缺点\",{\"1\":{\"171\":1}}],[\"外键的另外一种写法\",{\"1\":{\"171\":1}}],[\"外键的作用是保障数据的完整性和一致性\",{\"1\":{\"171\":1}}],[\"外键名称\",{\"1\":{\"171\":1}}],[\"外键\",{\"1\":{\"171\":1}}],[\"外键是关系数据库中一个非常重要的概念\",{\"1\":{\"171\":1}}],[\"显然释放系统资源这么一件重要的事情\",{\"1\":{\"689\":1}}],[\"显然上述方法\",{\"1\":{\"663\":1}}],[\"显然可读性很低\",{\"1\":{\"657\":1}}],[\"显然cpu类不应该是一个普通类\",{\"1\":{\"607\":1}}],[\"显然做不到\",{\"1\":{\"595\":1}}],[\"显然过于麻烦\",{\"1\":{\"581\":1}}],[\"显然super\",{\"1\":{\"543\":1}}],[\"显然父类成员究竟有哪些\",{\"1\":{\"541\":1}}],[\"显然父类不能随便作为子类使用\",{\"1\":{\"529\":1}}],[\"显然有些奇怪\",{\"1\":{\"487\":1}}],[\"显然是不可能的\",{\"1\":{\"456\":1}}],[\"显然不可能\",{\"1\":{\"526\":1}}],[\"显然不能\",{\"1\":{\"523\":1}}],[\"显然不是\",{\"1\":{\"408\":1}}],[\"显然不好确定\",{\"1\":{\"389\":1}}],[\"显然数组对数据结构和数组中的元素都是有要求的\",{\"1\":{\"394\":1}}],[\"显然随机访问的效率很高\",{\"1\":{\"394\":1}}],[\"显然方法1最近\",{\"1\":{\"389\":1}}],[\"显然既然是比较\",{\"1\":{\"346\":1}}],[\"显然\",{\"1\":{\"336\":1,\"502\":1,\"586\":1}}],[\"显然注释是写给程序员看的\",{\"1\":{\"319\":1}}],[\"显著提升查询性能\",{\"1\":{\"231\":1}}],[\"显式的内存管理\",{\"1\":{\"925\":1}}],[\"显式的\",{\"1\":{\"864\":1}}],[\"显式明确的给出一个值\",{\"1\":{\"570\":1}}],[\"显式调用构造器目前指的是this调用自身构造器\",{\"1\":{\"489\":1}}],[\"显式赋值和默认初始化赋值的顺序\",{\"1\":{\"458\":1}}],[\"显式赋值\",{\"1\":{\"458\":1,\"487\":1,\"494\":1,\"541\":1,\"570\":1,\"571\":1}}],[\"显式内连接\",{\"1\":{\"182\":1}}],[\"显式\",{\"1\":{\"182\":1}}],[\"显示效果如下\",{\"1\":{\"1120\":1}}],[\"显示器\",{\"1\":{\"821\":1}}],[\"显示子类对象初始化\",{\"0\":{\"543\":1}}],[\"显示赋值\",{\"1\":{\"467\":1}}],[\"显示\",{\"1\":{\"124\":1}}],[\"显示到页面上\",{\"1\":{\"124\":1}}],[\"显示在这个软件上\",{\"1\":{\"115\":1}}],[\"白色\",{\"1\":{\"444\":2}}],[\"白虎岭\",{\"1\":{\"180\":1,\"275\":1}}],[\"白骨精\",{\"1\":{\"180\":2,\"275\":2}}],[\"花果山\",{\"1\":{\"180\":1,\"275\":1}}],[\"高人\",{\"1\":{\"1040\":3}}],[\"高位和低位取个异或\",{\"1\":{\"1008\":1}}],[\"高位和低位同时生效\",{\"1\":{\"1008\":1}}],[\"高优先级的线程\",{\"1\":{\"838\":1}}],[\"高级获取功能\",{\"0\":{\"776\":1}}],[\"高级容器\",{\"1\":{\"394\":1}}],[\"高不高\",{\"1\":{\"220\":1}}],[\"高老庄\",{\"1\":{\"180\":1,\"275\":1}}],[\"高效组织图书的仓库\",{\"1\":{\"141\":1}}],[\"沙僧\",{\"1\":{\"180\":1,\"275\":1}}],[\"唐僧\",{\"1\":{\"180\":2,\"275\":2}}],[\"孙子类\",{\"1\":{\"585\":1}}],[\"孙二娘\",{\"1\":{\"278\":1}}],[\"孙悟空\",{\"1\":{\"180\":2,\"275\":2,\"281\":1}}],[\"孙权\",{\"1\":{\"161\":1}}],[\"猪八戒\",{\"1\":{\"180\":2,\"275\":2}}],[\"增强for也叫迭代器\",{\"1\":{\"417\":1}}],[\"增强for的语法更简洁\",{\"1\":{\"417\":1}}],[\"增强for和普通for遍历数组时的区别\",{\"1\":{\"417\":1}}],[\"增强for循环中没有使用数组下标\",{\"1\":{\"417\":1}}],[\"增强for循环\",{\"1\":{\"417\":1}}],[\"增强for循环遍历数组\",{\"0\":{\"417\":1}}],[\"增删改查\",{\"1\":{\"1133\":1}}],[\"增删改查中的哪一个或哪一些\",{\"1\":{\"1132\":1}}],[\"增删改查方法\",{\"1\":{\"953\":1,\"981\":1}}],[\"增删改查示例\",{\"0\":{\"236\":1}}],[\"增删改\",{\"1\":{\"262\":1}}],[\"增删改的效率也就降低了\",{\"1\":{\"233\":1}}],[\"增删改的次数比较少\",{\"1\":{\"178\":1}}],[\"增加几个servlet\",{\"1\":{\"1093\":1}}],[\"增加tomcat\",{\"1\":{\"1084\":1}}],[\"增加此\",{\"1\":{\"964\":1}}],[\"增加了程序的可靠性\",{\"1\":{\"925\":1}}],[\"增加了数据的维护成本\",{\"1\":{\"178\":1}}],[\"增加这个行为\",{\"1\":{\"595\":1}}],[\"增加\",{\"1\":{\"420\":1}}],[\"增加代码可读性\",{\"1\":{\"319\":1,\"475\":1}}],[\"增加成本\",{\"1\":{\"303\":1}}],[\"增加指定的后缀\",{\"1\":{\"268\":1}}],[\"增加指定的前缀\",{\"1\":{\"268\":1}}],[\"增加b账户的钱\",{\"1\":{\"209\":1}}],[\"增加500\",{\"1\":{\"208\":1}}],[\"增\",{\"0\":{\"194\":1},\"1\":{\"195\":1}}],[\"反射直接调用set方法\",{\"1\":{\"1118\":1}}],[\"反射直接给field赋值\",{\"1\":{\"1118\":1}}],[\"反射直接给成员变量赋值\",{\"1\":{\"1118\":1}}],[\"反射通过set方法间接给成员变量赋值\",{\"1\":{\"1118\":1}}],[\"反射reflect\",{\"1\":{\"1103\":1}}],[\"反射调用方法\",{\"1\":{\"921\":1}}],[\"反射获取成员变量\",{\"1\":{\"920\":1}}],[\"反射技术的起点\",{\"1\":{\"919\":1}}],[\"反射的起点是字节码文件对象\",{\"1\":{\"915\":1}}],[\"反射\",{\"0\":{\"909\":1,\"1106\":1},\"1\":{\"1109\":1,\"1118\":1}}],[\"反序列\",{\"1\":{\"822\":1}}],[\"反转功能\",{\"1\":{\"743\":2}}],[\"反转后结果为cba\",{\"1\":{\"738\":2}}],[\"反过来\",{\"1\":{\"614\":1}}],[\"反正不能访问对象\",{\"1\":{\"412\":1}}],[\"反正没有指向任何一个对象\",{\"1\":{\"407\":1}}],[\"反斜杠\",{\"1\":{\"356\":2}}],[\"反之不允许\",{\"1\":{\"696\":1}}],[\"反之不写对象名或者写this访问的都是外部类的成员\",{\"1\":{\"616\":1}}],[\"反之就会编译报错\",{\"1\":{\"652\":1}}],[\"反之\",{\"1\":{\"586\":1}}],[\"反之如果仅用一次\",{\"1\":{\"648\":1}}],[\"反之如果对象是一个父类类型\",{\"1\":{\"558\":1}}],[\"反之如果同包下有同名类则不会导入\",{\"1\":{\"504\":1}}],[\"反之如果本来就不在取值范围内\",{\"1\":{\"342\":1}}],[\"反之强制类型转换不行\",{\"1\":{\"384\":1}}],[\"反之亦然\",{\"1\":{\"172\":1}}],[\"反复测试\",{\"1\":{\"319\":1}}],[\"反复注释不同的位置\",{\"1\":{\"319\":1}}],[\"反范式化设计\",{\"1\":{\"178\":1}}],[\"冗余数据会使数据的维护成本增加\",{\"1\":{\"178\":1}}],[\"冗余了数据之后\",{\"1\":{\"178\":1}}],[\"冗余了\",{\"1\":{\"178\":1}}],[\"唯一改变就是值从能改变\",{\"1\":{\"568\":1}}],[\"唯一地找到一个方法\",{\"1\":{\"388\":1}}],[\"唯一不同的是\",{\"1\":{\"364\":1}}],[\"唯一索引\",{\"1\":{\"218\":1}}],[\"唯一性是指每一条记录都有唯一的标识\",{\"1\":{\"177\":1}}],[\"唯一值约束\",{\"1\":{\"170\":1}}],[\"灵活使用case穿越可以简化代码\",{\"1\":{\"359\":1}}],[\"灵活空间\",{\"1\":{\"176\":1}}],[\"灵活的从键盘接收数据输入\",{\"1\":{\"351\":1}}],[\"灵活的使用sql\",{\"1\":{\"146\":1}}],[\"灵活的\",{\"1\":{\"143\":1}}],[\"被拆成两部分\",{\"1\":{\"1014\":1}}],[\"被别的线程\",{\"1\":{\"955\":1}}],[\"被创建的时候\",{\"1\":{\"941\":1}}],[\"被抢走了执行权\",{\"1\":{\"851\":2}}],[\"被finally控制的语句体一定会执行\",{\"1\":{\"760\":1}}],[\"被final修饰的变量\",{\"1\":{\"568\":1}}],[\"被cloneable标记的类是允许做克隆操作的\",{\"1\":{\"696\":1}}],[\"被注解\",{\"1\":{\"658\":1}}],[\"被称之为该类的运行时类对象\",{\"1\":{\"662\":1}}],[\"被称之为\",{\"1\":{\"652\":1}}],[\"被称之为范式\",{\"1\":{\"175\":1}}],[\"被父类引用限制了访问范围\",{\"1\":{\"648\":1}}],[\"被super关键字指向\",{\"1\":{\"541\":1}}],[\"被protected修饰的成员\",{\"1\":{\"537\":1}}],[\"被继承的类主要称之为\",{\"1\":{\"522\":1}}],[\"被继承的类称之为父类\",{\"1\":{\"520\":1,\"522\":1}}],[\"被继承的类\",{\"1\":{\"520\":1}}],[\"被访问时\",{\"1\":{\"510\":1}}],[\"被所有对象共享\",{\"1\":{\"477\":1}}],[\"被包含的条件如果放在了下面\",{\"1\":{\"358\":1}}],[\"被移除的低位丢弃\",{\"1\":{\"348\":1}}],[\"被运算符连接起来的变量称之为操作数\",{\"1\":{\"342\":1}}],[\"被转换变量的变量名\",{\"1\":{\"339\":1,\"341\":1}}],[\"被关键字final修饰的变量\",{\"1\":{\"328\":1}}],[\"被服务器接收到\",{\"1\":{\"113\":1}}],[\"设a和b是两个非空集合\",{\"1\":{\"679\":1,\"999\":1}}],[\"设计者认为这样设计\",{\"1\":{\"1012\":1}}],[\"设计人员无需关心容器对象的内存分配的实现细节\",{\"1\":{\"955\":1}}],[\"设计出更好的哈希算法\",{\"1\":{\"682\":1}}],[\"设计出来的表才是好的\",{\"1\":{\"175\":1}}],[\"设计一个int\",{\"1\":{\"474\":2}}],[\"设置完之后\",{\"1\":{\"1195\":2}}],[\"设置\",{\"1\":{\"1195\":1}}],[\"设置域名或ip\",{\"1\":{\"1146\":1}}],[\"设置cookie的path为\",{\"1\":{\"1145\":1}}],[\"设置cookie的有效uri\",{\"1\":{\"1144\":1}}],[\"设置过期时间为5s\",{\"1\":{\"1147\":1}}],[\"设置过期时间\",{\"1\":{\"1144\":1}}],[\"设置响应状态码\",{\"1\":{\"1122\":1}}],[\"设置响应报文\",{\"1\":{\"1121\":1}}],[\"设置一下响应状态码\",{\"1\":{\"1122\":1}}],[\"设置信息提供给客户端\",{\"1\":{\"1110\":1}}],[\"设置来访问资源\",{\"0\":{\"1083\":1}}],[\"设置到学生上\",{\"1\":{\"997\":1}}],[\"设置最大的运行内存\",{\"1\":{\"960\":1}}],[\"设置小堆内存\",{\"1\":{\"960\":1}}],[\"设置指定下标的元素为element\",{\"1\":{\"958\":1}}],[\"设置优先级\",{\"1\":{\"838\":1}}],[\"设置线程优先级\",{\"1\":{\"838\":1}}],[\"设置获取优先级\",{\"1\":{\"838\":1}}],[\"设置获取线程名称\",{\"1\":{\"833\":1}}],[\"设置名称\",{\"1\":{\"833\":1}}],[\"设置名字\",{\"1\":{\"833\":1}}],[\"设置自动生成seriaversionuid\",{\"1\":{\"824\":1}}],[\"设置初始值\",{\"1\":{\"497\":1}}],[\"设置了path有什么用\",{\"1\":{\"1145\":1}}],[\"设置了隔离级别\",{\"1\":{\"212\":1}}],[\"设置了长度\",{\"1\":{\"153\":1}}],[\"设置隔离级别\",{\"1\":{\"212\":1}}],[\"设置参数\",{\"1\":{\"204\":1,\"207\":1}}],[\"设置列值\",{\"1\":{\"160\":1}}],[\"规约\",{\"1\":{\"1050\":1}}],[\"规则如下\",{\"1\":{\"336\":1}}],[\"规范的java开发中\",{\"1\":{\"658\":1}}],[\"规范\",{\"1\":{\"175\":1}}],[\"规定了房东和租户之间的权利和义务\",{\"1\":{\"108\":1}}],[\"每种数据类型都有1个对应的read方法\",{\"1\":{\"817\":1}}],[\"每种数据类型都有1个对应的write方法\",{\"1\":{\"816\":1}}],[\"每次发起请求\",{\"1\":{\"1110\":1}}],[\"每次中间操作会返回一个\",{\"1\":{\"1036\":1}}],[\"每次增加数组下标时\",{\"1\":{\"976\":1}}],[\"每次只能抛出确定的某个异常对象\",{\"1\":{\"757\":1}}],[\"每次拼接\",{\"1\":{\"741\":2}}],[\"每次更新商品中的一个信息即可\",{\"1\":{\"601\":1}}],[\"每次实现这个功能时\",{\"1\":{\"380\":1}}],[\"每有一个球员得分\",{\"1\":{\"474\":2}}],[\"每当引用失效时\",{\"1\":{\"927\":1}}],[\"每当一个地方引用它时\",{\"1\":{\"927\":1}}],[\"每当创建字符串常量对象时\",{\"1\":{\"731\":1}}],[\"每当有1个球员进球\",{\"1\":{\"472\":2}}],[\"每当java程序执行一个方法\",{\"1\":{\"403\":2}}],[\"每进一球\",{\"1\":{\"472\":2}}],[\"每右移一位\",{\"1\":{\"348\":1}}],[\"每左移一位\",{\"1\":{\"348\":1}}],[\"每一行的元素和行数一样\",{\"1\":{\"441\":1}}],[\"每一个用户\",{\"1\":{\"1149\":1}}],[\"每一个servlet都有与之对应的servletconfig\",{\"1\":{\"1093\":1}}],[\"每一个servlet它的生命周期都需要单独去考虑\",{\"1\":{\"1093\":1}}],[\"每一个单元格的大小\",{\"1\":{\"948\":1}}],[\"每一个单独的线程能够像创建了一个自己的\",{\"1\":{\"213\":1}}],[\"每一个内存单元大小\",{\"1\":{\"948\":1}}],[\"每一个数据有唯一的前驱和后继\",{\"1\":{\"947\":1}}],[\"每一个case都应该有一个break\",{\"1\":{\"359\":1}}],[\"每一个char类型变量都表示某一个字符\",{\"1\":{\"324\":1}}],[\"每一个位存储一个1位的二进制码\",{\"1\":{\"321\":1}}],[\"每一个namespace都有自己的单独的缓存空间\",{\"1\":{\"286\":1}}],[\"每一个标签的id不能重复\",{\"1\":{\"234\":1}}],[\"每一个mybatis应用都是以sqlsessionfactory的实例对象为核心的\",{\"1\":{\"234\":1}}],[\"每一个innodb表都有两个文件\",{\"1\":{\"225\":1}}],[\"每一层会经过一次磁盘io\",{\"1\":{\"220\":1}}],[\"每一层都返回一个结果集供上一层使用\",{\"1\":{\"184\":1}}],[\"每一列应该保持原子性\",{\"1\":{\"176\":1}}],[\"每天都要大量使用\",{\"1\":{\"172\":1}}],[\"每个分支都有一个唯一的名称\",{\"1\":{\"1204\":1}}],[\"每个分支都代表着仓库中的一个完整版本\",{\"1\":{\"1204\":1}}],[\"每个方法被执行的时候都会同时创建一个栈帧\",{\"1\":{\"925\":1}}],[\"每个线程累加10000次\",{\"1\":{\"969\":1}}],[\"每个线程都有自己的程序计数器\",{\"1\":{\"925\":1}}],[\"每个线程打印10个数\",{\"1\":{\"838\":2}}],[\"每个属性都要赋值\",{\"1\":{\"924\":1}}],[\"每个子任务就是一个线程\",{\"1\":{\"826\":1}}],[\"每个数据类型都有一个相对应的print方法\",{\"1\":{\"819\":1,\"820\":1}}],[\"每个字符对应这一个整数值\",{\"1\":{\"798\":1}}],[\"每个字符集都有一个默认的校对规则\",{\"1\":{\"149\":1}}],[\"每个单词的首字母都转换为大写并输出\",{\"1\":{\"739\":2}}],[\"每个对象可能都有自身的常量取值\",{\"1\":{\"570\":1}}],[\"每个对象独享自己的成员变量\",{\"1\":{\"477\":1}}],[\"每个一维数组的长度可以自己给出\",{\"1\":{\"434\":1}}],[\"每个一维数组的长度\",{\"1\":{\"434\":1}}],[\"每个变量都需要声明它的数据类型\",{\"1\":{\"333\":1}}],[\"每个内存单元都用一个标识符来标识\",{\"1\":{\"330\":1}}],[\"每个标签都需要一个唯一的id属性\",{\"1\":{\"234\":1}}],[\"每个列包含一个唯一的值\",{\"1\":{\"218\":1}}],[\"每个表存储不同的数据\",{\"1\":{\"171\":1}}],[\"每个关系型数据库都支持sql语言\",{\"1\":{\"144\":1}}],[\"淘宝京东电商系统\",{\"1\":{\"303\":1}}],[\"淘宝\",{\"1\":{\"172\":1}}],[\"人为制造异常\",{\"1\":{\"860\":1}}],[\"人看懂的\",{\"1\":{\"801\":1}}],[\"人看懂的东西\",{\"1\":{\"800\":1}}],[\"人看懂\",{\"1\":{\"801\":1}}],[\"人类\",{\"1\":{\"519\":1}}],[\"人在解决问题的时候\",{\"1\":{\"442\":1}}],[\"人和身份证号\",{\"1\":{\"172\":1}}],[\"人们使用分层数据库\",{\"1\":{\"142\":1}}],[\"哈尔滨\",{\"1\":{\"171\":1}}],[\"哈希值不要求完全不相等\",{\"1\":{\"684\":1}}],[\"哈希值一定相等\",{\"1\":{\"684\":1}}],[\"哈希值是通过计算对象的地址值来获取的\",{\"1\":{\"681\":1}}],[\"哈希算法\",{\"1\":{\"680\":1}}],[\"哈希表中key是唯一的\",{\"1\":{\"680\":1}}],[\"哈希表具有数组访问快的特点\",{\"1\":{\"680\":1}}],[\"哈希表的实现\",{\"1\":{\"680\":1}}],[\"哈希表的详细概念\",{\"1\":{\"680\":1}}],[\"哈希表\",{\"0\":{\"680\":1},\"1\":{\"680\":1}}],[\"哈希冲突是允许存在\",{\"1\":{\"682\":1}}],[\"哈希冲突\",{\"1\":{\"679\":1}}],[\"哈希方法或者哈希算法等\",{\"1\":{\"679\":1,\"999\":1}}],[\"哈希映射\",{\"1\":{\"999\":1}}],[\"哈希映射也是一种特殊的映射\",{\"1\":{\"679\":1,\"999\":1}}],[\"哈希映射就不难理解了\",{\"1\":{\"679\":1}}],[\"哈希的概念\",{\"0\":{\"679\":1}}],[\"哈希码值等相关的概念\",{\"1\":{\"678\":1}}],[\"哈希\",{\"1\":{\"125\":1}}],[\"岳阳\",{\"1\":{\"171\":1}}],[\"随后又扩展到其它动物\",{\"1\":{\"581\":1}}],[\"随后每创建一个新对象就+1\",{\"1\":{\"478\":2}}],[\"随机访问\",{\"1\":{\"394\":1}}],[\"随机生成一个随机数\",{\"1\":{\"354\":1}}],[\"随时可能产生一些临时数据\",{\"1\":{\"330\":1}}],[\"随着jdk版本迭代\",{\"1\":{\"721\":1}}],[\"随着一个个子类的定义\",{\"1\":{\"591\":1}}],[\"随着类加载的过程而执行\",{\"1\":{\"494\":1}}],[\"随着构造器的执行\",{\"1\":{\"487\":1}}],[\"随着方法同生共死\",{\"1\":{\"569\":1}}],[\"随着方法的执行结束就会被销毁\",{\"1\":{\"457\":1}}],[\"随着方法的出栈\",{\"1\":{\"407\":1}}],[\"随着方法出栈\",{\"1\":{\"425\":1}}],[\"随着学习深入\",{\"1\":{\"310\":1}}],[\"随着数据量的增大\",{\"1\":{\"220\":1}}],[\"随着互联网的快速发展\",{\"1\":{\"142\":1}}],[\"随州\",{\"1\":{\"171\":1}}],[\"武汉\",{\"1\":{\"171\":1}}],[\"武松\",{\"1\":{\"161\":1}}],[\"湖南省\",{\"1\":{\"171\":1}}],[\"湖北人\",{\"1\":{\"160\":1,\"161\":1}}],[\"湖北省\",{\"1\":{\"160\":1,\"161\":1,\"171\":1}}],[\"湖北\",{\"1\":{\"110\":1,\"158\":2,\"160\":1}}],[\"声明可能抛出编译时异常\",{\"1\":{\"756\":1}}],[\"声明该方法可能抛出的异常\",{\"1\":{\"756\":1}}],[\"声明的异常类型\",{\"1\":{\"754\":2}}],[\"声明为static的嵌套类称为静态嵌套类\",{\"1\":{\"623\":1}}],[\"声明\",{\"0\":{\"433\":1}}],[\"声明初始化两个数组\",{\"1\":{\"426\":1}}],[\"声明完成一个数组后\",{\"1\":{\"396\":1}}],[\"声明数组的两种语法格式\",{\"1\":{\"395\":1}}],[\"声明是告诉编译器变量的数据类型\",{\"1\":{\"337\":1}}],[\"声明后的变量还没有值无法使用\",{\"1\":{\"334\":1}}],[\"声明变量的语法\",{\"1\":{\"333\":1}}],[\"声明变量的目的是告诉编译器\",{\"1\":{\"333\":1}}],[\"声明局部变量后必须显式的初始化\",{\"1\":{\"407\":1}}],[\"声明局部变量\",{\"1\":{\"332\":1}}],[\"声明当前成员方法没有返回值\",{\"1\":{\"312\":1}}],[\"声明不用序列化的成员域\",{\"1\":{\"312\":1}}],[\"声明在当前定义的成员方法中所有需要抛出的异常\",{\"1\":{\"312\":1}}],[\"声明sql和声明方法\",{\"1\":{\"244\":1}}],[\"声明进来\",{\"1\":{\"234\":1}}],[\"声明一个索引列\",{\"1\":{\"233\":1}}],[\"声明外键\",{\"1\":{\"171\":1}}],[\"声明字段时\",{\"1\":{\"169\":1}}],[\"参考代码如下\",{\"1\":{\"699\":1}}],[\"参考下图\",{\"1\":{\"669\":1,\"699\":1}}],[\"参考下列代码\",{\"1\":{\"668\":1}}],[\"参考以下方法\",{\"1\":{\"663\":1}}],[\"参考以下代码\",{\"1\":{\"352\":1,\"668\":1}}],[\"参考以下代码案例\",{\"1\":{\"352\":1}}],[\"参考如下代码\",{\"1\":{\"598\":1}}],[\"参考如下\",{\"1\":{\"442\":1}}],[\"参见如下代码\",{\"1\":{\"423\":1}}],[\"参与运算\",{\"1\":{\"340\":1}}],[\"参数2提供value\",{\"1\":{\"1123\":1}}],[\"参数1提供key\",{\"1\":{\"1123\":1}}],[\"参数就是状态码\",{\"1\":{\"1122\":1}}],[\"参数化类型\",{\"1\":{\"937\":1}}],[\"参数列表\",{\"1\":{\"563\":1,\"919\":1}}],[\"参数列表不同\",{\"1\":{\"388\":1}}],[\"参数个数不确定\",{\"1\":{\"421\":1}}],[\"参数名\",{\"1\":{\"314\":1,\"516\":2}}],[\"参数不同\",{\"1\":{\"285\":1}}],[\"参数加了\",{\"1\":{\"250\":1}}],[\"参数和返回值设置正确\",{\"1\":{\"244\":1}}],[\"参数保持一致\",{\"1\":{\"235\":1}}],[\"参数写得1\",{\"1\":{\"234\":1}}],[\"参数的类型\",{\"1\":{\"234\":1}}],[\"参数\",{\"1\":{\"192\":1,\"255\":2,\"543\":4,\"544\":2,\"546\":2,\"572\":1,\"739\":2,\"924\":1,\"1021\":1,\"1109\":1,\"1122\":1,\"1123\":1}}],[\"参数放的位置不同\",{\"1\":{\"115\":1}}],[\"参照完整性\",{\"0\":{\"171\":1}}],[\"域完整性是针对某一具体关系数据库的约束条件\",{\"1\":{\"170\":1}}],[\"域完整性\",{\"0\":{\"170\":1}}],[\"域名\",{\"1\":{\"113\":1,\"1144\":1}}],[\"域名解析\",{\"1\":{\"113\":1,\"124\":1}}],[\"面试是向面试官展示你思考方式的机会\",{\"1\":{\"1020\":1}}],[\"面试官是试图通过这10个题\",{\"1\":{\"1020\":1}}],[\"面试官问你这个\",{\"1\":{\"1020\":1}}],[\"面试官问你使用过这个吗\",{\"1\":{\"1020\":1}}],[\"面试官问你一个问题\",{\"1\":{\"1020\":1}}],[\"面试官如果和你强调\",{\"1\":{\"956\":1}}],[\"面试答问题\",{\"1\":{\"1020\":1}}],[\"面试常考点\",{\"1\":{\"994\":1}}],[\"面试一般会怎么问\",{\"1\":{\"969\":1}}],[\"面试专用\",{\"1\":{\"969\":1}}],[\"面试的时候问集合\",{\"1\":{\"994\":1}}],[\"面试的时候\",{\"1\":{\"947\":1,\"951\":1,\"1003\":1}}],[\"面试的时候可以谈一谈思想即可\",{\"1\":{\"283\":1}}],[\"面试的重点\",{\"1\":{\"218\":1}}],[\"面试可能会问到\",{\"1\":{\"255\":1}}],[\"面试时\",{\"1\":{\"213\":1}}],[\"面试\",{\"1\":{\"189\":1,\"956\":1,\"994\":1}}],[\"面试经常问到的问题\",{\"1\":{\"189\":1}}],[\"面试题\",{\"0\":{\"233\":1,\"1004\":1},\"1\":{\"169\":1,\"1002\":1}}],[\"面向对象编程\",{\"1\":{\"1076\":1}}],[\"面向对象设计\",{\"0\":{\"589\":1}}],[\"面向对象的三大特征\",{\"0\":{\"511\":1}}],[\"面向对象的数据库开始成为主流\",{\"1\":{\"142\":1}}],[\"面向对象程序的世界就是对现实生活的模拟\",{\"1\":{\"445\":1}}],[\"面向对象基础\",{\"0\":{\"443\":1}}],[\"面向对象详细讲\",{\"1\":{\"403\":1}}],[\"面向对象讲\",{\"1\":{\"346\":1}}],[\"面向对象再讲\",{\"1\":{\"328\":1}}],[\"面向对象3\",{\"0\":{\"294\":1}}],[\"面向对象2\",{\"0\":{\"293\":1}}],[\"面向对象1\",{\"0\":{\"292\":1}}],[\"面向接口编程\",{\"1\":{\"128\":2}}],[\"假如我要实现如下功能\",{\"1\":{\"825\":1}}],[\"假如只重写了student类的hashcode方法\",{\"1\":{\"684\":1}}],[\"假如只重写了student类的equals方法\",{\"1\":{\"684\":1}}],[\"假如存在多个场景都需要一个子类对象\",{\"1\":{\"649\":1}}],[\"假如在局部位置需要一次性的使用某个对象\",{\"1\":{\"641\":1}}],[\"假如在main方法中写以下代码\",{\"1\":{\"606\":1}}],[\"假如前后端商量好\",{\"1\":{\"601\":1}}],[\"假如还有一些动物也要直立行走\",{\"1\":{\"595\":1}}],[\"假如一个方法在抽象类的多个子类中都需要被使用\",{\"1\":{\"592\":1}}],[\"假如一个test方法需要传入一个student对象\",{\"1\":{\"481\":1}}],[\"假如father还有一个子类son2\",{\"1\":{\"585\":1}}],[\"假如你希望按照下列格式表示时间\",{\"1\":{\"725\":1}}],[\"假如你做一个游戏\",{\"1\":{\"582\":1}}],[\"假如你想使用字面值小数定义一个float类型变量\",{\"1\":{\"336\":1}}],[\"假如你想使用字面值整数定义一个long类型变量\",{\"1\":{\"336\":1}}],[\"假如收集每种动物的叫声研究\",{\"1\":{\"581\":1}}],[\"假如电视机上仅有开关机按键\",{\"1\":{\"580\":1}}],[\"假如方法的返回值是一个数组\",{\"1\":{\"413\":1}}],[\"假如调用的代码是\",{\"1\":{\"389\":1}}],[\"假如第二次查询的内容没有被使用到的话\",{\"1\":{\"283\":1}}],[\"假如传入的是数组\",{\"1\":{\"271\":1}}],[\"假如传入的list\",{\"1\":{\"271\":1}}],[\"假如原始表中的列名和成员变量名不一致的话\",{\"1\":{\"259\":1}}],[\"假如声明的索引变多了之后\",{\"1\":{\"233\":1}}],[\"假如需要先根据非主键索引树查询主键值\",{\"1\":{\"233\":1}}],[\"假如需要批处理n条sql语句\",{\"1\":{\"207\":1}}],[\"假如使用了隐藏的列来当做的主键的话\",{\"1\":{\"233\":1}}],[\"假如数据的高度比较高\",{\"1\":{\"220\":1}}],[\"假如数据的查询需求远大于增删改的需求\",{\"1\":{\"178\":1}}],[\"假如查询到了\",{\"1\":{\"204\":1}}],[\"假如没有这个文件\",{\"1\":{\"1195\":1}}],[\"假如没有给表指定主键的话\",{\"1\":{\"233\":1}}],[\"假如没有主键索引树\",{\"1\":{\"233\":1}}],[\"假如没有主键的话\",{\"1\":{\"226\":1}}],[\"假如没有合适的数据库\",{\"1\":{\"187\":1}}],[\"假如没有指定\",{\"1\":{\"169\":1}}],[\"假如是大公司\",{\"1\":{\"171\":1}}],[\"假如公司比较小\",{\"1\":{\"171\":1}}],[\"假设我们需要实现一个功能\",{\"1\":{\"1026\":1}}],[\"假设位置在x位置上的元素\",{\"1\":{\"1013\":1}}],[\"假设已经有12个元素\",{\"1\":{\"1012\":1}}],[\"假设hashcode\",{\"1\":{\"1008\":1}}],[\"假设c睡醒\",{\"1\":{\"851\":1}}],[\"假设c抢到了cpu的执行权\",{\"1\":{\"851\":1}}],[\"假设b睡醒\",{\"1\":{\"851\":1}}],[\"假设b抢到了cpu的执行权\",{\"1\":{\"851\":2}}],[\"假设a线程抢到了cpu执行权\",{\"1\":{\"884\":1}}],[\"假设a线程抢到了cpu的执行权\",{\"1\":{\"859\":1}}],[\"假设a线程先执行\",{\"1\":{\"866\":1,\"867\":2}}],[\"假设a睡醒\",{\"1\":{\"851\":2}}],[\"假设a抢到了cpu的执行权\",{\"1\":{\"851\":2}}],[\"假设abc3个线程\",{\"1\":{\"851\":2}}],[\"假设a电影院正在上映某电影\",{\"1\":{\"851\":2}}],[\"假设前端给我传过来一个支付类型id为2\",{\"1\":{\"720\":1}}],[\"假设某个app只支持支付宝\",{\"1\":{\"720\":1}}],[\"假设给student类的对象自动编号\",{\"1\":{\"478\":2}}],[\"假设一个班上有80个人\",{\"1\":{\"392\":1}}],[\"假设有10个筛选条件\",{\"1\":{\"263\":1}}],[\"假设有一张足够大可折叠的纸张\",{\"1\":{\"363\":1}}],[\"假设有一张手机表\",{\"1\":{\"263\":1}}],[\"假设有一个登录页面\",{\"1\":{\"204\":1}}],[\"假设之前某一行的数据是\",{\"1\":{\"188\":1}}],[\"假设\",{\"1\":{\"139\":1}}],[\"假设外国人这样发\",{\"1\":{\"116\":1}}],[\"希望以另外一个类型输出\",{\"1\":{\"1040\":1}}],[\"希望被持有的小汽车类\",{\"1\":{\"936\":1}}],[\"希望对字符串进行截取\",{\"1\":{\"655\":1}}],[\"希望大家牢记\",{\"1\":{\"408\":1}}],[\"希望\",{\"1\":{\"235\":1}}],[\"希望用户表里面的name这一列\",{\"1\":{\"168\":1}}],[\"希望一个用来存储学生信息的库\",{\"1\":{\"149\":1}}],[\"求平均分\",{\"1\":{\"956\":1}}],[\"求平方\",{\"1\":{\"386\":1}}],[\"求得的集合b中的元素\",{\"1\":{\"679\":1,\"999\":1}}],[\"求该青蛙跳上n层的台阶总共有多少种跳法\",{\"1\":{\"442\":1}}],[\"求第n个位置的值是多少\",{\"1\":{\"442\":1}}],[\"求n的阶乘\",{\"1\":{\"442\":1}}],[\"求不确定个数的int数值之和\",{\"1\":{\"422\":1}}],[\"求圆的面积\",{\"1\":{\"386\":1}}],[\"求最大值\",{\"1\":{\"386\":1}}],[\"求两个数的最大值\",{\"1\":{\"386\":1}}],[\"求解这张纸折叠多少次\",{\"1\":{\"363\":1}}],[\"求三个数的最大值\",{\"1\":{\"349\":1}}],[\"求x\",{\"1\":{\"344\":1}}],[\"求a的n次方\",{\"1\":{\"386\":1}}],[\"求a\",{\"1\":{\"344\":1}}],[\"求和\",{\"1\":{\"168\":1}}],[\"求每个人的平均分\",{\"1\":{\"162\":4}}],[\"统称为类的静态成员\",{\"1\":{\"473\":1}}],[\"统计一个字符串中大写字母字符\",{\"1\":{\"737\":2}}],[\"统计一下该队伍得分情况\",{\"1\":{\"472\":2}}],[\"统计结束\",{\"1\":{\"737\":1}}],[\"统计\",{\"1\":{\"737\":2}}],[\"统计学生数量\",{\"1\":{\"478\":1}}],[\"统计外部创建student类对象的个数\",{\"1\":{\"478\":2}}],[\"统计这个组\",{\"1\":{\"168\":1}}],[\"统一使用nextline方法\",{\"1\":{\"352\":1}}],[\"统一了操作\",{\"1\":{\"128\":1}}],[\"平台\",{\"1\":{\"768\":2}}],[\"平分\",{\"1\":{\"213\":1}}],[\"平均成绩\",{\"1\":{\"168\":2}}],[\"平均值\",{\"1\":{\"168\":2}}],[\"平时它只需要500台服务器\",{\"1\":{\"126\":1}}],[\"计算的初始值\",{\"1\":{\"1050\":1}}],[\"计算元素\",{\"1\":{\"1050\":1}}],[\"计算元素个数\",{\"1\":{\"1049\":1}}],[\"计算hash的方法\",{\"1\":{\"1016\":1}}],[\"计算hashcode\",{\"1\":{\"953\":1,\"981\":1,\"1008\":1}}],[\"计算int\",{\"1\":{\"1009\":1}}],[\"计算int值\",{\"1\":{\"1009\":1}}],[\"计算得到的hash和\",{\"1\":{\"1009\":1}}],[\"计算得到的hash值是77\",{\"1\":{\"1008\":1}}],[\"计算得到的下标\",{\"1\":{\"1008\":1}}],[\"计算得到一个int类型的值\",{\"1\":{\"1002\":1}}],[\"计算\",{\"1\":{\"881\":1}}],[\"计算完成前可以阻塞此方法\",{\"1\":{\"880\":1}}],[\"计算完成后只能使用\",{\"1\":{\"880\":1}}],[\"计算两个long类型数据之和\",{\"1\":{\"387\":1}}],[\"计算两个double类型数据之和\",{\"1\":{\"387\":1}}],[\"计算两个int类型数据之和\",{\"1\":{\"387\":1}}],[\"计算333+444\",{\"1\":{\"380\":1}}],[\"计算111+222\",{\"1\":{\"380\":1}}],[\"计算10+20\",{\"1\":{\"380\":1}}],[\"计算出y的并输出\",{\"1\":{\"358\":1}}],[\"计算顺序\",{\"1\":{\"350\":1}}],[\"计算机程序在某个数据集合上的运行活动\",{\"1\":{\"826\":1}}],[\"计算机看懂的\",{\"1\":{\"801\":1}}],[\"计算机看懂的东西\",{\"1\":{\"800\":1}}],[\"计算机存的就是这个整数值\",{\"1\":{\"798\":1}}],[\"计算机\",{\"1\":{\"623\":1}}],[\"计算机中存储字符\",{\"1\":{\"324\":1}}],[\"计算机中数据存储单位的概念\",{\"1\":{\"321\":1}}],[\"计算机只能存储二进制数据\",{\"1\":{\"324\":1}}],[\"计算机组成原理\",{\"1\":{\"323\":1}}],[\"计算非null的总行数\",{\"1\":{\"168\":1}}],[\"计数器减少1\",{\"1\":{\"927\":1}}],[\"计数器加1\",{\"1\":{\"927\":1}}],[\"计数器+1\",{\"1\":{\"737\":1}}],[\"计数器\",{\"1\":{\"737\":1}}],[\"计数\",{\"1\":{\"168\":2}}],[\"计划\",{\"1\":{\"64\":2}}],[\"函数只不过是集合a\",{\"1\":{\"679\":1}}],[\"函数式编程的代表\",{\"1\":{\"657\":1}}],[\"函数\",{\"1\":{\"168\":2,\"999\":1}}],[\"函数会把每个分组的字段值都拼接显示出来\",{\"1\":{\"167\":1}}],[\"班上有5个同学\",{\"1\":{\"950\":1}}],[\"班级同学年龄总和\",{\"1\":{\"1050\":1}}],[\"班级里有一些学生\",{\"1\":{\"997\":1}}],[\"班级和学生\",{\"1\":{\"173\":1}}],[\"班级的最高分\",{\"1\":{\"167\":1}}],[\"班主任的信息\",{\"1\":{\"1019\":1}}],[\"班主任名字重复存储了\",{\"1\":{\"178\":1}}],[\"班主任将学生信息表发送给南风老师\",{\"1\":{\"110\":1}}],[\"班主任和南风老师约定了数据格式\",{\"1\":{\"110\":1}}],[\"班主任需要将学生信息表传递给南风老师\",{\"1\":{\"110\":1}}],[\"升序排序\",{\"1\":{\"166\":2}}],[\"别的提交写得代码\",{\"1\":{\"1197\":1}}],[\"别名不区分大小写\",{\"1\":{\"257\":2}}],[\"别名\",{\"0\":{\"165\":1},\"1\":{\"247\":1,\"261\":1}}],[\"别人访问不到\",{\"1\":{\"139\":1}}],[\"总分\",{\"1\":{\"956\":1}}],[\"总的来说\",{\"1\":{\"838\":1}}],[\"总的步骤可以概括为\",{\"1\":{\"188\":1}}],[\"总称呼下游类是上游类的子类\",{\"1\":{\"533\":1}}],[\"总体很简单\",{\"1\":{\"669\":1}}],[\"总体上来说\",{\"1\":{\"568\":1}}],[\"总体说明\",{\"1\":{\"358\":1}}],[\"总体而言\",{\"1\":{\"110\":1}}],[\"总得来说\",{\"1\":{\"311\":1,\"496\":1,\"653\":1}}],[\"总开关\",{\"1\":{\"286\":1}}],[\"总开关配置\",{\"1\":{\"283\":1}}],[\"总之\",{\"1\":{\"213\":1,\"313\":1,\"320\":1,\"483\":1,\"516\":1,\"546\":1,\"579\":1,\"606\":1,\"649\":1,\"702\":1,\"1204\":1}}],[\"总是跟这个事务在启动时看到的数据是一致的\",{\"1\":{\"211\":1}}],[\"总结一下\",{\"1\":{\"632\":1,\"759\":1}}],[\"总结一下java中多态发生的条件\",{\"1\":{\"576\":1}}],[\"总结一下到目前为止\",{\"1\":{\"489\":1,\"546\":1}}],[\"总结来说\",{\"1\":{\"575\":1}}],[\"总结来说就是\",{\"1\":{\"405\":1}}],[\"总结\",{\"0\":{\"546\":1,\"553\":1,\"559\":1,\"587\":1,\"625\":1},\"1\":{\"171\":1,\"178\":1,\"204\":1,\"370\":1,\"456\":1,\"476\":1,\"732\":1,\"868\":1,\"956\":1,\"1201\":1}}],[\"总共五个元素\",{\"1\":{\"1039\":1}}],[\"总共有10个条件\",{\"1\":{\"263\":1}}],[\"总共14个字节\",{\"1\":{\"233\":1}}],[\"总共最大拿回来五个\",{\"1\":{\"164\":1}}],[\"总共拿回来5个\",{\"1\":{\"164\":1}}],[\"偏移数目\",{\"1\":{\"164\":1}}],[\"偏移量为\",{\"1\":{\"890\":1,\"892\":1}}],[\"偏移量为offsetnumber\",{\"1\":{\"164\":1}}],[\"偏移量offsetnumber\",{\"1\":{\"164\":1}}],[\"限定响应的正文\",{\"1\":{\"1125\":1}}],[\"限定记录数目\",{\"1\":{\"164\":3}}],[\"限于目前的学习进度\",{\"1\":{\"458\":1}}],[\"限制了代码的可读性\",{\"1\":{\"938\":1}}],[\"限制于我们目前学习的知识\",{\"1\":{\"327\":1}}],[\"限制最大返回number个\",{\"1\":{\"164\":1}}],[\"限制数目\",{\"1\":{\"164\":1}}],[\"限制结果集\",{\"0\":{\"164\":1}}],[\"记得flush操作\",{\"1\":{\"790\":1}}],[\"记录某个文件夹下的\",{\"1\":{\"1183\":1}}],[\"记录程序的信息\",{\"1\":{\"319\":1}}],[\"记录的唯一性\",{\"1\":{\"177\":1}}],[\"记录数目\",{\"1\":{\"164\":6}}],[\"记住注册的时候\",{\"1\":{\"1190\":1}}],[\"记住登录凭证\",{\"1\":{\"1186\":1}}],[\"记住一个点\",{\"1\":{\"1110\":1}}],[\"记住它有返回值\",{\"1\":{\"665\":1}}],[\"记住步骤会使用就行\",{\"1\":{\"352\":1}}],[\"记住\",{\"1\":{\"160\":1}}],[\"全丢掉\",{\"1\":{\"1202\":1}}],[\"全大写字母\",{\"1\":{\"1019\":1}}],[\"全名为线性存储结构\",{\"1\":{\"957\":1}}],[\"全限定名\",{\"1\":{\"916\":2}}],[\"全限定类名都很长\",{\"1\":{\"503\":1}}],[\"全限定类名\",{\"0\":{\"500\":1},\"1\":{\"257\":2,\"503\":1,\"667\":1}}],[\"全类名\",{\"1\":{\"857\":1}}],[\"全局常量\",{\"1\":{\"598\":2}}],[\"全局常量的取值也不能依赖于默认值\",{\"1\":{\"571\":1}}],[\"全局变量\",{\"1\":{\"457\":1}}],[\"全称application\",{\"1\":{\"658\":1}}],[\"全称\",{\"1\":{\"348\":1}}],[\"全称java运行时环境\",{\"1\":{\"304\":1}}],[\"全部sql需要修改\",{\"1\":{\"267\":2}}],[\"全部写出来\",{\"1\":{\"231\":1}}],[\"全部都应该有数据\",{\"1\":{\"168\":1}}],[\"全部相等\",{\"1\":{\"163\":1}}],[\"全屏模式\",{\"0\":{\"38\":1}}],[\"什么比较像\",{\"1\":{\"1195\":1}}],[\"什么时候会扩容\",{\"1\":{\"978\":1}}],[\"什么时候回收垃圾\",{\"0\":{\"934\":1}}],[\"什么时候用什么流\",{\"0\":{\"784\":1}}],[\"什么便\",{\"1\":{\"807\":1}}],[\"什么夜\",{\"1\":{\"806\":1}}],[\"什么关键字都不写\",{\"1\":{\"509\":1}}],[\"什么都没有\",{\"1\":{\"356\":1}}],[\"什么叫key相等\",{\"1\":{\"1016\":1}}],[\"什么叫键值对\",{\"1\":{\"995\":1}}],[\"什么叫阻塞队列\",{\"1\":{\"979\":1}}],[\"什么叫线程安全问题\",{\"1\":{\"969\":1}}],[\"什么叫无序\",{\"1\":{\"952\":1}}],[\"什么叫有序\",{\"1\":{\"952\":1}}],[\"什么叫做输入映射怎么写\",{\"1\":{\"265\":1}}],[\"什么叫重复\",{\"1\":{\"163\":1,\"980\":1,\"1024\":1}}],[\"什么情况下使用myisam\",{\"1\":{\"233\":1}}],[\"什么样的方法\",{\"1\":{\"655\":2}}],[\"什么样的成员方法应该设置为final呢\",{\"1\":{\"567\":1}}],[\"什么样的类需要设置成final\",{\"1\":{\"566\":1}}],[\"什么样的列适合当索引\",{\"1\":{\"233\":1}}],[\"什么样的数据不需要使用增删改呢\",{\"1\":{\"228\":1}}],[\"什么样的表不需要事务呢\",{\"1\":{\"228\":1}}],[\"什么是流\",{\"0\":{\"1031\":1}}],[\"什么是hash\",{\"0\":{\"999\":1}}],[\"什么是map呢\",{\"1\":{\"995\":1}}],[\"什么是泛型\",{\"1\":{\"937\":1}}],[\"什么是元数据呢\",{\"1\":{\"924\":1}}],[\"什么是注解处理器\",{\"1\":{\"924\":1}}],[\"什么是注解\",{\"1\":{\"924\":1}}],[\"什么是注释\",{\"0\":{\"317\":1}}],[\"什么是反射\",{\"0\":{\"915\":1}}],[\"什么是死锁\",{\"0\":{\"865\":1}}],[\"什么是线程调度\",{\"0\":{\"834\":1}}],[\"什么是序列化与反序列化\",{\"1\":{\"822\":1}}],[\"什么是io\",{\"0\":{\"779\":1}}],[\"什么是包装类\",{\"1\":{\"701\":1}}],[\"什么是哈希表\",{\"1\":{\"680\":1}}],[\"什么是哈希值了\",{\"1\":{\"679\":1}}],[\"什么是哈希映射\",{\"1\":{\"679\":1}}],[\"什么是多态\",{\"1\":{\"575\":1}}],[\"什么是super关键字\",{\"1\":{\"544\":1}}],[\"什么是全限定类名\",{\"1\":{\"500\":1}}],[\"什么是静态代码块\",{\"1\":{\"493\":1}}],[\"什么是构造代码块\",{\"1\":{\"486\":1}}],[\"什么是匿名对象\",{\"0\":{\"480\":1}}],[\"什么是方法的传值问题\",{\"1\":{\"424\":1}}],[\"什么是异常\",{\"0\":{\"746\":1},\"1\":{\"410\":1}}],[\"什么是引用数据类型\",{\"0\":{\"405\":1}}],[\"什么是形式参数和实际参数\",{\"1\":{\"382\":1}}],[\"什么是转义字符\",{\"1\":{\"355\":1}}],[\"什么是初始化变量\",{\"1\":{\"334\":1}}],[\"什么是声明变量\",{\"1\":{\"333\":1}}],[\"什么是常量\",{\"1\":{\"328\":1}}],[\"什么是数据结构\",{\"1\":{\"947\":1}}],[\"什么是数据类型\",{\"1\":{\"320\":1}}],[\"什么是数据库\",{\"0\":{\"141\":1}}],[\"什么是标识符\",{\"0\":{\"314\":1}}],[\"什么是保留字\",{\"1\":{\"313\":1}}],[\"什么是关键字\",{\"1\":{\"311\":1}}],[\"什么是回表\",{\"1\":{\"233\":1}}],[\"什么是索引呢\",{\"1\":{\"219\":1}}],[\"什么是覆盖索引\",{\"1\":{\"218\":1}}],[\"什么是仓库\",{\"1\":{\"141\":1}}],[\"两次提交\",{\"1\":{\"1201\":2}}],[\"两次方法调用的结果一样吗\",{\"1\":{\"459\":1}}],[\"两者底层结构都是数组+链表\",{\"1\":{\"1020\":1}}],[\"两者的区别\",{\"0\":{\"457\":1}}],[\"两者的联系\",{\"1\":{\"342\":1}}],[\"两部分\",{\"1\":{\"1014\":1}}],[\"两组api的表现不一致\",{\"1\":{\"972\":1}}],[\"两倍的collection占有空间\",{\"1\":{\"954\":1}}],[\"两台不同计算机上的进程实现通信交互数据的条件\",{\"1\":{\"885\":1}}],[\"两两交换\",{\"1\":{\"739\":1}}],[\"两位数\",{\"1\":{\"725\":5}}],[\"两条new语句创建的对象是完全独立的\",{\"1\":{\"454\":1}}],[\"两道基础语法练习题\",{\"1\":{\"358\":1}}],[\"两个元素\",{\"1\":{\"1050\":1}}],[\"两个元素比较\",{\"1\":{\"1050\":1}}],[\"两个简单的中止操作\",{\"1\":{\"1035\":1}}],[\"两个都是map的子实现\",{\"1\":{\"1020\":1}}],[\"两个对象相等\",{\"1\":{\"684\":1}}],[\"两个对象不相等\",{\"1\":{\"682\":1,\"684\":1}}],[\"两个对象是相等的\",{\"1\":{\"682\":1}}],[\"两个相同类型的对象成员变量取值完全一致时\",{\"1\":{\"674\":1}}],[\"两个类其实没太大关系\",{\"1\":{\"623\":1}}],[\"两个类的命名\",{\"0\":{\"522\":1}}],[\"两个单词之间用\",{\"1\":{\"568\":1}}],[\"两个属性\",{\"1\":{\"459\":1}}],[\"两个非常重要的概念\",{\"1\":{\"382\":1}}],[\"两个反斜杠表示一个反斜杠\",{\"1\":{\"356\":1}}],[\"两个浮点数的比较不建议直接使用比较运算符\",{\"1\":{\"346\":1}}],[\"两个字的\",{\"1\":{\"162\":1}}],[\"两种方式\",{\"1\":{\"732\":1}}],[\"两种使用方式场景不同\",{\"1\":{\"648\":1}}],[\"两种传值方式\",{\"1\":{\"424\":1}}],[\"两种特殊的循环\",{\"0\":{\"365\":1}}],[\"两种布尔值\",{\"1\":{\"325\":1}}],[\"两种写法\",{\"1\":{\"162\":1}}],[\"两层含义\",{\"1\":{\"126\":1}}],[\"练习题\",{\"0\":{\"1134\":1}}],[\"练习来讲解这个问题\",{\"1\":{\"540\":1}}],[\"练习三\",{\"1\":{\"517\":1}}],[\"练习二\",{\"1\":{\"517\":1}}],[\"练习一\",{\"1\":{\"517\":1}}],[\"练习一下怎么去组织语言\",{\"1\":{\"201\":1}}],[\"练习3\",{\"1\":{\"409\":1}}],[\"练习2\",{\"1\":{\"409\":1,\"776\":2}}],[\"练习1\",{\"1\":{\"409\":1,\"776\":2}}],[\"练习\",{\"0\":{\"354\":1,\"386\":1,\"390\":1,\"409\":1,\"491\":1,\"498\":1,\"545\":1,\"564\":1,\"573\":1,\"594\":1,\"601\":1,\"619\":1,\"632\":1,\"650\":1,\"720\":1},\"1\":{\"162\":1,\"168\":1,\"362\":1,\"363\":1,\"370\":1,\"377\":1,\"378\":1,\"470\":1,\"530\":1,\"575\":1,\"740\":1,\"754\":1,\"777\":2,\"821\":2,\"872\":2,\"881\":2,\"924\":1}}],[\"比起局部内部类\",{\"1\":{\"649\":1}}],[\"比成员变量出现的要早\",{\"1\":{\"477\":1}}],[\"比赛结束\",{\"1\":{\"472\":2}}],[\"比贾宪迟600年\",{\"1\":{\"441\":1}}],[\"比杨辉要迟393年\",{\"1\":{\"441\":1}}],[\"比二叉树高度降低了\",{\"1\":{\"220\":1}}],[\"比数组和链表要方便很多\",{\"1\":{\"220\":1}}],[\"比较危险\",{\"1\":{\"1204\":1}}],[\"比较特殊的请求头\",{\"1\":{\"1104\":1}}],[\"比较是否相等\",{\"1\":{\"1016\":1}}],[\"比较完成后\",{\"1\":{\"1002\":1}}],[\"比较严重的错误\",{\"1\":{\"747\":1}}],[\"比较字符串的大小\",{\"1\":{\"739\":1}}],[\"比较简单\",{\"1\":{\"719\":1}}],[\"比较大小\",{\"1\":{\"708\":1,\"710\":1}}],[\"比较大的区别是\",{\"1\":{\"544\":1}}],[\"比较了\",{\"1\":{\"708\":1}}],[\"比较对象的地址\",{\"1\":{\"673\":1}}],[\"比较的是引用变量\",{\"1\":{\"734\":1}}],[\"比较的是内容\",{\"1\":{\"734\":1}}],[\"比较的规则其实就是方法体中的代码\",{\"1\":{\"672\":1}}],[\"比较的结果\",{\"1\":{\"346\":1}}],[\"比较常见的有\",{\"1\":{\"567\":1}}],[\"比较典型的有\",{\"1\":{\"478\":1}}],[\"比较\",{\"1\":{\"346\":1,\"728\":1}}],[\"比较运算符是典型的二元运算符\",{\"1\":{\"346\":1}}],[\"比较运算符\",{\"0\":{\"346\":1},\"1\":{\"343\":1}}],[\"比较知名的一款游戏就是\",{\"1\":{\"303\":1}}],[\"比较重要\",{\"1\":{\"256\":1}}],[\"比较方便\",{\"1\":{\"220\":2}}],[\"比较备份前后的哈希值\",{\"1\":{\"188\":1}}],[\"比较和逻辑运算符\",{\"1\":{\"162\":1}}],[\"比如是留你的版本\",{\"1\":{\"1201\":1}}],[\"比如是谁的接口\",{\"1\":{\"1020\":1}}],[\"比如登录之后的用户信息\",{\"1\":{\"1161\":1}}],[\"比如登录之后会显示各自的用户名\",{\"1\":{\"126\":1}}],[\"比如整个应用中的sqlsessionfactory\",{\"1\":{\"1161\":1}}],[\"比如192\",{\"1\":{\"1157\":1}}],[\"比如用户id或用户信息\",{\"1\":{\"1152\":1}}],[\"比如用户登陆的\",{\"1\":{\"680\":1}}],[\"比如http\",{\"1\":{\"1145\":1}}],[\"比如html\",{\"1\":{\"1078\":1,\"1098\":1}}],[\"比如png图片\",{\"1\":{\"1120\":1}}],[\"比如上传头像\",{\"1\":{\"1120\":1}}],[\"比如上图就是一个int类型的二维数组\",{\"1\":{\"430\":1}}],[\"比如user\",{\"1\":{\"1118\":1}}],[\"比如application\",{\"1\":{\"1105\":1}}],[\"比如a继承b\",{\"1\":{\"533\":2}}],[\"比如jpg\",{\"1\":{\"1090\":1}}],[\"比如java进程\",{\"1\":{\"885\":1}}],[\"比如java中的集合\",{\"1\":{\"394\":1}}],[\"比如javac\",{\"1\":{\"304\":1}}],[\"比如筛选\",{\"1\":{\"1031\":1}}],[\"比如筛选框可以随意组合\",{\"1\":{\"263\":1}}],[\"比如想要年龄大于20的学生\",{\"1\":{\"1036\":1}}],[\"比如想要某个地区的学生\",{\"1\":{\"1036\":1}}],[\"比如想2min\",{\"1\":{\"1020\":1}}],[\"比如想看一个班级有多少学生\",{\"1\":{\"167\":1}}],[\"比如remove\",{\"1\":{\"1015\":1}}],[\"比如默认的数组长度是16\",{\"1\":{\"1006\":1}}],[\"比如你写了一天的代码\",{\"1\":{\"1202\":1}}],[\"比如你想统计一个班上每个省份的学生人数\",{\"1\":{\"997\":1}}],[\"比如你传入了品牌\",{\"1\":{\"263\":1}}],[\"比如多个线程对i进行操作\",{\"1\":{\"969\":1}}],[\"比如class文件\",{\"1\":{\"1203\":1}}],[\"比如clazz\",{\"1\":{\"1109\":1}}],[\"比如commons\",{\"1\":{\"1120\":1}}],[\"比如collection底层有的是数组\",{\"1\":{\"955\":1}}],[\"比如c++是程序员手动释放的\",{\"1\":{\"689\":1}}],[\"比如最开始\",{\"1\":{\"954\":1}}],[\"比如存入进去的是\",{\"1\":{\"952\":1}}],[\"比如存储一组手机号码\",{\"1\":{\"950\":1}}],[\"比如存储一组学生\",{\"1\":{\"950\":1}}],[\"比如根据身份证号\",{\"1\":{\"950\":1}}],[\"比如根据手机号\",{\"1\":{\"950\":1}}],[\"比如根据id找名字\",{\"1\":{\"257\":1}}],[\"比如本来存储进去的autocar\",{\"1\":{\"936\":1}}],[\"比如皮卡类\",{\"1\":{\"936\":1}}],[\"比如修饰一整个类\",{\"1\":{\"924\":1}}],[\"比如输入gun\",{\"1\":{\"821\":1}}],[\"比如servlet和jsp数据共享\",{\"1\":{\"1161\":1}}],[\"比如system\",{\"1\":{\"760\":1}}],[\"比如string和string比较\",{\"1\":{\"346\":1}}],[\"比如对于一个集合来说\",{\"1\":{\"955\":1}}],[\"比如对于一个数组来说\",{\"1\":{\"955\":1}}],[\"比如对某些数据进行筛选\",{\"1\":{\"951\":1}}],[\"比如对weekdaynum\",{\"1\":{\"719\":1}}],[\"比如对学生的sql\",{\"1\":{\"234\":1}}],[\"比如integer之于int类型\",{\"1\":{\"702\":1}}],[\"比如if\",{\"1\":{\"331\":1}}],[\"比如类名是啥\",{\"1\":{\"662\":1}}],[\"比如超级狗和猫\",{\"1\":{\"595\":1}}],[\"比如一个人修改了\",{\"1\":{\"1201\":1}}],[\"比如一个学生\",{\"1\":{\"950\":1}}],[\"比如一个student类\",{\"1\":{\"682\":1}}],[\"比如一旦修改就会导致问题\",{\"1\":{\"567\":1}}],[\"比如一些特殊的资源\",{\"1\":{\"1090\":1}}],[\"比如一些初类的始化工作\",{\"1\":{\"495\":1}}],[\"比如一些仓库\",{\"1\":{\"141\":1}}],[\"比如四类八种基本数据类型的包装类\",{\"1\":{\"566\":1}}],[\"比如都可以叫\",{\"1\":{\"530\":1}}],[\"比如参考下列代码\",{\"1\":{\"509\":1}}],[\"比如需要一个算法\",{\"1\":{\"490\":1}}],[\"比如创建对象\",{\"1\":{\"662\":1}}],[\"比如创建一个student对象\",{\"1\":{\"452\":1}}],[\"比如创库的时候\",{\"1\":{\"148\":1}}],[\"比如下一次要存储integer了\",{\"1\":{\"949\":1}}],[\"比如下面\",{\"1\":{\"434\":1}}],[\"比如下列代码\",{\"1\":{\"349\":1,\"424\":1,\"669\":1,\"696\":1}}],[\"比如图像处理\",{\"1\":{\"431\":1}}],[\"比如遍历int数组\",{\"1\":{\"417\":1}}],[\"比如数组\",{\"1\":{\"413\":1}}],[\"比如main方法\",{\"1\":{\"378\":1}}],[\"比如main方法的大括号内部\",{\"1\":{\"331\":1}}],[\"比如说输入gun\",{\"1\":{\"825\":3}}],[\"比如说\",{\"1\":{\"375\":1}}],[\"比如说某个初创公司\",{\"1\":{\"128\":1}}],[\"比如月份和季节的案例\",{\"1\":{\"359\":1}}],[\"比如时间的分隔\",{\"1\":{\"356\":1}}],[\"比如while\",{\"1\":{\"342\":1}}],[\"比如在demo1中构造一个cookie\",{\"1\":{\"1145\":1}}],[\"比如在一个局域网下\",{\"1\":{\"885\":1}}],[\"比如在创建对象过程中的赋值方式\",{\"1\":{\"571\":1}}],[\"比如在ascii码表中\",{\"1\":{\"355\":1}}],[\"比如在编码前先用注释标记出每一步应该完成的事情\",{\"1\":{\"319\":1}}],[\"比如在书这张表里\",{\"1\":{\"153\":1}}],[\"比如开发一个需要频繁和java语言交互的应用程序\",{\"1\":{\"303\":1}}],[\"比如开发环境\",{\"1\":{\"248\":1}}],[\"比如各种管理系统\",{\"1\":{\"303\":1}}],[\"比如京东的后台有一张手机表\",{\"1\":{\"263\":1}}],[\"比如机身内存\",{\"1\":{\"263\":1}}],[\"比如查询一个班级里面的所有学生\",{\"1\":{\"260\":1}}],[\"比如查询商品信息\",{\"1\":{\"115\":1}}],[\"比如拿回来是学生的姓名\",{\"1\":{\"258\":1}}],[\"比如拿回来是班上人的id\",{\"1\":{\"258\":1}}],[\"比如返回的是账户的所有name\",{\"1\":{\"258\":1}}],[\"比如返回html\",{\"1\":{\"123\":1}}],[\"比如现在要去jd搜索一个手机\",{\"1\":{\"263\":1}}],[\"比如现在你司的用户有1亿个\",{\"1\":{\"256\":1}}],[\"比如现在有一个zhansgan\",{\"1\":{\"149\":1}}],[\"比如这里有一个map\",{\"1\":{\"253\":2}}],[\"比如这个autocar需要进行十几个步骤\",{\"1\":{\"936\":1}}],[\"比如这个人的姓名\",{\"1\":{\"170\":1}}],[\"比如这个省份表\",{\"1\":{\"143\":1}}],[\"比如转账操作\",{\"1\":{\"208\":1}}],[\"比如表a有3条数据\",{\"1\":{\"181\":1}}],[\"比如有注解\",{\"1\":{\"264\":1}}],[\"比如有300列\",{\"1\":{\"172\":1}}],[\"比如有一张学生表\",{\"1\":{\"170\":1}}],[\"比如有一些排序规则区分大小写\",{\"1\":{\"149\":1}}],[\"比如我想将身高\",{\"1\":{\"1040\":1}}],[\"比如我想将一批人的年龄\",{\"1\":{\"1040\":1}}],[\"比如我定义了一个抽象的person类\",{\"1\":{\"594\":1}}],[\"比如我先做了一次自动转换\",{\"1\":{\"585\":1}}],[\"比如我们响应json\",{\"1\":{\"1127\":1}}],[\"比如我们响应json数据给前端\",{\"1\":{\"1127\":1}}],[\"比如我们使用这样一个定义\",{\"1\":{\"937\":1}}],[\"比如我们使用以下方式设置一个date对象\",{\"1\":{\"724\":1}}],[\"比如我们之前定义一个变量\",{\"1\":{\"937\":1}}],[\"比如我们返回的是一个班级的名称列表\",{\"1\":{\"258\":1}}],[\"比如我们想根据id进行排序\",{\"1\":{\"166\":1}}],[\"比如我现在有一个电影\",{\"1\":{\"153\":1}}],[\"比如我现在要上传一张图片\",{\"1\":{\"116\":1}}],[\"比如限制最大的返回数目\",{\"1\":{\"164\":1}}],[\"比如校对规则\",{\"1\":{\"149\":1}}],[\"比如腾讯\",{\"1\":{\"144\":1}}],[\"比如第一行\",{\"1\":{\"141\":1}}],[\"比如访问localhost时候设置一个ccc\",{\"1\":{\"1146\":1}}],[\"比如访问http\",{\"1\":{\"139\":1}}],[\"比如访问www\",{\"1\":{\"139\":1}}],[\"比如tomcat实现了这个规范\",{\"1\":{\"128\":1}}],[\"比如tomcat\",{\"1\":{\"126\":1}}],[\"比如text\",{\"1\":{\"116\":1}}],[\"比如\",{\"1\":{\"123\":1,\"126\":1,\"136\":1,\"138\":1,\"149\":2,\"159\":1,\"168\":1,\"172\":2,\"204\":1,\"252\":2,\"264\":1,\"315\":1,\"323\":2,\"324\":1,\"331\":1,\"340\":1,\"345\":1,\"352\":1,\"415\":1,\"425\":1,\"458\":1,\"466\":1,\"503\":1,\"567\":1,\"652\":1,\"669\":1,\"689\":1,\"703\":2,\"705\":1,\"719\":1,\"825\":3,\"939\":1,\"943\":1,\"951\":1,\"978\":1,\"995\":2,\"1001\":1,\"1009\":1,\"1016\":1,\"1043\":1,\"1050\":1,\"1090\":1,\"1203\":1,\"1204\":1}}],[\"比如gzip\",{\"1\":{\"116\":1}}],[\"比如文本\",{\"1\":{\"111\":1}}],[\"比如大家来之前\",{\"1\":{\"110\":1}}],[\"算上新加的结点\",{\"1\":{\"1011\":1}}],[\"算法\",{\"1\":{\"947\":1}}],[\"算数异常\",{\"1\":{\"747\":1,\"748\":1}}],[\"算数运算符\",{\"1\":{\"162\":1,\"343\":1}}],[\"算术运算符\",{\"0\":{\"344\":1},\"1\":{\"162\":1,\"344\":1}}],[\"取出配置\",{\"0\":{\"1095\":1}}],[\"取的低位\",{\"1\":{\"1008\":1}}],[\"取消定时器\",{\"1\":{\"884\":1}}],[\"取值100\",{\"1\":{\"851\":3}}],[\"取值\",{\"1\":{\"851\":1}}],[\"取值只能通过下标\",{\"1\":{\"444\":1}}],[\"取值范围就越大\",{\"1\":{\"338\":1}}],[\"取值范围\",{\"1\":{\"326\":1}}],[\"取值范围是\",{\"1\":{\"324\":1}}],[\"取模和赋值操作符\",{\"1\":{\"345\":1}}],[\"取模\",{\"1\":{\"344\":1}}],[\"取结果的整数部分\",{\"1\":{\"336\":1}}],[\"取而代之的是使用我们的nosql数据库\",{\"1\":{\"287\":1}}],[\"取别名可以解决这个问题\",{\"1\":{\"261\":1}}],[\"取得这一行的数据\",{\"1\":{\"230\":2}}],[\"取得id=300\",{\"1\":{\"230\":1}}],[\"取\",{\"1\":{\"213\":1,\"1152\":1}}],[\"取一个别名\",{\"1\":{\"165\":1}}],[\"取余\",{\"1\":{\"162\":1,\"344\":1}}],[\"取数据库的名字的时候\",{\"1\":{\"149\":1}}],[\"除去默认初始化\",{\"1\":{\"571\":1}}],[\"除最后一个\",{\"1\":{\"440\":1}}],[\"除此以外\",{\"1\":{\"393\":1}}],[\"除此之外\",{\"1\":{\"323\":1,\"327\":1,\"356\":1,\"378\":1,\"643\":1,\"656\":1,\"965\":1}}],[\"除开这点这么做也不是完美的\",{\"1\":{\"595\":1}}],[\"除开上述条件外\",{\"1\":{\"388\":1}}],[\"除开上面两种语境不能使用break\",{\"1\":{\"376\":1}}],[\"除开特殊场景不要使用它\",{\"1\":{\"316\":1}}],[\"除和赋值操作符\",{\"1\":{\"345\":1}}],[\"除法\",{\"1\":{\"344\":1}}],[\"除非在极个别情况下\",{\"1\":{\"968\":1}}],[\"除非你真的有需要\",{\"1\":{\"698\":1}}],[\"除非特别有必要\",{\"1\":{\"339\":1}}],[\"除非除了按位传值没办法了\",{\"1\":{\"254\":1}}],[\"除了linkedlist子实现\",{\"1\":{\"971\":1}}],[\"除了第一个元素和最后一个元素\",{\"1\":{\"957\":1}}],[\"除了main线程外\",{\"1\":{\"830\":1}}],[\"除了标记了解的\",{\"1\":{\"825\":1}}],[\"除了runtimeexception及其子类外的其他的异常\",{\"1\":{\"747\":1}}],[\"除了访问权限修饰符之外\",{\"1\":{\"592\":1}}],[\"除了默认初始化\",{\"1\":{\"570\":1}}],[\"除了值不能变\",{\"1\":{\"569\":1}}],[\"除了要有递归体语句外\",{\"1\":{\"442\":1}}],[\"除了上述三种三种初始化方式\",{\"1\":{\"434\":1}}],[\"除了基本数据类型外\",{\"1\":{\"341\":1}}],[\"除了jre外\",{\"1\":{\"304\":1}}],[\"除了内置别名\",{\"1\":{\"247\":1}}],[\"除\",{\"1\":{\"162\":1,\"342\":1,\"386\":1}}],[\"乘性\",{\"1\":{\"350\":1}}],[\"乘和赋值操作符\",{\"1\":{\"345\":1}}],[\"乘法\",{\"1\":{\"344\":1}}],[\"乘\",{\"1\":{\"162\":1,\"342\":1,\"386\":1}}],[\"减轻了服务器压力\",{\"1\":{\"1149\":1}}],[\"减了几个元素\",{\"1\":{\"955\":1}}],[\"减小了memory\",{\"1\":{\"925\":1}}],[\"减和赋值操作符\",{\"1\":{\"345\":1}}],[\"减法\",{\"1\":{\"344\":1,\"675\":1}}],[\"减少编码量\",{\"1\":{\"267\":1}}],[\"减少连接创建时间\",{\"1\":{\"213\":1}}],[\"减\",{\"1\":{\"162\":1,\"342\":1,\"386\":1}}],[\"运用多态特性\",{\"1\":{\"936\":1}}],[\"运送中\",{\"1\":{\"721\":1}}],[\"运算方向从右向左\",{\"1\":{\"345\":1}}],[\"运算符有不同的优先级\",{\"1\":{\"350\":1}}],[\"运算符的优先级对表达式结果有显著影响\",{\"1\":{\"350\":1}}],[\"运算符的优先级决定了谁先进行运算\",{\"1\":{\"350\":1}}],[\"运算符的优先级\",{\"0\":{\"350\":1}}],[\"运算符指的是专门连接布尔类型变量\",{\"1\":{\"347\":1}}],[\"运算符指的是用来判断两个变量\",{\"1\":{\"346\":1}}],[\"运算符指为变量指定新值完成赋值作用的运算符\",{\"1\":{\"345\":1}}],[\"运算符分类\",{\"0\":{\"343\":1}}],[\"运算符起着连接变量的作用\",{\"1\":{\"342\":1}}],[\"运算符\",{\"1\":{\"162\":3,\"344\":1,\"346\":1,\"348\":1,\"349\":1}}],[\"运行的时候都不需要\",{\"1\":{\"1081\":1}}],[\"运行条件\",{\"1\":{\"869\":1}}],[\"运行结果和我们上述一样\",{\"1\":{\"426\":1}}],[\"运行时被读取\",{\"1\":{\"924\":1}}],[\"运行时异常\",{\"1\":{\"747\":1,\"748\":1,\"759\":1}}],[\"运行时看左边\",{\"1\":{\"579\":1}}],[\"运行时\",{\"1\":{\"579\":1,\"580\":1}}],[\"运行时数据区\",{\"1\":{\"403\":1}}],[\"运行时核心类库等java程序运行时必备的环境\",{\"1\":{\"304\":1}}],[\"运行\",{\"1\":{\"308\":1}}],[\"运行内存存储12\",{\"1\":{\"263\":1}}],[\"运行内存\",{\"1\":{\"263\":1}}],[\"运行异常叫bug\",{\"1\":{\"120\":1}}],[\"|=\",{\"1\":{\"345\":1,\"978\":12}}],[\"|条件\",{\"1\":{\"168\":3}}],[\"||\",{\"1\":{\"162\":1,\"347\":2,\"764\":1,\"924\":1,\"1009\":4,\"1016\":2,\"1116\":1}}],[\"|\",{\"1\":{\"162\":76,\"168\":1,\"208\":1,\"235\":1,\"246\":7,\"273\":1,\"345\":2,\"347\":5,\"348\":3,\"350\":4,\"752\":3,\"754\":1,\"892\":9,\"955\":2,\"970\":1,\"978\":2,\"1008\":1}}],[\"刘亦菲\",{\"1\":{\"498\":1}}],[\"刘楠\",{\"1\":{\"209\":1}}],[\"刘备\",{\"1\":{\"161\":1}}],[\"刘总\",{\"1\":{\"150\":2}}],[\"曹植\",{\"1\":{\"161\":1}}],[\"曹丕\",{\"1\":{\"161\":1}}],[\"曹操\",{\"1\":{\"161\":1}}],[\"贾环\",{\"1\":{\"161\":1}}],[\"贾宝玉\",{\"1\":{\"161\":1}}],[\"贾琏\",{\"1\":{\"161\":1}}],[\"松江\",{\"1\":{\"161\":1}}],[\"林冲\",{\"1\":{\"161\":1,\"278\":1}}],[\"前置知识准备\",{\"0\":{\"1076\":1,\"1103\":1,\"1137\":1}}],[\"前线程不会马上释放该锁\",{\"1\":{\"868\":1}}],[\"前提是\",{\"1\":{\"698\":1}}],[\"前提是将对象进行\",{\"1\":{\"682\":1}}],[\"前提\",{\"0\":{\"585\":1}}],[\"前面案例我们在登录成功之后将用户信息存储在servletcontext中\",{\"1\":{\"1159\":1}}],[\"前面的servletconfig是每一个servlet使用的单独的一个servletconfig\",{\"1\":{\"1095\":1}}],[\"前面讲\",{\"1\":{\"1093\":1}}],[\"前面一个\",{\"1\":{\"940\":1}}],[\"前面写类型\",{\"1\":{\"939\":1}}],[\"前面写得列名和后面写得值的顺序\",{\"1\":{\"158\":1}}],[\"前面方法的返回值是一个对象\",{\"1\":{\"606\":1}}],[\"前面已经提到过了\",{\"1\":{\"572\":1}}],[\"前两行的元素和每一行的首尾元素由于没有上一行同列元素或上一行左列元素\",{\"1\":{\"441\":1}}],[\"前后有无空格都可以\",{\"1\":{\"422\":1}}],[\"前后读取的数量不一致\",{\"1\":{\"211\":1}}],[\"前后读取的数据不一致\",{\"1\":{\"211\":1}}],[\"前人总结出来的一些原则\",{\"1\":{\"175\":1}}],[\"前端需要的数据\",{\"1\":{\"951\":1}}],[\"前端提供要被更新的商品id\",{\"1\":{\"601\":1}}],[\"前端提供商品id\",{\"1\":{\"601\":1}}],[\"前端提供商品id或者商品名称\",{\"1\":{\"601\":1}}],[\"前端提供商品各种参数\",{\"1\":{\"601\":1}}],[\"前端不提供任何数据\",{\"1\":{\"601\":1}}],[\"前端程序员需要后端程序员\",{\"1\":{\"601\":1}}],[\"前端这块\",{\"1\":{\"212\":1}}],[\"前端工程\",{\"1\":{\"212\":1}}],[\"前端\",{\"1\":{\"105\":1,\"1157\":1}}],[\"值类型\",{\"1\":{\"1160\":1}}],[\"值映射关系数\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"值来构造\",{\"1\":{\"807\":1}}],[\"值不变\",{\"1\":{\"568\":1}}],[\"值不会再变了\",{\"1\":{\"568\":1}}],[\"值传递是怎样进行的\",{\"1\":{\"470\":1}}],[\"值传递练习\",{\"0\":{\"470\":1}}],[\"值传递\",{\"1\":{\"424\":1}}],[\"值\",{\"1\":{\"342\":1,\"401\":1,\"453\":1,\"775\":1,\"950\":1,\"1143\":1}}],[\"值的\",{\"1\":{\"342\":1}}],[\"值的顺序见上\",{\"1\":{\"158\":1}}],[\"值可能会发生改变的量\",{\"1\":{\"330\":1}}],[\"值得注意的是下面是一些为常见的\",{\"1\":{\"247\":1}}],[\"值尽量不为空的\",{\"1\":{\"233\":1}}],[\"值3\",{\"1\":{\"158\":2}}],[\"值2\",{\"1\":{\"158\":2}}],[\"值1\",{\"1\":{\"158\":2}}],[\"团长\",{\"1\":{\"158\":1}}],[\"做cookie的共享\",{\"1\":{\"1144\":1}}],[\"做业务做准备的\",{\"1\":{\"947\":1}}],[\"做不到a先打印完\",{\"1\":{\"838\":1}}],[\"做不到\",{\"1\":{\"815\":1}}],[\"做进制转换\",{\"1\":{\"712\":1}}],[\"做出不同的处理\",{\"1\":{\"696\":1}}],[\"做网络操作\",{\"1\":{\"689\":1}}],[\"做i\",{\"1\":{\"689\":1}}],[\"做为继承体系中的顶层父类\",{\"1\":{\"594\":1}}],[\"做以下练习\",{\"1\":{\"459\":1}}],[\"做强转要慎重考虑再进行\",{\"1\":{\"339\":1}}],[\"做几个总结\",{\"1\":{\"315\":1}}],[\"做饭up主\",{\"1\":{\"158\":5}}],[\"做了一个规定\",{\"1\":{\"128\":1}}],[\"盗月社3\",{\"1\":{\"158\":1}}],[\"盗月社2\",{\"1\":{\"158\":1}}],[\"盗月社1\",{\"1\":{\"158\":1}}],[\"盗月社\",{\"1\":{\"158\":2}}],[\"地址相同\",{\"1\":{\"1009\":1}}],[\"地址等信息\",{\"1\":{\"950\":1}}],[\"地址\",{\"1\":{\"470\":1}}],[\"地址变成湖北省\",{\"1\":{\"160\":1}}],[\"地址湖北\",{\"1\":{\"158\":2}}],[\"地址上海\",{\"1\":{\"158\":2}}],[\"阿斗归来了\",{\"1\":{\"158\":2}}],[\"阿妈粽\",{\"1\":{\"158\":2}}],[\"阿里编程规范\",{\"1\":{\"149\":1}}],[\"阿里\",{\"1\":{\"144\":1,\"216\":1}}],[\"阿里提出的\",{\"1\":{\"143\":1}}],[\"且不为空\",{\"1\":{\"1192\":1}}],[\"且数值比较小\",{\"1\":{\"1110\":1}}],[\"且存储的类型都是一致的\",{\"1\":{\"948\":1}}],[\"且符号一致\",{\"1\":{\"941\":1}}],[\"且名称序列为空\",{\"1\":{\"768\":1}}],[\"且被共享\",{\"1\":{\"478\":1}}],[\"且被所有对象共享\",{\"1\":{\"474\":1}}],[\"且明显存在重复计算\",{\"1\":{\"442\":1}}],[\"且之后每个元素的值\",{\"1\":{\"441\":1}}],[\"且与建表语句一一对应\",{\"1\":{\"158\":1}}],[\"且可以有效的组织这些数据\",{\"1\":{\"141\":1}}],[\"方\",{\"1\":{\"868\":1}}],[\"方便理解这个过程\",{\"1\":{\"978\":1}}],[\"方便遍历\",{\"1\":{\"953\":1,\"981\":1}}],[\"方便遍历方法\",{\"1\":{\"953\":1,\"981\":1}}],[\"方便省事\",{\"1\":{\"649\":1}}],[\"方便快捷\",{\"1\":{\"648\":1}}],[\"方便灵活进行修改而不影响使用者使用\",{\"1\":{\"515\":1}}],[\"方便自己修改代码\",{\"1\":{\"510\":1}}],[\"方便自己写代码的时候\",{\"1\":{\"319\":1}}],[\"方便\",{\"1\":{\"220\":2}}],[\"方便了范围查找\",{\"1\":{\"220\":1}}],[\"方便我们去在java中使用数据库连接池\",{\"1\":{\"213\":1}}],[\"方便数据的查询\",{\"1\":{\"178\":1}}],[\"方式访问\",{\"1\":{\"474\":2}}],[\"方式三\",{\"1\":{\"257\":1,\"704\":2}}],[\"方式二模拟\",{\"1\":{\"851\":1}}],[\"方式二便于数据共享\",{\"1\":{\"851\":1}}],[\"方式二把线程跟线程上要做的事情区分开来\",{\"1\":{\"851\":1}}],[\"方式二通过实现接口的方式\",{\"1\":{\"851\":1}}],[\"方式二是5步\",{\"1\":{\"851\":1}}],[\"方式二\",{\"0\":{\"277\":1,\"280\":1,\"283\":1},\"1\":{\"215\":1,\"252\":1,\"253\":1,\"254\":1,\"257\":1,\"261\":1,\"704\":2,\"752\":1,\"760\":1}}],[\"方式一通过继承的方式\",{\"1\":{\"851\":1}}],[\"方式一4步\",{\"1\":{\"851\":1}}],[\"方式一\",{\"0\":{\"276\":1,\"279\":1,\"282\":1},\"1\":{\"215\":1,\"252\":1,\"253\":1,\"254\":1,\"257\":1,\"261\":1,\"704\":2,\"752\":1,\"760\":1}}],[\"方式3\",{\"1\":{\"158\":2}}],[\"方式2\",{\"1\":{\"158\":2,\"415\":1,\"419\":1,\"956\":1}}],[\"方式1\",{\"1\":{\"158\":2,\"415\":1,\"419\":1,\"956\":1}}],[\"方法上没有定义泛型\",{\"1\":{\"943\":1}}],[\"方法服务\",{\"1\":{\"925\":1}}],[\"方法出口等信息\",{\"1\":{\"925\":1}}],[\"方法出栈\",{\"1\":{\"442\":1}}],[\"方法出栈后\",{\"1\":{\"407\":1}}],[\"方法对象\",{\"1\":{\"922\":1}}],[\"方法自动构造的\",{\"1\":{\"917\":1}}],[\"方法来获取结果\",{\"1\":{\"880\":1}}],[\"方法通知暂停的线程继续运行\",{\"1\":{\"868\":1}}],[\"方法使线程暂停运行\",{\"1\":{\"868\":1}}],[\"方法使用步骤\",{\"0\":{\"694\":1}}],[\"方法使用的\",{\"1\":{\"403\":1}}],[\"方法要在同步方法或同步块中调用\",{\"1\":{\"868\":1}}],[\"方法是object类的方法\",{\"1\":{\"868\":1}}],[\"方法是有返回值的\",{\"1\":{\"671\":1}}],[\"方法和语句所访问的隐式监视器锁相同的一些基本行为和语义\",{\"1\":{\"864\":1}}],[\"方法和变量\",{\"1\":{\"476\":1}}],[\"方法后\",{\"1\":{\"846\":1,\"868\":1}}],[\"方法只是一个普通方法调用\",{\"1\":{\"833\":1}}],[\"方法只是获取class对象\",{\"1\":{\"663\":1}}],[\"方法将刷新输出缓冲区\",{\"1\":{\"820\":1}}],[\"方法内部try\",{\"1\":{\"756\":1}}],[\"方法返回值\",{\"1\":{\"740\":1}}],[\"方法返回的一个int整数\",{\"1\":{\"679\":1}}],[\"方法被称为它的自然比较方法\",{\"1\":{\"740\":1}}],[\"方法时\",{\"1\":{\"682\":1}}],[\"方法确实会针对不同的对象返回不同的整数\",{\"1\":{\"681\":1}}],[\"方法获取其类型\",{\"1\":{\"674\":1}}],[\"方法才会返回true\",{\"1\":{\"673\":1}}],[\"方法可以在指定位置添加元素\",{\"1\":{\"965\":1}}],[\"方法可以在末尾添加元素\",{\"1\":{\"961\":1}}],[\"方法可以修改指定位置的元素等等\",{\"1\":{\"961\":1,\"965\":1}}],[\"方法可以获取指定位置的元素\",{\"1\":{\"961\":1,\"965\":1}}],[\"方法可以删除指定位置的元素\",{\"1\":{\"961\":1,\"965\":1}}],[\"方法可以快速自动生成\",{\"1\":{\"669\":1}}],[\"方法可能有两个结果\",{\"1\":{\"413\":1}}],[\"方法可能会有结果\",{\"1\":{\"382\":1}}],[\"方法虽然没学过\",{\"1\":{\"667\":1}}],[\"方法也是object类当中的成员方法\",{\"1\":{\"667\":1}}],[\"方法会返回一个此对象的字符串\",{\"1\":{\"666\":1}}],[\"方法经常用于判断两个引用所指向的对象是否是同一个类型的对象\",{\"1\":{\"663\":1}}],[\"方法相当于是返回了堆上这个class对象的引用\",{\"1\":{\"663\":1}}],[\"方法用于对流进行排序\",{\"1\":{\"1041\":1}}],[\"方法用于映射每个元素到对应的结果\",{\"1\":{\"1040\":1}}],[\"方法用于获取指定数量\",{\"1\":{\"1038\":1}}],[\"方法用于获取哈希值\",{\"1\":{\"658\":1}}],[\"方法用于在链表的首部添加和删除元素等等\",{\"1\":{\"965\":1}}],[\"方法用于在链表的首尾添加和删除元素\",{\"1\":{\"965\":1}}],[\"方法用于将对象写入流中\",{\"1\":{\"823\":1}}],[\"方法用于判断对象相等\",{\"1\":{\"658\":1}}],[\"方法前\",{\"1\":{\"658\":1}}],[\"方法或\",{\"1\":{\"658\":1}}],[\"方法签名method\",{\"1\":{\"655\":2}}],[\"方法签名不同\",{\"1\":{\"388\":1}}],[\"方法引用所指向的实现方法\",{\"1\":{\"656\":1}}],[\"方法引用\",{\"0\":{\"655\":1},\"1\":{\"654\":1,\"655\":3}}],[\"方法需要传入一个对象实参时\",{\"1\":{\"641\":1,\"649\":1}}],[\"方法需要传入一个对象\",{\"1\":{\"641\":1,\"649\":1}}],[\"方法需要返回一个对象时\",{\"1\":{\"641\":1,\"649\":1}}],[\"方法需要返回一个对象\",{\"1\":{\"641\":1,\"649\":1}}],[\"方法声明中返回值类型的书写\",{\"1\":{\"605\":1}}],[\"方法传值\",{\"0\":{\"603\":1}}],[\"方法传入了一个student对象\",{\"1\":{\"509\":1}}],[\"方法重载\",{\"0\":{\"563\":1}}],[\"方法重载允许一个类中\",{\"1\":{\"387\":1}}],[\"方法重写中的返回值类型问题\",{\"0\":{\"605\":1}}],[\"方法重写\",{\"0\":{\"563\":1}}],[\"方法不过是方法区的二进制指令合集罢了\",{\"1\":{\"555\":1}}],[\"方法eat等都是被重复定义的成员\",{\"1\":{\"519\":1}}],[\"方法中的局部位置有两个\",{\"1\":{\"569\":1}}],[\"方法中自身调用自身方法的那句语句\",{\"1\":{\"442\":1}}],[\"方法中有局部变量需要开辟空间存储\",{\"1\":{\"403\":1}}],[\"方法得到的是变量的拷贝\",{\"1\":{\"425\":1}}],[\"方法结束后\",{\"1\":{\"424\":1,\"425\":1,\"426\":1}}],[\"方法改变的是实参本身的值\",{\"1\":{\"424\":1}}],[\"方法能够接收特殊数组\",{\"1\":{\"415\":1}}],[\"方法栈帧进栈后\",{\"1\":{\"407\":1}}],[\"方法栈帧被销毁的同时\",{\"1\":{\"403\":1}}],[\"方法调用位置\",{\"1\":{\"692\":1}}],[\"方法调用的结果就是父类行为\",{\"1\":{\"558\":1}}],[\"方法调用的结果仍然体现子类中的方法行为\",{\"1\":{\"555\":1}}],[\"方法调用也要体现出子类的行为\",{\"1\":{\"558\":1}}],[\"方法调用过程如下\",{\"1\":{\"425\":2}}],[\"方法调用\",{\"1\":{\"403\":1}}],[\"方法调用时\",{\"1\":{\"382\":1}}],[\"方法进栈的同时局部变量开辟内存空间存储值\",{\"1\":{\"403\":1}}],[\"方法执行的内存模型\",{\"1\":{\"925\":1}}],[\"方法执行结束后\",{\"1\":{\"442\":1}}],[\"方法执行时就会根据不同的具体对象类型\",{\"1\":{\"581\":1}}],[\"方法执行时所占用的内存空间\",{\"1\":{\"403\":1}}],[\"方法执行时的所占内存的内存模型\",{\"1\":{\"403\":1}}],[\"方法执行完毕还需要存储返回地址等等\",{\"1\":{\"403\":1}}],[\"方法执行到return语句时\",{\"1\":{\"382\":1}}],[\"方法区中的静态属性引用的对象\",{\"1\":{\"928\":1}}],[\"方法区是逻辑概念\",{\"1\":{\"925\":1}}],[\"方法区\",{\"1\":{\"403\":2,\"925\":2}}],[\"方法3\",{\"1\":{\"389\":1}}],[\"方法2\",{\"1\":{\"389\":2}}],[\"方法1\",{\"1\":{\"389\":2}}],[\"方法参数\",{\"1\":{\"386\":1}}],[\"方法详解\",{\"0\":{\"385\":1}}],[\"方法既然有返回值\",{\"1\":{\"383\":1}}],[\"方法在object类当中的代码实现\",{\"1\":{\"667\":1}}],[\"方法在object类当中的默认实现\",{\"1\":{\"666\":1}}],[\"方法在调用时\",{\"1\":{\"384\":1}}],[\"方法在定义时就应该告诉方法的调用者应该传入什么数据\",{\"1\":{\"382\":1}}],[\"方法在实现功能时\",{\"1\":{\"382\":1}}],[\"方法完全可以没有结果\",{\"1\":{\"382\":1,\"384\":1}}],[\"方法头\",{\"1\":{\"382\":1,\"591\":1}}],[\"方法体在多数情况下\",{\"1\":{\"694\":1}}],[\"方法体能不能简化呢\",{\"1\":{\"654\":1}}],[\"方法体实现\",{\"1\":{\"653\":1}}],[\"方法体中\",{\"1\":{\"604\":1}}],[\"方法体中用final修饰局部变量\",{\"1\":{\"569\":1}}],[\"方法体中是可以调用方法的\",{\"1\":{\"442\":1}}],[\"方法体的重写\",{\"0\":{\"698\":1}}],[\"方法体的代码\",{\"1\":{\"561\":1}}],[\"方法体的大括号内部是典型的局部位置\",{\"1\":{\"331\":1}}],[\"方法体包含具体的语句\",{\"1\":{\"382\":1}}],[\"方法体\",{\"1\":{\"382\":2,\"385\":1,\"422\":1,\"450\":2,\"465\":2,\"475\":1,\"481\":2,\"561\":1,\"567\":1,\"569\":1,\"600\":2,\"653\":2,\"654\":1}}],[\"方法的命名\",{\"1\":{\"1019\":1}}],[\"方法的线程等待\",{\"1\":{\"868\":1}}],[\"方法的结果\",{\"1\":{\"833\":2}}],[\"方法的结果又要分成两种情况\",{\"1\":{\"668\":1}}],[\"方法的默认实现\",{\"1\":{\"667\":1}}],[\"方法的默认实现不是一个最优解\",{\"1\":{\"666\":1}}],[\"方法的作用了\",{\"1\":{\"668\":1}}],[\"方法的作用非常简单\",{\"1\":{\"666\":1}}],[\"方法的作用\",{\"0\":{\"678\":1,\"688\":1,\"693\":1},\"1\":{\"666\":1,\"667\":1}}],[\"方法的名字无所谓\",{\"1\":{\"655\":2}}],[\"方法的传参可以向上转型\",{\"1\":{\"584\":1}}],[\"方法的实参数据类型\",{\"1\":{\"584\":1}}],[\"方法的形参在方法调用传入实参时\",{\"1\":{\"603\":1}}],[\"方法的形参和返回值类型\",{\"0\":{\"602\":1}}],[\"方法的形参不写具体动物类\",{\"1\":{\"581\":1}}],[\"方法的形参列表中\",{\"1\":{\"569\":1}}],[\"方法的形参或者代码块结构等局部位置\",{\"1\":{\"457\":1}}],[\"方法的设计已经比较完善\",{\"1\":{\"567\":1}}],[\"方法的覆盖\",{\"0\":{\"560\":1},\"1\":{\"560\":1}}],[\"方法的覆盖是非常重要的知识点\",{\"1\":{\"559\":1}}],[\"方法的覆盖不是物理意义上的覆盖\",{\"1\":{\"559\":1}}],[\"方法的重载\",{\"1\":{\"563\":1}}],[\"方法的重载只与方法的签名有关\",{\"1\":{\"388\":1}}],[\"方法的重写的语法要求\",{\"1\":{\"561\":1}}],[\"方法的重写\",{\"0\":{\"682\":1},\"1\":{\"530\":1,\"563\":1}}],[\"方法的执行流程\",{\"1\":{\"403\":1}}],[\"方法的执行过程会产生中间变量\",{\"1\":{\"403\":1}}],[\"方法的返回值\",{\"0\":{\"604\":1},\"1\":{\"668\":1}}],[\"方法的返回值类型\",{\"1\":{\"604\":1}}],[\"方法的返回值类型也是可以的\",{\"1\":{\"584\":1}}],[\"方法的返回值类型和标签中的resulttype保持一致\",{\"1\":{\"235\":1}}],[\"方法的返回值和它的返回值类型也存在这种特点\",{\"1\":{\"384\":1}}],[\"方法的调用结果就体现出多态的特点\",{\"1\":{\"580\":1}}],[\"方法的调用之所以体现为覆盖\",{\"1\":{\"559\":1}}],[\"方法的调用过程如下\",{\"1\":{\"426\":1}}],[\"方法的调用必须能够让编译器明确找个某个方法\",{\"1\":{\"389\":1}}],[\"方法的调用\",{\"0\":{\"383\":1}}],[\"方法的签名是以下\",{\"1\":{\"944\":1}}],[\"方法的签名\",{\"1\":{\"382\":1,\"389\":1}}],[\"方法的声明\",{\"0\":{\"660\":1,\"665\":1,\"671\":1,\"677\":1,\"687\":1,\"692\":1},\"1\":{\"382\":1}}],[\"方法的定义\",{\"0\":{\"382\":1}}],[\"方法的基本使用\",{\"0\":{\"381\":1}}],[\"方法实际上是可以重复完成特定功能的代码块\",{\"1\":{\"380\":1}}],[\"方法碰到回车就结束扫描\",{\"1\":{\"353\":1}}],[\"方法碰到换行才结束扫描的特性\",{\"1\":{\"353\":1}}],[\"方法接收字符串时\",{\"1\":{\"353\":1}}],[\"方法注释\",{\"1\":{\"318\":1}}],[\"方法名必须严格保持一致\",{\"1\":{\"561\":1}}],[\"方法名等结构和之前讲的方法一样\",{\"1\":{\"450\":1}}],[\"方法名既然相同了\",{\"1\":{\"389\":1}}],[\"方法名最好见名知意\",{\"1\":{\"382\":1}}],[\"方法名的命名需要遵守规范\",{\"1\":{\"382\":1}}],[\"方法名\",{\"1\":{\"314\":1,\"382\":4,\"383\":1,\"422\":1,\"450\":1,\"475\":1,\"481\":2,\"561\":1,\"563\":1,\"567\":1,\"591\":1,\"600\":2,\"653\":1,\"756\":1,\"943\":2,\"1093\":1,\"1122\":1}}],[\"方法名和对应xml的sql的id保持一致\",{\"1\":{\"244\":1}}],[\"方法\",{\"0\":{\"379\":1,\"954\":1,\"955\":1,\"959\":1,\"960\":1},\"1\":{\"128\":1,\"201\":1,\"234\":1,\"313\":1,\"353\":1,\"453\":1,\"457\":1,\"515\":2,\"538\":3,\"565\":1,\"567\":1,\"658\":3,\"669\":1,\"682\":2,\"706\":4,\"708\":1,\"715\":1,\"719\":2,\"741\":1,\"868\":1,\"873\":1,\"914\":1,\"924\":1,\"925\":1,\"955\":1,\"1021\":1,\"1038\":1,\"1039\":2,\"1046\":3,\"1093\":1,\"1111\":1,\"1112\":1,\"1113\":1,\"1115\":1,\"1117\":1,\"1120\":1,\"1123\":1,\"1124\":1,\"1144\":1,\"1153\":1}}],[\"插数据\",{\"1\":{\"187\":1}}],[\"插入后\",{\"1\":{\"1016\":1}}],[\"插入后的长度超过阈值\",{\"1\":{\"1016\":1}}],[\"插入时\",{\"1\":{\"979\":1}}],[\"插入的时候\",{\"1\":{\"972\":1}}],[\"插入的值不能重复\",{\"1\":{\"170\":1}}],[\"插入和删除快\",{\"1\":{\"968\":1}}],[\"插入标签\",{\"1\":{\"234\":1}}],[\"插入值\",{\"1\":{\"220\":4}}],[\"插入一条数据\",{\"1\":{\"209\":1}}],[\"插入n条数据\",{\"1\":{\"207\":1}}],[\"插入\",{\"1\":{\"171\":1,\"234\":1,\"972\":1,\"975\":1}}],[\"插入城市表的时候会去寻找有没有23对应的省份\",{\"1\":{\"171\":1}}],[\"插入语句\",{\"1\":{\"158\":1}}],[\"插入几条数据\",{\"1\":{\"158\":1}}],[\"插入数据\",{\"1\":{\"158\":1,\"220\":5}}],[\"插件安装\",{\"1\":{\"263\":1}}],[\"插件来实现\",{\"1\":{\"54\":1}}],[\"插件\",{\"1\":{\"34\":1}}],[\"插件后\",{\"1\":{\"10\":1,\"11\":1}}],[\"库的字符集和表的字符集\",{\"1\":{\"157\":1}}],[\"库名\",{\"1\":{\"149\":3}}],[\"先使用命令行\",{\"1\":{\"1205\":1}}],[\"先使用集合实现一下\",{\"1\":{\"950\":1}}],[\"先去问问chatgpt\",{\"1\":{\"1204\":1}}],[\"先push的人不处理冲突\",{\"1\":{\"1201\":1}}],[\"先检查当前时间和过期时间的关系\",{\"1\":{\"1159\":1}}],[\"先来做domain的设置\",{\"1\":{\"1146\":1}}],[\"先来一个大致的\",{\"1\":{\"658\":1}}],[\"先把user信息暂存一下\",{\"1\":{\"1131\":1}}],[\"先把整体的印象答出来\",{\"1\":{\"1020\":1}}],[\"先提示登录成功\",{\"1\":{\"1131\":1}}],[\"先创建clazz对应的实例\",{\"1\":{\"1118\":1}}],[\"先创建了一个\",{\"1\":{\"157\":1}}],[\"先看我们之前开发的servlet\",{\"1\":{\"1110\":1}}],[\"先看是否同包中访问\",{\"1\":{\"536\":1}}],[\"先说一个结论\",{\"1\":{\"1001\":1}}],[\"先死记住\",{\"1\":{\"978\":1}}],[\"先思考一个问题\",{\"1\":{\"978\":1}}],[\"先进后出\",{\"1\":{\"968\":1}}],[\"先进先出\",{\"1\":{\"968\":1}}],[\"先生成一个迭代器\",{\"1\":{\"956\":1}}],[\"先理解为一个袋子\",{\"1\":{\"950\":1}}],[\"先有一个印象\",{\"1\":{\"936\":1}}],[\"先启动了client会造成这个异常\",{\"1\":{\"905\":1}}],[\"先接收键盘数据\",{\"1\":{\"894\":1}}],[\"先出现的字符串小\",{\"1\":{\"739\":1}}],[\"先string\",{\"1\":{\"732\":1}}],[\"先构造\",{\"1\":{\"732\":1}}],[\"先直接赋值\",{\"1\":{\"732\":1}}],[\"先要有外部类权限\",{\"1\":{\"629\":1}}],[\"先要收集猫\",{\"1\":{\"581\":1}}],[\"先继承再实现\",{\"1\":{\"596\":1}}],[\"先慎重考虑是否真的需要强转\",{\"1\":{\"587\":1}}],[\"先假设有一个三层的继承体系\",{\"1\":{\"585\":1}}],[\"先父后子记住\",{\"1\":{\"546\":1}}],[\"先父后子\",{\"1\":{\"541\":3,\"542\":2,\"545\":1}}],[\"先从默认权限开始考虑\",{\"1\":{\"510\":1}}],[\"先从上到下执行成员变量的显示赋值\",{\"1\":{\"468\":1}}],[\"先了解一下\",{\"1\":{\"508\":1}}],[\"先默认赋值\",{\"1\":{\"471\":1}}],[\"先跳转执行this构造器\",{\"1\":{\"468\":1}}],[\"先回顾一下\",{\"1\":{\"455\":1}}],[\"先回答上面思考的问题\",{\"1\":{\"389\":1}}],[\"先后次序不同算不同的结果\",{\"1\":{\"442\":1}}],[\"先全部提升为\",{\"1\":{\"341\":1}}],[\"先用小数部分乘以2\",{\"1\":{\"336\":1}}],[\"先查询index\",{\"1\":{\"233\":1}}],[\"先查找一个边界\",{\"1\":{\"220\":1}}],[\"先分析一些显而易见的不适合用来做索引的\",{\"1\":{\"220\":1}}],[\"先访问登录请求\",{\"1\":{\"1131\":1}}],[\"先访问b页面\",{\"1\":{\"116\":1}}],[\"先访问1\",{\"1\":{\"115\":1}}],[\"凌晨去执行\",{\"1\":{\"156\":1}}],[\"凌霄\",{\"1\":{\"110\":1}}],[\"客户机\",{\"1\":{\"1115\":2}}],[\"客户机和服务器主机信息\",{\"0\":{\"1115\":1}}],[\"客户机和主机\",{\"1\":{\"1102\":1}}],[\"客户这边也卡着\",{\"1\":{\"156\":1}}],[\"客户端发起请求携带的cookie中的jsessionid对应的值相同\",{\"1\":{\"1152\":1}}],[\"客户端发送请求给服务器\",{\"1\":{\"1077\":1}}],[\"客户端发送对象\",{\"0\":{\"904\":1},\"1\":{\"904\":1}}],[\"客户端发送消息\",{\"0\":{\"902\":1},\"1\":{\"902\":1}}],[\"客户端发送的http请求信息\",{\"1\":{\"114\":1}}],[\"客户端获得这个特殊的请求报文之后\",{\"1\":{\"1142\":1}}],[\"客户端技术\",{\"1\":{\"1137\":1}}],[\"客户端和浏览器每一次发送请求的时候都需要携带请求参数比较繁琐\",{\"1\":{\"1137\":1}}],[\"客户端和服务器之间有直接的通信\",{\"1\":{\"1077\":1}}],[\"客户端给服务器发送请求\",{\"1\":{\"1137\":1}}],[\"客户端等待一个预定的时间\",{\"1\":{\"907\":1}}],[\"客户端收到服务器的fin请求后\",{\"1\":{\"907\":1}}],[\"客户端收到服务器的syn\",{\"1\":{\"906\":1}}],[\"客户端到服务器的连接已经关闭\",{\"1\":{\"907\":1}}],[\"客户端决定关闭与服务器的连接时\",{\"1\":{\"907\":1}}],[\"客户端会设置一个随机的初始序列号\",{\"1\":{\"906\":1}}],[\"客户端会将响应报文进行解析\",{\"1\":{\"124\":1}}],[\"客户端向服务器发送一个tcp数据包\",{\"1\":{\"906\":1}}],[\"客户端上传文件到服务器\",{\"1\":{\"905\":1}}],[\"客户端上传文件到服务端\",{\"0\":{\"905\":1}}],[\"客户端步骤\",{\"0\":{\"897\":1}}],[\"客户端希望提交大量的数据到服务器\",{\"1\":{\"118\":1}}],[\"客户端接收到http响应\",{\"1\":{\"113\":1}}],[\"客户端\",{\"1\":{\"111\":1,\"902\":1,\"903\":1,\"908\":7,\"1137\":17,\"1139\":1,\"1142\":3,\"1149\":2,\"1152\":1,\"1161\":1}}],[\"改变线程名称\",{\"1\":{\"833\":2}}],[\"改变对象的属性值\",{\"1\":{\"427\":1}}],[\"改变循环控制变量的值\",{\"1\":{\"362\":1,\"364\":1}}],[\"改变数据势必会改变索引树的结构\",{\"1\":{\"233\":1}}],[\"改\",{\"0\":{\"196\":1}}],[\"改都是一样的\",{\"1\":{\"195\":1}}],[\"改改表名\",{\"1\":{\"155\":1}}],[\"改端口\",{\"1\":{\"139\":1}}],[\"出来的\",{\"1\":{\"757\":1}}],[\"出来的一个新的数据库连接池\",{\"1\":{\"215\":1}}],[\"出生\",{\"1\":{\"688\":1}}],[\"出于保护这样一个成员的目的\",{\"1\":{\"537\":1}}],[\"出厂\",{\"1\":{\"463\":1}}],[\"出错的后果也会更严重\",{\"1\":{\"341\":1}}],[\"出现就是为了替代vector\",{\"1\":{\"969\":1}}],[\"出现的原因\",{\"1\":{\"956\":1}}],[\"出现的次数\",{\"1\":{\"737\":2}}],[\"出现\",{\"1\":{\"867\":1}}],[\"出现异常会释放锁\",{\"0\":{\"860\":1}}],[\"出现异常的代码\",{\"1\":{\"754\":1}}],[\"出现不存在的票\",{\"1\":{\"852\":1}}],[\"出现重复的票\",{\"1\":{\"852\":1}}],[\"出现多对一是相当正常的\",{\"1\":{\"679\":1}}],[\"出现局部变量\",{\"1\":{\"615\":1}}],[\"出现了两次\",{\"1\":{\"1120\":1}}],[\"出现了两种文档注释\",{\"1\":{\"318\":1}}],[\"出现了\",{\"1\":{\"737\":1}}],[\"出现了异常\",{\"1\":{\"208\":1}}],[\"出现了name\",{\"1\":{\"153\":1}}],[\"出现自redis之前\",{\"1\":{\"144\":1}}],[\"出版日期\",{\"1\":{\"153\":2}}],[\"出版社\",{\"1\":{\"153\":2}}],[\"书名\",{\"1\":{\"153\":2}}],[\"书非常多\",{\"1\":{\"141\":1}}],[\"身份\",{\"1\":{\"1137\":1}}],[\"身份证号\",{\"1\":{\"153\":1}}],[\"身体\",{\"1\":{\"623\":1}}],[\"身高\",{\"1\":{\"153\":1}}],[\"建立远程仓库\",{\"0\":{\"1191\":1}}],[\"建立两者之间的关系\",{\"1\":{\"234\":1}}],[\"建立几个索引比较合适呢\",{\"1\":{\"233\":1}}],[\"建立索引\",{\"1\":{\"232\":1}}],[\"建立连接\",{\"1\":{\"192\":1,\"908\":1}}],[\"建立tcp连接\",{\"1\":{\"113\":1,\"124\":1}}],[\"建议尽量不要再通过key的引用直接修改key\",{\"0\":{\"1015\":1}}],[\"建议\",{\"1\":{\"838\":1,\"1015\":1}}],[\"建议子类重写的时候保持跟父类一样的异常列表\",{\"1\":{\"756\":1}}],[\"建议包装类型对象比较内容还是使用equals方法\",{\"1\":{\"711\":1}}],[\"建议所有子类都重写此方法\",{\"1\":{\"666\":1}}],[\"建议仅作了解\",{\"1\":{\"658\":1}}],[\"建议成员静态常量\",{\"1\":{\"568\":1}}],[\"建议将package声明永远放在java源文件真正意义上的第一行\",{\"1\":{\"499\":1}}],[\"建议一个java文件中\",{\"1\":{\"469\":1}}],[\"建议写递归先写递归出口\",{\"1\":{\"442\":1}}],[\"建议小驼峰式书写\",{\"1\":{\"376\":1}}],[\"建议选择if\",{\"1\":{\"360\":1}}],[\"建议不要混用以上方法\",{\"1\":{\"352\":1}}],[\"建议在代码中使用单行注释时\",{\"1\":{\"318\":1}}],[\"建议程序员不要主动使用它\",{\"1\":{\"316\":1}}],[\"建议初学者在定义标识符时要遵循以下几点规范\",{\"1\":{\"316\":1}}],[\"建议单独在其它磁盘找一个文件夹放开发相关的软件\",{\"1\":{\"306\":1}}],[\"建议叫什么\",{\"1\":{\"250\":1}}],[\"建议使用迭代器进行遍历\",{\"1\":{\"954\":1}}],[\"建议使用方式一\",{\"1\":{\"252\":1}}],[\"建议使用注解写\",{\"1\":{\"251\":1}}],[\"建议使用注解写法\",{\"1\":{\"250\":1}}],[\"建议使用\",{\"1\":{\"250\":1}}],[\"建议使用text\",{\"1\":{\"153\":1}}],[\"建议保持一致\",{\"1\":{\"235\":1}}],[\"建议要遵守的规则\",{\"1\":{\"235\":1}}],[\"建议多学\",{\"1\":{\"212\":1}}],[\"建议大家把表删掉\",{\"1\":{\"157\":1}}],[\"建表\",{\"1\":{\"187\":1}}],[\"建表语句\",{\"1\":{\"158\":1}}],[\"建表语句的原则\",{\"1\":{\"153\":1}}],[\"建表的时候留有扩展空间\",{\"1\":{\"153\":1}}],[\"约束和指导代码使用者的功能\",{\"1\":{\"510\":1}}],[\"约束文件\",{\"1\":{\"234\":1}}],[\"约定俗称的规范\",{\"1\":{\"316\":1}}],[\"约定了数据的分割符\",{\"1\":{\"110\":1}}],[\"约4g\",{\"1\":{\"153\":1}}],[\"约64k\",{\"1\":{\"153\":1}}],[\"货币数据\",{\"1\":{\"153\":1}}],[\"千万不能存储成后面100\",{\"1\":{\"153\":1}}],[\"千万数据要安全\",{\"1\":{\"144\":1}}],[\"四次挥手的过程如下\",{\"1\":{\"907\":1}}],[\"四次挥手是tcp连接终止过程中的一种挥手协议\",{\"1\":{\"907\":1}}],[\"四次挥手\",{\"0\":{\"907\":1},\"1\":{\"908\":1}}],[\"四班同学成绩\",{\"1\":{\"431\":1}}],[\"四行六列\",{\"1\":{\"370\":1}}],[\"四种运算符\",{\"1\":{\"342\":1}}],[\"四步骤中\",{\"1\":{\"244\":1}}],[\"四舍五入\",{\"1\":{\"153\":1,\"168\":1}}],[\"四层\",{\"1\":{\"112\":1}}],[\"缺少属性\",{\"1\":{\"595\":1}}],[\"缺少了这个字段\",{\"1\":{\"169\":1}}],[\"缺省servlet\",{\"0\":{\"1092\":1}}],[\"缺省匹配\",{\"1\":{\"1090\":1}}],[\"缺省的\",{\"1\":{\"508\":1,\"509\":1,\"534\":1,\"611\":1,\"622\":1}}],[\"缺省\",{\"1\":{\"506\":2,\"534\":1}}],[\"缺省应用的特征\",{\"1\":{\"139\":1}}],[\"缺点是\",{\"1\":{\"648\":2}}],[\"缺点是对人来说不够直观\",{\"1\":{\"348\":1}}],[\"缺点是会引起精度问题\",{\"1\":{\"153\":1}}],[\"缺点\",{\"0\":{\"583\":1},\"1\":{\"171\":1,\"178\":1,\"220\":1,\"262\":1,\"267\":1,\"444\":1,\"482\":1,\"641\":1,\"649\":1,\"657\":1,\"924\":2,\"925\":1,\"936\":1,\"1149\":1}}],[\"浮点类型\",{\"1\":{\"407\":1}}],[\"浮点精度问题练习\",{\"1\":{\"336\":1}}],[\"浮点数比较特殊\",{\"1\":{\"675\":1}}],[\"浮点数有精度问题\",{\"1\":{\"338\":1}}],[\"浮点数因为遵循ieee754标准\",{\"1\":{\"336\":1}}],[\"浮点数的比较仍然建议使用\",{\"1\":{\"675\":1}}],[\"浮点数的精度问题\",{\"1\":{\"336\":1}}],[\"浮点数的表示方式可以理解为用二进制科学计数法来表示一个二进制数\",{\"1\":{\"323\":1}}],[\"浮点数还有一些很独特的设定\",{\"1\":{\"323\":1}}],[\"浮点数是一个比较独特的概念\",{\"1\":{\"323\":1}}],[\"浮点数能够表示更大的范围\",{\"1\":{\"153\":1}}],[\"浮点数相对于定点数的优点是在长度一定的情况下\",{\"1\":{\"153\":1}}],[\"浮点型包装类型对象是没有缓存存在的\",{\"1\":{\"710\":1}}],[\"浮点型包装类型对象相等的比较\",{\"0\":{\"710\":1}}],[\"浮点型包装类型对象之间的比较\",{\"1\":{\"708\":1}}],[\"浮点型的float虽然只占4个字节\",{\"1\":{\"338\":1}}],[\"浮点型的取值范围并不是一个普通的区间\",{\"1\":{\"326\":1}}],[\"浮点型有两种\",{\"1\":{\"323\":1}}],[\"浮点型\",{\"0\":{\"323\":1},\"1\":{\"153\":2}}],[\"定时刷新\",{\"1\":{\"1125\":1}}],[\"定时任务timertask\",{\"0\":{\"884\":1}}],[\"定时器timer\",{\"0\":{\"883\":1}}],[\"定时器与定时任务\",{\"0\":{\"882\":1}}],[\"定义这样的接口\",{\"1\":{\"942\":1}}],[\"定义时\",{\"1\":{\"940\":3}}],[\"定义时没有指定father泛型的类型\",{\"1\":{\"940\":1}}],[\"定义多个泛型\",{\"1\":{\"939\":1}}],[\"定义了一个类\",{\"1\":{\"1107\":1}}],[\"定义了一个k\",{\"1\":{\"939\":1}}],[\"定义了队列的基本操作\",{\"1\":{\"970\":1}}],[\"定义了能不能不使用\",{\"1\":{\"941\":1}}],[\"定义了泛型之后\",{\"1\":{\"939\":1}}],[\"定义了泛型不使用\",{\"1\":{\"939\":1}}],[\"定义了泛型\",{\"1\":{\"939\":1}}],[\"定义了何种类型的变量\",{\"1\":{\"320\":1}}],[\"定义学生类student\",{\"1\":{\"924\":1}}],[\"定义注解\",{\"1\":{\"924\":1}}],[\"定义要加载的文件的路径\",{\"1\":{\"923\":1}}],[\"定义接收任务\",{\"1\":{\"895\":1}}],[\"定义发送任务\",{\"1\":{\"895\":1}}],[\"定义包子类\",{\"1\":{\"867\":1}}],[\"定义蒸笼类\",{\"1\":{\"867\":1}}],[\"定义一把锁\",{\"1\":{\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"871\":1,\"872\":2}}],[\"定义一个定时任务\",{\"1\":{\"884\":1}}],[\"定义一个任务继承timertask\",{\"1\":{\"884\":1}}],[\"定义一个锁类\",{\"1\":{\"866\":1,\"867\":2}}],[\"定义一个标记\",{\"1\":{\"844\":1}}],[\"定义一个flag标记\",{\"1\":{\"844\":2}}],[\"定义一个枚举类型\",{\"1\":{\"719\":1}}],[\"定义一个表示星期的类weekday\",{\"1\":{\"713\":1}}],[\"定义一个静态方法\",{\"1\":{\"655\":1}}],[\"定义一个静态的成员变量\",{\"1\":{\"474\":1}}],[\"定义一个全新的包\",{\"1\":{\"598\":1}}],[\"定义一个父类phone\",{\"1\":{\"575\":1}}],[\"定义一个银行账户类account\",{\"1\":{\"517\":1}}],[\"定义一个员工employer类\",{\"1\":{\"517\":1}}],[\"定义一个player类\",{\"1\":{\"472\":1,\"474\":1}}],[\"定义一个计数器\",{\"1\":{\"472\":1}}],[\"定义一个计算器\",{\"1\":{\"386\":1}}],[\"定义一个学生类\",{\"1\":{\"470\":1,\"740\":1}}],[\"定义一个学生类demo\",{\"1\":{\"450\":1}}],[\"定义一个类实现runnable接口\",{\"1\":{\"850\":3}}],[\"定义一个类printer\",{\"1\":{\"818\":2}}],[\"定义一个类继承thread类\",{\"1\":{\"832\":3}}],[\"定义一个类继承runtimeexception\",{\"1\":{\"764\":1}}],[\"定义一个类继承exception\",{\"1\":{\"763\":1}}],[\"定义一个类\",{\"0\":{\"449\":1}}],[\"定义一个数组\",{\"1\":{\"392\":1,\"393\":1}}],[\"定义一个方法用于判断一个正整数的奇偶性\",{\"1\":{\"386\":1}}],[\"定义一个方法\",{\"1\":{\"383\":1,\"386\":1}}],[\"定义一个方法是以下语法结构\",{\"1\":{\"382\":1}}],[\"定义5个方法\",{\"1\":{\"818\":2}}],[\"定义运行时异常\",{\"1\":{\"764\":1}}],[\"定义编译时异常\",{\"1\":{\"764\":1}}],[\"定义临时变量接收\",{\"1\":{\"739\":1}}],[\"定义空字符串用于拼接\",{\"1\":{\"739\":1}}],[\"定义空字符串\",{\"1\":{\"738\":1}}],[\"定义3个计数器\",{\"1\":{\"737\":1}}],[\"定义索引值\",{\"1\":{\"737\":1}}],[\"定义计数器\",{\"1\":{\"737\":1}}],[\"定义字符串\",{\"1\":{\"737\":2,\"738\":1,\"739\":2}}],[\"定义4个支付常量\",{\"1\":{\"720\":1}}],[\"定义枚举类型enum\",{\"1\":{\"720\":1}}],[\"定义2个注解\",{\"1\":{\"924\":1}}],[\"定义2个属性\",{\"1\":{\"713\":1}}],[\"定义2个标记\",{\"1\":{\"419\":1}}],[\"定义的方法\",{\"1\":{\"939\":1}}],[\"定义的位置\",{\"1\":{\"608\":1}}],[\"定义的标识符就是变量名\",{\"1\":{\"330\":1}}],[\"定义与分类\",{\"0\":{\"608\":1}}],[\"定义普通类cpu是不能完成需求的\",{\"1\":{\"607\":1}}],[\"定义打印属性的方法\",{\"1\":{\"594\":1}}],[\"定义构造器\",{\"1\":{\"469\":1}}],[\"定义教师类\",{\"1\":{\"465\":1}}],[\"定义成员方法\",{\"1\":{\"459\":2,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"922\":1}}],[\"定义成员变量outputstream\",{\"1\":{\"818\":3}}],[\"定义成员变量\",{\"1\":{\"459\":1,\"465\":1,\"472\":1,\"474\":1,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1,\"867\":1,\"895\":4,\"903\":1,\"922\":1,\"923\":1}}],[\"定义在别的类的内部的类\",{\"1\":{\"608\":1}}],[\"定义在类的成员位置\",{\"1\":{\"486\":1,\"493\":1}}],[\"定义在\",{\"1\":{\"457\":1,\"939\":1}}],[\"定义类中的成员\",{\"0\":{\"450\":1}}],[\"定义类包括定义类本身\",{\"1\":{\"448\":1}}],[\"定义两个数组\",{\"1\":{\"409\":1}}],[\"定义中的重点是\",{\"1\":{\"393\":1}}],[\"定义完方法后\",{\"1\":{\"383\":1}}],[\"定义该方法的功能\",{\"1\":{\"382\":1}}],[\"定义方法\",{\"1\":{\"240\":1,\"867\":1}}],[\"定义表结构\",{\"1\":{\"222\":1}}],[\"定义\",{\"0\":{\"393\":1,\"591\":1,\"596\":1,\"701\":1},\"1\":{\"220\":1,\"450\":1,\"455\":1,\"606\":1}}],[\"定义到最后一行之后\",{\"1\":{\"202\":1}}],[\"定义规范\",{\"1\":{\"128\":1}}],[\"定位到第一行之前\",{\"1\":{\"202\":1}}],[\"定价\",{\"1\":{\"153\":2}}],[\"定长字符串\",{\"1\":{\"153\":1}}],[\"定点数以字符串形式存储\",{\"1\":{\"153\":1}}],[\"定点数m+2\",{\"1\":{\"153\":1}}],[\"定点型\",{\"1\":{\"153\":1}}],[\"严格来说\",{\"1\":{\"520\":1}}],[\"严格来说它很复杂\",{\"1\":{\"326\":1}}],[\"严格来说即便不掌握也不影响做一名java开发\",{\"1\":{\"323\":1}}],[\"严格\",{\"1\":{\"153\":1}}],[\"压缩的\",{\"1\":{\"153\":1}}],[\"数值形式\",{\"1\":{\"729\":2}}],[\"数值基本类型的取值范围\",{\"0\":{\"326\":1}}],[\"数列\",{\"1\":{\"442\":1}}],[\"数组初始长度是16\",{\"1\":{\"1016\":1}}],[\"数组上元素的hash相同\",{\"1\":{\"1009\":1}}],[\"数组默认长度是16\",{\"1\":{\"1005\":1}}],[\"数组默认长度16\",{\"1\":{\"1003\":1}}],[\"数组不一定能存下\",{\"1\":{\"1002\":1}}],[\"数组列表的大小\",{\"1\":{\"954\":1}}],[\"数组也可以存储多个对象\",{\"1\":{\"950\":1}}],[\"数组首地址\",{\"1\":{\"948\":1}}],[\"数组我们都很熟悉\",{\"1\":{\"948\":1}}],[\"数组就是一片连续的内存空间\",{\"1\":{\"948\":1}}],[\"数组形式赋值\",{\"1\":{\"924\":1}}],[\"数组转换为\",{\"1\":{\"923\":1}}],[\"数组和链表\",{\"1\":{\"994\":1}}],[\"数组和行的高效读取\",{\"1\":{\"814\":1}}],[\"数组和字符串的高效写入\",{\"1\":{\"808\":1}}],[\"数组写入此输出流\",{\"1\":{\"786\":1,\"788\":1}}],[\"数组越界异常\",{\"1\":{\"748\":1}}],[\"数组越界\",{\"1\":{\"747\":1}}],[\"数组工具类arrays\",{\"1\":{\"478\":1}}],[\"数组解决==\",{\"1\":{\"444\":1}}],[\"数组方式解决\",{\"1\":{\"444\":1}}],[\"数组方式模拟\",{\"1\":{\"444\":1}}],[\"数组遍历\",{\"0\":{\"440\":1}}],[\"数组遍历并输出值\",{\"1\":{\"416\":1}}],[\"数组当然也是引用数据类型\",{\"1\":{\"429\":1}}],[\"数组既可以存基本数据类型\",{\"1\":{\"429\":1}}],[\"数组元素的增删改查\",{\"0\":{\"420\":1}}],[\"数组元素的获取和赋值都依赖于下标访问\",{\"1\":{\"401\":1}}],[\"数组为null\",{\"1\":{\"413\":1}}],[\"数组未初始化\",{\"1\":{\"413\":1}}],[\"数组下标越界异常一起处理\",{\"1\":{\"754\":1}}],[\"数组下标越界异常\",{\"0\":{\"411\":1},\"1\":{\"411\":1}}],[\"数组长度是32\",{\"1\":{\"1012\":1}}],[\"数组长度是2的幂次\",{\"1\":{\"1008\":1}}],[\"数组长度一直都是2的幂次\",{\"1\":{\"1005\":1}}],[\"数组长度不够用了\",{\"1\":{\"950\":1}}],[\"数组长度为0和数组为null都是可以使用的\",{\"1\":{\"413\":1}}],[\"数组长度为0和数组是null以及数组未初始化\",{\"1\":{\"413\":1}}],[\"数组长度为0\",{\"1\":{\"408\":1}}],[\"数组长度\",{\"0\":{\"436\":1},\"1\":{\"398\":2,\"1013\":1}}],[\"数组要开辟一片连续的空间用来存放数据\",{\"1\":{\"396\":1}}],[\"数组名\",{\"1\":{\"395\":2,\"397\":3,\"398\":2,\"400\":1,\"401\":1,\"402\":2}}],[\"数组中\",{\"1\":{\"801\":2}}],[\"数组中从偏移量\",{\"1\":{\"786\":1,\"788\":1}}],[\"数组中每个元素的初始值由系统\",{\"1\":{\"398\":1}}],[\"数组中元素的存储和访问\",{\"1\":{\"394\":1}}],[\"数组中的元素其实已经是\",{\"1\":{\"406\":1}}],[\"数组中的元素要明确它的值\",{\"1\":{\"396\":1}}],[\"数组中的每个存储单元\",{\"1\":{\"393\":1}}],[\"数组中的数据是胡乱的摆放在一起吗\",{\"1\":{\"392\":1}}],[\"数组支持随机访问\",{\"1\":{\"394\":1}}],[\"数组必须占用一片连续的内存空间\",{\"1\":{\"394\":1}}],[\"数组最显著的特征是支持随机访问\",{\"1\":{\"394\":1}}],[\"数组里的数据\",{\"1\":{\"394\":1}}],[\"数组里面\",{\"1\":{\"393\":1}}],[\"数组的最后一个元素与第一个元素相邻\",{\"1\":{\"976\":1}}],[\"数组的最基本操作\",{\"1\":{\"399\":1}}],[\"数组的插入数据\",{\"1\":{\"957\":1}}],[\"数组的插入数据流程\",{\"1\":{\"948\":1}}],[\"数组的foreach\",{\"1\":{\"956\":1}}],[\"数组的iterator里面维护的是下标\",{\"1\":{\"955\":1}}],[\"数组的查找数据流程\",{\"1\":{\"948\":1}}],[\"数组的删除数据流程\",{\"1\":{\"948\":1}}],[\"数组的首地址\",{\"1\":{\"948\":1}}],[\"数组的拷贝\",{\"0\":{\"421\":1}}],[\"数组的逆序\",{\"0\":{\"419\":1},\"1\":{\"419\":1}}],[\"数组的遍历除了可以使用for循环外\",{\"1\":{\"417\":1}}],[\"数组的遍历\",{\"0\":{\"414\":1}}],[\"数组的引用为null\",{\"1\":{\"408\":1}}],[\"数组的元素也可以是基本数据类型\",{\"1\":{\"406\":1}}],[\"数组的访问有两种形式\",{\"1\":{\"400\":1}}],[\"数组的访问\",{\"0\":{\"400\":1}}],[\"数组的基本操作\",{\"0\":{\"399\":1}}],[\"数组的长度一直是2的幂次方\",{\"1\":{\"1003\":1}}],[\"数组的长度一旦创建固定\",{\"1\":{\"394\":1}}],[\"数组的长度\",{\"1\":{\"743\":2}}],[\"数组的长度是不可以改变的\",{\"1\":{\"421\":1}}],[\"数组的长度是一个int类型整数\",{\"1\":{\"402\":1}}],[\"数组的长度可以直接用引用\",{\"1\":{\"402\":1}}],[\"数组的长度必须是一个int范围内的非负数\",{\"1\":{\"398\":1}}],[\"数组的长度由系统决定\",{\"1\":{\"397\":1}}],[\"数组的初始化就有了以下两种方式\",{\"1\":{\"396\":1}}],[\"数组的初始化\",{\"0\":{\"396\":1}}],[\"数组的声明\",{\"0\":{\"395\":1}}],[\"数组的优缺点很鲜明\",{\"1\":{\"394\":1}}],[\"数组的优点是非常鲜明的\",{\"1\":{\"394\":1}}],[\"数组的优点\",{\"1\":{\"394\":1}}],[\"数组的使用是很不方便的\",{\"1\":{\"394\":1}}],[\"数组的缺点\",{\"1\":{\"394\":1}}],[\"数组的随机访问与数组的优缺点\",{\"0\":{\"394\":1}}],[\"数组的时候会讲\",{\"1\":{\"328\":1}}],[\"数组是在内存上连续存储\",{\"1\":{\"948\":1}}],[\"数组是允许协变的\",{\"1\":{\"944\":1}}],[\"数组是一个容器\",{\"1\":{\"420\":1}}],[\"数组是用一段连续的内存空间\",{\"1\":{\"394\":1}}],[\"数组是线性表的典型物理实现\",{\"1\":{\"394\":1}}],[\"数组是典型的引用数据类型\",{\"1\":{\"393\":1}}],[\"数组是存储多个\",{\"1\":{\"393\":1}}],[\"数组能够存储多个元素\",{\"1\":{\"393\":1}}],[\"数组对装在里面的数据有什么要求吗\",{\"1\":{\"392\":1}}],[\"数组使用array\",{\"1\":{\"272\":1}}],[\"数组类型参数\",{\"1\":{\"271\":1}}],[\"数组来接数据\",{\"1\":{\"258\":1}}],[\"数组\",{\"0\":{\"291\":1,\"391\":1,\"948\":1},\"1\":{\"220\":3,\"260\":2,\"291\":1,\"385\":1,\"395\":1,\"400\":1,\"406\":1,\"413\":1,\"416\":1,\"792\":1,\"794\":1,\"801\":2,\"923\":1,\"955\":1,\"956\":1}}],[\"数学工具类math等等\",{\"1\":{\"478\":1}}],[\"数学也是\",{\"1\":{\"168\":1}}],[\"数学大于等于60\",{\"1\":{\"168\":1}}],[\"数学成绩进行分组\",{\"1\":{\"167\":1}}],[\"数学0\",{\"1\":{\"162\":2}}],[\"数学\",{\"1\":{\"162\":1}}],[\"数目也一定要一样\",{\"1\":{\"158\":1}}],[\"数字的最近一个2的幂次方\",{\"1\":{\"978\":1}}],[\"数字格式化异常\",{\"1\":{\"748\":1}}],[\"数字字符出现的次数\",{\"1\":{\"737\":2}}],[\"数字\",{\"1\":{\"153\":2,\"314\":1,\"315\":1,\"737\":1}}],[\"数据共享\",{\"0\":{\"1161\":1}}],[\"数据存储是否有序\",{\"1\":{\"952\":1}}],[\"数据存在内存\",{\"1\":{\"144\":1}}],[\"数据+结构\",{\"1\":{\"947\":1}}],[\"数据结构表现\",{\"1\":{\"974\":1,\"977\":1}}],[\"数据结构表现为\",{\"1\":{\"971\":1}}],[\"数据结构表现为线性表\",{\"1\":{\"957\":1}}],[\"数据结构\",{\"0\":{\"947\":1},\"1\":{\"947\":1}}],[\"数据相关\",{\"1\":{\"824\":1}}],[\"数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本\",{\"1\":{\"817\":1}}],[\"数据输出流允许应用程序以适当方式将基本\",{\"1\":{\"816\":1}}],[\"数据流的使用\",{\"1\":{\"817\":1}}],[\"数据流\",{\"0\":{\"815\":1}}],[\"数据被\",{\"1\":{\"680\":1}}],[\"数据被保护在内部\",{\"1\":{\"515\":1}}],[\"数据被保护在类的内部\",{\"1\":{\"515\":1}}],[\"数据被存储后\",{\"1\":{\"320\":1}}],[\"数据的销毁只有\",{\"1\":{\"1153\":1}}],[\"数据的销毁\",{\"1\":{\"1153\":1}}],[\"数据的产生\",{\"1\":{\"1153\":1}}],[\"数据的生命周期\",{\"1\":{\"1153\":1}}],[\"数据的组织方式\",{\"1\":{\"947\":1}}],[\"数据的集合\",{\"1\":{\"455\":1}}],[\"数据的存储和存储引擎息息相关\",{\"1\":{\"221\":1}}],[\"数据都是直接存储在栈上的栈帧里\",{\"1\":{\"406\":1}}],[\"数据都是写死和固定的\",{\"1\":{\"351\":1}}],[\"数据都是放在磁盘里面\",{\"1\":{\"220\":1}}],[\"数据失真\",{\"1\":{\"336\":1}}],[\"数据最终是要存储在内存中的\",{\"1\":{\"320\":1}}],[\"数据类型有限制\",{\"1\":{\"1149\":1}}],[\"数据类型写入输出流中\",{\"1\":{\"816\":1}}],[\"数据类型是\",{\"1\":{\"523\":1}}],[\"数据类型是要遍历数组或集合中元素的数据类型\",{\"1\":{\"417\":1}}],[\"数据类型无法体现\",{\"1\":{\"444\":1}}],[\"数据类型的转换又可以分为两类\",{\"1\":{\"337\":1}}],[\"数据类型的意义在于\",{\"1\":{\"320\":1}}],[\"数据类型分类\",{\"1\":{\"320\":1}}],[\"数据类型不仅表示一组数据的集合\",{\"1\":{\"320\":1}}],[\"数据类型可以看成是对内存空间的一个抽象表达方式\",{\"1\":{\"320\":1}}],[\"数据类型可以看成是变量的分类\",{\"1\":{\"320\":1}}],[\"数据类型\",{\"0\":{\"320\":1},\"1\":{\"320\":1,\"333\":1,\"334\":1,\"395\":2,\"397\":3,\"398\":3,\"400\":1,\"417\":1,\"422\":1,\"433\":3,\"434\":6,\"450\":1,\"453\":1,\"455\":1,\"474\":1,\"540\":1,\"570\":1,\"571\":1,\"817\":1}}],[\"数据分析等工作\",{\"1\":{\"303\":1}}],[\"数据清洗\",{\"1\":{\"303\":1}}],[\"数据采集\",{\"1\":{\"303\":1}}],[\"数据安全问题\",{\"1\":{\"283\":1}}],[\"数据才会进去\",{\"1\":{\"237\":1}}],[\"数据表中的一条数据\",{\"1\":{\"234\":1}}],[\"数据是依附于主键索引树来存储的\",{\"1\":{\"226\":1}}],[\"数据是存在哪的\",{\"1\":{\"142\":1}}],[\"数据和索引文件\",{\"1\":{\"225\":1}}],[\"数据和索引是分开存储的\",{\"1\":{\"224\":1}}],[\"数据文件\",{\"1\":{\"222\":1}}],[\"数据不重复出现的\",{\"1\":{\"233\":1}}],[\"数据不要频繁插入和删除\",{\"1\":{\"220\":1}}],[\"数据不要冗余\",{\"1\":{\"178\":1}}],[\"数据不能超过内存大小\",{\"1\":{\"144\":1}}],[\"数据准备\",{\"1\":{\"161\":1}}],[\"数据这样的形式\",{\"1\":{\"146\":1}}],[\"数据全部在内存中\",{\"1\":{\"144\":1}}],[\"数据\",{\"1\":{\"140\":1,\"141\":1,\"146\":2,\"164\":1,\"445\":1,\"955\":2}}],[\"数据解析\",{\"1\":{\"110\":1}}],[\"数据传递\",{\"1\":{\"110\":1}}],[\"数据格式约定\",{\"1\":{\"110\":1}}],[\"数据仓库\",{\"1\":{\"105\":1}}],[\"数据库访问\",{\"1\":{\"1077\":1}}],[\"数据库框架\",{\"1\":{\"923\":1}}],[\"数据库操作等需要占用系统资源的操作时\",{\"1\":{\"690\":1}}],[\"数据库中加载jdbc驱动\",{\"1\":{\"495\":1}}],[\"数据库中的字段和bean中的名称不一致问题\",{\"1\":{\"261\":1}}],[\"数据库中数据到底是怎样存储的\",{\"1\":{\"221\":1}}],[\"数据库驱动包\",{\"1\":{\"234\":1,\"244\":1}}],[\"数据库为什么推荐使用自定义主键\",{\"1\":{\"233\":1}}],[\"数据库在读取数据的时候\",{\"1\":{\"220\":1}}],[\"数据库可以使用索引来快速定位符合条件的数据行\",{\"1\":{\"218\":1}}],[\"数据库有为隔离性设置不同的隔离级别\",{\"1\":{\"210\":1}}],[\"数据库有很多种\",{\"1\":{\"144\":1}}],[\"数据库事务\",{\"1\":{\"208\":1}}],[\"数据库注入是一种常见的网络安全漏洞\",{\"1\":{\"204\":1}}],[\"数据库注入问题产生的原因\",{\"1\":{\"204\":1}}],[\"数据库注入问题\",{\"0\":{\"204\":1}}],[\"数据库表设计的时候\",{\"1\":{\"175\":1}}],[\"数据库设计三大范式\",{\"0\":{\"175\":1}}],[\"数据库层面的\",{\"1\":{\"157\":1}}],[\"数据库服务层面的\",{\"1\":{\"157\":1}}],[\"数据库产品纷繁复杂\",{\"1\":{\"144\":1}}],[\"数据库的\",{\"1\":{\"918\":1}}],[\"数据库的设计策略有关系\",{\"1\":{\"220\":1}}],[\"数据库的连接获取和释放\",{\"1\":{\"213\":1}}],[\"数据库的操作\",{\"1\":{\"210\":1}}],[\"数据库的访问过程\",{\"0\":{\"190\":1}}],[\"数据库的备份与恢复\",{\"0\":{\"186\":1}}],[\"数据库的数据\",{\"1\":{\"142\":1}}],[\"数据库的历史\",{\"0\":{\"142\":1}}],[\"数据库应运而生\",{\"1\":{\"142\":1}}],[\"数据库已经发生了翻天覆地的变化\",{\"1\":{\"142\":1}}],[\"数据库管理系统\",{\"1\":{\"141\":1}}],[\"数据库是存储数据的地方\",{\"1\":{\"186\":1}}],[\"数据库是存放数据的\",{\"1\":{\"153\":1}}],[\"数据库是一种结构化信息或数据的有组织的集合\",{\"1\":{\"141\":1}}],[\"数据库是按照数据结构来组织\",{\"1\":{\"141\":1}}],[\"数据库也是采用表格来管理数据的\",{\"1\":{\"141\":1}}],[\"数据库\",{\"1\":{\"105\":1,\"144\":1,\"146\":2}}],[\"类上\",{\"1\":{\"939\":2}}],[\"类比类对象\",{\"1\":{\"924\":1}}],[\"类表示了一个持久的属性集\",{\"1\":{\"918\":1}}],[\"类不同的是\",{\"1\":{\"744\":1}}],[\"类来表示日期\",{\"1\":{\"721\":1}}],[\"类内部可以创建\",{\"1\":{\"715\":1}}],[\"类定义的\",{\"1\":{\"681\":1}}],[\"类定义完毕后\",{\"1\":{\"535\":1}}],[\"类图结构\",{\"1\":{\"594\":1}}],[\"类class在定义时\",{\"1\":{\"592\":1}}],[\"类student的类体中\",{\"1\":{\"509\":2}}],[\"类所有的构造器中的前几行\",{\"1\":{\"488\":1}}],[\"类属性指的都是静态成员变量\",{\"1\":{\"473\":1}}],[\"类加载\",{\"1\":{\"924\":1}}],[\"类加载器\",{\"0\":{\"911\":1}}],[\"类加载整个程序运行期间只有一次\",{\"1\":{\"546\":1}}],[\"类加载这个过程中\",{\"1\":{\"546\":1}}],[\"类加载过程中\",{\"1\":{\"546\":1}}],[\"类加载过程练习一\",{\"1\":{\"498\":1}}],[\"类加载练习二\",{\"1\":{\"498\":1}}],[\"类加载的时机\",{\"1\":{\"497\":1}}],[\"类加载的具体过程\",{\"1\":{\"456\":1}}],[\"类加载时期\",{\"1\":{\"494\":1,\"555\":1}}],[\"类加载时机\",{\"0\":{\"476\":1,\"914\":1}}],[\"类加载可以连环触发\",{\"1\":{\"479\":1}}],[\"类加载结束就能够使用\",{\"1\":{\"476\":1}}],[\"类加载不要忘记了\",{\"1\":{\"468\":1}}],[\"类加载io流操作\",{\"1\":{\"456\":1}}],[\"类加载要在创建对象之前进行\",{\"1\":{\"456\":1}}],[\"类加载之后\",{\"1\":{\"456\":1}}],[\"类加载是通过把某个类的二进制字节码文件\",{\"1\":{\"456\":1}}],[\"类加载介绍\",{\"0\":{\"456\":1}}],[\"类是模板\",{\"1\":{\"454\":1}}],[\"类是抽象的\",{\"1\":{\"447\":1}}],[\"类中的成员变量\",{\"1\":{\"614\":1}}],[\"类中的所有方法的调用都可以使用类名点去完成\",{\"1\":{\"478\":1}}],[\"类中\",{\"1\":{\"538\":1,\"939\":1}}],[\"类中有静态成员变量创建对象\",{\"1\":{\"546\":1}}],[\"类中有3个属性\",{\"1\":{\"517\":1}}],[\"类中有多个构造器\",{\"1\":{\"491\":1}}],[\"类中需要提供给外界使用的方法的实现过程中\",{\"1\":{\"510\":1}}],[\"类中结构的访问权限修饰符\",{\"0\":{\"509\":1}}],[\"类中显然会出现类似以下代码\",{\"1\":{\"487\":1}}],[\"类中默认提供的无参构造方法\",{\"1\":{\"466\":1}}],[\"类中成员方法的集合\",{\"1\":{\"455\":1}}],[\"类中成员变量的集合\",{\"1\":{\"455\":1}}],[\"类中成员分为两部分\",{\"1\":{\"450\":1}}],[\"类中没有的属性和行为\",{\"1\":{\"454\":1}}],[\"类可以嵌套定义称之为内部类\",{\"1\":{\"454\":1}}],[\"类修饰符列表\",{\"1\":{\"449\":1}}],[\"类的命名\",{\"1\":{\"1019\":1}}],[\"类的实例\",{\"1\":{\"923\":1}}],[\"类的实例表示正在运行的\",{\"1\":{\"917\":1}}],[\"类的对象能够被多次的修改\",{\"1\":{\"744\":1}}],[\"类的\",{\"1\":{\"740\":1}}],[\"类的继承是单继承的\",{\"1\":{\"599\":1}}],[\"类的修饰符不能有final\",{\"1\":{\"593\":1}}],[\"类的访问权限修饰符\",{\"0\":{\"508\":1}}],[\"类的定义这行\",{\"1\":{\"939\":1}}],[\"类的定义\",{\"0\":{\"448\":1}}],[\"类的概念\",{\"0\":{\"446\":1}}],[\"类只规定了共性\",{\"1\":{\"447\":1}}],[\"类描述了\",{\"1\":{\"447\":1}}],[\"类和类继承\",{\"1\":{\"599\":1}}],[\"类和类的所有成员\",{\"1\":{\"505\":1}}],[\"类和对象的关系\",{\"1\":{\"447\":1}}],[\"类和接口每个单词的首字母大写\",{\"1\":{\"316\":1}}],[\"类与对象的关系\",{\"0\":{\"447\":1}}],[\"类就是这样一种结构\",{\"1\":{\"515\":1}}],[\"类就是创建对象的模板\",{\"1\":{\"446\":1}}],[\"类就抽取了同类别的所有对象属性和行为上的\",{\"1\":{\"446\":1}}],[\"类别\",{\"1\":{\"350\":1}}],[\"类似\",{\"1\":{\"953\":1,\"981\":1}}],[\"类似变量初始化\",{\"1\":{\"396\":1}}],[\"类似下列行为都是不能通过编译的\",{\"1\":{\"342\":1}}],[\"类似于你服务器端有个保险柜\",{\"1\":{\"1137\":1}}],[\"类似于摩斯密码\",{\"1\":{\"800\":1}}],[\"类似于if\",{\"1\":{\"654\":1}}],[\"类似于idea和settings的关系\",{\"1\":{\"246\":1}}],[\"类似于数组对象中的元素\",{\"1\":{\"453\":1}}],[\"类似于打擂台\",{\"1\":{\"418\":1}}],[\"类似于变量的声明\",{\"1\":{\"395\":1}}],[\"类似于合同的附加合同\",{\"1\":{\"116\":1}}],[\"类似于一种通讯协议\",{\"1\":{\"110\":1}}],[\"类体中\",{\"1\":{\"457\":1}}],[\"类体中直接定义的代码块\",{\"1\":{\"331\":1}}],[\"类体当中直接定义的变量也不是局部变量\",{\"1\":{\"331\":1}}],[\"类体当中直接定义的大括号内部\",{\"1\":{\"331\":1}}],[\"类体当中不属于局部位置\",{\"1\":{\"331\":1}}],[\"类体\",{\"1\":{\"331\":1,\"449\":1,\"458\":1,\"566\":1,\"591\":1}}],[\"类注释\",{\"1\":{\"318\":1}}],[\"类名为userserviceimpl\",{\"1\":{\"1107\":1}}],[\"类名<泛型类型1\",{\"1\":{\"939\":2}}],[\"类名引用成员方法\",{\"1\":{\"655\":3}}],[\"类名引用静态方法\",{\"1\":{\"655\":1}}],[\"类名或者接口名\",{\"1\":{\"647\":1}}],[\"类名命名特点是什么\",{\"1\":{\"592\":1}}],[\"类名是绝对唯一的\",{\"1\":{\"503\":1}}],[\"类名报错的地方即可\",{\"1\":{\"499\":1}}],[\"类名表示创建是何种对象\",{\"1\":{\"452\":1}}],[\"类名\",{\"1\":{\"314\":1,\"449\":1,\"452\":2,\"464\":1,\"465\":2,\"480\":1,\"481\":4,\"520\":1,\"566\":1,\"572\":2,\"586\":1,\"591\":1,\"596\":2,\"647\":1,\"655\":5,\"675\":1,\"857\":1,\"916\":3}}],[\"类名和映射文件名字相同\",{\"1\":{\"249\":1}}],[\"类\",{\"1\":{\"247\":1,\"312\":1,\"313\":1,\"533\":1,\"540\":1,\"605\":1,\"936\":2,\"1076\":1}}],[\"类型一致说明空间大小一致\",{\"1\":{\"948\":1}}],[\"类型不匹配问题\",{\"1\":{\"944\":2}}],[\"类型转化为\",{\"1\":{\"942\":1}}],[\"类型转换等操作\",{\"1\":{\"712\":1}}],[\"类型转换异常\",{\"1\":{\"529\":1,\"748\":1}}],[\"类型匹配\",{\"1\":{\"754\":1,\"1090\":1,\"1091\":1}}],[\"类型的count值来表示球队得分\",{\"1\":{\"474\":2}}],[\"类型确定的情况\",{\"1\":{\"421\":1}}],[\"类型内建的类型别名\",{\"1\":{\"247\":1}}],[\"类型别名\",{\"1\":{\"247\":1}}],[\"类型\",{\"1\":{\"153\":1,\"158\":1,\"247\":1,\"516\":1,\"655\":2,\"824\":1,\"1109\":1}}],[\"选课表\",{\"1\":{\"281\":1}}],[\"选中数据库\",{\"1\":{\"187\":1}}],[\"选择不同的方式进行传输\",{\"1\":{\"885\":1}}],[\"选择是任意性的\",{\"1\":{\"874\":1}}],[\"选择\",{\"1\":{\"606\":1}}],[\"选择的权力在子类手上\",{\"1\":{\"592\":1}}],[\"选择其一即可\",{\"1\":{\"570\":1}}],[\"选择重写子类的方法\",{\"1\":{\"562\":1}}],[\"选择出更大\",{\"1\":{\"418\":1}}],[\"选择结构有两种实现方式\",{\"1\":{\"360\":1}}],[\"选择结构的具体实现有两种\",{\"1\":{\"357\":1}}],[\"选择结构\",{\"0\":{\"357\":1},\"1\":{\"356\":2}}],[\"选择新建的值为\",{\"1\":{\"307\":1}}],[\"选择path\",{\"1\":{\"307\":1}}],[\"选择一个变量\",{\"1\":{\"307\":1}}],[\"选择需要比较的行数据\",{\"1\":{\"188\":1}}],[\"选择指定的数据库\",{\"1\":{\"152\":1}}],[\"选择数据库\",{\"0\":{\"152\":1}}],[\"选项全局设置\",{\"1\":{\"29\":1}}],[\"防止别人又push了代码\",{\"1\":{\"1201\":1}}],[\"防止bug\",{\"1\":{\"951\":1}}],[\"防止数据库增加字段后\",{\"1\":{\"267\":2}}],[\"防止数据出现不一致或者不完整的情况\",{\"1\":{\"171\":1}}],[\"防止后续数据量变大了之后\",{\"1\":{\"153\":1}}],[\"防止操作错了\",{\"1\":{\"150\":1}}],[\"防盗链是通过检查请求中的referer字段或者使用其他验证手段\",{\"1\":{\"116\":1}}],[\"防盗链\",{\"1\":{\"116\":2}}],[\"您刚刚在电话里说\",{\"1\":{\"150\":1}}],[\"怕出事担责\",{\"1\":{\"150\":1}}],[\"找应用程序\",{\"1\":{\"1140\":1}}],[\"找servlet\",{\"1\":{\"1133\":1}}],[\"找不到文件\",{\"1\":{\"748\":1}}],[\"找不到\",{\"1\":{\"737\":2}}],[\"找到其中的响应体\",{\"1\":{\"1132\":1}}],[\"找到第一个\",{\"0\":{\"1047\":1}}],[\"找到任意一个小于170的\",{\"1\":{\"1046\":1}}],[\"找到任意一个\",{\"0\":{\"1046\":1}}],[\"找到大于这个值的最小2的幂次方\",{\"1\":{\"978\":1}}],[\"找到一个对应的value\",{\"1\":{\"950\":1}}],[\"找到我想要访问的键值对数据\",{\"1\":{\"680\":1}}],[\"找到new对象的那个构造器\",{\"1\":{\"489\":1}}],[\"找到高级系统设置\",{\"1\":{\"307\":1}}],[\"找到java8进行下载\",{\"1\":{\"306\":1}}],[\"找语文成绩是偶数的\",{\"1\":{\"162\":1}}],[\"找出来自武汉\",{\"1\":{\"1053\":1}}],[\"找出一个集合中来自北京的人\",{\"1\":{\"1053\":1}}],[\"找出订单金额超过200的\",{\"1\":{\"956\":1}}],[\"找出订单状态是已付款的\",{\"1\":{\"956\":1}}],[\"找出下单时间最早的订单\",{\"1\":{\"956\":1}}],[\"找出2年内入学的学生\",{\"1\":{\"956\":1}}],[\"找出总分最低的学生\",{\"1\":{\"956\":1}}],[\"找出总分最高的学生\",{\"1\":{\"956\":1}}],[\"找出id是奇数的\",{\"1\":{\"162\":1}}],[\"找出年龄大于\",{\"1\":{\"159\":1}}],[\"找出name是\",{\"1\":{\"159\":1}}],[\"找出这个班上最低的分数的同学\",{\"1\":{\"120\":1}}],[\"找出这个班上最高的分数的同学\",{\"1\":{\"120\":1}}],[\"找个电脑存起来\",{\"1\":{\"153\":1}}],[\"找他确认\",{\"1\":{\"150\":1}}],[\"删\",{\"0\":{\"195\":1},\"1\":{\"195\":1,\"951\":1}}],[\"删表\",{\"1\":{\"187\":1}}],[\"删库是一个高危动作\",{\"1\":{\"150\":1}}],[\"删库一定要小心再小心\",{\"1\":{\"150\":1}}],[\"删除分隔符\",{\"1\":{\"1197\":1,\"1201\":1}}],[\"删除cookie\",{\"1\":{\"1147\":1}}],[\"删除collection中的所有存在的元素\",{\"1\":{\"953\":2,\"981\":1}}],[\"删除最大的键值对\",{\"1\":{\"1026\":1}}],[\"删除最小的键值对\",{\"1\":{\"1026\":1}}],[\"删除map中所包含的这个key\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"删除和获取元素的操作\",{\"1\":{\"973\":1}}],[\"删除和修改元素\",{\"1\":{\"961\":1}}],[\"删除或者获取的时候\",{\"1\":{\"972\":1}}],[\"删除或者是修改操作\",{\"1\":{\"171\":1}}],[\"删除刚刚遍历的数据\",{\"1\":{\"959\":1}}],[\"删除刚刚遍历过的元素\",{\"1\":{\"955\":2}}],[\"删除年龄小于18的学生\",{\"1\":{\"956\":1}}],[\"删除低于平均分的学生\",{\"1\":{\"956\":1}}],[\"删除第一个\",{\"1\":{\"953\":1}}],[\"删除方法\",{\"1\":{\"953\":1,\"1016\":1}}],[\"删除元素\",{\"1\":{\"953\":2,\"981\":1}}],[\"删除一个学生不好操作\",{\"1\":{\"950\":1}}],[\"删除此抽象路径名表示的文件或目录\",{\"1\":{\"773\":1}}],[\"删除从指定位置开始指定位置结束的内容\",{\"1\":{\"743\":2}}],[\"删除指定下标的元素\",{\"1\":{\"958\":1}}],[\"删除指定位置的字符\",{\"1\":{\"743\":2}}],[\"删除指定的后缀\",{\"1\":{\"268\":1}}],[\"删除指定的前缀\",{\"1\":{\"268\":1}}],[\"删除功能\",{\"0\":{\"773\":1},\"1\":{\"743\":2}}],[\"删除商品时\",{\"1\":{\"601\":1}}],[\"删除标签\",{\"1\":{\"234\":1}}],[\"删除索引\",{\"1\":{\"232\":1}}],[\"删除的行数\",{\"1\":{\"195\":1}}],[\"删除语句\",{\"1\":{\"162\":1}}],[\"删除满足条件的数据\",{\"1\":{\"161\":1}}],[\"删除数据导致红黑树上数据量变少\",{\"1\":{\"1014\":1}}],[\"删除数据流程\",{\"1\":{\"957\":2}}],[\"删除数据的时候\",{\"1\":{\"1014\":1}}],[\"删除数据的时候挪动数据\",{\"1\":{\"950\":1}}],[\"删除数据的效率\",{\"1\":{\"1006\":1}}],[\"删除数据的sql\",{\"1\":{\"201\":1}}],[\"删除数据\",{\"0\":{\"161\":1},\"1\":{\"420\":1}}],[\"删除数据库\",{\"0\":{\"150\":1},\"1\":{\"150\":1}}],[\"删除列\",{\"1\":{\"156\":1}}],[\"删除名为table\",{\"1\":{\"154\":1}}],[\"删除表\",{\"0\":{\"154\":1}}],[\"删除\",{\"0\":{\"238\":1},\"1\":{\"140\":2,\"171\":1,\"235\":1,\"420\":1,\"953\":1,\"956\":1,\"961\":1,\"997\":1,\"1018\":1,\"1023\":1}}],[\"删除线\",{\"1\":{\"8\":1}}],[\"排他性\",{\"1\":{\"674\":1}}],[\"排版\",{\"1\":{\"415\":1}}],[\"排列成一条线一样\",{\"1\":{\"394\":1}}],[\"排序后\",{\"1\":{\"739\":1,\"740\":2,\"741\":2}}],[\"排序算法\",{\"1\":{\"739\":1}}],[\"排序前\",{\"1\":{\"739\":1,\"740\":2,\"741\":2}}],[\"排序是\",{\"1\":{\"341\":1}}],[\"排序\",{\"0\":{\"166\":1,\"1041\":1},\"1\":{\"184\":1,\"740\":1,\"741\":1,\"1031\":1}}],[\"排序规则\",{\"1\":{\"156\":1,\"740\":1}}],[\"排序的规则\",{\"1\":{\"149\":1}}],[\"排查故障所用\",{\"1\":{\"130\":1}}],[\"区间规则\",{\"1\":{\"799\":1}}],[\"区间的同学姓名\",{\"1\":{\"162\":2}}],[\"区分\",{\"1\":{\"336\":2}}],[\"区分大小写\",{\"1\":{\"149\":1,\"315\":1}}],[\"区分大小写的\",{\"1\":{\"149\":1}}],[\"区别不大\",{\"1\":{\"961\":1}}],[\"区别在于\",{\"1\":{\"624\":1}}],[\"区别相当明显\",{\"1\":{\"606\":1}}],[\"区别点\",{\"1\":{\"606\":1}}],[\"区别是本地方法栈是给本地\",{\"1\":{\"403\":1}}],[\"区别很多\",{\"1\":{\"144\":1}}],[\"区别主要在于请求资源的不同\",{\"1\":{\"115\":1}}],[\"区别\",{\"1\":{\"115\":1,\"883\":1,\"1160\":1}}],[\"进以避免在日常代码书写中的对集合数据操作的性能以及代码冗长问题\",{\"1\":{\"1032\":1}}],[\"进程的上下文切换\",{\"1\":{\"828\":1}}],[\"进程与线程的关系\",{\"1\":{\"826\":1}}],[\"进程中有多个子任务\",{\"1\":{\"826\":1}}],[\"进程是操作系统进行资源调度与分配的基本单位\",{\"1\":{\"826\":1}}],[\"进程\",{\"0\":{\"826\":1},\"1\":{\"826\":1,\"885\":1}}],[\"进一步简化lambda表达式的书写\",{\"1\":{\"655\":2}}],[\"进一步提高查询的效率\",{\"1\":{\"220\":1}}],[\"进阶使用和简化\",{\"0\":{\"654\":1}}],[\"进阶操作\",{\"0\":{\"439\":1}}],[\"进球了\",{\"1\":{\"472\":1,\"474\":1}}],[\"进而在服务器中进一步获得信息\",{\"1\":{\"1137\":1}}],[\"进而改变循环的状态\",{\"1\":{\"361\":1}}],[\"进而引发安全性的问题\",{\"1\":{\"204\":1}}],[\"进入不了sync\",{\"1\":{\"884\":1}}],[\"进入\",{\"1\":{\"867\":2}}],[\"进入sync\",{\"1\":{\"867\":6}}],[\"进入这个java文件存放的目录\",{\"1\":{\"308\":1}}],[\"进入数据库\",{\"1\":{\"149\":1}}],[\"进行转换\",{\"1\":{\"1118\":1}}],[\"进行排序\",{\"1\":{\"1025\":1}}],[\"进行自动排序\",{\"1\":{\"740\":2}}],[\"进行交换\",{\"1\":{\"739\":1}}],[\"进行字符串拼接的时候有2种情况\",{\"1\":{\"735\":1}}],[\"进行中\",{\"1\":{\"721\":1}}],[\"进行修改具体实现\",{\"1\":{\"530\":1}}],[\"进行显式赋值\",{\"1\":{\"471\":1}}],[\"进行默认赋值\",{\"1\":{\"471\":1}}],[\"进行各种一维数组的操作\",{\"1\":{\"437\":1}}],[\"进行当前层的下一次循环\",{\"1\":{\"377\":1}}],[\"进行移位运算操作\",{\"1\":{\"348\":1}}],[\"进行如下图操作\",{\"1\":{\"308\":1}}],[\"进行统计\",{\"1\":{\"128\":1}}],[\"进行解析\",{\"1\":{\"124\":1}}],[\"进行拼接\",{\"1\":{\"115\":1}}],[\"进行引用\",{\"1\":{\"81\":2}}],[\"才可以push\",{\"1\":{\"1196\":1}}],[\"才可以访问它继承自父类的protected成员\",{\"1\":{\"536\":1}}],[\"才可以访问\",{\"1\":{\"536\":1}}],[\"才往下判断\",{\"1\":{\"1009\":1}}],[\"才表示对象相等\",{\"1\":{\"741\":1}}],[\"才应返回true\",{\"1\":{\"674\":1}}],[\"才需要设置为final修饰\",{\"1\":{\"566\":1}}],[\"才考虑给public\",{\"1\":{\"510\":1}}],[\"才是引用数据类型的实质\",{\"1\":{\"406\":1}}],[\"才会用linkedlist\",{\"1\":{\"968\":1}}],[\"才会有具体的类型\",{\"1\":{\"941\":1}}],[\"才会执行\",{\"1\":{\"752\":1}}],[\"才会返回0\",{\"1\":{\"675\":1}}],[\"才会返回true\",{\"1\":{\"673\":1}}],[\"才会把数据添加进二级缓存\",{\"1\":{\"287\":1}}],[\"才会把该sqlsession一级缓存中的数据添加到对应namespace的二级缓存中\",{\"1\":{\"286\":1}}],[\"才会走缓存\",{\"1\":{\"284\":1}}],[\"才会拼接进sql\",{\"1\":{\"264\":1}}],[\"才会按照第二个字段进行分组\",{\"1\":{\"167\":1}}],[\"才能输入\",{\"1\":{\"1201\":1}}],[\"才能得到\",{\"1\":{\"936\":1}}],[\"才能正常执行\",{\"1\":{\"869\":1}}],[\"才能唤醒\",{\"1\":{\"869\":1}}],[\"才能调用这个方法\",{\"1\":{\"687\":1}}],[\"才能轮到子类\",{\"1\":{\"545\":1}}],[\"才能访问从父类那里继承过来的protected成员\",{\"1\":{\"538\":1}}],[\"才能够直立行走\",{\"1\":{\"595\":1}}],[\"才能够访问父类中继承过来的受保护成员\",{\"1\":{\"538\":1}}],[\"才能够访问它从父类那里继承过来的protected成员\",{\"1\":{\"536\":1}}],[\"才能够使用这种形式\",{\"1\":{\"436\":1,\"437\":1}}],[\"才能对数据进行操作\",{\"1\":{\"515\":1}}],[\"才能生效\",{\"1\":{\"212\":1}}],[\"才能继续执行\",{\"1\":{\"211\":1}}],[\"才能进一步操作数据库中的数据\",{\"1\":{\"152\":1}}],[\"才能写入到磁盘里面\",{\"1\":{\"149\":1}}],[\"才有效果\",{\"1\":{\"116\":1}}],[\"校对规则也可以称为排序规则\",{\"1\":{\"149\":1}}],[\"校对规则\",{\"1\":{\"149\":4}}],[\"字体文件\",{\"1\":{\"1078\":1}}],[\"字典序原本的含义实质\",{\"1\":{\"739\":1}}],[\"字面值常量定义long类型变量\",{\"1\":{\"336\":1}}],[\"字面值常量\",{\"1\":{\"328\":1,\"568\":1}}],[\"字母分割用\",{\"1\":{\"1019\":1}}],[\"字母\",{\"1\":{\"315\":2}}],[\"字节数据\",{\"1\":{\"1132\":1}}],[\"字节数组批量的方式效率高\",{\"1\":{\"796\":1}}],[\"字节数组方式\",{\"1\":{\"794\":1,\"796\":1}}],[\"字节数组\",{\"1\":{\"738\":2}}],[\"字节信息\",{\"1\":{\"1121\":1}}],[\"字节打印流\",{\"1\":{\"821\":1}}],[\"字节值\",{\"1\":{\"792\":1,\"794\":1}}],[\"字节输入流\",{\"0\":{\"791\":1},\"1\":{\"783\":1,\"824\":1}}],[\"字节输出流\",{\"0\":{\"785\":1},\"1\":{\"783\":1,\"824\":1}}],[\"字节长度\",{\"1\":{\"326\":1}}],[\"字节\",{\"1\":{\"321\":1,\"799\":1}}],[\"字节类型\",{\"1\":{\"312\":1}}],[\"字节码文件对象从哪来\",{\"1\":{\"923\":1}}],[\"字节码文件\",{\"1\":{\"308\":2,\"1098\":1}}],[\"字节流inputstream\",{\"1\":{\"1113\":1}}],[\"字节流是万能的\",{\"1\":{\"784\":1}}],[\"字节流思维导图\",{\"1\":{\"298\":1}}],[\"字节流\",{\"0\":{\"298\":1},\"1\":{\"782\":1,\"1113\":2,\"1124\":2}}],[\"字符信息\",{\"1\":{\"1121\":1}}],[\"字符输入流\",{\"0\":{\"809\":1},\"1\":{\"783\":1,\"824\":1}}],[\"字符输出流\",{\"0\":{\"803\":1},\"1\":{\"783\":1,\"824\":1}}],[\"字符的个数\",{\"1\":{\"743\":2}}],[\"字符的编码值\",{\"1\":{\"324\":1}}],[\"字符数组\",{\"1\":{\"728\":1,\"738\":2}}],[\"字符序列\",{\"1\":{\"728\":1}}],[\"字符常量\",{\"1\":{\"328\":1}}],[\"字符a的编码值是97\",{\"1\":{\"324\":1}}],[\"字符\",{\"1\":{\"324\":2,\"356\":1,\"705\":1,\"729\":2,\"739\":2,\"798\":1}}],[\"字符型变量参与运算\",{\"1\":{\"324\":1}}],[\"字符型\",{\"0\":{\"324\":1}}],[\"字符类型如果直接输出\",{\"1\":{\"324\":1}}],[\"字符类型\",{\"1\":{\"312\":1,\"407\":1}}],[\"字符流reader\",{\"1\":{\"1113\":1}}],[\"字符流的本质\",{\"0\":{\"802\":1}}],[\"字符流思维导图\",{\"1\":{\"297\":1}}],[\"字符流\",{\"0\":{\"297\":1},\"1\":{\"782\":1,\"1113\":2,\"1124\":3}}],[\"字符串bdcaegf\",{\"1\":{\"739\":2}}],[\"字符串长度不一样\",{\"1\":{\"739\":1}}],[\"字符串长度一样\",{\"1\":{\"739\":1}}],[\"字符串反转\",{\"1\":{\"738\":2}}],[\"字符串helloworld\",{\"1\":{\"738\":2}}],[\"字符串比较\",{\"0\":{\"734\":1}}],[\"字符串常见问题与练习\",{\"0\":{\"733\":1}}],[\"字符串常量池\",{\"0\":{\"731\":1}}],[\"字符串常量\",{\"1\":{\"328\":1}}],[\"字符串的大小如何比较\",{\"1\":{\"739\":1}}],[\"字符串的分配和其他对象分配一样\",{\"1\":{\"731\":1}}],[\"字符串的拼接\",{\"1\":{\"340\":1}}],[\"字符串是常量\",{\"1\":{\"730\":1}}],[\"字符串数值\",{\"1\":{\"705\":1}}],[\"字符串拼接\",{\"0\":{\"735\":1},\"1\":{\"255\":1,\"704\":1,\"738\":2}}],[\"字符串\",{\"1\":{\"153\":1,\"158\":3,\"738\":1,\"739\":2,\"1102\":1}}],[\"字符集中前128个字符就是ascii码表中的字符\",{\"1\":{\"315\":1}}],[\"字符集中编号为0xc0后面的字符\",{\"1\":{\"315\":1}}],[\"字符集中编号为0xc0以及它后面的所有符号是不含很多常用英文字符的\",{\"1\":{\"315\":1}}],[\"字符集中编号为0xc0以及它后面的所有符号\",{\"1\":{\"315\":2}}],[\"字符集兼容ascii码表\",{\"1\":{\"315\":1}}],[\"字符集和校对规则\",{\"1\":{\"151\":1}}],[\"字符集和校对规则是一对多的关系\",{\"1\":{\"149\":1}}],[\"字符集\",{\"1\":{\"149\":3}}],[\"字符集是用来定义\",{\"1\":{\"149\":1}}],[\"字符集是\",{\"1\":{\"149\":1}}],[\"字段\",{\"1\":{\"167\":1}}],[\"字段中\",{\"1\":{\"167\":1}}],[\"字段层面的\",{\"1\":{\"157\":1}}],[\"字段的类型及长度\",{\"1\":{\"153\":1}}],[\"字段的顺序和格式\",{\"1\":{\"110\":1}}],[\"字段名\",{\"1\":{\"149\":1}}],[\"跑2km\",{\"1\":{\"149\":1}}],[\"都叫跨域\",{\"1\":{\"1157\":1}}],[\"都用来存储key\",{\"1\":{\"1020\":1}}],[\"都只有一个前驱一个后继\",{\"1\":{\"957\":1}}],[\"都存起来\",{\"1\":{\"956\":1}}],[\"都谈不上重要知识点\",{\"1\":{\"885\":1}}],[\"都start\",{\"1\":{\"867\":1}}],[\"都创建好\",{\"1\":{\"771\":1}}],[\"都作为此类的实例实现\",{\"1\":{\"728\":1}}],[\"都应返回\",{\"1\":{\"674\":1}}],[\"都应该是一个该抽象类的对象\",{\"1\":{\"594\":1}}],[\"都无需考虑\",{\"1\":{\"663\":1}}],[\"都实现了该类的方法\",{\"1\":{\"658\":1}}],[\"都直接或者间接的继承自该类\",{\"1\":{\"658\":1}}],[\"都被戏称为\",{\"1\":{\"658\":1}}],[\"都不执行了\",{\"1\":{\"749\":1}}],[\"都不太可能一句话把方法体写完\",{\"1\":{\"654\":1}}],[\"都不能存储重复元素\",{\"1\":{\"1020\":1}}],[\"都不能使用\",{\"1\":{\"496\":1}}],[\"都不能插入重复的数据\",{\"1\":{\"170\":1}}],[\"都没有外部类对象存在\",{\"1\":{\"627\":1,\"628\":1}}],[\"都定义成员内部类了\",{\"1\":{\"611\":1}}],[\"都有可能导致原本数组某个位置如果有红黑树\",{\"1\":{\"1016\":1}}],[\"都有\",{\"1\":{\"592\":1}}],[\"都有唯一编号\",{\"1\":{\"393\":1}}],[\"都符合强转成功的条件\",{\"1\":{\"586\":1}}],[\"都默认类加载全部结束了\",{\"1\":{\"546\":1}}],[\"都或直接\",{\"1\":{\"533\":1}}],[\"都明确建议boolean类型的成员变量名不要命名为isxxx\",{\"1\":{\"518\":1}}],[\"都具有\",{\"1\":{\"505\":1}}],[\"都具有默认值\",{\"1\":{\"474\":1}}],[\"都在jdk的源码当中\",{\"1\":{\"566\":1}}],[\"都在堆上\",{\"1\":{\"403\":1}}],[\"都在叶子节点中冗余一份\",{\"1\":{\"220\":1}}],[\"都跑不了的结构\",{\"1\":{\"358\":1}}],[\"都需要对请求头做处理\",{\"1\":{\"1160\":1}}],[\"都需要一个共同的全局常量时才考虑在接口中定义属性\",{\"1\":{\"598\":1}}],[\"都需要写一个方法\",{\"1\":{\"581\":1}}],[\"都需要让jvm来这个类型\",{\"1\":{\"456\":1}}],[\"都需要连接互联网才能使用\",{\"1\":{\"303\":1}}],[\"都需要去数据文件中找这个数据\",{\"1\":{\"226\":1}}],[\"都要注意\",{\"1\":{\"264\":1}}],[\"都写一个接口\",{\"1\":{\"263\":1}}],[\"都会围绕着方法展开\",{\"1\":{\"1093\":1}}],[\"都会构建一个新的string对象\",{\"1\":{\"741\":2}}],[\"都会互相影响\",{\"1\":{\"699\":1}}],[\"都会持有外部类对象的引用\",{\"1\":{\"614\":1}}],[\"都会游泳等\",{\"1\":{\"530\":1}}],[\"都会下意识的分解问题\",{\"1\":{\"442\":1}}],[\"都会报空指针异常\",{\"1\":{\"413\":1}}],[\"都会将一个存储该方法信息的栈帧压入栈中\",{\"1\":{\"403\":1}}],[\"都会在栈上分配一块只属于该方法的内存区域\",{\"1\":{\"403\":1}}],[\"都会用类型处理器将获取到的值以合适的方式转换成\",{\"1\":{\"247\":1}}],[\"都会占满m\",{\"1\":{\"153\":1}}],[\"都可以有这样的空间\",{\"1\":{\"1149\":1}}],[\"都可以使用\",{\"1\":{\"1085\":1}}],[\"都可以使用这种方式直接互相调用\",{\"1\":{\"383\":1}}],[\"都可以直接用去调用\",{\"1\":{\"510\":1}}],[\"都可以\",{\"1\":{\"192\":1}}],[\"都可以合并为一个表\",{\"1\":{\"172\":1}}],[\"都必须依赖程序员手动完成\",{\"1\":{\"690\":1}}],[\"都必须实现该抽象方法\",{\"1\":{\"592\":1}}],[\"都必须在mybatis的主配置文件中\",{\"1\":{\"234\":1}}],[\"都必须要在数据库中\",{\"1\":{\"152\":1}}],[\"都必须是小写\",{\"1\":{\"149\":1}}],[\"都是\",{\"1\":{\"1200\":1}}],[\"都是可以从session中存取数据的\",{\"1\":{\"1152\":1}}],[\"都是可以的\",{\"1\":{\"571\":1}}],[\"都是洒洒水\",{\"1\":{\"1133\":1}}],[\"都是key\",{\"1\":{\"1112\":1}}],[\"都是线程不安全的\",{\"1\":{\"987\":1}}],[\"都是线性表\",{\"1\":{\"947\":1}}],[\"都是在工作区的\",{\"1\":{\"1202\":1}}],[\"都是在处理数据\",{\"1\":{\"951\":1}}],[\"都是在默认初始化的基础上进行的\",{\"1\":{\"487\":1}}],[\"都是用来传递额外信息的\",{\"1\":{\"924\":1}}],[\"都是同一个\",{\"1\":{\"916\":1}}],[\"都是打印10个数\",{\"1\":{\"841\":2}}],[\"都是以文件的形式存在\",{\"1\":{\"766\":1}}],[\"都是不可变的\",{\"1\":{\"702\":1}}],[\"都是不可以的\",{\"1\":{\"571\":1}}],[\"都是没有关系的\",{\"1\":{\"631\":1}}],[\"都是根据引用的数据类型来决定的\",{\"1\":{\"553\":1}}],[\"都是些啥\",{\"1\":{\"541\":1}}],[\"都是完全没问题的\",{\"1\":{\"509\":1}}],[\"都是神射手擅长投3分\",{\"1\":{\"472\":2}}],[\"都是属于对象的\",{\"1\":{\"453\":1}}],[\"都是引用数据类型的引用\",{\"1\":{\"452\":1}}],[\"都是上一行同列元素和上一行左边列的元素之和\",{\"1\":{\"441\":1}}],[\"都是求和\",{\"1\":{\"387\":1}}],[\"都是局部变量\",{\"1\":{\"362\":1}}],[\"都是合法的\",{\"1\":{\"342\":1}}],[\"都是起着解释说明单行或某几行代码的作用\",{\"1\":{\"318\":1}}],[\"都是存的b+树\",{\"1\":{\"227\":1}}],[\"都是怎么存的\",{\"1\":{\"227\":1}}],[\"都是写死在c3p0的代码里\",{\"1\":{\"215\":1}}],[\"都是影响的行数\",{\"1\":{\"195\":1}}],[\"都是使用集合类\",{\"1\":{\"951\":1}}],[\"都是使用一个对应类型的value成员来存储它的基本数据类型变量的取值的\",{\"1\":{\"702\":1}}],[\"都是使用\",{\"1\":{\"195\":1}}],[\"都是启动命令等\",{\"1\":{\"144\":1}}],[\"都是放在\",{\"1\":{\"123\":1}}],[\"创建分支并切换\",{\"1\":{\"1204\":1}}],[\"创建了一个form表单如下\",{\"1\":{\"1120\":1}}],[\"创建了一个表之后\",{\"1\":{\"157\":1}}],[\"创建流\",{\"0\":{\"1034\":1}}],[\"创建出来的集合\",{\"1\":{\"953\":1}}],[\"创建是其他程序员创建好\",{\"1\":{\"936\":1}}],[\"创建自定义的类加载器对象\",{\"1\":{\"923\":1}}],[\"创建自己的输出流对象\",{\"1\":{\"905\":1}}],[\"创建自己的输入流对象\",{\"1\":{\"905\":1}}],[\"创建类的实例\",{\"1\":{\"914\":1}}],[\"创建类的对象一般需要在方法中进行\",{\"1\":{\"452\":1}}],[\"创建反序列化流对象objectinputstream\",{\"1\":{\"904\":1}}],[\"创建序列化流对象objectoutputstream\",{\"1\":{\"904\":1}}],[\"创建客户端的socket对象\",{\"1\":{\"904\":1,\"905\":1}}],[\"创建客户端socket对象\",{\"1\":{\"897\":1,\"902\":1,\"903\":1}}],[\"创建服务端socket对象\",{\"1\":{\"903\":1}}],[\"创建服务端的socket对象\",{\"1\":{\"898\":1,\"902\":1,\"904\":1,\"905\":1}}],[\"创建绑定到特定端口的服务器套接字\",{\"1\":{\"900\":1,\"902\":1}}],[\"创建用于接收的线程\",{\"1\":{\"895\":4}}],[\"创建用于接收的数据报包\",{\"1\":{\"888\":1,\"892\":1,\"894\":2,\"895\":1}}],[\"创建用于发送的线程\",{\"1\":{\"895\":4}}],[\"创建用于发送的数据报包\",{\"1\":{\"893\":1}}],[\"创建数据报套接字并将其绑定到本地主机上的指定端口\",{\"1\":{\"889\":1,\"892\":1}}],[\"创建接收端的socket对象\",{\"1\":{\"888\":1,\"892\":1,\"894\":1}}],[\"创建发送端的socket对象\",{\"1\":{\"887\":1,\"892\":1,\"894\":1}}],[\"创建定时器\",{\"1\":{\"884\":1}}],[\"创建futuretask对象\",{\"1\":{\"881\":2}}],[\"创建file对象\",{\"1\":{\"776\":2,\"777\":1}}],[\"创建线程池\",{\"1\":{\"880\":2,\"903\":1}}],[\"创建线程对象\",{\"1\":{\"840\":1,\"842\":1,\"844\":1,\"850\":3,\"881\":2}}],[\"创建b线程\",{\"1\":{\"872\":1}}],[\"创建bufferedreader对象\",{\"1\":{\"821\":1}}],[\"创建a线程\",{\"1\":{\"872\":1}}],[\"创建消费者线程\",{\"1\":{\"867\":2}}],[\"创建消费者任务\",{\"1\":{\"867\":2}}],[\"创建生产者线程\",{\"1\":{\"867\":2}}],[\"创建生产者任务\",{\"1\":{\"867\":2}}],[\"创建蒸笼对象\",{\"1\":{\"867\":2}}],[\"创建3个线程\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"创建3个teacher对象\",{\"1\":{\"456\":1}}],[\"创建子线程\",{\"1\":{\"844\":2}}],[\"创建子类自身对象才能够调用该方法\",{\"1\":{\"692\":1}}],[\"创建子类自身对象\",{\"1\":{\"536\":1,\"538\":2}}],[\"创建子类对象\",{\"1\":{\"535\":1,\"541\":1,\"549\":2,\"556\":2,\"832\":3,\"838\":1,\"850\":3}}],[\"创建2个线程a\",{\"1\":{\"872\":2}}],[\"创建2个线程\",{\"1\":{\"838\":1,\"881\":2}}],[\"创建从指定\",{\"1\":{\"824\":1}}],[\"创建写入指定\",{\"1\":{\"823\":1}}],[\"创建新\",{\"1\":{\"820\":1}}],[\"创建新的打印流\",{\"1\":{\"819\":2}}],[\"创建新的目录\",{\"1\":{\"771\":1}}],[\"创建新的\",{\"1\":{\"213\":1,\"820\":1}}],[\"创建不带自动行刷新的新\",{\"1\":{\"820\":2}}],[\"创建具有指定文件名称且不带自动行刷新的新\",{\"1\":{\"820\":1}}],[\"创建具有指定文件名称且不带自动行刷新的新打印流\",{\"1\":{\"819\":1}}],[\"创建具有指定文件且不带自动行刷新的新打印流\",{\"1\":{\"819\":1}}],[\"创建具有指定缓冲区大小的\",{\"1\":{\"795\":1}}],[\"创建使用指定字符集的\",{\"1\":{\"806\":1,\"812\":1}}],[\"创建使用默认字符编码的\",{\"1\":{\"806\":1}}],[\"创建输入流对象\",{\"1\":{\"794\":4,\"795\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":1,\"824\":1}}],[\"创建输出流对象\",{\"1\":{\"788\":2,\"789\":3,\"790\":1,\"806\":1,\"807\":1,\"808\":1,\"817\":1,\"819\":1,\"820\":1,\"824\":1,\"844\":1}}],[\"创建失败\",{\"1\":{\"771\":2}}],[\"创建功能\",{\"0\":{\"771\":1},\"1\":{\"771\":1}}],[\"创建学生对象\",{\"1\":{\"740\":1,\"741\":1,\"824\":1,\"904\":1}}],[\"创建simpledataformat对象\",{\"1\":{\"844\":1}}],[\"创建scanner对象\",{\"1\":{\"730\":1,\"894\":2,\"895\":1}}],[\"创建star类对象\",{\"1\":{\"540\":1}}],[\"创建student对象\",{\"1\":{\"471\":1}}],[\"创建value字符数组中\",{\"1\":{\"729\":2}}],[\"创建字符序列\",{\"1\":{\"729\":2}}],[\"创建字节数组所表示的字符串\",{\"1\":{\"729\":2}}],[\"创建并启动一个线程\",{\"1\":{\"859\":2,\"860\":2,\"871\":2,\"872\":2}}],[\"创建并启动2个线程\",{\"1\":{\"833\":4,\"838\":2,\"841\":3,\"866\":1,\"867\":2}}],[\"创建并打印相应的对象\",{\"1\":{\"713\":1}}],[\"创建并返回此对象的一个副本\",{\"1\":{\"658\":1}}],[\"创建好对象以后\",{\"1\":{\"627\":1,\"628\":1}}],[\"创建成员内部类对象必须持有外部类对象的引用\",{\"1\":{\"623\":1}}],[\"创建非自身的其它子类对象\",{\"1\":{\"537\":1}}],[\"创建该类的其他子类对象\",{\"1\":{\"535\":1}}],[\"创建父类对象访问不到\",{\"1\":{\"537\":1}}],[\"创建父类对象\",{\"1\":{\"535\":1,\"549\":1,\"556\":1}}],[\"创建谁的对象\",{\"1\":{\"523\":1}}],[\"创建员工对象\",{\"1\":{\"517\":1}}],[\"创建完毕后\",{\"1\":{\"502\":1}}],[\"创建properties对象\",{\"1\":{\"918\":3}}],[\"创建printer对象\",{\"1\":{\"818\":1}}],[\"创建player对象\",{\"1\":{\"474\":3}}],[\"创建person对象\",{\"1\":{\"467\":1}}],[\"创建car对象\",{\"1\":{\"459\":1}}],[\"创建1个student对象\",{\"1\":{\"456\":1}}],[\"创建\",{\"0\":{\"452\":1}}],[\"创建80个数组\",{\"1\":{\"429\":1}}],[\"创建容量为10的string数组\",{\"1\":{\"420\":1}}],[\"创建对象的方式\",{\"0\":{\"697\":1}}],[\"创建对象的模板就是类\",{\"1\":{\"446\":1}}],[\"创建对象访问即可\",{\"1\":{\"630\":1}}],[\"创建对象后作为方法的实参传入\",{\"1\":{\"641\":1}}],[\"创建对象后作为返回值\",{\"1\":{\"641\":1}}],[\"创建对象后\",{\"1\":{\"616\":1,\"617\":1,\"629\":1}}],[\"创建对象过程结束\",{\"1\":{\"546\":2}}],[\"创建对象过程中可能碰到的结构的执行顺序\",{\"1\":{\"489\":1,\"546\":1}}],[\"创建对象过程中的执行顺序\",{\"0\":{\"489\":1}}],[\"创建对象过程中\",{\"1\":{\"487\":1}}],[\"创建对象结束\",{\"1\":{\"489\":2}}],[\"创建对象是需要耗时耗费内存空间的\",{\"1\":{\"483\":1}}],[\"创建对象是jvm的事情\",{\"1\":{\"465\":1}}],[\"创建对象时给成员变量赋值\",{\"1\":{\"592\":1}}],[\"创建对象时\",{\"1\":{\"408\":1,\"466\":1}}],[\"创建对象\",{\"1\":{\"352\":1,\"460\":1,\"465\":1,\"538\":1,\"541\":1}}],[\"创建user对象并打印查询结果\",{\"1\":{\"234\":1}}],[\"创建时间\",{\"1\":{\"171\":1,\"402\":1}}],[\"创建表格的写法\",{\"1\":{\"153\":1}}],[\"创建表\",{\"0\":{\"153\":1}}],[\"创建一个流\",{\"1\":{\"1033\":1}}],[\"创建一个流套接字并将其连接到指定主机上的指定端口号\",{\"1\":{\"899\":1,\"902\":1}}],[\"创建一个迭代器\",{\"1\":{\"956\":1}}],[\"创建一个无默认值的空属性列表\",{\"1\":{\"918\":1}}],[\"创建一个使用指定大小输入缓冲区的缓冲字符输入流\",{\"1\":{\"814\":1}}],[\"创建一个使用默认大小输入缓冲区的缓冲字符输入流\",{\"1\":{\"814\":1}}],[\"创建一个使用默认大小输出缓冲区的缓冲字符输出流\",{\"1\":{\"808\":1}}],[\"创建一个使用默认字符集的\",{\"1\":{\"812\":1}}],[\"创建一个使用给定大小输出缓冲区的新缓冲字符输出流\",{\"1\":{\"808\":1}}],[\"创建一个新计时器\",{\"1\":{\"883\":1}}],[\"创建一个新的集合\",{\"1\":{\"956\":1}}],[\"创建一个新的数组\",{\"1\":{\"954\":1}}],[\"创建一个新的数据输出流\",{\"1\":{\"816\":1}}],[\"创建一个新的缓冲输出流\",{\"1\":{\"790\":2}}],[\"创建一个新数组\",{\"1\":{\"421\":1}}],[\"创建一个向具有指定\",{\"1\":{\"788\":1}}],[\"创建一个向具有指定名称的文件中写入数据的输出文件流\",{\"1\":{\"788\":1}}],[\"创建一个向指定\",{\"1\":{\"788\":2}}],[\"创建一个star类\",{\"1\":{\"540\":1}}],[\"创建一个sqlsessionfactory\",{\"1\":{\"234\":1}}],[\"创建一个person类\",{\"1\":{\"540\":1}}],[\"创建一个类student\",{\"1\":{\"491\":1}}],[\"创建一个学生类\",{\"1\":{\"478\":2}}],[\"创建一个教师类\",{\"1\":{\"463\":1}}],[\"创建一个汽车类\",{\"1\":{\"459\":1}}],[\"创建一个个对象\",{\"1\":{\"446\":1}}],[\"创建一个与java接口文件对应的mapper\",{\"1\":{\"244\":1}}],[\"创建一个java接口mapper接口文件\",{\"1\":{\"244\":1}}],[\"创建一个\",{\"1\":{\"157\":1,\"795\":1,\"817\":1,\"881\":1}}],[\"创建一个表\",{\"1\":{\"153\":1}}],[\"创建一个数据库\",{\"1\":{\"149\":1}}],[\"创建一个叫\",{\"1\":{\"149\":1}}],[\"创建库\",{\"0\":{\"149\":1}}],[\"`order`\",{\"1\":{\"283\":1}}],[\"```xml\",{\"1\":{\"274\":1}}],[\"```\",{\"1\":{\"272\":1,\"274\":1,\"276\":1}}],[\"``的位置\",{\"1\":{\"148\":1}}],[\"`address`\",{\"1\":{\"261\":1}}],[\"`age`\",{\"1\":{\"261\":1}}],[\"`mybatis\",{\"1\":{\"261\":1}}],[\"`math`\",{\"1\":{\"161\":1}}],[\"`user\",{\"1\":{\"171\":1}}],[\"`english`\",{\"1\":{\"161\":1}}],[\"`chinese`\",{\"1\":{\"161\":1}}],[\"`class`\",{\"1\":{\"161\":1}}],[\"`name`\",{\"1\":{\"161\":1,\"261\":1}}],[\"`id`\",{\"1\":{\"161\":1,\"261\":1}}],[\"`student`\",{\"1\":{\"161\":1}}],[\"`select`\",{\"1\":{\"148\":1}}],[\"`test2`\",{\"1\":{\"148\":1}}],[\"问可能问到线性表就结束了\",{\"1\":{\"947\":1}}],[\"问有没有java书\",{\"1\":{\"828\":1}}],[\"问问chatgpt\",{\"1\":{\"147\":1,\"1204\":1}}],[\"问老师\",{\"1\":{\"147\":1}}],[\"问题越往后才发现\",{\"1\":{\"938\":1}}],[\"问题是\",{\"1\":{\"595\":1}}],[\"问题分析\",{\"1\":{\"472\":1}}],[\"问题的描述\",{\"1\":{\"410\":1}}],[\"问题2\",{\"1\":{\"220\":1,\"538\":1}}],[\"问题1\",{\"1\":{\"220\":1,\"538\":1}}],[\"问题\",{\"1\":{\"142\":1,\"936\":1,\"1202\":1}}],[\"环境变量\",{\"1\":{\"307\":1}}],[\"环境变量的设置\",{\"1\":{\"144\":1}}],[\"环境的id\",{\"1\":{\"248\":1}}],[\"环境的配置\",{\"1\":{\"234\":1,\"244\":1,\"248\":1}}],[\"环境的问题\",{\"1\":{\"147\":1}}],[\"三个元素\",{\"1\":{\"955\":1}}],[\"三个对象的内存图\",{\"1\":{\"456\":1}}],[\"三次握手和四次挥手是为了在客户端和服务器之间建立和终止可靠的连接\",{\"1\":{\"908\":1}}],[\"三次握手的过程如下\",{\"1\":{\"906\":1}}],[\"三次握手是tcp连接建立过程中的一种握手协议\",{\"1\":{\"906\":1}}],[\"三次握手\",{\"0\":{\"906\":1},\"1\":{\"908\":1}}],[\"三参构造\",{\"1\":{\"545\":1}}],[\"三种\",{\"1\":{\"956\":1}}],[\"三种方式去实现自然排序\",{\"1\":{\"741\":1}}],[\"三种给成员变量赋值的方式\",{\"1\":{\"467\":1}}],[\"三种初始化方式中\",{\"1\":{\"434\":1}}],[\"三种类型\",{\"1\":{\"183\":1}}],[\"三层及以上就会让循环变得难以理解\",{\"1\":{\"367\":1}}],[\"三层可以存多少数据\",{\"1\":{\"233\":1}}],[\"三目\",{\"1\":{\"349\":1}}],[\"三目运算符取决于最大范围的double\",{\"1\":{\"707\":1}}],[\"三目运算符实际上是一种选择结构\",{\"1\":{\"350\":1}}],[\"三目运算符不符合1中的规律\",{\"1\":{\"350\":1}}],[\"三目运算符的最大特点就是\",{\"1\":{\"349\":1}}],[\"三目运算符\",{\"0\":{\"349\":1},\"1\":{\"343\":1}}],[\"三班学生成绩\",{\"1\":{\"431\":1}}],[\"三班\",{\"1\":{\"161\":6,\"278\":1}}],[\"三天不知道怎么连数据库\",{\"1\":{\"147\":1}}],[\"三方协议是指涉及三方之间的一种规定\",{\"1\":{\"107\":1}}],[\"三方协议\",{\"0\":{\"107\":1}}],[\"$2a$10$snfwiy4zib9ezx39y5aahuwgi32gc7\",{\"1\":{\"1132\":1}}],[\"$2a$10$cdvt5w1ogx7vpmvbr\",{\"1\":{\"1132\":1}}],[\"$2a$10$8isnfilcnmll0sxgcnnniuxstcwsjb\",{\"1\":{\"1132\":1}}],[\"$2a$10$ivms2c3u94iwoiu9grpm\",{\"1\":{\"1132\":1}}],[\"$2a$10$6nyttr6pchypdrn776peiumqi\",{\"1\":{\"1132\":1}}],[\"$2a$10$3wuuwjgmjrswpf7vmjynku2qas7ociwmojiozqea\",{\"1\":{\"1132\":1}}],[\"$2a$10$39xci1zfvlz\",{\"1\":{\"1132\":1}}],[\"$2a$10$fl3b9m6draj42\",{\"1\":{\"1132\":1}}],[\"$2a$10$9lzkuedw1gvcbwk03l47joetj8srzdoun74fq25gsjcxbudupxt6q\",{\"1\":{\"1132\":1}}],[\"$2a$10$1ilmyiwiiie3miw9hzpyfenjraewduzzj7u0syyl1flctw58tf5vi\",{\"1\":{\"1132\":1}}],[\"$2a$10$xz7hjbktqb0r4eftxzhzrufncjsl8tlypxrqf1rty30o6j4nfdf\",{\"1\":{\"1132\":1}}],[\"$2a$10$xdgprbo8hr1xhqf4bxxrp\",{\"1\":{\"1132\":1}}],[\"$2a$10$xiufpksecd4y7wudngleae6mdnabnusdieh4xz63v94panvvcvjsg\",{\"1\":{\"1132\":1}}],[\"$2a$10$4dgap3htggf9fijar5fsue580lglfuc8alkwbqrhiofvz\",{\"1\":{\"1132\":1}}],[\"$2a$10$eumqseiacrpfixkx9d8cc\",{\"1\":{\"1132\":1}}],[\"$2a$10$zjxzs2hqfwrwh9qbpewf6reiaboobrsdon4asayvtax3f\",{\"1\":{\"1132\":1}}],[\"$2a$10$z1dc5uxeljtoecgst5ht5un2uxydhuy\",{\"1\":{\"1132\":1}}],[\"$2a$10$2e3zidi6yu\",{\"1\":{\"1132\":1}}],[\"$2a$10$wpa0fmhqae6anwrgdtmh\",{\"1\":{\"1132\":1}}],[\"$2a$10$kairby9xjit0iqtj10fz3uuumkqlbsx0ovvhtpfhkis1ejv9vsjm2\",{\"1\":{\"1132\":1}}],[\"$values\",{\"1\":{\"719\":3}}],[\"$username\",{\"1\":{\"315\":1}}],[\"$\",{\"1\":{\"147\":2,\"248\":12,\"249\":1,\"255\":4,\"256\":4,\"315\":2,\"316\":2,\"1202\":2,\"1204\":4}}],[\"$$\",{\"1\":{\"11\":2,\"75\":2}}],[\"简历url\",{\"1\":{\"1089\":1}}],[\"简写同样需要和声明写在一起\",{\"1\":{\"434\":1}}],[\"简称java\",{\"1\":{\"1078\":1}}],[\"简称引用\",{\"1\":{\"405\":1}}],[\"简称实参\",{\"1\":{\"382\":1}}],[\"简称形参列表\",{\"1\":{\"382\":1}}],[\"简称sql\",{\"1\":{\"146\":1}}],[\"简单\",{\"1\":{\"936\":1}}],[\"简单理解就是越老的对象就具有\",{\"1\":{\"933\":1}}],[\"简单方法\",{\"1\":{\"739\":1}}],[\"简单来说异常就是用来表示java程序运行过程中的错误\",{\"1\":{\"746\":1}}],[\"简单来说\",{\"1\":{\"633\":1,\"709\":1}}],[\"简单点说\",{\"1\":{\"599\":1}}],[\"简单了解一下\",{\"1\":{\"350\":1}}],[\"简单告诉一下我它的大致作用\",{\"1\":{\"201\":1}}],[\"简要说一说运算规则\",{\"1\":{\"348\":1}}],[\"简化流不能指定字符集\",{\"1\":{\"813\":1}}],[\"简化流简单\",{\"1\":{\"813\":1}}],[\"简化流读取数据\",{\"1\":{\"813\":1}}],[\"简化操作的一种数据处理方式\",{\"1\":{\"1031\":1}}],[\"简化操作\",{\"1\":{\"247\":1}}],[\"简化开发\",{\"1\":{\"213\":1}}],[\"简化的编程模式\",{\"1\":{\"213\":1}}],[\"简易的服务器\",{\"1\":{\"128\":1}}],[\"即将跳转到登录页面重新登录\",{\"1\":{\"1159\":1}}],[\"即将查看个人信息\",{\"1\":{\"1159\":1}}],[\"即存储某个城市的天气预报\",{\"1\":{\"1026\":1}}],[\"即这种类型\",{\"1\":{\"942\":1}}],[\"即我们只能在\",{\"1\":{\"869\":1}}],[\"即对象a\",{\"1\":{\"869\":1}}],[\"即只能在同步方法或同步块中调用wait\",{\"1\":{\"868\":1}}],[\"即只能赋值一次\",{\"1\":{\"642\":1}}],[\"即输入流\",{\"1\":{\"795\":2}}],[\"即i\",{\"1\":{\"780\":1}}],[\"即sort\",{\"1\":{\"741\":1}}],[\"即sql\",{\"1\":{\"146\":1}}],[\"即所指向的地址\",{\"1\":{\"734\":1}}],[\"即date类当中的成员变量\",{\"1\":{\"722\":1}}],[\"即拆箱是自动\",{\"1\":{\"703\":1}}],[\"即装箱是自动\",{\"1\":{\"703\":1}}],[\"即希望\",{\"1\":{\"693\":1}}],[\"即equals方法的默认实现\",{\"1\":{\"672\":1}}],[\"即强转后的引用的类型必须是该对象的类型或者其父类型\",{\"1\":{\"585\":1}}],[\"即final修饰的类\",{\"1\":{\"577\":1}}],[\"即final修饰静态成员变量时\",{\"1\":{\"568\":1}}],[\"即父类的引用\",{\"1\":{\"575\":1}}],[\"即表示定义匿名内部类\",{\"1\":{\"647\":1}}],[\"即表示常量\",{\"1\":{\"568\":1}}],[\"即表示这个类不能被继承\",{\"1\":{\"566\":1}}],[\"即明确在子类构造器的第一行\",{\"1\":{\"543\":1}}],[\"即研究子类对象创建时\",{\"1\":{\"540\":1}}],[\"即不同包下子类\",{\"1\":{\"535\":1}}],[\"即不同包下非子类\",{\"1\":{\"535\":1}}],[\"即同包下子类\",{\"1\":{\"535\":1}}],[\"即同包下非子类\",{\"1\":{\"535\":1}}],[\"即当前类\",{\"1\":{\"535\":1}}],[\"即子类可以看成就是一个父类\",{\"1\":{\"523\":1}}],[\"即子类\",{\"1\":{\"523\":1}}],[\"即是\",{\"1\":{\"504\":1}}],[\"即是一行一行执行字节码的\",{\"1\":{\"403\":1}}],[\"即一个类只能有一个直接父类\",{\"1\":{\"532\":1}}],[\"即一个类的类加载过程\",{\"1\":{\"497\":1}}],[\"即一维数组的个数\",{\"1\":{\"436\":1}}],[\"即一维数组能存储元素的个数\",{\"1\":{\"434\":1}}],[\"即class对象中\",{\"1\":{\"477\":1}}],[\"即构造方法重载\",{\"1\":{\"466\":1}}],[\"即在线程的阻塞对象上\",{\"1\":{\"869\":1}}],[\"即在调用前\",{\"1\":{\"868\":1}}],[\"即在类中定义成员变量时\",{\"1\":{\"458\":1}}],[\"即在方法名相同的情况下\",{\"1\":{\"388\":1}}],[\"即行数等于列数\",{\"1\":{\"441\":1}}],[\"即某个一维数组长度\",{\"1\":{\"438\":2}}],[\"即二维数组长度\",{\"1\":{\"438\":1}}],[\"即下标为和位置的元素互换\",{\"1\":{\"419\":1}}],[\"即颠倒数组中元素的顺序\",{\"1\":{\"419\":1}}],[\"即比较对象的内存地址\",{\"1\":{\"403\":1}}],[\"即便有成员可以复用\",{\"1\":{\"594\":1}}],[\"即便是电视机本身功能再丰富\",{\"1\":{\"580\":1}}],[\"即便是父类的方法不是很完善\",{\"1\":{\"567\":1}}],[\"即便是同类型对象也可能有差异\",{\"1\":{\"447\":1}}],[\"即便是有出口的递归\",{\"1\":{\"442\":1}}],[\"即便是要使用\",{\"1\":{\"370\":1}}],[\"即便以后也不打算升级为关键字\",{\"1\":{\"313\":1}}],[\"即获得第一个扫描到的不含空格\",{\"1\":{\"353\":1}}],[\"即指的是需要三个操作数的运算符\",{\"1\":{\"349\":1}}],[\"即右移几位就表示除以几个2\",{\"1\":{\"348\":1}}],[\"即左移几位就表示乘以几个2\",{\"1\":{\"348\":1}}],[\"即1100\",{\"1\":{\"348\":1}}],[\"即1位存储一个0或者1\",{\"1\":{\"321\":1}}],[\"即0变成1\",{\"1\":{\"348\":1}}],[\"即0000\",{\"1\":{\"348\":1}}],[\"即数学当中的除法\",{\"1\":{\"344\":1}}],[\"即需要表达式的结果\",{\"1\":{\"342\":1}}],[\"即java中的char类型能够表示编码值在范围内的的所有字符\",{\"1\":{\"324\":1}}],[\"即javadoc规范\",{\"1\":{\"318\":1}}],[\"即单精度的浮点数\",{\"1\":{\"323\":1}}],[\"即64位\",{\"1\":{\"322\":1}}],[\"即32位\",{\"1\":{\"322\":1}}],[\"即8位\",{\"1\":{\"322\":1}}],[\"即\",{\"1\":{\"308\":1,\"323\":1,\"345\":1,\"348\":3,\"370\":1,\"396\":1,\"419\":1,\"420\":1,\"544\":1,\"950\":1,\"957\":1}}],[\"即使是不同的servlet\",{\"1\":{\"1152\":1}}],[\"即使某个下标位置\",{\"1\":{\"1012\":1}}],[\"即使你没有显式地声明这个继承关系\",{\"1\":{\"924\":1}}],[\"即使你再去改\",{\"1\":{\"157\":1}}],[\"即使用快捷键alt\",{\"1\":{\"683\":1}}],[\"即使有这种操作\",{\"1\":{\"150\":1}}],[\"即latin1\",{\"1\":{\"157\":1}}],[\"即通过客户端和服务器发起网络交互的数据请求\",{\"1\":{\"145\":1}}],[\"即通过浏览器和服务器发起网络交互的数据请求\",{\"1\":{\"145\":1}}],[\"即可得到结果\",{\"1\":{\"308\":1}}],[\"即可\",{\"1\":{\"132\":1,\"252\":1,\"307\":1,\"308\":1,\"1092\":1}}],[\"即可以向此元素进行放大\",{\"1\":{\"40\":1}}],[\"即可在幻灯片获得焦点时进入全屏模式\",{\"1\":{\"38\":1}}],[\"即可在幻灯片获得焦点时进入预览模式\",{\"1\":{\"36\":1}}],[\"添加键值对\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"添加进去的顺序\",{\"1\":{\"993\":1}}],[\"添加到新集合\",{\"1\":{\"956\":1}}],[\"添加到c2\",{\"1\":{\"953\":1}}],[\"添加方法\",{\"1\":{\"953\":1}}],[\"添加一个collection进指定的collection\",{\"1\":{\"981\":1}}],[\"添加一个collection进目标collection\",{\"1\":{\"953\":2}}],[\"添加一个元素到队尾\",{\"1\":{\"975\":1}}],[\"添加一个元素进入collection\",{\"1\":{\"953\":2,\"981\":1}}],[\"添加一个数据到当前遍历位置\",{\"1\":{\"959\":1}}],[\"添加一个学生\",{\"1\":{\"950\":1}}],[\"添加一个局部变量speed\",{\"1\":{\"459\":1}}],[\"添加功能\",{\"1\":{\"743\":2}}],[\"添加注解\",{\"1\":{\"271\":1}}],[\"添加指定的字符\",{\"1\":{\"271\":2}}],[\"添加日志的配置\",{\"1\":{\"246\":1}}],[\"添加\",{\"0\":{\"237\":1},\"1\":{\"235\":1,\"244\":1,\"1203\":1}}],[\"添加索引\",{\"1\":{\"232\":1}}],[\"添加数据的效率\",{\"1\":{\"1006\":1}}],[\"添加数据\",{\"0\":{\"158\":1}}],[\"添加列\",{\"1\":{\"156\":1}}],[\"添加path时候\",{\"1\":{\"144\":1}}],[\"添加语句\",{\"1\":{\"139\":1}}],[\"秒杀的接口\",{\"1\":{\"144\":1}}],[\"而我们希望的是客户端请求的时候携带cookie\",{\"1\":{\"1142\":1}}],[\"而我们处理业务的核心方法就是\",{\"1\":{\"1085\":1}}],[\"而servletcontext是所有的servlet共享的\",{\"1\":{\"1095\":1}}],[\"而servlet提供的是动态资源的访问\",{\"1\":{\"1078\":1}}],[\"而时间通常指某个东西从初始化到结束在整个阶段中会遇到的一些时间点\",{\"1\":{\"1093\":1}}],[\"而打包\",{\"1\":{\"1081\":1}}],[\"而服务器处理逻辑和数据处理\",{\"1\":{\"1077\":1}}],[\"而hash算法的结果\",{\"1\":{\"1000\":1}}],[\"而只是抛出一个异常\",{\"1\":{\"972\":1}}],[\"而本地方法栈则是为虚拟机使用到的native\",{\"1\":{\"925\":1}}],[\"而本节中的匿名内部类和lambda表达式都是直接通过语法创建了对象\",{\"1\":{\"645\":1}}],[\"而notify\",{\"1\":{\"868\":1}}],[\"而处于阻塞状态时\",{\"1\":{\"869\":1}}],[\"而处于阻塞状态\",{\"1\":{\"869\":1}}],[\"而处于阻塞状\",{\"1\":{\"868\":1}}],[\"而使用同一引用\",{\"1\":{\"731\":1}}],[\"而到了java\",{\"1\":{\"721\":1}}],[\"而枚举类型当中定义的常量都是该类型的全局常量对象\",{\"1\":{\"719\":1}}],[\"而基本数据类型没有这个烦恼\",{\"1\":{\"708\":1}}],[\"而同一个对象\",{\"1\":{\"681\":1}}],[\"而通过哈希算法\",{\"1\":{\"679\":1,\"999\":1}}],[\"而出现的错误\",{\"1\":{\"675\":1}}],[\"而像继承父子关系\",{\"1\":{\"663\":1}}],[\"而像c++当中\",{\"1\":{\"532\":1}}],[\"而以后到了公司中\",{\"1\":{\"658\":1}}],[\"而lambda表达式\",{\"1\":{\"654\":1}}],[\"而直接写lambda表达式语言\",{\"1\":{\"653\":1}}],[\"而类的匿名内部类lambda表达式是不能取代的\",{\"1\":{\"651\":1}}],[\"而你又不希望外界知道这个类时\",{\"1\":{\"632\":1}}],[\"而静态内部类和外部类的关系是\",{\"1\":{\"623\":1}}],[\"而恰好成员方法中隐含自身对象\",{\"1\":{\"616\":1}}],[\"而现在有了默认方法\",{\"1\":{\"600\":1}}],[\"而现在的数据是\",{\"1\":{\"188\":1}}],[\"而实现的根本原因是需要定义一个标准\",{\"1\":{\"599\":1}}],[\"而实际上\",{\"1\":{\"431\":1,\"658\":1}}],[\"而特殊的猫狗仍然是猫和狗\",{\"1\":{\"595\":1}}],[\"而祖先类则更具有一般性和抽象性\",{\"1\":{\"591\":1}}],[\"而一旦你必须在这时候访问子类独有成员的话\",{\"1\":{\"583\":1}}],[\"而继承提高了代码复用率\",{\"1\":{\"582\":1}}],[\"而写顶层祖先类\",{\"1\":{\"581\":1}}],[\"而真正意义上的常量\",{\"1\":{\"570\":1}}],[\"而想要复用类的成员\",{\"1\":{\"519\":1}}],[\"而这种语言层面的访问权限控制\",{\"1\":{\"505\":1}}],[\"而这片空间\",{\"1\":{\"403\":1}}],[\"而应该使用\",{\"1\":{\"474\":1}}],[\"而被创建\",{\"1\":{\"457\":1}}],[\"而后再写成员方法\",{\"1\":{\"454\":1}}],[\"而具体默认值是什么\",{\"1\":{\"453\":1}}],[\"而对称性\",{\"1\":{\"674\":1}}],[\"而对象是具体的\",{\"1\":{\"447\":1}}],[\"而对于我们java后端开发来讲\",{\"1\":{\"144\":1}}],[\"而递归会调用多个方法\",{\"1\":{\"442\":1}}],[\"而格式二直接使用会空指针异常\",{\"1\":{\"434\":1}}],[\"而又有无返回数据的需求\",{\"1\":{\"413\":1}}],[\"而jsp是一种特殊的servlet\",{\"1\":{\"1121\":1}}],[\"而javaee在此基础上提供了更多面向企业级应用的功能和组件\",{\"1\":{\"1077\":1}}],[\"而java语言当中所使用的时间戳主要是指unix时间戳\",{\"1\":{\"722\":1}}],[\"而java语句几乎都写在一个方法当中\",{\"1\":{\"378\":1}}],[\"而jvm栈用来表示方法的执行流程\",{\"1\":{\"403\":1}}],[\"而几乎所以java规范中都禁止使用格式二定义数组\",{\"1\":{\"395\":1}}],[\"而数组的随机访问实现方式是\",{\"1\":{\"394\":1}}],[\"而它两合起来就称之为\",{\"1\":{\"389\":1}}],[\"而方法的实参才是一个真正的参数\",{\"1\":{\"382\":1}}],[\"而循环一般也都在一个方法当中\",{\"1\":{\"378\":1}}],[\"而如果你需要开发企业级的应用程序\",{\"1\":{\"1077\":1}}],[\"而如果出现哈希冲突\",{\"1\":{\"680\":1}}],[\"而如果本类中重写了该方法\",{\"1\":{\"668\":1}}],[\"而如果是下列代码\",{\"1\":{\"553\":1}}],[\"而如果是针对离散值的判断\",{\"1\":{\"360\":1}}],[\"而如果想要test方法的调用结果体现为anotherpackage包下的student类\",{\"1\":{\"502\":1}}],[\"而如果去掉方法1\",{\"1\":{\"389\":1}}],[\"而如果用一张表格来存储字符和编码值的映射关系\",{\"1\":{\"324\":1}}],[\"而结束扫描\",{\"1\":{\"353\":1}}],[\"而结构改变是需要消耗时间的\",{\"1\":{\"233\":1}}],[\"而言\",{\"1\":{\"342\":1}}],[\"而是扩容\",{\"1\":{\"1012\":1}}],[\"而是因为注解本身就是一种特殊的接口\",{\"1\":{\"924\":1}}],[\"而是要使用\",{\"1\":{\"708\":1}}],[\"而是我们重写后的执行结果\",{\"1\":{\"668\":1}}],[\"而是我们自定义的数据类型\",{\"1\":{\"456\":1}}],[\"而是一个对象\",{\"1\":{\"651\":1}}],[\"而是取代接口的匿名内部类\",{\"1\":{\"651\":1}}],[\"而是取余\",{\"1\":{\"344\":1}}],[\"而是将它放入computer类的类体中\",{\"1\":{\"607\":1}}],[\"而是使用一个链表来存储元素\",{\"1\":{\"965\":1}}],[\"而是使用\",{\"1\":{\"596\":1}}],[\"而是实参一旦传入后就无法在方法体中修改了\",{\"1\":{\"569\":1}}],[\"而是根据\",{\"1\":{\"558\":1}}],[\"而是互相独立的两个静态成员变量\",{\"1\":{\"553\":1}}],[\"而是依赖于类\",{\"1\":{\"474\":1}}],[\"而是\",{\"1\":{\"407\":1,\"468\":2,\"488\":1,\"489\":1,\"658\":1}}],[\"而是通过栈上的引用间接访问堆上的对象\",{\"1\":{\"540\":1}}],[\"而是通过栈上的引用间接访问\",{\"1\":{\"405\":1}}],[\"而是采取一种更加灵活的方式去间接使用数组\",{\"1\":{\"394\":1}}],[\"而是跳出当前层的当前次循环\",{\"1\":{\"377\":1}}],[\"而是直接是一个新的静态成员\",{\"1\":{\"562\":1}}],[\"而是直接遍历元素\",{\"1\":{\"417\":1}}],[\"而是直接使用下面的方式\",{\"1\":{\"416\":1}}],[\"而是直接结束键盘录入\",{\"1\":{\"353\":1}}],[\"而是直接列为位运算符\",{\"1\":{\"347\":1}}],[\"而是直接运行在桌面操作系统上的应用\",{\"1\":{\"303\":1}}],[\"而是需要分工协作的\",{\"1\":{\"505\":1}}],[\"而是需要gc通过一系列的算法来决定它是否被回收\",{\"1\":{\"407\":1}}],[\"而是需要程序员手动写代码完成类型转换\",{\"1\":{\"339\":1}}],[\"而是需要一定的条件\",{\"1\":{\"337\":1}}],[\"而是每当线程需要时创建一个新的连接\",{\"1\":{\"213\":1}}],[\"而在init方法中有给这个成员变量做赋值\",{\"1\":{\"1094\":1}}],[\"而在我们使用的时候是无法感知这个问题的\",{\"1\":{\"247\":1}}],[\"而在关系型和非关系型数据中\",{\"1\":{\"144\":1}}],[\"而mybatis的动态代理可以帮助我们去生成接口的代理对象\",{\"1\":{\"235\":2}}],[\"而\",{\"1\":{\"231\":1,\"303\":1,\"342\":1,\"384\":1}}],[\"而不会影响彼此之间的工作\",{\"1\":{\"1204\":1}}],[\"而不会被滥用\",{\"1\":{\"537\":1}}],[\"而不必针对每次字节写入调用底层系统\",{\"1\":{\"790\":1}}],[\"而不必扫描整个数据表\",{\"1\":{\"218\":1}}],[\"而不能继承成员内部类\",{\"1\":{\"624\":1}}],[\"而不能创建对象实例\",{\"1\":{\"591\":1}}],[\"而不能有两个或更多的设计\",{\"1\":{\"532\":1}}],[\"而不能是别的类型变量\",{\"1\":{\"320\":1}}],[\"而不需要重复写代码\",{\"1\":{\"380\":1}}],[\"而不是将集合转换为数组\",{\"1\":{\"954\":1}}],[\"而不是写入文件开始处\",{\"1\":{\"788\":1}}],[\"而不是写死的where关键字\",{\"1\":{\"264\":1}}],[\"而不是null\",{\"1\":{\"776\":2}}],[\"而不是自己书写实现\",{\"1\":{\"654\":1}}],[\"而不是属于外部类的某个对象\",{\"1\":{\"620\":1}}],[\"而不是没有导入\",{\"1\":{\"503\":1}}],[\"而不是静态方法\",{\"1\":{\"494\":1}}],[\"而不是独属于某个对象的\",{\"1\":{\"478\":1}}],[\"而不是变量的地址\",{\"1\":{\"425\":1}}],[\"而不是普通方法\",{\"1\":{\"403\":1}}],[\"而不是if\",{\"1\":{\"349\":1}}],[\"而不是文件名\",{\"1\":{\"308\":1}}],[\"而不是studentinfo\",{\"1\":{\"149\":1}}],[\"而preparedstatement要通信两次\",{\"1\":{\"204\":1}}],[\"而另一个表中的每条记录也可以对应另一个表中的多条记录\",{\"1\":{\"174\":1}}],[\"而另一个表中的每条记录只能对应一个表中的记录\",{\"1\":{\"173\":1}}],[\"而表b中的一条数据\",{\"1\":{\"173\":1,\"174\":1}}],[\"而unique可以为空\",{\"1\":{\"170\":1}}],[\"而非关系型数据库是指存储数据的时候数据和数据之间没有什么特定关系\",{\"1\":{\"144\":1}}],[\"而且使用完后\",{\"1\":{\"954\":1}}],[\"而且注解体的定义也非常类似于接口中的抽象方法\",{\"1\":{\"924\":1}}],[\"而且字符串使用的非常多\",{\"1\":{\"731\":1}}],[\"而且字母必须全部小写\",{\"1\":{\"311\":1}}],[\"而且重写的依据必须是一样的\",{\"1\":{\"682\":1}}],[\"而且可以用在普通类中\",{\"1\":{\"687\":1}}],[\"而且可以选择在实现排它性时的方式\",{\"1\":{\"675\":1}}],[\"而且可以实现多个接口\",{\"1\":{\"596\":1}}],[\"而且最后一句话\",{\"1\":{\"666\":1}}],[\"而且这个字符串要简洁明了\",{\"1\":{\"666\":1}}],[\"而且这个值一旦给出就不可更改了\",{\"1\":{\"570\":1}}],[\"而且\",{\"1\":{\"653\":1}}],[\"而且局部内部类的注意事项\",{\"1\":{\"651\":1}}],[\"而且public是隐含的修改不了\",{\"1\":{\"598\":1}}],[\"而且对于一个抽象的概念\",{\"1\":{\"590\":1}}],[\"而且失败后果很严重\",{\"1\":{\"586\":1}}],[\"而且很明显\",{\"1\":{\"583\":1}}],[\"而且也必须\",{\"1\":{\"570\":1}}],[\"而且也有下标\",{\"1\":{\"394\":1}}],[\"而且给它最大的控制权限吧\",{\"1\":{\"537\":1}}],[\"而且必须是\",{\"1\":{\"536\":1}}],[\"而且都要写在一起\",{\"1\":{\"469\":1}}],[\"而且java开发之初就是为了简化c++的\",{\"1\":{\"395\":1}}],[\"而且由于静态内部类的独立性很强\",{\"1\":{\"624\":1}}],[\"而且由于数组的长度不可变\",{\"1\":{\"394\":1}}],[\"而且由于char类型的编码值范围是\",{\"1\":{\"338\":1}}],[\"而且是一种引用数据类型变量\",{\"1\":{\"393\":1}}],[\"而且不是任意两个引用数据类型变量都能够比较\",{\"1\":{\"346\":1}}],[\"而且整型数据值的位数十分容易判断\",{\"1\":{\"342\":1}}],[\"而且为了应对原始类型的命名重复\",{\"1\":{\"247\":1}}],[\"而且事务默认情况下是不会自动提交的\",{\"1\":{\"241\":1}}],[\"而且你不是特别在意这些磁盘空间\",{\"1\":{\"178\":1}}],[\"而且列的值的顺序和\",{\"1\":{\"158\":1}}],[\"而且界面友好\",{\"1\":{\"143\":1}}],[\"而且数据量太大的情况下\",{\"1\":{\"141\":1}}],[\"钱的总金额是前后一致的\",{\"1\":{\"210\":1}}],[\"钱无所谓\",{\"1\":{\"144\":1}}],[\"钱少\",{\"1\":{\"144\":1}}],[\"能\",{\"1\":{\"1202\":1}}],[\"能构造文件上传的请求\",{\"1\":{\"1103\":1}}],[\"能让编译器在编译的时候借助传入的类型参数\",{\"1\":{\"938\":1}}],[\"能访问到该局部内部类\",{\"1\":{\"638\":1}}],[\"能被多实现\",{\"1\":{\"606\":1}}],[\"能否进行\",{\"1\":{\"619\":1,\"632\":1}}],[\"能否定义方法\",{\"1\":{\"598\":1}}],[\"能否定义属性\",{\"1\":{\"598\":1}}],[\"能否访问\",{\"1\":{\"535\":1}}],[\"能否用数据类型的概念来统一基本数据类型和引用数据类型呢\",{\"1\":{\"455\":1}}],[\"能不能指定文件reset呢\",{\"1\":{\"1202\":1}}],[\"能不能指定文件去\",{\"1\":{\"1196\":1}}],[\"能不能使用stack这个类\",{\"1\":{\"970\":1}}],[\"能不能使用extends关键字同时继承多个类呢\",{\"1\":{\"532\":1}}],[\"能不能用基础类型\",{\"1\":{\"941\":1}}],[\"能不能简化呢\",{\"1\":{\"654\":1}}],[\"能不能定义多个泛型\",{\"1\":{\"941\":1}}],[\"能不能定义方法\",{\"1\":{\"598\":1}}],[\"能不能定义属性\",{\"1\":{\"598\":1}}],[\"能不能继承父类的静态成员呢\",{\"1\":{\"539\":1}}],[\"能不能继承父类的构造器呢\",{\"1\":{\"539\":1}}],[\"能不能继承父类的私有成员呢\",{\"1\":{\"539\":1}}],[\"能不能\",{\"1\":{\"463\":1}}],[\"能不能让它们拥有相同的方法名呢\",{\"1\":{\"387\":1}}],[\"能复用代码\",{\"1\":{\"380\":1}}],[\"能够获取自定义session的方法\",{\"1\":{\"1159\":1}}],[\"能够分析session的失效原因\",{\"1\":{\"1136\":1}}],[\"能够通过浏览器查看cookie信息\",{\"1\":{\"1136\":1}}],[\"能够通过类名去访问\",{\"1\":{\"715\":1}}],[\"能够判断\",{\"1\":{\"1112\":1}}],[\"能够自动刷新\",{\"1\":{\"820\":1}}],[\"能够自定义自己的成员\",{\"1\":{\"656\":1}}],[\"能够用代码进行处理\",{\"1\":{\"747\":1}}],[\"能够用来描述这个对象\",{\"1\":{\"666\":1}}],[\"能够作为方法引用指向的功能接口中抽象方法的实现\",{\"1\":{\"655\":2}}],[\"能够直立行走了\",{\"1\":{\"595\":1}}],[\"能够直接访问类中的成员变量和成员方法吗\",{\"1\":{\"453\":1}}],[\"能够检测语法\",{\"1\":{\"560\":1}}],[\"能够改写父类成员方法的内容\",{\"1\":{\"560\":1}}],[\"能够在类加载过程中自动被调用\",{\"1\":{\"494\":1}}],[\"能够加深我们对java中的很多现象的理解\",{\"1\":{\"402\":1}}],[\"能够得到不同的结果\",{\"1\":{\"380\":1}}],[\"能够重复实现某种特定功能\",{\"1\":{\"380\":1}}],[\"能够让我们直接设置cookie\",{\"1\":{\"1142\":1}}],[\"能够让接手自己代码的人\",{\"1\":{\"319\":1}}],[\"能够让自己在写完这段代码较长时间后\",{\"1\":{\"319\":1}}],[\"能够影响编译\",{\"1\":{\"311\":1}}],[\"能够脱机使用的应用程序不是web应用\",{\"1\":{\"303\":1}}],[\"能够限制数据的增加\",{\"1\":{\"171\":1}}],[\"能走到索引\",{\"1\":{\"233\":1}}],[\"能改更好\",{\"1\":{\"212\":2}}],[\"能吃辣\",{\"1\":{\"160\":2}}],[\"能用哪些修饰符\",{\"1\":{\"592\":1}}],[\"能用自己的话讲出来\",{\"1\":{\"189\":1}}],[\"能用\",{\"1\":{\"144\":1}}],[\"能写就写\",{\"1\":{\"127\":1}}],[\"企业要求\",{\"1\":{\"144\":1}}],[\"列表中的异常不要出现父子关系\",{\"1\":{\"756\":1}}],[\"列表默认为\",{\"1\":{\"9\":1}}],[\"列入逻辑运算符中\",{\"1\":{\"347\":1}}],[\"列举一下其他的数据结构\",{\"1\":{\"233\":1}}],[\"列的类型\",{\"1\":{\"222\":1}}],[\"列的字符集已经固定下来了\",{\"1\":{\"157\":1}}],[\"列约束\",{\"1\":{\"169\":1}}],[\"列\",{\"1\":{\"168\":2,\"171\":2}}],[\"列3\",{\"1\":{\"158\":1}}],[\"列2\",{\"1\":{\"158\":1}}],[\"列1\",{\"1\":{\"158\":1}}],[\"列是latin1\",{\"1\":{\"157\":1}}],[\"列类型叫int\",{\"1\":{\"153\":1}}],[\"列名2\",{\"1\":{\"232\":1}}],[\"列名1\",{\"1\":{\"232\":1}}],[\"列名\",{\"1\":{\"158\":1,\"171\":2,\"232\":1,\"267\":1,\"279\":1}}],[\"列名叫id\",{\"1\":{\"153\":1}}],[\"列名均不区分大小写\",{\"1\":{\"149\":2}}],[\"列式数据库\",{\"1\":{\"144\":1}}],[\"新写代码不使用hashtable\",{\"1\":{\"1020\":1}}],[\"新位置\",{\"1\":{\"1014\":1}}],[\"新数组的容量\",{\"1\":{\"1013\":1}}],[\"新学期\",{\"1\":{\"950\":1}}],[\"新加的锁\",{\"1\":{\"867\":1}}],[\"新的方式\",{\"1\":{\"794\":1}}],[\"新增key\",{\"1\":{\"1026\":1}}],[\"新增\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"新增商品时\",{\"1\":{\"601\":1}}],[\"新增了很多下标的操作\",{\"1\":{\"956\":1}}],[\"新增了两种具有方法体的实现方法\",{\"1\":{\"600\":1}}],[\"新增了一种鸭子\",{\"1\":{\"530\":1}}],[\"新增数据\",{\"1\":{\"420\":1}}],[\"新增数据的sql\",{\"1\":{\"201\":1}}],[\"新增的行数\",{\"1\":{\"194\":1}}],[\"新项目无使用它的\",{\"1\":{\"144\":1}}],[\"新建5条订单放入\",{\"1\":{\"956\":1}}],[\"新建\",{\"1\":{\"846\":1}}],[\"新建一个collection\",{\"1\":{\"953\":1}}],[\"新建一个\",{\"1\":{\"308\":1}}],[\"新建一个配置文件\",{\"1\":{\"215\":1}}],[\"新建一个xml文件\",{\"1\":{\"136\":1}}],[\"新建项目\",{\"1\":{\"192\":1}}],[\"新建了\",{\"1\":{\"139\":1}}],[\"完整的路径名\",{\"1\":{\"767\":1}}],[\"完整性\",{\"1\":{\"143\":1}}],[\"完整性校验\",{\"1\":{\"125\":1}}],[\"完全一致或者完全相反\",{\"1\":{\"957\":1}}],[\"完全独立的新对象\",{\"1\":{\"693\":1}}],[\"完全可能不同\",{\"1\":{\"570\":1}}],[\"完全有可能没有对象\",{\"1\":{\"475\":1}}],[\"完全不需要被外界知道的属性\",{\"1\":{\"516\":1}}],[\"完全不需要创建对象使用\",{\"1\":{\"474\":1}}],[\"完全不需要自己手写实现\",{\"1\":{\"416\":1}}],[\"完全不可能等于null的引用\",{\"1\":{\"412\":1}}],[\"完全不建议\",{\"1\":{\"254\":1}}],[\"完成这个事情\",{\"1\":{\"968\":1}}],[\"完成scanner的nextline\",{\"1\":{\"821\":2}}],[\"完成以上三步\",{\"1\":{\"694\":1}}],[\"完成以下案例\",{\"1\":{\"469\":1}}],[\"完成以下练习题\",{\"1\":{\"386\":1}}],[\"完成函数式编程\",{\"1\":{\"600\":1}}],[\"完成强转条件是很苛刻的\",{\"1\":{\"587\":1}}],[\"完成如下练习\",{\"1\":{\"519\":1}}],[\"完成准备\",{\"1\":{\"476\":1}}],[\"完成对象初始化\",{\"1\":{\"467\":1}}],[\"完成对对象的初始化\",{\"1\":{\"465\":1}}],[\"完成成员变量的赋值操作\",{\"1\":{\"465\":2}}],[\"完成动态初始化\",{\"1\":{\"441\":1}}],[\"完成需求\",{\"1\":{\"375\":1}}],[\"完美的文档和简洁易懂的源码广受好评\",{\"1\":{\"144\":1}}],[\"诞生以来\",{\"1\":{\"144\":1}}],[\"常规read\",{\"1\":{\"814\":1}}],[\"常规的做法是创建对象\",{\"1\":{\"481\":1}}],[\"常量的命名\",{\"1\":{\"1019\":1}}],[\"常量的分类\",{\"1\":{\"568\":1}}],[\"常量对象需要写在枚举体的首位\",{\"1\":{\"717\":1}}],[\"常量对象\",{\"1\":{\"717\":1}}],[\"常量进行运算的运算符\",{\"1\":{\"347\":1}}],[\"常量无法用自增自减运算符连接\",{\"1\":{\"344\":1}}],[\"常量主要分为两类\",{\"1\":{\"328\":1}}],[\"常量有哪些分类\",{\"1\":{\"328\":1}}],[\"常量\",{\"0\":{\"328\":1},\"1\":{\"570\":3,\"571\":1,\"606\":2,\"925\":1,\"941\":1,\"1028\":1}}],[\"常量名所有字母都大写\",{\"1\":{\"316\":1}}],[\"常见\",{\"1\":{\"1034\":1}}],[\"常见异常\",{\"0\":{\"748\":1},\"1\":{\"748\":1,\"905\":1}}],[\"常见问题\",{\"0\":{\"744\":1,\"1154\":1},\"1\":{\"925\":1,\"1205\":1}}],[\"常见用于比较网址url\",{\"1\":{\"736\":1}}],[\"常见用途\",{\"1\":{\"481\":1}}],[\"常见和常用的有以下三种方式\",{\"1\":{\"653\":1}}],[\"常见关键字\",{\"0\":{\"312\":1}}],[\"常见的四种数据结构\",{\"1\":{\"947\":1}}],[\"常见的传输协议是tcp和udp\",{\"1\":{\"885\":1}}],[\"常见的做法就是采用链表将它们挂在数组下面\",{\"1\":{\"680\":1}}],[\"常见的叫法称之为接口的实现\",{\"1\":{\"596\":1}}],[\"常见的final修饰的类\",{\"1\":{\"566\":1}}],[\"常见的\",{\"1\":{\"412\":1}}],[\"常见的转义字符\",{\"0\":{\"356\":1}}],[\"常见的数据结构\",{\"1\":{\"220\":1}}],[\"常见的池化技术包括连接池\",{\"1\":{\"213\":1}}],[\"常见的非关系型数据库\",{\"1\":{\"144\":1}}],[\"常见的启动故障\",{\"1\":{\"131\":1}}],[\"常见的请求方法\",{\"1\":{\"115\":1}}],[\"常用元注解\",{\"1\":{\"924\":1}}],[\"常用匿名内部类来做实现\",{\"1\":{\"777\":1}}],[\"常用于确定文件后缀名格式\",{\"1\":{\"736\":1}}],[\"常用\",{\"1\":{\"252\":1}}],[\"常用的索引类型包括主键索引\",{\"1\":{\"218\":1}}],[\"常用版本包括\",{\"1\":{\"144\":1}}],[\"吞吐量高\",{\"1\":{\"144\":1}}],[\"后悔药\",{\"0\":{\"1202\":1}}],[\"后push的人要处理\",{\"1\":{\"1201\":1}}],[\"后者可能无法插入元素\",{\"1\":{\"972\":1}}],[\"后方的地址都可以算出来\",{\"1\":{\"948\":1}}],[\"后方可以使用数字代替\",{\"1\":{\"167\":1}}],[\"后\",{\"1\":{\"907\":1}}],[\"后出现的字符串大\",{\"1\":{\"739\":1}}],[\"后端将该商品删除后\",{\"1\":{\"601\":1}}],[\"后端根据商品id找到该商品\",{\"1\":{\"601\":1}}],[\"后端根据信息查询商品详情\",{\"1\":{\"601\":1}}],[\"后端需要校验id唯一性\",{\"1\":{\"601\":1}}],[\"后端工程\",{\"1\":{\"212\":1}}],[\"后来\",{\"1\":{\"530\":1}}],[\"后来随着智能手机的普及\",{\"1\":{\"303\":1}}],[\"后执行结构的结果\",{\"1\":{\"494\":1}}],[\"后执行结构的结构\",{\"1\":{\"487\":1}}],[\"后有空格\",{\"1\":{\"422\":1}}],[\"后缀\",{\"1\":{\"350\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"211\":1}}],[\"后的字段\",{\"1\":{\"167\":1}}],[\"后的结果进行过滤\",{\"1\":{\"167\":1}}],[\"后面做项目的时候会给大家一个参考\",{\"1\":{\"1159\":1}}],[\"后面发送请求\",{\"1\":{\"1146\":1}}],[\"后面省略了很多很多内容\",{\"1\":{\"1120\":1}}],[\"后面通常会跟charset\",{\"1\":{\"1105\":1}}],[\"后面通过map传值和按照位置来传值\",{\"1\":{\"254\":1}}],[\"后面springmvc就是在此基础上做了设计的\",{\"1\":{\"1092\":1}}],[\"后面位置\",{\"1\":{\"1008\":1}}],[\"后面叫使用\",{\"1\":{\"940\":1}}],[\"后面直接写\",{\"1\":{\"939\":1}}],[\"后面异常的章节会讲解\",{\"1\":{\"692\":1}}],[\"后面在数据结构章节中\",{\"1\":{\"680\":1}}],[\"后面的参数传给该成员方法作为参数\",{\"1\":{\"655\":1}}],[\"后面学习的\",{\"1\":{\"642\":1}}],[\"后面多线程再学习\",{\"1\":{\"484\":1}}],[\"后面跟的是一个16进制的数\",{\"1\":{\"400\":1}}],[\"后面就都不算了\",{\"1\":{\"347\":1}}],[\"后面就只能通过\",{\"1\":{\"250\":1}}],[\"后面也都是0\",{\"1\":{\"323\":1}}],[\"后面是id值\",{\"1\":{\"261\":1}}],[\"后面再进行标准化\",{\"1\":{\"234\":1}}],[\"后面会单独重点讲解\",{\"0\":{\"1082\":1}}],[\"后面会详细讲解\",{\"1\":{\"538\":1}}],[\"后面会讲lambda表达式\",{\"1\":{\"600\":1}}],[\"后面会讲\",{\"1\":{\"537\":1,\"687\":1}}],[\"后面会专门讲where的用法\",{\"1\":{\"159\":1}}],[\"后面会学\",{\"1\":{\"144\":1}}],[\"后面必须跟空格\",{\"1\":{\"152\":1}}],[\"后续去讲生命周期的时候\",{\"1\":{\"1093\":1}}],[\"后续使用完毕\",{\"1\":{\"954\":1}}],[\"后续使用还需要基于内部类创建对象\",{\"1\":{\"645\":1}}],[\"后续做项目\",{\"1\":{\"712\":1}}],[\"后续假如再次调用了到了同样的查询\",{\"1\":{\"283\":1}}],[\"后续出现了一些bug\",{\"1\":{\"214\":1}}],[\"后续输入的字符串\",{\"1\":{\"204\":1}}],[\"后续\",{\"1\":{\"128\":1,\"230\":1,\"247\":1}}],[\"q4\",{\"1\":{\"1132\":1}}],[\"qianqian\",{\"1\":{\"1132\":2}}],[\"q\\u001c\",{\"1\":{\"1120\":1}}],[\"q3\",{\"1\":{\"707\":1}}],[\"q2\",{\"1\":{\"707\":1,\"948\":1}}],[\"q1\",{\"1\":{\"707\":1,\"948\":1}}],[\"q\",{\"1\":{\"309\":1}}],[\"quality=90\",{\"1\":{\"1132\":20}}],[\"queue是collection的子接口\",{\"1\":{\"971\":1}}],[\"queue\",{\"1\":{\"965\":1,\"970\":3}}],[\"querybycourseid\",{\"1\":{\"282\":2}}],[\"querybychoosewhenotherwise\",{\"1\":{\"266\":2}}],[\"queryphonebyidlist\",{\"1\":{\"272\":3}}],[\"queryphonebyid\",{\"1\":{\"267\":2}}],[\"queryphonebymemory\",{\"1\":{\"265\":1}}],[\"queryphonebybrandordisk\",{\"1\":{\"264\":1}}],[\"queryphone\",{\"1\":{\"265\":4}}],[\"querystring的值\",{\"1\":{\"1132\":2}}],[\"querystring\",{\"1\":{\"1111\":1}}],[\"querystudentbyprimarykey\",{\"1\":{\"285\":8,\"287\":3}}],[\"querystudentlistbyclassid\",{\"1\":{\"279\":2}}],[\"querystudentusealias2\",{\"1\":{\"261\":1}}],[\"querystudentusealias1\",{\"1\":{\"261\":1}}],[\"querysql\",{\"1\":{\"201\":1}}],[\"queryallcourses1\",{\"1\":{\"282\":2}}],[\"queryallcourses2\",{\"1\":{\"282\":1,\"283\":3}}],[\"queryallclazz2\",{\"1\":{\"280\":3}}],[\"queryallclazz\",{\"1\":{\"279\":3}}],[\"queryalluser2\",{\"1\":{\"277\":3}}],[\"queryalluser\",{\"1\":{\"276\":3}}],[\"queryalluserlist\",{\"1\":{\"260\":3}}],[\"queryallphone\",{\"1\":{\"264\":1,\"267\":1}}],[\"queryallnamearray\",{\"1\":{\"258\":2}}],[\"queryallnameset\",{\"1\":{\"258\":3}}],[\"queryallnamelist\",{\"1\":{\"258\":2}}],[\"queryaccountbyid\",{\"1\":{\"259\":3}}],[\"queryaccountbyidorname2\",{\"1\":{\"251\":2}}],[\"queryaccountbyid2\",{\"1\":{\"250\":2}}],[\"queryaccountbyid1\",{\"1\":{\"250\":2}}],[\"querynamebyid3\",{\"1\":{\"257\":2}}],[\"querynamebyid2\",{\"1\":{\"257\":2}}],[\"querynamebyid1\",{\"1\":{\"257\":2}}],[\"queryuserdetailbyuserid\",{\"1\":{\"276\":2}}],[\"queryuserbyid2\",{\"1\":{\"254\":1}}],[\"queryuserbyid\",{\"1\":{\"235\":1,\"240\":3}}],[\"queryusrbynameoremail2\",{\"1\":{\"254\":1}}],[\"querydemo\",{\"1\":{\"234\":1}}],[\"query\",{\"1\":{\"144\":1,\"146\":1}}],[\"qurybybrandandmemory\",{\"1\":{\"263\":1}}],[\"qurybybrandanddisk\",{\"1\":{\"263\":1}}],[\"qurybybrand\",{\"1\":{\"263\":3}}],[\"qq\",{\"1\":{\"158\":1,\"237\":1,\"275\":5,\"1028\":3,\"1195\":2}}],[\"qw4rt9lp7kj2hxy\",{\"1\":{\"147\":2}}],[\"q=1\",{\"1\":{\"116\":1}}],[\"q=权重\",{\"1\":{\"116\":1}}],[\"q=0\",{\"1\":{\"116\":4,\"1104\":4,\"1110\":4,\"1112\":11,\"1120\":7,\"1132\":4,\"1138\":7,\"1140\":7,\"1150\":7}}],[\"任务拆解\",{\"1\":{\"1131\":1}}],[\"任务列表\",{\"0\":{\"64\":1}}],[\"任一位置结点数变少\",{\"1\":{\"1016\":1}}],[\"任一部分数据量过少\",{\"1\":{\"1014\":1}}],[\"任意类型\",{\"1\":{\"944\":2}}],[\"任意类均能访问\",{\"1\":{\"509\":1}}],[\"任意java对象都能充当锁的角色\",{\"1\":{\"876\":1}}],[\"任意一个对象就行\",{\"1\":{\"671\":1}}],[\"任意值\",{\"1\":{\"250\":1}}],[\"任取一个元素\",{\"1\":{\"418\":1}}],[\"任何一部分分配的数据量小于等于6个\",{\"1\":{\"1014\":1}}],[\"任何一个类都有构造器\",{\"1\":{\"592\":1}}],[\"任何变量都有它的数据类型\",{\"1\":{\"653\":1}}],[\"任何变量都必须有数据类型\",{\"1\":{\"319\":1}}],[\"任何普通类继承了该抽象类\",{\"1\":{\"592\":1}}],[\"任何时候都要记住\",{\"1\":{\"458\":1}}],[\"任何引用数据类型的引用都可以指向null\",{\"1\":{\"407\":1}}],[\"任何要想被执行的代码要么直接写在main方法当中\",{\"1\":{\"308\":1}}],[\"任何人都可以以任何目的免费使用\",{\"1\":{\"143\":1}}],[\"版本\",{\"1\":{\"143\":1}}],[\"版本协议\",{\"1\":{\"120\":2}}],[\"国际标准码\",{\"1\":{\"799\":1}}],[\"国际化\",{\"1\":{\"116\":1}}],[\"国内外很多大型互联网公司都在使用\",{\"1\":{\"144\":1}}],[\"国内用的不多\",{\"1\":{\"143\":1}}],[\"深度克隆是在浅克隆基础上玩的\",{\"1\":{\"699\":1}}],[\"深度克隆的步骤\",{\"1\":{\"699\":1}}],[\"深度克隆怎么做呢\",{\"1\":{\"699\":1}}],[\"深度克隆\",{\"0\":{\"699\":1},\"1\":{\"699\":1}}],[\"深受广大用户的喜爱\",{\"1\":{\"143\":1}}],[\"深澜\",{\"1\":{\"110\":1}}],[\"易于操作\",{\"1\":{\"143\":1}}],[\"具体使用\",{\"1\":{\"936\":1}}],[\"具体内容没有要求\",{\"1\":{\"924\":1}}],[\"具体子类\",{\"0\":{\"787\":1,\"793\":1,\"805\":1,\"811\":1}}],[\"具体代码这里不再贴出\",{\"1\":{\"683\":1}}],[\"具体的使用可以参考下面表格\",{\"1\":{\"544\":1}}],[\"具体的案例是\",{\"1\":{\"510\":1}}],[\"具体的体现就是外键\",{\"1\":{\"171\":1}}],[\"具体对象属性的取值\",{\"1\":{\"447\":1}}],[\"具体思路\",{\"1\":{\"418\":1}}],[\"具体含义面向对象讲\",{\"1\":{\"382\":1}}],[\"具体来说\",{\"1\":{\"311\":1,\"662\":1,\"1026\":1}}],[\"具体指代查询返回的临时表对象\",{\"1\":{\"197\":1}}],[\"具体操作步骤如下\",{\"1\":{\"110\":1}}],[\"具有相同映射关系和相同排序的新\",{\"1\":{\"992\":1}}],[\"具有相同数据类型的数据元素的有序容器\",{\"1\":{\"393\":1}}],[\"具有必然执行的特点\",{\"1\":{\"760\":1}}],[\"具有无穷多元素的集合\",{\"1\":{\"679\":1,\"999\":1}}],[\"具有了父类的功能\",{\"1\":{\"523\":1}}],[\"具有隐式的导包\",{\"1\":{\"503\":1}}],[\"具有以下特点\",{\"1\":{\"445\":1,\"973\":1}}],[\"具有默认值\",{\"1\":{\"408\":2,\"458\":1,\"487\":2,\"494\":1}}],[\"具有\",{\"1\":{\"394\":1}}],[\"具有较好的可伸缩性\",{\"1\":{\"143\":1}}],[\"具有强大的\",{\"1\":{\"143\":1}}],[\"微信支付\",{\"1\":{\"720\":2}}],[\"微信\",{\"1\":{\"720\":1,\"721\":1}}],[\"微信更换头像\",{\"1\":{\"115\":1,\"118\":1}}],[\"微软开发的\",{\"1\":{\"143\":1}}],[\"包装类把基本数据类型变为一个对象\",{\"1\":{\"712\":1}}],[\"包装类对象在比较对象相等时\",{\"1\":{\"708\":1}}],[\"包装类始终是一个类\",{\"1\":{\"708\":1}}],[\"包装类的使用场景还是比较多的\",{\"1\":{\"712\":1}}],[\"包装类的常用方法\",{\"0\":{\"705\":1}}],[\"包装类的直接父类\",{\"1\":{\"701\":1}}],[\"包装类\",{\"1\":{\"704\":1}}],[\"包装类型在比较对象相等时\",{\"1\":{\"708\":1}}],[\"包装类型和string类型的相互转换\",{\"0\":{\"704\":1}}],[\"包装类型类名\",{\"1\":{\"703\":1}}],[\"包装类型中有value成员变量的对象\",{\"1\":{\"702\":1}}],[\"包装类型对象名\",{\"1\":{\"703\":1}}],[\"包装类型对象在使用上\",{\"1\":{\"703\":1}}],[\"包装类型对象不可变\",{\"1\":{\"702\":1}}],[\"包装类型对照表\",{\"1\":{\"701\":1}}],[\"包装类型特点\",{\"0\":{\"702\":1}}],[\"包装类相关引例\",{\"1\":{\"700\":1}}],[\"包裹内部类的\",{\"1\":{\"608\":1}}],[\"包括链表上挂着的东西\",{\"1\":{\"1006\":1}}],[\"包括内部类\",{\"1\":{\"939\":1}}],[\"包括集合a\",{\"1\":{\"679\":1,\"999\":1}}],[\"包括数组\",{\"1\":{\"658\":1}}],[\"包括静态变量\",{\"1\":{\"612\":1}}],[\"包括匿名内部类和lambda表达式\",{\"1\":{\"608\":1}}],[\"包括成员内部类\",{\"1\":{\"608\":1}}],[\"包括成员变量\",{\"1\":{\"565\":1}}],[\"包括私有\",{\"1\":{\"607\":1,\"626\":1}}],[\"包括普通成员方法和静态成员方法\",{\"1\":{\"592\":1}}],[\"包括this关键字\",{\"1\":{\"496\":1}}],[\"包括大小写\",{\"1\":{\"464\":1}}],[\"包括获取最大值和最小值\",{\"1\":{\"418\":1}}],[\"包括访问元素\",{\"1\":{\"399\":1}}],[\"包括初始化语句中的循环变量和循环体语句内部定义的变量\",{\"1\":{\"362\":1}}],[\"包括常量的运算\",{\"1\":{\"342\":2}}],[\"包括\",{\"1\":{\"328\":1,\"497\":1,\"956\":1,\"960\":1,\"993\":1,\"1026\":1}}],[\"包括api和命令行\",{\"1\":{\"143\":1}}],[\"包名在书写时\",{\"1\":{\"499\":1}}],[\"包名\",{\"1\":{\"316\":2,\"499\":1,\"504\":1}}],[\"包名所有字母一律小写\",{\"1\":{\"316\":1}}],[\"包\",{\"1\":{\"312\":1,\"313\":1}}],[\"包含登录表单的\",{\"1\":{\"1131\":1}}],[\"包含盘符的路径名前缀由驱动器号和一个\",{\"1\":{\"768\":1}}],[\"包含指定位置字符\",{\"1\":{\"737\":2}}],[\"包含的字符个数\",{\"1\":{\"737\":2}}],[\"包含了该类的所有类型信息\",{\"1\":{\"662\":1}}],[\"包含了请求的来源页面的url\",{\"1\":{\"116\":1}}],[\"包含抽象方法的类\",{\"1\":{\"606\":1}}],[\"包含一个url\",{\"1\":{\"116\":1}}],[\"包含四列信息\",{\"1\":{\"110\":1}}],[\"包含\",{\"1\":{\"57\":1,\"737\":2}}],[\"社区版\",{\"1\":{\"143\":1}}],[\"之间的部分视图\",{\"1\":{\"960\":1}}],[\"之间的毫秒数表示\",{\"1\":{\"775\":1}}],[\"之间\",{\"1\":{\"810\":1}}],[\"之间没有任何关联\",{\"1\":{\"392\":1}}],[\"之所以存在这样的依赖关系\",{\"1\":{\"614\":1}}],[\"之类的一系列方法遇见第一个有效字符\",{\"1\":{\"353\":1}}],[\"之前学的\",{\"1\":{\"909\":1}}],[\"之前\",{\"1\":{\"484\":1,\"868\":1}}],[\"之前我们讲过\",{\"1\":{\"583\":1}}],[\"之前我们提到过\",{\"1\":{\"337\":1}}],[\"之前我们写得查询executequery\",{\"1\":{\"234\":1}}],[\"之前来回跳转\",{\"1\":{\"263\":1}}],[\"之前特别流行的连接池\",{\"1\":{\"214\":1}}],[\"之前是开源的\",{\"1\":{\"143\":1}}],[\"之后不需要空格\",{\"1\":{\"152\":1}}],[\"之后要有一个空格再接着书写注释内容\",{\"1\":{\"152\":1}}],[\"之后\",{\"1\":{\"128\":1,\"267\":1}}],[\"政府要求\",{\"1\":{\"144\":1}}],[\"政府部门\",{\"1\":{\"143\":1}}],[\"政府机构等正在替换oracle\",{\"1\":{\"143\":1}}],[\"政府使用较多\",{\"1\":{\"143\":1}}],[\"适合于海量数据的存储\",{\"1\":{\"143\":1}}],[\"适应高吞吐量的数据库方案\",{\"1\":{\"143\":1}}],[\"适用于各类大\",{\"1\":{\"143\":1}}],[\"系统进入idle后一段时间会进行回收\",{\"1\":{\"934\":1}}],[\"系统类加载器\",{\"1\":{\"912\":2}}],[\"系统的后台线程\",{\"1\":{\"842\":1}}],[\"系统的工作线程\",{\"1\":{\"842\":1}}],[\"系统的可维护性\",{\"1\":{\"112\":1}}],[\"系统根据实参列表自动调用该类的构造器\",{\"1\":{\"466\":1}}],[\"系统可移植性好\",{\"1\":{\"143\":1}}],[\"又有可能导致红黑树转化为链表\",{\"1\":{\"1016\":1}}],[\"又来了三个学生\",{\"1\":{\"950\":1}}],[\"又想产生类似协变的效果\",{\"1\":{\"944\":1}}],[\"又浪费空间\",{\"1\":{\"741\":2}}],[\"又要强行进行克隆操作\",{\"1\":{\"694\":1}}],[\"又怎么办呢\",{\"1\":{\"530\":1}}],[\"又不想引入协变带来的问题\",{\"1\":{\"944\":1}}],[\"又不想加注解\",{\"1\":{\"251\":1}}],[\"又不需要思考过多细节\",{\"1\":{\"515\":1}}],[\"又叫做递归调用\",{\"1\":{\"442\":1}}],[\"又开发了一个mariadb\",{\"1\":{\"143\":1}}],[\"又名oracle\",{\"1\":{\"143\":1}}],[\"又可以进一步分为三个部分\",{\"1\":{\"115\":1}}],[\"性能差不多就可以\",{\"1\":{\"144\":1}}],[\"性能非常优秀\",{\"1\":{\"143\":1}}],[\"性能较好\",{\"1\":{\"143\":1}}],[\"性别\",{\"1\":{\"110\":1,\"478\":1}}],[\"世界时的起点\",{\"1\":{\"722\":1}}],[\"世界上使用最多的收费型数据库\",{\"1\":{\"143\":1}}],[\"世纪\",{\"1\":{\"142\":3}}],[\"甲骨文公司的一个产品\",{\"1\":{\"143\":1}}],[\"甲乙双方可以正常进行通讯的前提是双方都遵循同样的规则\",{\"1\":{\"110\":1}}],[\"城市表插入\",{\"1\":{\"171\":1}}],[\"城市表\",{\"1\":{\"143\":1,\"171\":1}}],[\"还提供一个方法获取汽车\",{\"1\":{\"936\":1}}],[\"还要注意此接口本身不是定义注解型\",{\"1\":{\"924\":1}}],[\"还要有递归出口\",{\"1\":{\"442\":1}}],[\"还剩\",{\"1\":{\"851\":2}}],[\"还剩0张\",{\"1\":{\"851\":1}}],[\"还可能后跟\",{\"1\":{\"768\":1}}],[\"还可以\",{\"1\":{\"1158\":1}}],[\"还可以写从string类型的转化为integer\",{\"1\":{\"942\":1}}],[\"还可以通过\",{\"1\":{\"833\":1}}],[\"还可以通过英文双冒号\",{\"1\":{\"655\":2}}],[\"还可以需要去使用一些系统资源\",{\"1\":{\"689\":1}}],[\"还可以配合接口的\",{\"1\":{\"600\":1}}],[\"还可以给子类用\",{\"1\":{\"592\":1}}],[\"还可以自己定义新的成员\",{\"1\":{\"520\":1}}],[\"还可以接收返回值\",{\"1\":{\"453\":1}}],[\"还可以使用增强for循环\",{\"1\":{\"417\":1}}],[\"还可以输入java\",{\"1\":{\"307\":1}}],[\"还可以存储数据和数据之间的关系\",{\"1\":{\"171\":1}}],[\"还可以存储数据与数据之间的关系\",{\"1\":{\"143\":1}}],[\"还可以出现在查询列中\",{\"1\":{\"162\":1}}],[\"还可以用存关系的数据库\",{\"1\":{\"143\":1}}],[\"还会用到\",{\"1\":{\"1026\":1}}],[\"还会自动调用\",{\"1\":{\"689\":1}}],[\"还会保留左表的所有数据\",{\"1\":{\"183\":1}}],[\"还需要gc\",{\"1\":{\"954\":2}}],[\"还需要从类加载的机制开始讲起\",{\"1\":{\"662\":1}}],[\"还需要多加练习\",{\"1\":{\"658\":1}}],[\"还需要手动初始化二维数组中的每一个一维数组\",{\"1\":{\"434\":1}}],[\"还被包裹着它的类保护\",{\"1\":{\"607\":1}}],[\"还能够创建其他的对象\",{\"1\":{\"713\":1}}],[\"还能够访问吗\",{\"1\":{\"555\":1}}],[\"还能存储键值对数据\",{\"1\":{\"680\":1}}],[\"还能继续\",{\"1\":{\"595\":1}}],[\"还看左边\",{\"1\":{\"579\":1}}],[\"还为程序的维护补充提供了便利\",{\"1\":{\"513\":1}}],[\"还应该增加轿车独有的属性和功能\",{\"1\":{\"513\":1}}],[\"还缺少一个初始化\",{\"1\":{\"396\":1}}],[\"还有种情况\",{\"1\":{\"1137\":1}}],[\"还有个keyu\",{\"1\":{\"1008\":1}}],[\"还有用于获取集合大小\",{\"1\":{\"950\":1}}],[\"还有其他线程\",{\"1\":{\"830\":1}}],[\"还有非数\",{\"1\":{\"675\":1}}],[\"还有一些客观存在的个体\",{\"1\":{\"445\":1}}],[\"还有诸如引用数据类型的比较等知识点\",{\"1\":{\"346\":1}}],[\"还有引用\",{\"1\":{\"233\":1}}],[\"还希望大家能够了解的一个知识点是\",{\"1\":{\"327\":1}}],[\"还无法给引用数据类型下一个准确的定义\",{\"1\":{\"327\":1}}],[\"还没有智能手机\",{\"1\":{\"303\":1}}],[\"还是留你同事版本\",{\"1\":{\"1201\":1}}],[\"还是留你的同事的\",{\"1\":{\"1197\":1}}],[\"还是私有的仓库\",{\"1\":{\"1200\":1}}],[\"还是服务器维护的\",{\"1\":{\"1137\":1}}],[\"还是一条执行路径\",{\"1\":{\"833\":1}}],[\"还是一个对象来分类\",{\"1\":{\"608\":1}}],[\"还是false\",{\"1\":{\"707\":1}}],[\"还是上面那句话\",{\"1\":{\"595\":1}}],[\"还是静态代码块\",{\"1\":{\"592\":1}}],[\"还是这句话\",{\"1\":{\"579\":1}}],[\"还是\",{\"1\":{\"571\":1}}],[\"还是要搞清楚\",{\"1\":{\"496\":1}}],[\"还是要强调一下\",{\"1\":{\"340\":1,\"682\":1}}],[\"还是请查看\",{\"1\":{\"326\":1}}],[\"还是缓存拿出来的\",{\"1\":{\"287\":1}}],[\"还是建议遵守\",{\"1\":{\"235\":1}}],[\"还是使用之前的数据\",{\"1\":{\"229\":1}}],[\"还不会编写\",{\"1\":{\"52\":1}}],[\"速度比较慢\",{\"1\":{\"283\":1}}],[\"速度中等\",{\"1\":{\"220\":1}}],[\"速度快\",{\"1\":{\"142\":1,\"144\":2,\"220\":10}}],[\"速度慢\",{\"1\":{\"142\":1,\"144\":1,\"220\":6}}],[\"持有类的定义\",{\"1\":{\"936\":1}}],[\"持有类的功能很固定\",{\"1\":{\"936\":1}}],[\"持有类持有接口\",{\"1\":{\"936\":1}}],[\"持有卡车类的类\",{\"1\":{\"936\":1}}],[\"持有小汽车\",{\"1\":{\"936\":1}}],[\"持有锁对象\",{\"1\":{\"873\":1}}],[\"持有外部类对象引用的内部类对象\",{\"1\":{\"643\":1}}],[\"持久性\",{\"1\":{\"210\":1}}],[\"持久化\",{\"1\":{\"142\":1}}],[\"持续不断地监听某一端口号\",{\"1\":{\"127\":1}}],[\"硬编码\",{\"1\":{\"924\":1}}],[\"硬盘\",{\"1\":{\"142\":2}}],[\"硬件层面\",{\"1\":{\"126\":1}}],[\"但在1\",{\"1\":{\"1020\":1}}],[\"但在java中它已经成为约定俗成的程序入口方法的方法名\",{\"1\":{\"385\":1}}],[\"但在java中它是一个位运算符\",{\"1\":{\"348\":1}}],[\"但真实情况不是这样的\",{\"1\":{\"969\":1}}],[\"但服务器到客户端的连接仍然打开\",{\"1\":{\"907\":1}}],[\"但效率稍低的传输方式\",{\"1\":{\"885\":1}}],[\"但效率更高的传输方式\",{\"1\":{\"885\":1}}],[\"但功能更强大\",{\"1\":{\"864\":1}}],[\"但只能创建单层目录\",{\"1\":{\"771\":2}}],[\"但只要是希望子类不要改写方法都可以这么做\",{\"1\":{\"567\":1}}],[\"但作为java中基础的表示时间和日期的类\",{\"1\":{\"721\":1}}],[\"但对于引用数据类型而言\",{\"1\":{\"699\":1}}],[\"但对象中成员变量的取值仍是可以修改的\",{\"1\":{\"568\":1}}],[\"但对象的类型可能被转换吗\",{\"1\":{\"526\":1}}],[\"但对象才是引用数据类型的实质\",{\"1\":{\"405\":1}}],[\"但假如你真的有需求\",{\"1\":{\"698\":1}}],[\"但推荐做一下\",{\"1\":{\"694\":1}}],[\"但学习clone方法后\",{\"1\":{\"693\":1}}],[\"但系统资源还是一直被占用着\",{\"1\":{\"689\":1}}],[\"但哈希值却一定相等\",{\"1\":{\"684\":1}}],[\"但哈希值却不相等\",{\"1\":{\"684\":1}}],[\"但绝不允许一\",{\"1\":{\"999\":1}}],[\"但绝不允许一对多\",{\"1\":{\"679\":1}}],[\"但绝大多数情况下\",{\"1\":{\"303\":1}}],[\"但为了避免因浮点数特殊值\",{\"1\":{\"675\":1}}],[\"但直接调用方法完全可能出现空指针异常\",{\"1\":{\"669\":1}}],[\"但正常run模式启动\",{\"1\":{\"669\":1}}],[\"但很明显从方法名不难知道\",{\"1\":{\"667\":1}}],[\"但要注意\",{\"1\":{\"924\":1}}],[\"但要想理清楚其中的逻辑\",{\"1\":{\"658\":1}}],[\"但要去掉最后一列\",{\"1\":{\"441\":1}}],[\"但形参的名字是不可省略的\",{\"1\":{\"654\":1}}],[\"但区别是\",{\"1\":{\"645\":1}}],[\"但局部内部类的作用域已被限制死了\",{\"1\":{\"638\":1}}],[\"但静态方法中什么对象都没有\",{\"1\":{\"616\":1}}],[\"但静态代码块不能给成员变量赋值\",{\"1\":{\"496\":1}}],[\"但没有静态声明\",{\"1\":{\"612\":1}}],[\"但允许继承多个接口\",{\"1\":{\"606\":1}}],[\"但自己写的概率非常小\",{\"1\":{\"600\":1}}],[\"但还有一些小问题\",{\"1\":{\"595\":1}}],[\"但抽象类可以继承\",{\"1\":{\"591\":1}}],[\"但运行一定会出错\",{\"1\":{\"585\":1}}],[\"但技能各不相同\",{\"1\":{\"582\":1}}],[\"但父类引用中没有的方法也访问不到\",{\"1\":{\"580\":1}}],[\"但一定不能更严格\",{\"1\":{\"561\":1}}],[\"但一般嵌套两层就足够了\",{\"1\":{\"367\":1}}],[\"但\",{\"1\":{\"551\":1,\"555\":1}}],[\"但star还有父类person\",{\"1\":{\"541\":1}}],[\"但scanner本身就是一个了解内容\",{\"1\":{\"352\":1}}],[\"但那时\",{\"1\":{\"534\":1}}],[\"但java中一个类仍然可以有很多个\",{\"1\":{\"533\":1}}],[\"但重写归重写\",{\"1\":{\"530\":1}}],[\"但这句话并不严谨\",{\"1\":{\"701\":1}}],[\"但这个格式不是乱写的\",{\"1\":{\"725\":1}}],[\"但这个类的数据类型就发生了一些变化\",{\"1\":{\"696\":1}}],[\"但这个子类到底叫啥\",{\"1\":{\"647\":1}}],[\"但这个鸭子不会飞\",{\"1\":{\"530\":1}}],[\"但这样明显是有问题的\",{\"1\":{\"607\":1}}],[\"但这仅意味着子类能够使用父类的静态成员\",{\"1\":{\"539\":1}}],[\"但这并不意味着在变量定义后的语句中一定可以使用该变量\",{\"1\":{\"335\":1}}],[\"但从更具体的语法上来说\",{\"1\":{\"524\":1}}],[\"但仍然是student类的对象\",{\"1\":{\"509\":1}}],[\"但仍然能够初始化完成\",{\"1\":{\"398\":1}}],[\"但我们还是要注意以下几个细节\",{\"1\":{\"669\":1}}],[\"但我们已经\",{\"1\":{\"658\":1}}],[\"但我们仍然可以通过父类中的getter方法\",{\"1\":{\"553\":1}}],[\"但我们并没有进行导包操作\",{\"1\":{\"503\":1}}],[\"但我们不能直接访问堆上的对象\",{\"1\":{\"405\":1}}],[\"但如果你仍然携带之前的jsessionid\",{\"1\":{\"1155\":1}}],[\"但如果仅仅是简单的赋值\",{\"1\":{\"496\":1}}],[\"但如果有多次使用某个类的对象的需求时\",{\"1\":{\"483\":1}}],[\"但如今来看\",{\"1\":{\"303\":1}}],[\"但属于一种特殊的方法\",{\"1\":{\"464\":1}}],[\"但实际上静态方法不能被重写\",{\"1\":{\"562\":1}}],[\"但实际上父类构造器仍被调用了\",{\"1\":{\"542\":1}}],[\"但实际上访问的方式仍然可以细分\",{\"1\":{\"535\":1}}],[\"但实际上这里可以直接传入匿名对象\",{\"1\":{\"481\":1}}],[\"但实际上只要该对象栈上的引用被销毁\",{\"1\":{\"457\":1}}],[\"但实际开发中不要采取这种做法\",{\"1\":{\"362\":1}}],[\"但实际开发中的数据\",{\"1\":{\"351\":1}}],[\"但可以创建多级目录\",{\"1\":{\"771\":2}}],[\"但可以创建全局常量\",{\"1\":{\"636\":1}}],[\"但可以直接使用\",{\"1\":{\"434\":1}}],[\"但可以由数字组成\",{\"1\":{\"315\":1}}],[\"但由于指向的是同一对象\",{\"1\":{\"425\":1}}],[\"但另一方面\",{\"1\":{\"407\":1}}],[\"但最基本的容器是数组\",{\"1\":{\"392\":1}}],[\"但名字一旦相同后\",{\"1\":{\"387\":1}}],[\"但像引例中功能几乎一样的多个方法\",{\"1\":{\"387\":1}}],[\"但本质是一样的\",{\"1\":{\"363\":1}}],[\"但肯定要放在for循环的语句上面\",{\"1\":{\"362\":1}}],[\"但两个分号是必须的\",{\"1\":{\"362\":1}}],[\"但也不是什么接口都能用lambda表达式创建子类对象\",{\"1\":{\"652\":1}}],[\"但也要知道\",{\"1\":{\"585\":1}}],[\"但也要警惕数组越界或空指针异常\",{\"1\":{\"438\":1}}],[\"但也需要掌握它的语法\",{\"1\":{\"357\":1}}],[\"但也会占用一定的存储空间\",{\"1\":{\"218\":1}}],[\"但布尔类型仅适用于\",{\"1\":{\"346\":1}}],[\"但不移除它\",{\"1\":{\"975\":1}}],[\"但不建议\",{\"1\":{\"961\":1}}],[\"但不接受新任务\",{\"1\":{\"880\":1}}],[\"但不管是什么形式\",{\"1\":{\"689\":1}}],[\"但不管采用何种架构实现\",{\"1\":{\"303\":1}}],[\"但不是\",{\"1\":{\"653\":1}}],[\"但不要为了使用而使用\",{\"1\":{\"649\":1}}],[\"但不强制\",{\"1\":{\"592\":1,\"596\":1}}],[\"但不能往下找子类\",{\"1\":{\"551\":1}}],[\"但不能随意修改并不是不能更改\",{\"1\":{\"337\":1}}],[\"但规范的java代码禁止这样做\",{\"1\":{\"336\":1}}],[\"但它们在实际使用中具有不同的目的和功能\",{\"1\":{\"924\":1}}],[\"但它们都不是正常数组\",{\"1\":{\"413\":1}}],[\"但它脱离电脑存在就是一粒沙子\",{\"1\":{\"607\":1}}],[\"但它也是有构造器的\",{\"1\":{\"592\":1}}],[\"但它不如double精度高\",{\"1\":{\"323\":1}}],[\"但它只能在windows平台上运行\",{\"1\":{\"143\":1}}],[\"但普遍来说\",{\"1\":{\"303\":1}}],[\"但有一些问题\",{\"1\":{\"144\":1}}],[\"但相对于其他数据库管理系统而言\",{\"1\":{\"143\":1}}],[\"但近几年由于一些原因\",{\"1\":{\"143\":1}}],[\"但缺乏灵活性\",{\"1\":{\"142\":1}}],[\"但是后续linux的一群开发者都是技术大佬\",{\"1\":{\"1183\":1}}],[\"但是随着参与的人越来越多\",{\"1\":{\"1183\":1}}],[\"但是早期都是通过邮件给linus发信息\",{\"1\":{\"1183\":1}}],[\"但是必须采用一种url重写的方式\",{\"1\":{\"1158\":1}}],[\"但是可以将其装换为url编码\",{\"1\":{\"1148\":1}}],[\"但是可以在某些场景中\",{\"1\":{\"178\":1}}],[\"但是jsessionid是同一个值\",{\"1\":{\"1156\":1}}],[\"但是jsp目前已经没有什么使用场景了\",{\"1\":{\"1121\":1}}],[\"但是java是不讲究血统的\",{\"1\":{\"533\":1}}],[\"但是java官方认为你不应该在java代码中使用的单词\",{\"1\":{\"313\":1}}],[\"但是呢\",{\"1\":{\"1120\":1}}],[\"但是实际开发中并不需要我们自己这么做\",{\"1\":{\"1117\":1}}],[\"但是实际上我们的需求只需要7个固定的对象\",{\"1\":{\"713\":1}}],[\"但是实际上在运行的时候\",{\"1\":{\"192\":1}}],[\"但是会导致原有的缺省servlet失效\",{\"1\":{\"1092\":1}}],[\"但是会报警告\",{\"1\":{\"567\":2}}],[\"但是value属性有一个好处就是如果说该注解只使用了value属性的话\",{\"1\":{\"1087\":1}}],[\"但是这样效率较低\",{\"1\":{\"1006\":1}}],[\"但是这个过程仍然是非常繁琐\",{\"1\":{\"1120\":1}}],[\"但是这个算法存在一个致命的缺陷\",{\"1\":{\"927\":1}}],[\"但是这个数组可以自动扩容\",{\"1\":{\"394\":1}}],[\"但是效率却有问题\",{\"1\":{\"969\":1}}],[\"但是效率低\",{\"1\":{\"125\":1}}],[\"但是其实是\",{\"1\":{\"960\":1}}],[\"但是需要注意\",{\"1\":{\"953\":1}}],[\"但是需要读入内存才能显示这些数据\",{\"1\":{\"780\":1}}],[\"但是非常容易出bug\",{\"1\":{\"950\":1}}],[\"但是非常强有力\",{\"1\":{\"146\":1}}],[\"但是链表是非连续存储不能做到随机访问\",{\"1\":{\"948\":1}}],[\"但是运行期有问题\",{\"1\":{\"944\":1}}],[\"但是运行时可能会出错\",{\"1\":{\"747\":1}}],[\"但是出问题的风险比较大\",{\"1\":{\"939\":1}}],[\"但是出现了一些新的问题\",{\"1\":{\"235\":1}}],[\"但是建议不要超过两个\",{\"1\":{\"939\":1}}],[\"但是建议加注解\",{\"1\":{\"251\":1}}],[\"但是未写在<>中\",{\"1\":{\"939\":1}}],[\"但是却把它转成了autocar\",{\"1\":{\"936\":1}}],[\"但是该指针指向的内存空间\",{\"1\":{\"925\":1}}],[\"但是wait\",{\"1\":{\"873\":1}}],[\"但是finally中有return\",{\"1\":{\"760\":1}}],[\"但是之后的语句都不执行了\",{\"1\":{\"749\":1}}],[\"但是某个类实现接口java\",{\"1\":{\"696\":1}}],[\"但是lambda表达式没有自身独立的作用域\",{\"1\":{\"656\":1}}],[\"但是要有默认值\",{\"1\":{\"924\":1}}],[\"但是要有一个无参构造方法\",{\"1\":{\"922\":1}}],[\"但是要保证是同一个\",{\"1\":{\"855\":1}}],[\"但是要直接告诉编译器lambda表达式是哪个接口的子类对象\",{\"1\":{\"653\":1}}],[\"但是要注意类和映射文件要在相同路径下\",{\"1\":{\"249\":1}}],[\"但是要注意\",{\"1\":{\"153\":1,\"338\":1,\"383\":1}}],[\"但是创建对象时\",{\"1\":{\"629\":1}}],[\"但是接口不具备这个功能\",{\"1\":{\"600\":1}}],[\"但是接口中的方法默认都是\",{\"1\":{\"598\":1}}],[\"但是接口中的属性默认都是\",{\"1\":{\"598\":1}}],[\"但是他属于奔驰这个品牌\",{\"1\":{\"599\":1}}],[\"但是处理的方法方式不同\",{\"1\":{\"595\":1,\"599\":1}}],[\"但是让一个cat继承就不行了\",{\"1\":{\"594\":1}}],[\"但是没有意义\",{\"1\":{\"593\":1}}],[\"但是但是final和abstract在修饰类时是冲突的\",{\"1\":{\"592\":1}}],[\"但是又不确定如何实现时\",{\"1\":{\"590\":1}}],[\"但是强转十分危险\",{\"1\":{\"583\":1}}],[\"但是即便是一个只有开关机的遥控器\",{\"1\":{\"580\":1}}],[\"但是对象的状态是可以被改变的\",{\"1\":{\"572\":1}}],[\"但是方法的调用结果\",{\"1\":{\"559\":1}}],[\"但是方法必须要有返回值类型\",{\"1\":{\"382\":1,\"384\":1}}],[\"但是super毕竟没有指向对象\",{\"1\":{\"544\":1}}],[\"但是我们没有使用\",{\"1\":{\"939\":1}}],[\"但是我们要清楚\",{\"1\":{\"682\":1}}],[\"但是我们在学习的时候\",{\"1\":{\"608\":1}}],[\"但是我们不能直接访问对象\",{\"1\":{\"540\":1}}],[\"但是我们目前的知识实际上没有办法做到这一点\",{\"1\":{\"375\":1}}],[\"但是都会飞\",{\"1\":{\"530\":1}}],[\"但是类是可以嵌套定义的\",{\"1\":{\"508\":1}}],[\"但是导包总不是都好用\",{\"1\":{\"503\":1}}],[\"但是当你从网上或者其它途径弄到的一些代码\",{\"1\":{\"499\":1}}],[\"但是有构造方法\",{\"1\":{\"606\":1}}],[\"但是有了多态只需要调用技能完事\",{\"1\":{\"582\":1}}],[\"但是有了继承后\",{\"1\":{\"537\":1}}],[\"但是有了mybatis\",{\"1\":{\"234\":1}}],[\"但是有几个需要注意的地方\",{\"1\":{\"499\":1}}],[\"但是无法直接交换两个引用\",{\"1\":{\"470\":1}}],[\"但是无从得知\",{\"1\":{\"125\":1}}],[\"但是this构造器中的代码\",{\"1\":{\"468\":1}}],[\"但是并不会执行\",{\"1\":{\"468\":1}}],[\"但是请现在不要嵌套定义类\",{\"1\":{\"454\":1}}],[\"但是注意\",{\"1\":{\"419\":1,\"542\":1}}],[\"但是像c\",{\"1\":{\"395\":1}}],[\"但是仍然可以参与下轮的cpu的竞争\",{\"1\":{\"841\":1}}],[\"但是仍然可以被继承\",{\"1\":{\"567\":1}}],[\"但是仍然是可以继承的\",{\"1\":{\"567\":1}}],[\"但是仍然有一些问题\",{\"1\":{\"375\":1}}],[\"但是仍然需要记住\",{\"1\":{\"350\":1}}],[\"但是循环控制变量的值却不会发生变化了\",{\"1\":{\"362\":1}}],[\"但是普遍来说\",{\"1\":{\"359\":1}}],[\"但是普通的字符直接书写给出即可\",{\"1\":{\"355\":1}}],[\"但是单目运算符\",{\"1\":{\"350\":1}}],[\"但是也要注意\",{\"1\":{\"349\":1}}],[\"但是也有一定的缺陷\",{\"1\":{\"287\":1}}],[\"但是使用三目运算符\",{\"1\":{\"349\":1}}],[\"但是一台车只能属于一个品牌\",{\"1\":{\"599\":1}}],[\"但是一般来说有个5~6层继承\",{\"1\":{\"533\":1}}],[\"但是一般情况下\",{\"1\":{\"503\":1}}],[\"但是一般使用varchar\",{\"1\":{\"153\":1}}],[\"但是一个数组里面只能存储同一种数据类型元素\",{\"1\":{\"393\":1}}],[\"但是一旦它的取值超出了一个byte的取值范围\",{\"1\":{\"709\":1}}],[\"但是一旦出现小数会丢失小数位\",{\"1\":{\"348\":1}}],[\"但是一旦超出范围\",{\"1\":{\"348\":1}}],[\"但是执行效率变高了\",{\"1\":{\"347\":1}}],[\"但是条件会苛刻的多\",{\"1\":{\"341\":1}}],[\"但是它也继承了object类\",{\"1\":{\"598\":1}}],[\"但是它有子类\",{\"1\":{\"592\":1}}],[\"但是它们不是覆盖也不是隐藏\",{\"1\":{\"553\":1}}],[\"但是它们的形参列表必须不同\",{\"1\":{\"388\":1}}],[\"但是它和object类是非同包的关系\",{\"1\":{\"538\":1}}],[\"但是它比所有整型的取值范围都大\",{\"1\":{\"338\":1}}],[\"但是它是三个字节的\",{\"1\":{\"149\":1}}],[\"但是作为基础的知识\",{\"1\":{\"323\":1}}],[\"但是标识符不能以数字开头\",{\"1\":{\"314\":1}}],[\"但是以后的版本中\",{\"1\":{\"313\":1}}],[\"但是数据封装不进去\",{\"1\":{\"261\":1}}],[\"但是不移除此队列的头\",{\"1\":{\"972\":1}}],[\"但是不属于基本数据类型\",{\"1\":{\"728\":1}}],[\"但是不要说的这么理所当然\",{\"1\":{\"1003\":1}}],[\"但是不要忘记写分号\",{\"1\":{\"591\":1}}],[\"但是不要认为没有这一步\",{\"1\":{\"352\":1}}],[\"但是不会立刻执行\",{\"1\":{\"489\":1}}],[\"但是不一定会最先完成类加载\",{\"1\":{\"479\":1}}],[\"但是不重要\",{\"1\":{\"420\":1}}],[\"但是不建议使用这个来完成\",{\"1\":{\"970\":1}}],[\"但是不建议这么做\",{\"1\":{\"385\":1}}],[\"但是不建议大家随意写\",{\"1\":{\"250\":1}}],[\"但是不允许使用\",{\"1\":{\"315\":1}}],[\"但是不能存放这种大的视屏\",{\"1\":{\"153\":1}}],[\"但是增删改的时候要去改变数据\",{\"1\":{\"233\":1}}],[\"但是还是要练习\",{\"1\":{\"217\":1}}],[\"但是尽量不要写绝对路径\",{\"1\":{\"216\":1}}],[\"但是版本不对\",{\"1\":{\"215\":1}}],[\"但是由于中间几年没有更新\",{\"1\":{\"214\":1}}],[\"但是在不同包下\",{\"1\":{\"536\":1}}],[\"但是在具有父子类关系的两个类中\",{\"1\":{\"523\":1}}],[\"但是在javase的学习阶段\",{\"1\":{\"351\":1}}],[\"但是在\",{\"1\":{\"214\":1}}],[\"但是在工作中\",{\"1\":{\"156\":1}}],[\"但是面试的时候\",{\"1\":{\"212\":1}}],[\"但是\",{\"1\":{\"184\":1,\"265\":1,\"395\":1,\"408\":1,\"442\":1,\"447\":1,\"456\":1,\"482\":1,\"483\":1,\"681\":1,\"682\":1}}],[\"但是mysql不支持全外连接\",{\"1\":{\"183\":1}}],[\"但是内连接和外连接都是基于交叉连接的结果去筛选的\",{\"1\":{\"181\":1}}],[\"但是业务是变动的\",{\"1\":{\"176\":1}}],[\"但是如果浏览器禁用了cookie\",{\"1\":{\"1158\":1}}],[\"但是如果形参为空\",{\"1\":{\"654\":1}}],[\"但是如果多次在不同的方法中使用\",{\"1\":{\"641\":1}}],[\"但是如果一个抽象类没有抽象方法\",{\"1\":{\"592\":1}}],[\"但是如果类中有任一构造器\",{\"1\":{\"466\":1}}],[\"但是如果将其拆分成两个表\",{\"1\":{\"172\":1}}],[\"但是如果要写varchar\",{\"1\":{\"153\":1}}],[\"但是如果希望不再webapps目录下\",{\"1\":{\"135\":1}}],[\"但是是个假的\",{\"1\":{\"149\":1}}],[\"但是本质上讲\",{\"1\":{\"144\":1}}],[\"但是希望在访问时不携带应用名\",{\"1\":{\"139\":1}}],[\"但是root应用下的资源文件在访问时\",{\"1\":{\"139\":1}}],[\"但是双十一峰值的时候\",{\"1\":{\"126\":1}}],[\"但是安全性不高\",{\"1\":{\"125\":1}}],[\"但是content\",{\"1\":{\"123\":1}}],[\"但是200状态码不一定没有bug\",{\"1\":{\"120\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"81\":1}}],[\"自反性\",{\"1\":{\"674\":1}}],[\"自身对象用this指向\",{\"1\":{\"615\":1}}],[\"自身特点\",{\"0\":{\"610\":1,\"621\":1,\"634\":1}}],[\"自己写业务\",{\"1\":{\"1085\":1}}],[\"自己学习的时候\",{\"1\":{\"1053\":1}}],[\"自己独有的方法\",{\"1\":{\"814\":2}}],[\"自己处理\",{\"0\":{\"750\":1}}],[\"自己\",{\"1\":{\"694\":1}}],[\"自己人\",{\"1\":{\"607\":1}}],[\"自己创建表\",{\"1\":{\"240\":1}}],[\"自然顺序排序\",{\"1\":{\"1041\":1}}],[\"自然就是实现两个java进程之间的数据交换\",{\"1\":{\"885\":1}}],[\"自然就得到了不能发生多态的场景\",{\"1\":{\"577\":1}}],[\"自然不需要去外面找\",{\"1\":{\"503\":1}}],[\"自然会覆盖先执行结构的结果\",{\"1\":{\"487\":1}}],[\"自然数求和\",{\"1\":{\"442\":1}}],[\"自然也无需指出返回值\",{\"1\":{\"382\":1}}],[\"自然是循环结构中要重复执行的代码\",{\"1\":{\"361\":1}}],[\"自然需要两个操作数\",{\"1\":{\"346\":1}}],[\"自加自减都是一元运算符\",{\"1\":{\"344\":1}}],[\"自减\",{\"1\":{\"344\":2}}],[\"自增自减在日常开发更多还是配合for循环单独使用\",{\"1\":{\"344\":1}}],[\"自增自减符号在变量后面\",{\"1\":{\"344\":1}}],[\"自增自减符号在变量前面\",{\"1\":{\"344\":1}}],[\"自增自减符号和操作数的位置就至关重要了\",{\"1\":{\"344\":1}}],[\"自增\",{\"1\":{\"344\":2}}],[\"自增的策略\",{\"1\":{\"233\":1}}],[\"自行百度\",{\"1\":{\"308\":1}}],[\"自带事务\",{\"1\":{\"241\":1}}],[\"自动抛出\",{\"1\":{\"759\":1}}],[\"自动拆箱依赖于\",{\"1\":{\"703\":1}}],[\"自动拆箱\",{\"1\":{\"703\":1}}],[\"自动拆装箱\",{\"1\":{\"703\":1}}],[\"自动装箱依赖于\",{\"1\":{\"703\":1}}],[\"自动装箱和拆箱其实是一种语法糖\",{\"1\":{\"703\":1}}],[\"自动装箱与拆箱\",{\"1\":{\"703\":1}}],[\"自动装箱\",{\"1\":{\"703\":1,\"704\":2}}],[\"自动去释放对象占用的系统资源\",{\"1\":{\"689\":1}}],[\"自动完成转换\",{\"1\":{\"528\":1}}],[\"自动或强制\",{\"1\":{\"341\":1}}],[\"自动数据类型发生在\",{\"1\":{\"338\":1}}],[\"自动\",{\"1\":{\"338\":2}}],[\"自动类型转换的条件\",{\"1\":{\"528\":1}}],[\"自动类型转换的关键点就在于\",{\"1\":{\"338\":1}}],[\"自动类型转换是小取值范围到大取值范围数据类型的转换\",{\"1\":{\"339\":1}}],[\"自动类型转换\",{\"0\":{\"338\":1,\"528\":1},\"1\":{\"337\":1,\"527\":1}}],[\"自动生成的\",{\"1\":{\"318\":1}}],[\"自动提交\",{\"1\":{\"244\":2}}],[\"自动扩容\",{\"1\":{\"213\":1}}],[\"自动增长目前增长到哪\",{\"1\":{\"169\":1}}],[\"自动增长必须为索引\",{\"1\":{\"169\":1}}],[\"自动增长约束\",{\"1\":{\"169\":1}}],[\"自我评价也变成湖北人\",{\"1\":{\"160\":1}}],[\"自我评价\",{\"1\":{\"158\":5}}],[\"自\",{\"1\":{\"142\":1,\"144\":1}}],[\"自定义session中定义一个成员变量\",{\"1\":{\"1159\":1}}],[\"自定义session>\",{\"1\":{\"1159\":1}}],[\"自定义的session应该是什么结构的数据\",{\"1\":{\"1159\":1}}],[\"自定义获取功能是在高级获取功能的基础上\",{\"1\":{\"777\":1}}],[\"自定义运行时异常\",{\"0\":{\"764\":1}}],[\"自定义编译时异常\",{\"0\":{\"763\":1}}],[\"自定义类加载器\",{\"0\":{\"923\":1}}],[\"自定义类实现自然排序\",{\"1\":{\"740\":2}}],[\"自定义类实现枚举\",{\"0\":{\"715\":1},\"1\":{\"714\":1}}],[\"自定义类时\",{\"1\":{\"658\":1}}],[\"自定义\",{\"1\":{\"669\":1}}],[\"自定义常量的命名规范\",{\"1\":{\"568\":1}}],[\"自定义常量的命名\",{\"1\":{\"568\":1}}],[\"自定义常量\",{\"1\":{\"328\":1,\"568\":2}}],[\"自定义主键\",{\"1\":{\"233\":1}}],[\"自定义它们\",{\"1\":{\"82\":1}}],[\"自定义对齐\",{\"0\":{\"60\":1}}],[\"自定义标题\",{\"1\":{\"57\":5}}],[\"那吃完饭呢\",{\"1\":{\"1137\":3}}],[\"那吃什么\",{\"1\":{\"1137\":3}}],[\"那说好了\",{\"1\":{\"1137\":3}}],[\"那最后得到的下标\",{\"1\":{\"1008\":1}}],[\"那如果是\",{\"1\":{\"995\":1}}],[\"那集合和数组比\",{\"1\":{\"950\":1}}],[\"那你理解的数组是什么样的呢\",{\"1\":{\"948\":1}}],[\"那这时候这次遍历的意义大吗\",{\"1\":{\"955\":1}}],[\"那这个有父子继承关系吗\",{\"1\":{\"944\":1}}],[\"那这样lambda表达式就会写的很复杂\",{\"1\":{\"654\":1}}],[\"那data就是truck类型的\",{\"1\":{\"937\":1}}],[\"那data就是autocar类型的\",{\"1\":{\"937\":1}}],[\"那data就是integer类型的\",{\"1\":{\"937\":1}}],[\"那data就是string类型的\",{\"1\":{\"937\":1}}],[\"那i就是2\",{\"1\":{\"937\":1}}],[\"那i就是1\",{\"1\":{\"937\":1}}],[\"那自然就需要比较的规则才有意义\",{\"1\":{\"672\":1}}],[\"那自然会使用子类中的重写实现\",{\"1\":{\"668\":1}}],[\"那java语法的设计就要满足它\",{\"1\":{\"662\":1}}],[\"那还是直接创建一个子类出来好了\",{\"1\":{\"649\":1}}],[\"那它就直接继承object\",{\"1\":{\"592\":1}}],[\"那它们不是局部变量啊\",{\"1\":{\"406\":1}}],[\"那子类中的num一定是0\",{\"1\":{\"564\":1}}],[\"那十分简单\",{\"1\":{\"546\":1}}],[\"那也应该尽量少的给予访问权限\",{\"1\":{\"510\":1}}],[\"那为什么声明一个数组后为什么不能立刻使用呢\",{\"1\":{\"408\":1}}],[\"那形参列表就必须不同了\",{\"1\":{\"389\":1}}],[\"那我就必须说汉语\",{\"1\":{\"885\":1}}],[\"那我传入一个int值可以吗\",{\"1\":{\"384\":1}}],[\"那我们就只能做开关机的操作\",{\"1\":{\"580\":1}}],[\"那我们就可以知道\",{\"1\":{\"221\":1}}],[\"那我们为什么需要学习数据库呢\",{\"1\":{\"141\":1}}],[\"那就替你新建一个\",{\"1\":{\"1192\":1}}],[\"那就要比较1w次\",{\"1\":{\"1002\":1}}],[\"那就看下图再去理解一下\",{\"1\":{\"585\":1}}],[\"那就必须逐一调用方法来释放不同的技能\",{\"1\":{\"582\":1}}],[\"那就会编译报错\",{\"1\":{\"551\":1}}],[\"那就观察首行\",{\"1\":{\"546\":1}}],[\"那就想复用它们\",{\"1\":{\"519\":1}}],[\"那就干脆不要创建对象\",{\"1\":{\"510\":1}}],[\"那就只有默认值\",{\"1\":{\"479\":1}}],[\"那就更不行了\",{\"1\":{\"394\":1}}],[\"那就是给成员变量赋值的构造器\",{\"1\":{\"723\":1}}],[\"那就是java的方法重载\",{\"1\":{\"387\":1}}],[\"那就是char类型\",{\"1\":{\"324\":1}}],[\"那就选择switch\",{\"1\":{\"360\":1}}],[\"那些逻辑上\",{\"1\":{\"412\":2}}],[\"那些换行\",{\"1\":{\"355\":1}}],[\"那些超出表示位数的数据就被截断丢失了\",{\"1\":{\"336\":1}}],[\"那xml中可以随意写\",{\"1\":{\"250\":1}}],[\"那会被插入一些无意义的值\",{\"1\":{\"168\":1}}],[\"那么再在\",{\"1\":{\"1203\":1}}],[\"那么再回到jdk当中的方法说明上\",{\"1\":{\"679\":1}}],[\"那么仍然可以获取数据\",{\"1\":{\"1155\":1}}],[\"那么做的事情就是创建并获取session\",{\"1\":{\"1152\":2}}],[\"那么做强转就有了两个选项\",{\"1\":{\"585\":1}}],[\"那么做强转\",{\"1\":{\"585\":1}}],[\"那么刷新登录页面\",{\"1\":{\"1131\":1}}],[\"那么接着\",{\"1\":{\"1131\":1}}],[\"那么javaee会更适合\",{\"1\":{\"1077\":1}}],[\"那么java开发者就在jdbc中定义了一个数据库连接池的接口\",{\"1\":{\"213\":1}}],[\"那么其\",{\"1\":{\"868\":1}}],[\"那么其他的组员也都要使用\",{\"1\":{\"262\":1}}],[\"那么编译器只会强制处理父类\",{\"1\":{\"756\":1}}],[\"那么true和false又是什么呢\",{\"1\":{\"711\":1}}],[\"那么clone方法的使用就要格外注意了\",{\"1\":{\"699\":1}}],[\"那么count值+3\",{\"1\":{\"474\":2}}],[\"那么让类去实现一个空接口\",{\"1\":{\"696\":1}}],[\"那么连带着finalize方法的执行也是不确定的\",{\"1\":{\"689\":1}}],[\"那么hashcode方法也必须要依赖于这两个成员变量重写\",{\"1\":{\"682\":1}}],[\"那么x\",{\"1\":{\"674\":1}}],[\"那么object类就默认是这个类的\",{\"1\":{\"658\":1}}],[\"那么大括号和return可以一起省略\",{\"1\":{\"654\":1}}],[\"那么可以省略大括号\",{\"1\":{\"654\":1}}],[\"那么可以考虑自己去实现\",{\"1\":{\"415\":1}}],[\"那么可以考虑冗余数据\",{\"1\":{\"178\":1}}],[\"那么匿名内部类\",{\"1\":{\"646\":1}}],[\"那么成员内部类的对象\",{\"1\":{\"614\":1}}],[\"那么子类就可以随便抛出\",{\"1\":{\"756\":1}}],[\"那么子类对象的隐式初始化super\",{\"1\":{\"598\":1}}],[\"那么子类的任何赋值手段都没有执行\",{\"1\":{\"564\":1}}],[\"那么session还可以使用吗\",{\"1\":{\"1158\":1}}],[\"那么student\",{\"1\":{\"594\":1}}],[\"那么scanner键盘录入到底应该怎么用呢\",{\"1\":{\"352\":1}}],[\"那么假如father引用指向它时\",{\"1\":{\"585\":2}}],[\"那么假设做以下类比\",{\"1\":{\"455\":1}}],[\"那么将fs强转成son2引用\",{\"1\":{\"585\":1}}],[\"那么也允许传入它的子类对象\",{\"1\":{\"584\":1}}],[\"那么也只能用一次了\",{\"1\":{\"466\":1}}],[\"那么访问类的全局常量\",{\"1\":{\"571\":1}}],[\"那么继承应该就属于方法的覆盖\",{\"1\":{\"559\":1}}],[\"那么只要创建子类对象\",{\"1\":{\"559\":1}}],[\"那么只需要两个访问权限就足够了\",{\"1\":{\"537\":1}}],[\"那么即便引用是父类\",{\"1\":{\"558\":1}}],[\"那么即便数据类型不一致\",{\"1\":{\"384\":1}}],[\"那么我们直接创建子类对象\",{\"1\":{\"555\":1}}],[\"那么我么查询的时候\",{\"1\":{\"233\":1}}],[\"那么结果是什么\",{\"1\":{\"549\":1,\"556\":1}}],[\"那么父类中的那个同名成员方法去哪了呢\",{\"1\":{\"555\":1}}],[\"那么父类中的那个成员变量去哪了呢\",{\"1\":{\"548\":1}}],[\"那么父类所有的成员变量的赋值方式都是先于子类成员变量的任何赋值方式\",{\"1\":{\"542\":1}}],[\"那么不使用super区分\",{\"1\":{\"548\":1}}],[\"那么不同的this指向的对象必然不同\",{\"1\":{\"462\":1}}],[\"那么必定隐含super\",{\"1\":{\"546\":1}}],[\"那么顺序是先父后子\",{\"1\":{\"546\":1}}],[\"那么显式赋值和静态代码块\",{\"1\":{\"546\":1}}],[\"那么第一行一定隐含了一条语句\",{\"1\":{\"542\":1}}],[\"那么赋值顺序是怎么样的\",{\"1\":{\"540\":1}}],[\"那么问题就来了\",{\"1\":{\"540\":1}}],[\"那么思考以下问题\",{\"1\":{\"539\":1}}],[\"那么a的直接父类就是b\",{\"1\":{\"533\":1}}],[\"那么很自然就会想到一个问题\",{\"1\":{\"532\":1}}],[\"那么如何理解这句话呢\",{\"1\":{\"523\":1}}],[\"那么如果有了session则返回session对象\",{\"1\":{\"1151\":1}}],[\"那么如果程序员也想在程序的运行期间\",{\"1\":{\"662\":1}}],[\"那么如果父子类属性同名了\",{\"1\":{\"548\":1}}],[\"那么如果它愿意上交国家也是可以的\",{\"1\":{\"537\":1}}],[\"那么如果在方法体中调用方法自身呢\",{\"1\":{\"442\":1}}],[\"那么如果我就有多层嵌套循环\",{\"1\":{\"376\":1}}],[\"那么怎么使用这个方法呢\",{\"1\":{\"694\":1}}],[\"那么怎么保证\",{\"1\":{\"505\":1}}],[\"那么怎么用一个二维数组存储它呢\",{\"1\":{\"441\":1}}],[\"那么程序会先跳转到那个构造器\",{\"1\":{\"489\":1,\"546\":1}}],[\"那么该变量\",{\"1\":{\"642\":1}}],[\"那么该变量一定是成员变量\",{\"1\":{\"461\":1}}],[\"那么该实参对象就允许传入方法\",{\"1\":{\"584\":1}}],[\"那么该实参变量就允许传入方法\",{\"1\":{\"584\":1}}],[\"那么该字面值常量的后面应该加上一个\",{\"1\":{\"336\":2}}],[\"那么所有行组合起来\",{\"1\":{\"441\":1}}],[\"那么二维数组就是整个表格数据\",{\"1\":{\"431\":1}}],[\"那么把80个班级的一维数组全部放进一个一维数组\",{\"1\":{\"429\":1}}],[\"那么局部变量就不\",{\"1\":{\"427\":1}}],[\"那么方法改变的是实参拷贝的值\",{\"1\":{\"424\":1}}],[\"那么方法执行完毕后\",{\"1\":{\"424\":1}}],[\"那么方法3将胜出\",{\"1\":{\"389\":1}}],[\"那么元素的值就是直接赋我们给出的具体值吗\",{\"1\":{\"408\":1}}],[\"那么它和class类有什么关系呢\",{\"1\":{\"719\":1}}],[\"那么它们哈希映射的结果必然相同\",{\"1\":{\"682\":1}}],[\"那么它们的执行顺序是\",{\"1\":{\"468\":1}}],[\"那么它就没有必要声明为抽象\",{\"1\":{\"592\":1}}],[\"那么它一定隐含语句\",{\"1\":{\"541\":1}}],[\"那么它的访问结果一定也是子类中的结果\",{\"1\":{\"552\":1}}],[\"那么它的访问结果一定也是父类中的结果\",{\"1\":{\"552\":1}}],[\"那么它的访问范围是子类\",{\"1\":{\"551\":1,\"557\":1}}],[\"那么它的访问范围只有父类\",{\"1\":{\"551\":1,\"557\":1}}],[\"那么它的直接父类就是\",{\"1\":{\"533\":1}}],[\"那么它的存储空间就是固定的\",{\"1\":{\"394\":1}}],[\"那么它基本的用途就有\",{\"1\":{\"461\":1}}],[\"那么它都是引用数据类型\",{\"1\":{\"327\":1}}],[\"那么到底谁\",{\"1\":{\"389\":1}}],[\"那么优先选择\",{\"1\":{\"389\":1}}],[\"那么究竟该选谁呢\",{\"1\":{\"389\":1}}],[\"那么建议去接收或者使用这个返回值\",{\"1\":{\"383\":1}}],[\"那么return后面是不能写任何语句的\",{\"1\":{\"378\":1}}],[\"那么循环控制变量是必须的\",{\"1\":{\"361\":1}}],[\"那么谁在前\",{\"1\":{\"358\":1}}],[\"那么在外界就无法创建它的对象了\",{\"1\":{\"607\":1}}],[\"那么在下面代码中分析使用对象调用clone\",{\"1\":{\"538\":1}}],[\"那么在一个轿车类中\",{\"1\":{\"513\":1}}],[\"那么在java中该怎么求一个数的次幂呢\",{\"1\":{\"348\":1}}],[\"那么在我们以后的工作中\",{\"1\":{\"178\":1}}],[\"那么右边无论是什么结果都是false\",{\"1\":{\"347\":1}}],[\"那么整个表达式的结果一定是true\",{\"1\":{\"347\":1}}],[\"那么短路与不短路有啥区别呢\",{\"1\":{\"347\":1}}],[\"那么表达式的最终结果数据类型就遵循\",{\"1\":{\"340\":1}}],[\"那么有限有效数字的浮点数就不能准确表示这个数字了\",{\"1\":{\"336\":1}}],[\"那么计算机中存储1\",{\"1\":{\"324\":1}}],[\"那么字符型\",{\"1\":{\"324\":1}}],[\"那么能够表示的有效数字是不可能超过4位的\",{\"1\":{\"323\":1}}],[\"那么简单来说\",{\"1\":{\"323\":1}}],[\"那么文档注释起着什么作用呢\",{\"1\":{\"318\":1}}],[\"那么最终执行的sql上不会生成where\",{\"1\":{\"264\":1}}],[\"那么where标签不会给我们拼接where关键字\",{\"1\":{\"264\":1}}],[\"那么webapps目录下新建一个root目录\",{\"1\":{\"139\":1}}],[\"那么一定会触发其它类的类加载\",{\"1\":{\"546\":1}}],[\"那么一定有bug\",{\"1\":{\"120\":1}}],[\"那么一般针对一个表\",{\"1\":{\"233\":1}}],[\"那么数据类型的转换\",{\"1\":{\"337\":1}}],[\"那么数据没有办法存储\",{\"1\":{\"233\":1}}],[\"那么数据也没办法存储\",{\"1\":{\"226\":1}}],[\"那么innodb会创建一个隐藏的列来当做主键\",{\"1\":{\"233\":1}}],[\"那么innodb会维护一个隐藏的列来当做主键\",{\"1\":{\"226\":1}}],[\"那么innodb存储引擎的数据和主键索引树是绑定在一起的\",{\"1\":{\"233\":1}}],[\"那么myisam还有没有用呢\",{\"1\":{\"228\":1}}],[\"那么这里我们要构造cookie信息\",{\"1\":{\"1139\":1}}],[\"那么这里就很明显存在一个问题\",{\"1\":{\"684\":1}}],[\"那么这些系统资源\",{\"1\":{\"689\":1}}],[\"那么这些概念就是非常容易的\",{\"1\":{\"678\":1}}],[\"那么这两个对象的哈希值必须相同的规则\",{\"1\":{\"682\":1}}],[\"那么这群特殊的猫和狗\",{\"1\":{\"595\":1}}],[\"那么这个就是服务器技术\",{\"1\":{\"1137\":1}}],[\"那么这个新接口也不会被视为一个注解类型\",{\"1\":{\"924\":1}}],[\"那么这个类就是抽象类\",{\"1\":{\"590\":1}}],[\"那么这个调用该成员方法的对象\",{\"1\":{\"460\":1}}],[\"那么这个定义能不能套在引用数据类型中呢\",{\"1\":{\"455\":1}}],[\"那么这个时候我们不会考虑使用mybatis给我们提供的缓存\",{\"1\":{\"287\":1}}],[\"那么这个时候查询速度增高\",{\"1\":{\"220\":1}}],[\"那么这样就能保证树的结构不会发生比较大的改变\",{\"1\":{\"233\":1}}],[\"那么这样myisam就可以帮助我们根据这一列的值去建立一个索引树\",{\"1\":{\"224\":1}}],[\"那么就返回这个session\",{\"1\":{\"1151\":1}}],[\"那么就创建一个session\",{\"1\":{\"1151\":1}}],[\"那么就提示登录成功\",{\"1\":{\"1131\":1}}],[\"那么就是object以及任意的java类了\",{\"1\":{\"944\":1}}],[\"那么就是编码值97参与运算\",{\"1\":{\"340\":1}}],[\"那么就一定要注意\",{\"1\":{\"754\":1}}],[\"那么就直接返回常量池中的实例引用\",{\"1\":{\"731\":1}}],[\"那么就直接查询缓存\",{\"1\":{\"283\":1}}],[\"那么就会重新创建一个对象\",{\"1\":{\"709\":1}}],[\"那么就继续调用它的hashcode方法\",{\"1\":{\"685\":1}}],[\"那么就意味着程序员\",{\"1\":{\"662\":1}}],[\"那么就定义一个接口\",{\"1\":{\"595\":1,\"599\":1}}],[\"那么就可以提取到抽象类中作为一个默认实现\",{\"1\":{\"592\":1}}],[\"那么就可以使用\",{\"1\":{\"271\":2}}],[\"那么就去父类中找\",{\"1\":{\"551\":1}}],[\"那么就没有默认无参存在了\",{\"1\":{\"466\":1}}],[\"那么就不再受限于权限控制了\",{\"1\":{\"607\":1}}],[\"那么就不去执行第二次查询的sql语句\",{\"1\":{\"283\":1}}],[\"那么就不存在主键索引树\",{\"1\":{\"226\":1}}],[\"那么就需要遵守mybatis使用动态代理的一些规则\",{\"1\":{\"235\":1}}],[\"那么就需要经过多次的磁盘io才能找到对应的数据\",{\"1\":{\"220\":1}}],[\"那么就把数据放置在请求体里面\",{\"1\":{\"118\":1}}],[\"那么索引采用的是什么样的数据结构呢\",{\"1\":{\"220\":1}}],[\"那么用户的应用程序的资源使用会产生非常大的浪费并且可能会导致高负载下的异常发生\",{\"1\":{\"213\":1}}],[\"那么后续再回滚就回滚不了了\",{\"1\":{\"210\":1}}],[\"那么对于服务器\",{\"1\":{\"1115\":1}}],[\"那么对于这些扫描到的行\",{\"1\":{\"202\":1}}],[\"那么对这两个对象中的任一对象上调用hashcode方法不要求一定生成不同的整数结果\",{\"1\":{\"682\":1}}],[\"那么对这两个对象中的每个对象调用hashcode方法都必须生成相同的整数结果\",{\"1\":{\"682\":1}}],[\"那么对数据库的改变是永久的\",{\"1\":{\"210\":1}}],[\"那么通过字符串拼接sql语句之后\",{\"1\":{\"204\":1}}],[\"那么说明执行的是增删改语句\",{\"1\":{\"201\":1}}],[\"那么说明执行的是查询语句\",{\"1\":{\"201\":1}}],[\"那么说明的是当前服务器使用的是当前协议的默认端口号\",{\"1\":{\"139\":1}}],[\"那么标准的接口具体在哪儿呢\",{\"1\":{\"191\":1}}],[\"那么需要在多个地方进行修改\",{\"1\":{\"178\":1}}],[\"那么需要返回特定的content\",{\"1\":{\"123\":1}}],[\"那么\",{\"1\":{\"167\":1,\"230\":1,\"250\":1,\"446\":1,\"518\":1,\"654\":2,\"679\":1,\"684\":2,\"999\":1}}],[\"那么会先从上到下执行构造代码块和显式赋值代码\",{\"1\":{\"489\":1}}],[\"那么会报错\",{\"1\":{\"171\":1}}],[\"那么会在当前应用下依次去查找是否存在该文件\",{\"1\":{\"139\":1}}],[\"那么会自行再次发送请求\",{\"1\":{\"113\":1}}],[\"那么服务器需要做出响应\",{\"1\":{\"127\":1}}],[\"那么浏览器会自行再次发起请求\",{\"1\":{\"124\":1}}],[\"那么应该使用浏览器可以支持的压缩算法\",{\"1\":{\"116\":1}}],[\"组装数据\",{\"0\":{\"1019\":1}}],[\"组成\",{\"1\":{\"606\":1,\"768\":1}}],[\"组成规则\",{\"0\":{\"315\":1}}],[\"组合起来\",{\"1\":{\"442\":1}}],[\"组织数据的效率不高\",{\"1\":{\"141\":1}}],[\"组件\",{\"0\":{\"66\":1}}],[\"万达超市\",{\"1\":{\"141\":1}}],[\"山姆\",{\"1\":{\"141\":1}}],[\"索引值+1\",{\"1\":{\"737\":1}}],[\"索引性能这么好\",{\"1\":{\"233\":1}}],[\"索引采用的是什么数据结构\",{\"1\":{\"233\":1}}],[\"索引树上了\",{\"1\":{\"231\":1}}],[\"索引树的\",{\"1\":{\"230\":1}}],[\"索引只和主键存储在到了一起\",{\"1\":{\"227\":1}}],[\"索引和数据是存储在同一个数据页中\",{\"1\":{\"226\":1}}],[\"索引列这一行数据对应的地址值\",{\"1\":{\"224\":1}}],[\"索引列的值\",{\"1\":{\"224\":1,\"227\":1}}],[\"索引列\",{\"1\":{\"222\":1}}],[\"索引文件\",{\"1\":{\"222\":1}}],[\"索引是不是只能是int的值\",{\"1\":{\"220\":1}}],[\"索引的生效范围是最左开始的\",{\"1\":{\"233\":1}}],[\"索引的语法\",{\"0\":{\"232\":1}}],[\"索引的名字\",{\"1\":{\"222\":1,\"232\":2}}],[\"索引的实现其实就是去介绍一下\",{\"1\":{\"221\":1}}],[\"索引的实现\",{\"0\":{\"221\":1}}],[\"索引的结构为什么选b+树\",{\"1\":{\"220\":1}}],[\"索引的数据结构\",{\"0\":{\"220\":1}}],[\"索引的维护也需要一定的时间和资源\",{\"1\":{\"218\":1}}],[\"索引类似于一部字典开头的目录\",{\"1\":{\"219\":1}}],[\"索引类似于书籍中的目录\",{\"1\":{\"218\":1}}],[\"索引其实就是一种可以帮助我们提高查询速度的数据结构\",{\"1\":{\"219\":1}}],[\"索引虽然可以提高查询效率\",{\"1\":{\"218\":1}}],[\"索引通常包括一个或多个列\",{\"1\":{\"218\":1}}],[\"索引\",{\"0\":{\"218\":1},\"1\":{\"141\":1,\"218\":1,\"231\":1}}],[\"所在的\",{\"1\":{\"868\":1}}],[\"所代表的字符串对象\",{\"1\":{\"729\":2}}],[\"所指向的对象\",{\"1\":{\"699\":1}}],[\"所属不同\",{\"1\":{\"477\":1,\"873\":1}}],[\"所谓泛型方法\",{\"1\":{\"943\":1}}],[\"所谓泛型接口\",{\"1\":{\"941\":1}}],[\"所谓泛型类\",{\"1\":{\"939\":1}}],[\"所谓的网络编程\",{\"1\":{\"885\":1}}],[\"所谓枚举类型是一个什么类型呢\",{\"1\":{\"719\":1}}],[\"所谓包装类\",{\"1\":{\"701\":1}}],[\"所谓根据需求\",{\"1\":{\"504\":1}}],[\"所谓智能是为了保证\",{\"1\":{\"488\":1}}],[\"所谓循环控制变量\",{\"1\":{\"361\":1}}],[\"所谓多分支if结构\",{\"1\":{\"358\":1}}],[\"所谓双分支if结构\",{\"1\":{\"358\":1}}],[\"所谓转义字符\",{\"1\":{\"355\":1}}],[\"所谓优先级就是在表达式运算中的运算顺序\",{\"1\":{\"350\":1}}],[\"所谓布尔类型就非常简单了\",{\"1\":{\"325\":1}}],[\"所谓字符\",{\"1\":{\"324\":1}}],[\"所谓驼峰\",{\"1\":{\"316\":1}}],[\"所谓数据仓库\",{\"1\":{\"141\":1}}],[\"所有人都可以访问到\",{\"1\":{\"1200\":1}}],[\"所有文件\",{\"1\":{\"1194\":1}}],[\"所有其他的java技术都是建立在javase之上的\",{\"1\":{\"1077\":1}}],[\"所有子实现都不允许存储重复元素\",{\"1\":{\"980\":1}}],[\"所有肯定有collection的所有方法\",{\"1\":{\"958\":1}}],[\"所有操作的数据都是针对的原有的collection\",{\"1\":{\"955\":1}}],[\"所有注解类型都隐式扩展自该接口\",{\"1\":{\"924\":1}}],[\"所有线程都wait\",{\"1\":{\"867\":1}}],[\"所有包装类型都是final修饰的\",{\"1\":{\"702\":1}}],[\"所有数值包装类型和boolean类\",{\"1\":{\"702\":1}}],[\"所有数据都会被更改\",{\"1\":{\"160\":1}}],[\"所有大于等于18岁的学生的成绩输出的工作\",{\"1\":{\"657\":1}}],[\"所有父类的构造方法都执行完毕\",{\"1\":{\"542\":1}}],[\"所有成员变量都具有默认值后\",{\"1\":{\"489\":1}}],[\"所有直接写值的量都是字面值常量\",{\"1\":{\"328\":1}}],[\"所有的提交都提交在这个分支上\",{\"1\":{\"1204\":1}}],[\"所有的请求头\",{\"1\":{\"1112\":3}}],[\"所有的具体实现都交给具体的子类\",{\"1\":{\"955\":1}}],[\"所有的资源释放\",{\"1\":{\"690\":1}}],[\"所有的数学运算都认为是是从左向右的\",{\"1\":{\"350\":1}}],[\"所有的非叶子节点\",{\"1\":{\"220\":1}}],[\"所有的一一对应的表\",{\"1\":{\"172\":1}}],[\"所有的列\",{\"1\":{\"153\":1}}],[\"所以关于转发了解即可\",{\"1\":{\"1121\":1}}],[\"所以1参是把结果包裹在一个optional对象里\",{\"1\":{\"1050\":1}}],[\"所以说\",{\"1\":{\"1013\":1}}],[\"所以说明\",{\"1\":{\"1005\":1}}],[\"所以loadfactor不建议大家调整\",{\"1\":{\"1006\":1}}],[\"所以链表太长了时会转化为红黑树\",{\"1\":{\"1002\":1}}],[\"所以肯定会遇到碰撞\",{\"1\":{\"1000\":1}}],[\"所以写代码的时候\",{\"1\":{\"969\":1}}],[\"所以算起来和arraylist类似\",{\"1\":{\"968\":1}}],[\"所以直接学习list所特有的\",{\"1\":{\"958\":1}}],[\"所以直接用父类引用接收完全不会有任何问题\",{\"1\":{\"653\":1}}],[\"所以ft类型和子类一致\",{\"1\":{\"940\":1}}],[\"所以ft为integer\",{\"1\":{\"940\":1}}],[\"所以ft为string\",{\"1\":{\"940\":1}}],[\"所以final修饰静态成员变量\",{\"1\":{\"571\":1}}],[\"所以默认为object\",{\"1\":{\"940\":1}}],[\"所以tcp网络编程需要使用java\",{\"1\":{\"885\":1}}],[\"所以本章节的内容以实现功能为主\",{\"1\":{\"885\":1}}],[\"所以后面的描述中都是假定操作同一个锁\",{\"1\":{\"868\":1}}],[\"所以高级功能的特点它都有\",{\"1\":{\"777\":1}}],[\"所以实际上\",{\"1\":{\"723\":1}}],[\"所以实际开发中\",{\"1\":{\"570\":1,\"649\":1}}],[\"所以枚举类型就是一个普通类\",{\"1\":{\"719\":1}}],[\"所以枚举类型就不能再继承其他类了\",{\"1\":{\"719\":1}}],[\"所以集合中就要用包装类型替代基本数据类型\",{\"1\":{\"712\":1}}],[\"所以浮点型包装类型如果直接用字面值赋值\",{\"1\":{\"710\":1}}],[\"所以为了弥补基本数据类型变量非对象的尴尬境地\",{\"1\":{\"701\":1}}],[\"所以为了能够在类的外部调用该类的clone方法\",{\"1\":{\"694\":1}}],[\"所以很明显\",{\"1\":{\"700\":1}}],[\"所以很多中低级程序员\",{\"1\":{\"658\":1}}],[\"所以很多书籍也把成员变量称之为\",{\"1\":{\"457\":1}}],[\"所以很多开发者在开发java时\",{\"1\":{\"395\":1}}],[\"所以instanceof的结果就是true\",{\"1\":{\"696\":1}}],[\"所以以后大家做i\",{\"1\":{\"690\":1}}],[\"所以要想操作这些被永久保存的数据\",{\"1\":{\"766\":1}}],[\"所以要想唯一确定一个方法\",{\"1\":{\"389\":1}}],[\"所以要注意以下\",{\"1\":{\"708\":1}}],[\"所以要搞明白finalize方法的作用\",{\"1\":{\"688\":1}}],[\"所以文档说明中推荐子类重写该方法\",{\"1\":{\"668\":1}}],[\"所以下面补充一下tostring\",{\"1\":{\"667\":1}}],[\"所以object类当中的clone方法默认实现\",{\"1\":{\"693\":1}}],[\"所以object类当中的方法实现就可以作为接口抽象方法的实现\",{\"1\":{\"652\":1}}],[\"所以object类当中hashcode\",{\"1\":{\"667\":1}}],[\"所以某个类的运行时类对象\",{\"1\":{\"663\":1}}],[\"所以该方法的作用是\",{\"1\":{\"672\":1}}],[\"所以该方法是一个本地方法\",{\"1\":{\"663\":1}}],[\"所以该方法此时接收的实际上是一个\",{\"1\":{\"353\":1}}],[\"所以必须直接调用方法\",{\"1\":{\"653\":1}}],[\"所以必须要先选择数据库\",{\"1\":{\"152\":1}}],[\"所以局部内部类的使用场景\",{\"1\":{\"649\":1}}],[\"所以首先外部其他类需要有外部类的访问权限\",{\"1\":{\"617\":1}}],[\"所以得先存在外部类对象才行\",{\"1\":{\"616\":2}}],[\"所以接口往往只有对行为的抽象\",{\"1\":{\"598\":1}}],[\"所以单独的行为不应该被抽象为类\",{\"1\":{\"595\":1}}],[\"所以抽象类虽然不能创建对象\",{\"1\":{\"592\":1}}],[\"所以jdk1\",{\"1\":{\"969\":1}}],[\"所以java当中hashcode方法\",{\"1\":{\"680\":1}}],[\"所以java当中提供了检测手段\",{\"1\":{\"586\":1}}],[\"所以java允许lambda表达式的抽象方法的实现可以直接指向一个已经存在的方法\",{\"1\":{\"654\":1}}],[\"所以jvm在进行类加载时是\",{\"1\":{\"456\":1}}],[\"所以强转能够成功的前提条件是\",{\"1\":{\"585\":1}}],[\"所以强类型语言编写的程序不会因为数据类型的随意转换而出错\",{\"1\":{\"319\":1}}],[\"所以可以随机访问\",{\"1\":{\"948\":1}}],[\"所以可以用多个字节值\",{\"1\":{\"729\":2}}],[\"所以可以直接访问\",{\"1\":{\"615\":1}}],[\"所以可以直接在类中成员方法中输出它\",{\"1\":{\"544\":1}}],[\"所以可以是强转后的引用的类型的对象或者子类对象\",{\"1\":{\"585\":1}}],[\"所以可以省略一点点\",{\"1\":{\"153\":1}}],[\"所以就需要子类对象的显式初始化\",{\"1\":{\"543\":1}}],[\"所以protected修饰符没有讲解\",{\"1\":{\"534\":1}}],[\"所以引用数据类型的强制类型转换想要完成\",{\"1\":{\"529\":1}}],[\"所以引用数据类型的强制类型转换也称之为\",{\"1\":{\"529\":1}}],[\"所以引用数据类型的自动类型转换也称之为\",{\"1\":{\"528\":1}}],[\"所以只要\",{\"1\":{\"674\":1}}],[\"所以只可能是转换了引用的类型\",{\"1\":{\"526\":1}}],[\"所以只有int及以上数据类型的取值范围比char类型大\",{\"1\":{\"338\":1}}],[\"所以子类往往比父类的功能更加强大\",{\"1\":{\"520\":1}}],[\"所以依据这一点\",{\"1\":{\"490\":1}}],[\"所以构造代码块也会随之执行一次\",{\"1\":{\"488\":1}}],[\"所以当存在需要所有对象共享的变量时\",{\"1\":{\"478\":1}}],[\"所以也称为对象变量\",{\"1\":{\"477\":1}}],[\"所以也称为为类变量\",{\"1\":{\"477\":1}}],[\"所以访问类的静态成员\",{\"1\":{\"476\":1}}],[\"所以static方法不能直接访问类的成员\",{\"1\":{\"462\":1}}],[\"所以scanner也有必要学习了解一下\",{\"1\":{\"351\":1}}],[\"所以一旦访问方法的局部变量\",{\"1\":{\"645\":1}}],[\"所以一般的class的访问权限修饰符只有两种\",{\"1\":{\"508\":1}}],[\"所以一般都是名词\",{\"1\":{\"469\":1}}],[\"所以一般情况下\",{\"1\":{\"442\":1,\"461\":1}}],[\"所以一定要搞清楚\",{\"1\":{\"456\":1}}],[\"所以基本数据类型叫\",{\"1\":{\"456\":1}}],[\"所以基于mysql的一个分支\",{\"1\":{\"143\":1}}],[\"所以对象也称为实例\",{\"1\":{\"447\":1}}],[\"所以对于innodb的表来说\",{\"1\":{\"226\":1}}],[\"所以产生异常之前的代码是可以正常执行的\",{\"1\":{\"410\":1}}],[\"所以new关键字的语义就是\",{\"1\":{\"403\":1}}],[\"所以数组在实际开发中很少直接被使用\",{\"1\":{\"394\":1}}],[\"所以方法的重载是有条件的\",{\"1\":{\"387\":1}}],[\"所以循环中也能使用return\",{\"1\":{\"378\":1}}],[\"所以return的使用场景极多\",{\"1\":{\"378\":1}}],[\"所以如果想把整个小组都拉进来\",{\"1\":{\"1200\":1}}],[\"所以如果想要实现数组元素删除和新增\",{\"1\":{\"421\":1}}],[\"所以如果错误估计\",{\"1\":{\"960\":1}}],[\"所以如果需要给父类成员变量直接赋值是做不到的\",{\"1\":{\"543\":1}}],[\"所以如果希望一个方法能够更方便快捷的去调用\",{\"1\":{\"478\":1}}],[\"所以如果你仅仅是想看一下数组里的元素长啥样\",{\"1\":{\"416\":1}}],[\"所以如果是用来打印图形的话\",{\"1\":{\"370\":1}}],[\"所以如果要区分单词\",{\"1\":{\"149\":1}}],[\"所以do\",{\"1\":{\"364\":1}}],[\"所以整体称之为转义字符\",{\"1\":{\"355\":1}}],[\"所以总体而言scanner对于web开发并没有太大的实际作用\",{\"1\":{\"351\":1}}],[\"所以它相对于collection增加了很多下标相关的api\",{\"1\":{\"958\":1}}],[\"所以它操作的数据都是原有集合的\",{\"1\":{\"955\":1}}],[\"所以它必须要修饰java代码的一个结构\",{\"1\":{\"924\":1}}],[\"所以它访问方法的局部变量\",{\"1\":{\"656\":1}}],[\"所以它不能去修饰匿名对象\",{\"1\":{\"572\":1}}],[\"所以它是一个匿名类\",{\"1\":{\"647\":1}}],[\"所以它是内部类中的异类\",{\"1\":{\"625\":1}}],[\"所以它是\",{\"1\":{\"482\":1}}],[\"所以它应该加在for或者while关键字的头上\",{\"1\":{\"376\":1}}],[\"所以它一定会有一个结果\",{\"1\":{\"349\":1}}],[\"所以它们肯定还要继承猫和狗这两个类\",{\"1\":{\"595\":1}}],[\"所以它们的区别在于\",{\"1\":{\"406\":1}}],[\"所以它们能够表示的数值范围我们必须要知道\",{\"1\":{\"326\":1}}],[\"所以它们不需要多表设计\",{\"1\":{\"171\":1}}],[\"所以位运算符的最大优点是运算效率高\",{\"1\":{\"348\":1}}],[\"所以建议\",{\"1\":{\"347\":1}}],[\"所以建议删掉表重新建表\",{\"1\":{\"157\":1}}],[\"所以编译器能够自动判断整型常量是否在接收数据类型的范围内\",{\"1\":{\"342\":1}}],[\"所以编译器不会自动完成类型转换\",{\"1\":{\"339\":1}}],[\"所以结果即便不测试也是和\",{\"1\":{\"557\":1}}],[\"所以结果\",{\"1\":{\"340\":1}}],[\"所以能够自动发生\",{\"1\":{\"339\":1}}],[\"所以精度是受限的\",{\"1\":{\"336\":1}}],[\"所以变量的声明语法就需要两个部分\",{\"1\":{\"333\":1}}],[\"所以输出107\",{\"1\":{\"324\":1}}],[\"所以这一列数据都代表某个学生的学校信息\",{\"1\":{\"924\":1}}],[\"所以这里创建成员内部类对象的方式就是\",{\"1\":{\"616\":1}}],[\"所以这里要重新认识一个概念\",{\"1\":{\"497\":1}}],[\"所以这个过程不需要写额外代码\",{\"1\":{\"528\":1}}],[\"所以这个引用中存的对象地址和原先的引用一样\",{\"1\":{\"425\":1}}],[\"所以这就导致\",{\"1\":{\"323\":1}}],[\"所以这样就能保证插入的效率会比较稳定\",{\"1\":{\"233\":1}}],[\"所以\",{\"1\":{\"323\":1,\"327\":1,\"349\":1,\"363\":1,\"403\":1,\"430\":1,\"447\":1,\"460\":1,\"478\":1,\"490\":1,\"510\":1,\"533\":2,\"541\":1,\"599\":1,\"646\":1,\"652\":1,\"666\":1,\"719\":1,\"1012\":1}}],[\"所以大多数成规模的公司都对程序员的代码注释有要求\",{\"1\":{\"319\":1}}],[\"所以unicode\",{\"1\":{\"315\":1}}],[\"所以标识符的命名从语法上来说\",{\"1\":{\"315\":1}}],[\"所以其实使用起来不太方便\",{\"1\":{\"287\":1}}],[\"所以第二次sql语句就会立马执行\",{\"1\":{\"283\":1}}],[\"所以不可能直接加个方法到cat类和dog类中\",{\"1\":{\"595\":1}}],[\"所以不能在里面调用非静态\",{\"1\":{\"496\":1}}],[\"所以不推荐大家使用这个\",{\"1\":{\"265\":1}}],[\"所以不得不回表\",{\"1\":{\"230\":1}}],[\"所以没映射上\",{\"1\":{\"259\":1}}],[\"所以最终三层可以存储1170\",{\"1\":{\"233\":1}}],[\"所以推荐自己定义主键\",{\"1\":{\"233\":1}}],[\"所以使用有如下问题\",{\"1\":{\"353\":1}}],[\"所以使用覆盖索引是一个常用的性能优化手段\",{\"1\":{\"231\":1}}],[\"所以使用get请求发送的数据长度有限制\",{\"1\":{\"115\":1}}],[\"所以的非叶子节点\",{\"1\":{\"220\":1}}],[\"所以配置文件的名字和位置都只能是固定的\",{\"1\":{\"215\":1}}],[\"所以现在一般都是一些老项目在使用\",{\"1\":{\"214\":1}}],[\"所以索性有一些公司就自己开始开发了\",{\"1\":{\"214\":1}}],[\"所以where条件相当于会没有任何条件\",{\"1\":{\"204\":1}}],[\"所以在哈希映射中\",{\"1\":{\"679\":1}}],[\"所以在很多时候\",{\"1\":{\"571\":1}}],[\"所以在很多java开发规范中\",{\"1\":{\"518\":1}}],[\"所以在对某个类做任何操作之前\",{\"1\":{\"456\":1}}],[\"所以在java当中\",{\"1\":{\"327\":1}}],[\"所以在最开始创建表的时候\",{\"1\":{\"153\":1}}],[\"所以在使用浮点数时需要注意\",{\"1\":{\"153\":1}}],[\"所以需要注意\",{\"1\":{\"956\":1,\"1037\":1}}],[\"所以需要泛型\",{\"1\":{\"942\":1}}],[\"所以需要自己重写equals方法的实现\",{\"1\":{\"673\":1}}],[\"所以需要使用动态sql\",{\"1\":{\"263\":1}}],[\"所以需要进入库中\",{\"1\":{\"152\":1}}],[\"所以需要把zhangsan进行编码\",{\"1\":{\"149\":1}}],[\"所以我们可以使用这种形式\",{\"1\":{\"944\":1}}],[\"所以我们可以这么做\",{\"1\":{\"581\":1}}],[\"所以我们需要追踪文本文件\",{\"1\":{\"1192\":1}}],[\"所以我们需要帮助编译器\",{\"1\":{\"653\":1}}],[\"所以我们需要\",{\"1\":{\"375\":1}}],[\"所以我们需要了解数据库的备份和恢复手段\",{\"1\":{\"186\":1}}],[\"所以我们在java开发中碰到的变量\",{\"1\":{\"327\":1}}],[\"所以我们在设计表的时候\",{\"1\":{\"176\":1}}],[\"所以我们也可以做一点省略\",{\"1\":{\"153\":1}}],[\"所以我们一般不用utf8\",{\"1\":{\"149\":1}}],[\"所以我们的server是一直启动着的\",{\"1\":{\"147\":1}}],[\"所以学习的顺序是\",{\"1\":{\"146\":1}}],[\"所以目前公司使用它的较少\",{\"1\":{\"144\":1}}],[\"所以性能比较好\",{\"1\":{\"144\":1}}],[\"所以速度比较慢\",{\"1\":{\"144\":1}}],[\"所以拿响应体\",{\"1\":{\"123\":1}}],[\"所以你无需担心它的长度\",{\"1\":{\"8\":1}}],[\"熟练git的核心命令\",{\"1\":{\"1182\":1}}],[\"熟练使用需要时间锻炼\",{\"1\":{\"657\":1}}],[\"熟练掌握对常见的场景进行map的使用\",{\"1\":{\"994\":1}}],[\"熟练掌握set的使用场景\",{\"1\":{\"979\":1}}],[\"熟练掌握什么场景下使用collection及其子类\",{\"1\":{\"951\":1}}],[\"熟练掌握类加载时机\",{\"1\":{\"909\":1}}],[\"熟练掌握字节流\",{\"1\":{\"778\":1}}],[\"熟练掌握lambda表达式使用\",{\"1\":{\"644\":1}}],[\"熟练掌握匿名内部类使用\",{\"1\":{\"644\":1}}],[\"熟练掌握多表查询\",{\"1\":{\"140\":1}}],[\"熟悉使用session存储和获取信息\",{\"1\":{\"1136\":1}}],[\"熟悉cookie的获取\",{\"1\":{\"1136\":1}}],[\"熟悉servletcontext的功能\",{\"1\":{\"1075\":1}}],[\"熟悉servlet使用和相关配置\",{\"1\":{\"1075\":1}}],[\"熟悉servlet的执行流程和生命周期\",{\"1\":{\"1075\":1}}],[\"熟悉2个元注解的作用\",{\"1\":{\"924\":1}}],[\"熟悉了解自定义类加载器与双亲委派模型\",{\"1\":{\"909\":1}}],[\"熟悉类加载过程与类加载器\",{\"1\":{\"909\":1}}],[\"熟悉其他流\",{\"1\":{\"778\":1}}],[\"熟悉字符流\",{\"1\":{\"778\":1}}],[\"熟悉file中api\",{\"1\":{\"765\":1}}],[\"熟悉常见异常\",{\"1\":{\"745\":1}}],[\"熟悉不同内部类的访问特点\",{\"1\":{\"606\":1}}],[\"熟悉不同内部类的语法\",{\"1\":{\"606\":1}}],[\"熟悉库\",{\"1\":{\"140\":1}}],[\"查方法\",{\"1\":{\"951\":1}}],[\"查数据\",{\"1\":{\"283\":1}}],[\"查找方法\",{\"1\":{\"1016\":1}}],[\"查找数据的效率\",{\"1\":{\"1006\":1}}],[\"查找数据接口\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"查找也需要时间\",{\"1\":{\"968\":1}}],[\"查找首次出现的指定字符串的位置\",{\"1\":{\"737\":2}}],[\"查找首次出现的指定字符的位置\",{\"1\":{\"737\":2}}],[\"查找当前字符串中\",{\"1\":{\"737\":2}}],[\"查找代码问题的方式\",{\"1\":{\"319\":1}}],[\"查找\",{\"1\":{\"244\":1,\"728\":1,\"957\":2}}],[\"查找单个数据方便\",{\"1\":{\"220\":1}}],[\"查找单个值\",{\"1\":{\"220\":4}}],[\"查找范围值不方便\",{\"1\":{\"220\":1}}],[\"查找范围值\",{\"1\":{\"220\":4}}],[\"查\",{\"0\":{\"197\":1}}],[\"查询出来使用stream来做封装也可以\",{\"1\":{\"1134\":1}}],[\"查询会员信息\",{\"1\":{\"1132\":1}}],[\"查询方法\",{\"1\":{\"953\":1}}],[\"查询商品\",{\"1\":{\"601\":1}}],[\"查询的结果\",{\"1\":{\"283\":1}}],[\"查询的效率固然会提升\",{\"1\":{\"233\":1}}],[\"查询的效率也变高了\",{\"1\":{\"220\":1}}],[\"查询\",{\"0\":{\"240\":1},\"1\":{\"420\":1}}],[\"查询标签\",{\"1\":{\"234\":1}}],[\"查询user表\",{\"1\":{\"234\":1}}],[\"查询到的结果是主键\",{\"1\":{\"233\":1}}],[\"查询速度很慢\",{\"1\":{\"233\":1}}],[\"查询速度快\",{\"1\":{\"233\":1}}],[\"查询主键索引树\",{\"1\":{\"233\":1}}],[\"查询中\",{\"1\":{\"232\":1,\"233\":1}}],[\"查询索引\",{\"1\":{\"232\":1}}],[\"查询效率会变高\",{\"1\":{\"220\":1}}],[\"查询效率变高了\",{\"1\":{\"178\":1,\"220\":1}}],[\"查询范围值需要在父子节点之前反复查找\",{\"1\":{\"220\":1}}],[\"查询范围值\",{\"1\":{\"220\":5}}],[\"查询单个值\",{\"1\":{\"220\":5}}],[\"查询班级\",{\"1\":{\"168\":1}}],[\"查询班级情况\",{\"1\":{\"168\":1}}],[\"查询班级平均分\",{\"1\":{\"168\":1}}],[\"查询班级语文总分大于200的班级\",{\"1\":{\"168\":1}}],[\"查询全体学生的语数外各科平均成绩\",{\"1\":{\"168\":2}}],[\"查询外语最小值\",{\"1\":{\"168\":2}}],[\"查询每个同学的总成绩\",{\"1\":{\"168\":2}}],[\"查询各科只要有一科及格的同学姓名\",{\"1\":{\"162\":1}}],[\"查询各科都及格的同学姓名\",{\"1\":{\"162\":2}}],[\"查询姓贾的同学\",{\"1\":{\"162\":2}}],[\"查询一班和二班的同学信息\",{\"1\":{\"162\":2}}],[\"查询有一科成绩小于60的同学信息\",{\"1\":{\"162\":1}}],[\"查询数学最大值\",{\"1\":{\"168\":2}}],[\"查询数学成绩在\",{\"1\":{\"162\":2}}],[\"查询数据\",{\"0\":{\"159\":1}}],[\"查询语文分数在\",{\"1\":{\"162\":1}}],[\"查询语数外总成绩大于\",{\"1\":{\"162\":2}}],[\"查询语句\",{\"1\":{\"159\":1,\"162\":1}}],[\"查询操作\",{\"1\":{\"140\":2}}],[\"查看仓库中的所有的版本信息\",{\"1\":{\"1198\":1}}],[\"查看用户信息\",{\"1\":{\"1130\":1}}],[\"查看通过get和post请求获得的请求参数\",{\"1\":{\"1119\":1}}],[\"查看java\",{\"1\":{\"924\":1}}],[\"查看类加载器\",{\"1\":{\"912\":1}}],[\"查看类中所有方法的快捷键\",{\"1\":{\"198\":1}}],[\"查看boolean包装类的valueof方法可以发现\",{\"1\":{\"711\":1}}],[\"查看浮点型包装类的valueof方法可以发现\",{\"1\":{\"710\":1}}],[\"查看下列代码\",{\"1\":{\"700\":1}}],[\"查看英文文档中\",{\"1\":{\"522\":1}}],[\"查看运行结果\",{\"1\":{\"319\":1}}],[\"查看每个班级的语文总分\",{\"1\":{\"168\":1}}],[\"查看每个班级有多少人数\",{\"1\":{\"168\":1}}],[\"查看图书表创建语句\",{\"1\":{\"155\":1}}],[\"查看学生表创建语句\",{\"1\":{\"155\":1}}],[\"查看表的创建语句\",{\"1\":{\"155\":1}}],[\"查看表格结构\",{\"1\":{\"155\":1}}],[\"查看表\",{\"0\":{\"155\":1}}],[\"查看所有分支\",{\"1\":{\"1204\":1}}],[\"查看所有表\",{\"1\":{\"155\":1}}],[\"查看所有的校对规则\",{\"1\":{\"149\":1}}],[\"查看所有的字符集\",{\"1\":{\"149\":1}}],[\"查看所有数据库\",{\"1\":{\"148\":1}}],[\"查看创建db\",{\"1\":{\"148\":1}}],[\"查看创建数据库命令\",{\"1\":{\"148\":1}}],[\"查看库\",{\"0\":{\"148\":1}}],[\"查看日志数据即可\",{\"1\":{\"139\":1}}],[\"查看详情\",{\"1\":{\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1}}],[\"内置数据类型\",{\"1\":{\"456\":1}}],[\"内置的别名\",{\"1\":{\"257\":1}}],[\"内层for应该遍历每一个一维数组\",{\"1\":{\"440\":1}}],[\"内层for控制列数\",{\"1\":{\"370\":1}}],[\"内层for就要执行6次\",{\"1\":{\"367\":1}}],[\"内连接的语法如下\",{\"1\":{\"182\":1}}],[\"内连接\",{\"0\":{\"182\":1},\"1\":{\"182\":1}}],[\"内连接和外连接的区别及联系\",{\"1\":{\"140\":1}}],[\"内部\",{\"1\":{\"623\":1}}],[\"内部类对象\",{\"0\":{\"644\":1}}],[\"内部类要说使用频率\",{\"1\":{\"643\":1}}],[\"内部类也是类\",{\"1\":{\"631\":1}}],[\"内部类和外部类是\",{\"1\":{\"626\":1}}],[\"内部类和包裹它的类互相成为了\",{\"1\":{\"607\":1}}],[\"内部类可以继承和实现外部的类和接口\",{\"1\":{\"613\":1}}],[\"内部类\",{\"1\":{\"608\":3}}],[\"内部类的缺点也是显而易见\",{\"1\":{\"643\":1}}],[\"内部类的缺点\",{\"1\":{\"643\":1}}],[\"内部类的优缺点和使用场景\",{\"0\":{\"643\":1}}],[\"内部类的成员不仅被类自身保护\",{\"1\":{\"607\":1}}],[\"内部类的主要特点\",{\"1\":{\"607\":1}}],[\"内部类是一种比类更加极致的封装思想体现\",{\"1\":{\"607\":1}}],[\"内部类就可以访问包裹它的类的所有成员\",{\"1\":{\"607\":1}}],[\"内部类就有了私有之类的概念\",{\"1\":{\"508\":1}}],[\"内部的位置都可以认为是局部位置\",{\"1\":{\"331\":1}}],[\"内部的锁造成的\",{\"1\":{\"156\":1}}],[\"内部组织形式\",{\"1\":{\"140\":1}}],[\"内存空间已经申请\",{\"1\":{\"925\":1}}],[\"内存泄漏\",{\"1\":{\"925\":1}}],[\"内存的管理是由垃圾回收器自动管理的\",{\"1\":{\"925\":1}}],[\"内存的申请和释放\",{\"1\":{\"925\":1}}],[\"内存的大小有限\",{\"1\":{\"780\":1}}],[\"内存管理\",{\"1\":{\"925\":1}}],[\"内存中可以运行多个进程\",{\"1\":{\"828\":1}}],[\"内存中只能运行一个进程\",{\"1\":{\"828\":1}}],[\"内存及原理解析\",{\"1\":{\"474\":1}}],[\"内存图如下\",{\"1\":{\"434\":2}}],[\"内存共分为\",{\"1\":{\"403\":1}}],[\"内存单元存储的数据就是变量的值\",{\"1\":{\"330\":1}}],[\"内存是\",{\"1\":{\"263\":1}}],[\"内存\",{\"1\":{\"142\":1,\"766\":1,\"782\":2}}],[\"内容是标签内的内容\",{\"1\":{\"267\":1}}],[\"内容类型\",{\"1\":{\"116\":1}}],[\"内容\",{\"1\":{\"54\":1,\"1111\":1,\"1113\":1}}],[\"非静态方法\",{\"1\":{\"873\":1}}],[\"非强制\",{\"1\":{\"598\":2}}],[\"非static嵌套类才被成为内部类\",{\"1\":{\"623\":1}}],[\"非static\",{\"0\":{\"477\":1}}],[\"非空\",{\"1\":{\"867\":4}}],[\"非空为有参构造方法\",{\"1\":{\"464\":1}}],[\"非空格\",{\"1\":{\"353\":1}}],[\"非局部位置的成员位置\",{\"1\":{\"457\":1}}],[\"非随机访问\",{\"1\":{\"394\":1}}],[\"非制表符\",{\"1\":{\"353\":1}}],[\"非换行符\",{\"1\":{\"353\":1}}],[\"非常的复杂\",{\"1\":{\"1120\":1}}],[\"非常特殊的写法\",{\"1\":{\"1090\":1}}],[\"非常麻烦\",{\"1\":{\"950\":1}}],[\"非常相似\",{\"1\":{\"936\":1}}],[\"非常有学习的必要\",{\"1\":{\"721\":1}}],[\"非常有价值\",{\"1\":{\"537\":1}}],[\"非常简单\",{\"1\":{\"508\":1,\"532\":1,\"667\":1}}],[\"非常不建议这么做\",{\"1\":{\"367\":1}}],[\"非常多都是引用数据类型\",{\"1\":{\"327\":1}}],[\"非常重要\",{\"1\":{\"140\":1,\"658\":1,\"1100\":1}}],[\"非聚集索引\",{\"1\":{\"224\":1}}],[\"非主键索引是指根据其他的列建立的索引\",{\"1\":{\"227\":1}}],[\"非主键索引\",{\"0\":{\"224\":1,\"227\":1},\"1\":{\"226\":1}}],[\"非持久化\",{\"1\":{\"142\":1}}],[\"非关系型数据库为辅的用法\",{\"1\":{\"144\":1}}],[\"非关系型数据库是在传统关系型数据库基础上\",{\"1\":{\"144\":1}}],[\"非关系型数据库一般是存在内存中的\",{\"1\":{\"144\":1}}],[\"非关系型数据库\",{\"0\":{\"144\":1},\"1\":{\"140\":1,\"144\":1}}],[\"非对称加密\",{\"1\":{\"125\":1}}],[\"关联的sql语句坐标\",{\"1\":{\"279\":1}}],[\"关联的是集合\",{\"1\":{\"279\":1}}],[\"关联单个bean的时候\",{\"1\":{\"276\":1}}],[\"关羽\",{\"1\":{\"278\":1}}],[\"关闭服务器\",{\"1\":{\"1153\":1}}],[\"关闭浏览器\",{\"0\":{\"1155\":1},\"1\":{\"1147\":1}}],[\"关闭流\",{\"1\":{\"1129\":1}}],[\"关闭整个tcp连接\",{\"1\":{\"907\":1}}],[\"关闭线程池\",{\"1\":{\"880\":1}}],[\"关闭此输出流并释放与此流有关的所有系统资源\",{\"1\":{\"786\":1}}],[\"关闭资源\",{\"1\":{\"203\":2}}],[\"关闭\",{\"1\":{\"201\":1}}],[\"关闭连接\",{\"1\":{\"200\":1,\"234\":1}}],[\"关键点就在于nested和inner的区别\",{\"1\":{\"623\":1}}],[\"关键字定义一个接口类型\",{\"1\":{\"924\":1}}],[\"关键字定义一个注解类型时\",{\"1\":{\"924\":1}}],[\"关键字位置不要写反了\",{\"1\":{\"596\":1}}],[\"关键字后\",{\"1\":{\"520\":1}}],[\"关键字包括\",{\"1\":{\"375\":1}}],[\"关键字往往都用来表示一种程序的结构或者修饰一些程序的结构等等\",{\"1\":{\"311\":1}}],[\"关键字在java语法中都有特定的含义\",{\"1\":{\"311\":1}}],[\"关键字有什么作用\",{\"1\":{\"311\":1}}],[\"关键字有什么特点\",{\"1\":{\"311\":1}}],[\"关键字是java语法具有特定含义的小写单词\",{\"1\":{\"311\":1}}],[\"关键字是被java语法赋予特定含义的单词\",{\"1\":{\"311\":1}}],[\"关键字都是合法的单词\",{\"1\":{\"311\":1}}],[\"关键字的特点是\",{\"1\":{\"311\":1}}],[\"关键字的定义是\",{\"1\":{\"311\":1}}],[\"关键字\",{\"0\":{\"311\":1},\"1\":{\"312\":1,\"596\":1,\"924\":1}}],[\"关键字用来为表和字段指定别名\",{\"1\":{\"165\":1}}],[\"关键字并指定查询条件|表达式\",{\"1\":{\"162\":2}}],[\"关键词\",{\"1\":{\"159\":1}}],[\"关于class\",{\"0\":{\"917\":1}}],[\"关于compareto方法\",{\"1\":{\"739\":1}}],[\"关于反编译工具cfr的使用\",{\"1\":{\"719\":1}}],[\"关于哈希表\",{\"1\":{\"678\":1}}],[\"关于tostring\",{\"1\":{\"666\":1}}],[\"关于泛型后面会详细讲\",{\"1\":{\"660\":1}}],[\"关于访问权限的概念\",{\"1\":{\"534\":1}}],[\"关于类加载各步骤\",{\"1\":{\"497\":1}}],[\"关于类加载\",{\"1\":{\"456\":1}}],[\"关于增强for会在学习集合时\",{\"1\":{\"417\":1}}],[\"关于java的垃圾回收机制\",{\"1\":{\"407\":1}}],[\"关于编码的相关概念\",{\"1\":{\"324\":1}}],[\"关于如何写注释\",{\"1\":{\"319\":1}}],[\"关于注释\",{\"1\":{\"319\":1}}],[\"关于三种注释方式\",{\"1\":{\"318\":1}}],[\"关于数据库这块\",{\"1\":{\"212\":1}}],[\"关于字符集和校对规则的说明\",{\"0\":{\"157\":1}}],[\"关于这些扩展\",{\"1\":{\"55\":1}}],[\"关系紧密\",{\"1\":{\"658\":1}}],[\"关系\",{\"1\":{\"350\":1,\"454\":1,\"523\":2,\"533\":1,\"595\":1,\"597\":2,\"606\":1}}],[\"关系型数据库中的记录转化为\",{\"1\":{\"234\":1}}],[\"关系型数据库以数据和数据之间存在的关系维护数据\",{\"1\":{\"144\":1}}],[\"关系型数据库和非关系型数据库\",{\"1\":{\"144\":1}}],[\"关系型数据库的数据\",{\"1\":{\"144\":1}}],[\"关系型数据库表示这种数据库\",{\"1\":{\"143\":1}}],[\"关系型数据库\",{\"0\":{\"143\":1},\"1\":{\"144\":1,\"171\":1,\"220\":1}}],[\"关系数据库开始兴起\",{\"1\":{\"142\":1}}],[\"关注防火墙\",{\"1\":{\"139\":1}}],[\"把日常的代码\",{\"1\":{\"1205\":1}}],[\"把1\",{\"1\":{\"1203\":2}}],[\"把缓冲区中的变化\",{\"1\":{\"1202\":1}}],[\"把最新的本地代码推送上去\",{\"1\":{\"1201\":1}}],[\"把远程仓库\",{\"1\":{\"1192\":1}}],[\"把这个通过响应报文给到浏览器\",{\"1\":{\"1142\":1}}],[\"把添加流程弄懂\",{\"1\":{\"1016\":1}}],[\"把添加的流程答出来\",{\"1\":{\"1002\":1}}],[\"把所有的参数封装为数组\",{\"1\":{\"1109\":1}}],[\"把所有的zs\",{\"1\":{\"956\":1}}],[\"把所有数据用一根线儿串起来\",{\"1\":{\"957\":1}}],[\"把所有构造器都需要执行的代码\",{\"1\":{\"490\":1}}],[\"把原集合中加了几个元素\",{\"1\":{\"955\":1}}],[\"把接口与实现隔离\",{\"1\":{\"955\":1}}],[\"把它赋值为null\",{\"1\":{\"954\":1}}],[\"把elementdata的所有数据\",{\"1\":{\"954\":1}}],[\"把泛型定义在方法上\",{\"1\":{\"943\":1}}],[\"把符号引\",{\"1\":{\"910\":1}}],[\"把要发送的数据封装成数据报包\",{\"1\":{\"887\":1,\"892\":1,\"894\":2}}],[\"把对方唤醒\",{\"1\":{\"872\":1}}],[\"把对象持久化保存\",{\"1\":{\"822\":1}}],[\"把对象数据转为二进制数据\",{\"1\":{\"822\":1}}],[\"把对象转换成字符串\",{\"1\":{\"666\":1}}],[\"把实现了runnable接口的子类对象作为参数传递\",{\"1\":{\"850\":3}}],[\"把中断信息保存log\",{\"1\":{\"844\":1}}],[\"把t这个线程设置为守护线程\",{\"1\":{\"842\":1}}],[\"把二进制数据还原回对象数据的过程\",{\"1\":{\"822\":1}}],[\"把任意类型的数据\",{\"1\":{\"820\":1}}],[\"把不同的数据类型\",{\"1\":{\"818\":1}}],[\"把计算机看懂的东西\",{\"1\":{\"800\":1}}],[\"把人看懂的东西\",{\"1\":{\"800\":1}}],[\"把一个数组复制到另外一个数组\",{\"1\":{\"954\":1}}],[\"把一个类型\",{\"1\":{\"942\":1}}],[\"把一个复杂的大规模的问题\",{\"1\":{\"442\":1}}],[\"把一字符串数据转为二进制数据存到计算机的过程\",{\"1\":{\"800\":1}}],[\"把内存的数据写到新文件\",{\"1\":{\"796\":1}}],[\"把数据封装成包\",{\"1\":{\"893\":1}}],[\"把数据读取到内存里\",{\"1\":{\"796\":1}}],[\"把数据库中的字段\",{\"1\":{\"261\":1}}],[\"把转换后的2部分进行拼接\",{\"1\":{\"738\":1}}],[\"把剩余的字符串取出来\",{\"1\":{\"738\":1}}],[\"把字符串全部转换为大写\",{\"1\":{\"738\":2}}],[\"把字符串全部转化为小写\",{\"1\":{\"738\":2}}],[\"把字符数组转换成字符串\",{\"1\":{\"738\":2}}],[\"把各种基本数据类型和对象转换成字符串\",{\"1\":{\"738\":2}}],[\"把string字符串转换成各种基本数据类型\",{\"1\":{\"705\":1}}],[\"把sql准备好\",{\"1\":{\"156\":1}}],[\"把包装类的引用数据类型类型变量\",{\"1\":{\"703\":1}}],[\"把包复制到项目中\",{\"1\":{\"192\":1}}],[\"把基本数据类型变量\",{\"1\":{\"703\":1}}],[\"把子类对象赋值给父类的引用\",{\"1\":{\"579\":1}}],[\"把子类的引用转换成父类的引用\",{\"1\":{\"528\":1}}],[\"把父类的引用转换成子类的引用时\",{\"1\":{\"529\":1}}],[\"把抽象出来的数据\",{\"1\":{\"515\":1}}],[\"把和给区分开来了\",{\"1\":{\"510\":1}}],[\"把jvm一个类的过程\",{\"1\":{\"456\":1}}],[\"把java对象转化为关系型数据库中的记录的这么一个框架\",{\"1\":{\"234\":1}}],[\"把表格中的一列数据看成是一个一维数组\",{\"1\":{\"431\":1}}],[\"把下标为和元素互换即可\",{\"1\":{\"419\":1}}],[\"把第一个数组的地址赋值给第二个数组\",{\"1\":{\"409\":1}}],[\"把东西一个一个单独带回家\",{\"1\":{\"392\":1}}],[\"把定义在局部位置的变量称之为\",{\"1\":{\"331\":1}}],[\"把某个字符对应的一个整数值\",{\"1\":{\"324\":1}}],[\"把事务的管理交给外部的容器\",{\"1\":{\"248\":1}}],[\"把mapper\",{\"1\":{\"244\":1}}],[\"把类上的数据映射到表上\",{\"1\":{\"234\":1}}],[\"把参数发送给mysql服务器\",{\"1\":{\"207\":1}}],[\"把用户的一些输入当做了关键字\",{\"1\":{\"204\":1}}],[\"把用户输入的一个路径\",{\"1\":{\"138\":1}}],[\"把两个sql的结果拼接起来\",{\"1\":{\"185\":1}}],[\"把电影\",{\"1\":{\"153\":1}}],[\"把端口改成80\",{\"1\":{\"139\":1}}],[\"想办法破解\",{\"1\":{\"1183\":1}}],[\"想办法让请求头cookie里面包含对应的值\",{\"1\":{\"1139\":1}}],[\"想让其应用程序启动的时候就初始化\",{\"1\":{\"1131\":1}}],[\"想让mysql自动生成\",{\"1\":{\"169\":1}}],[\"想获取\",{\"1\":{\"1026\":1}}],[\"想根据\",{\"1\":{\"1026\":1}}],[\"想往hashmap中添加一个键值对\",{\"1\":{\"1002\":1}}],[\"想统计一个班上\",{\"1\":{\"997\":1}}],[\"想对原有接口进行增强\",{\"1\":{\"957\":1}}],[\"想看一下我们班这次考试的最高分\",{\"1\":{\"951\":1}}],[\"想看一下有多少同学来自江西\",{\"1\":{\"951\":1}}],[\"想取第四个位置的元素\",{\"1\":{\"948\":1}}],[\"想咋写咋写\",{\"1\":{\"924\":1}}],[\"想到bufferedreader\",{\"1\":{\"821\":1}}],[\"想你的一遍又一遍\",{\"1\":{\"807\":1}}],[\"想你的夜\",{\"1\":{\"806\":1}}],[\"想要设置字符集为utf\",{\"1\":{\"1127\":1}}],[\"想要获得host请求头的值\",{\"1\":{\"1112\":2}}],[\"想要在多个servlet中共享这个对象\",{\"1\":{\"1110\":1}}],[\"想要在所有的servlet中共享数据\",{\"1\":{\"1096\":1}}],[\"想要在创建教师对象时\",{\"1\":{\"463\":1}}],[\"想要看到他们的init\",{\"1\":{\"1093\":1}}],[\"想要after打印出来\",{\"1\":{\"870\":1}}],[\"想要访问外部类成员\",{\"1\":{\"640\":1}}],[\"想要同时访问两个包onepackage\",{\"1\":{\"503\":1}}],[\"想要初始化一个类\",{\"1\":{\"497\":1}}],[\"想要一段语句\",{\"1\":{\"494\":1}}],[\"想一想为什么\",{\"1\":{\"570\":1}}],[\"想一想如果代码写着写着突然想记录一些数据\",{\"1\":{\"319\":1}}],[\"想一下\",{\"1\":{\"319\":1}}],[\"想查出荣耀的手机\",{\"1\":{\"263\":3}}],[\"想找到id大于10的\",{\"1\":{\"162\":1}}],[\"想找id为1的\",{\"1\":{\"162\":1}}],[\"想删除\",{\"1\":{\"161\":1}}],[\"想删除id=10的人\",{\"1\":{\"161\":1}}],[\"想创建一个select库\",{\"1\":{\"148\":1}}],[\"想通过ip地址\",{\"1\":{\"139\":1}}],[\"想访问\",{\"1\":{\"136\":1,\"948\":1}}],[\"默认第一个\",{\"1\":{\"1046\":2}}],[\"默认为数组长度的0\",{\"1\":{\"1016\":1}}],[\"默认为object\",{\"1\":{\"941\":1}}],[\"默认为1开始自动增长\",{\"1\":{\"169\":1}}],[\"默认类型\",{\"1\":{\"939\":1}}],[\"默认是30min\",{\"1\":{\"1153\":1}}],[\"默认是系统的四分之一\",{\"1\":{\"925\":1}}],[\"默认是系统64分之一\",{\"1\":{\"925\":1}}],[\"默认是比较2个对象的地址\",{\"1\":{\"734\":1}}],[\"默认名字thread\",{\"1\":{\"833\":1}}],[\"默认输出设备\",{\"1\":{\"821\":1}}],[\"默认输入设备是键盘\",{\"1\":{\"821\":1}}],[\"默认缓冲区大小是16kb\",{\"1\":{\"808\":1}}],[\"默认缓冲区大小是8kb\",{\"1\":{\"790\":1}}],[\"默认缓冲区8kb\",{\"1\":{\"795\":1}}],[\"默认处理机制仅针对运行时异常\",{\"1\":{\"749\":1}}],[\"默认容量是16\",{\"1\":{\"742\":1}}],[\"默认调用的是本地方法的hashcode方法获取地址值\",{\"1\":{\"685\":1}}],[\"默认实现\",{\"0\":{\"681\":1}}],[\"默认返回false\",{\"1\":{\"674\":1}}],[\"默认访问权限\",{\"1\":{\"611\":1,\"622\":1}}],[\"默认方法的作用\",{\"1\":{\"600\":1}}],[\"默认方法的语法\",{\"1\":{\"600\":1}}],[\"默认方法\",{\"1\":{\"600\":2,\"606\":1}}],[\"默认方法和静态方法\",{\"0\":{\"600\":1}}],[\"默认缺省的\",{\"1\":{\"596\":1}}],[\"默认情况下\",{\"1\":{\"453\":1,\"681\":1,\"767\":1}}],[\"默认都是1\",{\"1\":{\"441\":1}}],[\"默认初始化除外\",{\"1\":{\"542\":1}}],[\"默认初始化是永远第一步进行的\",{\"1\":{\"494\":1}}],[\"默认初始化都已经执行了\",{\"1\":{\"458\":1}}],[\"默认初始化永远是第一步\",{\"1\":{\"458\":1}}],[\"默认初始化\",{\"1\":{\"408\":1,\"458\":1,\"467\":1,\"487\":2,\"494\":1,\"541\":1}}],[\"默认当作double处理\",{\"1\":{\"336\":1}}],[\"默认当作int处理\",{\"1\":{\"336\":1}}],[\"默认的作用域是compile\",{\"1\":{\"1081\":1}}],[\"默认的打包方式\",{\"1\":{\"1080\":1}}],[\"默认的扩容机制\",{\"1\":{\"1020\":1}}],[\"默认的\",{\"1\":{\"800\":1}}],[\"默认的编码表\",{\"1\":{\"800\":1}}],[\"默认的tostring方法就不会再打印地址值了\",{\"1\":{\"685\":1}}],[\"默认的比较规则\",{\"1\":{\"672\":1}}],[\"默认的是十进制\",{\"1\":{\"322\":1}}],[\"默认的对象工厂要么通过默认无参构造方法\",{\"1\":{\"247\":1}}],[\"默认值就足够大了\",{\"1\":{\"808\":1,\"814\":1}}],[\"默认值和普通成员变量是一样的\",{\"1\":{\"474\":1}}],[\"默认值是负数\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"默认值是false\",{\"1\":{\"407\":1}}],[\"默认值是\",{\"1\":{\"407\":1}}],[\"默认值为0\",{\"1\":{\"407\":2}}],[\"默认值\",{\"1\":{\"283\":1,\"407\":2,\"1046\":2}}],[\"默认值属性\",{\"1\":{\"171\":1}}],[\"默认配置是关闭懒加载\",{\"1\":{\"283\":1}}],[\"默认集合类使用collection\",{\"1\":{\"272\":1}}],[\"默认不会自动提交\",{\"1\":{\"237\":1}}],[\"默认主键这一列就会是主键索引\",{\"1\":{\"232\":1}}],[\"默认\",{\"1\":{\"170\":1,\"312\":1,\"506\":1,\"842\":1,\"924\":1}}],[\"默认下标从0开始\",{\"1\":{\"164\":1}}],[\"默认校对规则\",{\"1\":{\"149\":1}}],[\"默认安装目录\",{\"1\":{\"144\":1}}],[\"默认端口号是80端口号\",{\"1\":{\"139\":1}}],[\"默认应用\",{\"1\":{\"138\":1}}],[\"原有的集合不被修改\",{\"1\":{\"955\":1}}],[\"原文是\",{\"1\":{\"924\":1}}],[\"原子操作\",{\"1\":{\"853\":1}}],[\"原子性\",{\"1\":{\"176\":1,\"210\":1}}],[\"原话\",{\"1\":{\"681\":1}}],[\"原先的数组引用不受影响\",{\"1\":{\"426\":1}}],[\"原先方法栈帧的引用不会发生变化\",{\"1\":{\"425\":1}}],[\"原先方法栈帧的局部变量的值不会发生任何变化\",{\"1\":{\"425\":1}}],[\"原本实参变量的值会随之改变\",{\"1\":{\"424\":1}}],[\"原本实参的值是不会被改变的\",{\"1\":{\"424\":1}}],[\"原因会是啥\",{\"0\":{\"1157\":1}}],[\"原因是cookie中不支持特殊字符和中文\",{\"1\":{\"1148\":1}}],[\"原因是因为参与了运算\",{\"1\":{\"735\":1}}],[\"原因是什么\",{\"1\":{\"470\":2,\"730\":1}}],[\"原因与本质\",{\"1\":{\"730\":1}}],[\"原因在于java是强类型语言\",{\"1\":{\"653\":1}}],[\"原因和局部变量一样\",{\"1\":{\"635\":1}}],[\"原因\",{\"0\":{\"353\":1},\"1\":{\"475\":1,\"706\":1}}],[\"原因短语\",{\"1\":{\"120\":2}}],[\"原生的安卓意味着公司还需要针对ios等其它平台开发软件\",{\"1\":{\"303\":1}}],[\"原生方式\",{\"1\":{\"240\":1}}],[\"原理\",{\"0\":{\"138\":1,\"488\":1,\"719\":1},\"1\":{\"541\":1}}],[\"路径匹配\",{\"1\":{\"1090\":1,\"1091\":1}}],[\"路径名字符串\",{\"1\":{\"775\":1}}],[\"路径名不正确而抛出异常\",{\"1\":{\"773\":1}}],[\"路径下\",{\"1\":{\"136\":1}}],[\"路径\",{\"1\":{\"136\":1,\"192\":1,\"1084\":1}}],[\"路径导航\",{\"1\":{\"45\":1,\"82\":1}}],[\"步骤上\",{\"1\":{\"851\":1}}],[\"步骤一\",{\"1\":{\"263\":1}}],[\"步骤\",{\"0\":{\"832\":1,\"850\":1},\"1\":{\"134\":1,\"230\":2,\"1140\":1}}],[\"多练习一下分支\",{\"1\":{\"1205\":1}}],[\"多练习\",{\"1\":{\"1201\":1}}],[\"多道批处理\",{\"1\":{\"828\":1}}],[\"多线程处理\",{\"0\":{\"903\":1},\"1\":{\"903\":1}}],[\"多线程共享数据\",{\"1\":{\"851\":1,\"853\":1}}],[\"多线程仿真如下场景\",{\"1\":{\"851\":2}}],[\"多线程的运行环境\",{\"1\":{\"853\":1}}],[\"多线程的实现方式三\",{\"0\":{\"881\":1}}],[\"多线程的实现方式二\",{\"1\":{\"850\":1}}],[\"多线程的实现方式一\",{\"1\":{\"832\":1}}],[\"多线程的执行特点\",{\"1\":{\"833\":1}}],[\"多线程的执行特点是什么\",{\"1\":{\"833\":1}}],[\"多线程是天生异步的\",{\"1\":{\"828\":1}}],[\"多线程改进\",{\"1\":{\"825\":1}}],[\"多线程\",{\"1\":{\"825\":1,\"851\":1,\"1077\":1}}],[\"多线程基础\",{\"0\":{\"825\":1}}],[\"多线程中再学习\",{\"1\":{\"658\":1}}],[\"多么方便的一种设计啊\",{\"1\":{\"689\":1}}],[\"多次输入\",{\"1\":{\"825\":2}}],[\"多次调用\",{\"1\":{\"674\":1}}],[\"多次按c键\",{\"1\":{\"132\":1}}],[\"多实现\",{\"1\":{\"600\":1}}],[\"多继承\",{\"1\":{\"532\":1}}],[\"多重继承\",{\"1\":{\"532\":1}}],[\"多态现象仍然存在\",{\"1\":{\"591\":1}}],[\"多态练习\",{\"0\":{\"588\":1}}],[\"多态肯定是有缺点的\",{\"1\":{\"583\":1}}],[\"多态肯定和它无缘\",{\"1\":{\"577\":1}}],[\"多态保证\",{\"1\":{\"582\":1}}],[\"多态的优缺点\",{\"0\":{\"581\":1}}],[\"多态的形式指\",{\"1\":{\"578\":1}}],[\"多态的访问特征\",{\"0\":{\"578\":1}}],[\"多态的发生条件\",{\"0\":{\"576\":1}}],[\"多态一定发生在父子类之间\",{\"1\":{\"576\":1}}],[\"多态指的是\",{\"1\":{\"575\":1}}],[\"多态指的是在一个类中定义的属性和功能被其他类继承后\",{\"1\":{\"514\":1}}],[\"多态\",{\"0\":{\"514\":1}}],[\"多数情况下它不需要实现方法\",{\"1\":{\"600\":1}}],[\"多数情况下我们都是在调用方法完成各种功能\",{\"1\":{\"559\":1}}],[\"多数情况下\",{\"1\":{\"499\":1,\"611\":1,\"654\":1}}],[\"多数语句没有结果\",{\"1\":{\"342\":1}}],[\"多的在下面\",{\"1\":{\"469\":1}}],[\"多分支的异常处理的执行\",{\"1\":{\"754\":1}}],[\"多分支的if语句\",{\"1\":{\"358\":1}}],[\"多分支\",{\"0\":{\"754\":1}}],[\"多分支if结构\",{\"1\":{\"360\":1}}],[\"多分支if\",{\"1\":{\"358\":1}}],[\"多种数据类型混合在一起进行运算\",{\"1\":{\"341\":1}}],[\"多级包名用\",{\"1\":{\"316\":1}}],[\"多少sql\",{\"1\":{\"263\":1}}],[\"多行注释\",{\"1\":{\"318\":2,\"924\":1}}],[\"多行多列\",{\"1\":{\"260\":2}}],[\"多行一列\",{\"1\":{\"258\":1}}],[\"多条结果\",{\"0\":{\"258\":1}}],[\"多表查询可以帮助我们获得更加丰富的数据\",{\"1\":{\"179\":1}}],[\"多表查询是指在关系型数据库中\",{\"1\":{\"179\":1}}],[\"多表查询\",{\"0\":{\"179\":1}}],[\"多表设计中的多对多关系指的是两个表之间的关系\",{\"1\":{\"174\":1}}],[\"多表设计中的一对多关系指的是两个表之间的关系\",{\"1\":{\"173\":1}}],[\"多表设计中的一对一关系指的是两个表之间的关系\",{\"1\":{\"172\":1}}],[\"多表设计是指将数据分散到多个表中\",{\"1\":{\"171\":1}}],[\"多列使用\",{\"1\":{\"159\":1}}],[\"多个应用下的资源共享\",{\"1\":{\"1149\":1}}],[\"多个\",{\"1\":{\"1033\":1}}],[\"多个客户端发送\",{\"0\":{\"903\":1},\"1\":{\"903\":1}}],[\"多个消费者的时候\",{\"1\":{\"867\":1}}],[\"多个任务同时运\",{\"1\":{\"827\":1}}],[\"多个任务同时运行\",{\"1\":{\"827\":1}}],[\"多个子类同时重写了父类中的一个方法\",{\"1\":{\"580\":1}}],[\"多个不同包中完全可能存在同名类\",{\"1\":{\"503\":1}}],[\"多个构造器的形参必须不同\",{\"1\":{\"466\":1}}],[\"多个引用指向同一个对象时\",{\"1\":{\"456\":1}}],[\"多个数据匹配某种情况\",{\"1\":{\"1043\":1}}],[\"多个数据\",{\"1\":{\"393\":1}}],[\"多个方法组成方法重载时\",{\"1\":{\"389\":1}}],[\"多个方法之间又如何区分呢\",{\"1\":{\"387\":1}}],[\"多个方法拥有相同的名字\",{\"1\":{\"387\":1}}],[\"多个形参之间用逗号隔开\",{\"1\":{\"382\":1}}],[\"多个sqlsession可以共用二级缓存\",{\"1\":{\"286\":1}}],[\"多个结果构成的数组\",{\"1\":{\"258\":1}}],[\"多个对象\",{\"0\":{\"260\":1},\"1\":{\"256\":1,\"260\":1}}],[\"多个参数\",{\"0\":{\"251\":1},\"1\":{\"254\":1,\"256\":1}}],[\"多个列创建一个索引\",{\"1\":{\"233\":1}}],[\"多个字段分组查询时\",{\"1\":{\"167\":1}}],[\"多个单词\",{\"1\":{\"153\":1}}],[\"多个动画片段\",{\"0\":{\"25\":1}}],[\"多对多的关系\",{\"1\":{\"947\":1}}],[\"多对多结构\",{\"0\":{\"281\":1}}],[\"多对多其实是指存在表a和表b\",{\"1\":{\"174\":1}}],[\"多对多\",{\"0\":{\"174\":1},\"1\":{\"142\":1}}],[\"停止\",{\"0\":{\"132\":1}}],[\"双端队列支持在队列的头部和尾部进行插入\",{\"1\":{\"973\":1}}],[\"双端队列\",{\"1\":{\"965\":1,\"968\":1,\"973\":1,\"974\":1,\"977\":1}}],[\"双向链表\",{\"1\":{\"956\":1,\"965\":1}}],[\"双亲委派模型\",{\"0\":{\"913\":1}}],[\"双方通过交换带有特定标志位的数据包来传达自己的意图和状态\",{\"1\":{\"908\":1}}],[\"双方都确认了初始序列号\",{\"1\":{\"906\":1}}],[\"双等号直接连接引用\",{\"1\":{\"673\":1}}],[\"双分支if\",{\"1\":{\"358\":1}}],[\"双精度的浮点数\",{\"1\":{\"323\":1}}],[\"双精度浮点数类型\",{\"1\":{\"312\":1}}],[\"双斜线\",{\"1\":{\"318\":1}}],[\"双击shutdown\",{\"1\":{\"132\":1}}],[\"双击startup\",{\"1\":{\"131\":1}}],[\"双十一的时候\",{\"1\":{\"126\":1}}],[\"启动一个main方法就是启动一个java进程\",{\"1\":{\"885\":1}}],[\"启动一次顺序关闭\",{\"1\":{\"880\":1}}],[\"启动线程\",{\"1\":{\"840\":1}}],[\"启动main方法\",{\"1\":{\"541\":1}}],[\"启动该类中的main方法\",{\"1\":{\"456\":1,\"476\":1}}],[\"启动\",{\"0\":{\"131\":1},\"1\":{\"838\":1,\"867\":2}}],[\"启停tomcat的命令\",{\"1\":{\"130\":1}}],[\"存\",{\"1\":{\"1152\":1}}],[\"存进去的顺序和读取出来的顺序完全一致或者完全相反\",{\"1\":{\"952\":1}}],[\"存truck\",{\"1\":{\"936\":1}}],[\"存autocar\",{\"1\":{\"936\":1}}],[\"存空间\",{\"1\":{\"925\":1}}],[\"存到文件的过程\",{\"1\":{\"822\":1}}],[\"存到一个地方\",{\"1\":{\"188\":1}}],[\"存放数据\",{\"1\":{\"420\":1}}],[\"存放命令的目录\",{\"1\":{\"130\":1}}],[\"存取元素\",{\"1\":{\"399\":1}}],[\"存的b+树\",{\"1\":{\"227\":1}}],[\"存路径\",{\"1\":{\"153\":1}}],[\"存钱的时候\",{\"1\":{\"153\":1}}],[\"存在转发关系的servlet之间的数据共享\",{\"1\":{\"1161\":1}}],[\"存在两个servlet\",{\"1\":{\"1091\":1}}],[\"存在类型强转问题\",{\"1\":{\"936\":1}}],[\"存在非原子操作\",{\"1\":{\"853\":1}}],[\"存在一定的风险\",{\"1\":{\"643\":1}}],[\"存在自动向上转型\",{\"1\":{\"603\":1,\"604\":1,\"605\":1}}],[\"存在自动类型提升\",{\"1\":{\"603\":1,\"604\":1}}],[\"存在子类\",{\"1\":{\"591\":1}}],[\"存在数据类型的自动类型转换\",{\"1\":{\"584\":1}}],[\"存在以下检索机制\",{\"1\":{\"551\":1}}],[\"存在\",{\"1\":{\"533\":1}}],[\"存在用父类引用接收子类对象的情况\",{\"1\":{\"523\":1}}],[\"存在sql注入问题\",{\"1\":{\"255\":1}}],[\"存在表a和表b\",{\"1\":{\"173\":1}}],[\"存在内存上\",{\"1\":{\"144\":1}}],[\"存在磁盘上\",{\"1\":{\"144\":1}}],[\"存储容量有限制\",{\"1\":{\"1149\":1}}],[\"存储为一个list\",{\"1\":{\"1035\":1}}],[\"存储重复元素\",{\"0\":{\"1010\":1}}],[\"存储落在同一个位置上的元素\",{\"1\":{\"1002\":1}}],[\"存储元素无序\",{\"1\":{\"1020\":2}}],[\"存储元素是无序的\",{\"1\":{\"1003\":1}}],[\"存储元素可重复\",{\"1\":{\"971\":1,\"977\":1}}],[\"存储元素有序\",{\"1\":{\"966\":1,\"971\":1,\"974\":1,\"977\":1}}],[\"存储元素\",{\"1\":{\"962\":1}}],[\"存储进去的顺序和读取出来的顺序\",{\"1\":{\"957\":1}}],[\"存储一组订单数据\",{\"1\":{\"956\":1}}],[\"存储一组学生\",{\"1\":{\"956\":1}}],[\"存储这个expectedmodcount=modcount\",{\"1\":{\"955\":1}}],[\"存储数据是否有序\",{\"1\":{\"969\":1}}],[\"存储数据有序\",{\"1\":{\"956\":1,\"957\":1,\"987\":1}}],[\"存储数据的数组\",{\"1\":{\"954\":1}}],[\"存储数据库\",{\"1\":{\"144\":1}}],[\"存储key\",{\"1\":{\"950\":1}}],[\"存储在外部设备\",{\"1\":{\"780\":1}}],[\"存储在堆上的对象存储具体信息\",{\"1\":{\"406\":1}}],[\"存储\",{\"1\":{\"780\":1,\"956\":1,\"1140\":1}}],[\"存储类型\",{\"1\":{\"407\":1}}],[\"存储位置\",{\"1\":{\"406\":1}}],[\"存储结构必须是连续的\",{\"1\":{\"394\":1}}],[\"存储什么样的数据才不需要事务呢\",{\"1\":{\"228\":1}}],[\"存储的数据量大于hashmap的阈值\",{\"1\":{\"1013\":1}}],[\"存储的数据有序\",{\"1\":{\"969\":1}}],[\"存储的是其它引用数据类型的引用\",{\"1\":{\"430\":1}}],[\"存储的是主键的值\",{\"1\":{\"226\":1}}],[\"存储的类型\",{\"1\":{\"407\":1}}],[\"存储的只是该引用类型在堆上对象的内存地址\",{\"1\":{\"406\":1}}],[\"存储的元素必须数据类型相同\",{\"1\":{\"394\":1}}],[\"存储的文件不一样\",{\"1\":{\"228\":1}}],[\"存储引擎就是mysql底层怎样组织这些数据\",{\"1\":{\"221\":1}}],[\"存储100w大小的表\",{\"1\":{\"220\":1}}],[\"存储信息的密度\",{\"1\":{\"220\":1}}],[\"存储字符串的方式\",{\"1\":{\"149\":1}}],[\"存储大量文档的\",{\"1\":{\"144\":1}}],[\"存储系统\",{\"1\":{\"144\":1}}],[\"存储和管理数据的仓库\",{\"1\":{\"141\":1}}],[\"存储提交的请求数据\",{\"0\":{\"118\":1}}],[\"很重要\",{\"1\":{\"951\":1}}],[\"很重要的一个方法\",{\"1\":{\"658\":1}}],[\"很推荐刷刷leetcode\",{\"1\":{\"947\":1}}],[\"很强大\",{\"1\":{\"580\":1}}],[\"很像是被重写了\",{\"1\":{\"562\":1}}],[\"很含糊的说了\",{\"1\":{\"535\":1}}],[\"很简单但很常用\",{\"1\":{\"658\":1}}],[\"很简单\",{\"1\":{\"503\":1}}],[\"很耗费性能\",{\"1\":{\"456\":1}}],[\"很快栈内存空间就不够用了\",{\"1\":{\"442\":1}}],[\"很快就会学到\",{\"1\":{\"312\":1}}],[\"很显然object当中的克隆方法的默认实现\",{\"1\":{\"694\":1}}],[\"很显然在多数时候\",{\"1\":{\"668\":1}}],[\"很显然\",{\"1\":{\"392\":1,\"673\":1,\"677\":1}}],[\"很容易产生冲突\",{\"1\":{\"1201\":1}}],[\"很容易理解\",{\"1\":{\"568\":1}}],[\"很容易总结出匿名对象的使用场景\",{\"1\":{\"483\":1}}],[\"很容易想到的运算符比如\",{\"1\":{\"342\":1}}],[\"很容易就切换过去了\",{\"1\":{\"128\":1}}],[\"很多时候不仅自身要占用内存\",{\"1\":{\"689\":1}}],[\"很多同学\",{\"1\":{\"460\":1}}],[\"很多程序语言\",{\"1\":{\"426\":1}}],[\"很多语句需要用到值\",{\"1\":{\"342\":1}}],[\"很多十进制小数转换成二进制时\",{\"1\":{\"336\":1}}],[\"很多单位使用excel来存储一些数据\",{\"1\":{\"141\":1}}],[\"很明显lambda表达式只能重写父接口中的抽象方法\",{\"1\":{\"653\":1}}],[\"很明显不能访问\",{\"1\":{\"538\":1}}],[\"很明显是不可以的\",{\"1\":{\"453\":1}}],[\"很明显\",{\"1\":{\"324\":1,\"380\":1,\"387\":1,\"392\":1,\"403\":1,\"459\":1,\"519\":1}}],[\"很常用\",{\"1\":{\"256\":1,\"658\":1}}],[\"很不方便管理和维护\",{\"1\":{\"392\":1}}],[\"很不方便\",{\"1\":{\"220\":1}}],[\"很方便\",{\"1\":{\"220\":1}}],[\"很难兼容\",{\"1\":{\"128\":1}}],[\"厂商实现该接口即可\",{\"1\":{\"128\":1}}],[\"各自实现自己具体的处理方法来处理那个目标\",{\"1\":{\"595\":1,\"599\":1}}],[\"各种结构的执行顺序\",{\"1\":{\"489\":1}}],[\"各个服务器\",{\"1\":{\"128\":1}}],[\"各项信息之间用空格分隔\",{\"1\":{\"110\":1}}],[\"涉及继承的概念\",{\"1\":{\"509\":1}}],[\"涉及多线程知识\",{\"1\":{\"484\":1}}],[\"涉及到两个操作\",{\"1\":{\"208\":1}}],[\"涉及到几个方面\",{\"1\":{\"208\":1}}],[\"涉及到request相关的部分全部需要推到重写\",{\"1\":{\"128\":1}}],[\"涉及协议的部分需要掌握\",{\"1\":{\"127\":1}}],[\"从dev拉取一个分支\",{\"1\":{\"1204\":1}}],[\"从工作空间提交到缓冲区\",{\"1\":{\"1194\":1}}],[\"从cookie中取出这个时间\",{\"1\":{\"1148\":1}}],[\"从catch代码块中结束方法\",{\"1\":{\"760\":1}}],[\"从高到低\",{\"1\":{\"1041\":1}}],[\"从一个类型转换到另外一种类型\",{\"1\":{\"1040\":1}}],[\"从一个类型转化到另一个类型\",{\"1\":{\"942\":1}}],[\"从map接口继承来的\",{\"1\":{\"1026\":1}}],[\"从省份的list中\",{\"1\":{\"997\":1}}],[\"从列表中移除最后一次出现的指定元素\",{\"1\":{\"975\":1}}],[\"从队列中获取元素时\",{\"1\":{\"979\":1}}],[\"从队头移除元素\",{\"1\":{\"975\":1}}],[\"从队头可以进出\",{\"1\":{\"973\":1}}],[\"从队尾也可以进出\",{\"1\":{\"973\":1}}],[\"从队尾进队列\",{\"1\":{\"970\":1}}],[\"从队尾进\",{\"1\":{\"968\":1}}],[\"从头部到尾部遍历列表时\",{\"1\":{\"968\":2}}],[\"从此映射中移除所有映射关系\",{\"1\":{\"1026\":1}}],[\"从此列表中移除最后一次出现的指定元素\",{\"1\":{\"968\":1}}],[\"从此列表中移除第一次出现的指定元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"从此列表所表示的堆栈处弹出一个元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"从此套接字发送数据报包\",{\"1\":{\"889\":1}}],[\"从此套接字接收数据报包\",{\"1\":{\"889\":1}}],[\"从什么地址开始复制\",{\"1\":{\"954\":1}}],[\"从long\",{\"1\":{\"942\":1}}],[\"从这些节点开始向下搜索\",{\"1\":{\"928\":1}}],[\"从这个角度上来说\",{\"1\":{\"658\":1}}],[\"从这个案例\",{\"1\":{\"582\":1}}],[\"从socket获取输入流\",{\"1\":{\"905\":1}}],[\"从socket中获取输入流inputstream\",{\"1\":{\"904\":1}}],[\"从socket中获取输入流\",{\"1\":{\"903\":1,\"905\":1}}],[\"从socket中获取输入输出流\",{\"1\":{\"897\":1,\"902\":1}}],[\"从socket中获取输出流\",{\"1\":{\"903\":1,\"905\":2}}],[\"从socket中得到输入输出流\",{\"1\":{\"898\":1,\"902\":1}}],[\"从start位置开始\",{\"1\":{\"737\":2}}],[\"从执行路径的角度看\",{\"1\":{\"826\":1}}],[\"从\",{\"1\":{\"824\":1}}],[\"从字符串转化为时间类型\",{\"1\":{\"942\":1}}],[\"从字符输入流中读取文本\",{\"1\":{\"814\":1}}],[\"从字面意义上理解\",{\"1\":{\"575\":1}}],[\"从文件系统中的某个文件中获得输入字节\",{\"1\":{\"794\":1}}],[\"从输入流中读取属性列表\",{\"1\":{\"918\":1}}],[\"从输入流中读取一定数量的字节\",{\"1\":{\"792\":1,\"794\":1}}],[\"从输入流中读取数据的下一个字节\",{\"1\":{\"792\":1,\"794\":1}}],[\"从小到大进行排序\",{\"1\":{\"740\":1}}],[\"从指定位置开始\",{\"1\":{\"737\":2}}],[\"从当前字符串对象的指定位置开始\",{\"1\":{\"737\":2}}],[\"从byte数组的offset开始的length个字节值\",{\"1\":{\"729\":2}}],[\"从格林威治时间\",{\"1\":{\"722\":1}}],[\"从object改为自身类型\",{\"1\":{\"694\":1}}],[\"从java9开始\",{\"1\":{\"689\":1}}],[\"从严谨角度出发\",{\"1\":{\"675\":1}}],[\"从语法和具体使用上看\",{\"1\":{\"633\":1}}],[\"从祖先类开始\",{\"1\":{\"591\":1}}],[\"从设计角度出发\",{\"1\":{\"590\":1}}],[\"从设计角度上\",{\"1\":{\"590\":1}}],[\"从最后一个位置移除元素\",{\"1\":{\"975\":1}}],[\"从最后一个位置插入指定元素\",{\"1\":{\"975\":1}}],[\"从最理想的角度上来说\",{\"1\":{\"590\":1}}],[\"从最顶层父类开始\",{\"1\":{\"546\":1}}],[\"从方法调用的角度考虑\",{\"1\":{\"590\":1}}],[\"从方法名上就可以看出来\",{\"1\":{\"353\":1}}],[\"从代码角度上\",{\"1\":{\"590\":1}}],[\"从代码规范上来说\",{\"1\":{\"469\":1}}],[\"从以下两个角度分析\",{\"1\":{\"590\":1}}],[\"从继承的方向上\",{\"1\":{\"583\":1}}],[\"从形式上表现出来\",{\"1\":{\"560\":1}}],[\"从某一个子类开始\",{\"1\":{\"533\":1}}],[\"从逻辑角度上讲\",{\"1\":{\"524\":1}}],[\"从直观的逻辑角度解释\",{\"1\":{\"523\":1}}],[\"从属关系\",{\"0\":{\"523\":1},\"1\":{\"523\":1}}],[\"从原先的不可控变成了可控\",{\"1\":{\"516\":1}}],[\"从实际开发角度出发\",{\"1\":{\"568\":1}}],[\"从实际的语法角度上来说\",{\"1\":{\"516\":1}}],[\"从实质上看\",{\"1\":{\"480\":1}}],[\"从理论角度上来说\",{\"1\":{\"482\":1}}],[\"从整个遍历的过程中看来\",{\"1\":{\"417\":1}}],[\"从名字就能看出来\",{\"1\":{\"411\":1}}],[\"从三个角度来分析这个问题\",{\"1\":{\"407\":1}}],[\"从左向右\",{\"1\":{\"393\":1}}],[\"从上述案例中\",{\"1\":{\"503\":1}}],[\"从上到下一次做类型匹配\",{\"1\":{\"754\":1}}],[\"从上到下执行其中的代码\",{\"1\":{\"489\":1,\"546\":1}}],[\"从上到下匹配\",{\"1\":{\"358\":1}}],[\"从上面说明不难发现\",{\"1\":{\"318\":1}}],[\"从右到左\",{\"1\":{\"350\":3}}],[\"从大的分类来说\",{\"1\":{\"328\":1}}],[\"从内存角度理解\",{\"1\":{\"320\":1}}],[\"从成员方法中返回数据\",{\"1\":{\"312\":1}}],[\"从池子里面\",{\"1\":{\"213\":1}}],[\"从users表中选择任何一个行\",{\"1\":{\"204\":1}}],[\"从数据类型上来说\",{\"1\":{\"523\":1}}],[\"从数据类型的定义角度解释\",{\"1\":{\"523\":1}}],[\"从数据的使用角度理解\",{\"1\":{\"320\":1}}],[\"从数据库中选择该行的数据\",{\"1\":{\"188\":1}}],[\"从数据表中获得满足条件的数据内容\",{\"1\":{\"162\":2}}],[\"从多个表中查询数据的操作\",{\"1\":{\"179\":1}}],[\"从1开始自增\",{\"1\":{\"169\":1}}],[\"从1开始\",{\"1\":{\"167\":1}}],[\"从第一个位置移除元素\",{\"1\":{\"975\":1}}],[\"从第一个位置插入指定元素\",{\"1\":{\"975\":1}}],[\"从第一条开始拿\",{\"1\":{\"164\":1}}],[\"从第一条开始\",{\"1\":{\"164\":1}}],[\"从第offset位置开始的count个字符\",{\"1\":{\"729\":2}}],[\"从第二列开始\",{\"1\":{\"441\":1}}],[\"从第二个单词开始每个首字母大写\",{\"1\":{\"316\":1}}],[\"从第三行开始赋值\",{\"1\":{\"441\":1}}],[\"从第四个开始拿\",{\"1\":{\"164\":1}}],[\"从起始位置开始\",{\"1\":{\"164\":2}}],[\"从0开始编号\",{\"1\":{\"393\":1}}],[\"从0开始\",{\"1\":{\"164\":1,\"737\":2,\"833\":1}}],[\"从服务器产品a切换到b\",{\"1\":{\"128\":1}}],[\"从而git诞生了\",{\"1\":{\"1183\":1}}],[\"从而减少内存的占用\",{\"1\":{\"954\":1}}],[\"从而减少了资源的开销和系统资源的消耗\",{\"1\":{\"213\":1}}],[\"从而提供单个字符\",{\"1\":{\"808\":1}}],[\"从而就可以根据不同的情况\",{\"1\":{\"696\":1}}],[\"从而能够完成创建对象\",{\"1\":{\"540\":1}}],[\"从而让新的类适应新的开发需求\",{\"1\":{\"520\":1}}],[\"从而加速查询操作\",{\"1\":{\"218\":1}}],[\"从而绕过了身份验证\",{\"1\":{\"204\":1}}],[\"从而获取敏感信息\",{\"1\":{\"204\":1}}],[\"从而验证整个数据表的一致性\",{\"1\":{\"188\":1}}],[\"从而实现预报信息的展示和查询功能\",{\"1\":{\"1026\":1}}],[\"从而实现字符\",{\"1\":{\"814\":1}}],[\"从而实现防盗链机制\",{\"1\":{\"116\":1}}],[\"从而实现学生信息的顺利传递和宿舍分配\",{\"1\":{\"110\":1}}],[\"从而进行合理的分成和奖励\",{\"1\":{\"116\":1}}],[\"从而避免混乱和误解\",{\"1\":{\"110\":1}}],[\"初始堆内存\",{\"1\":{\"960\":1}}],[\"初始学号\",{\"1\":{\"478\":1}}],[\"初始厚度是0\",{\"1\":{\"363\":1}}],[\"初始化会开始生命周期的init方法\",{\"1\":{\"1096\":1}}],[\"初始化一维数组后\",{\"1\":{\"438\":1}}],[\"初始化\",{\"0\":{\"434\":1},\"1\":{\"497\":2,\"910\":1,\"954\":1}}],[\"初始化这个新数组\",{\"1\":{\"421\":1}}],[\"初始化是在内存中开辟空间并赋值的过程\",{\"1\":{\"396\":1}}],[\"初始化循环控制变量\",{\"1\":{\"362\":1,\"364\":1}}],[\"初始化语句省略后\",{\"1\":{\"362\":1}}],[\"初始化语句\",{\"1\":{\"361\":2,\"362\":4,\"363\":1,\"364\":1}}],[\"初始化语法是下面形式\",{\"1\":{\"327\":1}}],[\"初始化变量的语法\",{\"1\":{\"334\":1}}],[\"初始化局部变量\",{\"0\":{\"334\":1},\"1\":{\"332\":1}}],[\"初始化容量及扩容\",{\"0\":{\"1005\":1}}],[\"初始化容量\",{\"1\":{\"213\":1,\"214\":1,\"956\":1}}],[\"初始位置\",{\"1\":{\"164\":4}}],[\"初始url中的主机和端口\",{\"1\":{\"116\":1}}],[\"初创公司的开发人员来说\",{\"1\":{\"128\":1}}],[\"初创公司更换了另外一个服务器产品b\",{\"1\":{\"128\":1}}],[\"需求无法更改\",{\"1\":{\"853\":1}}],[\"需求是实现了\",{\"1\":{\"595\":1}}],[\"需求又改了\",{\"1\":{\"530\":1}}],[\"需求更改了\",{\"1\":{\"530\":1}}],[\"需求\",{\"1\":{\"128\":1,\"413\":1,\"420\":1,\"422\":1,\"424\":1,\"465\":1,\"713\":1,\"720\":1,\"815\":1,\"853\":2}}],[\"需要指定需要回退的文件\",{\"1\":{\"1202\":1}}],[\"需要指出外部类是谁\",{\"1\":{\"629\":1}}],[\"需要决定留哪一份\",{\"1\":{\"1201\":1}}],[\"需要抓紧push\",{\"1\":{\"1201\":1}}],[\"需要告诉git\",{\"1\":{\"1201\":1}}],[\"需要设置用户名和邮件地址\",{\"1\":{\"1195\":1}}],[\"需要设置\",{\"1\":{\"1195\":1}}],[\"需要访问的ccc\",{\"1\":{\"1146\":1}}],[\"需要信息共享\",{\"1\":{\"1137\":1}}],[\"需要userservlet中有一个名称为list的方法\",{\"1\":{\"1132\":1}}],[\"需要大家做的事情\",{\"1\":{\"1084\":1}}],[\"需要大家了解的只有两个\",{\"1\":{\"724\":1}}],[\"需要重写hashcode和equals方法\",{\"1\":{\"1037\":1}}],[\"需要重点掌握\",{\"1\":{\"140\":1,\"938\":2}}],[\"需要传入的是一个\",{\"1\":{\"1036\":1}}],[\"需要传入一个对象\",{\"1\":{\"671\":1}}],[\"需要掌握\",{\"1\":{\"1026\":1}}],[\"需要掌握以下能力\",{\"1\":{\"956\":1}}],[\"需要返回\",{\"1\":{\"1019\":1}}],[\"需要考虑到下标越界的情况\",{\"1\":{\"976\":1}}],[\"需要考虑的因素更多了\",{\"1\":{\"440\":1}}],[\"需要删除叫张三的学生\",{\"1\":{\"956\":1}}],[\"需要检查\",{\"1\":{\"955\":1}}],[\"需要将原有collection全部拷贝一遍\",{\"1\":{\"954\":1}}],[\"需要将资源文件放置在该目录下\",{\"1\":{\"134\":1}}],[\"需要熟练使用\",{\"1\":{\"953\":1}}],[\"需要手动进行扩容\",{\"1\":{\"950\":1}}],[\"需要手动提交\",{\"1\":{\"237\":1}}],[\"需要记录每个数生成了多少次\",{\"1\":{\"995\":1}}],[\"需要记录用户使用的支付方式\",{\"1\":{\"720\":1}}],[\"需要记住\",{\"0\":{\"945\":1}}],[\"需要强转\",{\"1\":{\"936\":1}}],[\"需要修改代码truck\",{\"1\":{\"936\":1}}],[\"需要借助futuretask\",{\"1\":{\"881\":1}}],[\"需要锁对象\",{\"1\":{\"870\":1}}],[\"需要说明的是\",{\"1\":{\"868\":1}}],[\"需要长久保存的文件数据\",{\"1\":{\"780\":1}}],[\"需要永久保存的数据\",{\"1\":{\"766\":1}}],[\"需要结合throws关键字向上抛\",{\"1\":{\"759\":1}}],[\"需要结合throws关键字\",{\"1\":{\"757\":1}}],[\"需要结束外层循环呢\",{\"1\":{\"376\":1}}],[\"需要查找类型id为2的支付方式\",{\"1\":{\"720\":1}}],[\"需要判断null\",{\"1\":{\"712\":1}}],[\"需要把dog对象克隆一份\",{\"1\":{\"699\":1}}],[\"需要把对应的jar包添加到library里面去\",{\"1\":{\"192\":1}}],[\"需要给编译器提供额外的信息\",{\"1\":{\"653\":1}}],[\"需要给a账户扣钱\",{\"1\":{\"208\":1}}],[\"需要创建对象访问\",{\"1\":{\"627\":1,\"628\":1}}],[\"需要创建很多对象\",{\"1\":{\"463\":1}}],[\"需要描述一台电脑中的cpu\",{\"1\":{\"607\":1}}],[\"需要实现的就自己重写\",{\"1\":{\"600\":1}}],[\"需要实现里面的所有抽象方法\",{\"1\":{\"599\":1}}],[\"需要实现这套接口\",{\"1\":{\"128\":1}}],[\"需要对公司内部存在的员工进行管理\",{\"1\":{\"594\":1}}],[\"需要对二级缓存的缓存的所有相关对象实现序列化接口\",{\"1\":{\"286\":1}}],[\"需要声明\",{\"1\":{\"590\":1}}],[\"需要显式地写代码完成类型转换\",{\"1\":{\"584\":1}}],[\"需要和方法的形参数据类型保持一致吗\",{\"1\":{\"584\":1}}],[\"需要和bean的成员变量名一致\",{\"1\":{\"259\":1}}],[\"需要程序员写额外代码强制完成的类型转换\",{\"1\":{\"529\":1}}],[\"需要程序员手动导包\",{\"1\":{\"503\":1}}],[\"需要怎么做\",{\"1\":{\"502\":1}}],[\"需要怎么写\",{\"1\":{\"136\":1}}],[\"需要使用文本文件\",{\"1\":{\"1192\":1}}],[\"需要使用map\",{\"1\":{\"995\":1}}],[\"需要使用\",{\"1\":{\"951\":1}}],[\"需要使用关键字\",{\"1\":{\"586\":1}}],[\"需要使用用\",{\"1\":{\"499\":1}}],[\"需要使用静态代码块\",{\"1\":{\"494\":1}}],[\"需要一定计算等等\",{\"1\":{\"490\":1}}],[\"需要一个根据名字到对应年龄的map\",{\"1\":{\"1053\":1}}],[\"需要一个了解认识它的过程\",{\"1\":{\"540\":1}}],[\"需要一个对象去实现功能\",{\"1\":{\"483\":1}}],[\"需要一个一个查\",{\"1\":{\"220\":1}}],[\"需要先建立连接再进行传输\",{\"1\":{\"885\":1}}],[\"需要先创建出对象\",{\"1\":{\"463\":1}}],[\"需要先创建对象才能访问\",{\"1\":{\"462\":1}}],[\"需要先访问其它元素\",{\"1\":{\"394\":1}}],[\"需要每位同学都掌握\",{\"1\":{\"402\":1}}],[\"需要处理很多数据\",{\"1\":{\"402\":1}}],[\"需要活学活用\",{\"1\":{\"389\":1}}],[\"需要明确什么\",{\"1\":{\"388\":1}}],[\"需要明确的是\",{\"1\":{\"308\":1}}],[\"需要写三个方法完成\",{\"1\":{\"387\":1}}],[\"需要写namespace\",{\"1\":{\"276\":1}}],[\"需要注意\",{\"1\":{\"259\":1,\"518\":1,\"522\":1}}],[\"需要注意的东西\",{\"1\":{\"958\":1}}],[\"需要注意的是引用数据类型数组里的元素\",{\"1\":{\"430\":1}}],[\"需要注意的是\",{\"1\":{\"218\":1,\"344\":1}}],[\"需要注意的\",{\"1\":{\"162\":1}}],[\"需要占用系统的i\",{\"1\":{\"689\":1}}],[\"需要占用空间\",{\"1\":{\"233\":1}}],[\"需要占用更多的磁盘空间\",{\"1\":{\"178\":1}}],[\"需要建立一个索引树\",{\"1\":{\"233\":1}}],[\"需要看一下这个sql\",{\"1\":{\"232\":1}}],[\"需要哪些列\",{\"1\":{\"231\":1}}],[\"需要什么字段\",{\"1\":{\"230\":1}}],[\"需要挪动数据\",{\"1\":{\"220\":1}}],[\"需要两个包\",{\"1\":{\"214\":1}}],[\"需要你自己手动建一个库\",{\"1\":{\"186\":1}}],[\"需要多表设计\",{\"1\":{\"171\":1}}],[\"需要去填写对应用户名和密码\",{\"1\":{\"1196\":1}}],[\"需要去调用它们的equals方法完成比较\",{\"1\":{\"675\":1}}],[\"需要去检查城市表中是否有对应的数据\",{\"1\":{\"171\":1}}],[\"需要去父表\",{\"1\":{\"171\":1}}],[\"需要按照上面的顺序来写\",{\"1\":{\"168\":1}}],[\"需要限制的总数\",{\"1\":{\"164\":1}}],[\"需要加where条件\",{\"1\":{\"161\":1}}],[\"需要插入全部列\",{\"1\":{\"158\":1}}],[\"需要存储的信息包括\",{\"1\":{\"153\":3}}],[\"需要存储到mysql中\",{\"1\":{\"149\":1}}],[\"需要存怎么办\",{\"1\":{\"153\":1}}],[\"需要配置环境变量\",{\"1\":{\"144\":1}}],[\"需要主要\",{\"1\":{\"139\":1}}],[\"需要能够获取到该文件的硬盘路径\",{\"1\":{\"138\":1}}],[\"需要在类中重写clone方法\",{\"1\":{\"699\":1}}],[\"需要在src目录下\",{\"1\":{\"215\":1}}],[\"需要在数据库的url后面加上配置\",{\"1\":{\"207\":1}}],[\"需要在host节点下配置context节点\",{\"1\":{\"137\":1}}],[\"需要在webapps目录下新建一个目录\",{\"1\":{\"134\":1}}],[\"需要部署资源\",{\"1\":{\"135\":1}}],[\"需要放在webapps目录下的文件夹内\",{\"1\":{\"134\":1}}],[\"需要做什么事情\",{\"1\":{\"1159\":1}}],[\"需要做出相应处理\",{\"1\":{\"412\":1}}],[\"需要做哪些事情\",{\"1\":{\"128\":1}}],[\"需要做的事情就是根据客户端发送过来的请求报文\",{\"1\":{\"127\":1}}],[\"需要监听某一端口号\",{\"1\":{\"127\":1}}],[\"需要搭配着重定向状态码一起来使用\",{\"1\":{\"121\":1}}],[\"需要\",{\"1\":{\"115\":1}}],[\"资源会被自动释放\",{\"1\":{\"789\":1}}],[\"资源\",{\"1\":{\"128\":1,\"789\":1}}],[\"资源类型是丰富的\",{\"1\":{\"111\":1}}],[\"接近你的脑子~~\",{\"1\":{\"469\":1}}],[\"接第二条\",{\"1\":{\"442\":1}}],[\"接收的值的类型string\",{\"1\":{\"1088\":1}}],[\"接收来自客户端\",{\"1\":{\"1078\":1}}],[\"接收来自服务端的反馈消息\",{\"1\":{\"905\":1}}],[\"接收任务\",{\"1\":{\"895\":1}}],[\"接收键盘数据\",{\"1\":{\"894\":1}}],[\"接收逻辑\",{\"1\":{\"894\":2}}],[\"接收到了来自\",{\"1\":{\"894\":2,\"895\":1,\"903\":1}}],[\"接收到了\",{\"1\":{\"892\":1}}],[\"接收端\",{\"1\":{\"892\":1}}],[\"接收端接收并打印\",{\"0\":{\"892\":1},\"1\":{\"892\":1}}],[\"接收端步骤\",{\"0\":{\"888\":1}}],[\"接收返回值\",{\"1\":{\"880\":1}}],[\"接收完毕后再进行类型转换\",{\"1\":{\"353\":1}}],[\"接收从键盘录入的数据\",{\"1\":{\"352\":1}}],[\"接收请求\",{\"1\":{\"127\":1}}],[\"接口没有构造方法\",{\"1\":{\"963\":1}}],[\"接口只定义一个规范\",{\"1\":{\"955\":1}}],[\"接口只定义规范\",{\"1\":{\"955\":1}}],[\"接口存储一组键值对象\",{\"1\":{\"950\":1}}],[\"接口存储的\",{\"1\":{\"283\":1}}],[\"接口ia仍然是一个功能方法\",{\"1\":{\"652\":1}}],[\"接口则比较自由\",{\"1\":{\"606\":1}}],[\"接口之间能多继承\",{\"1\":{\"606\":1}}],[\"接口自从java8以后有了静态方法\",{\"1\":{\"600\":1}}],[\"接口自己用不到构造器\",{\"1\":{\"598\":1}}],[\"接口在继承一个接口后\",{\"1\":{\"599\":1}}],[\"接口在命名时\",{\"1\":{\"598\":1}}],[\"接口和抽象类的异同\",{\"1\":{\"606\":1}}],[\"接口和类是没有任何关系的\",{\"1\":{\"599\":1}}],[\"接口和类之间没有继承关系\",{\"1\":{\"599\":1}}],[\"接口和接口继承\",{\"1\":{\"599\":1}}],[\"接口可以继承一个接口\",{\"1\":{\"598\":1}}],[\"接口虽然不是类\",{\"1\":{\"598\":1}}],[\"接口往往只有抽象方法定义\",{\"1\":{\"598\":1}}],[\"接口往往只有方法\",{\"1\":{\"598\":1}}],[\"接口就只有光秃秃的抽象方法定义\",{\"1\":{\"598\":1}}],[\"接口表示对功能的扩展\",{\"1\":{\"598\":1,\"600\":1}}],[\"接口表示一种开发标准\",{\"1\":{\"597\":1}}],[\"接口能够提供统一的规范\",{\"1\":{\"1110\":1}}],[\"接口能够定义的所有结构的访问权限都是public\",{\"1\":{\"598\":1}}],[\"接口能定义的结构特点\",{\"1\":{\"598\":1}}],[\"接口能不能用final修饰\",{\"1\":{\"598\":2}}],[\"接口能不能创建对象\",{\"1\":{\"598\":2}}],[\"接口定义出来目的就是为了被实现\",{\"1\":{\"598\":1}}],[\"接口比抽象类的使用更加灵活\",{\"1\":{\"597\":1}}],[\"接口不能继承抽象类\",{\"1\":{\"606\":1}}],[\"接口不是类\",{\"1\":{\"597\":1}}],[\"接口不受单继承限制\",{\"1\":{\"597\":1}}],[\"接口不受多继承限制\",{\"1\":{\"596\":1}}],[\"接口是没有构造器的\",{\"1\":{\"598\":1}}],[\"接口是非常少见定义属性的\",{\"1\":{\"598\":1}}],[\"接口是可以被一个类\",{\"1\":{\"596\":1}}],[\"接口是一种表示对行为抽象的\",{\"1\":{\"596\":1}}],[\"接口中为指定的泛型\",{\"1\":{\"941\":1}}],[\"接口中泛型为指定的类型\",{\"1\":{\"941\":1}}],[\"接口中泛型为object\",{\"1\":{\"941\":1}}],[\"接口中一旦新增任何方法\",{\"1\":{\"600\":1}}],[\"接口中一旦有了默认实现方法\",{\"1\":{\"600\":1}}],[\"接口中只能定义抽象方法\",{\"1\":{\"598\":1}}],[\"接口中没有任何实现方法\",{\"1\":{\"598\":1}}],[\"接口中没有静态代码块\",{\"1\":{\"598\":1}}],[\"接口中的静态实现方法\",{\"1\":{\"600\":1}}],[\"接口中的静态方法也是为了配合lambda表达式和streamapi使用的\",{\"1\":{\"600\":1}}],[\"接口中的静态方法也是默认public修饰的\",{\"1\":{\"600\":1}}],[\"接口中的默认方法\",{\"1\":{\"600\":1}}],[\"接口中的默认方法可以作为它们的实现\",{\"1\":{\"600\":1}}],[\"接口中的默认方法的访问权限修饰符是public\",{\"1\":{\"600\":1}}],[\"接口中的全局常量\",{\"1\":{\"598\":1}}],[\"接口中的方法和\",{\"1\":{\"235\":1}}],[\"接口中可以定义抽象方法\",{\"1\":{\"596\":1}}],[\"接口的特点\",{\"1\":{\"951\":1}}],[\"接口的特点我们主要研究以下方面\",{\"1\":{\"598\":1}}],[\"接口的对象写入流中\",{\"1\":{\"823\":1}}],[\"接口的成员\",{\"1\":{\"606\":1}}],[\"接口的继承是多继承的\",{\"1\":{\"599\":1}}],[\"接口的子类可以是什么\",{\"1\":{\"598\":1}}],[\"接口的子类也用不到\",{\"1\":{\"598\":1}}],[\"接口的使用\",{\"1\":{\"598\":1}}],[\"接口的命名特点\",{\"1\":{\"598\":1}}],[\"接口的实现类的书写格式\",{\"1\":{\"598\":2}}],[\"接口的实现类为\",{\"1\":{\"596\":1}}],[\"接口的声明特点\",{\"1\":{\"598\":2}}],[\"接口的\",{\"1\":{\"596\":1}}],[\"接口的访问权限修饰符也只有两种\",{\"1\":{\"596\":1}}],[\"接口的全限定名称\",{\"1\":{\"235\":1}}],[\"接口名<泛型类型1\",{\"1\":{\"941\":2}}],[\"接口名最好起的见名知意\",{\"1\":{\"596\":1}}],[\"接口名和类名一样\",{\"1\":{\"596\":1}}],[\"接口名\",{\"1\":{\"596\":2,\"598\":1,\"647\":1}}],[\"接口\",{\"1\":{\"312\":1,\"515\":1,\"605\":1,\"606\":1,\"641\":2}}],[\"接口有什么好处\",{\"1\":{\"128\":1}}],[\"接下来发送请求\",{\"1\":{\"1120\":1}}],[\"接下来会使用浏览器方法\",{\"1\":{\"1085\":1}}],[\"接下来的主要问题是\",{\"1\":{\"661\":1}}],[\"接下来讲解方法覆盖的语法\",{\"1\":{\"559\":1}}],[\"接下来使用for循环完成每一个一维数组的动态初始化\",{\"1\":{\"441\":1}}],[\"接下来就学习一下二维数组的定义和使用\",{\"1\":{\"431\":1}}],[\"接下来我们就来探讨一下这种\",{\"1\":{\"555\":1}}],[\"接下来我们就来探讨这种机制\",{\"1\":{\"548\":1}}],[\"接下来我们以遍历并输出数组的元素为例\",{\"1\":{\"415\":1}}],[\"接下来我们可以简单测试一下\",{\"1\":{\"307\":1}}],[\"接下来需要调用方法\",{\"1\":{\"383\":1}}],[\"接下来逐一解释语法的每个部分\",{\"1\":{\"382\":1}}],[\"接下来以最常见的双层嵌套for循环\",{\"1\":{\"367\":1}}],[\"接下来按照下述步骤完成\",{\"1\":{\"308\":1}}],[\"接下来\",{\"1\":{\"143\":1,\"188\":1,\"192\":1,\"568\":1,\"591\":1,\"654\":1,\"661\":1,\"680\":1}}],[\"则做的是删除\",{\"1\":{\"1147\":1}}],[\"则浏览器关闭时会被清楚\",{\"1\":{\"1147\":1}}],[\"则cookie信息失效\",{\"1\":{\"1147\":1}}],[\"则默认情况下存在于浏览器的内存中\",{\"1\":{\"1147\":1}}],[\"则访问其url\",{\"1\":{\"1131\":1}}],[\"则应用程序启动的时候初始化\",{\"1\":{\"1131\":1}}],[\"则需要传入\",{\"1\":{\"1120\":1}}],[\"则以你提供的为准\",{\"1\":{\"1092\":1}}],[\"则以上方法用不了\",{\"1\":{\"944\":1}}],[\"则tomcat启动的时候就初始化\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"则只返回1个元素\",{\"1\":{\"1038\":1}}],[\"则只返回3个元素\",{\"1\":{\"1038\":1}}],[\"则挨个进行比较\",{\"1\":{\"1016\":1}}],[\"则操作不会生效\",{\"1\":{\"1015\":1}}],[\"则两个对象的hashcode是一样的\",{\"1\":{\"1015\":1}}],[\"则与子类一致\",{\"1\":{\"941\":1}}],[\"则父类与子类变量类型一致\",{\"1\":{\"940\":1}}],[\"则为真\",{\"1\":{\"1043\":1}}],[\"则为什么类型\",{\"1\":{\"941\":1}}],[\"则为指定类型\",{\"1\":{\"940\":1}}],[\"则为默认类型\",{\"1\":{\"940\":1}}],[\"则唤醒其中随机一个线程\",{\"1\":{\"868\":1}}],[\"则会进行扩容\",{\"1\":{\"1016\":1}}],[\"则会转化为红黑树\",{\"1\":{\"1016\":1}}],[\"则会导致一个现象\",{\"1\":{\"1015\":1}}],[\"则会选择唤醒其中一个线程\",{\"1\":{\"874\":1}}],[\"则会抛illegalmonitorstateexception\",{\"1\":{\"868\":1}}],[\"则会在堆上创建新的字符串对象\",{\"1\":{\"735\":1}}],[\"则抛出\",{\"1\":{\"868\":1,\"972\":1}}],[\"则可以认为session失效\",{\"1\":{\"1157\":1}}],[\"则可以设置一个maxage=正数的时间\",{\"1\":{\"1147\":1}}],[\"则可以在另一台主机上或另一个进程中重构对象\",{\"1\":{\"823\":1}}],[\"则可以直接写id\",{\"1\":{\"264\":1}}],[\"则\",{\"1\":{\"820\":1,\"1001\":1}}],[\"则该目录必须为空才能删除\",{\"1\":{\"773\":1}}],[\"则帮你全部创建\",{\"1\":{\"771\":2}}],[\"则认为成绩异常\",{\"1\":{\"764\":2}}],[\"则在堆上创建\",{\"1\":{\"735\":1}}],[\"则返回值\",{\"1\":{\"792\":1,\"794\":1}}],[\"则返回null\",{\"1\":{\"776\":2}}],[\"则返回\",{\"1\":{\"775\":1,\"792\":1,\"794\":1,\"810\":2,\"814\":1,\"968\":4,\"972\":2,\"1026\":4}}],[\"则返回常量池中的引用\",{\"1\":{\"735\":1}}],[\"则返回404\",{\"1\":{\"139\":1}}],[\"则返回404状态码\",{\"1\":{\"127\":1}}],[\"则这个内部类就属于外部类本身\",{\"1\":{\"620\":1}}],[\"则jvm在初始化子类对象时进行隐式初始化\",{\"1\":{\"542\":1}}],[\"则报错\",{\"1\":{\"423\":1}}],[\"则选择固定参数的方法\",{\"1\":{\"423\":1}}],[\"则结果为0\",{\"1\":{\"348\":2}}],[\"则结果为1\",{\"1\":{\"348\":1}}],[\"则逻辑非运算符将得到false\",{\"1\":{\"347\":1}}],[\"则它永远就是该数据类型了\",{\"1\":{\"319\":1}}],[\"则拼接标签里面的内容\",{\"1\":{\"265\":1}}],[\"则where这个关键字不会被拼接上去\",{\"1\":{\"264\":1}}],[\"则没有必要配置事务管理器\",{\"1\":{\"248\":1}}],[\"则右子树上所有结点的值均大于它的根结点的值\",{\"1\":{\"220\":1}}],[\"则左子树上所有结点的值均小于它的根结点的值\",{\"1\":{\"220\":1}}],[\"则直接使用新的value替代旧的value\",{\"1\":{\"1016\":1}}],[\"则直接新建节点\",{\"1\":{\"1016\":1}}],[\"则直接返回0\",{\"1\":{\"1008\":1}}],[\"则直接返回null\",{\"1\":{\"213\":1}}],[\"则直接插入\",{\"1\":{\"1002\":1}}],[\"则直接找到\",{\"1\":{\"978\":1}}],[\"则直接分配8个空间\",{\"1\":{\"978\":1}}],[\"则直接设置应用名为root即可\",{\"1\":{\"139\":1}}],[\"则允许用户登录\",{\"1\":{\"204\":1}}],[\"则表示数据已被更改\",{\"1\":{\"188\":1}}],[\"则表示数据没有发生变化\",{\"1\":{\"188\":1}}],[\"则按照数学成绩进行分组\",{\"1\":{\"167\":1}}],[\"则加载\",{\"1\":{\"139\":1}}],[\"则将其删除\",{\"1\":{\"1026\":1}}],[\"则将该线程标记为守护线程\",{\"1\":{\"842\":1}}],[\"则将该请求交给缺省应用来处理\",{\"1\":{\"139\":1}}],[\"则将字节写入文件末尾处\",{\"1\":{\"788\":1}}],[\"则将文件的数据响应出去\",{\"1\":{\"127\":1}}],[\"则告诉浏览器从缓存中直接读取文件\",{\"1\":{\"116\":1}}],[\"要大量使用git\",{\"1\":{\"1205\":1}}],[\"要多练习git\",{\"1\":{\"1205\":1}}],[\"要慎用\",{\"1\":{\"1202\":1}}],[\"要获得保险柜要带着钥匙\",{\"1\":{\"1149\":1}}],[\"要获得的是cookie这个请求头\",{\"1\":{\"1143\":1}}],[\"要关注path\",{\"1\":{\"1147\":1}}],[\"要考虑虚拟映射的path\",{\"1\":{\"1132\":1}}],[\"要及时关闭\",{\"1\":{\"1129\":1}}],[\"要通过servletconfig实例\",{\"1\":{\"1093\":1}}],[\"要通过两级配置开启\",{\"1\":{\"286\":1}}],[\"要放在javaee容器下运行\",{\"1\":{\"1080\":1}}],[\"要满足web应用的目录结构\",{\"1\":{\"1080\":1}}],[\"要在idea中直接使用tomcat\",{\"1\":{\"1076\":1}}],[\"要在使用前慎重判断\",{\"1\":{\"412\":1}}],[\"要了解\",{\"1\":{\"1026\":1}}],[\"要有逻辑\",{\"1\":{\"1020\":1}}],[\"要往自己熟悉的上面引\",{\"1\":{\"1020\":1}}],[\"要删除的数据在红黑树上\",{\"1\":{\"1014\":1}}],[\"要去理解记忆\",{\"1\":{\"1003\":1}}],[\"要去排查为什么引用会等于null\",{\"1\":{\"412\":1}}],[\"要经过哪些流程呢\",{\"1\":{\"1002\":1}}],[\"要学会完成抽象化的任务\",{\"1\":{\"997\":1}}],[\"要理解一下循环数组的好处\",{\"1\":{\"977\":1}}],[\"要理解静态内部类的成员有什么特点\",{\"1\":{\"623\":1}}],[\"要不就在迭代器使用完成之后\",{\"1\":{\"955\":1}}],[\"要不就是在迭代器生成之前\",{\"1\":{\"955\":1}}],[\"要不要冗余数据呢\",{\"1\":{\"178\":1}}],[\"要记住\",{\"1\":{\"938\":1}}],[\"要先找到这个人\",{\"1\":{\"885\":1}}],[\"要先慎重考虑\",{\"1\":{\"586\":1}}],[\"要等到执行notify\",{\"1\":{\"868\":1}}],[\"要占用网络资源\",{\"1\":{\"689\":1}}],[\"要占用栈\",{\"1\":{\"442\":1}}],[\"要更加灵活\",{\"1\":{\"687\":1}}],[\"要重写必须一起重写\",{\"1\":{\"682\":1}}],[\"要结合起来学习\",{\"1\":{\"658\":1}}],[\"要分三种情况\",{\"1\":{\"708\":1}}],[\"要分两种情况\",{\"1\":{\"616\":1}}],[\"要分情况而定\",{\"1\":{\"325\":1}}],[\"要想了解什么是class对象\",{\"1\":{\"662\":1}}],[\"要想得到成员内部类对象\",{\"1\":{\"614\":1}}],[\"要想使用二维数组\",{\"1\":{\"432\":1}}],[\"要想使用数组\",{\"1\":{\"395\":1}}],[\"要想使用这种方式实现随机访问\",{\"1\":{\"394\":1}}],[\"要\",{\"1\":{\"596\":1}}],[\"要实现多态必须要继承\",{\"1\":{\"582\":1}}],[\"要看具体对象的类型\",{\"1\":{\"580\":1}}],[\"要看情况\",{\"1\":{\"178\":1}}],[\"要吝啬\",{\"1\":{\"510\":1}}],[\"要让jvm帮助我们开辟空间创建引用和对象\",{\"1\":{\"456\":1}}],[\"要遍历的数组或者集合\",{\"1\":{\"417\":1}}],[\"要明确知道程序中的引用哪里会指向null\",{\"1\":{\"412\":1}}],[\"要格外注意\",{\"1\":{\"389\":1}}],[\"要和新数组长度取模\",{\"1\":{\"1013\":1}}],[\"要和方法声明中的返回值类型保持一致\",{\"1\":{\"382\":1}}],[\"要和expression保持一致\",{\"1\":{\"359\":1}}],[\"要针对不同的关键字来说明\",{\"1\":{\"311\":1}}],[\"要写入的字节是参数\",{\"1\":{\"786\":1,\"788\":1}}],[\"要写c10\",{\"1\":{\"263\":1}}],[\"要写10个\",{\"1\":{\"263\":1}}],[\"要写多少方法\",{\"1\":{\"263\":1}}],[\"要写一条sql\",{\"1\":{\"263\":1}}],[\"要么index\",{\"1\":{\"1013\":1}}],[\"要么原index位置\",{\"1\":{\"1013\":1}}],[\"要么不执行\",{\"1\":{\"853\":1}}],[\"要么直接就用final修饰\",{\"1\":{\"642\":1}}],[\"要么你就用\",{\"1\":{\"567\":1}}],[\"要么是不给别人用的private\",{\"1\":{\"537\":1}}],[\"要么是给别人用的public\",{\"1\":{\"537\":1}}],[\"要么执行一个分支condition\",{\"1\":{\"358\":1}}],[\"要么就是一个事实上的常量\",{\"1\":{\"642\":1}}],[\"要么就执行else\",{\"1\":{\"358\":1}}],[\"要么就间接被main方法去调用执行\",{\"1\":{\"308\":1}}],[\"要么就都不成功\",{\"1\":{\"210\":1}}],[\"要么通过有参数的构造方法实例化对象\",{\"1\":{\"247\":1}}],[\"要么全部失败\",{\"1\":{\"208\":1}}],[\"要么全部成功\",{\"1\":{\"208\":1}}],[\"要么全部不执行\",{\"1\":{\"208\":1}}],[\"要遵守\",{\"1\":{\"176\":1}}],[\"要加where条件\",{\"1\":{\"160\":1}}],[\"要一一对应\",{\"1\":{\"158\":1}}],[\"要留证\",{\"1\":{\"150\":1}}],[\"要存储\",{\"1\":{\"149\":1}}],[\"要用栈\",{\"1\":{\"970\":2}}],[\"要用下划线来区分单词\",{\"1\":{\"149\":1}}],[\"要用\",{\"1\":{\"149\":1}}],[\"要注意bug\",{\"1\":{\"940\":1}}],[\"要注意下述三个细节\",{\"1\":{\"568\":1}}],[\"要注意书写顺序\",{\"1\":{\"168\":1}}],[\"要注意的是\",{\"1\":{\"152\":1}}],[\"要注意\",{\"1\":{\"147\":1,\"1186\":1}}],[\"要求传输的过程中将数据封装成数据包然后进行传输\",{\"1\":{\"885\":1}}],[\"要求a打印0\",{\"1\":{\"841\":2}}],[\"要求能多次输入\",{\"1\":{\"821\":1}}],[\"要求能实现crud操作\",{\"1\":{\"601\":1}}],[\"要求接口有且只有一个必须要实现的抽象方法了\",{\"1\":{\"653\":1}}],[\"要求在控制台输出helloworld\",{\"1\":{\"650\":1}}],[\"要求类中提供必要的方法进行属性访问\",{\"1\":{\"594\":1}}],[\"要求用户名长度4\",{\"1\":{\"517\":1}}],[\"要求年龄范围在1\",{\"1\":{\"517\":2}}],[\"要求通过有参构造方法去创建对象\",{\"1\":{\"517\":1}}],[\"要求通过无参构造方法去创建对象\",{\"1\":{\"517\":1}}],[\"要求通过ip地址就可以访问到该文件\",{\"1\":{\"139\":1}}],[\"要求count被所有对象所共享的即可\",{\"1\":{\"474\":2}}],[\"要求名字不能重复\",{\"1\":{\"420\":1}}],[\"要求foreach标签的\",{\"1\":{\"271\":3}}],[\"要求学生语文最大的大于等于90\",{\"1\":{\"168\":1}}],[\"要求\",{\"1\":{\"127\":1,\"386\":1,\"478\":1,\"679\":1,\"999\":1}}],[\"要使用此布局\",{\"1\":{\"0\":1}}],[\"变化一下写法\",{\"1\":{\"1078\":1}}],[\"变化性\",{\"1\":{\"126\":1}}],[\"变量或方法\",{\"1\":{\"578\":1}}],[\"变量显然不可能是杂乱无章的随意存放的\",{\"1\":{\"402\":1}}],[\"变量先参与运算或者赋值\",{\"1\":{\"344\":1}}],[\"变量先自增自减\",{\"1\":{\"344\":1}}],[\"变量和自增自减符号\",{\"1\":{\"344\":1}}],[\"变量的命名\",{\"1\":{\"1019\":1}}],[\"变量的类型转换\",{\"0\":{\"337\":1}}],[\"变量的数据类型和变量的名字\",{\"1\":{\"333\":1}}],[\"变量一定会被定义在某一对大括号中\",{\"1\":{\"335\":1}}],[\"变量需要在他的作用范围内才可以被使用\",{\"1\":{\"335\":1}}],[\"变量需要先定义后使用\",{\"1\":{\"335\":1}}],[\"变量值\",{\"1\":{\"334\":1}}],[\"变量值必须写出\",{\"1\":{\"307\":1}}],[\"变量定义\",{\"0\":{\"330\":1}}],[\"变量从定义到使用的过程\",{\"1\":{\"319\":1}}],[\"变量不能轻易改变数据类型\",{\"1\":{\"319\":1}}],[\"变量名的形式访问\",{\"1\":{\"475\":1}}],[\"变量名跟内容很难关联起来\",{\"1\":{\"444\":1}}],[\"变量名就表示数组\",{\"1\":{\"417\":1}}],[\"变量名\",{\"1\":{\"333\":1,\"334\":3,\"339\":1,\"341\":1,\"400\":1,\"417\":2,\"422\":1,\"453\":1,\"474\":1,\"570\":1,\"571\":1,\"939\":2,\"943\":1,\"1109\":1}}],[\"变量名和方法名的第一个单词首字母小写\",{\"1\":{\"316\":1}}],[\"变量名等\",{\"1\":{\"314\":1}}],[\"变量名请固定写成\",{\"1\":{\"307\":1}}],[\"变量\",{\"0\":{\"329\":1},\"1\":{\"313\":1,\"330\":1,\"340\":2,\"565\":1,\"606\":1,\"662\":1}}],[\"变成一个管道\",{\"1\":{\"1036\":1}}],[\"变成一个个对象\",{\"1\":{\"701\":1}}],[\"变成原子操作\",{\"1\":{\"867\":1}}],[\"变成了接口的子类\",{\"1\":{\"696\":1}}],[\"变成不能改变\",{\"1\":{\"568\":1}}],[\"变成mysql可以执行的命令\",{\"1\":{\"204\":1}}],[\"变成\",{\"1\":{\"204\":1}}],[\"变长字符串\",{\"1\":{\"153\":1}}],[\"变红\",{\"1\":{\"25\":1}}],[\"富有交互性\",{\"1\":{\"126\":1}}],[\"动物叫\",{\"1\":{\"590\":1}}],[\"动态链接\",{\"1\":{\"925\":1}}],[\"动态优先级+静态优先级\",{\"1\":{\"837\":1}}],[\"动态优先级\",{\"1\":{\"837\":1,\"838\":1}}],[\"动态获取类型信息呢\",{\"1\":{\"662\":1}}],[\"动态获取某个类的类型信息呢\",{\"1\":{\"662\":1}}],[\"动态初始方式二创建二维数组\",{\"1\":{\"441\":1}}],[\"动态初始化格式二\",{\"1\":{\"434\":1}}],[\"动态初始化格式一后如果没有再赋值\",{\"1\":{\"438\":1}}],[\"动态初始化格式一创建完毕后\",{\"1\":{\"434\":1}}],[\"动态初始化格式一创建的二维数组\",{\"1\":{\"434\":1}}],[\"动态初始化格式一\",{\"1\":{\"434\":1}}],[\"动态初始化两个数组\",{\"1\":{\"409\":1}}],[\"动态初始化数组相对更灵活\",{\"1\":{\"398\":1}}],[\"动态初始化没有给出具体元素的赋值\",{\"1\":{\"398\":1}}],[\"动态初始化指的是\",{\"1\":{\"398\":1}}],[\"动态初始化\",{\"0\":{\"398\":1},\"1\":{\"396\":1}}],[\"动态gif演示\",{\"1\":{\"308\":1}}],[\"动态sql\",{\"1\":{\"263\":1}}],[\"动态sql是mybatis给我们提供的又一个强大的功能\",{\"1\":{\"263\":1}}],[\"动态的去改变sql语句\",{\"1\":{\"263\":1}}],[\"动态列名\",{\"1\":{\"256\":1}}],[\"动态表名\",{\"1\":{\"256\":1}}],[\"动态代理\",{\"0\":{\"235\":1},\"1\":{\"923\":1}}],[\"动态资源\",{\"1\":{\"126\":1}}],[\"动画\",{\"0\":{\"21\":1,\"23\":1}}],[\"动画片段用于高亮或显隐幻灯片中的元素\",{\"1\":{\"19\":1}}],[\"动画片段\",{\"0\":{\"18\":1,\"19\":1,\"20\":1,\"22\":1,\"24\":1,\"26\":1}}],[\"供网络上面的其他用户来访问\",{\"1\":{\"126\":1}}],[\"软件帮助管理版本\",{\"1\":{\"1183\":1}}],[\"软件性能也会更加优越\",{\"1\":{\"303\":1}}],[\"软件架构\",{\"0\":{\"145\":1}}],[\"软件\",{\"1\":{\"126\":1,\"1077\":1}}],[\"软件层面\",{\"1\":{\"126\":1}}],[\"颁发给当前网站的一个凭证\",{\"1\":{\"125\":1}}],[\"khtml\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"kk\",{\"1\":{\"1028\":3}}],[\"k>\",{\"1\":{\"939\":1,\"1025\":1,\"1026\":1}}],[\"kobe\",{\"1\":{\"472\":1,\"474\":1}}],[\"k三个作为循环控制变量的变量名\",{\"1\":{\"362\":1}}],[\"kit\",{\"1\":{\"304\":1}}],[\"k10x\",{\"1\":{\"263\":1}}],[\"k9x\",{\"1\":{\"263\":1}}],[\"k=5\",{\"1\":{\"232\":1}}],[\"k=3\",{\"1\":{\"226\":1,\"230\":2,\"231\":1}}],[\"k\",{\"1\":{\"222\":5,\"225\":3,\"229\":3,\"230\":4,\"231\":3,\"939\":2,\"997\":2,\"1007\":1,\"1009\":7,\"1016\":5,\"1017\":1,\"1018\":2,\"1022\":1,\"1023\":2,\"1025\":1,\"1026\":24}}],[\"key为string\",{\"1\":{\"1159\":1}}],[\"key3\",{\"1\":{\"1117\":1}}],[\"key3=c3\",{\"1\":{\"1117\":1}}],[\"key3=c2\",{\"1\":{\"1117\":1}}],[\"key3=c1\",{\"1\":{\"1117\":1}}],[\"key3=value3等\",{\"1\":{\"1104\":1}}],[\"key1s\",{\"1\":{\"1117\":3}}],[\"key1\",{\"1\":{\"1117\":6}}],[\"key1=a3\",{\"1\":{\"1117\":1}}],[\"key1=a2\",{\"1\":{\"1117\":1}}],[\"key1=a1\",{\"1\":{\"1117\":1}}],[\"key1=value1\",{\"1\":{\"1104\":1,\"1138\":1}}],[\"key的大小一样\",{\"1\":{\"1024\":1}}],[\"key的区别\",{\"1\":{\"170\":1}}],[\"key=zs\",{\"1\":{\"1016\":1}}],[\"key==null\",{\"1\":{\"1008\":1}}],[\"key=value\",{\"1\":{\"918\":1,\"1026\":1,\"1116\":1}}],[\"key值\",{\"1\":{\"1007\":1}}],[\"key和value都必须是一个对象\",{\"1\":{\"680\":1}}],[\"keyword\",{\"1\":{\"311\":1}}],[\"keyproperty=\",{\"1\":{\"273\":1,\"274\":2}}],[\"keyproperty\",{\"1\":{\"273\":1}}],[\"key存的是索引的值\",{\"1\":{\"227\":1}}],[\"key是老师id\",{\"1\":{\"1019\":1}}],[\"key是不能重复的\",{\"1\":{\"918\":1}}],[\"key是主键的值\",{\"1\":{\"227\":1}}],[\"key是主键值\",{\"1\":{\"222\":1}}],[\"key是索引值\",{\"1\":{\"222\":1}}],[\"key就是主键\",{\"1\":{\"222\":1}}],[\"key2=b3\",{\"1\":{\"1117\":1}}],[\"key2=b2\",{\"1\":{\"1117\":1}}],[\"key2=b1\",{\"1\":{\"1117\":1}}],[\"key2=value2\",{\"1\":{\"1104\":1,\"1138\":1}}],[\"key2\",{\"1\":{\"169\":1,\"1117\":1}}],[\"key\",{\"1\":{\"127\":2,\"128\":1,\"144\":2,\"161\":1,\"169\":8,\"170\":1,\"171\":7,\"177\":1,\"180\":2,\"209\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"229\":1,\"232\":1,\"233\":2,\"240\":1,\"253\":5,\"261\":1,\"263\":2,\"275\":2,\"278\":2,\"281\":3,\"283\":2,\"918\":4,\"939\":1,\"950\":1,\"997\":4,\"1006\":1,\"1007\":1,\"1008\":11,\"1009\":16,\"1016\":14,\"1018\":4,\"1023\":4,\"1026\":12,\"1112\":1,\"1116\":2,\"1152\":2}}],[\"keyset\",{\"1\":{\"127\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1,\"1118\":1}}],[\"keep\",{\"1\":{\"116\":1,\"121\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1113\":1,\"1120\":1,\"1122\":2,\"1123\":2,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1142\":2,\"1150\":3}}],[\"kbwb\",{\"1\":{\"125\":1}}],[\"目的是在客户端和服务器之间安全地终止连接\",{\"1\":{\"907\":1}}],[\"目的是在客户端和服务器之间建立可靠的连接\",{\"1\":{\"906\":1}}],[\"目标数组\",{\"1\":{\"954\":1}}],[\"目标数据类型\",{\"1\":{\"339\":2,\"341\":2}}],[\"目标字符串首次出现的位置\",{\"1\":{\"737\":2}}],[\"目标字符串的字符序列\",{\"1\":{\"736\":1}}],[\"目前架构主要是前后端分离\",{\"1\":{\"1121\":1}}],[\"目前为止\",{\"1\":{\"759\":1}}],[\"目前我们给成员变量的赋值方式还有\",{\"1\":{\"570\":1}}],[\"目前不需要详细了解\",{\"1\":{\"497\":1}}],[\"目前已经学过的有\",{\"1\":{\"456\":1}}],[\"目前阶段\",{\"1\":{\"352\":1}}],[\"目前在写java程序的时候\",{\"1\":{\"351\":1}}],[\"目前流行的绝大多数编程语言都是强类型语言\",{\"1\":{\"319\":1}}],[\"目前仅有两个保留字\",{\"1\":{\"313\":1}}],[\"目前来说\",{\"1\":{\"308\":1}}],[\"目前java最主流的用途也是作为服务器端开发语言\",{\"1\":{\"303\":1}}],[\"目前mybatis使用起来还不够灵活\",{\"1\":{\"235\":1}}],[\"目前分为两种版本\",{\"1\":{\"143\":1}}],[\"目前属于oracle旗下产品\",{\"1\":{\"143\":1}}],[\"目前访问的网站页面基本都是动态资源\",{\"1\":{\"126\":1}}],[\"目前主流的网站使用的都是https协议了\",{\"1\":{\"125\":1}}],[\"目录路径如果不存在\",{\"1\":{\"771\":2}}],[\"目录下\",{\"1\":{\"307\":1}}],[\"目录名称\",{\"1\":{\"134\":1}}],[\"目录结构介绍\",{\"1\":{\"130\":1}}],[\"目录价结构非常深的目录中\",{\"1\":{\"130\":1}}],[\"目录\",{\"0\":{\"43\":1},\"1\":{\"1082\":1}}],[\"加锁和释放锁是由jvm自动完成的\",{\"1\":{\"864\":1}}],[\"加锁\",{\"1\":{\"864\":1}}],[\"加final修饰会编译报错\",{\"1\":{\"567\":1}}],[\"加入数据验证的业务逻辑判断\",{\"1\":{\"516\":1}}],[\"加static的方法中\",{\"1\":{\"462\":1}}],[\"加上等待的结果\",{\"1\":{\"832\":1}}],[\"加上static就不会再报错了\",{\"1\":{\"700\":1}}],[\"加上一个特殊的字符串用来表示一个全新的字符\",{\"1\":{\"355\":1}}],[\"加上注解之后\",{\"1\":{\"253\":1}}],[\"加性\",{\"1\":{\"350\":1}}],[\"加和赋值操作符\",{\"1\":{\"345\":1}}],[\"加法\",{\"1\":{\"344\":1,\"675\":1}}],[\"加+\",{\"1\":{\"342\":1}}],[\"加了一个过滤器\",{\"1\":{\"777\":1}}],[\"加了该注解的方法一定是重写自父类的方法\",{\"1\":{\"560\":1}}],[\"加了\",{\"1\":{\"250\":1}}],[\"加载因子和排序模式的空\",{\"1\":{\"1022\":1}}],[\"加载因子\",{\"0\":{\"1006\":1},\"1\":{\"1006\":2,\"1013\":1}}],[\"加载因子是控制什么事情\",{\"1\":{\"1006\":1}}],[\"加载因子是0\",{\"1\":{\"1006\":1}}],[\"加载因子是\",{\"1\":{\"984\":1}}],[\"加载类loadclass\",{\"1\":{\"923\":1}}],[\"加载某个类的子类\",{\"1\":{\"914\":1}}],[\"加载\",{\"1\":{\"497\":2,\"910\":2}}],[\"加载person类信息\",{\"1\":{\"467\":1}}],[\"加载主配置文件\",{\"1\":{\"244\":1}}],[\"加载驱动\",{\"1\":{\"192\":1}}],[\"加载获取到所有的资源文件之后\",{\"1\":{\"124\":1}}],[\"加权平均分\",{\"1\":{\"162\":2}}],[\"加权平均\",{\"1\":{\"162\":2}}],[\"加\",{\"1\":{\"162\":1,\"386\":1}}],[\"加括号\",{\"1\":{\"158\":1}}],[\"加1\",{\"1\":{\"139\":1}}],[\"加以解析转换成服务器所在的主机本地硬盘路径\",{\"1\":{\"138\":1}}],[\"加密解密使用的是同一把秘钥\",{\"1\":{\"125\":1}}],[\"加密算法\",{\"1\":{\"125\":2}}],[\"加密\",{\"1\":{\"125\":1}}],[\"加密展示\",{\"1\":{\"43\":1,\"67\":1}}],[\"苏州市\",{\"1\":{\"124\":1}}],[\"江苏省\",{\"1\":{\"124\":1}}],[\"​\",{\"1\":{\"124\":1,\"314\":2,\"337\":1,\"338\":1,\"512\":1,\"513\":1,\"514\":1,\"620\":1,\"624\":1,\"625\":1,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"633\":1,\"635\":1,\"646\":1,\"649\":1,\"653\":1,\"696\":1,\"703\":1,\"713\":1,\"1132\":4}}],[\"单道批处理\",{\"1\":{\"828\":1}}],[\"单线程\",{\"1\":{\"825\":1}}],[\"单线程的程序推荐使用stringbuilder\",{\"1\":{\"744\":1}}],[\"单字节\",{\"1\":{\"796\":1}}],[\"单字节复制还是字节数组方式效率高\",{\"1\":{\"796\":1}}],[\"单字节读取\",{\"1\":{\"794\":1}}],[\"单个文件\",{\"1\":{\"1203\":1}}],[\"单个cookie\",{\"1\":{\"1143\":1}}],[\"单个大写字母\",{\"1\":{\"941\":1}}],[\"单个线程\",{\"1\":{\"880\":1}}],[\"单个读取\",{\"1\":{\"795\":1}}],[\"单个对象\",{\"0\":{\"259\":1},\"1\":{\"256\":1,\"259\":1}}],[\"单级\",{\"1\":{\"776\":2,\"777\":2}}],[\"单分支\",{\"0\":{\"752\":1}}],[\"单分支if\",{\"1\":{\"358\":1}}],[\"单纯从代码角度上\",{\"1\":{\"590\":1}}],[\"单重继承\",{\"1\":{\"532\":1}}],[\"单继承的局限性\",{\"1\":{\"851\":1}}],[\"单继承\",{\"0\":{\"532\":1},\"1\":{\"532\":1}}],[\"单参\",{\"1\":{\"471\":1}}],[\"单行注释\",{\"1\":{\"318\":2,\"924\":1}}],[\"单精度或双精度浮点数\",{\"1\":{\"312\":1}}],[\"单精度浮点数类型\",{\"1\":{\"312\":1}}],[\"单独处理除0异常\",{\"1\":{\"754\":1}}],[\"单独一个直立行走的行为是一个什么对象\",{\"1\":{\"595\":1}}],[\"单独定义的class是一个独立的概念\",{\"1\":{\"508\":1}}],[\"单独变量解决==\",{\"1\":{\"444\":1}}],[\"单独变量解决\",{\"1\":{\"444\":1}}],[\"单独变量模拟\",{\"1\":{\"444\":1}}],[\"单独构成一个表达式后又参与了运算或者输出语句时\",{\"1\":{\"344\":1}}],[\"单独开辟一块内存空间\",{\"1\":{\"283\":1}}],[\"单独选两个条件\",{\"1\":{\"263\":1}}],[\"单独选一个条件\",{\"1\":{\"263\":1}}],[\"单表300列\",{\"1\":{\"172\":1}}],[\"单引号的作用\",{\"1\":{\"148\":1}}],[\"单机10w吞吐\",{\"1\":{\"144\":1}}],[\"单位是秒\",{\"1\":{\"121\":1,\"1144\":1}}],[\"单词全部大写\",{\"1\":{\"568\":1}}],[\"单词之间用下划线连接\",{\"1\":{\"316\":1}}],[\"单词\",{\"1\":{\"61\":1}}],[\"乱码问题\",{\"1\":{\"801\":1,\"1119\":1}}],[\"乱码的本质\",{\"1\":{\"121\":1,\"123\":1}}],[\"乱码\",{\"1\":{\"121\":1}}],[\"编解码\",{\"0\":{\"800\":1}}],[\"编解码不一致\",{\"1\":{\"121\":1,\"123\":1,\"1119\":1}}],[\"编程语言不需要这种实现技巧\",{\"1\":{\"681\":1}}],[\"编写程序\",{\"1\":{\"380\":3,\"387\":3,\"530\":1}}],[\"编写应用程序\",{\"1\":{\"192\":1}}],[\"编号89757\",{\"1\":{\"1137\":3}}],[\"编号\",{\"1\":{\"350\":1,\"606\":1,\"833\":1}}],[\"编号越小的运算符优先级越大\",{\"1\":{\"350\":1}}],[\"编号是4\",{\"1\":{\"158\":1}}],[\"编号是3\",{\"1\":{\"158\":1}}],[\"编号是2\",{\"1\":{\"158\":1}}],[\"编号是1\",{\"1\":{\"158\":1}}],[\"编译为tomcat所支持的web应用\",{\"1\":{\"1097\":1}}],[\"编译后的内容里没有这个类\",{\"1\":{\"1100\":1}}],[\"编译后\",{\"1\":{\"1082\":1}}],[\"编译的时候需要\",{\"1\":{\"1081\":1}}],[\"编译期没有问题\",{\"1\":{\"944\":1}}],[\"编译通过\",{\"1\":{\"747\":1}}],[\"编译不通过\",{\"1\":{\"747\":1}}],[\"编译以上代码\",{\"1\":{\"719\":1}}],[\"编译\",{\"1\":{\"580\":1,\"1075\":1}}],[\"编译时类型检查缺失等等\",{\"1\":{\"938\":1}}],[\"编译时异常\",{\"1\":{\"747\":1,\"748\":1,\"759\":1}}],[\"编译时看左边\",{\"1\":{\"579\":1}}],[\"编译时\",{\"1\":{\"579\":1}}],[\"编译在检索一个引用是否能够访问到某个成员变量时\",{\"1\":{\"551\":1}}],[\"编译报错\",{\"1\":{\"423\":1}}],[\"编译错误\",{\"1\":{\"342\":2}}],[\"编译器会为我们生成一个相关的final类\",{\"1\":{\"719\":1}}],[\"编译器会自动忽略那行仅声明变量的代码\",{\"1\":{\"334\":1}}],[\"编译器特殊处理后的枚举类型\",{\"1\":{\"719\":1}}],[\"编译器在\",{\"1\":{\"719\":1}}],[\"编译器是不会检测集合容器中元素的数据类型的\",{\"1\":{\"938\":1}}],[\"编译器是无从得知它的数据类型的\",{\"1\":{\"653\":1}}],[\"编译器是可以直接通过一个类名去查找到一个类的\",{\"1\":{\"503\":1}}],[\"编译器默认不允许\",{\"1\":{\"584\":1}}],[\"编译器自动完成类型转换\",{\"1\":{\"528\":1}}],[\"编译器肯定是不可能直接通过类名去查找一个类了\",{\"1\":{\"503\":1}}],[\"编译器为该可变参数隐含创建一个数组\",{\"1\":{\"422\":1}}],[\"编译器帮助我们完成类型转换\",{\"1\":{\"338\":1}}],[\"编译次数\",{\"1\":{\"207\":1}}],[\"编译1次\",{\"1\":{\"207\":1}}],[\"编译n次\",{\"1\":{\"207\":2}}],[\"编码解码不一致\",{\"1\":{\"801\":1}}],[\"编码为\",{\"1\":{\"801\":2}}],[\"编码过程\",{\"1\":{\"801\":1}}],[\"编码的逆过程\",{\"1\":{\"800\":1}}],[\"编码表\",{\"0\":{\"799\":1}}],[\"编码值\",{\"1\":{\"798\":2}}],[\"编码之后\",{\"1\":{\"149\":1}}],[\"编码\",{\"1\":{\"121\":1,\"800\":1}}],[\"编辑此页链接\",{\"1\":{\"45\":1}}],[\"音频怎么发\",{\"1\":{\"121\":1}}],[\"音视频\",{\"1\":{\"111\":1}}],[\"写论文其实就有这样一个过程\",{\"1\":{\"1183\":1}}],[\"写熟练了\",{\"1\":{\"1133\":1}}],[\"写正数\",{\"1\":{\"1096\":1}}],[\"写jdk那帮人写得\",{\"1\":{\"1003\":1}}],[\"写代码的时候\",{\"1\":{\"951\":1}}],[\"写代码也可以跑\",{\"1\":{\"939\":1}}],[\"写true\",{\"1\":{\"819\":1,\"820\":1}}],[\"写double并且换行的方法\",{\"1\":{\"818\":3}}],[\"写double的方法\",{\"1\":{\"818\":3}}],[\"写int\",{\"1\":{\"819\":1,\"820\":1}}],[\"写int并且换行的方法\",{\"1\":{\"818\":3}}],[\"写int的方法\",{\"1\":{\"818\":3}}],[\"写3\",{\"1\":{\"817\":1}}],[\"写1000\",{\"1\":{\"817\":1}}],[\"写字符数组\",{\"1\":{\"806\":1}}],[\"写字节数组的部分\",{\"1\":{\"788\":1}}],[\"写单个字符\",{\"1\":{\"806\":1}}],[\"写单个字节\",{\"1\":{\"788\":1,\"790\":1}}],[\"写入的基本数据和对象进行反序列化\",{\"1\":{\"824\":1}}],[\"写入一个行分隔符\",{\"1\":{\"808\":1}}],[\"写入单个字符\",{\"1\":{\"804\":1}}],[\"写入字符串的某一部分\",{\"1\":{\"804\":1}}],[\"写入字符串\",{\"1\":{\"804\":1}}],[\"写入字符数组的某一部分\",{\"1\":{\"804\":1}}],[\"写入字符数组\",{\"1\":{\"804\":1}}],[\"写入字符流的抽象类\",{\"1\":{\"804\":1}}],[\"写换行符\",{\"1\":{\"789\":1}}],[\"写数据的步骤\",{\"1\":{\"788\":1}}],[\"写接口的时候也建议使用包装类型\",{\"1\":{\"712\":1}}],[\"写上述语法后\",{\"1\":{\"653\":1}}],[\"写上述语法定义成员\",{\"1\":{\"570\":1}}],[\"写出更优雅的java\",{\"1\":{\"651\":1}}],[\"写出sql\",{\"1\":{\"158\":1}}],[\"写下列语法\",{\"1\":{\"647\":1}}],[\"写访问权限比较自由\",{\"1\":{\"606\":1}}],[\"写分离了\",{\"1\":{\"516\":1}}],[\"写程序模拟这个场景\",{\"1\":{\"472\":2}}],[\"写完方法后\",{\"1\":{\"387\":1}}],[\"写在一起的顺序\",{\"1\":{\"469\":1}}],[\"写在后面的代码后执行\",{\"1\":{\"356\":1}}],[\"写在前面的代码先执行\",{\"1\":{\"356\":1}}],[\"写注释可以增加自己写代码时的逻辑性\",{\"1\":{\"319\":1}}],[\"写简单参数的全限定类名或者是别名\",{\"1\":{\"257\":1}}],[\"写一个皮卡车库类\",{\"1\":{\"936\":1}}],[\"写一个皮卡类\",{\"1\":{\"936\":1}}],[\"写一个close方法\",{\"1\":{\"818\":3}}],[\"写一个方法来收集研究动物的叫声\",{\"1\":{\"581\":1}}],[\"写一个与之对应的标签\",{\"1\":{\"240\":1}}],[\"写一条sql\",{\"1\":{\"263\":1}}],[\"写一段代码\",{\"1\":{\"188\":1}}],[\"写mybatis\",{\"1\":{\"240\":1}}],[\"写什么\",{\"1\":{\"233\":1,\"250\":1}}],[\"写得是类名的全限定类名\",{\"1\":{\"249\":1}}],[\"写得配置文件\",{\"1\":{\"216\":1}}],[\"写得多\",{\"1\":{\"153\":1}}],[\"写锁\",{\"1\":{\"211\":1}}],[\"写\",{\"1\":{\"211\":1,\"779\":1}}],[\"写了两个sql\",{\"1\":{\"185\":1}}],[\"写了一个用户表\",{\"1\":{\"168\":1}}],[\"写错了\",{\"1\":{\"149\":1}}],[\"写的顺序是什么\",{\"1\":{\"817\":1}}],[\"写的\",{\"1\":{\"144\":1}}],[\"写到响应体里面\",{\"1\":{\"121\":1}}],[\"写这个content\",{\"1\":{\"121\":1}}],[\"写作日期为\",{\"1\":{\"80\":1}}],[\"服务\",{\"1\":{\"925\":1}}],[\"服务端接收\",{\"0\":{\"903\":1,\"904\":1},\"1\":{\"903\":1,\"904\":1}}],[\"服务端接收并打印\",{\"0\":{\"902\":1},\"1\":{\"902\":1}}],[\"服务端\",{\"1\":{\"902\":1,\"903\":1}}],[\"服务端步骤\",{\"0\":{\"898\":1}}],[\"服务发送的文本的语言\",{\"1\":{\"121\":1}}],[\"服务器关闭\",{\"0\":{\"1156\":1}}],[\"服务器提供特殊的响应报文\",{\"1\":{\"1142\":1}}],[\"服务器提供给浏览器的正文类型\",{\"1\":{\"1104\":1,\"1105\":1}}],[\"服务器能给客户端做的是响应\",{\"1\":{\"1142\":1}}],[\"服务器构造cookie\",{\"0\":{\"1142\":1},\"1\":{\"1139\":1}}],[\"服务器技术\",{\"1\":{\"1137\":1}}],[\"服务器会话技术\",{\"1\":{\"1137\":1}}],[\"服务器不清楚每一次请求来源于哪一个客户端\",{\"1\":{\"1137\":1}}],[\"服务器不清楚究竟是哪一个客户端\",{\"1\":{\"1137\":1}}],[\"服务器确实是可以知道\",{\"1\":{\"1137\":1}}],[\"服务器给客户端发送响应\",{\"1\":{\"1137\":1}}],[\"服务器本地的ip和端口号\",{\"1\":{\"1111\":1}}],[\"服务器ip\",{\"1\":{\"1111\":1}}],[\"服务器处理请求并返回响应\",{\"1\":{\"1077\":2}}],[\"服务器架构模型\",{\"1\":{\"1077\":1}}],[\"服务器应用\",{\"1\":{\"1077\":1}}],[\"服务器硬件\",{\"1\":{\"1077\":1}}],[\"服务器到客户端的连接也关闭\",{\"1\":{\"907\":1}}],[\"服务器收到客户端的fin请求后\",{\"1\":{\"907\":1}}],[\"服务器收到客户端的syn请求后\",{\"1\":{\"906\":1}}],[\"服务器也会设置一个随机的初始序列号\",{\"1\":{\"906\":1}}],[\"服务器厂商b\",{\"1\":{\"128\":1}}],[\"服务器厂商b需要实现这套接口\",{\"1\":{\"128\":1}}],[\"服务器厂商a\",{\"1\":{\"128\":1}}],[\"服务器程序\",{\"1\":{\"127\":2}}],[\"服务器开发\",{\"1\":{\"126\":1}}],[\"服务器产生http响应报文\",{\"1\":{\"124\":1}}],[\"服务器端发送的cookie\",{\"1\":{\"121\":1}}],[\"服务器发送的内容的mime类型\",{\"1\":{\"121\":1}}],[\"服务器发送的数据采用的编码格式\",{\"1\":{\"121\":1}}],[\"服务器发送的http响应一般称之为http请求报文\",{\"1\":{\"119\":1}}],[\"服务器发送的http响应信息\",{\"1\":{\"119\":1}}],[\"服务器异常\",{\"1\":{\"120\":1}}],[\"服务器告诉浏览器\",{\"1\":{\"120\":1}}],[\"服务器需要将请求重新定向到一个新的地址\",{\"1\":{\"120\":1}}],[\"服务器利用这个头与服务器的文件进行比对\",{\"1\":{\"116\":1}}],[\"服务器在响应的时候\",{\"1\":{\"116\":1}}],[\"服务器内部路径不同\",{\"1\":{\"115\":1}}],[\"服务器内部路径\",{\"1\":{\"115\":1,\"212\":1}}],[\"服务器解析http请求\",{\"1\":{\"113\":1}}],[\"服务器\",{\"1\":{\"111\":1,\"126\":1,\"908\":7,\"1077\":3,\"1115\":2,\"1137\":16,\"1142\":3}}],[\"指针就可以\",{\"1\":{\"955\":1}}],[\"指synchronized代码块中的锁对象\",{\"1\":{\"869\":1}}],[\"指的key\",{\"1\":{\"996\":1}}],[\"指的就是存放数据的容器\",{\"1\":{\"950\":1}}],[\"指的就是这个内部类没有名字\",{\"1\":{\"646\":1}}],[\"指的还是静态成员方法\",{\"1\":{\"473\":1}}],[\"指的是每一个servlet的生命周期\",{\"1\":{\"1093\":1}}],[\"指的是运行在javaee容器\",{\"1\":{\"1078\":1}}],[\"指的是key=value\",{\"1\":{\"1116\":1}}],[\"指的是key\",{\"1\":{\"996\":1}}],[\"指的是存储和读取的顺序\",{\"1\":{\"952\":1}}],[\"指的是java调用其它语言\",{\"1\":{\"660\":1}}],[\"指的是一个类\",{\"1\":{\"599\":1}}],[\"指的是南宋时期数学家杨辉\",{\"1\":{\"441\":1}}],[\"指的是调用方法时\",{\"1\":{\"424\":2}}],[\"指的是访向某个元素时\",{\"1\":{\"394\":1}}],[\"指的是访问服务器上面的哪个资源\",{\"1\":{\"115\":1}}],[\"指的是在子类中\",{\"1\":{\"560\":1}}],[\"指的是在访问某个元素时\",{\"1\":{\"394\":1}}],[\"指的是在服务器软件程序中进一步去编写程序来运行\",{\"1\":{\"126\":1}}],[\"指的是\",{\"1\":{\"389\":1,\"623\":2,\"993\":1}}],[\"指的是用代码实现\",{\"1\":{\"358\":2}}],[\"指的是像字母\",{\"1\":{\"324\":1}}],[\"指的是由java语言默认提供的八种数据类型\",{\"1\":{\"321\":1}}],[\"指的是当多个单词共同组成一个字符串时\",{\"1\":{\"316\":1}}],[\"指的是哪些接口呢\",{\"1\":{\"191\":1}}],[\"指最常见的一些数学运算符\",{\"1\":{\"344\":1}}],[\"指令解释执行class文件\",{\"1\":{\"308\":1}}],[\"指令编译java文件\",{\"1\":{\"308\":1}}],[\"指代最终的对象类型\",{\"1\":{\"261\":1}}],[\"指代连接对象\",{\"1\":{\"200\":1}}],[\"指\",{\"1\":{\"258\":1}}],[\"指在同一个事务中\",{\"1\":{\"211\":1}}],[\"指向object类\",{\"1\":{\"598\":1}}],[\"指向object类的无参构造\",{\"1\":{\"546\":1}}],[\"指向不同的对象\",{\"1\":{\"575\":1}}],[\"指向父类的无参构造器\",{\"1\":{\"546\":1}}],[\"指向当前对象\",{\"1\":{\"544\":1}}],[\"指向当前实例对象的引用\",{\"1\":{\"312\":1}}],[\"指向null的引用是无法正常使用的\",{\"1\":{\"407\":1}}],[\"指向null并不意味着没有初始化\",{\"1\":{\"407\":1}}],[\"指向了堆上对象\",{\"1\":{\"405\":1}}],[\"指向myd文件中\",{\"1\":{\"222\":1}}],[\"指向下一个叶子节点\",{\"1\":{\"220\":1}}],[\"指向\",{\"1\":{\"171\":1,\"730\":1}}],[\"指定docbase\",{\"1\":{\"1083\":1}}],[\"指定为什么类型\",{\"1\":{\"941\":1}}],[\"指定什么类型\",{\"1\":{\"940\":1}}],[\"指定t\",{\"1\":{\"940\":1}}],[\"指定泛型e\",{\"1\":{\"940\":2}}],[\"指定了泛型\",{\"1\":{\"941\":2}}],[\"指定了\",{\"1\":{\"940\":3}}],[\"指定格式\",{\"1\":{\"844\":1}}],[\"指定缓冲区size大小\",{\"1\":{\"790\":1}}],[\"指定的位置的字符串\",{\"1\":{\"737\":2}}],[\"指定\",{\"1\":{\"737\":2,\"767\":1,\"794\":2}}],[\"指定从当前字符串对象的指定位置开始\",{\"1\":{\"737\":2}}],[\"指定位置的字符\",{\"1\":{\"737\":2}}],[\"指定数组中每个元素的初始值\",{\"1\":{\"397\":1}}],[\"指定插入的列\",{\"1\":{\"158\":1}}],[\"指定需要插入哪几列\",{\"1\":{\"158\":1}}],[\"指定需要插入的列名\",{\"1\":{\"158\":1}}],[\"指定字符集和默认校对规则\",{\"1\":{\"149\":1}}],[\"指示其他某个对象是否与此对象\",{\"1\":{\"658\":1}}],[\"指示客户端保存文件\",{\"1\":{\"121\":1}}],[\"指示客户端刷新频率\",{\"1\":{\"121\":1}}],[\"指示服务器的类型\",{\"1\":{\"121\":1}}],[\"指示新的资源的位置\",{\"1\":{\"121\":1}}],[\"也意味着前端可以操作\",{\"1\":{\"1160\":1}}],[\"也能够返回一把钥匙\",{\"1\":{\"1159\":1}}],[\"也能够很快熟悉代码\",{\"1\":{\"319\":1}}],[\"也通常在文件下载的场景下使用\",{\"1\":{\"1124\":1}}],[\"也提供了一些特定的方法\",{\"1\":{\"1123\":1}}],[\"也提供一个servlet\",{\"1\":{\"1092\":1}}],[\"也认为是相同的\",{\"1\":{\"1009\":1}}],[\"也希望尽可能的均匀\",{\"1\":{\"1000\":1}}],[\"也称为环形数组\",{\"1\":{\"976\":1}}],[\"也称之为\",{\"1\":{\"571\":1}}],[\"也称之为完整\",{\"1\":{\"168\":1}}],[\"也想拥有持有类\",{\"1\":{\"936\":1}}],[\"也一样会警告\",{\"1\":{\"703\":1}}],[\"也一样存在\",{\"1\":{\"651\":1}}],[\"也克隆一份\",{\"1\":{\"699\":1}}],[\"也就可以拿到图片的字节数据\",{\"1\":{\"1120\":1}}],[\"也就需要重写它的hashcode方法\",{\"1\":{\"685\":1}}],[\"也就是大家需要携带一些信息过来才能找到自己的空间\",{\"1\":{\"1149\":1}}],[\"也就是接下来要访问的url应该是这样的\",{\"1\":{\"1145\":1}}],[\"也就是在我们自行开发的servlet中可以直接来来调用方法来获得\",{\"1\":{\"1095\":1}}],[\"也就是在磁盘上怎样组织这些数据\",{\"1\":{\"221\":1}}],[\"也就是这个成员变量在初始化阶段\",{\"1\":{\"1094\":1}}],[\"也就是对zs取hash\",{\"1\":{\"1016\":1}}],[\"也就是对象无法被引用时\",{\"1\":{\"927\":1}}],[\"也就是字节码\",{\"1\":{\"925\":1}}],[\"也就是执行了某个类的main\",{\"1\":{\"914\":1}}],[\"也就是退出synchronized\",{\"1\":{\"868\":1}}],[\"也就是存储元素的数组下标\",{\"1\":{\"680\":1}}],[\"也就是映射中的对应关系f\",{\"1\":{\"679\":1}}],[\"也就是应用程序编程接口\",{\"1\":{\"658\":1}}],[\"也就是不会触发类初始化的全局常量\",{\"1\":{\"612\":1}}],[\"也就是一个标准\",{\"1\":{\"595\":1,\"599\":1}}],[\"也就是子类\",{\"1\":{\"523\":1}}],[\"也就是要使用全限定类名\",{\"1\":{\"503\":1}}],[\"也就是成员变量和方法\",{\"1\":{\"469\":1}}],[\"也就是实参本身\",{\"1\":{\"424\":1}}],[\"也就是没有返回值\",{\"1\":{\"382\":1,\"384\":1}}],[\"也就是从右向左运算的\",{\"1\":{\"350\":1}}],[\"也就是true或者false\",{\"1\":{\"346\":1}}],[\"也就是比较运算符组成的表达式\",{\"1\":{\"346\":1}}],[\"也就是类名后面的大括号不是代码块\",{\"1\":{\"331\":1}}],[\"也就是代码块中继续嵌套代码块\",{\"1\":{\"331\":1}}],[\"也就是开发idea的公司\",{\"1\":{\"303\":1}}],[\"也就是id对10取余\",{\"1\":{\"256\":1}}],[\"也就是我们可以对\",{\"1\":{\"247\":1}}],[\"也就是我只用读两次磁盘\",{\"1\":{\"233\":1}}],[\"也就是说可能升级为关键字\",{\"1\":{\"313\":1}}],[\"也就是说操作系统中想要运行java程序\",{\"1\":{\"304\":1}}],[\"也就是说\",{\"1\":{\"231\":1,\"309\":1,\"320\":1,\"361\":1,\"442\":1,\"446\":1,\"540\":1,\"570\":1,\"614\":1,\"639\":1,\"662\":1,\"924\":1,\"1031\":1}}],[\"也就是索引和数据是存储在一起的\",{\"1\":{\"226\":1}}],[\"也就是创表必须得有\",{\"1\":{\"171\":1}}],[\"也就是\",{\"1\":{\"153\":1,\"523\":1,\"944\":1}}],[\"也就是留给整数的是\",{\"1\":{\"153\":1}}],[\"也必然是唯一的\",{\"1\":{\"663\":1}}],[\"也必须依赖于外部类对象而存在\",{\"1\":{\"614\":1}}],[\"也说明了使用内部类的主要场景\",{\"1\":{\"607\":1}}],[\"也需要重写它的tostring方法\",{\"1\":{\"669\":1}}],[\"也需要类加载\",{\"1\":{\"631\":1}}],[\"也需要使用instanceof关键字判断\",{\"1\":{\"587\":1}}],[\"也需要一个\",{\"1\":{\"446\":1}}],[\"也只能选择其一\",{\"1\":{\"570\":1}}],[\"也要被释放掉\",{\"1\":{\"689\":1}}],[\"也要慎重将一个类设置final\",{\"1\":{\"566\":1}}],[\"也要注意执行顺序\",{\"1\":{\"168\":1}}],[\"也要注意度\",{\"1\":{\"147\":1}}],[\"也访问不到\",{\"1\":{\"537\":1}}],[\"也和数组对象中的元素一致\",{\"1\":{\"453\":1}}],[\"也可能是super\",{\"1\":{\"546\":1}}],[\"也可能是最常见的\",{\"1\":{\"495\":1}}],[\"也可能没有结果\",{\"1\":{\"413\":1}}],[\"也可以增加让你的session失效的方法\",{\"1\":{\"1159\":1}}],[\"也可以直接使用response来调用其setcontenttype方法\",{\"1\":{\"1127\":1}}],[\"也可以解决中文乱码问题\",{\"1\":{\"1125\":1}}],[\"也可以获得远程ip和port\",{\"1\":{\"1115\":1}}],[\"也可以知道这些请求头当中的值是什么\",{\"1\":{\"1112\":1}}],[\"也可以思考一下\",{\"1\":{\"1008\":1}}],[\"也可以自动删除\",{\"1\":{\"880\":1}}],[\"也可以填字符\",{\"1\":{\"737\":2}}],[\"也可以利用搜索引擎去了解其中的细节\",{\"1\":{\"658\":1}}],[\"也可以子类对象\",{\"1\":{\"641\":1}}],[\"也可以在有权限的情况下\",{\"1\":{\"624\":1}}],[\"也可以在类中定义多个普通类\",{\"1\":{\"613\":1}}],[\"也可以返回接口的实现类类型\",{\"1\":{\"605\":1}}],[\"也可以返回抽象类的实现类类型\",{\"1\":{\"605\":1}}],[\"也可以返回该类的子类类型\",{\"1\":{\"605\":1}}],[\"也可以是数学元素\",{\"1\":{\"950\":1}}],[\"也可以是子类对象\",{\"1\":{\"641\":1}}],[\"也可以是油电混合的\",{\"1\":{\"599\":1}}],[\"也可以是汽油车\",{\"1\":{\"599\":1}}],[\"也可以是引用数据类型变量\",{\"1\":{\"382\":1}}],[\"也可以是引用数据类型\",{\"1\":{\"382\":1}}],[\"也可以选择重写\",{\"1\":{\"592\":1,\"594\":1}}],[\"也可以修饰引用数据类型\",{\"1\":{\"568\":1}}],[\"也可以修改\",{\"1\":{\"561\":1}}],[\"也可以访问非静态成员\",{\"1\":{\"475\":1}}],[\"也可以跳上两层\",{\"1\":{\"442\":1}}],[\"也可以存引用数据类型\",{\"1\":{\"429\":1}}],[\"也可以存储引用数据类型元素\",{\"1\":{\"393\":1}}],[\"也可以与可变参数的方法匹配\",{\"1\":{\"423\":1}}],[\"也可以使用字节流\",{\"1\":{\"1124\":1}}],[\"也可以使用快捷键\",{\"1\":{\"466\":1}}],[\"也可以使用\",{\"1\":{\"340\":1}}],[\"也可以通过对象调用\",{\"1\":{\"477\":1}}],[\"也可以通过resultmap来解决\",{\"1\":{\"259\":1}}],[\"也可以通过在特定幻灯片添加\",{\"1\":{\"29\":1}}],[\"也可以写string\",{\"1\":{\"257\":1}}],[\"也可以写表中的列\",{\"1\":{\"159\":1}}],[\"也可以为表名取别名\",{\"1\":{\"165\":1}}],[\"也可以用到逻辑运算符\",{\"1\":{\"162\":1}}],[\"也可以一次性插入多条数据\",{\"1\":{\"158\":1}}],[\"也可以先问同学\",{\"1\":{\"147\":1}}],[\"也可以结束\",{\"1\":{\"132\":1}}],[\"也可以响应二进制类型\",{\"1\":{\"123\":1}}],[\"也方便调用\",{\"1\":{\"387\":1}}],[\"也被称之为三元运算符\",{\"1\":{\"349\":1}}],[\"也同样是要告诉编译器怎么转换\",{\"1\":{\"337\":1}}],[\"也算代码块\",{\"1\":{\"331\":1}}],[\"也是构造cookie这个请求头\",{\"1\":{\"1141\":1}}],[\"也是一个很重要的方法\",{\"1\":{\"658\":1}}],[\"也是可以省略的\",{\"1\":{\"654\":1}}],[\"也是可以的\",{\"1\":{\"584\":1}}],[\"也是可以定义非public\",{\"1\":{\"469\":1}}],[\"也是常见操作\",{\"1\":{\"418\":1}}],[\"也是常用的循环控制关键字\",{\"1\":{\"377\":1}}],[\"也是类似的过程\",{\"1\":{\"396\":1}}],[\"也是定义一个变量\",{\"1\":{\"393\":1}}],[\"也是使用最多的循环\",{\"1\":{\"361\":1}}],[\"也是使用了java的string类\",{\"1\":{\"327\":1}}],[\"也是源码中最常被使用的类型\",{\"1\":{\"327\":1}}],[\"也是有别的解决手段\",{\"1\":{\"251\":1}}],[\"也没有构造方法\",{\"1\":{\"606\":1}}],[\"也没有用this去调用自己的构造方法\",{\"1\":{\"542\":1}}],[\"也没有double表示范围大\",{\"1\":{\"323\":1}}],[\"也没有指定\",{\"1\":{\"157\":1}}],[\"也叫作后悔药\",{\"1\":{\"1202\":1}}],[\"也叫散列表\",{\"1\":{\"680\":1}}],[\"也叫方法的重写\",{\"1\":{\"560\":1}}],[\"也叫构造器\",{\"1\":{\"463\":1}}],[\"也叫foreach\",{\"1\":{\"417\":1}}],[\"也叫布尔表达式\",{\"1\":{\"346\":1}}],[\"也叫长整型\",{\"1\":{\"322\":1}}],[\"也叫短整型\",{\"1\":{\"322\":1}}],[\"也即从表中的记录\",{\"1\":{\"234\":1}}],[\"也有人用\",{\"1\":{\"961\":1}}],[\"也有共同的行为\",{\"1\":{\"530\":1}}],[\"也有三种格式\",{\"1\":{\"434\":1}}],[\"也有三列\",{\"1\":{\"141\":1}}],[\"也有很多中低级java程序员自嘲自己为\",{\"1\":{\"420\":1}}],[\"也有随机访问\",{\"1\":{\"394\":1}}],[\"也有一种索引类型\",{\"1\":{\"220\":1}}],[\"也不允许存储null作为value\",{\"1\":{\"1020\":1}}],[\"也不允许\",{\"1\":{\"944\":1}}],[\"也不可能去描述它的行为\",{\"1\":{\"590\":1}}],[\"也不应该\",{\"1\":{\"590\":1}}],[\"也不应该是你来\",{\"1\":{\"150\":1}}],[\"也不需要存在\",{\"1\":{\"597\":1}}],[\"也不需要你管\",{\"1\":{\"510\":1}}],[\"也不需要写返回值\",{\"1\":{\"464\":1}}],[\"也不会立刻执行\",{\"1\":{\"468\":1}}],[\"也不会影响列的字符集\",{\"1\":{\"157\":2}}],[\"也不能使用this\",{\"1\":{\"475\":1}}],[\"也不能修改引用数据类型实参引用的取值\",{\"1\":{\"427\":1}}],[\"也不能打印数组长度\",{\"1\":{\"413\":1}}],[\"也不能是java中的关键字\",{\"1\":{\"314\":1}}],[\"也不能够让用户指定去查询数据库还是查询缓存\",{\"1\":{\"287\":1}}],[\"也不让程序员在代码中使用的单词\",{\"1\":{\"313\":1}}],[\"也不要使用\",{\"1\":{\"254\":1}}],[\"也不建议大家使用\",{\"1\":{\"254\":1}}],[\"也不携带端口号\",{\"1\":{\"139\":1}}],[\"也会由红黑树转化为链表\",{\"1\":{\"1014\":1}}],[\"也会使用这个数组\",{\"1\":{\"954\":1}}],[\"也会同时继承它当中的一个protected修饰的成员方法clone\",{\"1\":{\"538\":1}}],[\"也会每天和空指针异常打交道\",{\"1\":{\"412\":1}}],[\"也会变成保留字\",{\"1\":{\"313\":1}}],[\"也会用\",{\"1\":{\"264\":1}}],[\"也会乱码\",{\"1\":{\"139\":1}}],[\"也会给你一个新的地址\",{\"1\":{\"120\":1}}],[\"也建议大家使用英文\",{\"1\":{\"134\":1}}],[\"相反\",{\"1\":{\"767\":1}}],[\"相反则大于\",{\"1\":{\"741\":1}}],[\"相比较于传统的定义类\",{\"1\":{\"641\":1}}],[\"相比较而言\",{\"1\":{\"623\":1}}],[\"相比于中国\",{\"1\":{\"441\":1}}],[\"相比于c++的全手动回收垃圾对象\",{\"1\":{\"407\":1}}],[\"相等的意思\",{\"1\":{\"672\":1}}],[\"相等\",{\"1\":{\"350\":1,\"658\":1,\"672\":1}}],[\"相同的新\",{\"1\":{\"1017\":1}}],[\"相同\",{\"1\":{\"833\":2}}],[\"相同引用类型的变量调用同一个方法所呈现的多种不同行为特征\",{\"1\":{\"514\":1}}],[\"相同时为false\",{\"1\":{\"347\":1}}],[\"相同点\",{\"1\":{\"170\":1,\"924\":1}}],[\"相乘操作符两侧的值\",{\"1\":{\"344\":1}}],[\"相加运算符两侧的值\",{\"1\":{\"344\":1}}],[\"相对collection\",{\"1\":{\"956\":1}}],[\"相对应的\",{\"1\":{\"663\":1}}],[\"相对灵活\",{\"1\":{\"434\":1}}],[\"相对比较重要的\",{\"1\":{\"403\":1}}],[\"相对于double占用空间更小\",{\"1\":{\"323\":1}}],[\"相对更安全\",{\"1\":{\"319\":1}}],[\"相对target\",{\"1\":{\"249\":1}}],[\"相对路径名没有前缀\",{\"1\":{\"768\":1}}],[\"相对路径名必须使用取自其他路径名的信息进行解释\",{\"1\":{\"767\":1}}],[\"相对路径默认相对于谁\",{\"1\":{\"767\":1}}],[\"相对路径与绝对路径\",{\"0\":{\"767\":1}}],[\"相对路径\",{\"1\":{\"134\":1,\"767\":1,\"768\":2}}],[\"相应的厂商需要实现该接口\",{\"1\":{\"128\":1}}],[\"相当于去除重复元素\",{\"1\":{\"1037\":1}}],[\"相当于是取a的低位\",{\"1\":{\"1001\":1,\"1008\":1}}],[\"相当于是字段的备注信息\",{\"1\":{\"171\":1}}],[\"相当于我定义了一个符号\",{\"1\":{\"940\":1}}],[\"相当于什么呢\",{\"1\":{\"937\":1}}],[\"相当于用final修饰它\",{\"1\":{\"642\":1}}],[\"相当于没有做访问权限\",{\"1\":{\"534\":1}}],[\"相当于多分支if结构中的\",{\"1\":{\"359\":1}}],[\"相当于除以2\",{\"1\":{\"348\":1}}],[\"相当于乘以2\",{\"1\":{\"348\":1}}],[\"相当于那行代码被注释了\",{\"1\":{\"334\":1}}],[\"相当于已经用到了第二次sql语句查询的内容\",{\"1\":{\"283\":1}}],[\"相当于定义了一个变量\",{\"1\":{\"267\":1}}],[\"相当于在内部有一个容器\",{\"1\":{\"206\":1}}],[\"相当于找到webapps\",{\"1\":{\"134\":1}}],[\"相当于找到了\",{\"1\":{\"134\":1}}],[\"相当于告诉浏览器\",{\"1\":{\"121\":1}}],[\"相当于\",{\"1\":{\"120\":1,\"125\":1,\"271\":1,\"960\":1}}],[\"相关的java文件\",{\"1\":{\"1121\":1}}],[\"相关的\",{\"1\":{\"705\":1}}],[\"相关的工作岗位非常少\",{\"1\":{\"303\":1}}],[\"相关操作需要使用dos指令\",{\"1\":{\"308\":1}}],[\"相关信息\",{\"1\":{\"53\":1}}],[\"相关配置文档请见\",{\"1\":{\"0\":1}}],[\"去解析里面的键值对\",{\"1\":{\"1143\":1}}],[\"去执行httpservlet中的不同方法\",{\"1\":{\"1085\":1}}],[\"去重后北京的人\",{\"1\":{\"1037\":1}}],[\"去重\",{\"0\":{\"1037\":1}}],[\"去答\",{\"1\":{\"969\":1}}],[\"去修改原集合\",{\"1\":{\"955\":1}}],[\"去保证在迭代器使用过程中\",{\"1\":{\"955\":1}}],[\"去书店买java书\",{\"1\":{\"828\":1}}],[\"去使用就可以了\",{\"1\":{\"625\":1}}],[\"去访问静态内部类的成员\",{\"1\":{\"632\":2}}],[\"去访问成员内部类的成员\",{\"1\":{\"619\":2}}],[\"去访问外部类的成员\",{\"1\":{\"619\":1,\"632\":1}}],[\"去访问这个网址\",{\"1\":{\"120\":1}}],[\"去查找该成员变量\",{\"1\":{\"551\":1}}],[\"去查找的mapper文件\",{\"1\":{\"244\":2}}],[\"去超市购物\",{\"1\":{\"392\":1}}],[\"去除set标签中的最后一个\",{\"1\":{\"269\":1}}],[\"去除直接跟着的and或者是or关键字\",{\"1\":{\"264\":1}}],[\"去接收传递过来的参数值\",{\"1\":{\"256\":1}}],[\"去主键索引树查询\",{\"1\":{\"233\":1}}],[\"去k索引树\",{\"1\":{\"230\":1}}],[\"去k索引树上找\",{\"1\":{\"230\":1}}],[\"去建立一个b+树\",{\"1\":{\"223\":1}}],[\"去探讨一个数据结构适不适合当索引主要有以下三个考察指标\",{\"1\":{\"220\":1}}],[\"去\",{\"1\":{\"143\":1}}],[\"去掉开头和结尾的空格字符\",{\"1\":{\"739\":1}}],[\"去掉\",{\"1\":{\"127\":1}}],[\"去看看\",{\"1\":{\"112\":1}}],[\"重启前后的session对象并不是同一个\",{\"1\":{\"1156\":1}}],[\"重启tomcat\",{\"1\":{\"139\":1}}],[\"重构登录案例\",{\"1\":{\"1159\":1}}],[\"重构\",{\"1\":{\"823\":1}}],[\"重命名\",{\"1\":{\"772\":1}}],[\"重命名功能\",{\"0\":{\"772\":1}}],[\"重新加载到内容\",{\"1\":{\"1156\":1}}],[\"重新赋值\",{\"1\":{\"851\":1}}],[\"重新命名此抽象路径名表示的文件\",{\"1\":{\"772\":1}}],[\"重新定义两个新的猫狗类\",{\"1\":{\"595\":1}}],[\"重新输入\",{\"1\":{\"354\":1}}],[\"重写其doget\",{\"1\":{\"1085\":1}}],[\"重写doget\",{\"1\":{\"1085\":1}}],[\"重写了hashcode和equals\",{\"1\":{\"1015\":1}}],[\"重写findclass\",{\"1\":{\"923\":1}}],[\"重写findclass方法\",{\"1\":{\"923\":1}}],[\"重写run\",{\"1\":{\"884\":1}}],[\"重写run方法\",{\"1\":{\"832\":3,\"850\":3,\"884\":1}}],[\"重写compareto方法\",{\"1\":{\"740\":2}}],[\"重写clone方法的访问权限\",{\"1\":{\"699\":1}}],[\"重写拼接\",{\"1\":{\"738\":1,\"739\":1}}],[\"重写后不再是地址值了\",{\"1\":{\"685\":1}}],[\"重写equals方法的注意事项\",{\"0\":{\"674\":1,\"675\":1}}],[\"重写没有固定的标准格式\",{\"1\":{\"668\":1}}],[\"重写父接口抽象方法\",{\"1\":{\"598\":1}}],[\"重写的方法不能抛出更多的异常\",{\"1\":{\"563\":1}}],[\"重写\",{\"0\":{\"560\":1}}],[\"重点掌握list接口的特点\",{\"1\":{\"956\":1}}],[\"重点\",{\"0\":{\"523\":1,\"524\":1,\"531\":1,\"540\":1,\"615\":1,\"616\":1,\"957\":1},\"1\":{\"217\":1,\"460\":1,\"643\":1,\"994\":1}}],[\"重复元素\",{\"1\":{\"1028\":2}}],[\"重复是指的它的键\",{\"1\":{\"1003\":1}}],[\"重复\",{\"1\":{\"993\":1}}],[\"重复的票\",{\"1\":{\"851\":1}}],[\"重复的数据只返回其一条数据给用户\",{\"1\":{\"163\":1}}],[\"重复存储了\",{\"1\":{\"178\":1}}],[\"重复了两条\",{\"1\":{\"163\":1}}],[\"重复了一条\",{\"1\":{\"163\":1}}],[\"重要是\",{\"1\":{\"590\":1}}],[\"重要在于\",{\"1\":{\"350\":1}}],[\"重要\",{\"0\":{\"124\":1,\"945\":1,\"1009\":1,\"1016\":1},\"1\":{\"496\":2,\"601\":1,\"938\":1}}],[\"重要的内容\",{\"1\":{\"63\":1}}],[\"重定向一定会搭配着location响应头一起来发挥作用\",{\"1\":{\"120\":1}}],[\"重定向\",{\"1\":{\"120\":1,\"1125\":1,\"1129\":1}}],[\"状态码\",{\"1\":{\"120\":2,\"1105\":1}}],[\"响应对应的json数据\",{\"1\":{\"1132\":1}}],[\"响应图片\",{\"1\":{\"1124\":1}}],[\"响应文本数据\",{\"1\":{\"1124\":1}}],[\"响应正文\",{\"1\":{\"1105\":1}}],[\"响应中文乱码问题\",{\"1\":{\"1102\":1}}],[\"响应http响应报文\",{\"1\":{\"127\":1}}],[\"响应报文的封装\",{\"1\":{\"1121\":1}}],[\"响应报文的组成\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"响应报文中出现了一堆未知的字符\",{\"1\":{\"1120\":1}}],[\"响应报文\",{\"0\":{\"1105\":1},\"1\":{\"1137\":1}}],[\"响应报文在网络中中转传输返回给客户端之后\",{\"1\":{\"124\":1}}],[\"响应报文格式\",{\"1\":{\"105\":1}}],[\"响应体里面的\",{\"1\":{\"123\":1}}],[\"响应体里面的数据会最终出现在浏览器的窗口界面中\",{\"1\":{\"123\":1}}],[\"响应体\",{\"0\":{\"123\":1,\"1124\":1},\"1\":{\"1121\":1,\"1124\":1}}],[\"响应体四部分\",{\"1\":{\"119\":1}}],[\"响应行主要是三部分组成\",{\"1\":{\"120\":1}}],[\"响应行\",{\"0\":{\"120\":1,\"1122\":1},\"1\":{\"1105\":1,\"1121\":1}}],[\"响应\",{\"1\":{\"119\":1,\"1102\":1,\"1110\":1,\"1142\":1}}],[\"响应头的设置\",{\"1\":{\"1137\":1}}],[\"响应头也是key\",{\"1\":{\"1123\":1}}],[\"响应头\",{\"0\":{\"121\":1,\"1123\":1},\"1\":{\"116\":1,\"119\":1,\"1105\":1,\"1121\":1}}],[\"结合工程实践\",{\"1\":{\"1006\":1}}],[\"结合我们前面封装的思想\",{\"1\":{\"559\":1}}],[\"结合上面\",{\"1\":{\"408\":1}}],[\"结果的预期与单线程下是一致的\",{\"1\":{\"969\":1}}],[\"结果正常的奇怪情况\",{\"1\":{\"669\":1}}],[\"结果应是一个简明但易于读懂的信息表达式\",{\"1\":{\"666\":1}}],[\"结果会直接返回false\",{\"1\":{\"586\":1}}],[\"结果就是\",{\"1\":{\"425\":2}}],[\"结果为false\",{\"1\":{\"361\":1}}],[\"结果为true\",{\"1\":{\"361\":1}}],[\"结果只有两种\",{\"1\":{\"361\":1}}],[\"结果\",{\"1\":{\"342\":1}}],[\"结果是怎么样的\",{\"1\":{\"540\":1}}],[\"结果是false时\",{\"1\":{\"358\":2}}],[\"结果是float\",{\"1\":{\"340\":1}}],[\"结果是true时\",{\"1\":{\"358\":2}}],[\"结果是它们的余数\",{\"1\":{\"344\":1}}],[\"结果是double\",{\"1\":{\"340\":1}}],[\"结果是long\",{\"1\":{\"340\":1}}],[\"结果是int\",{\"1\":{\"340\":2}}],[\"结果是\",{\"1\":{\"324\":2}}],[\"结果集的解析是mybatis自动完成的\",{\"1\":{\"244\":1}}],[\"结构等等\",{\"1\":{\"456\":1}}],[\"结构示例\",{\"1\":{\"275\":1,\"278\":1,\"281\":1}}],[\"结构化查询语言\",{\"1\":{\"144\":1,\"146\":1}}],[\"结构化信息\",{\"1\":{\"141\":1}}],[\"结构都是一致的\",{\"1\":{\"141\":1}}],[\"结论如下\",{\"1\":{\"592\":1}}],[\"结论其实还是那句话\",{\"1\":{\"538\":1}}],[\"结论\",{\"0\":{\"536\":1},\"1\":{\"116\":1,\"220\":1,\"470\":1,\"830\":1,\"838\":1,\"841\":1,\"944\":1}}],[\"结束当前层次循环\",{\"1\":{\"376\":1}}],[\"结束循环\",{\"1\":{\"361\":1}}],[\"结束扫描\",{\"1\":{\"353\":1}}],[\"结束\",{\"0\":{\"41\":1},\"1\":{\"73\":1,\"230\":1,\"354\":1,\"821\":1,\"1016\":1}}],[\"直观开发效率高\",{\"1\":{\"924\":1}}],[\"直道抛给jvm\",{\"1\":{\"759\":1}}],[\"直到接到通知被唤醒\",{\"1\":{\"868\":1}}],[\"直到抛给main方法\",{\"1\":{\"749\":1}}],[\"直到找到object类\",{\"1\":{\"551\":1}}],[\"直到找到一个构造器它隐含的super\",{\"1\":{\"546\":1}}],[\"直到循环结束\",{\"1\":{\"375\":1}}],[\"直到布尔表达式的结果是false\",{\"1\":{\"362\":1,\"364\":1}}],[\"直到碰到break\",{\"1\":{\"359\":1}}],[\"直到跟这个随机数相等\",{\"1\":{\"354\":1}}],[\"直到小数部分为0\",{\"1\":{\"336\":1}}],[\"直到事务1提交\",{\"1\":{\"212\":1}}],[\"直播带货\",{\"1\":{\"116\":1}}],[\"直接去用户目录下\",{\"1\":{\"1195\":1}}],[\"直接傻瓜式安装即可\",{\"1\":{\"1186\":1}}],[\"直接抓包获取的是id\",{\"1\":{\"1160\":1}}],[\"直接抓包获取的是对应的值\",{\"1\":{\"1160\":1}}],[\"直接封装\",{\"0\":{\"1117\":1}}],[\"直接resize\",{\"1\":{\"1012\":1}}],[\"直接hashcode\",{\"1\":{\"1008\":1}}],[\"直接记死这个结论\",{\"1\":{\"978\":1}}],[\"直接赋值的方式会创建一个对象\",{\"1\":{\"732\":1}}],[\"直接赋值的时候\",{\"1\":{\"732\":1}}],[\"直接赋值\",{\"1\":{\"732\":1}}],[\"直接拷贝一份成员变量\",{\"1\":{\"699\":1}}],[\"直接拷贝值\",{\"1\":{\"699\":1}}],[\"直接认定为不相等\",{\"1\":{\"674\":1}}],[\"直接调用的话\",{\"1\":{\"694\":1}}],[\"直接调用\",{\"1\":{\"667\":1}}],[\"直接获取了对象\",{\"1\":{\"649\":1}}],[\"直接new创建\",{\"1\":{\"616\":1}}],[\"直接把elementdata后面的位置\",{\"1\":{\"954\":1}}],[\"直接把一个类丢到另一个类中\",{\"1\":{\"623\":1}}],[\"直接把一个类声明为abstract\",{\"1\":{\"592\":1}}],[\"直接把这个功能去掉\",{\"1\":{\"510\":1}}],[\"直接声明为普通类就够了\",{\"1\":{\"592\":1}}],[\"直接回车即可重写\",{\"1\":{\"562\":1}}],[\"直接不用管\",{\"1\":{\"546\":1}}],[\"直接指出调用父类哪个构造器的子类对象创建方式\",{\"1\":{\"541\":1}}],[\"直接让它继承另一个类\",{\"1\":{\"520\":1}}],[\"直接显式赋值即可\",{\"1\":{\"496\":1}}],[\"直接将数据存储到该数组位置\",{\"1\":{\"1016\":1}}],[\"直接将成员变量的显式赋值和构造代码块中的代码智能地加入\",{\"1\":{\"488\":1}}],[\"直接将资源文件放置在webapps目录下\",{\"1\":{\"134\":1}}],[\"直接用string\",{\"1\":{\"1015\":1}}],[\"直接用的是常量池的引用\",{\"1\":{\"732\":1}}],[\"直接用父接口引用接收\",{\"1\":{\"653\":1}}],[\"直接用对象名点访问即可\",{\"1\":{\"616\":1}}],[\"直接用子类类名点访问\",{\"1\":{\"539\":1}}],[\"直接用方法名调用\",{\"1\":{\"475\":1}}],[\"直接用中文是完全可以的\",{\"1\":{\"315\":1}}],[\"直接了当的给出该成员变量的取值\",{\"1\":{\"458\":1}}],[\"直接打印对象名得到的是\",{\"1\":{\"453\":1}}],[\"直接打印数组名得到一个null字符串\",{\"1\":{\"413\":1}}],[\"直接打印数组名可以获取数组对象的地址\",{\"1\":{\"413\":1}}],[\"直接输出一个对象的引用\",{\"1\":{\"500\":1}}],[\"直接输出对象名\",{\"1\":{\"453\":1}}],[\"直接输出语句打印数组名\",{\"1\":{\"400\":1}}],[\"直接存储在栈帧中\",{\"1\":{\"405\":1}}],[\"直接存储的是数据\",{\"1\":{\"226\":1}}],[\"直接定位访问它\",{\"1\":{\"394\":1}}],[\"直接java\",{\"1\":{\"308\":1}}],[\"直接抄写即可\",{\"1\":{\"308\":1}}],[\"直接使用其提供的copyproperties方法\",{\"1\":{\"1118\":1}}],[\"直接使用arraylist\",{\"1\":{\"968\":1}}],[\"直接使用一个int来遍历\",{\"1\":{\"955\":1}}],[\"直接使用toarray这个有什么弊端\",{\"1\":{\"954\":1}}],[\"直接使用java\",{\"1\":{\"914\":1}}],[\"直接使用final修饰即可\",{\"1\":{\"569\":2}}],[\"直接使用for循环\",{\"1\":{\"415\":1}}],[\"直接使用\",{\"1\":{\"254\":1}}],[\"直接以对应mapper文件的相对路径\",{\"1\":{\"249\":1}}],[\"直接说出这几个的中文\",{\"1\":{\"210\":1}}],[\"直接拼接起来\",{\"1\":{\"185\":1}}],[\"直接在程序运行期间\",{\"1\":{\"662\":1}}],[\"直接在子类中\",{\"1\":{\"562\":1}}],[\"直接在括号外面加逗号\",{\"1\":{\"158\":1}}],[\"直接在表名后\",{\"1\":{\"158\":1}}],[\"直接写成员的名字就可以了\",{\"1\":{\"615\":1}}],[\"直接写\",{\"1\":{\"334\":1}}],[\"直接写在代码中的布尔值\",{\"1\":{\"328\":1}}],[\"直接写在代码中的\",{\"1\":{\"328\":2}}],[\"直接写在代码中的小数都是\",{\"1\":{\"328\":1}}],[\"直接写在代码中的整数都是\",{\"1\":{\"328\":1}}],[\"直接写多个值\",{\"1\":{\"251\":1}}],[\"直接写列的值\",{\"1\":{\"158\":1}}],[\"直接写大一点点\",{\"1\":{\"153\":1}}],[\"直接继承表层次的\",{\"1\":{\"157\":1}}],[\"直接报错\",{\"1\":{\"153\":1}}],[\"直接访问的效果是什么样的呢\",{\"1\":{\"548\":1}}],[\"直接访问是访问不到的\",{\"1\":{\"539\":1}}],[\"直接访问类中成员\",{\"1\":{\"461\":1}}],[\"直接访问到\",{\"1\":{\"139\":1}}],[\"直接访问a页面\",{\"1\":{\"116\":1}}],[\"直接部署\",{\"0\":{\"134\":1}}],[\"直接关掉cmd\",{\"1\":{\"132\":1}}],[\"直接解压缩到盘符根目录即可\",{\"1\":{\"130\":1}}],[\"直接下载文件\",{\"1\":{\"121\":1}}],[\"直接发送的就是get请求\",{\"1\":{\"115\":1}}],[\"拒绝不合法的referer来源\",{\"1\":{\"116\":1}}],[\"谷歌广告联盟\",{\"1\":{\"116\":1}}],[\"应当重写父类方法\",{\"1\":{\"734\":1}}],[\"应当优先响应我可以接收处理的类型\",{\"1\":{\"116\":1}}],[\"应返回\",{\"1\":{\"674\":1}}],[\"应仅存在于computer内部\",{\"1\":{\"607\":1}}],[\"应用的上下文路径\",{\"1\":{\"1111\":1}}],[\"应用部署\",{\"1\":{\"1075\":1}}],[\"应用加载器\",{\"1\":{\"912\":1}}],[\"应用程序里找\",{\"1\":{\"1140\":1}}],[\"应用程序关闭\",{\"1\":{\"1093\":1}}],[\"应用程序启动的时候会初始化\",{\"1\":{\"1095\":1}}],[\"应用程序启动\",{\"1\":{\"1093\":1}}],[\"应用程序中的类和接口\",{\"1\":{\"917\":1}}],[\"应用程序可以使用数据输入流将数据读入\",{\"1\":{\"816\":1}}],[\"应用程序就可以将各个字节写入底层输出流中\",{\"1\":{\"790\":1}}],[\"应用程序执行期间\",{\"1\":{\"682\":1}}],[\"应用程序会将这些数据保存在一些内存单元中\",{\"1\":{\"330\":1}}],[\"应用与金融风控\",{\"1\":{\"303\":1}}],[\"应用场景\",{\"1\":{\"116\":2}}],[\"应该找到相应报文\",{\"1\":{\"1132\":1}}],[\"应该在代码的测试阶段修正代码\",{\"1\":{\"759\":1}}],[\"应该优先考虑使用stringbuffer\",{\"1\":{\"744\":1}}],[\"应该返回true\",{\"1\":{\"698\":1}}],[\"应该叫匿名内部类对象\",{\"1\":{\"647\":1}}],[\"应该私有化它\",{\"1\":{\"611\":1}}],[\"应该是\",{\"1\":{\"497\":1}}],[\"应该使用static修饰的静态成员变量\",{\"1\":{\"478\":2}}],[\"应该开门见山的定义成员变量\",{\"1\":{\"454\":1}}],[\"应该加上用来保证switch能够执行\",{\"1\":{\"359\":1}}],[\"应该加上提示键盘输入的输出语句\",{\"1\":{\"352\":1}}],[\"应该改成下面这样\",{\"1\":{\"336\":1}}],[\"应该养成良好的注释书写习惯\",{\"1\":{\"319\":1}}],[\"应该尽量使用\",{\"1\":{\"256\":1}}],[\"应该怎么设计这个map\",{\"1\":{\"997\":1}}],[\"应该怎么做\",{\"1\":{\"997\":1,\"1028\":1}}],[\"应该怎么创建\",{\"1\":{\"956\":1}}],[\"应该怎么答呢\",{\"1\":{\"213\":1}}],[\"应该怎样写\",{\"1\":{\"253\":1}}],[\"应该写\",{\"1\":{\"252\":1,\"253\":2}}],[\"应该要尽量避免回表的情况出现\",{\"1\":{\"233\":1}}],[\"应该考虑之后业务的变化\",{\"1\":{\"176\":1}}],[\"应该遵循的规范\",{\"1\":{\"175\":1}}],[\"应该留有一定扩展性\",{\"1\":{\"153\":1}}],[\"应该命名为student\",{\"1\":{\"149\":1}}],[\"应该如何访问\",{\"1\":{\"134\":1}}],[\"表头的学校就负责解释这一列数据\",{\"1\":{\"924\":1}}],[\"表现在代码上就是\",{\"1\":{\"663\":1}}],[\"表格使用说明\",{\"1\":{\"356\":1}}],[\"表格和分割线\",{\"1\":{\"12\":1}}],[\"表达式是\",{\"1\":{\"651\":1}}],[\"表达式结果必须是布尔值\",{\"1\":{\"358\":1}}],[\"表达式2\",{\"1\":{\"349\":1}}],[\"表达式1\",{\"1\":{\"349\":1}}],[\"表达式一般都有确定的结果\",{\"1\":{\"342\":1}}],[\"表达式一般都是有\",{\"1\":{\"342\":1}}],[\"表达式\",{\"1\":{\"342\":1}}],[\"表达式通过运算符连接操作数\",{\"1\":{\"342\":1}}],[\"表达式的类型提升\",{\"1\":{\"340\":1}}],[\"表达式类型提升\",{\"0\":{\"340\":1}}],[\"表达式遵循ieee\",{\"1\":{\"312\":1}}],[\"表明对象不可在使用\",{\"1\":{\"927\":1}}],[\"表明两个或者多个变量必须同步地发生变化\",{\"1\":{\"312\":1}}],[\"表明一段代码需要同步执行\",{\"1\":{\"312\":1}}],[\"表明一个类实现了给定的接口\",{\"1\":{\"312\":1}}],[\"表明一个类不能派生出子类\",{\"1\":{\"312\":1}}],[\"表明一个类型是另一个类型的子类型\",{\"1\":{\"312\":1}}],[\"表明一个默认的分支\",{\"1\":{\"312\":1}}],[\"表明当前对象的父类型的引用或者父类型的构造方法\",{\"1\":{\"312\":1}}],[\"表明当条件不成立时的分支\",{\"1\":{\"312\":1}}],[\"表明具有静态属性\",{\"1\":{\"312\":1}}],[\"表明要访问指定的类或包\",{\"1\":{\"312\":1}}],[\"表明类或者成员方法具有抽象属性\",{\"1\":{\"312\":1}}],[\"表明我想创建一个索引\",{\"1\":{\"222\":1}}],[\"表结构定义文件\",{\"1\":{\"222\":1,\"225\":1}}],[\"表b中有4条数据\",{\"1\":{\"181\":1}}],[\"表a中的一条数据\",{\"1\":{\"173\":1,\"174\":1}}],[\"表中必须得有一个\",{\"1\":{\"177\":1}}],[\"表中\",{\"1\":{\"171\":1}}],[\"表中的数据量不大\",{\"1\":{\"171\":1}}],[\"表中数据的基本单元\",{\"1\":{\"146\":1}}],[\"表里只有一条数据\",{\"1\":{\"212\":1}}],[\"表里有以下列\",{\"1\":{\"158\":1}}],[\"表里面有哪些列\",{\"1\":{\"222\":1}}],[\"表里面有一列\",{\"1\":{\"153\":1}}],[\"表里面的字段也是latin1\",{\"1\":{\"157\":1}}],[\"表是latin1\",{\"1\":{\"157\":1}}],[\"表的字符集\",{\"1\":{\"157\":1}}],[\"表层面的\",{\"1\":{\"157\":1}}],[\"表名或者是列名的时候\",{\"1\":{\"256\":1}}],[\"表名自己写\",{\"1\":{\"153\":1}}],[\"表名\",{\"1\":{\"149\":3,\"153\":1,\"171\":2}}],[\"表\",{\"1\":{\"140\":1,\"146\":3}}],[\"表示会在硬盘上面存活多少秒\",{\"1\":{\"1147\":1}}],[\"表示已经收到服务器的关闭请求\",{\"1\":{\"907\":1}}],[\"表示已经收到客户端的关闭请求\",{\"1\":{\"907\":1}}],[\"表示服务器也准备好关闭连接了\",{\"1\":{\"907\":1}}],[\"表示客户端已经完成了数据传输\",{\"1\":{\"907\":1}}],[\"表示客户端已经收到了服务器的确认\",{\"1\":{\"906\":1}}],[\"表示同意建立连接\",{\"1\":{\"906\":1}}],[\"表示同包中的其他类都可以访问\",{\"1\":{\"509\":1}}],[\"表示请求建立连接\",{\"1\":{\"906\":1}}],[\"表示请求消息正文的长度\",{\"1\":{\"116\":1}}],[\"表示异步计算的结果\",{\"1\":{\"880\":1}}],[\"表示放入包子\",{\"1\":{\"867\":1}}],[\"表示读取到的字节的个数\",{\"1\":{\"794\":1}}],[\"表示读取的字节值\",{\"1\":{\"794\":1}}],[\"表示根目录的绝对路径名的前缀为\",{\"1\":{\"768\":1}}],[\"表示文件最后一次被修改的时间的\",{\"1\":{\"775\":1}}],[\"表示文件\",{\"1\":{\"766\":1}}],[\"表示抛出异常\",{\"1\":{\"758\":2}}],[\"表示传入比较规则的int\",{\"1\":{\"741\":1}}],[\"表示a1对象等于a2\",{\"1\":{\"740\":1}}],[\"表示a1对象大于a2\",{\"1\":{\"740\":1}}],[\"表示a1对象小于a2\",{\"1\":{\"740\":1}}],[\"表示相等\",{\"1\":{\"739\":1}}],[\"表示多个字符\",{\"1\":{\"729\":2}}],[\"表示多个班级的学生的成绩的表格\",{\"1\":{\"431\":1}}],[\"表示秒数\",{\"1\":{\"725\":1}}],[\"表示分钟里的秒数\",{\"1\":{\"725\":1}}],[\"表示分钟数\",{\"1\":{\"725\":1}}],[\"表示小时中的分钟数\",{\"1\":{\"725\":1}}],[\"表示小时数\",{\"1\":{\"725\":1}}],[\"表示天数\",{\"1\":{\"725\":1}}],[\"表示月份中的天数\",{\"1\":{\"725\":1}}],[\"表示月份\",{\"1\":{\"725\":2}}],[\"表示千年年份\",{\"1\":{\"725\":1}}],[\"表示年\",{\"1\":{\"725\":1}}],[\"表示时间和日期我们仍然需要date类来协助\",{\"1\":{\"726\":1}}],[\"表示时间\",{\"1\":{\"721\":1}}],[\"表示用户等级\",{\"1\":{\"721\":1}}],[\"表示物流状态\",{\"1\":{\"721\":1}}],[\"表示支付方式\",{\"1\":{\"721\":1}}],[\"表示订单状态\",{\"1\":{\"721\":1}}],[\"表示编号\",{\"1\":{\"713\":1}}],[\"表示编码值为0的字符\",{\"1\":{\"407\":1}}],[\"表示是编辑\",{\"1\":{\"1201\":1}}],[\"表示是周几\",{\"1\":{\"713\":1}}],[\"表示是否需要持久连接\",{\"1\":{\"116\":1}}],[\"表示这个方法已经被放弃使用了\",{\"1\":{\"689\":1}}],[\"表示判断引用所指向的对象的具体类型\",{\"1\":{\"675\":1}}],[\"表示o1和o2两个引用指向的对象\",{\"1\":{\"663\":2}}],[\"表示它们在数组中的存储位置一样\",{\"1\":{\"680\":1}}],[\"表示它无法被重写\",{\"1\":{\"660\":1}}],[\"表示它是一个被放弃使用的过失方法\",{\"1\":{\"658\":1}}],[\"表示它是一个接口\",{\"1\":{\"598\":1}}],[\"表示功能接口中\",{\"1\":{\"653\":2}}],[\"表示创建功能接口的子类对象了\",{\"1\":{\"653\":1}}],[\"表示创建语法中\",{\"1\":{\"647\":1}}],[\"表示制定标准和规范\",{\"1\":{\"598\":1}}],[\"表示引用不能指向新的对象\",{\"1\":{\"572\":1}}],[\"表示引用中存储的地址成为一个常量\",{\"1\":{\"568\":1}}],[\"表示引用是没有指向任何对象\",{\"1\":{\"412\":1}}],[\"表示在整个程序期间\",{\"1\":{\"568\":1}}],[\"表示在目标sql执行之前或者是之后执行\",{\"1\":{\"273\":1}}],[\"表示最后的变量\",{\"1\":{\"568\":1}}],[\"表示最后的类\",{\"1\":{\"566\":1}}],[\"表示将要去调用父类构造器\",{\"1\":{\"542\":1}}],[\"表示将当前时间的时间戳设为默认值\",{\"1\":{\"171\":1}}],[\"表示调用父类构造器\",{\"1\":{\"544\":1}}],[\"表示调用父类的无参构造器\",{\"1\":{\"541\":1}}],[\"表示调用自身构造器\",{\"1\":{\"544\":1}}],[\"表示调用类中其他构造器时\",{\"1\":{\"466\":1}}],[\"表示调用类中的其它构造器\",{\"1\":{\"466\":1}}],[\"表示继承了一个父类\",{\"1\":{\"532\":1}}],[\"表示对功能的扩展\",{\"1\":{\"597\":1}}],[\"表示对同包中的其它类可见\",{\"1\":{\"508\":1}}],[\"表示对变量的运算规则\",{\"1\":{\"342\":1}}],[\"表示该类允许进行克隆\",{\"1\":{\"694\":1}}],[\"表示该类型是一个接口\",{\"1\":{\"596\":1}}],[\"表示该变量一旦声明并初始化赋值\",{\"1\":{\"569\":1}}],[\"表示该方法需要返回一个\",{\"1\":{\"660\":1}}],[\"表示该方法需要传入一个对象\",{\"1\":{\"481\":2}}],[\"表示该方法无法被重写\",{\"1\":{\"567\":2}}],[\"表示该包的类都会导入\",{\"1\":{\"504\":1}}],[\"表示该分支要执行的代码\",{\"1\":{\"359\":1}}],[\"表示球队得分\",{\"1\":{\"474\":1}}],[\"表示二维数组中的某一个一维数组\",{\"1\":{\"436\":1}}],[\"表示数组的引用指向了null\",{\"1\":{\"413\":1}}],[\"表示正在执行的方法\",{\"1\":{\"403\":1}}],[\"表示方法执行完毕\",{\"1\":{\"382\":1}}],[\"表示方法的返回值\",{\"1\":{\"378\":1}}],[\"表示结束当前循环\",{\"1\":{\"376\":1}}],[\"表示结束整个switch语句\",{\"1\":{\"359\":1}}],[\"表示一天中的小时数\",{\"1\":{\"725\":1}}],[\"表示一个选择分支的取值\",{\"1\":{\"359\":1}}],[\"表示一个选择分支\",{\"1\":{\"359\":1}}],[\"表示一份完整的数据仓库\",{\"1\":{\"146\":1}}],[\"表示选择的条件或者依据\",{\"1\":{\"359\":1}}],[\"表示间隔\",{\"1\":{\"356\":1}}],[\"表示那些无法用键盘直接输入的控制字符\",{\"1\":{\"355\":1}}],[\"表示左边除以右边得到商\",{\"1\":{\"344\":1}}],[\"表示左边除以右边\",{\"1\":{\"344\":1}}],[\"表示范围非常大\",{\"1\":{\"323\":1}}],[\"表示各种各样的名字\",{\"1\":{\"314\":1}}],[\"表示其中的一个分支\",{\"1\":{\"312\":1}}],[\"表示关闭\",{\"1\":{\"283\":1}}],[\"表示开启\",{\"1\":{\"283\":1}}],[\"表示开启批处理\",{\"1\":{\"207\":1}}],[\"表示执行的结果映射到哪个参数中\",{\"1\":{\"273\":1}}],[\"表示表中的数据都是一个不可拆分的最小单元\",{\"1\":{\"176\":1}}],[\"表示表中总行数\",{\"1\":{\"168\":1}}],[\"表示值是唯一的\",{\"1\":{\"170\":1}}],[\"表示什么都没有\",{\"1\":{\"170\":1}}],[\"表示当前列是否可以为null\",{\"1\":{\"170\":1}}],[\"表示占位\",{\"1\":{\"162\":1}}],[\"表示通配\",{\"1\":{\"162\":1}}],[\"表示\",{\"1\":{\"148\":1}}],[\"表示以info结尾\",{\"1\":{\"148\":1}}],[\"表示以test开头\",{\"1\":{\"148\":1}}],[\"表示某种特定类型数据的的结构化清单\",{\"1\":{\"146\":1}}],[\"表示的是十六级制\",{\"1\":{\"322\":1}}],[\"表示的是八级制\",{\"1\":{\"322\":1}}],[\"表示的是二级制\",{\"1\":{\"322\":1}}],[\"表示的是一组数据的集合\",{\"1\":{\"320\":1,\"455\":1}}],[\"表示的是\",{\"1\":{\"139\":1}}],[\"表示的是体的长度\",{\"1\":{\"116\":1}}],[\"用命令行\",{\"1\":{\"1205\":1}}],[\"用的不多\",{\"1\":{\"1202\":1}}],[\"用的时候优先用静态内部类\",{\"1\":{\"632\":1}}],[\"用以表明\",{\"1\":{\"1050\":1}}],[\"用x把hash表示出来\",{\"1\":{\"1013\":1}}],[\"用idea点一下\",{\"1\":{\"968\":1}}],[\"用描述数据存储的接口\",{\"1\":{\"952\":1}}],[\"用集合类也完成一下这个功能\",{\"1\":{\"950\":1}}],[\"用不了t\",{\"1\":{\"939\":2}}],[\"用指定的键在此属性列表中搜索属性\",{\"1\":{\"918\":1}}],[\"用转化为直接引用\",{\"1\":{\"910\":1}}],[\"用字节流向文件中写个整数1000\",{\"1\":{\"815\":1}}],[\"用readcount表示\",{\"1\":{\"810\":1}}],[\"用readdata\",{\"1\":{\"810\":1}}],[\"用2个字节来编解码\",{\"1\":{\"799\":1}}],[\"用单个字节来表示\",{\"1\":{\"799\":1}}],[\"用与时间点\",{\"1\":{\"775\":1}}],[\"用逗号隔开\",{\"1\":{\"756\":1,\"758\":1}}],[\"用新的字符串\",{\"1\":{\"739\":1}}],[\"用新\",{\"1\":{\"739\":1}}],[\"用双引号引起来\",{\"1\":{\"730\":1}}],[\"用一组符号来描述被引用的目标\",{\"1\":{\"910\":1}}],[\"用一个键\",{\"1\":{\"995\":1}}],[\"用一个计数器\",{\"1\":{\"948\":1}}],[\"用一个字节的8位表示\",{\"1\":{\"799\":1}}],[\"用一个字节的7位可以表示\",{\"1\":{\"799\":1}}],[\"用一个时间戳来设置date对象\",{\"1\":{\"724\":1}}],[\"用一句话来总结\",{\"1\":{\"579\":1,\"580\":1}}],[\"用两个引用调用方法\",{\"1\":{\"681\":1}}],[\"用==比较相等是够用的\",{\"1\":{\"675\":1}}],[\"用当前对象调用\",{\"1\":{\"667\":1}}],[\"用对象名访问即可\",{\"1\":{\"627\":1,\"628\":1}}],[\"用对象名访问成员即可\",{\"1\":{\"617\":1,\"629\":1}}],[\"用对象名点访问\",{\"1\":{\"549\":3,\"556\":3}}],[\"用谁的对象名访问的就是谁的成员\",{\"1\":{\"616\":1}}],[\"用成员内部类对象名访问的就是内部类的成员\",{\"1\":{\"616\":1}}],[\"用外部类类名\",{\"1\":{\"615\":2}}],[\"用子类引用接收\",{\"1\":{\"549\":1,\"556\":1}}],[\"用子类对象访问protected成员\",{\"1\":{\"535\":1}}],[\"用父类引用指向不同子类对象\",{\"1\":{\"582\":1}}],[\"用父类引用指向子类对象\",{\"1\":{\"578\":1}}],[\"用父类引用接收\",{\"1\":{\"549\":2,\"556\":2}}],[\"用父类对象访问protected成员\",{\"1\":{\"535\":1}}],[\"用super\",{\"1\":{\"543\":1}}],[\"用这个其他子类对象访问父类的protected成员\",{\"1\":{\"535\":1}}],[\"用表格来描述这个访问权限就是\",{\"1\":{\"534\":1}}],[\"用私有private修饰\",{\"1\":{\"510\":1}}],[\"用public\",{\"1\":{\"510\":1}}],[\"用显式赋值和构造器足矣\",{\"1\":{\"490\":1}}],[\"用完后就无法再次使用了\",{\"1\":{\"482\":1}}],[\"用面向对象的思想模拟植物大战僵尸\",{\"1\":{\"469\":1}}],[\"用面向对象的思想模拟lol当中盖伦的战斗\",{\"1\":{\"469\":1}}],[\"用this\",{\"1\":{\"615\":1}}],[\"用this点访问到的一定是自身成员\",{\"1\":{\"615\":1}}],[\"用this引用去访问类中成员变量和调用类中成员方法\",{\"1\":{\"461\":1}}],[\"用this关键字指向\",{\"1\":{\"460\":1}}],[\"用递归求解一个问题的思路很容易被人理解\",{\"1\":{\"442\":1}}],[\"用二维数组来存储表格数据\",{\"1\":{\"431\":1}}],[\"用关键字void标记\",{\"1\":{\"382\":1,\"384\":1}}],[\"用法和break一致\",{\"1\":{\"377\":1}}],[\"用for循环求5的阶乘\",{\"1\":{\"362\":1}}],[\"用for循环求出1\",{\"1\":{\"362\":1}}],[\"用for循环计算1+2+3+\",{\"1\":{\"362\":1}}],[\"用途比较多的可能就是\",{\"1\":{\"431\":1}}],[\"用途\",{\"1\":{\"356\":1}}],[\"用途是不同的\",{\"1\":{\"318\":1}}],[\"用double和float分别表示0\",{\"1\":{\"342\":1}}],[\"用在注销的场景下\",{\"1\":{\"1153\":1}}],[\"用在方法体内\",{\"1\":{\"758\":1}}],[\"用在方法声明后面\",{\"1\":{\"758\":1}}],[\"用在循环结构中\",{\"1\":{\"312\":1}}],[\"用在条件语句中\",{\"1\":{\"312\":1}}],[\"用在do\",{\"1\":{\"312\":1}}],[\"用在switch语句中\",{\"1\":{\"312\":1}}],[\"用在switch语句之中\",{\"1\":{\"312\":1}}],[\"用在异常处理中\",{\"1\":{\"312\":1}}],[\"用java都不是一个好的选择\",{\"1\":{\"303\":1}}],[\"用java做安卓开发早已式微\",{\"1\":{\"303\":1}}],[\"用collection\",{\"1\":{\"279\":1}}],[\"用了sql\",{\"1\":{\"267\":1}}],[\"用到相对if少一些\",{\"1\":{\"264\":1}}],[\"用参数名简单匹配是不识别的\",{\"1\":{\"251\":1}}],[\"用来解决什么问题\",{\"1\":{\"1182\":1}}],[\"用来说不同域名下cookie共享\",{\"1\":{\"1146\":1}}],[\"用来说明最终属性\",{\"1\":{\"312\":1}}],[\"用来分割普通的请求数据和文件的请求数据的\",{\"1\":{\"1120\":1}}],[\"用来处理业务\",{\"1\":{\"1093\":1}}],[\"用来用来做一些初始化\",{\"1\":{\"1093\":1}}],[\"用来和第一个元素计算结果\",{\"1\":{\"1050\":1}}],[\"用来干什么\",{\"1\":{\"1020\":1}}],[\"用来表示存储到多少就会扩容\",{\"1\":{\"1006\":1}}],[\"用来接收长度为\",{\"1\":{\"890\":1,\"892\":1}}],[\"用来将长度为\",{\"1\":{\"890\":1,\"892\":1}}],[\"用来充当锁的角色\",{\"1\":{\"855\":1}}],[\"用来写入字符文件的便捷类\",{\"1\":{\"807\":1}}],[\"用来比较字符串的内容\",{\"1\":{\"736\":1}}],[\"用来在对象销毁时\",{\"1\":{\"688\":1}}],[\"用来在对象\",{\"1\":{\"688\":1}}],[\"用来作为功能扩展标准的一种引用数据类型\",{\"1\":{\"596\":1}}],[\"用来记录分数\",{\"1\":{\"472\":2}}],[\"用来创建对象的时候\",{\"1\":{\"466\":1}}],[\"用来创建新实例对象\",{\"1\":{\"312\":1}}],[\"用来描述我们班全体同学\",{\"1\":{\"478\":1}}],[\"用来描述通过一个指向null的引用访问对象时的问题\",{\"1\":{\"412\":1}}],[\"用来描述访问了某个数组的一个不存在\",{\"1\":{\"411\":1}}],[\"用来限制case中statement的执行范围\",{\"1\":{\"359\":1}}],[\"用来限制一个case分支\",{\"1\":{\"359\":1}}],[\"用来反转操作数的逻辑状态\",{\"1\":{\"347\":1}}],[\"用来存储key\",{\"1\":{\"1003\":1}}],[\"用来存储键值对数据\",{\"1\":{\"996\":1}}],[\"用来存储返回值的结果\",{\"1\":{\"880\":1}}],[\"用来存储父类的成员变量\",{\"1\":{\"541\":1}}],[\"用来存储真\",{\"1\":{\"325\":1}}],[\"用来存放服务器返回给客户端大量的数据\",{\"1\":{\"123\":1}}],[\"用来声明fp\",{\"1\":{\"312\":1}}],[\"用来声明一个方法是由与计算机相关的语言\",{\"1\":{\"312\":1}}],[\"用来声明一个基本肯定会被执行到的语句块\",{\"1\":{\"312\":1}}],[\"用来测试一个对象是否是指定类型的实例对象\",{\"1\":{\"312\":1}}],[\"用来定义常量\",{\"1\":{\"312\":1}}],[\"用来捕捉异常\",{\"1\":{\"312\":1}}],[\"用来进行程序调试\",{\"1\":{\"312\":1}}],[\"用来标识结构变化的次数\",{\"1\":{\"955\":1}}],[\"用来标识这个sql的坐标\",{\"1\":{\"234\":1}}],[\"用来标识一条sql\",{\"1\":{\"234\":1}}],[\"用来获取sqlsessionfactory\",{\"1\":{\"234\":1}}],[\"用哪些作为查询条件\",{\"1\":{\"233\":1}}],[\"用起来就行\",{\"1\":{\"214\":1}}],[\"用户信息不安全\",{\"1\":{\"1137\":1}}],[\"用户\",{\"1\":{\"1120\":1}}],[\"用户通过浏览器作为客户端向服务器发送请求\",{\"1\":{\"1077\":1}}],[\"用户线程\",{\"1\":{\"842\":1}}],[\"用户画像\",{\"1\":{\"720\":1}}],[\"用户使用手机\",{\"1\":{\"512\":1}}],[\"用户名和邮箱\",{\"1\":{\"1195\":1}}],[\"用户名\",{\"1\":{\"354\":1,\"517\":1,\"680\":1,\"1190\":1}}],[\"用户输入信息\",{\"1\":{\"746\":1}}],[\"用户输入\",{\"1\":{\"351\":1}}],[\"用户只需要有浏览器即可访问使用\",{\"1\":{\"303\":1}}],[\"用户需要输入用户名和密码才能登录\",{\"1\":{\"204\":1}}],[\"用户表\",{\"1\":{\"172\":1}}],[\"用户表和用户详情表\",{\"1\":{\"171\":1}}],[\"用户和用户详情\",{\"1\":{\"172\":1}}],[\"用户从该url代表的页面出发访问当前请求的页面\",{\"1\":{\"116\":1}}],[\"用\",{\"1\":{\"169\":1,\"709\":2,\"717\":1,\"924\":1}}],[\"用接口编程有啥好处\",{\"1\":{\"128\":1}}],[\"用于在同一个git仓库中独立开发多个功能或特性\",{\"1\":{\"1204\":1}}],[\"用于在创建对象过程中\",{\"1\":{\"487\":1}}],[\"用于构建基于web的应用程序\",{\"1\":{\"1078\":1}}],[\"用于开发大型\",{\"1\":{\"1077\":1}}],[\"用于开发和部署独立的java应用程序\",{\"1\":{\"1077\":1}}],[\"用于实现企业级应用所需的各种功能\",{\"1\":{\"1077\":1}}],[\"用于收集数据经过流计算的结果\",{\"1\":{\"1051\":1}}],[\"用于操作集合中的元素\",{\"1\":{\"950\":1}}],[\"用于存储元素并支持在队列的末尾添加元素和从队列的头部移除元素\",{\"1\":{\"970\":1}}],[\"用于存储局部变量表\",{\"1\":{\"925\":1}}],[\"用于存放引用数据类型的实际信息\",{\"1\":{\"405\":1}}],[\"用于解释数据的数据\",{\"1\":{\"924\":1}}],[\"用于解析数据报包的方法\",{\"1\":{\"893\":1}}],[\"用于获取接收的数据报包\",{\"1\":{\"893\":1}}],[\"用于获取发送的数据报包\",{\"1\":{\"893\":1}}],[\"用于获取成员变量的值\",{\"1\":{\"516\":1}}],[\"用于接收的\",{\"1\":{\"890\":1}}],[\"用于发送的\",{\"1\":{\"890\":1}}],[\"用于读取字符流的抽象类\",{\"1\":{\"810\":1}}],[\"用于将数据写入\",{\"1\":{\"788\":1}}],[\"用于将两个或多个表中的数据进行合并匹配\",{\"1\":{\"182\":1,\"183\":1}}],[\"用于资源释放\",{\"1\":{\"760\":1}}],[\"用于释放资源\",{\"1\":{\"760\":1}}],[\"用于指示其他某个对象是否与此对象\",{\"1\":{\"672\":1}}],[\"用于指代所有动物\",{\"1\":{\"590\":1}}],[\"用于检测一个接口是否是功能接口\",{\"1\":{\"652\":1}}],[\"用于检测子类中的某个方法\",{\"1\":{\"560\":1}}],[\"用于表示该类是一个抽象类\",{\"1\":{\"592\":1}}],[\"用于调用父类构造器或者访问父类成员\",{\"1\":{\"541\":1}}],[\"用于对成员变量判断并赋值\",{\"1\":{\"516\":1}}],[\"用于声明整个java文件下的所有类的所属包\",{\"1\":{\"499\":1}}],[\"用于给静态成员变量赋值\",{\"1\":{\"494\":1}}],[\"用于给循环控制变量初始化\",{\"1\":{\"361\":1}}],[\"用于结束整个switch\",{\"1\":{\"376\":1}}],[\"用于改变循环的状态\",{\"1\":{\"362\":1,\"364\":1}}],[\"用于改变循环控制变量的值\",{\"1\":{\"361\":1}}],[\"用于判断传入的对象是否是接口的子类对象\",{\"1\":{\"696\":1}}],[\"用于判断循环是否进行\",{\"1\":{\"361\":1}}],[\"用于判断两个字符串变量s1和s2的内容是否一致\",{\"1\":{\"327\":1}}],[\"用于处理异常情况\",{\"1\":{\"312\":1}}],[\"用于简化数据库访问和操作\",{\"1\":{\"234\":1}}],[\"用于标识数据行\",{\"1\":{\"218\":1}}],[\"用于建立表与表之间的关系\",{\"1\":{\"171\":1}}],[\"用于向数据库存取数据以及查询\",{\"1\":{\"144\":1,\"146\":1}}],[\"用于定义信息传递的格式和规则\",{\"1\":{\"110\":1}}],[\"用于明确各方的权利和义务\",{\"1\":{\"107\":1}}],[\"返回登录页面\",{\"1\":{\"1159\":1}}],[\"返回和\",{\"1\":{\"1050\":1}}],[\"返回大的\",{\"1\":{\"1050\":1}}],[\"返回元素中数量\",{\"1\":{\"1049\":1}}],[\"返回第一个元素\",{\"1\":{\"1047\":2}}],[\"返回包含的值\",{\"1\":{\"1046\":2}}],[\"返回任意一个身高小于170同学\",{\"1\":{\"1046\":1}}],[\"返回任意一个同学\",{\"1\":{\"1046\":1}}],[\"返回任意元素\",{\"1\":{\"1046\":1}}],[\"返回流中任意元素\",{\"1\":{\"1046\":1}}],[\"返回高人这个类\",{\"1\":{\"1040\":1}}],[\"返回空流\",{\"1\":{\"1039\":1}}],[\"返回之后的元素\",{\"1\":{\"1039\":1}}],[\"返回前n个元素\",{\"1\":{\"1038\":1}}],[\"返回最大的key\",{\"1\":{\"1026\":1}}],[\"返回最大的键值对\",{\"1\":{\"1026\":1}}],[\"返回最小的key\",{\"1\":{\"1026\":1}}],[\"返回最小的键值对\",{\"1\":{\"1026\":1}}],[\"返回指定键所映射的值\",{\"1\":{\"1026\":1}}],[\"返回指定file目录下的文件和文件夹的绝对路径形式的file对象数组\",{\"1\":{\"776\":1}}],[\"返回了旧值\",{\"1\":{\"1010\":1}}],[\"返回后面的\",{\"1\":{\"1008\":1}}],[\"返回键\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"返回到数组的第一个元素\",{\"1\":{\"976\":1}}],[\"返回特殊值\",{\"1\":{\"972\":1}}],[\"返回以逆向顺序在此双端队列的元素上进行迭代的迭代器\",{\"1\":{\"968\":1}}],[\"返回列表中指定的\",{\"1\":{\"960\":1}}],[\"返回true\",{\"1\":{\"953\":1}}],[\"返回老板\",{\"1\":{\"951\":1}}],[\"返回类型\",{\"1\":{\"943\":2}}],[\"返回描述指定修饰符中的访问修饰符标志的字符串\",{\"1\":{\"922\":1}}],[\"返回将要发送或接收到的数据的偏移量\",{\"1\":{\"890\":1,\"892\":1}}],[\"返回将要发送或接收到的数据的长度\",{\"1\":{\"890\":1,\"892\":1}}],[\"返回数据缓冲区\",{\"1\":{\"890\":1,\"892\":1}}],[\"返回数组长度的差值\",{\"1\":{\"739\":1}}],[\"返回线程的优先级\",{\"1\":{\"838\":1}}],[\"返回对应的json数据\",{\"1\":{\"1133\":1}}],[\"返回对此映射中的键进行排序的比较器\",{\"1\":{\"1026\":1}}],[\"返回对当前正在执行的线程对象的引用\",{\"1\":{\"833\":2}}],[\"返回对象本身\",{\"1\":{\"743\":2}}],[\"返回由此抽象路径名表示的文件的长度\",{\"1\":{\"775\":1}}],[\"返回长度\",{\"1\":{\"743\":2}}],[\"返回当前容量\",{\"1\":{\"743\":2}}],[\"返回0\",{\"1\":{\"739\":1,\"993\":1,\"1008\":2}}],[\"返回字符串信息\",{\"1\":{\"1132\":1}}],[\"返回字符串\",{\"1\":{\"737\":4,\"753\":2}}],[\"返回同一个\",{\"1\":{\"706\":1}}],[\"返回1\",{\"1\":{\"675\":1}}],[\"返回此映射的部分视图\",{\"1\":{\"1026\":6}}],[\"返回此映射的哈希码值\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"返回此映射包含的键的\",{\"1\":{\"1026\":1}}],[\"返回此映射包含的值的\",{\"1\":{\"1026\":1}}],[\"返回此映射中所包含键的\",{\"1\":{\"1026\":1}}],[\"返回此映射中所包含键的逆序\",{\"1\":{\"1026\":1}}],[\"返回此映射中所包含映射关系的逆序视图\",{\"1\":{\"1026\":1}}],[\"返回此映射中的键\",{\"1\":{\"1026\":1}}],[\"返回此映射中包含的值的\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"返回此映射中包含的键的\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"返回此映射中包含的映射关系的\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"返回此列表的最后一个元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"返回此列表的第一个元素\",{\"1\":{\"968\":1,\"975\":1}}],[\"返回此套接字的输出流\",{\"1\":{\"899\":1,\"902\":1}}],[\"返回此套接字的输入流\",{\"1\":{\"899\":1,\"902\":1}}],[\"返回此抽象路径名表示的文件最后一次被修改的时间\",{\"1\":{\"775\":1}}],[\"返回此\",{\"1\":{\"658\":1,\"964\":1,\"993\":4,\"1026\":1}}],[\"返回该线程的名称\",{\"1\":{\"833\":1}}],[\"返回该字符串对应的常量对象\",{\"1\":{\"719\":1}}],[\"返回该对象\",{\"1\":{\"666\":1}}],[\"返回该对象的字符串表示\",{\"1\":{\"658\":1}}],[\"返回该对象的哈希码值\",{\"1\":{\"658\":1,\"678\":1,\"679\":1}}],[\"返回该接口的子类对象\",{\"1\":{\"604\":1}}],[\"返回该抽象类的子类对象\",{\"1\":{\"604\":1}}],[\"返回该商品对象\",{\"1\":{\"601\":1}}],[\"返回删除结果\",{\"1\":{\"601\":1}}],[\"返回插入结果\",{\"1\":{\"601\":1}}],[\"返回null\",{\"1\":{\"413\":1,\"975\":3,\"997\":1,\"1018\":1,\"1023\":1}}],[\"返回一个listiterator的对象\",{\"1\":{\"959\":1}}],[\"返回一个迭代器\",{\"1\":{\"953\":1,\"981\":1}}],[\"返回一个字符串数组\",{\"1\":{\"776\":1}}],[\"返回一个布尔类型的值\",{\"1\":{\"671\":1}}],[\"返回一个对象时不要求就是返回值类型的对象\",{\"1\":{\"604\":1}}],[\"返回一个具体的值不要求和返回值类型完全一致\",{\"1\":{\"604\":1}}],[\"返回一个长度为0的数组\",{\"1\":{\"413\":1,\"776\":2}}],[\"返回一个参数\",{\"1\":{\"257\":1}}],[\"返回值什么样子\",{\"1\":{\"1132\":1}}],[\"返回值表示读取的字节的个数\",{\"1\":{\"792\":1,\"794\":1}}],[\"返回值代表了读取到的字节值\",{\"1\":{\"792\":1,\"794\":1}}],[\"返回值是一个int类型整数\",{\"1\":{\"677\":1}}],[\"返回值是一个遍历结果的字符串\",{\"1\":{\"416\":1}}],[\"返回值是个int\",{\"1\":{\"194\":1,\"195\":1}}],[\"返回值\",{\"1\":{\"382\":1,\"756\":1,\"1111\":1,\"1112\":1,\"1113\":1,\"1115\":1,\"1117\":1,\"1120\":1,\"1124\":1}}],[\"返回值的数据类型称之为返回值类型\",{\"1\":{\"382\":1}}],[\"返回值类型为optional\",{\"1\":{\"1050\":1}}],[\"返回值类型是object\",{\"1\":{\"692\":1}}],[\"返回值类型是引用数据类型时\",{\"1\":{\"641\":1,\"649\":1}}],[\"返回值类型必须一致\",{\"1\":{\"655\":2}}],[\"返回值类型必须是其父类型\",{\"1\":{\"642\":1}}],[\"返回值类型必须和原先父类方法的返回值类型\",{\"1\":{\"561\":1}}],[\"返回值类型如果写一个接口\",{\"1\":{\"604\":1}}],[\"返回值类型如果写一个抽象类\",{\"1\":{\"604\":1}}],[\"返回值类型如果写一个普通类\",{\"1\":{\"604\":1}}],[\"返回值类型不同\",{\"1\":{\"388\":1}}],[\"返回值类型可以是基本数据类型\",{\"1\":{\"382\":1}}],[\"返回值类型\",{\"1\":{\"382\":3,\"422\":1,\"450\":1,\"475\":1,\"481\":1,\"561\":1,\"563\":1,\"567\":1,\"591\":1,\"600\":2}}],[\"返回\",{\"1\":{\"378\":1,\"674\":3,\"737\":2,\"792\":1,\"794\":1}}],[\"返回的迭代器对象\",{\"1\":{\"959\":1}}],[\"返回的是请求头的value\",{\"1\":{\"1112\":1}}],[\"返回的是\",{\"1\":{\"958\":1}}],[\"返回的是删除的元素\",{\"1\":{\"958\":1}}],[\"返回的列\",{\"1\":{\"259\":1}}],[\"返回的结果\",{\"1\":{\"993\":1}}],[\"返回的结果集的类型\",{\"1\":{\"234\":1}}],[\"返回的结果也是一样的\",{\"1\":{\"195\":1}}],[\"返回的当前是一个connection接口\",{\"1\":{\"192\":1}}],[\"返回是connection接口的实现类的实例\",{\"1\":{\"192\":1}}],[\"返回两列\",{\"1\":{\"163\":1}}],[\"返回所有去重后的英语成绩\",{\"1\":{\"163\":1}}],[\"返回所有的\",{\"1\":{\"163\":1}}],[\"返回不重复的\",{\"1\":{\"163\":1}}],[\"返回这种东西\",{\"1\":{\"127\":1}}],[\"返回图片\",{\"1\":{\"123\":1}}],[\"返回英文\",{\"1\":{\"116\":1}}],[\"返回中文\",{\"1\":{\"116\":1}}],[\"返回顶部按钮\",{\"1\":{\"45\":1,\"82\":1}}],[\"访问了\",{\"1\":{\"1157\":1}}],[\"访问该请求的时候\",{\"1\":{\"1148\":2}}],[\"访问该path对应的请求的时候才会获得\",{\"1\":{\"1145\":1}}],[\"访问该类的静态成员\",{\"1\":{\"476\":1}}],[\"访问查看信息\",{\"1\":{\"1130\":1}}],[\"访问注册\",{\"1\":{\"1130\":1}}],[\"访问登录\",{\"1\":{\"1130\":1}}],[\"访问到locationservlet\",{\"1\":{\"1129\":1}}],[\"访问到父类成员方法了\",{\"1\":{\"559\":1}}],[\"访问http\",{\"1\":{\"1078\":1}}],[\"访问数据库\",{\"1\":{\"1078\":1}}],[\"访问且仅访问一遍\",{\"1\":{\"953\":1}}],[\"访问一次加1\",{\"1\":{\"948\":1}}],[\"访问一维数组\",{\"0\":{\"437\":1}}],[\"访问servlet对应的url\",{\"1\":{\"1093\":1}}],[\"访问sync代码块中的内容\",{\"1\":{\"859\":1}}],[\"访问student类的私有成员\",{\"1\":{\"509\":1}}],[\"访问结束\",{\"1\":{\"859\":1}}],[\"访问结果机制\",{\"0\":{\"552\":1,\"558\":1}}],[\"访问结果\",{\"1\":{\"549\":1,\"556\":1,\"579\":1}}],[\"访问收集到的错误信息\",{\"1\":{\"749\":1}}],[\"访问它的成员\",{\"1\":{\"648\":1}}],[\"访问特征和局部内部类没有区别\",{\"1\":{\"648\":1}}],[\"访问特点\",{\"1\":{\"608\":1}}],[\"访问外部类的成员\",{\"1\":{\"639\":1}}],[\"访问静态内部类的成员\",{\"1\":{\"632\":2}}],[\"访问静态成员变量的时候\",{\"1\":{\"475\":1}}],[\"访问成员内部类的成员\",{\"1\":{\"619\":2}}],[\"访问成员变量\",{\"1\":{\"548\":1}}],[\"访问范围仍然是要靠\",{\"1\":{\"559\":1}}],[\"访问范围是可以往上查找父类的\",{\"1\":{\"551\":1}}],[\"访问范围机制\",{\"0\":{\"551\":1,\"557\":1}}],[\"访问范围\",{\"1\":{\"549\":1,\"556\":1,\"579\":1,\"580\":1}}],[\"访问类的静态变量\",{\"1\":{\"914\":1}}],[\"访问类的静态成员\",{\"1\":{\"541\":1}}],[\"访问类中同一个成员变量和成员方法的结果完全可能是不同的\",{\"1\":{\"453\":1}}],[\"访问级别\",{\"0\":{\"506\":1}}],[\"访问权限等级\",{\"1\":{\"561\":1}}],[\"访问权限对它而言毫无意义\",{\"1\":{\"509\":1}}],[\"访问权限从严格到宽松顺序为\",{\"1\":{\"506\":1}}],[\"访问权限\",{\"1\":{\"505\":1,\"606\":1}}],[\"访问权限控制符\",{\"1\":{\"505\":1}}],[\"访问权限修饰符总位于它们定义的开头位置\",{\"1\":{\"509\":1}}],[\"访问权限修饰符我们还未学习\",{\"1\":{\"450\":1}}],[\"访问权限修饰符\",{\"0\":{\"611\":1,\"622\":1,\"635\":1},\"1\":{\"450\":1,\"464\":1,\"465\":1,\"474\":1,\"475\":1,\"520\":1,\"561\":1,\"563\":1,\"566\":1,\"567\":1,\"570\":1,\"571\":1,\"596\":2,\"609\":2,\"620\":2,\"621\":1,\"717\":1}}],[\"访问和使用静态成员变量不推荐使用\",{\"1\":{\"474\":1}}],[\"访问\",{\"1\":{\"461\":2}}],[\"访问属性等\",{\"1\":{\"662\":1}}],[\"访问属性\",{\"1\":{\"453\":1}}],[\"访问的局部变量直接加上final修饰\",{\"1\":{\"642\":1}}],[\"访问的成员内部类自己的成员变量\",{\"1\":{\"615\":1}}],[\"访问的是外部类的成员变量\",{\"1\":{\"615\":1}}],[\"访问的是局部变量的\",{\"1\":{\"615\":1}}],[\"访问的是哪个页面呢\",{\"1\":{\"139\":1}}],[\"访问的结果是成员内部类自身成员\",{\"1\":{\"615\":1}}],[\"访问的结果就不再是由\",{\"1\":{\"558\":1}}],[\"访问的结果也是由\",{\"1\":{\"552\":1}}],[\"访问的应用程序\",{\"1\":{\"303\":1}}],[\"访问文件\",{\"1\":{\"139\":1}}],[\"访问方式和上述完全一致\",{\"1\":{\"138\":1}}],[\"访问有中国人\",{\"1\":{\"116\":1}}],[\"访问不同页面时\",{\"1\":{\"115\":1}}],[\"没人用流\",{\"1\":{\"1053\":1}}],[\"没来及\",{\"1\":{\"851\":2}}],[\"没加等待的结果\",{\"1\":{\"832\":1}}],[\"没什么影响\",{\"1\":{\"358\":1}}],[\"没传\",{\"1\":{\"263\":1}}],[\"没导入包会出现这个问题\",{\"1\":{\"215\":1}}],[\"没有代码和文件\",{\"1\":{\"1080\":1}}],[\"没有170以下的学生\",{\"1\":{\"1046\":1}}],[\"没有匹配\",{\"0\":{\"1045\":1}}],[\"没有相同的key\",{\"1\":{\"1016\":1}}],[\"没有在collection的基础上额外定义什么api\",{\"1\":{\"981\":1,\"985\":1,\"989\":1,\"993\":1}}],[\"没有泛型之前\",{\"1\":{\"938\":1}}],[\"没有使用注解\",{\"1\":{\"924\":1}}],[\"没有使用join的输出结果\",{\"1\":{\"840\":1}}],[\"没有公共构造方法\",{\"1\":{\"917\":1}}],[\"没有执行静态代码块\",{\"1\":{\"916\":1}}],[\"没有包子生产包子\",{\"1\":{\"867\":2}}],[\"没有包子阻止自己吃包子\",{\"1\":{\"867\":2}}],[\"没有与之相对应的输入流\",{\"1\":{\"820\":1}}],[\"没有问题\",{\"1\":{\"797\":1}}],[\"没有盘符前缀\",{\"1\":{\"768\":1}}],[\"没有过时的两个构造方法\",{\"1\":{\"723\":1}}],[\"没有实现serializable接口\",{\"1\":{\"824\":1}}],[\"没有实现空接口\",{\"1\":{\"696\":1}}],[\"没有实际意义\",{\"1\":{\"658\":1}}],[\"没有方法体\",{\"1\":{\"692\":1}}],[\"没有时效性\",{\"1\":{\"689\":1}}],[\"没有重写equals方法\",{\"1\":{\"684\":1}}],[\"没有重写hashcode方法\",{\"1\":{\"684\":1}}],[\"没有可比性\",{\"1\":{\"674\":1}}],[\"没有什么特别需要注意的地方\",{\"1\":{\"665\":1}}],[\"没有引用的对象无法直接用java方法获取\",{\"1\":{\"663\":1}}],[\"没有引用指向它\",{\"1\":{\"646\":1}}],[\"没有访问权限问题\",{\"1\":{\"660\":1}}],[\"没有访问修饰权限\",{\"1\":{\"635\":1}}],[\"没有名字的局部内部类\",{\"1\":{\"646\":1}}],[\"没有静态static声明\",{\"1\":{\"636\":1}}],[\"没有静态代码块\",{\"1\":{\"598\":1}}],[\"没有依赖关系\",{\"1\":{\"614\":1}}],[\"没有构造器就没有构造代码块\",{\"1\":{\"598\":1}}],[\"没有其他任何内容\",{\"1\":{\"598\":1}}],[\"没有其它区别\",{\"1\":{\"569\":1}}],[\"没有其它取值\",{\"1\":{\"325\":1}}],[\"没有\",{\"1\":{\"595\":1}}],[\"没有体现出特殊训练的过程\",{\"1\":{\"595\":1}}],[\"没有多态时\",{\"1\":{\"582\":1}}],[\"没有遥控器的支持\",{\"1\":{\"580\":1}}],[\"没有权限重写\",{\"1\":{\"577\":1}}],[\"没有所谓继承关系\",{\"1\":{\"553\":1}}],[\"没有所谓的\",{\"1\":{\"480\":1}}],[\"没有任何前提条件\",{\"1\":{\"873\":1}}],[\"没有任何问题\",{\"1\":{\"699\":1}}],[\"没有任何关系\",{\"1\":{\"533\":2}}],[\"没有任何一个条件满足\",{\"1\":{\"264\":1}}],[\"没有孙子类或者重孙类这种概念\",{\"1\":{\"533\":1}}],[\"没有就没有\",{\"1\":{\"503\":1}}],[\"没有对象\",{\"1\":{\"496\":1}}],[\"没有对象普通成员就无法访问\",{\"1\":{\"475\":1}}],[\"没有显式赋值\",{\"1\":{\"471\":1}}],[\"没有该this传参\",{\"1\":{\"462\":1}}],[\"没有初始化的数组毫无意义\",{\"1\":{\"413\":1}}],[\"没有之一\",{\"1\":{\"412\":1}}],[\"没有默认的初始化\",{\"1\":{\"408\":1}}],[\"没有指向对象的引用实际上没有任何意义\",{\"1\":{\"407\":1}}],[\"没有指定泛型\",{\"1\":{\"941\":1}}],[\"没有指定\",{\"1\":{\"171\":1}}],[\"没有指定表层级的字符集和校对规则\",{\"1\":{\"157\":1}}],[\"没有指定字符集和校对规则\",{\"1\":{\"157\":1}}],[\"没有指定字符集\",{\"1\":{\"157\":1}}],[\"没有返回值\",{\"1\":{\"382\":1}}],[\"没有特殊含义的单词\",{\"1\":{\"313\":1}}],[\"没有具体含义\",{\"1\":{\"312\":2}}],[\"没有注解\",{\"1\":{\"271\":2}}],[\"没有存进去\",{\"1\":{\"259\":1}}],[\"没有设置主键\",{\"1\":{\"226\":1}}],[\"没有开放给用户使用\",{\"1\":{\"220\":1}}],[\"没有超时自动回收功能\",{\"1\":{\"213\":1}}],[\"没有数据库的注入问题\",{\"1\":{\"204\":1}}],[\"没有建库语句\",{\"1\":{\"186\":1}}],[\"没有必须手动生成\",{\"1\":{\"169\":1}}],[\"没有谁好谁差之分\",{\"1\":{\"144\":1}}],[\"没有页面\",{\"1\":{\"139\":1}}],[\"没有应用名\",{\"1\":{\"139\":1}}],[\"没有完整性校验\",{\"1\":{\"125\":1}}],[\"没有找到\",{\"1\":{\"120\":1}}],[\"没有办法对比每一行\",{\"1\":{\"1192\":1}}],[\"没有办法不继承\",{\"1\":{\"530\":1}}],[\"没有办法直接访问对象\",{\"1\":{\"406\":1}}],[\"没有办法\",{\"1\":{\"116\":1}}],[\"没写q\",{\"1\":{\"116\":1}}],[\"代理的mapper对象\",{\"1\":{\"244\":1}}],[\"代理解释一下\",{\"1\":{\"235\":1}}],[\"代表我不想让其追踪\",{\"1\":{\"1203\":1}}],[\"代表我进入之后不用调用\",{\"1\":{\"212\":1}}],[\"代表存储了key和value的一个接口体\",{\"1\":{\"997\":1}}],[\"代表任意类型\",{\"1\":{\"944\":1}}],[\"代表类体包含内容\",{\"1\":{\"939\":1}}],[\"代表线程池对象\",{\"1\":{\"880\":1}}],[\"代表不可变的字符序列\",{\"1\":{\"730\":1}}],[\"代表的字符序列\",{\"1\":{\"729\":2}}],[\"代表二维数组当中\",{\"1\":{\"434\":2}}],[\"代表一个双引号字符\",{\"1\":{\"356\":1}}],[\"代表一个单引号\",{\"1\":{\"356\":1}}],[\"代表一个字符\",{\"1\":{\"162\":1}}],[\"代表使用一个叫做index1的变量将它存起来\",{\"1\":{\"271\":1}}],[\"代表传进去一个参数\",{\"1\":{\"234\":1}}],[\"代表直接进入这个库\",{\"1\":{\"212\":1}}],[\"代表影响的行数\",{\"1\":{\"194\":1,\"195\":1}}],[\"代表这个方法是主方法\",{\"1\":{\"385\":1}}],[\"代表这个\",{\"1\":{\"169\":1}}],[\"代表从第三个开始拿\",{\"1\":{\"164\":1}}],[\"代表选出所有列\",{\"1\":{\"159\":1}}],[\"代表\",{\"1\":{\"153\":1,\"164\":1,\"950\":1}}],[\"代表1\",{\"1\":{\"116\":1}}],[\"代码一定要能编译通过有没有bug无所谓\",{\"1\":{\"1201\":1}}],[\"代码这里\",{\"1\":{\"1009\":1}}],[\"代码也能跑\",{\"1\":{\"1008\":1}}],[\"代码层面\",{\"0\":{\"878\":1}}],[\"代码层面的状态\",{\"0\":{\"847\":1}}],[\"代码行处暂停执行\",{\"1\":{\"868\":1}}],[\"代码是正常执行的\",{\"1\":{\"749\":1}}],[\"代码处理不了\",{\"1\":{\"747\":1}}],[\"代码运行结果不正确\",{\"1\":{\"669\":1}}],[\"代码非常优雅和简洁\",{\"1\":{\"657\":1}}],[\"代码的兼容性和灵活性就增加了\",{\"1\":{\"600\":1}}],[\"代码在使用时都不会同包\",{\"1\":{\"537\":1}}],[\"代码如下\",{\"1\":{\"415\":1}}],[\"代码更加简洁\",{\"1\":{\"349\":1}}],[\"代码示例\",{\"1\":{\"265\":1}}],[\"代码怎么写\",{\"1\":{\"217\":1}}],[\"代码演示\",{\"0\":{\"68\":1}}],[\"代码块等结构\",{\"1\":{\"593\":1}}],[\"代码块执行的顺序\",{\"1\":{\"498\":1}}],[\"代码块综合练习\",{\"1\":{\"498\":1}}],[\"代码块练习题\",{\"1\":{\"491\":1}}],[\"代码块当中\",{\"1\":{\"331\":1}}],[\"代码块的分类\",{\"1\":{\"484\":1}}],[\"代码块的定义\",{\"1\":{\"484\":1}}],[\"代码块的\",{\"1\":{\"331\":1}}],[\"代码块\",{\"0\":{\"58\":1},\"1\":{\"331\":1,\"592\":2,\"598\":2,\"1046\":1}}],[\"代码块会自动高亮\",{\"1\":{\"10\":1}}],[\"代码\",{\"0\":{\"34\":1},\"1\":{\"57\":1,\"651\":1,\"1111\":1,\"1112\":1}}],[\"91\",{\"1\":{\"801\":1}}],[\"96\",{\"1\":{\"801\":1}}],[\"9数字\",{\"1\":{\"737\":1}}],[\"97\",{\"1\":{\"729\":3,\"788\":1,\"789\":4,\"790\":1,\"798\":1,\"806\":1}}],[\"9223372036854774807\",{\"1\":{\"326\":1}}],[\"9223372036854774808\",{\"1\":{\"326\":1}}],[\"9<\",{\"1\":{\"234\":1,\"244\":1}}],[\"9条\",{\"1\":{\"171\":1}}],[\"9805\",{\"1\":{\"1132\":1}}],[\"98\",{\"1\":{\"161\":2,\"729\":1,\"790\":1}}],[\"95\",{\"1\":{\"161\":4,\"1132\":1}}],[\"90\",{\"1\":{\"142\":1,\"161\":12,\"162\":3,\"163\":3,\"167\":1,\"431\":2,\"994\":1}}],[\"9\",{\"1\":{\"116\":3,\"161\":1,\"263\":1,\"316\":1,\"336\":1,\"350\":1,\"460\":1,\"471\":1,\"472\":1,\"474\":1,\"606\":1,\"741\":1,\"777\":1,\"788\":1,\"794\":1,\"825\":2,\"833\":4,\"840\":2,\"850\":1,\"851\":1,\"904\":3,\"916\":1,\"924\":1,\"952\":3,\"1012\":1,\"1104\":1,\"1110\":1,\"1112\":3,\"1120\":2,\"1132\":1,\"1138\":2,\"1140\":2,\"1150\":2}}],[\"999999\",{\"1\":{\"1132\":2}}],[\"9999\",{\"1\":{\"892\":2,\"894\":2,\"895\":2}}],[\"996福报\",{\"1\":{\"594\":1}}],[\"99\",{\"1\":{\"71\":1,\"115\":1,\"360\":1,\"598\":1,\"729\":1,\"740\":1,\"741\":1,\"872\":1}}],[\"当本地仓库中的版本落后于远程仓库的时候\",{\"1\":{\"1197\":1}}],[\"当时要注意\",{\"1\":{\"1156\":1}}],[\"当做配置文件使用\",{\"1\":{\"1026\":1}}],[\"当扩容之后一个原本在旧数组x位置的key\",{\"1\":{\"1013\":1}}],[\"当链表的长度\",{\"1\":{\"1012\":1}}],[\"当链表数目从8到达9\",{\"0\":{\"1012\":1}}],[\"当某个下标位置\",{\"1\":{\"1011\":1}}],[\"当某线程\",{\"1\":{\"869\":2}}],[\"当数组底层长度是n的时候\",{\"1\":{\"1008\":1}}],[\"当数据量增大的时候\",{\"1\":{\"220\":1}}],[\"当数据库有多个事务同时执行的时候\",{\"1\":{\"211\":1}}],[\"当b是2的幂次\",{\"1\":{\"1001\":1,\"1008\":1}}],[\"当break后面跟标签表示结束标签层次循环时\",{\"1\":{\"376\":1}}],[\"当下标减小到数组的第一个元素时\",{\"1\":{\"976\":1}}],[\"当多个线程同时对一个变量进行操作时\",{\"1\":{\"969\":1}}],[\"当多个方法的方法名相同\",{\"1\":{\"389\":1}}],[\"当元素数量超过容量时\",{\"1\":{\"961\":1}}],[\"当创建一个arraylist时\",{\"1\":{\"961\":1}}],[\"当生成了sublist之后\",{\"1\":{\"960\":1}}],[\"当java中的泛型编译之后\",{\"1\":{\"945\":1}}],[\"当计数器的数值为0时\",{\"1\":{\"927\":1}}],[\"当服务器重启时\",{\"1\":{\"1156\":1}}],[\"当服务器完成所有数据传输后\",{\"1\":{\"907\":1}}],[\"当服务器能够提供一种以上的语言版本时要用到\",{\"1\":{\"116\":1}}],[\"当在某线程中\",{\"1\":{\"869\":1}}],[\"当第一个获得了\",{\"1\":{\"868\":1}}],[\"当\",{\"1\":{\"868\":1,\"1001\":1}}],[\"当有多个生产\",{\"1\":{\"867\":1}}],[\"当有多个选项都能正确匹配时\",{\"1\":{\"389\":1}}],[\"当正在运行的线程都是守护线程时\",{\"1\":{\"842\":1}}],[\"当这个线程执行完后报告操作系统\",{\"1\":{\"835\":1}}],[\"当我通过键盘输入固定输入的时候\",{\"1\":{\"825\":3}}],[\"当我们获取session\",{\"1\":{\"1159\":1}}],[\"当我们获取session的时候\",{\"1\":{\"1150\":1}}],[\"当我们在服务端获取session的时候\",{\"1\":{\"1150\":1}}],[\"当我们在程序中使用一个基本数据类型时\",{\"1\":{\"456\":1}}],[\"当我们通过浏览器\",{\"1\":{\"1110\":1}}],[\"当我们想往一个hashmap中添加一个数据\",{\"1\":{\"1016\":1}}],[\"当我们存储一份重复的key\",{\"1\":{\"1010\":1}}],[\"当我们给一个泛型类定义多个泛型的时候\",{\"1\":{\"939\":1}}],[\"当我们传\",{\"1\":{\"937\":4}}],[\"当我们传递给sql语句\",{\"1\":{\"256\":1}}],[\"当我们真正使用的时候再传入具体的类型\",{\"1\":{\"937\":1}}],[\"当我们创建一个输出流对象的时候\",{\"1\":{\"789\":1}}],[\"当我们的代码执行到错误行数时\",{\"1\":{\"749\":1}}],[\"当我们的代码执行到错误行数之前\",{\"1\":{\"749\":1}}],[\"当我们代码在执行到\",{\"1\":{\"749\":1}}],[\"当我们说请坐的时候\",{\"1\":{\"514\":1}}],[\"当我们了解static成员的特点后\",{\"1\":{\"477\":1}}],[\"当我们进行多字段排序的时候\",{\"1\":{\"166\":1}}],[\"当出了try代码块的时候\",{\"1\":{\"789\":1}}],[\"当出现读写锁冲突的时候\",{\"1\":{\"211\":1}}],[\"当源文件和\",{\"1\":{\"772\":1}}],[\"当要创建的目标目录\",{\"1\":{\"771\":1}}],[\"当程序执行到该方法的错误行数时\",{\"1\":{\"749\":1}}],[\"当参与字符串拼接对的2个字符串\",{\"1\":{\"735\":1}}],[\"当常量池中已有字符串对象的引用时\",{\"1\":{\"731\":1}}],[\"当它的取值在一个byte即\",{\"1\":{\"709\":1}}],[\"当子类对象的父类成员和父类对象相同时\",{\"1\":{\"675\":1}}],[\"当子问题规模足够小的时候\",{\"1\":{\"442\":1}}],[\"当比对的不是同种类型的对象或者是一个null时\",{\"1\":{\"674\":1}}],[\"当且仅当y\",{\"1\":{\"674\":1}}],[\"当且仅当两个操作数都为真\",{\"1\":{\"347\":2}}],[\"当代码执行完阴影行\",{\"1\":{\"669\":1}}],[\"当垃圾回收器确定不存在对该对象的更多引用时\",{\"1\":{\"658\":1}}],[\"当返回值类型是引用数据类型时\",{\"1\":{\"641\":2}}],[\"当成员内部类成员和外部类成员同名时\",{\"1\":{\"615\":1}}],[\"当成员方法中的局部变量和成员变量同名时\",{\"1\":{\"461\":1}}],[\"当父类的某些方法\",{\"1\":{\"590\":1}}],[\"当父子类出现同名成员\",{\"1\":{\"578\":1}}],[\"当父子类具有同名成员时\",{\"1\":{\"544\":1}}],[\"当引用指向null时\",{\"1\":{\"586\":1}}],[\"当引用数据类型的引用指向了null\",{\"1\":{\"412\":1}}],[\"当传入方法不同的子类对象时\",{\"1\":{\"581\":1}}],[\"当重写protected访问权限后\",{\"1\":{\"538\":1}}],[\"当同包下没有这个类\",{\"1\":{\"503\":1}}],[\"当需要使用复杂的代码给静态成员变量赋值时\",{\"1\":{\"496\":1}}],[\"当定义以下方法时\",{\"1\":{\"481\":2}}],[\"当一个分支的开发完成后\",{\"1\":{\"1204\":1}}],[\"当一个对象到所有的gc\",{\"1\":{\"928\":1}}],[\"当一个匿名对象使用\",{\"1\":{\"648\":1}}],[\"当一个类中全部都是静态成员方法时\",{\"1\":{\"478\":1}}],[\"当一个迭代器的方法使用\",{\"1\":{\"201\":1}}],[\"当方法执行完毕后\",{\"1\":{\"403\":1}}],[\"当方法中传入的参数有注解的时候\",{\"1\":{\"271\":1}}],[\"当省略掉某个case中的break后\",{\"1\":{\"359\":1}}],[\"当所有的case都不匹配的时候\",{\"1\":{\"359\":1}}],[\"当if判断的条件\",{\"1\":{\"358\":4}}],[\"当int类型不足以存储数据时\",{\"1\":{\"322\":1}}],[\"当使用有容量限制的队列时\",{\"1\":{\"972\":1}}],[\"当使用scanner接收数值类型后又使用nextline\",{\"1\":{\"353\":1}}],[\"当使用连接池时\",{\"1\":{\"213\":1}}],[\"当遇见第一个分隔符或结束符\",{\"1\":{\"353\":1}}],[\"当条件表达式为true时\",{\"1\":{\"349\":1}}],[\"当你使用\",{\"1\":{\"924\":1}}],[\"当你使用它们来表示小数时就已经确定精度对你而言不重要了\",{\"1\":{\"336\":1}}],[\"当你在程序中有这种需求\",{\"1\":{\"693\":1}}],[\"当你在某个位置需要一个对象来完成需求\",{\"1\":{\"632\":1}}],[\"当你有以上使用场景时\",{\"1\":{\"607\":1}}],[\"当你认为当一个类的设计已经足够完善\",{\"1\":{\"566\":1}}],[\"当你想要在循环中使用数组下标时\",{\"1\":{\"417\":1}}],[\"当你误判了循环的变量是非常容易下标越界的\",{\"1\":{\"411\":1}}],[\"当你从其他网站复制url引用图片时\",{\"1\":{\"116\":1}}],[\"当然如果你还不太明白\",{\"1\":{\"678\":1}}],[\"当然是可以的\",{\"1\":{\"654\":1}}],[\"当然是编译器\",{\"1\":{\"338\":1}}],[\"当然lambda表达式是特殊的局部内部类\",{\"1\":{\"653\":1}}],[\"当然匿名内部类更准确的说法\",{\"1\":{\"647\":1}}],[\"当然成员内部类和静态内部类没法没有名字\",{\"1\":{\"646\":1}}],[\"当然具体情况具体分析\",{\"1\":{\"622\":1}}],[\"当然多态现象仍然能够发生\",{\"1\":{\"596\":1}}],[\"当然多维数组的遍历\",{\"1\":{\"440\":1}}],[\"当然它不是一个语法\",{\"1\":{\"606\":1}}],[\"当然它也不再使用extends关键字\",{\"1\":{\"596\":1}}],[\"当然它们都受访问权限限制\",{\"1\":{\"553\":1}}],[\"当然代码多几行少几行并不重要\",{\"1\":{\"590\":1}}],[\"当然上述语法不是乱写地\",{\"1\":{\"584\":1}}],[\"当然前提是有访问权限\",{\"1\":{\"559\":1}}],[\"当然父类如果有多个\",{\"1\":{\"545\":1}}],[\"当然对于成员方法而言\",{\"1\":{\"530\":1}}],[\"当然有必要时也可以给外界权限直接访问\",{\"1\":{\"518\":1}}],[\"当然条件允许的情况下\",{\"1\":{\"503\":1}}],[\"当然递归的缺点也非常明显\",{\"1\":{\"442\":1}}],[\"当然指的是\",{\"1\":{\"420\":1}}],[\"当然完整格式可以不和声明写在一起\",{\"1\":{\"397\":1}}],[\"当然这个访问受权限限制\",{\"1\":{\"629\":1}}],[\"当然这时的return仍然具有结束方法的作用\",{\"1\":{\"378\":1}}],[\"当然这是因为它不仅仅是循环控制关键字那么简单\",{\"1\":{\"378\":1}}],[\"当然逻辑运算表达式的结果也一定是boolean类型\",{\"1\":{\"347\":1}}],[\"当然即便是强制隐含的强转\",{\"1\":{\"345\":1}}],[\"当然注释有自身的语法\",{\"1\":{\"317\":1}}],[\"当然更具体的含义\",{\"1\":{\"311\":1}}],[\"当然联网功能也完全可以具备\",{\"1\":{\"303\":1}}],[\"当然\",{\"1\":{\"303\":1,\"315\":1,\"327\":2,\"352\":1,\"357\":1,\"392\":1,\"466\":1,\"469\":1,\"497\":1,\"499\":1,\"515\":1,\"557\":1,\"559\":1,\"592\":1,\"699\":1,\"700\":2,\"924\":1}}],[\"当然在可重复读隔离级别下\",{\"1\":{\"211\":1}}],[\"当mybatis默认先查询二级缓存\",{\"1\":{\"286\":1}}],[\"当总开关也没有配置的时候\",{\"1\":{\"283\":1}}],[\"当局部开关没有配置的时候\",{\"1\":{\"283\":1}}],[\"当局部开关配置的时候\",{\"1\":{\"283\":1}}],[\"当个方法中传入的参数没有注解的时候\",{\"1\":{\"271\":1}}],[\"当查询语句包含一个或多个索引列时\",{\"1\":{\"218\":1}}],[\"当上面这个sql语句查询速度很慢的时候\",{\"1\":{\"185\":1}}],[\"当前这个客户端或用户第一个调用getsession方法的时候创建了session\",{\"1\":{\"1151\":1}}],[\"当前这个请求的path其实就是\",{\"1\":{\"1145\":1}}],[\"当前这个场景\",{\"1\":{\"1132\":1}}],[\"当前使用的是注解的方式来配置\",{\"1\":{\"1097\":1}}],[\"当前使用的是http\",{\"1\":{\"115\":1}}],[\"当前基本上不再使用jsp技术\",{\"1\":{\"1121\":1}}],[\"当前基本上不再使用\",{\"1\":{\"1090\":1}}],[\"当前基本不用\",{\"1\":{\"1086\":1}}],[\"当前元素\",{\"1\":{\"1012\":1}}],[\"当前位置\",{\"1\":{\"1012\":1}}],[\"当前数组位置的元素\",{\"1\":{\"1009\":1}}],[\"当前线程\",{\"1\":{\"955\":1}}],[\"当前线程所持有的synchronized代码块中的\",{\"1\":{\"869\":1}}],[\"当前线程必须拥有此对象监视器\",{\"1\":{\"869\":1}}],[\"当前线程才会释放锁\",{\"1\":{\"868\":1}}],[\"当前用户目录\",{\"1\":{\"767\":1}}],[\"当前对象的引用\",{\"1\":{\"544\":1}}],[\"当前方法\",{\"1\":{\"403\":1}}],[\"当前字段的默认值\",{\"1\":{\"171\":1}}],[\"当前的地址不可用\",{\"1\":{\"120\":1}}],[\"当前页面\",{\"1\":{\"115\":1}}],[\"zuo9aemjvz3q7hqiqtcog\",{\"1\":{\"1132\":1}}],[\"zuofveuou0foqmg9kiet6\",{\"1\":{\"1132\":1}}],[\"zjw5vbsucgd8a7we7yejbgq2nmrrdejqfem6vvc\",{\"1\":{\"1132\":1}}],[\"zz\",{\"1\":{\"1028\":1}}],[\"zero\",{\"1\":{\"747\":1}}],[\"zl\",{\"1\":{\"740\":1,\"741\":1,\"953\":1,\"1034\":1}}],[\"zfb\",{\"1\":{\"720\":3}}],[\"z\",{\"1\":{\"674\":3,\"737\":4,\"1120\":1}}],[\"zombiep\",{\"1\":{\"469\":4}}],[\"zombie\",{\"1\":{\"469\":4}}],[\"zoom\",{\"1\":{\"29\":1}}],[\"zs\",{\"1\":{\"159\":2,\"208\":1,\"729\":4,\"740\":1,\"741\":1,\"822\":1,\"919\":2,\"920\":1,\"924\":1,\"939\":2,\"943\":2,\"944\":3,\"951\":2,\"953\":22,\"955\":7,\"956\":4,\"1009\":2,\"1010\":2,\"1016\":2,\"1034\":3}}],[\"zs8xd3cv6nm1gbe\",{\"1\":{\"147\":2}}],[\"zhou\",{\"1\":{\"953\":2,\"1192\":2}}],[\"zhoubing\",{\"1\":{\"187\":1}}],[\"zhihu\",{\"1\":{\"680\":2}}],[\"zhaoliu=123456\",{\"1\":{\"1141\":2}}],[\"zhaoliu\",{\"1\":{\"261\":1}}],[\"zhangsan=123456\",{\"1\":{\"1140\":2}}],[\"zhangsan\",{\"1\":{\"144\":1,\"158\":1,\"169\":1,\"188\":1,\"194\":1,\"220\":2,\"233\":3,\"237\":2,\"253\":2,\"255\":2,\"256\":1,\"261\":1,\"1108\":2,\"1145\":2}}],[\"zhangsong\",{\"1\":{\"127\":2}}],[\"zhubajie\",{\"1\":{\"180\":1,\"275\":2}}],[\"zh\",{\"1\":{\"116\":4,\"121\":1,\"234\":1,\"1104\":2,\"1110\":2,\"1112\":4,\"1120\":2,\"1132\":2,\"1138\":2,\"1140\":2,\"1150\":2}}],[\"zip\",{\"1\":{\"116\":1,\"121\":1,\"192\":1}}],[\"言外之意是服务器做出响应时\",{\"1\":{\"116\":1}}],[\"看名字\",{\"1\":{\"960\":1}}],[\"看一下是哪个类加载器加载\",{\"1\":{\"923\":1}}],[\"看一下加载路径\",{\"1\":{\"912\":1}}],[\"看一下锁是否可用\",{\"1\":{\"859\":1}}],[\"看一下锁对象是否可用\",{\"1\":{\"859\":1}}],[\"看一下有没有备注帮你更好的理解这个表\",{\"1\":{\"171\":1}}],[\"看到的就不再是地址值了\",{\"1\":{\"668\":1}}],[\"看到这里\",{\"1\":{\"668\":1}}],[\"看到出现父类方法提示\",{\"1\":{\"562\":1}}],[\"看完这个lambda表达式的语法定义\",{\"1\":{\"653\":1}}],[\"看完上述关于功能接口的语法定义\",{\"1\":{\"652\":1}}],[\"看代码\",{\"1\":{\"588\":2,\"756\":1}}],[\"看右边\",{\"1\":{\"580\":1}}],[\"看左边\",{\"1\":{\"579\":1,\"580\":1}}],[\"看程序员用不用\",{\"1\":{\"577\":1}}],[\"看成指向当前类的父类\",{\"1\":{\"544\":1}}],[\"看起来方法1\",{\"1\":{\"389\":1}}],[\"看哪些学生选了\",{\"1\":{\"184\":1}}],[\"看学生信息\",{\"1\":{\"184\":1}}],[\"看具体的情况\",{\"1\":{\"171\":1}}],[\"看下文档\",{\"1\":{\"116\":1}}],[\"看看扩展程序\",{\"1\":{\"115\":1}}],[\"作为开头\",{\"1\":{\"1090\":1}}],[\"作为value存储在treemap中\",{\"1\":{\"1026\":1}}],[\"作为key\",{\"1\":{\"1009\":1}}],[\"作为普通list的\",{\"1\":{\"975\":1}}],[\"作为queue的\",{\"1\":{\"975\":1}}],[\"作为双端队列\",{\"1\":{\"968\":1,\"975\":1}}],[\"作为stack的\",{\"1\":{\"968\":1,\"975\":1}}],[\"作为整数读取的字符\",{\"1\":{\"810\":1}}],[\"作为引子\",{\"1\":{\"721\":1}}],[\"作为ia接口中的testa方法的实现\",{\"1\":{\"655\":1}}],[\"作为标准或对共性行为抽象\",{\"1\":{\"606\":1}}],[\"作为模板或对共性属性和行为抽象\",{\"1\":{\"606\":1}}],[\"作为锻炼动手能力的小demo\",{\"1\":{\"571\":1}}],[\"作为了解\",{\"1\":{\"538\":1}}],[\"作为参照物\",{\"1\":{\"418\":1}}],[\"作为一个变量名\",{\"1\":{\"452\":1}}],[\"作为一个容器\",{\"1\":{\"394\":1}}],[\"作为一个了解\",{\"1\":{\"116\":1}}],[\"作为第一个入门程序\",{\"1\":{\"308\":1}}],[\"作为典型的是jdbc配置\",{\"1\":{\"245\":1}}],[\"作用是将元素分别归纳进可变容器\",{\"1\":{\"1052\":1}}],[\"作用是什么\",{\"1\":{\"171\":1}}],[\"作用等价于\",{\"1\":{\"738\":2}}],[\"作用范围\",{\"1\":{\"457\":2}}],[\"作用\",{\"0\":{\"487\":1,\"494\":1,\"503\":1,\"510\":1,\"661\":1,\"668\":1,\"672\":1},\"1\":{\"162\":3,\"168\":2,\"312\":1,\"377\":1,\"378\":1,\"760\":1}}],[\"作者设置为\",{\"1\":{\"80\":1}}],[\"作者\",{\"1\":{\"3\":1,\"153\":2}}],[\"长\",{\"2\":{\"1166\":1,\"1171\":1,\"1176\":1,\"1181\":1}}],[\"长度不够\",{\"1\":{\"954\":1}}],[\"长度10\",{\"1\":{\"954\":1}}],[\"长度一样\",{\"1\":{\"739\":1}}],[\"长度为0的数组\",{\"0\":{\"413\":1},\"1\":{\"413\":1,\"415\":1}}],[\"长度\",{\"1\":{\"409\":2}}],[\"长整数类型\",{\"1\":{\"312\":1}}],[\"长沙\",{\"1\":{\"171\":1}}],[\"长连接\",{\"1\":{\"115\":1}}],[\"长风\",{\"1\":{\"110\":1,\"471\":1,\"740\":1,\"741\":1}}],[\"它才能够获得session\",{\"1\":{\"1152\":1}}],[\"它有3个儿子\",{\"1\":{\"1078\":1}}],[\"它主要用于扩展web服务器的功能\",{\"1\":{\"1078\":1}}],[\"它与collection的区别\",{\"1\":{\"995\":1}}],[\"它根据指定比较器进行排序\",{\"1\":{\"992\":1}}],[\"它按照其元素的自然顺序进行排序\",{\"1\":{\"992\":1}}],[\"它实现了list和deque接口\",{\"1\":{\"965\":1}}],[\"它实现了list接口\",{\"1\":{\"961\":1}}],[\"它实际上没有被调用的需求\",{\"1\":{\"590\":1}}],[\"它保留了原始的数组\",{\"1\":{\"960\":1}}],[\"它保证表中某些列不能输入无效的值\",{\"1\":{\"170\":1}}],[\"它也会有一些代码的写得有问题\",{\"1\":{\"1183\":1}}],[\"它也会存在并发修改的问题\",{\"1\":{\"960\":1}}],[\"它也有一个字符集\",{\"1\":{\"157\":1}}],[\"它也有一个字符集和校对规则\",{\"1\":{\"157\":2}}],[\"它遍历的时候\",{\"1\":{\"955\":1}}],[\"它包含的元素数\",{\"1\":{\"954\":1}}],[\"它描述的是java\",{\"1\":{\"925\":1}}],[\"它提供了java语言的核心库和运行环境\",{\"1\":{\"1077\":1}}],[\"它提供了检查计算是否完成的方法\",{\"1\":{\"880\":1}}],[\"它提供了一种将数据库查询\",{\"1\":{\"234\":1}}],[\"它使用指定的\",{\"1\":{\"812\":1}}],[\"它使用的字符集可以由名称指定或显式给定\",{\"1\":{\"806\":1,\"812\":1}}],[\"它将unicode编码为00000800\",{\"1\":{\"799\":1}}],[\"它将unicode编码为00000080\",{\"1\":{\"799\":1}}],[\"它将unicode编码为00000000\",{\"1\":{\"799\":1}}],[\"它会根据你的请求方法不同\",{\"1\":{\"1085\":1}}],[\"它会经历怎样的痛苦\",{\"1\":{\"1016\":1}}],[\"它会自动实现java\",{\"1\":{\"924\":1}}],[\"它会释放该对\",{\"1\":{\"868\":1}}],[\"它会将不存在的目标木目录的父目录\",{\"1\":{\"771\":1}}],[\"它会返回一个布尔类型值\",{\"1\":{\"327\":1}}],[\"它仍然是常用类之一\",{\"1\":{\"721\":1}}],[\"它其实就起到一个标记的作用\",{\"1\":{\"696\":1}}],[\"它具有与使用\",{\"1\":{\"864\":1}}],[\"它具有统计意义\",{\"1\":{\"838\":1}}],[\"它具有规格化和非规格化的区别\",{\"1\":{\"675\":1}}],[\"它具有以下特点\",{\"1\":{\"324\":1,\"325\":1,\"349\":1}}],[\"它更方便简洁了\",{\"1\":{\"649\":1}}],[\"它更多的是一种标准和规范\",{\"1\":{\"600\":1}}],[\"它相对更加简洁省事\",{\"1\":{\"641\":1}}],[\"它定义了一组通用的方法\",{\"1\":{\"950\":1}}],[\"它定义了一组java\",{\"1\":{\"191\":1}}],[\"它定义了一种\",{\"1\":{\"799\":1}}],[\"它定义在另一个类的成员位置\",{\"1\":{\"609\":1}}],[\"它只是一个普通的接口类型\",{\"1\":{\"924\":1}}],[\"它只有下面一个方法\",{\"1\":{\"777\":1}}],[\"它只关注行为\",{\"1\":{\"597\":1}}],[\"它只能存储相同数据类型的元素\",{\"1\":{\"394\":1}}],[\"它只能在循环中使用\",{\"1\":{\"377\":1}}],[\"它和iterator很相似\",{\"1\":{\"960\":1}}],[\"它和\",{\"1\":{\"940\":1}}],[\"它和类中成员一样\",{\"1\":{\"611\":1}}],[\"它和它的实现类\",{\"1\":{\"597\":1}}],[\"它和方法的重写语法上有什么区别呢\",{\"1\":{\"563\":1}}],[\"它表示对行为的抽象\",{\"1\":{\"598\":1}}],[\"它表示功能的扩展\",{\"1\":{\"595\":1}}],[\"它表示字符串\",{\"1\":{\"327\":1}}],[\"它没有直接父类\",{\"1\":{\"592\":1}}],[\"它没有对谁私有\",{\"1\":{\"508\":1}}],[\"它比较特殊\",{\"1\":{\"592\":1}}],[\"它成功的条件相对比较苛刻\",{\"1\":{\"586\":1}}],[\"它修饰不同结构时含义是不同的\",{\"1\":{\"565\":1}}],[\"它继承了clone\",{\"1\":{\"538\":1}}],[\"它写在java源文件的第一行\",{\"1\":{\"499\":1}}],[\"它给出的\",{\"1\":{\"458\":1}}],[\"它不知道类中有什么\",{\"1\":{\"456\":1}}],[\"它不应该单独拎出来看\",{\"1\":{\"406\":1}}],[\"它仅仅只能被看做是一种\",{\"1\":{\"838\":1}}],[\"它仅仅只是描述时间和日期的格式\",{\"1\":{\"726\":1}}],[\"它仅仅作为一个遍历数组\",{\"1\":{\"417\":1}}],[\"它仅是一个特殊的值\",{\"1\":{\"407\":1}}],[\"它决定了调用该方法时需要传入什么数据\",{\"1\":{\"384\":1}}],[\"它在内存中的位置\",{\"1\":{\"570\":1}}],[\"它在switch中也可以使用\",{\"1\":{\"376\":1}}],[\"它在计算机中的存储表示和有符号整数又有所不同\",{\"1\":{\"323\":1}}],[\"它一定会执行一个表达式\",{\"1\":{\"349\":1}}],[\"它把左操作数和右操作数取模后赋值给左操作数\",{\"1\":{\"345\":1}}],[\"它把左操作数和右操作数相除赋值给左操作数\",{\"1\":{\"345\":1}}],[\"它把左操作数和右操作数相乘赋值给左操作数\",{\"1\":{\"345\":1}}],[\"它把左操作数和右操作数相减赋值给左操作数\",{\"1\":{\"345\":1}}],[\"它把左操作数和右操作数相加赋值给左操作数\",{\"1\":{\"345\":1}}],[\"它们就是\",{\"1\":{\"885\":1}}],[\"它们就是相等的\",{\"1\":{\"674\":1}}],[\"它们不是对象\",{\"1\":{\"701\":1}}],[\"它们的关系是javaee是建立在javase之上的扩展和增强\",{\"1\":{\"1077\":1}}],[\"它们的效率都比string高很多\",{\"1\":{\"744\":1}}],[\"它们的哈希值必然是相同的\",{\"1\":{\"681\":1}}],[\"它们的class对象必然是两个不同的独立对象\",{\"1\":{\"663\":1}}],[\"它们的类加载\",{\"1\":{\"631\":1}}],[\"它们的存储空间一般都是固定的\",{\"1\":{\"321\":1}}],[\"它们会互相影响吗\",{\"1\":{\"631\":1}}],[\"它们会等待垃圾回收器进行内存回收\",{\"1\":{\"407\":1}}],[\"它们之间的访问不受访问权限限制\",{\"1\":{\"626\":1}}],[\"它们之间的不同\",{\"1\":{\"456\":1}}],[\"它们仍然是父子关系\",{\"1\":{\"596\":1}}],[\"它们都和java的线程有关系\",{\"1\":{\"658\":1}}],[\"它们都具有默认初始化和默认值\",{\"1\":{\"453\":1}}],[\"它们都是实现了collection接口的子接口\",{\"1\":{\"950\":1}}],[\"它们都是对象\",{\"1\":{\"731\":1}}],[\"它们都是特殊的局部内部类\",{\"1\":{\"645\":1}}],[\"它们都是局部变量\",{\"1\":{\"382\":1}}],[\"它们都是不区分大小写的\",{\"1\":{\"247\":1}}],[\"它们都是浮点型\",{\"1\":{\"153\":1}}],[\"它们在java中的作用和在数学中的作用基本是一样的\",{\"1\":{\"344\":1}}],[\"它们equals比较的结果是\",{\"1\":{\"327\":1}}],[\"它起着解释说明源代码的作用\",{\"1\":{\"317\":1}}],[\"它用于存储已被虚拟机加载的类信息\",{\"1\":{\"925\":1}}],[\"它用于提高数据库查询的效率和速度\",{\"1\":{\"218\":1}}],[\"它用来表示当前代码中定义了一个类\",{\"1\":{\"311\":1}}],[\"它对编译器具有特殊意义\",{\"1\":{\"311\":1}}],[\"它的有序\",{\"1\":{\"993\":1}}],[\"它的初始容量是10个元素\",{\"1\":{\"961\":1}}],[\"它的最主要特点是什么呢\",{\"1\":{\"948\":1}}],[\"它的最大特点是\",{\"1\":{\"885\":2}}],[\"它的作用可以看做是当前线程所执行的字节码的行号指示器\",{\"1\":{\"925\":1}}],[\"它的作用是使当前执行wait\",{\"1\":{\"868\":1}}],[\"它的作用只是告诉方法的调用者\",{\"1\":{\"382\":1}}],[\"它的涵义是\",{\"1\":{\"722\":1}}],[\"它的方法声明中有一个throws\",{\"1\":{\"687\":1}}],[\"它的方法体是可以去掉的\",{\"1\":{\"590\":1}}],[\"它的默认实现\",{\"1\":{\"680\":1}}],[\"它的成员特征\",{\"1\":{\"648\":1}}],[\"它的调用方式是用接口名\",{\"1\":{\"600\":1}}],[\"它的定义语法如下\",{\"1\":{\"596\":1}}],[\"它的子类特点\",{\"1\":{\"592\":1}}],[\"它的命名仍然需要遵循大驼峰的命名规范\",{\"1\":{\"592\":1}}],[\"它的访问权限是protected\",{\"1\":{\"692\":1}}],[\"它的访问权限修饰符都是public的\",{\"1\":{\"571\":1}}],[\"它的访问范围是由\",{\"1\":{\"551\":1,\"557\":1}}],[\"它的搜索机制\",{\"1\":{\"503\":1}}],[\"它的操作中\",{\"1\":{\"413\":1}}],[\"它的引用在栈上\",{\"1\":{\"408\":1}}],[\"它的含义是创建对象\",{\"1\":{\"397\":1}}],[\"它的功能有\",{\"1\":{\"386\":1}}],[\"它的使用频率要比上面两个更高\",{\"1\":{\"378\":1}}],[\"它的数据类型\",{\"1\":{\"359\":1}}],[\"它的语法是这样的\",{\"1\":{\"504\":1}}],[\"它的语法是\",{\"1\":{\"349\":1,\"417\":1,\"591\":2,\"596\":1,\"653\":1}}],[\"它的左\",{\"1\":{\"220\":1}}],[\"它的字段的字符集就固定下来了\",{\"1\":{\"157\":1}}],[\"它或者是一棵空树\",{\"1\":{\"220\":1}}],[\"它可以被部署到支持servlet规范的web容器\",{\"1\":{\"1078\":1}}],[\"它可以存储任意类型的对象\",{\"1\":{\"961\":1}}],[\"它可以通过预先创建和维护一定数量的资源实例来提高系统的性能和可靠性\",{\"1\":{\"213\":1}}],[\"它可以确保两个表之间的关系正确地维护\",{\"1\":{\"171\":1}}],[\"它做的变更才会被其他事务看到\",{\"1\":{\"211\":1}}],[\"它做的变更就能被别的事务看到\",{\"1\":{\"211\":1}}],[\"它指定了table1和table2之间的匹配条件\",{\"1\":{\"182\":1}}],[\"它以其超高的性能\",{\"1\":{\"144\":1}}],[\"它已广泛用于电子商务\",{\"1\":{\"143\":1}}],[\"它是建立在javase之上的一组扩展和标准\",{\"1\":{\"1077\":1}}],[\"它是java企业版\",{\"1\":{\"1078\":1}}],[\"它是java开发的基础\",{\"1\":{\"1077\":1}}],[\"它是jetbrains公司开发的\",{\"1\":{\"303\":1}}],[\"它是怎么把它变成2的幂次方的\",{\"1\":{\"970\":1}}],[\"它是所有集合类的顶层接口\",{\"1\":{\"950\":1}}],[\"它是\",{\"1\":{\"868\":1}}],[\"它是lambda表达式的运算符\",{\"1\":{\"653\":1}}],[\"它是二项式系数在三角形中的一种几何排列\",{\"1\":{\"441\":1}}],[\"它是使用的字符串拼接\",{\"1\":{\"255\":1}}],[\"它是一个引用数据类型\",{\"1\":{\"708\":1}}],[\"它是一个本地native方法\",{\"1\":{\"692\":1}}],[\"它是一个本地方法\",{\"1\":{\"677\":1}}],[\"它是一个真正意义上的常量\",{\"1\":{\"571\":1}}],[\"它是一个修饰符\",{\"1\":{\"565\":1}}],[\"它是一个局部变量\",{\"1\":{\"405\":1}}],[\"它是一个基于内存实现的键值型非关系\",{\"1\":{\"144\":1}}],[\"它是一种网络应用程序的架构模型\",{\"1\":{\"1077\":1}}],[\"它是一种数据库标准语言\",{\"1\":{\"146\":1}}],[\"它是一种高效率的\",{\"1\":{\"143\":1}}],[\"它是在数据库领域一直处于领先地位的产品\",{\"1\":{\"143\":1}}],[\"它支持哪种字符集\",{\"1\":{\"116\":1}}],[\"它自己把url拼接上去了\",{\"1\":{\"115\":1}}],[\"它确保参与方能够按照相同的标准进行交流和合作\",{\"1\":{\"110\":1}}],[\"就指的是版本号\",{\"1\":{\"1202\":1}}],[\"就创建一个\",{\"1\":{\"1195\":1}}],[\"就叫过期时间\",{\"1\":{\"1159\":1}}],[\"就叫bug\",{\"1\":{\"120\":1}}],[\"就打不开这个保险柜\",{\"1\":{\"1149\":1}}],[\"就设置了text\",{\"1\":{\"1127\":1}}],[\"就通过了\",{\"1\":{\"1020\":1}}],[\"就避免了类型强转问题\",{\"1\":{\"938\":1}}],[\"就隔了一个类型\",{\"1\":{\"936\":1}}],[\"就认为该对象变成了垃圾\",{\"1\":{\"928\":1}}],[\"就认定这两个对象相等\",{\"1\":{\"674\":1}}],[\"就绪\",{\"1\":{\"846\":1}}],[\"就首先必须在java语言中如何描述\",{\"1\":{\"766\":1}}],[\"就抛出\",{\"1\":{\"759\":1}}],[\"就把异常对象交给这个异常分支\",{\"1\":{\"754\":1}}],[\"就在java\",{\"1\":{\"721\":1}}],[\"就要pull\",{\"1\":{\"1197\":1}}],[\"就要由红黑树转化为链表\",{\"1\":{\"1014\":1}}],[\"就要由链表转化为红黑树\",{\"1\":{\"1011\":1}}],[\"就要引发数组扩容\",{\"1\":{\"1006\":1}}],[\"就要搞清楚析构函数的作用\",{\"1\":{\"688\":1}}],[\"就要像成员内部类那样\",{\"1\":{\"623\":1}}],[\"就还需要遍历链表\",{\"1\":{\"680\":1}}],[\"就看一下下面的说明\",{\"1\":{\"678\":1}}],[\"就完成了我们的比较规则\",{\"1\":{\"674\":1}}],[\"就完成了jdk的配置\",{\"1\":{\"307\":1}}],[\"就自动满足它们\",{\"1\":{\"674\":1}}],[\"就和它的方法名一样\",{\"1\":{\"666\":1}}],[\"就和它的名字一样\",{\"1\":{\"560\":1}}],[\"就已经能够解释为什么lambda表达式\",{\"1\":{\"653\":1}}],[\"就已经对数据库产生的变化\",{\"1\":{\"210\":1}}],[\"就将它作为一个实参传给方法使用\",{\"1\":{\"649\":1}}],[\"就用类名点区分\",{\"1\":{\"639\":1}}],[\"就用类名去区分好了\",{\"1\":{\"615\":1}}],[\"就用谁的引用接收\",{\"1\":{\"523\":1}}],[\"就符合父类引用指向的真实对象的类型\",{\"1\":{\"585\":1}}],[\"就能够获取类型信息了\",{\"1\":{\"662\":1}}],[\"就能够对应上字符\",{\"1\":{\"324\":1}}],[\"就能自动根据不同子类对象\",{\"1\":{\"582\":1}}],[\"就很适合来解释方法调用的多态性\",{\"1\":{\"580\":1}}],[\"就一定要加上注解\",{\"1\":{\"560\":1}}],[\"就体现出它的行为\",{\"1\":{\"559\":1}}],[\"就直接认为它可以访问\",{\"1\":{\"551\":1}}],[\"就直接指定这个对象的属性\",{\"1\":{\"463\":1,\"465\":2}}],[\"就从最顶层父类开始\",{\"1\":{\"545\":1}}],[\"就称之为\",{\"1\":{\"532\":1}}],[\"就必须直接使用\",{\"1\":{\"648\":1}}],[\"就必须调用父类的有参构造器\",{\"1\":{\"541\":1}}],[\"就必须使用java中的继承语法\",{\"1\":{\"519\":1}}],[\"就必须得使用\",{\"1\":{\"256\":1}}],[\"就保证了静态成员变量的默认初始化\",{\"1\":{\"497\":1}}],[\"就有了四种访问权限\",{\"1\":{\"607\":1}}],[\"就有了私有概念\",{\"1\":{\"607\":1}}],[\"就有了更多的访问权限修饰符\",{\"1\":{\"508\":1}}],[\"就有了两个最重要的特点\",{\"1\":{\"323\":1}}],[\"就有点过于麻烦了\",{\"1\":{\"463\":1}}],[\"就应该自动创建出来\",{\"1\":{\"1203\":1}}],[\"就应该这么写\",{\"1\":{\"452\":1}}],[\"就应该填入int\",{\"1\":{\"417\":1}}],[\"就像xxx\",{\"1\":{\"597\":1}}],[\"就像上帝造人\",{\"1\":{\"446\":1}}],[\"就像故事里提到同样的故事一样\",{\"1\":{\"442\":1}}],[\"就得到了\",{\"1\":{\"429\":1}}],[\"就无法使用增强for了\",{\"1\":{\"417\":1}}],[\"就无从唯一确定一个方法了\",{\"1\":{\"389\":1}}],[\"就不难理解了\",{\"1\":{\"999\":1}}],[\"就不行\",{\"1\":{\"949\":1}}],[\"就不会创建session\",{\"1\":{\"1151\":1}}],[\"就不会在运行\",{\"1\":{\"752\":1}}],[\"就不会生成那个引用\",{\"1\":{\"620\":1}}],[\"就不能在编译时期加入常量池\",{\"1\":{\"735\":1}}],[\"就不需要这么做\",{\"1\":{\"600\":1}}],[\"就不可再修改它的取值了\",{\"1\":{\"569\":1}}],[\"就不应该做判断了\",{\"1\":{\"412\":1}}],[\"就不拼\",{\"1\":{\"263\":1}}],[\"就变成下面这样\",{\"1\":{\"403\":1}}],[\"就好比\",{\"1\":{\"392\":1}}],[\"就定义多少个变量\",{\"1\":{\"392\":1}}],[\"就近原则直接写成员名字\",{\"1\":{\"615\":1}}],[\"就近原则\",{\"1\":{\"389\":2,\"503\":1,\"615\":1}}],[\"就结束循环\",{\"1\":{\"375\":1,\"794\":1}}],[\"就永远不能生效了\",{\"1\":{\"358\":1}}],[\"就执行哪个statement\",{\"1\":{\"358\":1}}],[\"就\",{\"1\":{\"357\":1,\"358\":3}}],[\"就需要一个重写的规则\",{\"1\":{\"674\":1}}],[\"就需要依赖于特定格式的api文档\",{\"1\":{\"658\":1}}],[\"就需要父引用接收\",{\"1\":{\"648\":1}}],[\"就需要创建对象了\",{\"1\":{\"640\":1}}],[\"就需要先创建外部类对象\",{\"1\":{\"616\":1}}],[\"就需要先创建它的对象\",{\"1\":{\"616\":2}}],[\"就需要考虑对象的具体类型\",{\"1\":{\"559\":1}}],[\"就需要构造方法\",{\"1\":{\"463\":1}}],[\"就需要this关键字来实现访问\",{\"1\":{\"459\":1}}],[\"就需要灵活的输入数据\",{\"1\":{\"351\":1}}],[\"就需要使用import关键字进行导包操作\",{\"1\":{\"502\":1}}],[\"就需要使用long类型存储数据\",{\"1\":{\"322\":1}}],[\"就需要使用多行注释\",{\"1\":{\"318\":1}}],[\"就更不可能开辟空间存放它了\",{\"1\":{\"334\":1}}],[\"就只能落在两种位置\",{\"1\":{\"1013\":1}}],[\"就只能依靠注释了\",{\"1\":{\"319\":1}}],[\"就只需要知道\",{\"1\":{\"442\":1}}],[\"就只会被mysql当成纯文本来解析\",{\"1\":{\"204\":1}}],[\"就使用单行注释\",{\"1\":{\"318\":1}}],[\"就相当于是上述映射定义中\",{\"1\":{\"682\":1}}],[\"就相当于给子类对象披上了一个父类类型马甲\",{\"1\":{\"579\":1}}],[\"就相当于\",{\"1\":{\"269\":1}}],[\"就相当于告诉服务器\",{\"1\":{\"115\":1}}],[\"就按照memory查询\",{\"1\":{\"266\":2}}],[\"就按传入的id查询\",{\"1\":{\"266\":2}}],[\"就拼接这个if\",{\"1\":{\"265\":2}}],[\"就进几表\",{\"1\":{\"256\":1}}],[\"就可以提交了\",{\"1\":{\"1195\":2}}],[\"就可以获得保险柜\",{\"1\":{\"1137\":1}}],[\"就可以获取我想要的数据\",{\"1\":{\"233\":1}}],[\"就可以用流\",{\"1\":{\"1053\":1}}],[\"就可以只操作int值\",{\"1\":{\"970\":1}}],[\"就可以大致的\",{\"1\":{\"885\":1}}],[\"就可以实现通讯了\",{\"1\":{\"885\":1}}],[\"就可以确定进行通信的主机和进程了\",{\"1\":{\"885\":1}}],[\"就可以通过\",{\"1\":{\"740\":1}}],[\"就可以通过这两个响应头进行控制\",{\"1\":{\"121\":1}}],[\"就可以调用类中的方法\",{\"1\":{\"701\":1}}],[\"就可以使用这个对象对数据进行遍历\",{\"1\":{\"955\":1}}],[\"就可以使用这个index1\",{\"1\":{\"271\":1}}],[\"就可以使用instanceof关键字进行类型的判断\",{\"1\":{\"696\":1}}],[\"就可以在需要的地方去完成一个对象的克隆了\",{\"1\":{\"694\":1}}],[\"就可以统一地写进一个方法中\",{\"1\":{\"689\":1}}],[\"就可以完成对象销毁的\",{\"1\":{\"689\":1}}],[\"就可以写lambda表达式的语法\",{\"1\":{\"653\":1}}],[\"就可以考虑使用内部类\",{\"1\":{\"607\":1}}],[\"就可以放心大胆做强转处理了\",{\"1\":{\"586\":1}}],[\"就可以放在静态代码块中完成\",{\"1\":{\"495\":1}}],[\"就可以animal不同的子类对象了\",{\"1\":{\"581\":1}}],[\"就可以称之为多态\",{\"1\":{\"575\":1}}],[\"就可以设置为final修饰\",{\"1\":{\"567\":1}}],[\"就可以将一个类设置为final\",{\"1\":{\"566\":1}}],[\"就可以逐一测试\",{\"1\":{\"535\":1}}],[\"就可以这么写\",{\"1\":{\"481\":1}}],[\"就可以定义一个类\",{\"1\":{\"469\":1}}],[\"就可以做很多类型相关的操作了\",{\"1\":{\"456\":1}}],[\"就可以做出以下总结\",{\"1\":{\"455\":1}}],[\"就可以直接得到小规模问题的解\",{\"1\":{\"442\":1}}],[\"就可以把它整体作为一个一维数组\",{\"1\":{\"437\":1}}],[\"就可以存储很多数据\",{\"1\":{\"392\":1}}],[\"就可以自动完成类型转换\",{\"1\":{\"338\":1}}],[\"就可以自动完成映射\",{\"1\":{\"234\":1}}],[\"就删除\",{\"1\":{\"180\":1}}],[\"就会设置cookie\",{\"1\":{\"1142\":1}}],[\"就会实例化该字符串并且将其引用放到常量池中\",{\"1\":{\"731\":1}}],[\"就会警告\",{\"1\":{\"703\":1}}],[\"就会抛出异常clonenotsupportedexception\",{\"1\":{\"694\":1}}],[\"就会导致debug模式运行下\",{\"1\":{\"669\":1}}],[\"就会导致程序误以为成员变量名为male的情况发生\",{\"1\":{\"518\":1}}],[\"就会去使用object类的默认实现\",{\"1\":{\"668\":1}}],[\"就会很难受了\",{\"1\":{\"587\":1}}],[\"就会保证先去执行父类构造方法\",{\"1\":{\"542\":1}}],[\"就会出现下面情况\",{\"1\":{\"518\":1}}],[\"就会更好回收\",{\"1\":{\"482\":1}}],[\"就会空指针异常\",{\"1\":{\"412\":1}}],[\"就会执行其中的语句\",{\"1\":{\"359\":1}}],[\"就会在控制台打印这个字符\",{\"1\":{\"324\":1}}],[\"就会浪费主键索引索引树带来的索引性能\",{\"1\":{\"233\":1}}],[\"就会直接继承数据库的参数\",{\"1\":{\"157\":1}}],[\"就会直接继承服务器的参数\",{\"1\":{\"157\":1}}],[\"就会乱码\",{\"1\":{\"123\":1}}],[\"就访问到\",{\"1\":{\"139\":1}}],[\"就是让git忽略一些文件\",{\"1\":{\"1203\":1}}],[\"就是你自己的代码版本\",{\"1\":{\"1201\":1}}],[\"就是自己写得代码\",{\"1\":{\"1197\":1}}],[\"就是自定义常量\",{\"1\":{\"568\":1}}],[\"就是数组或list等集合类型\",{\"1\":{\"1132\":1}}],[\"就是设置特定响应头的值\",{\"1\":{\"1123\":1}}],[\"就是实例\",{\"1\":{\"1109\":1}}],[\"就是实现互联网络中的不同计算机上运行程序间的数据交换\",{\"1\":{\"885\":1}}],[\"就是获得genericservlet中的servletconfig类型的成员变量config\",{\"1\":{\"1095\":1}}],[\"就是最后四位\",{\"1\":{\"1008\":1}}],[\"就是为了替代hashtable的\",{\"1\":{\"1020\":1}}],[\"就是为了让计算\",{\"1\":{\"1008\":1}}],[\"就是为了计算给定的key的int值\",{\"1\":{\"1008\":1}}],[\"就是直接拷贝一份数据\",{\"1\":{\"954\":1}}],[\"就是直接拿第一个参数\",{\"1\":{\"254\":1}}],[\"就是可以根据一个key\",{\"1\":{\"950\":1}}],[\"就是可以把java中的对象映射成关系\",{\"1\":{\"234\":1}}],[\"就是因为数组操作起来\",{\"1\":{\"950\":1}}],[\"就是什么类型\",{\"1\":{\"940\":1}}],[\"就是元数据\",{\"1\":{\"924\":1}}],[\"就是t1\",{\"1\":{\"833\":1}}],[\"就是把一个数组\",{\"1\":{\"954\":1}}],[\"就是把泛型定义在接口上\",{\"1\":{\"941\":1}}],[\"就是把泛型\",{\"1\":{\"939\":1}}],[\"就是把基本数据类型包装成引用数据类型\",{\"1\":{\"701\":1}}],[\"就是把现实生活中的场景搬到程序中\",{\"1\":{\"445\":1}}],[\"就是在一个静态\",{\"1\":{\"700\":1}}],[\"就是得到一个独立的\",{\"1\":{\"693\":1}}],[\"就是具体算法的设计了\",{\"1\":{\"683\":1}}],[\"就是典型的键值对\",{\"1\":{\"680\":1}}],[\"就是一个key\",{\"1\":{\"995\":1}}],[\"就是一个二维数组\",{\"1\":{\"441\":1}}],[\"就是一对一的数据结构\",{\"1\":{\"957\":1}}],[\"就是一种映射的规则\",{\"1\":{\"679\":1,\"999\":1}}],[\"就是下图\",{\"1\":{\"679\":1}}],[\"就是这么来的\",{\"1\":{\"668\":1}}],[\"就是该类的class对象\",{\"1\":{\"662\":1}}],[\"就是同样是一台汽车\",{\"1\":{\"599\":1}}],[\"就是接口\",{\"1\":{\"595\":1}}],[\"就是要强转成的子类类型的子类对象\",{\"1\":{\"585\":2}}],[\"就是要强转成的子类类型的对象\",{\"1\":{\"585\":1}}],[\"就是父子类中能够拥有同名的成员方法\",{\"1\":{\"560\":1}}],[\"就是全限定类名\",{\"1\":{\"500\":1}}],[\"就是当前对象\",{\"1\":{\"460\":1}}],[\"就是显式赋值\",{\"1\":{\"458\":1}}],[\"就是用反斜杠\",{\"1\":{\"355\":1}}],[\"就是用来表示这些符号的数据类型\",{\"1\":{\"324\":1}}],[\"就是用来解释这两种结构的\",{\"1\":{\"318\":1}}],[\"就是它的使用需要经过以下两步\",{\"1\":{\"332\":1}}],[\"就是表示真\",{\"1\":{\"325\":1}}],[\"就是类名\",{\"1\":{\"308\":1}}],[\"就是刚才复制的那个目录\",{\"1\":{\"307\":1}}],[\"就是\",{\"1\":{\"266\":1,\"441\":1,\"480\":1}}],[\"就是根据你传入的条件\",{\"1\":{\"263\":1}}],[\"就是相对target\",{\"1\":{\"249\":1}}],[\"就是负责将表中的数据映射到类上\",{\"1\":{\"234\":1}}],[\"就是jdbc提供给我们的一个获取连接的接口\",{\"1\":{\"213\":1}}],[\"就是多个列\",{\"1\":{\"163\":1}}],[\"就是排序的\",{\"1\":{\"149\":1}}],[\"就是mysql存储数据的方式\",{\"1\":{\"149\":2}}],[\"就是集中存放数据的地方\",{\"1\":{\"141\":1}}],[\"就是有效的组织物品的地方\",{\"1\":{\"141\":1}}],[\"就是使用接口来接\",{\"1\":{\"128\":1}}],[\"就是将浏览器发起的请求\",{\"1\":{\"115\":1}}],[\"学完之后\",{\"1\":{\"951\":1,\"1205\":1}}],[\"学完构造器后\",{\"1\":{\"467\":1}}],[\"学校\",{\"1\":{\"924\":1}}],[\"学校信息这个属性实质上应该是被全体同学所共有的属性\",{\"1\":{\"478\":1}}],[\"学校信息\",{\"1\":{\"478\":1}}],[\"学号两个属性\",{\"1\":{\"519\":1}}],[\"学号递增\",{\"1\":{\"478\":1}}],[\"学号int\",{\"1\":{\"478\":1}}],[\"学号\",{\"1\":{\"478\":2}}],[\"学号和学生\",{\"1\":{\"172\":1}}],[\"学生信息里有以下信息\",{\"1\":{\"1019\":1}}],[\"学生有名字\",{\"1\":{\"950\":1}}],[\"学生类\",{\"1\":{\"519\":1}}],[\"学生数量+1\",{\"1\":{\"478\":1}}],[\"学生和课程\",{\"1\":{\"174\":1}}],[\"学生表和订单表\",{\"1\":{\"171\":1}}],[\"学生表的sql\",{\"1\":{\"158\":1}}],[\"学生的限制\",{\"1\":{\"168\":1}}],[\"学生地址\",{\"1\":{\"158\":1}}],[\"学生年龄\",{\"1\":{\"158\":1}}],[\"学生姓名\",{\"1\":{\"158\":1}}],[\"学生编号\",{\"1\":{\"158\":1}}],[\"学生id\",{\"1\":{\"153\":1}}],[\"学习api\",{\"1\":{\"658\":1}}],[\"学习方式\",{\"1\":{\"608\":1}}],[\"学习两种行为\",{\"1\":{\"519\":1}}],[\"学习对象中成员变量的赋值\",{\"1\":{\"487\":1}}],[\"学习对象与类后\",{\"1\":{\"470\":1}}],[\"学习完对象与类后\",{\"1\":{\"459\":1}}],[\"学习重点\",{\"1\":{\"218\":1}}],[\"学习\",{\"1\":{\"153\":1,\"478\":1}}],[\"学习目标\",{\"0\":{\"1075\":1,\"1102\":1,\"1136\":1},\"1\":{\"105\":1,\"140\":1,\"189\":1,\"213\":1,\"310\":1,\"313\":1,\"316\":1,\"319\":1,\"342\":1,\"354\":1,\"356\":1,\"379\":1,\"391\":1,\"443\":1,\"454\":1,\"456\":1,\"458\":1,\"471\":1,\"479\":1,\"483\":1,\"498\":1,\"514\":1,\"518\":1,\"573\":1,\"589\":1,\"594\":1,\"644\":1,\"658\":1,\"745\":1,\"765\":1,\"778\":1,\"825\":1,\"885\":1,\"909\":1,\"924\":1,\"935\":1,\"951\":1,\"956\":1,\"970\":1,\"979\":1,\"994\":1,\"1027\":1,\"1182\":1}}],[\"学会怎样发get请求和post请求\",{\"1\":{\"115\":1}}],[\"抓包\",{\"1\":{\"115\":1}}],[\"只添加\",{\"1\":{\"1194\":1}}],[\"只可以存储一些非敏感数据\",{\"1\":{\"1149\":1}}],[\"只写一个userservlet可以不\",{\"1\":{\"1130\":1}}],[\"只执行一次\",{\"1\":{\"1093\":2}}],[\"只剩下4个\",{\"1\":{\"1039\":1}}],[\"只取出北京的\",{\"1\":{\"1037\":1}}],[\"只使用你传入的数组类型\",{\"1\":{\"954\":1}}],[\"只使用类型\",{\"1\":{\"954\":1}}],[\"只删除第一个出现的\",{\"1\":{\"953\":2,\"981\":1}}],[\"只删除满足条件的数据\",{\"1\":{\"162\":1}}],[\"只提供继承于的子接口\",{\"1\":{\"950\":1}}],[\"只提供修改字符集和校对规则\",{\"1\":{\"151\":1}}],[\"只允许在特定的位置进出数据\",{\"1\":{\"947\":1}}],[\"只允许接收该类及其父类\",{\"1\":{\"944\":1}}],[\"只允许接收该类及该类子类\",{\"1\":{\"944\":1}}],[\"只发送消息\",{\"1\":{\"895\":1}}],[\"只接收消息\",{\"1\":{\"895\":1}}],[\"只做一件事\",{\"1\":{\"867\":1}}],[\"只吃包子\",{\"1\":{\"867\":1}}],[\"只负责创建目录\",{\"1\":{\"771\":4}}],[\"只负责创建文件\",{\"1\":{\"771\":2}}],[\"只包含当前字符串中\",{\"1\":{\"737\":2}}],[\"只看三点\",{\"1\":{\"655\":2}}],[\"只强调行为的抽象\",{\"1\":{\"595\":1}}],[\"只保留一些对外\",{\"1\":{\"515\":1}}],[\"只指定课程\",{\"1\":{\"466\":1}}],[\"只递不归\",{\"1\":{\"442\":1}}],[\"只在内存中存在结构但没有存储单元\",{\"1\":{\"413\":1}}],[\"只声明了的数组不存在引用\",{\"1\":{\"408\":1}}],[\"只不过当前浏览器发起请求的时候\",{\"1\":{\"1155\":1}}],[\"只不过是httpservlet里的service方法给你实现好了\",{\"1\":{\"1085\":1}}],[\"只不过是针对的数据类型不同罢了\",{\"1\":{\"387\":1}}],[\"只不过编译器对使用enum关键字定义的类有特殊处理\",{\"1\":{\"719\":1}}],[\"只不过它比较特殊\",{\"1\":{\"719\":1}}],[\"只不过静态内部类借用外部类来保护自己罢了\",{\"1\":{\"623\":1}}],[\"只不过多了一个抽象方法\",{\"1\":{\"592\":1}}],[\"只不过一个表示子类对象\",{\"1\":{\"544\":1}}],[\"只不过位置和for循环相比发生了变化而已\",{\"1\":{\"363\":1}}],[\"只存储key\",{\"1\":{\"220\":1}}],[\"只导了一个\",{\"1\":{\"215\":1}}],[\"只要知道里面有这么个方法\",{\"1\":{\"968\":1}}],[\"只要走到这一行\",{\"1\":{\"954\":1}}],[\"只要见到这个东西\",{\"1\":{\"942\":1}}],[\"只要实现了autocloseable接口的类\",{\"1\":{\"789\":1}}],[\"只要实现不同的标准就行了\",{\"1\":{\"599\":1}}],[\"只要有一个为真\",{\"1\":{\"1043\":1}}],[\"只要有一个人用了\",{\"1\":{\"262\":1}}],[\"只要有1个引用变量的形式出现时\",{\"1\":{\"735\":1}}],[\"只要是同一个用户\",{\"1\":{\"1152\":1}}],[\"只要是已经存在的就可以\",{\"1\":{\"656\":1}}],[\"只要是实现了xxx的功能\",{\"1\":{\"597\":1}}],[\"只要是在做方法的重写\",{\"1\":{\"560\":1}}],[\"只要同包就可以任意访问\",{\"1\":{\"536\":1}}],[\"只要还大于0就要一直乘下去\",{\"1\":{\"442\":1}}],[\"只要表达式中存在任一变量\",{\"1\":{\"340\":1}}],[\"只要不是四类八种基本数据类型\",{\"1\":{\"327\":1}}],[\"只要这么想\",{\"1\":{\"324\":1}}],[\"只要使用\",{\"1\":{\"252\":1}}],[\"只要配置好映射关系\",{\"1\":{\"234\":1}}],[\"只要你有办法找到即可\",{\"1\":{\"216\":1}}],[\"只要能照着文档\",{\"1\":{\"214\":1}}],[\"只要姓贾就行\",{\"1\":{\"162\":1}}],[\"只会把缓冲区中的变化提交到本地仓库\",{\"1\":{\"1195\":1}}],[\"只会使用传入的数组的类型\",{\"1\":{\"954\":1}}],[\"只会删除第一个\",{\"1\":{\"953\":1}}],[\"只会返回false\",{\"1\":{\"773\":1}}],[\"只会返回表中的记录数\",{\"1\":{\"164\":1}}],[\"只会执行多个catch分支中的一个\",{\"1\":{\"754\":1}}],[\"只会得到一个一模一样且独立的对象\",{\"1\":{\"694\":1}}],[\"只会导致编译报错\",{\"1\":{\"525\":1}}],[\"只会加载一次\",{\"1\":{\"467\":1}}],[\"只会因为回车\",{\"1\":{\"353\":1}}],[\"只会与数据库通信一次\",{\"1\":{\"204\":1}}],[\"只返回两个表都有相同的id的行\",{\"1\":{\"182\":1}}],[\"只有仓库指定的成员才能看到\",{\"1\":{\"1200\":1}}],[\"只有仓库中的成员才能去修改仓库中的代码\",{\"1\":{\"1200\":1}}],[\"只有一个对应servlet\",{\"1\":{\"1091\":1}}],[\"只有一个pom\",{\"1\":{\"1080\":1}}],[\"只有一个参数\",{\"1\":{\"249\":1}}],[\"只有低位会参与\",{\"1\":{\"1008\":1}}],[\"只有消费者执行\",{\"1\":{\"867\":1}}],[\"只有生产者才执行\",{\"1\":{\"867\":1}}],[\"只有try块中的代码执行出错时\",{\"1\":{\"752\":1}}],[\"只有true和false两个\",{\"1\":{\"328\":1}}],[\"只有参与字符串拼接的2个字符串都是字面值常量的时候\",{\"1\":{\"735\":1}}],[\"只有在两个浮点数相等时\",{\"1\":{\"675\":1}}],[\"只有在完全是同一个类型时才会返回true\",{\"1\":{\"675\":1}}],[\"只有在父接口的方法返回值类型是父类类型时\",{\"1\":{\"598\":1}}],[\"只有成员变量的取值有差异\",{\"1\":{\"674\":1}}],[\"只有当本地仓库中的版本领先于远程仓库的时候\",{\"1\":{\"1196\":1}}],[\"只有当方法返回0时\",{\"1\":{\"741\":1}}],[\"只有当两个引用完全指向同一个对象时\",{\"1\":{\"673\":1}}],[\"只有当接口的所有实现类\",{\"1\":{\"598\":1}}],[\"只有方法的声明\",{\"1\":{\"591\":1}}],[\"只有遥控器上提供的功能我们才能使用\",{\"1\":{\"580\":1}}],[\"只有确定这个结构\",{\"1\":{\"510\":1}}],[\"只有两种\",{\"1\":{\"508\":1}}],[\"只有两个孩子\",{\"1\":{\"220\":1}}],[\"只有声明且没有其它任何赋值方式赋值\",{\"1\":{\"479\":1}}],[\"只有二维数组中的一维数组完成初始化\",{\"1\":{\"436\":1,\"437\":1}}],[\"只有boolean类型不能进行类型转换\",{\"1\":{\"341\":1}}],[\"只有null一个\",{\"1\":{\"328\":1}}],[\"只有close后\",{\"1\":{\"287\":1}}],[\"只有条件满足\",{\"1\":{\"264\":1}}],[\"只有遵循了这些范式\",{\"1\":{\"175\":1}}],[\"只有满足条件才可以插入到数据表中\",{\"1\":{\"169\":1}}],[\"只能从队头出队列\",{\"1\":{\"970\":1}}],[\"只能删除下标的位置\",{\"1\":{\"958\":1}}],[\"只能调用接口所特有的方法\",{\"1\":{\"936\":1}}],[\"只能在\",{\"1\":{\"958\":1}}],[\"只能在其他线程中\",{\"1\":{\"869\":1}}],[\"只能在sync外面等待\",{\"1\":{\"859\":1}}],[\"只能在子类中自己\",{\"1\":{\"694\":1}}],[\"只能在子类当中\",{\"1\":{\"692\":1}}],[\"只能改非原子操作\",{\"1\":{\"853\":1}}],[\"只能将支持\",{\"1\":{\"823\":1}}],[\"只能操作目的地\",{\"1\":{\"820\":1}}],[\"只能通过close显式的释放资源\",{\"1\":{\"789\":1}}],[\"只能获取当前目录的下一层\",{\"1\":{\"776\":2}}],[\"只能抛出一个异常对象\",{\"1\":{\"758\":1}}],[\"只能重写一个方法\",{\"1\":{\"653\":1}}],[\"只能自己用\",{\"1\":{\"600\":1}}],[\"只能修饰类或者方法\",{\"1\":{\"593\":1}}],[\"只能创建student对象\",{\"1\":{\"538\":1}}],[\"只能够在同一类中能够访问\",{\"1\":{\"506\":1,\"534\":1}}],[\"只能相同类型之间比较\",{\"1\":{\"346\":1}}],[\"只能表示整数\",{\"1\":{\"324\":1}}],[\"只能选8\",{\"1\":{\"192\":1}}],[\"只能存入string类型的key\",{\"1\":{\"1026\":1}}],[\"只能存入string类型的\",{\"1\":{\"1026\":1}}],[\"只能存储相同类型的一维数组\",{\"1\":{\"430\":1}}],[\"只能存在一个字段为自动增长\",{\"1\":{\"169\":1}}],[\"只能存二进制的\",{\"1\":{\"149\":1}}],[\"只能有一个y\",{\"1\":{\"999\":1}}],[\"只能有一个y与之对应\",{\"1\":{\"999\":1}}],[\"只能有一个直接父类\",{\"1\":{\"532\":1}}],[\"只能有一个public修饰的类\",{\"1\":{\"499\":1}}],[\"只能有\",{\"1\":{\"167\":1}}],[\"只能有两种\",{\"1\":{\"167\":1}}],[\"只筛选出平均分小于60的\",{\"1\":{\"162\":2}}],[\"只修改满足条件的数据\",{\"1\":{\"162\":1}}],[\"只查询出满足条件的数据\",{\"1\":{\"162\":1}}],[\"只用在values后添加多个括号\",{\"1\":{\"158\":1}}],[\"只用改一行代码\",{\"1\":{\"128\":1}}],[\"只用了解http\",{\"1\":{\"125\":1}}],[\"只需要人是什么类型的\",{\"1\":{\"1040\":1}}],[\"只需要将该元素的前后节点的指针重新指向即可\",{\"1\":{\"965\":1}}],[\"只需要创建一个新的节点\",{\"1\":{\"965\":1}}],[\"只需要修改循环条件即可\",{\"1\":{\"700\":1}}],[\"只需要用成员变量的取值来判断对象相等\",{\"1\":{\"674\":1}}],[\"只需要获取该类的class对象\",{\"1\":{\"662\":1}}],[\"只需要调用同名方法\",{\"1\":{\"582\":1}}],[\"只需要在内部私有化一个类\",{\"1\":{\"607\":1}}],[\"只需要在屏幕上滑动点击就可以了\",{\"1\":{\"512\":1}}],[\"只需要在方法等位置中写下列语法\",{\"1\":{\"480\":1}}],[\"只需要交换一半数组的元素即可\",{\"1\":{\"419\":1}}],[\"只需要安装不同版本的java虚拟机即可\",{\"1\":{\"309\":1}}],[\"只需要换一个非c盘的目录就可以了\",{\"1\":{\"307\":1}}],[\"只需要面向接口编程\",{\"1\":{\"128\":1}}],[\"只需要操作浏览器即可\",{\"1\":{\"115\":1}}],[\"只是前7位\",{\"1\":{\"1195\":1}}],[\"只是git比网盘要高级一点\",{\"1\":{\"1183\":1}}],[\"只是一个看起来和原有数组一致\",{\"1\":{\"960\":1}}],[\"只是维护了几个标记\",{\"1\":{\"960\":1}}],[\"只是原表的一个映射\",{\"1\":{\"960\":1}}],[\"只是可以前后移动\",{\"1\":{\"959\":1}}],[\"只是传入了一个数组\",{\"1\":{\"953\":1,\"981\":1}}],[\"只是使用了泛型\",{\"1\":{\"943\":1}}],[\"只是声明可能抛出\",{\"1\":{\"756\":1}}],[\"只是方法的访问机制决定的\",{\"1\":{\"559\":1}}],[\"只是描述对象该有什么属性\",{\"1\":{\"447\":1}}],[\"只是获取出来时候\",{\"1\":{\"149\":1}}],[\"只是想下午两小时\",{\"1\":{\"126\":1}}],[\"只是给http加了一些保护壳\",{\"1\":{\"125\":1}}],[\"只是逻辑上面的概念\",{\"1\":{\"112\":1}}],[\"安排为一次执行或重复执行的任务\",{\"1\":{\"884\":1}}],[\"安装的时候\",{\"1\":{\"1186\":1}}],[\"安装git\",{\"0\":{\"1184\":1}}],[\"安装之后\",{\"1\":{\"1132\":1}}],[\"安装插件\",{\"1\":{\"262\":1}}],[\"安装\",{\"0\":{\"130\":1,\"1186\":1}}],[\"安装完毕之后\",{\"1\":{\"115\":1}}],[\"安全的中断线程\",{\"1\":{\"844\":1}}],[\"安全的在\",{\"1\":{\"57\":1}}],[\"安全中断线程\",{\"0\":{\"844\":1}}],[\"安全性等\",{\"1\":{\"1077\":1}}],[\"安全性有区别\",{\"1\":{\"945\":1}}],[\"安全性要更重要\",{\"1\":{\"744\":1}}],[\"安全性和易于使用\",{\"1\":{\"191\":1}}],[\"安全性和可恢复性\",{\"1\":{\"143\":1}}],[\"安全程度非常高\",{\"1\":{\"125\":1}}],[\"验证一下\",{\"1\":{\"1145\":1}}],[\"验证wait释放锁\",{\"0\":{\"871\":1}}],[\"验证异常会释放锁\",{\"1\":{\"860\":1}}],[\"验证close方法自动执行\",{\"1\":{\"789\":1}}],[\"验证自动执行\",{\"1\":{\"789\":1}}],[\"验证当前对象就是调用方法的那个对象\",{\"1\":{\"460\":1}}],[\"验证\",{\"1\":{\"115\":1,\"497\":3,\"910\":1}}],[\"将自己的版本控制工具给到linux使用\",{\"1\":{\"1183\":1}}],[\"将自定义的这个servlet它的url\",{\"1\":{\"1092\":1}}],[\"将请求参数封装为一个引用类型的对象\",{\"1\":{\"1118\":1}}],[\"将username=root这样的键值对放入到servletconfig\",{\"1\":{\"1094\":1}}],[\"将两个元素合起来产生一个新值\",{\"1\":{\"1050\":1}}],[\"将参加计算的元素按照某种方式减少\",{\"1\":{\"1050\":1}}],[\"将流里面的元素\",{\"1\":{\"1035\":1}}],[\"将天气预报信息\",{\"1\":{\"1026\":1}}],[\"将任意长度的输入通过散列算法变换成固定长度的输出\",{\"1\":{\"999\":1}}],[\"将任务执行完毕\",{\"1\":{\"880\":2}}],[\"将元素推入此列表所表示的堆栈\",{\"1\":{\"968\":1,\"975\":1}}],[\"将此\",{\"1\":{\"964\":1}}],[\"将此字符序列用其反转形式取代\",{\"1\":{\"743\":2}}],[\"将描述转化为代码的能力\",{\"1\":{\"956\":1}}],[\"将指针往后挪动\",{\"1\":{\"955\":1}}],[\"将指定映射中的所有映射关系复制到此映射中\",{\"1\":{\"1026\":1}}],[\"将指定值与此映射中的指定键进行关联\",{\"1\":{\"1026\":1}}],[\"将指定元素添加到此列表的结尾\",{\"1\":{\"968\":1,\"975\":2}}],[\"将指定元素添加到此列表的末尾\",{\"1\":{\"968\":1}}],[\"将指定元素插入此列表的开头\",{\"1\":{\"968\":1,\"975\":1}}],[\"将指定的元素插入此队列\",{\"1\":{\"972\":2}}],[\"将指定的对象写入\",{\"1\":{\"823\":1}}],[\"将指定的字节写入此输出流\",{\"1\":{\"786\":1,\"788\":1}}],[\"将指定的字符串\",{\"1\":{\"743\":2}}],[\"将指定\",{\"1\":{\"786\":1,\"788\":1}}],[\"将elementdata的数据拷贝到\",{\"1\":{\"954\":1}}],[\"将c1中的所有元素\",{\"1\":{\"953\":1}}],[\"将collection转成一个数组\",{\"1\":{\"953\":1,\"981\":1}}],[\"将class字节码文件读取进jvm内存的操作\",{\"1\":{\"497\":1}}],[\"将原有collection只保留传入的collection\",{\"1\":{\"953\":1,\"981\":1}}],[\"将运行期遇到的问题转移到了编译期\",{\"1\":{\"938\":1}}],[\"将该线程标记为守护线程或用户线程\",{\"1\":{\"842\":1}}],[\"将该对象中的异常信息\",{\"1\":{\"749\":1}}],[\"将数据写入指定基础输出流\",{\"1\":{\"816\":1}}],[\"将字符读入数组的某一部分\",{\"1\":{\"810\":1}}],[\"将字符读入数组\",{\"1\":{\"810\":1}}],[\"将字符串按照符号分隔成字符串数组\",{\"1\":{\"739\":1}}],[\"将文本写入字符输出流\",{\"1\":{\"808\":1}}],[\"将要写入流中的字符编码成字节\",{\"1\":{\"806\":1}}],[\"将输入流中最多\",{\"1\":{\"792\":1,\"794\":1}}],[\"将错误信息\",{\"1\":{\"749\":1}}],[\"将日期表示的字符串转换成对应的date对象\",{\"1\":{\"726\":1}}],[\"将date对象转换成对应日期字符串表示\",{\"1\":{\"726\":1}}],[\"将拷贝引用指向拷贝对象\",{\"1\":{\"699\":1}}],[\"将引用指向的对象\",{\"1\":{\"699\":1}}],[\"将key\",{\"1\":{\"680\":1}}],[\"将\",{\"1\":{\"675\":1,\"786\":1,\"788\":1,\"823\":1}}],[\"将内容全部连接起来\",{\"1\":{\"667\":1}}],[\"将学生对象集合中的\",{\"1\":{\"657\":1}}],[\"将局部内部类看成是局部变量即可\",{\"1\":{\"633\":1}}],[\"将仅装有商品对象的数组返回\",{\"1\":{\"601\":1}}],[\"将fs引用\",{\"1\":{\"585\":1}}],[\"将form表单加载出来\",{\"1\":{\"115\":1}}],[\"将这个案例转移到java中\",{\"1\":{\"580\":1}}],[\"将上述原则扩展到引用数据类型参数\",{\"1\":{\"584\":1}}],[\"将上述条件反转一下\",{\"1\":{\"577\":1}}],[\"将上述打开的窗口全部点击\",{\"1\":{\"307\":1}}],[\"将会带来错误\",{\"1\":{\"560\":1}}],[\"将来有一天\",{\"1\":{\"537\":1}}],[\"将对象的属性和行为封装起来\",{\"1\":{\"512\":1}}],[\"将package声明放在注释下面也是可以的\",{\"1\":{\"499\":1}}],[\"将变成死循环\",{\"1\":{\"361\":1}}],[\"将当前位置移到本行开头\",{\"1\":{\"356\":1}}],[\"将当前位置移到下一行开头\",{\"1\":{\"356\":1}}],[\"将当前位置移到前一列\",{\"1\":{\"356\":1}}],[\"将a2称为尾数\",{\"1\":{\"323\":1}}],[\"将一个map的所有键值对都放入这个map\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"将一个\",{\"1\":{\"923\":1}}],[\"将一个无限大小的集合\",{\"1\":{\"679\":1}}],[\"将一个int实参变量取值变成原先的2倍\",{\"1\":{\"424\":1}}],[\"将一个整型字面值\",{\"1\":{\"342\":1}}],[\"将一部代码逻辑注释掉\",{\"1\":{\"319\":1}}],[\"将一些公用的sql\",{\"1\":{\"267\":1}}],[\"将定义好的引入进来\",{\"1\":{\"267\":2}}],[\"将备份之前的md5值与备份之后的md5值进行比较\",{\"1\":{\"188\":1}}],[\"将其列弄得少一点\",{\"1\":{\"172\":1}}],[\"将不再对第二个字段进行分组\",{\"1\":{\"167\":1}}],[\"将页面呈现在用户面前\",{\"1\":{\"124\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"1\":1}}],[\"85b7dffc\",{\"1\":{\"1132\":1}}],[\"846d\",{\"1\":{\"1120\":1}}],[\"8443\",{\"1\":{\"139\":1}}],[\"8提供的对集合数据进行优化\",{\"1\":{\"1031\":1}}],[\"8之后\",{\"1\":{\"1020\":1}}],[\"8之前\",{\"1\":{\"1020\":1}}],[\"8之前是一样的\",{\"1\":{\"1020\":1}}],[\"8不同\",{\"1\":{\"799\":1}}],[\"88\",{\"1\":{\"740\":1,\"741\":1}}],[\"8888\",{\"1\":{\"892\":1,\"894\":2,\"895\":2,\"903\":2,\"905\":2}}],[\"888\",{\"1\":{\"545\":1,\"958\":1}}],[\"8以后\",{\"1\":{\"721\":1}}],[\"87\",{\"1\":{\"431\":1}}],[\"8bit\",{\"1\":{\"326\":1,\"782\":1}}],[\"8种基本数据类型\",{\"1\":{\"320\":1}}],[\"8种基本数据类型的使用\",{\"1\":{\"319\":1}}],[\"8个字节\",{\"1\":{\"233\":1}}],[\"8的也可以\",{\"1\":{\"192\":1}}],[\"8g\",{\"1\":{\"153\":1}}],[\"8字节\",{\"1\":{\"153\":2,\"326\":2}}],[\"86\",{\"1\":{\"146\":1,\"431\":3,\"978\":2}}],[\"80841d741d7fa3073e0ae27bf487339f\",{\"1\":{\"1132\":20}}],[\"8083\",{\"1\":{\"1104\":2,\"1110\":2,\"1111\":3,\"1112\":1,\"1132\":3,\"1157\":1}}],[\"8080\",{\"1\":{\"127\":2,\"134\":4,\"136\":4,\"137\":3,\"138\":1,\"1078\":1,\"1085\":2,\"1104\":3,\"1110\":2,\"1111\":4,\"1112\":5,\"1113\":2,\"1117\":1,\"1118\":1,\"1120\":4,\"1129\":1,\"1130\":3,\"1131\":1,\"1132\":2,\"1134\":1,\"1138\":2,\"1140\":2,\"1141\":2,\"1142\":1,\"1145\":4,\"1146\":6,\"1150\":2,\"1157\":1,\"1158\":1}}],[\"800\",{\"1\":{\"978\":1}}],[\"80\",{\"1\":{\"121\":1,\"139\":3,\"142\":1,\"161\":7,\"162\":4,\"163\":1,\"997\":2,\"1132\":1}}],[\"8\",{\"1\":{\"115\":1,\"116\":2,\"127\":2,\"136\":1,\"139\":1,\"149\":2,\"161\":1,\"234\":2,\"244\":1,\"263\":4,\"265\":5,\"266\":1,\"271\":8,\"307\":1,\"316\":1,\"318\":1,\"350\":1,\"442\":1,\"460\":1,\"465\":1,\"471\":1,\"606\":1,\"799\":2,\"800\":1,\"833\":4,\"840\":2,\"953\":1,\"956\":1,\"978\":8,\"1008\":1,\"1016\":1,\"1031\":1,\"1083\":1,\"1097\":1,\"1104\":2,\"1105\":2,\"1110\":2,\"1112\":4,\"1119\":1,\"1120\":2,\"1121\":1,\"1127\":3,\"1130\":1,\"1131\":3,\"1132\":2,\"1138\":2,\"1140\":2,\"1148\":4,\"1150\":2,\"1159\":3}}],[\"如apache\",{\"1\":{\"1078\":1}}],[\"如java\",{\"1\":{\"1077\":1}}],[\"如web应用开发\",{\"1\":{\"1077\":1}}],[\"如面向对象编程\",{\"1\":{\"1077\":1}}],[\"如温度\",{\"1\":{\"1026\":1}}],[\"如添加元素\",{\"1\":{\"970\":1}}],[\"如list和set\",{\"1\":{\"950\":1}}],[\"如类型转换错误\",{\"1\":{\"938\":1}}],[\"如\",{\"1\":{\"728\":1,\"783\":2}}],[\"如无特殊需求\",{\"1\":{\"683\":1}}],[\"如无绝对必要\",{\"1\":{\"362\":1}}],[\"如有必要\",{\"1\":{\"880\":2,\"964\":1}}],[\"如有通过继承连环触发类加载\",{\"1\":{\"546\":1}}],[\"如有嵌套循环\",{\"1\":{\"376\":1}}],[\"如包名\",{\"1\":{\"314\":1}}],[\"如c\",{\"1\":{\"312\":1}}],[\"如下\",{\"1\":{\"308\":1,\"318\":1,\"362\":1,\"397\":1,\"555\":1,\"667\":1,\"682\":1}}],[\"如下图\",{\"1\":{\"307\":3}}],[\"如下图所示\",{\"1\":{\"307\":2}}],[\"如mysql\",{\"1\":{\"191\":1}}],[\"如上查询\",{\"1\":{\"166\":1}}],[\"如货币\",{\"1\":{\"153\":1}}],[\"如何处理冲突\",{\"1\":{\"1182\":1}}],[\"如何识别为同一个用户\",{\"1\":{\"1152\":1}}],[\"如何获得呢\",{\"1\":{\"1107\":1}}],[\"如何获取注解信息\",{\"1\":{\"924\":1}}],[\"如何删除collection中所有的zs和ls数据\",{\"1\":{\"956\":1}}],[\"如何回收垃圾\",{\"0\":{\"929\":1}}],[\"如何确定垃圾\",{\"0\":{\"926\":1}}],[\"如何异常处理\",{\"1\":{\"789\":1}}],[\"如何实现换行功能\",{\"1\":{\"789\":1}}],[\"如何实现文件追加功能\",{\"1\":{\"789\":1}}],[\"如何自定义异常\",{\"0\":{\"762\":1}}],[\"如何使用\",{\"1\":{\"760\":1,\"884\":1}}],[\"如何使用动态代理呢\",{\"1\":{\"235\":1}}],[\"如何选择策略\",{\"1\":{\"759\":1}}],[\"如何重写\",{\"0\":{\"683\":1}}],[\"如何体现出规范性\",{\"1\":{\"595\":1}}],[\"如何从需求中找到对象和类呢\",{\"1\":{\"469\":1}}],[\"如何定义成员方法\",{\"1\":{\"450\":1}}],[\"如何定义成员变量\",{\"1\":{\"450\":1}}],[\"如何改正\",{\"1\":{\"341\":1}}],[\"如何判断对象相等\",{\"1\":{\"684\":1}}],[\"如何判断呢\",{\"1\":{\"327\":1}}],[\"如何判断两个string字符串变量的内容一致呢\",{\"1\":{\"327\":1}}],[\"如何避免呢\",{\"1\":{\"233\":1}}],[\"如何避免回表\",{\"1\":{\"233\":1}}],[\"如何解决数据库注入问题呢\",{\"1\":{\"204\":1}}],[\"如何解析\",{\"1\":{\"127\":1}}],[\"如何导包呢\",{\"1\":{\"192\":1}}],[\"如何发送get或者post请求\",{\"1\":{\"115\":1}}],[\"如果别人给了你命令\",{\"1\":{\"1204\":1}}],[\"如果git已经追踪上了\",{\"1\":{\"1203\":1}}],[\"如果保留代码\",{\"1\":{\"1201\":1}}],[\"如果让你自定义一个类似于session的技术\",{\"1\":{\"1159\":1}}],[\"如果create的值为false\",{\"1\":{\"1151\":1}}],[\"如果create的值为true则同上\",{\"1\":{\"1151\":1}}],[\"如果已经有了session\",{\"1\":{\"1151\":1}}],[\"如果已到达流末尾\",{\"1\":{\"814\":1}}],[\"如果已到达流的末尾\",{\"1\":{\"810\":2}}],[\"如果还没有创建session\",{\"1\":{\"1151\":1}}],[\"如果还想访问同名成员变量\",{\"1\":{\"459\":1}}],[\"如果钥匙丢了\",{\"1\":{\"1149\":1}}],[\"如果设置了cookie的父域名\",{\"1\":{\"1146\":1}}],[\"如果携带多组\",{\"1\":{\"1138\":1}}],[\"如果携带了参数它的格式是\",{\"1\":{\"1104\":1}}],[\"如果做到的这件事情呢\",{\"1\":{\"1137\":1}}],[\"如果做了这样的事情\",{\"1\":{\"1078\":1}}],[\"如果引入会话技术\",{\"1\":{\"1137\":1}}],[\"如果引用是子类类型\",{\"1\":{\"551\":1,\"552\":1,\"557\":1}}],[\"如果引用是父类类型\",{\"1\":{\"551\":1,\"552\":1,\"557\":1}}],[\"如果跟着\",{\"1\":{\"1132\":1}}],[\"如果集成baseservlet的话\",{\"1\":{\"1132\":1}}],[\"如果错误\",{\"1\":{\"1131\":1}}],[\"如果错误产生在main方法当中的另一个方法中\",{\"1\":{\"749\":1}}],[\"如果错误产生在main方法中\",{\"1\":{\"749\":1}}],[\"如果正确\",{\"1\":{\"1131\":1}}],[\"如果正常\",{\"1\":{\"844\":3}}],[\"如果拿的是上面请求中图片文件的信息\",{\"1\":{\"1120\":1}}],[\"如果硬是要打包进去\",{\"1\":{\"1081\":1}}],[\"如果optional包含值\",{\"1\":{\"1046\":2}}],[\"如果object类当中都没有该成员变量\",{\"1\":{\"551\":1}}],[\"如果整体不够n个\",{\"1\":{\"1039\":1}}],[\"如果整数超了\",{\"1\":{\"153\":2}}],[\"如果流中有1个元素\",{\"1\":{\"1038\":1}}],[\"如果流中有10个元素\",{\"1\":{\"1038\":1}}],[\"如果流是网络套接字流\",{\"1\":{\"823\":1}}],[\"如果忘记了\",{\"1\":{\"1020\":1}}],[\"如果忘了\",{\"1\":{\"116\":1}}],[\"如果记得\",{\"1\":{\"1020\":1}}],[\"如果最后发现\",{\"1\":{\"1016\":1}}],[\"如果equals返回相同\",{\"1\":{\"1009\":1}}],[\"如果equals方法依据其中的成员变量age和name重写的\",{\"1\":{\"682\":1}}],[\"如果地址相同\",{\"1\":{\"1009\":1}}],[\"如果key等于null的时候呢\",{\"1\":{\"1009\":1}}],[\"如果key为null\",{\"1\":{\"1008\":1}}],[\"如果key为null的时候\",{\"1\":{\"1008\":1}}],[\"如果key不为null\",{\"1\":{\"1008\":2}}],[\"如果key不存在\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"如果就是没听懂\",{\"1\":{\"1002\":1}}],[\"如果就是想约束这种关系\",{\"1\":{\"171\":1}}],[\"如果链表长度太长\",{\"1\":{\"1002\":1}}],[\"如果链表的长度是1000\",{\"1\":{\"948\":1}}],[\"如果键存在\",{\"1\":{\"997\":1}}],[\"如果能理解更好\",{\"1\":{\"978\":1}}],[\"如果能够让引用数据类型成员变量之间也能相互独立\",{\"1\":{\"699\":1}}],[\"如果能够使用三目运算符尽量使用它\",{\"1\":{\"349\":1}}],[\"如果b是2的幂次方\",{\"1\":{\"978\":1}}],[\"如果列表为空\",{\"1\":{\"975\":3}}],[\"如果当前没有可用的空间\",{\"1\":{\"972\":1}}],[\"如果立即可行且不会违反容量限制\",{\"1\":{\"972\":2}}],[\"如果此\",{\"1\":{\"1026\":1}}],[\"如果此映射使用键的自然顺序\",{\"1\":{\"1026\":1}}],[\"如果此映射为指定值映射一个或多个键\",{\"1\":{\"1026\":1}}],[\"如果此映射包含指定键的映射关系\",{\"1\":{\"1026\":1}}],[\"如果此队列为空\",{\"1\":{\"972\":2}}],[\"如果此列表为空\",{\"1\":{\"968\":4}}],[\"如果此路径名表示一个目录\",{\"1\":{\"773\":1}}],[\"如果再修改原集合\",{\"1\":{\"960\":1}}],[\"如果元素不存在\",{\"1\":{\"958\":1}}],[\"如果见到了\",{\"1\":{\"955\":1}}],[\"如果原结构发生了变化\",{\"1\":{\"955\":1}}],[\"如果数组位置没有元素\",{\"1\":{\"1016\":1}}],[\"如果数组位置有元素\",{\"1\":{\"1016\":2}}],[\"如果数组位置上有元素\",{\"1\":{\"1002\":1}}],[\"如果数组位置上没有元素\",{\"1\":{\"1002\":1}}],[\"如果数组上没有元素\",{\"1\":{\"1016\":1}}],[\"如果数组长度小于64\",{\"1\":{\"1016\":1}}],[\"如果数组长度\",{\"1\":{\"1012\":1}}],[\"如果数组长度集合长度\",{\"1\":{\"954\":3}}],[\"如果数组的长度小于64\",{\"1\":{\"1012\":1}}],[\"如果数据量非常大\",{\"1\":{\"954\":1}}],[\"如果数据库里的字段\",{\"1\":{\"261\":1}}],[\"如果子类也有泛型\",{\"1\":{\"941\":1}}],[\"如果子类不想实现抽象父类中的抽象方法\",{\"1\":{\"592\":1}}],[\"如果实现时\",{\"1\":{\"941\":1}}],[\"如果实现时候\",{\"1\":{\"941\":1}}],[\"如果继承时\",{\"1\":{\"940\":3}}],[\"如果继续这样写下去\",{\"1\":{\"936\":1}}],[\"如果父类有泛型\",{\"1\":{\"940\":1}}],[\"如果转错了类型\",{\"1\":{\"936\":1}}],[\"如果向下转型\",{\"1\":{\"936\":1}}],[\"如果类型转换错误\",{\"1\":{\"936\":1}}],[\"如果类中有引用数据类型的成员变量\",{\"1\":{\"699\":1}}],[\"如果类中有引用数据类型成员变量\",{\"1\":{\"675\":1,\"685\":1}}],[\"如果类中有\",{\"1\":{\"669\":1}}],[\"如果类中没有重写该方法\",{\"1\":{\"668\":1}}],[\"如果类中的某个成员\",{\"1\":{\"537\":1}}],[\"如果现在写成string\",{\"1\":{\"949\":1}}],[\"如果现在又有一个卡车类\",{\"1\":{\"936\":1}}],[\"如果现在查询一条sql\",{\"1\":{\"229\":1}}],[\"如果属性类型是引用类型\",{\"1\":{\"924\":1}}],[\"如果属性很多\",{\"1\":{\"463\":1}}],[\"如果所有线程都在此对象上等待\",{\"1\":{\"874\":1}}],[\"如果所有的case都无法匹配\",{\"1\":{\"359\":1}}],[\"如果要实现一个自定义的session\",{\"1\":{\"1159\":1}}],[\"如果要将图片以原始文件名保存在web资源根目录\",{\"1\":{\"1120\":1}}],[\"如果要唤醒该线程\",{\"1\":{\"869\":1}}],[\"如果要去修改某个老师的名字\",{\"1\":{\"178\":1}}],[\"如果调用notify\",{\"1\":{\"868\":1}}],[\"如果调用wait\",{\"1\":{\"868\":1}}],[\"如果调用的是\",{\"1\":{\"389\":1}}],[\"如果蒸笼非空\",{\"1\":{\"867\":4}}],[\"如果蒸笼为空\",{\"1\":{\"867\":4}}],[\"如果发生了中断\",{\"1\":{\"844\":2}}],[\"如果发现需要再次加载新的资源文件\",{\"1\":{\"124\":1}}],[\"如果启动了自动刷新\",{\"1\":{\"820\":1}}],[\"如果因为已经到达流末尾而不再有数据可用\",{\"1\":{\"792\":1,\"794\":1}}],[\"如果因为已经到达流末尾而没有可用的字节\",{\"1\":{\"792\":1,\"794\":1}}],[\"如果因为没加注解\",{\"1\":{\"560\":1}}],[\"如果为负数\",{\"1\":{\"1131\":1}}],[\"如果为负数的话\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"如果为\",{\"1\":{\"788\":1,\"842\":1}}],[\"如果为每一种情况\",{\"1\":{\"263\":1}}],[\"如果file对象表示的是一个文件\",{\"1\":{\"776\":2}}],[\"如果finally和catch中都有return\",{\"1\":{\"760\":1}}],[\"如果目标目录的父目录不存在的时候\",{\"1\":{\"771\":1}}],[\"如果多级目录不存在\",{\"1\":{\"771\":2}}],[\"如果多个类处理的目标是一样的\",{\"1\":{\"595\":1,\"599\":1}}],[\"如果多个条件之间是包含关系\",{\"1\":{\"358\":1}}],[\"如果多个条件之间是互斥关系\",{\"1\":{\"358\":1}}],[\"如果路径名是绝对路径名\",{\"1\":{\"768\":1}}],[\"如果try中的异常不能正常捕获\",{\"1\":{\"760\":1}}],[\"如果try中代码运行时发生了错误\",{\"1\":{\"752\":1}}],[\"如果说\",{\"1\":{\"754\":1}}],[\"如果说继承是面向对象的核心\",{\"1\":{\"559\":1}}],[\"如果包含\",{\"1\":{\"737\":2,\"953\":1,\"1112\":1}}],[\"如果找到就返回字符\",{\"1\":{\"737\":2}}],[\"如果找到了\",{\"1\":{\"551\":1}}],[\"如果常量池中没有\",{\"1\":{\"735\":1}}],[\"如果常量池中已有该字符串对象的引用\",{\"1\":{\"735\":1}}],[\"如果字符串对象引用不存在于常量池中\",{\"1\":{\"731\":1}}],[\"如果字符型变量参与运算\",{\"1\":{\"324\":1}}],[\"如果该字符串对象引用已经存在常量池中\",{\"1\":{\"731\":1}}],[\"如果该常量在整型数据类型的取值范围内\",{\"1\":{\"342\":1}}],[\"如果根据\",{\"1\":{\"682\":2}}],[\"如果根据条件做处理的时候\",{\"1\":{\"264\":1}}],[\"如果仅仅比较数值\",{\"1\":{\"675\":1}}],[\"如果仅需要简短的一句或几句话时\",{\"1\":{\"318\":1}}],[\"如果x\",{\"1\":{\"674\":1}}],[\"如果返回false\",{\"1\":{\"663\":1}}],[\"如果返回true\",{\"1\":{\"663\":1}}],[\"如果返回的资源需要进行压缩\",{\"1\":{\"116\":1}}],[\"如果运行期间程序员能动态获取类型信息\",{\"1\":{\"662\":1}}],[\"如果只有1个属性\",{\"1\":{\"924\":1}}],[\"如果只有一条语句且这条语句是返回值语句\",{\"1\":{\"654\":1}}],[\"如果只是给一个值\",{\"1\":{\"490\":1}}],[\"如果形参列表中的形参只有一个\",{\"1\":{\"654\":1}}],[\"如果始终被使用而没有释放\",{\"1\":{\"643\":1}}],[\"如果全局常量同名\",{\"1\":{\"639\":1}}],[\"如果全局常量同名了\",{\"1\":{\"615\":1}}],[\"如果同名\",{\"1\":{\"627\":1,\"628\":1}}],[\"如果仍然用成员名直接访问\",{\"1\":{\"615\":1}}],[\"如果抽象类和接口都可以使用的话\",{\"1\":{\"606\":1}}],[\"如果看完上面的\",{\"1\":{\"585\":1}}],[\"如果依赖构造器赋值\",{\"1\":{\"570\":1}}],[\"如果对于该键而言\",{\"1\":{\"1026\":1}}],[\"如果对于这个初创公司\",{\"1\":{\"128\":1}}],[\"如果对象是一个子类类型\",{\"1\":{\"558\":1}}],[\"如果指向一个普通父类的无参构造\",{\"1\":{\"546\":1}}],[\"如果直接在类中成员位置\",{\"1\":{\"570\":1}}],[\"如果直接指向object类的无参构造\",{\"1\":{\"546\":1}}],[\"如果直接输出一个字符型变量\",{\"1\":{\"324\":1}}],[\"如果构造器第一行没有直接用this\",{\"1\":{\"541\":1}}],[\"如果需要map中的key\",{\"1\":{\"1026\":1}}],[\"如果需要很复杂的代码完成成员变量的赋值\",{\"1\":{\"490\":1}}],[\"如果需要大家使用jdbc批量插入数据\",{\"1\":{\"204\":1}}],[\"如果它的首行显式地调用了另一个构造器\",{\"1\":{\"546\":1}}],[\"如果它的首行显式地调用了另一个构造器this\",{\"1\":{\"489\":1}}],[\"如果它的首行没有显式调用另一个构造器\",{\"1\":{\"489\":1,\"546\":1}}],[\"如果某个对象\",{\"1\":{\"483\":1}}],[\"如果确有需求\",{\"1\":{\"469\":1}}],[\"如果方法返回负数\",{\"1\":{\"741\":1}}],[\"如果方法重写的方法体只有一条语句的话\",{\"1\":{\"654\":1}}],[\"如果方法的形参数据类型是一个父类类型\",{\"1\":{\"584\":1}}],[\"如果方法的实参传入的对象\",{\"1\":{\"584\":1}}],[\"如果方法的实参数据类型\",{\"1\":{\"584\":1}}],[\"如果方法的入参没有加任何的注解\",{\"1\":{\"250\":1}}],[\"如果方法有返回值\",{\"1\":{\"453\":1}}],[\"如果用了注解\",{\"1\":{\"924\":2}}],[\"如果用图描述的话\",{\"1\":{\"679\":1}}],[\"如果用一维数组再存储一维数组\",{\"1\":{\"429\":1}}],[\"如果用户在建表的时候\",{\"1\":{\"226\":1}}],[\"如果用户不使用连接池\",{\"1\":{\"213\":1}}],[\"如果用户输入的值与数据库中的值匹配\",{\"1\":{\"204\":1}}],[\"如果java是引用传递的\",{\"1\":{\"424\":1}}],[\"如果java是值传递的\",{\"1\":{\"424\":1}}],[\"如果出现同名\",{\"1\":{\"639\":1}}],[\"如果出现两个可变参数的方法都能匹配\",{\"1\":{\"423\":1}}],[\"如果出现500状态码\",{\"1\":{\"120\":1}}],[\"如果等于null\",{\"1\":{\"412\":1}}],[\"如果过短\",{\"1\":{\"394\":1}}],[\"如果预先规划的数组长度过长\",{\"1\":{\"394\":1}}],[\"如果程序需要多少数据\",{\"1\":{\"392\":1}}],[\"如果我还有其他的类呢\",{\"1\":{\"936\":1}}],[\"如果我想在2中得到1的访问结果\",{\"1\":{\"459\":1}}],[\"如果我想在很多方法中\",{\"1\":{\"388\":1}}],[\"如果我们拿到请求体中的内容\",{\"1\":{\"1120\":1}}],[\"如果我们在hashmap已经添加了一份key\",{\"0\":{\"1015\":1}}],[\"如果我们在java中有这样一个类user与之一一对应\",{\"1\":{\"234\":1}}],[\"如果我们想要使用一些通用性的代码\",{\"1\":{\"1107\":1}}],[\"如果我们想在1\",{\"1\":{\"995\":1,\"997\":1}}],[\"如果我们想比较某一行数据在备份前后是否发生变化\",{\"1\":{\"188\":1}}],[\"如果我们要用mybatis来完成\",{\"1\":{\"263\":1}}],[\"如果我们写得sql是这样\",{\"1\":{\"230\":1}}],[\"如果传入一个非2的幂次方\",{\"1\":{\"970\":1}}],[\"如果传入double值可以吗\",{\"1\":{\"384\":1}}],[\"如果传入的key和我数组上的key\",{\"1\":{\"1009\":1}}],[\"如果传入的数字大于等于8\",{\"1\":{\"978\":1}}],[\"如果传入的数组\",{\"1\":{\"954\":1}}],[\"如果传入的初始化容量小于8\",{\"1\":{\"978\":1}}],[\"如果传入的id大于5\",{\"1\":{\"266\":2}}],[\"如果传入的brand是null\",{\"1\":{\"264\":1}}],[\"如果填入的实参的数据类型\",{\"1\":{\"384\":1}}],[\"如果写在循环中\",{\"1\":{\"378\":1}}],[\"如果写错了\",{\"1\":{\"121\":1}}],[\"如果使用mysql版本8\",{\"1\":{\"1107\":1}}],[\"如果使用自定义的类\",{\"1\":{\"1037\":1}}],[\"如果使用static来修饰一个成员内部类\",{\"1\":{\"620\":1}}],[\"如果使用静态代码测试类加载\",{\"1\":{\"571\":1}}],[\"如果使用\",{\"1\":{\"377\":1,\"924\":1}}],[\"如果结果是\",{\"1\":{\"362\":1,\"364\":1}}],[\"如果碰到if和switch都可以的情况\",{\"1\":{\"360\":1}}],[\"如果每次都复制一次\",{\"1\":{\"954\":1}}],[\"如果每个condition都不满足\",{\"1\":{\"358\":1}}],[\"如果每一种连接池都有一种自己的获取连接的方式\",{\"1\":{\"213\":1}}],[\"如果相等\",{\"1\":{\"1016\":1}}],[\"如果相等则条件为真\",{\"1\":{\"346\":1}}],[\"如果相对应位值相同\",{\"1\":{\"348\":1}}],[\"如果相对应位都是0\",{\"1\":{\"348\":1}}],[\"如果相对应位都是1\",{\"1\":{\"348\":1}}],[\"如果条件为true\",{\"1\":{\"347\":1}}],[\"如果条件没有办法动\",{\"1\":{\"232\":1}}],[\"如果任何两个操作数任何一个为真\",{\"1\":{\"347\":2}}],[\"如果值不相等则条件为真\",{\"1\":{\"346\":1}}],[\"如果上述插入了\",{\"1\":{\"1016\":1}}],[\"如果上述变量c参与数值运算\",{\"1\":{\"340\":1}}],[\"如果上面有唯一索引\",{\"1\":{\"169\":1}}],[\"如果表达式当中存在多种数据类型\",{\"1\":{\"340\":1}}],[\"如果表中记录不足number个\",{\"1\":{\"164\":1}}],[\"如果规定尾数只有4位\",{\"1\":{\"323\":1}}],[\"如果几百上千行代码从头到尾没有一句注释\",{\"1\":{\"319\":1}}],[\"如果简短的一句或几句话不能说清楚\",{\"1\":{\"318\":1}}],[\"如果语法有错误\",{\"1\":{\"308\":1}}],[\"如果成功编译没有错误的话\",{\"1\":{\"308\":1}}],[\"如果是第一次commit\",{\"1\":{\"1195\":1}}],[\"如果是第一次访问\",{\"1\":{\"1152\":2}}],[\"如果是通过客户端提供的编号\",{\"1\":{\"1137\":1}}],[\"如果是通过request和response获得流\",{\"1\":{\"1129\":1}}],[\"如果是客户端直接携带确切的信息\",{\"1\":{\"1137\":1}}],[\"如果是自己创建的流\",{\"1\":{\"1129\":1}}],[\"如果是jsp的话\",{\"1\":{\"1121\":1}}],[\"如果是json\",{\"1\":{\"1105\":1}}],[\"如果是数组\",{\"1\":{\"1118\":1}}],[\"如果是数组类型的注解属性\",{\"1\":{\"924\":1}}],[\"如果是红黑树\",{\"1\":{\"1016\":1}}],[\"如果是链表\",{\"1\":{\"1016\":2}}],[\"如果是直接计算hashcode\",{\"1\":{\"1008\":1}}],[\"如果是int范围内生成呢\",{\"1\":{\"995\":1}}],[\"如果是大家来遍历数组\",{\"1\":{\"955\":1}}],[\"如果是string类型的\",{\"1\":{\"944\":1}}],[\"如果是打印integer的\",{\"1\":{\"944\":1}}],[\"如果是目录\",{\"1\":{\"776\":1}}],[\"如果是\",{\"1\":{\"776\":2}}],[\"如果是文件\",{\"1\":{\"776\":1}}],[\"如果是一个空目录\",{\"1\":{\"776\":2}}],[\"如果是就返回true\",{\"1\":{\"675\":1}}],[\"如果是相同类型的对象\",{\"1\":{\"674\":1}}],[\"如果是父子类同名成员方法\",{\"1\":{\"556\":1}}],[\"如果是父子类同名成员变量\",{\"1\":{\"549\":1}}],[\"如果是非同包\",{\"1\":{\"536\":1}}],[\"如果是没有继承关系的两个类\",{\"1\":{\"525\":1}}],[\"如果是整个二维数组的最后一个元素\",{\"1\":{\"440\":1}}],[\"如果是每个一维数组的末尾元素\",{\"1\":{\"440\":1}}],[\"如果是每个数组中的开头元素且不是最后一个元素\",{\"1\":{\"440\":1}}],[\"如果是那么条件为真\",{\"1\":{\"346\":4}}],[\"如果是这样\",{\"1\":{\"307\":1}}],[\"如果是macos\",{\"1\":{\"307\":1}}],[\"如果是以下情况\",{\"1\":{\"115\":1}}],[\"如果maxage设置为0的话\",{\"1\":{\"1147\":1}}],[\"如果mybatis有缓存\",{\"1\":{\"287\":1}}],[\"如果md5值不同\",{\"1\":{\"188\":1}}],[\"如果md5值相同\",{\"1\":{\"188\":1}}],[\"如果两条sql在一个mapper\",{\"1\":{\"276\":1}}],[\"如果参数使用了注解\",{\"1\":{\"272\":1}}],[\"如果参数名简单匹配是不识别\",{\"1\":{\"251\":1}}],[\"如果list对象建议写list\",{\"1\":{\"271\":1}}],[\"如果符合条件\",{\"1\":{\"265\":1}}],[\"如果又使用的where标签\",{\"1\":{\"264\":1}}],[\"如果sql片段需要拼接\",{\"1\":{\"264\":1}}],[\"如果where标签中没有条件满足的时候\",{\"1\":{\"264\":1}}],[\"如果id是1\",{\"1\":{\"256\":1}}],[\"如果想调用子类单独的方法\",{\"1\":{\"936\":1}}],[\"如果想要运行jar\",{\"1\":{\"1080\":1}}],[\"如果想要访问作用域内部的局部变量\",{\"1\":{\"642\":1}}],[\"如果想要访问一个静态内部类\",{\"1\":{\"622\":1}}],[\"如果想要访问一个成员内部类\",{\"1\":{\"611\":1}}],[\"如果想要test方法调用得出anotherpackage包中student类的结果\",{\"1\":{\"502\":1}}],[\"如果想覆盖对象工厂的默认行为\",{\"1\":{\"247\":1}}],[\"如果想访问\",{\"1\":{\"137\":2}}],[\"如果执行的语句是\",{\"1\":{\"231\":1}}],[\"如果查询的sql是这样的\",{\"1\":{\"229\":1}}],[\"如果单独导入了一个包\",{\"1\":{\"214\":1}}],[\"如果连接池为空\",{\"1\":{\"213\":1}}],[\"如果资源实例出现异常或超时\",{\"1\":{\"213\":1}}],[\"如果面试官问连接池有什么好处\",{\"1\":{\"213\":1}}],[\"如果这时候通过了原对象的引用去修改了变量值\",{\"1\":{\"1015\":1}}],[\"如果这个文件夹存在\",{\"1\":{\"1192\":1}}],[\"如果这个文件夹不存在\",{\"1\":{\"1192\":1}}],[\"如果这个api忘了\",{\"1\":{\"968\":1}}],[\"如果这个autocar是别人提供的\",{\"1\":{\"936\":1}}],[\"如果这个表存在\",{\"1\":{\"180\":1}}],[\"如果这类连接是\",{\"1\":{\"213\":1}}],[\"如果没找到返回\",{\"1\":{\"737\":6}}],[\"如果没查到\",{\"1\":{\"204\":1}}],[\"如果没有则返回null\",{\"1\":{\"1151\":1}}],[\"如果没有手动setpath\",{\"1\":{\"1145\":1}}],[\"如果没有会话技术\",{\"1\":{\"1137\":1}}],[\"如果没有做有可能出现中文乱码\",{\"1\":{\"1127\":1}}],[\"如果没有重复\",{\"1\":{\"1016\":1}}],[\"如果没有就插入到链表的最后一个位置\",{\"1\":{\"1002\":1}}],[\"如果没有明确\",{\"1\":{\"944\":1}}],[\"如果没有明确继承一个其他类\",{\"1\":{\"598\":1}}],[\"如果没有锁对象就会有这样一个异常\",{\"1\":{\"869\":1}}],[\"如果没有多态\",{\"1\":{\"582\":1}}],[\"如果没有找到\",{\"1\":{\"551\":1}}],[\"如果没有找到匹配的应用时\",{\"1\":{\"139\":1}}],[\"如果没有直接通过语法写出继承了xxx类\",{\"1\":{\"533\":1}}],[\"如果没有循环控制语句\",{\"1\":{\"361\":1}}],[\"如果没有设置\",{\"1\":{\"157\":1,\"1147\":2}}],[\"如果没有一套标准的查询语言\",{\"1\":{\"144\":1}}],[\"如果没有端口号\",{\"1\":{\"139\":1}}],[\"如果没有这样一套规范\",{\"1\":{\"128\":2}}],[\"如果没有\",{\"1\":{\"116\":1,\"171\":1}}],[\"如果\",{\"1\":{\"201\":2,\"357\":1,\"358\":2,\"993\":1,\"1026\":2,\"1046\":1}}],[\"如果丢了数据\",{\"1\":{\"186\":1}}],[\"如果一个空字符串\",{\"1\":{\"741\":2}}],[\"如果一个类没有实现接口\",{\"1\":{\"694\":1}}],[\"如果一个类没有明确的指出它的父类是谁\",{\"1\":{\"658\":1}}],[\"如果一个类实现接口并继承别的类\",{\"1\":{\"596\":1}}],[\"如果一个对象可能会被复用\",{\"1\":{\"483\":1}}],[\"如果一个java班级用一个一维数组来存放\",{\"1\":{\"429\":1}}],[\"如果一个方法需要传入一个long类型数据\",{\"1\":{\"384\":1}}],[\"如果一个表的列太多\",{\"1\":{\"172\":1}}],[\"如果一致返回true\",{\"1\":{\"327\":1}}],[\"如果一致\",{\"1\":{\"116\":1}}],[\"如果unique重复\",{\"1\":{\"169\":1}}],[\"如果英语成绩相同\",{\"1\":{\"167\":1}}],[\"如果第一行没有明确的去调用别的构造器\",{\"1\":{\"542\":1}}],[\"如果第一个字段中的数据都是唯一的\",{\"1\":{\"167\":1}}],[\"如果第一个字段中有相同的值\",{\"1\":{\"167\":1}}],[\"如果第一列一致的话\",{\"1\":{\"166\":1}}],[\"如果创建的是子类对象\",{\"1\":{\"564\":1}}],[\"如果创建的时候没有\",{\"1\":{\"157\":3}}],[\"如果创建库的时候\",{\"1\":{\"157\":1}}],[\"如果有需求\",{\"1\":{\"1204\":1}}],[\"如果有多个属性\",{\"1\":{\"924\":1}}],[\"如果有多个线程等待\",{\"1\":{\"868\":1}}],[\"如果有多级目录不存在的话\",{\"1\":{\"771\":2}}],[\"如果有多次使用需求\",{\"1\":{\"648\":1}}],[\"如果有考试成绩不在这个范围之内\",{\"1\":{\"764\":2}}],[\"如果有同名的情况\",{\"1\":{\"616\":1}}],[\"如果有同学不报错\",{\"1\":{\"167\":1}}],[\"如果有静态成员变量的显式赋值\",{\"1\":{\"546\":1}}],[\"如果有80个这样的班\",{\"1\":{\"429\":1}}],[\"如果有一个固定参数的方法匹配的同时\",{\"1\":{\"423\":1}}],[\"如果有一些你想懂得更深一点\",{\"1\":{\"116\":1}}],[\"如果有嵌套循环\",{\"1\":{\"377\":1}}],[\"如果有\",{\"1\":{\"171\":1,\"756\":1}}],[\"如果有这种需求\",{\"1\":{\"156\":1}}],[\"如果超过这个时间cookie就会过期\",{\"1\":{\"1144\":1}}],[\"如果超过\",{\"1\":{\"153\":1}}],[\"如果之前是100\",{\"1\":{\"153\":1}}],[\"如果小数超了\",{\"1\":{\"153\":2}}],[\"如果大家没有设置字符集的时候\",{\"1\":{\"149\":1}}],[\"如果大家不写前面的路径\",{\"1\":{\"138\":1}}],[\"如果自己可以访问\",{\"1\":{\"139\":1}}],[\"如果不想写3个servlet\",{\"1\":{\"1130\":1}}],[\"如果不为负数\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"如果不记得\",{\"1\":{\"1020\":1}}],[\"如果不相等\",{\"1\":{\"1016\":2}}],[\"如果不限制\",{\"1\":{\"1006\":1}}],[\"如果不知道我们同时修改了哪个文件\",{\"1\":{\"1201\":1}}],[\"如果不知道\",{\"1\":{\"1003\":1}}],[\"如果不知道运算优先级\",{\"1\":{\"350\":1}}],[\"如果不会推导\",{\"1\":{\"978\":1}}],[\"如果不按照这个规范\",{\"1\":{\"939\":1}}],[\"如果不使用\",{\"1\":{\"939\":1}}],[\"如果不满足要求\",{\"1\":{\"924\":2}}],[\"如果不在\",{\"1\":{\"764\":1}}],[\"如果不在一个mapper\",{\"1\":{\"276\":1}}],[\"如果不同的catch分支\",{\"1\":{\"754\":1}}],[\"如果不给能在局部内部类内部\",{\"1\":{\"642\":1}}],[\"如果不继承抽象类没有任何意义\",{\"1\":{\"592\":1}}],[\"如果不是数组\",{\"1\":{\"1118\":1}}],[\"如果不是就返回false\",{\"1\":{\"675\":1}}],[\"如果不是相同类型的对象\",{\"1\":{\"674\":1}}],[\"如果不是转换成它的子类引用\",{\"1\":{\"585\":1}}],[\"如果不是非常有必要\",{\"1\":{\"370\":1}}],[\"如果不创建对象\",{\"1\":{\"453\":1}}],[\"如果不能够或者没有必要处理\",{\"1\":{\"759\":1}}],[\"如果不能私有化\",{\"1\":{\"510\":1}}],[\"如果不能\",{\"1\":{\"341\":1}}],[\"如果不经过类型转换\",{\"1\":{\"319\":1}}],[\"如果不一致\",{\"1\":{\"259\":1}}],[\"如果不加以限制\",{\"1\":{\"168\":1}}],[\"如果不设置字符集\",{\"1\":{\"149\":1}}],[\"如果不存在\",{\"1\":{\"139\":1}}],[\"如果不写content\",{\"1\":{\"121\":1}}],[\"如果存在多个\",{\"1\":{\"953\":4,\"981\":2}}],[\"如果存在多级包名\",{\"1\":{\"499\":1}}],[\"如果存在以下两种情况\",{\"1\":{\"668\":1}}],[\"如果存在\",{\"1\":{\"139\":1}}],[\"如果请求没有指明具体访问的是哪个页面\",{\"1\":{\"139\":1}}],[\"如果虚拟映射和直接部署都有\",{\"1\":{\"139\":1}}],[\"如果在git配置中报错fatal\",{\"1\":{\"1205\":1}}],[\"如果在main中就别抛了\",{\"1\":{\"756\":1}}],[\"如果在使用foreach的循环从插入的时候\",{\"1\":{\"271\":1}}],[\"如果在方法中\",{\"1\":{\"250\":1}}],[\"如果在这个操作的过程中\",{\"1\":{\"208\":1}}],[\"如果在select\",{\"1\":{\"167\":1}}],[\"如果在webapps目录下\",{\"1\":{\"138\":1}}],[\"如果在企业开发过程中\",{\"1\":{\"125\":1}}],[\"如果获取请求参数的方法参数根本不一样\",{\"1\":{\"128\":1}}],[\"如果希望\",{\"1\":{\"1147\":1}}],[\"如果希望能够给父类成员赋值\",{\"1\":{\"541\":1}}],[\"如果希望某个变量在类的全局独一份时\",{\"1\":{\"478\":1}}],[\"如果希望配置一个root应用\",{\"1\":{\"139\":1}}],[\"如果希望访问该文件\",{\"1\":{\"134\":1}}],[\"如果希望给客户端返回信息\",{\"1\":{\"127\":1}}],[\"如果希望使用post方法访问cskaoyan\",{\"1\":{\"115\":1}}],[\"如果文件夹存在且为空\",{\"1\":{\"1192\":1}}],[\"如果文件夹不存在\",{\"1\":{\"1192\":1}}],[\"如果文件不存在\",{\"1\":{\"127\":1,\"775\":1,\"789\":1}}],[\"如果文件存在\",{\"1\":{\"127\":1}}],[\"如果客户端往当前端口号发送请求\",{\"1\":{\"127\":1}}],[\"如果响应二进制类型\",{\"1\":{\"123\":1}}],[\"如果服务器看到这里的值为\",{\"1\":{\"116\":1}}],[\"如果支持就是长连接\",{\"1\":{\"115\":1}}],[\"如果解析的过程中\",{\"1\":{\"113\":1}}],[\"如果a老师和b老师要进行学生信息的传递\",{\"1\":{\"110\":1}}],[\"如果你提供了\",{\"1\":{\"1092\":1}}],[\"如果你没有提供\",{\"1\":{\"1092\":1}}],[\"如果你只是开发简单的独立应用程序\",{\"1\":{\"1077\":1}}],[\"如果你们公司\",{\"1\":{\"1053\":1}}],[\"如果你传入的key\",{\"1\":{\"1009\":1}}],[\"如果你传入的数组长度\",{\"1\":{\"954\":1}}],[\"如果你仍然感兴趣finalize方法\",{\"1\":{\"690\":1}}],[\"如果你对数据结构这门课程有些了解\",{\"1\":{\"678\":1}}],[\"如果你对上述用法有疑惑\",{\"1\":{\"352\":1}}],[\"如果你在tostring方法中写赋值或者其它语句\",{\"1\":{\"669\":1}}],[\"如果你比较机智\",{\"1\":{\"431\":1}}],[\"如果你刚入行编程\",{\"1\":{\"370\":1}}],[\"如果你希望循环能够终止\",{\"1\":{\"361\":1}}],[\"如果你实在不想去领略计算机组成原理的魅力\",{\"1\":{\"323\":1}}],[\"如果你想要提供缺省的servlet\",{\"1\":{\"1092\":1}}],[\"如果你想尝试手动创建java文件并编译执行\",{\"1\":{\"308\":1}}],[\"如果你想查的更快\",{\"1\":{\"178\":1}}],[\"如果你正在使用\",{\"1\":{\"248\":1}}],[\"如果你进入了一个公司\",{\"1\":{\"171\":1}}],[\"如果你插入数据的时候\",{\"1\":{\"171\":1}}],[\"如果你需要存储的字符串在2000以内\",{\"1\":{\"153\":1}}],[\"如果你部署了一个资源文件\",{\"1\":{\"139\":1}}],[\"如果你也希望访问你的tomcat时\",{\"1\":{\"139\":1}}],[\"如果你是美国人\",{\"1\":{\"116\":1}}],[\"如果你是中国人\",{\"1\":{\"116\":1}}],[\"如果你是一个新手\",{\"1\":{\"52\":1}}],[\"如果你不了解它\",{\"1\":{\"53\":1}}],[\"等会扩容了又会变成链表\",{\"1\":{\"1012\":1}}],[\"等学完了map的api\",{\"1\":{\"995\":1}}],[\"等我们真正使用的时候再传入具体的类型\",{\"1\":{\"939\":1}}],[\"等待计算完成\",{\"1\":{\"880\":1}}],[\"等待\",{\"1\":{\"869\":1}}],[\"等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态\",{\"1\":{\"847\":1}}],[\"等待的就是这个线程\",{\"1\":{\"840\":1}}],[\"等待谁\",{\"1\":{\"840\":1}}],[\"等待该线程终止\",{\"1\":{\"840\":1}}],[\"等待gc回收\",{\"1\":{\"482\":1}}],[\"等价\",{\"1\":{\"839\":1}}],[\"等老板找到后\",{\"1\":{\"828\":1}}],[\"等同于关键字class\",{\"1\":{\"717\":1}}],[\"等成员方法\",{\"1\":{\"658\":1}}],[\"等一系列方法\",{\"1\":{\"353\":1}}],[\"等一系列方法和nextline\",{\"1\":{\"353\":1}}],[\"等号\",{\"1\":{\"345\":1}}],[\"等计算机基础知识\",{\"1\":{\"323\":1}}],[\"等于0\",{\"1\":{\"740\":1}}],[\"等于8\",{\"1\":{\"266\":2}}],[\"等于\",{\"1\":{\"162\":2}}],[\"等等\",{\"1\":{\"144\":1,\"263\":1}}],[\"等到开发完成\",{\"1\":{\"1204\":1}}],[\"等到这个子类\",{\"1\":{\"941\":1}}],[\"等到使用son4的时候\",{\"1\":{\"940\":1}}],[\"等到用到第二次查询的内容的时候再去执行第二条sql语句\",{\"1\":{\"283\":1}}],[\"等到你需要切换服务的时候\",{\"1\":{\"128\":1}}],[\"等到双十一的时候\",{\"1\":{\"126\":1}}],[\"等\",{\"1\":{\"115\":1,\"328\":2,\"345\":1,\"568\":1,\"950\":1,\"1026\":1,\"1077\":1}}],[\"等关键信息\",{\"1\":{\"110\":1}}],[\"登录如果成功\",{\"1\":{\"1131\":1}}],[\"登录案例\",{\"0\":{\"1131\":1}}],[\"登录接口\",{\"1\":{\"240\":1}}],[\"登录方法2\",{\"1\":{\"204\":1}}],[\"登录方法\",{\"1\":{\"204\":1}}],[\"登录失败\",{\"1\":{\"204\":2,\"1159\":1}}],[\"登录成功\",{\"1\":{\"204\":1,\"1159\":1}}],[\"登录数据库\",{\"0\":{\"147\":1}}],[\"登录\",{\"1\":{\"115\":1,\"1130\":1}}],[\"注销成功\",{\"1\":{\"1159\":1}}],[\"注重变化的可能性而不是确定性\",{\"1\":{\"330\":1}}],[\"注解相当于给java代码打上一个标签\",{\"1\":{\"924\":1}}],[\"注解名\",{\"1\":{\"924\":1}}],[\"注解名字\",{\"1\":{\"924\":1}}],[\"注解可以作用的目标\",{\"1\":{\"924\":1}}],[\"注解可以参与编译\",{\"1\":{\"924\":1}}],[\"注解的注解\",{\"1\":{\"924\":1}}],[\"注解的作用\",{\"1\":{\"924\":1}}],[\"注解和接口的定义都使用同一个关键字interface\",{\"1\":{\"924\":1}}],[\"注解和接口的关系\",{\"1\":{\"924\":1}}],[\"注解不允许继承\",{\"1\":{\"924\":1}}],[\"注解类型并不能显式地继承其他类或接口\",{\"1\":{\"924\":1}}],[\"注解类型\",{\"1\":{\"924\":1}}],[\"注解体定义\",{\"1\":{\"924\":1}}],[\"注解作为一种数据类型\",{\"1\":{\"924\":1}}],[\"注解有使用范围\",{\"1\":{\"924\":1}}],[\"注解就不会编译报错\",{\"1\":{\"652\":1}}],[\"注解中怎么写\",{\"1\":{\"251\":1}}],[\"注解里面怎么写\",{\"1\":{\"250\":1}}],[\"注解\",{\"0\":{\"924\":1},\"1\":{\"250\":1,\"652\":1,\"924\":2}}],[\"注解值\",{\"1\":{\"250\":1,\"252\":2,\"253\":2}}],[\"注解怎么写\",{\"1\":{\"250\":1}}],[\"注释没有\",{\"1\":{\"924\":1}}],[\"注释只有语法形式\",{\"1\":{\"924\":1}}],[\"注释不行\",{\"1\":{\"924\":1}}],[\"注释不参与编译\",{\"1\":{\"924\":1}}],[\"注释不算有效代码\",{\"1\":{\"499\":1}}],[\"注释是\",{\"1\":{\"918\":1}}],[\"注释是不参与编译的\",{\"1\":{\"317\":1}}],[\"注释中的两行代码\",{\"1\":{\"573\":2}}],[\"注释也可以作为一种比较简单但十分好用有效的\",{\"1\":{\"319\":1}}],[\"注释都是用英语\",{\"1\":{\"319\":1}}],[\"注释的作用\",{\"1\":{\"924\":1}}],[\"注释的好处\",{\"1\":{\"319\":1}}],[\"注释的意义\",{\"0\":{\"319\":1}}],[\"注释的文字\",{\"1\":{\"318\":7}}],[\"注释的格式\",{\"0\":{\"318\":1}}],[\"注释可以是任何解释性文字\",{\"1\":{\"317\":1}}],[\"注释可以放在java代码的任何位置\",{\"1\":{\"317\":1}}],[\"注释指的是可以嵌入到java代码的任何位置的\",{\"1\":{\"317\":1}}],[\"注释在任何编程语言中几乎都会出现\",{\"1\":{\"317\":1}}],[\"注释\",{\"1\":{\"171\":1,\"924\":2}}],[\"注释符\",{\"1\":{\"152\":3}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"79\":1}}],[\"注\",{\"1\":{\"143\":1,\"324\":1,\"334\":1,\"340\":1,\"346\":1,\"383\":1,\"397\":1,\"400\":1,\"402\":1,\"403\":2,\"410\":1,\"416\":1,\"423\":1,\"434\":3,\"436\":1,\"437\":1,\"438\":1,\"441\":1,\"453\":1,\"456\":1,\"484\":1,\"489\":1,\"497\":1,\"522\":1,\"530\":1,\"537\":1,\"555\":1,\"561\":1,\"570\":1,\"572\":1,\"591\":1,\"592\":2,\"596\":1,\"611\":1,\"622\":1,\"652\":1,\"657\":1,\"658\":2,\"694\":1,\"711\":1,\"718\":1}}],[\"注意这个重复的定义\",{\"1\":{\"983\":1}}],[\"注意这个configuration配置包括内部配置\",{\"1\":{\"234\":1}}],[\"注意oom\",{\"1\":{\"960\":1}}],[\"注意一些坑\",{\"1\":{\"960\":1}}],[\"注意一般if\",{\"1\":{\"264\":1}}],[\"注意并发修改异常\",{\"1\":{\"956\":1,\"960\":1}}],[\"注意7\",{\"1\":{\"939\":1}}],[\"注意6\",{\"1\":{\"939\":1}}],[\"注意5\",{\"1\":{\"939\":1}}],[\"注意4\",{\"1\":{\"939\":1}}],[\"注意3\",{\"1\":{\"939\":1}}],[\"注意2\",{\"1\":{\"939\":1}}],[\"注意1\",{\"1\":{\"939\":1}}],[\"注意此时程序会跳过这个异常\",{\"1\":{\"760\":1}}],[\"注意区分大小写\",{\"1\":{\"736\":1}}],[\"注意两个问题\",{\"1\":{\"598\":1}}],[\"注意代码中的new关键字表示一定会在堆上创建一个独立的对象\",{\"1\":{\"452\":1}}],[\"注意格式就行了\",{\"1\":{\"441\":1}}],[\"注意它不是结束整个循环\",{\"1\":{\"377\":1}}],[\"注意有一个空格\",{\"1\":{\"318\":1}}],[\"注意事项与使用细节\",{\"0\":{\"466\":1}}],[\"注意事项\",{\"0\":{\"336\":1,\"423\":1,\"454\":1,\"462\":1,\"496\":1,\"518\":1,\"562\":1,\"593\":1,\"631\":1,\"642\":1,\"656\":1,\"663\":1,\"669\":1,\"685\":1,\"708\":1,\"789\":1,\"833\":1},\"1\":{\"315\":1,\"344\":1,\"352\":1,\"359\":1,\"398\":1,\"411\":1,\"412\":1,\"423\":1,\"469\":1,\"474\":1,\"475\":1,\"503\":1,\"509\":1,\"543\":1,\"553\":1,\"559\":1,\"754\":1,\"924\":1,\"943\":1,\"1090\":3,\"1112\":1,\"1147\":1,\"1203\":1}}],[\"注意是根目录\",{\"1\":{\"307\":1}}],[\"注意sql语句书写正确\",{\"1\":{\"244\":1}}],[\"注意sql返回值类型parametertype\",{\"1\":{\"244\":1}}],[\"注意路径保持\",{\"1\":{\"244\":1}}],[\"注意路径\",{\"1\":{\"244\":1}}],[\"注意点\",{\"1\":{\"167\":1}}],[\"注意输入法是英文的\",{\"1\":{\"148\":1}}],[\"注意用户名和密码\",{\"1\":{\"147\":1}}],[\"注意\",{\"0\":{\"256\":1},\"1\":{\"115\":1,\"130\":1,\"134\":1,\"149\":3,\"164\":1,\"166\":1,\"212\":1,\"215\":1,\"235\":1,\"244\":1,\"247\":3,\"251\":1,\"272\":1,\"283\":3,\"317\":1,\"331\":1,\"335\":1,\"376\":1,\"433\":1,\"450\":1,\"453\":1,\"466\":1,\"499\":1,\"503\":1,\"523\":1,\"529\":1,\"567\":1,\"569\":1,\"571\":1,\"612\":1,\"679\":1,\"717\":1,\"719\":1,\"752\":1,\"757\":1,\"790\":1,\"817\":1,\"824\":1,\"842\":1,\"869\":1,\"916\":2,\"924\":1,\"960\":1,\"995\":1,\"999\":1,\"1026\":1,\"1036\":1,\"1046\":1,\"1146\":1,\"1202\":2}}],[\"注册相关网站\",{\"0\":{\"1190\":1}}],[\"注册接口\",{\"1\":{\"240\":1}}],[\"注册驱动利用反射\",{\"1\":{\"203\":1}}],[\"注册驱动\",{\"1\":{\"199\":1}}],[\"注册\",{\"1\":{\"115\":1,\"1130\":1}}],[\"本地仓库\",{\"1\":{\"1182\":1}}],[\"本地\",{\"1\":{\"1115\":2}}],[\"本地local是服务器\",{\"1\":{\"1115\":1}}],[\"本地方法不需要方法体\",{\"1\":{\"660\":1}}],[\"本地方法栈\",{\"1\":{\"403\":2,\"925\":2}}],[\"本节课只会讲线性表\",{\"1\":{\"947\":1}}],[\"本节内部类对象\",{\"1\":{\"645\":1}}],[\"本来就无法重写\",{\"1\":{\"567\":2}}],[\"本身是用来做静态资源访问的\",{\"1\":{\"1092\":1}}],[\"本身是一个关键字\",{\"1\":{\"359\":1}}],[\"本身就是要占用内存的\",{\"1\":{\"689\":1}}],[\"本身就是单词integer的缩写\",{\"1\":{\"322\":1}}],[\"本身可以使用的修饰符就比较少\",{\"1\":{\"592\":1}}],[\"本mapper文件中\",{\"1\":{\"234\":1}}],[\"本质inputstream\",{\"1\":{\"821\":1}}],[\"本质\",{\"1\":{\"821\":2}}],[\"本质还是一个数组\",{\"1\":{\"680\":1}}],[\"本质依然是局部内部类\",{\"1\":{\"642\":1}}],[\"本质上就是重写了一个抽象方法的子类对象\",{\"1\":{\"654\":1}}],[\"本质上还是属于定义在别的类内部的一个类\",{\"1\":{\"645\":1}}],[\"本质上其实是一次\",{\"1\":{\"585\":1}}],[\"本质上是一个语法\",{\"1\":{\"401\":1}}],[\"本质区别\",{\"1\":{\"406\":1}}],[\"本质是为了代码复用\",{\"1\":{\"380\":1}}],[\"本质就是程序\",{\"1\":{\"126\":1}}],[\"本质的区别在于语义的不同\",{\"1\":{\"115\":1}}],[\"本页面就是一个示例\",{\"1\":{\"45\":1}}],[\"不认识的命令\",{\"1\":{\"1204\":1}}],[\"不去追踪这个仓库中这些文件的变化\",{\"1\":{\"1203\":1}}],[\"不手动关闭也可以\",{\"1\":{\"1129\":1}}],[\"不分先后顺序\",{\"1\":{\"1093\":1}}],[\"不如我直接扩容\",{\"1\":{\"1012\":1}}],[\"不如如何创建\",{\"1\":{\"541\":1}}],[\"不为null\",{\"1\":{\"1008\":1}}],[\"不太知道\",{\"1\":{\"993\":1}}],[\"不太可能会取消这一声明格式\",{\"1\":{\"395\":1}}],[\"不包括\",{\"1\":{\"960\":1,\"993\":1,\"1026\":1}}],[\"不包含\",{\"1\":{\"737\":2}}],[\"不copy数据\",{\"1\":{\"955\":1}}],[\"不叫泛型方法\",{\"1\":{\"943\":1}}],[\"不直观\",{\"1\":{\"924\":1}}],[\"不借助线程池\",{\"1\":{\"881\":1}}],[\"不调用close\",{\"1\":{\"789\":1}}],[\"不完整的路径名\",{\"1\":{\"767\":1}}],[\"不考虑其他字符\",{\"1\":{\"737\":2}}],[\"不满足我们的需求\",{\"1\":{\"713\":1}}],[\"不然可能会push失败\",{\"1\":{\"1201\":1}}],[\"不然就会一直被占用\",{\"1\":{\"689\":1}}],[\"不然就会打印地址值了\",{\"1\":{\"669\":1}}],[\"不然会编译语法报错\",{\"1\":{\"653\":1}}],[\"不然会数组下标越界\",{\"1\":{\"437\":1}}],[\"不然会数组越界\",{\"1\":{\"436\":1}}],[\"不然会空指针异常\",{\"1\":{\"436\":1}}],[\"不修改main方法和接口inter的前提下\",{\"1\":{\"650\":1}}],[\"不修改方法体\",{\"1\":{\"459\":1}}],[\"不知道\",{\"1\":{\"647\":1,\"1003\":1}}],[\"不合理使用内部类还可能导致内存泄漏\",{\"1\":{\"643\":1}}],[\"不合法\",{\"1\":{\"411\":1}}],[\"不触发类加载的\",{\"1\":{\"636\":1}}],[\"不按定义位置来学习\",{\"1\":{\"608\":1}}],[\"不再创建新的字符串对象了\",{\"1\":{\"732\":1}}],[\"不再将cpu类定义为一个独立的类\",{\"1\":{\"607\":1}}],[\"不再赘述\",{\"1\":{\"453\":1,\"636\":1}}],[\"不必保持一模一样\",{\"1\":{\"605\":1}}],[\"不关注属性\",{\"1\":{\"597\":1}}],[\"不受java多继承限制的\",{\"1\":{\"596\":1}}],[\"不受java单继承限制\",{\"1\":{\"595\":1}}],[\"不强调属性\",{\"1\":{\"595\":1}}],[\"不符合类的定义\",{\"1\":{\"595\":1}}],[\"不符合条件的干掉\",{\"1\":{\"777\":1}}],[\"不符合条件\",{\"1\":{\"230\":1}}],[\"不多见\",{\"1\":{\"585\":1}}],[\"不写代码用父类引用指向子类对象\",{\"1\":{\"577\":1}}],[\"不写任何关键字\",{\"1\":{\"508\":1,\"534\":1}}],[\"不参与继承和重写\",{\"1\":{\"577\":1}}],[\"不爽你就自己实现一个\",{\"1\":{\"567\":1}}],[\"不想要被子类继承的类\",{\"1\":{\"566\":1}}],[\"不想让别人访问的地方\",{\"1\":{\"505\":1}}],[\"不影响\",{\"1\":{\"563\":3}}],[\"不涉及基本数据类型\",{\"1\":{\"561\":1}}],[\"不行\",{\"1\":{\"538\":2,\"944\":1}}],[\"不导入不行\",{\"1\":{\"504\":1}}],[\"不导入对应包下的类就会报错\",{\"1\":{\"504\":1}}],[\"不存在类型提升\",{\"1\":{\"605\":1}}],[\"不存在选择的问题\",{\"1\":{\"503\":1}}],[\"不存储data\",{\"1\":{\"220\":1}}],[\"不难得出\",{\"1\":{\"498\":1}}],[\"不难发现递归的优点是\",{\"1\":{\"442\":1}}],[\"不难发现\",{\"1\":{\"342\":1}}],[\"不理解算了\",{\"1\":{\"497\":1}}],[\"不论使用哪个构造器\",{\"1\":{\"488\":1}}],[\"不推荐\",{\"1\":{\"477\":1}}],[\"不推荐大家使用\",{\"1\":{\"254\":1}}],[\"不指定类型\",{\"1\":{\"941\":1}}],[\"不指定年龄\",{\"1\":{\"466\":1}}],[\"不指定需要插入的列名\",{\"1\":{\"158\":1}}],[\"不像局部变量仅在作用域内生效\",{\"1\":{\"454\":1}}],[\"不利于数据管理\",{\"1\":{\"444\":2}}],[\"不管引用数据类型成员变量引用\",{\"1\":{\"699\":1}}],[\"不管是\",{\"1\":{\"1200\":1}}],[\"不管是静态内部类中的静态方法还是成员方法\",{\"1\":{\"627\":1,\"628\":1}}],[\"不管是什么赋值运算符\",{\"1\":{\"345\":1}}],[\"不管在哪都要创建对方对象\",{\"1\":{\"626\":1}}],[\"不管子类是何种方式触发类加载\",{\"1\":{\"541\":1}}],[\"不管隔了几层\",{\"1\":{\"533\":2}}],[\"不管这个student类对象哪里来的\",{\"1\":{\"509\":1}}],[\"不管何种方式触发该类的类加载\",{\"1\":{\"479\":1}}],[\"不管赋值的方式有多少种\",{\"1\":{\"408\":1}}],[\"不执行statement语句\",{\"1\":{\"358\":1}}],[\"不重要的地方在于可以使用小括号\",{\"1\":{\"350\":1}}],[\"不重复的\",{\"1\":{\"170\":1}}],[\"不作为重点\",{\"1\":{\"348\":1}}],[\"不走缓存\",{\"1\":{\"285\":1}}],[\"不破坏sql语句的可读性\",{\"1\":{\"267\":1}}],[\"不拼接\",{\"1\":{\"265\":1}}],[\"不用使用强制类型转换\",{\"1\":{\"938\":1}}],[\"不用改源码\",{\"1\":{\"924\":1}}],[\"不用引用接收\",{\"1\":{\"653\":1}}],[\"不用深入考究\",{\"1\":{\"588\":1}}],[\"不用完全一致\",{\"1\":{\"563\":1}}],[\"不用太关心这条语句的位置\",{\"1\":{\"503\":1}}],[\"不用递归时\",{\"1\":{\"442\":1}}],[\"不用外面的\",{\"1\":{\"264\":1}}],[\"不用我们自己再去生成getter\",{\"1\":{\"262\":1}}],[\"不用我们自己解析\",{\"1\":{\"244\":1}}],[\"不使用链式调用\",{\"1\":{\"606\":1}}],[\"不使用连接池\",{\"1\":{\"248\":1}}],[\"不使用外键\",{\"1\":{\"171\":1}}],[\"不够简单\",{\"1\":{\"235\":1}}],[\"不适合用来做普通的索引\",{\"1\":{\"220\":1}}],[\"不需要额外的空间进行维护\",{\"1\":{\"976\":1}}],[\"不需要额外操作\",{\"1\":{\"503\":1}}],[\"不需要大家死记硬背\",{\"1\":{\"968\":1}}],[\"不需要大家把这些背下来\",{\"1\":{\"214\":1}}],[\"不需要像arraylist一样将其后面的元素全部向前移动\",{\"1\":{\"965\":1}}],[\"不需要任何其他信息就可以定位它所表示的文件\",{\"1\":{\"767\":1}}],[\"不需要声明\",{\"1\":{\"756\":1}}],[\"不需要提供setxxx\",{\"1\":{\"715\":1}}],[\"不需要重写实现\",{\"1\":{\"698\":1}}],[\"不需要写出来\",{\"1\":{\"654\":1}}],[\"不需要写代码处理\",{\"1\":{\"341\":1}}],[\"不需要用引用接收再去使用\",{\"1\":{\"648\":1}}],[\"不需要的就直接继承\",{\"1\":{\"600\":1}}],[\"不需要多此一举\",{\"1\":{\"567\":2}}],[\"不需要子类进行修改了\",{\"1\":{\"567\":1}}],[\"不需要再让子类去扩展它了\",{\"1\":{\"566\":1}}],[\"不需要再安装其他软件\",{\"1\":{\"303\":1}}],[\"不需要\",{\"1\":{\"566\":1,\"584\":1}}],[\"不需要让外界知道具体的实现细节\",{\"1\":{\"512\":1}}],[\"不需要创建对象\",{\"1\":{\"510\":1,\"590\":1}}],[\"不需要导包\",{\"1\":{\"503\":1}}],[\"不需要浏览器运行\",{\"1\":{\"303\":1}}],[\"不需要实现接口\",{\"1\":{\"235\":1}}],[\"不需要回表\",{\"1\":{\"231\":1}}],[\"不需要携带应用的名称\",{\"1\":{\"139\":1}}],[\"不可存储null\",{\"1\":{\"977\":1}}],[\"不可靠的\",{\"1\":{\"885\":1}}],[\"不可用\",{\"1\":{\"859\":1}}],[\"不可更改\",{\"1\":{\"568\":1,\"600\":2}}],[\"不可能写了一个月代码\",{\"1\":{\"1202\":1}}],[\"不可能控制仅能在computer内部创建对象\",{\"1\":{\"607\":1}}],[\"不可能是一个人完成的\",{\"1\":{\"505\":1}}],[\"不可能执行多个分支\",{\"1\":{\"358\":1}}],[\"不可能用反斜杠\",{\"1\":{\"356\":1}}],[\"不可能也没能力直接存储一个符号\",{\"1\":{\"324\":1}}],[\"不可以\",{\"1\":{\"309\":1}}],[\"不可以关闭\",{\"1\":{\"284\":1}}],[\"不可以直接在浏览器地址栏直接输入网址\",{\"1\":{\"115\":1}}],[\"不可重复读\",{\"1\":{\"211\":2}}],[\"不可逆转的\",{\"1\":{\"210\":1}}],[\"不变的\",{\"1\":{\"210\":1}}],[\"不应该使用过时方法或者类\",{\"1\":{\"658\":1}}],[\"不应该使用外键\",{\"1\":{\"171\":1}}],[\"不应该是一个独立的类\",{\"1\":{\"607\":1}}],[\"不应该触碰的地方\",{\"1\":{\"510\":1}}],[\"不应该冗余数据\",{\"1\":{\"178\":1}}],[\"不懂这个表里面的字段的含义\",{\"1\":{\"171\":1}}],[\"不允许存储null作为key\",{\"1\":{\"1020\":1}}],[\"不允许存储重复的key\",{\"1\":{\"1020\":1}}],[\"不允许存储重复元素\",{\"1\":{\"1003\":1}}],[\"不允许存储重复数据\",{\"1\":{\"987\":1}}],[\"不允许外部创建对象\",{\"1\":{\"715\":1}}],[\"不允许也不可能\",{\"1\":{\"682\":1}}],[\"不允许更严格\",{\"1\":{\"563\":1}}],[\"不允许为空\",{\"1\":{\"170\":1}}],[\"不允许输入null这种值\",{\"1\":{\"170\":1}}],[\"不希望这个id\",{\"1\":{\"170\":1}}],[\"不一定会\",{\"1\":{\"1012\":1}}],[\"不一定要求数据类型完全一致\",{\"1\":{\"603\":1,\"604\":1}}],[\"不一定\",{\"1\":{\"169\":1}}],[\"不删除\",{\"1\":{\"169\":1}}],[\"不断的插入\",{\"1\":{\"169\":1}}],[\"不报错\",{\"1\":{\"167\":1}}],[\"不加排序模式\",{\"1\":{\"166\":1}}],[\"不在打印\",{\"1\":{\"844\":2}}],[\"不在范围内\",{\"1\":{\"706\":1}}],[\"不在同一条继承链中的类\",{\"1\":{\"533\":1}}],[\"不在此范围内\",{\"1\":{\"517\":2}}],[\"不在列表内\",{\"1\":{\"162\":1}}],[\"不在webapps目录这种方式叫做\",{\"1\":{\"135\":1}}],[\"不等于\",{\"1\":{\"162\":2}}],[\"不会相互干扰\",{\"1\":{\"1204\":1}}],[\"不会把工作区中的变化提交到本地仓库\",{\"1\":{\"1195\":1}}],[\"不会落在同一个位置\",{\"1\":{\"1015\":1}}],[\"不会转化为红黑树\",{\"1\":{\"1012\":1,\"1016\":1}}],[\"不会这样用\",{\"1\":{\"956\":1}}],[\"不会使用这个数组\",{\"1\":{\"954\":1}}],[\"不会抛出异常给jvm报错\",{\"1\":{\"760\":1}}],[\"不会产生效率问题和空间浪费问题\",{\"1\":{\"744\":1}}],[\"不会在堆上再创建\",{\"1\":{\"731\":1}}],[\"不会去调用构造器\",{\"1\":{\"697\":1}}],[\"不会害怕外界访问和修改\",{\"1\":{\"571\":1}}],[\"不会因为创建对象而更改\",{\"1\":{\"571\":1}}],[\"不会更改变量的存储位置\",{\"1\":{\"568\":1}}],[\"不会物理消失\",{\"1\":{\"555\":1}}],[\"不会影响finally代码块执行\",{\"1\":{\"760\":1}}],[\"不会影响jvm的安全\",{\"1\":{\"497\":1}}],[\"不会影响方法调用\",{\"1\":{\"382\":1}}],[\"不会经过条件判断语句\",{\"1\":{\"364\":1}}],[\"不会走缓存\",{\"1\":{\"285\":2,\"287\":1}}],[\"不会认为是作者或者其他人的名字\",{\"1\":{\"153\":1}}],[\"不会写太多\",{\"1\":{\"153\":1}}],[\"不精确\",{\"1\":{\"153\":1}}],[\"不是说面试官提了10个题\",{\"1\":{\"1020\":1}}],[\"不是说随便就把文字写在源代码中\",{\"1\":{\"317\":1}}],[\"不是想听你回答了解\",{\"1\":{\"1020\":1}}],[\"不是存储的顺序\",{\"1\":{\"991\":1}}],[\"不是存储的时候会变\",{\"1\":{\"149\":1}}],[\"不是父子继承关系\",{\"1\":{\"944\":1}}],[\"不是java写的\",{\"1\":{\"912\":1}}],[\"不是同一种类型的对象\",{\"1\":{\"663\":1}}],[\"不是静态方法\",{\"1\":{\"655\":1}}],[\"不是全部都取代\",{\"1\":{\"651\":1}}],[\"不是所有猫狗都有这个行为\",{\"1\":{\"595\":1}}],[\"不是完整的类加载\",{\"1\":{\"571\":1}}],[\"不是表示该方法只能传入常量\",{\"1\":{\"569\":1}}],[\"不是引用数据类型有初始化\",{\"1\":{\"408\":1}}],[\"不是数学当中的百分号\",{\"1\":{\"344\":1}}],[\"不是上面用户变量中的path\",{\"1\":{\"307\":1}}],[\"不是\",{\"1\":{\"233\":1,\"570\":1,\"652\":2}}],[\"不是背出来\",{\"1\":{\"217\":1}}],[\"不是特别重要\",{\"1\":{\"217\":1}}],[\"不是关键字\",{\"1\":{\"148\":1}}],[\"不区分大小写的\",{\"1\":{\"149\":1}}],[\"不安全\",{\"1\":{\"147\":1}}],[\"不建议随便把很多类定义在同一个java文件中\",{\"1\":{\"469\":1}}],[\"不建议将jdk直接装在c盘\",{\"1\":{\"306\":1}}],[\"不建议\",{\"1\":{\"251\":1}}],[\"不建议使用\",{\"1\":{\"250\":1,\"253\":1}}],[\"不建议使用varchar\",{\"1\":{\"153\":1}}],[\"不建议大家调整\",{\"1\":{\"1006\":1}}],[\"不建议大家使用自定义的类当做key\",{\"1\":{\"1009\":1}}],[\"不建议大家使用\",{\"1\":{\"254\":1}}],[\"不建议大家用\",{\"1\":{\"171\":1,\"184\":1}}],[\"不建议大家直接把密码写在控制台上\",{\"1\":{\"147\":1}}],[\"不建议这样写\",{\"1\":{\"147\":1,\"182\":1}}],[\"不同文件\",{\"1\":{\"1183\":1}}],[\"不同点\",{\"1\":{\"924\":1}}],[\"不同系统的路径表示\",{\"0\":{\"768\":1}}],[\"不同于new对象\",{\"1\":{\"692\":1}}],[\"不同类型的数据\",{\"1\":{\"820\":1}}],[\"不同类型的两个类\",{\"1\":{\"663\":1}}],[\"不同类型class对象不同\",{\"1\":{\"663\":1}}],[\"不同\",{\"1\":{\"533\":1,\"873\":1}}],[\"不同包下\",{\"1\":{\"538\":2}}],[\"不同包下必须是子类才能够访问\",{\"1\":{\"509\":1}}],[\"不同包其他类\",{\"1\":{\"506\":1,\"534\":1}}],[\"不同包子类\",{\"1\":{\"506\":1,\"534\":1}}],[\"不同包的子类中\",{\"1\":{\"535\":3}}],[\"不同包的子类能够访问\",{\"1\":{\"506\":1,\"534\":1}}],[\"不同包的其他类能够访问\",{\"1\":{\"506\":1,\"534\":1}}],[\"不同区域中存放的变量的生命周期\",{\"1\":{\"402\":1}}],[\"不同时为true\",{\"1\":{\"347\":1}}],[\"不同单词的大写和小写间隔起来\",{\"1\":{\"316\":1}}],[\"不同sqlsession获取的mapper\",{\"1\":{\"285\":1,\"287\":1}}],[\"不同sqlsession获取同一种的mapper\",{\"1\":{\"285\":1}}],[\"不同的整型包装类型对象\",{\"1\":{\"709\":1}}],[\"不同的子类需要重写父类中的同名方法\",{\"1\":{\"576\":1}}],[\"不同的子类对象调用抽象类中定义的方法\",{\"1\":{\"1078\":1}}],[\"不同的子类对象\",{\"1\":{\"575\":1}}],[\"不同的状态\",{\"1\":{\"575\":1}}],[\"不同的情况\",{\"1\":{\"575\":1}}],[\"不同的对象可能呈现不同的行为\",{\"1\":{\"514\":1}}],[\"不同的存储引擎存储数据的方式是不一样的\",{\"1\":{\"221\":1}}],[\"不同的索引类型适用于不同的查询场景\",{\"1\":{\"218\":1}}],[\"不同的隔离级别对于隔离性的影响是不一样的\",{\"1\":{\"210\":1}}],[\"不同的是\",{\"1\":{\"146\":1}}],[\"不同元素可以有相同的动画顺序\",{\"1\":{\"27\":1}}],[\"不仅耗费时间\",{\"1\":{\"954\":1}}],[\"不仅能够减少代码冗余\",{\"1\":{\"519\":1}}],[\"不仅应该包含汽车的属性和功能\",{\"1\":{\"513\":1}}],[\"不仅可以出现在where中\",{\"1\":{\"162\":1}}],[\"不仅可以存数据\",{\"1\":{\"143\":1}}],[\"不仅可以存储数据\",{\"1\":{\"143\":1,\"171\":1}}],[\"不仅仅只有sql\",{\"1\":{\"144\":1}}],[\"不要随意去执行\",{\"1\":{\"1204\":1}}],[\"不要去追踪这些文件\",{\"1\":{\"1203\":1}}],[\"不要去改变collection的结构\",{\"1\":{\"956\":1}}],[\"不要左答一点\",{\"1\":{\"1020\":1}}],[\"不要面试官问你什么你就答什么\",{\"1\":{\"1020\":1}}],[\"不要瞎引\",{\"1\":{\"1020\":1}}],[\"不要瞎操作\",{\"1\":{\"150\":1}}],[\"不要在这想太久\",{\"1\":{\"1020\":1}}],[\"不要在这想\",{\"1\":{\"1020\":1}}],[\"不要在迭代器迭代过程中\",{\"1\":{\"955\":1}}],[\"不要通过引用来修改\",{\"1\":{\"1015\":1}}],[\"不要一股脑全背出来\",{\"1\":{\"1003\":1}}],[\"不要用流\",{\"1\":{\"1053\":1}}],[\"不要用\",{\"1\":{\"970\":1}}],[\"不要死记硬背面经\",{\"1\":{\"969\":1}}],[\"不要重写它\",{\"1\":{\"694\":1}}],[\"不要画蛇添足\",{\"1\":{\"669\":1}}],[\"不要求严格遵守\",{\"1\":{\"568\":1}}],[\"不要\",{\"1\":{\"510\":1}}],[\"不要为了一时的方便\",{\"1\":{\"483\":1}}],[\"不要滥用匿名对象\",{\"1\":{\"483\":1}}],[\"不要再重复赋值\",{\"1\":{\"441\":1}}],[\"不要遍历整个数组\",{\"1\":{\"419\":1}}],[\"不要自定义一个方法叫main\",{\"1\":{\"385\":1}}],[\"不要忘记了\",{\"1\":{\"546\":1}}],[\"不要忘记了首尾元素已经赋值过了\",{\"1\":{\"441\":1}}],[\"不要忘记\",{\"1\":{\"376\":1}}],[\"不要混淆了\",{\"1\":{\"356\":1}}],[\"不要使用idea中的可视化\",{\"1\":{\"1205\":1}}],[\"不要使用docx\",{\"1\":{\"1192\":1}}],[\"不要使用string这种东西作为泛型\",{\"1\":{\"939\":1}}],[\"不要使用==\",{\"1\":{\"711\":1}}],[\"不要使用过于复杂的三目运算符\",{\"1\":{\"349\":1}}],[\"不要使用\",{\"1\":{\"247\":1,\"316\":2}}],[\"不要使用具体的实现类来接\",{\"1\":{\"128\":1}}],[\"不要乱起别名\",{\"1\":{\"247\":1}}],[\"不要更换配置顺序\",{\"1\":{\"234\":1}}],[\"不要写什么\",{\"1\":{\"1195\":1}}],[\"不要写select\",{\"1\":{\"267\":1}}],[\"不要写\",{\"1\":{\"231\":1}}],[\"不要直接写\",{\"1\":{\"230\":1}}],[\"不要选5的版本\",{\"1\":{\"192\":1}}],[\"不要觉得它非常简单\",{\"1\":{\"156\":1}}],[\"不要删除默认的自带的库\",{\"1\":{\"148\":1}}],[\"不要怕\",{\"1\":{\"147\":1}}],[\"不要把其他的环境变量全部删除了\",{\"1\":{\"144\":1}}],[\"不要背\",{\"1\":{\"116\":2}}],[\"不能设置和当前域名无关的domain\",{\"1\":{\"1146\":1}}],[\"不能既获得字节流又获得字符流\",{\"1\":{\"1129\":1}}],[\"不能面试官问你\",{\"1\":{\"1020\":1}}],[\"不能重复\",{\"1\":{\"996\":1}}],[\"不能重写也没有多态\",{\"1\":{\"577\":1}}],[\"不能重写的方法有\",{\"1\":{\"577\":1}}],[\"不能重写的方法\",{\"1\":{\"577\":1}}],[\"不能记住\",{\"1\":{\"978\":1}}],[\"不能存储重复元素\",{\"1\":{\"980\":1}}],[\"不能存储null\",{\"1\":{\"971\":1,\"974\":1}}],[\"不能存储任何数据\",{\"1\":{\"413\":1}}],[\"不能边使用\",{\"1\":{\"955\":1}}],[\"不能添加和删除数据\",{\"1\":{\"953\":1}}],[\"不能去修改原有集合\",{\"1\":{\"951\":1}}],[\"不能启动多次\",{\"1\":{\"833\":1}}],[\"不能操作数据来源\",{\"1\":{\"820\":1}}],[\"不能通过原有集合的remove\",{\"1\":{\"956\":1}}],[\"不能通过gc回收\",{\"1\":{\"789\":1}}],[\"不能通过继承破坏value的设计体系\",{\"1\":{\"702\":1}}],[\"不能返回文件夹的长度\",{\"1\":{\"775\":1}}],[\"不能再像基本数据类型一样用\",{\"1\":{\"708\":1}}],[\"不能再指向一个新的对象了\",{\"1\":{\"568\":1}}],[\"不能依赖于一个不稳定的机制\",{\"1\":{\"689\":1}}],[\"不能自定义成员\",{\"1\":{\"656\":1}}],[\"不能访问子类独有成员\",{\"1\":{\"648\":1}}],[\"不能访问任何数组下标\",{\"1\":{\"413\":2}}],[\"不能\",{\"1\":{\"598\":1,\"1196\":1}}],[\"不能创建对象\",{\"1\":{\"598\":1,\"606\":2}}],[\"不能发现\",{\"1\":{\"592\":1}}],[\"不能发生多态的场景\",{\"0\":{\"577\":1}}],[\"不能放在一起使用\",{\"1\":{\"592\":1}}],[\"不能打游戏\",{\"1\":{\"588\":1}}],[\"不能继承\",{\"1\":{\"577\":1}}],[\"不能继承的类\",{\"1\":{\"577\":1}}],[\"不能被继承\",{\"1\":{\"567\":1,\"730\":1}}],[\"不能做任何修改\",{\"1\":{\"561\":2}}],[\"不能做任何操作\",{\"1\":{\"383\":1}}],[\"不能用引用接收\",{\"1\":{\"648\":1}}],[\"不能用实现类类名调用\",{\"1\":{\"600\":1}}],[\"不能用来修饰构造器\",{\"1\":{\"593\":1}}],[\"不能用\",{\"1\":{\"537\":1,\"710\":1}}],[\"不能用父类的\",{\"1\":{\"537\":1}}],[\"不能用static修饰它\",{\"1\":{\"474\":1}}],[\"不能循环定义继承\",{\"1\":{\"533\":1}}],[\"不能直接修改属性\",{\"1\":{\"516\":1}}],[\"不能直接使用\",{\"1\":{\"438\":1}}],[\"不能直接看到\",{\"1\":{\"115\":1}}],[\"不能修改基本数据类型的实参的值\",{\"1\":{\"427\":1}}],[\"不能填入一个不合法的索引下标\",{\"1\":{\"400\":1}}],[\"不能构成一条能单独执行的代码\",{\"1\":{\"342\":1}}],[\"不能有同名变量\",{\"1\":{\"335\":1}}],[\"不能定义\",{\"1\":{\"331\":1}}],[\"不能是null\",{\"1\":{\"924\":1}}],[\"不能是java中的关键字\",{\"1\":{\"315\":1}}],[\"不能是一个文件\",{\"1\":{\"139\":1}}],[\"不能以数字开头\",{\"1\":{\"315\":1}}],[\"不能完美的解决脏数据的问题\",{\"1\":{\"287\":1}}],[\"不能完全解决\",{\"1\":{\"212\":1}}],[\"不能省略开头的\",{\"1\":{\"1090\":1}}],[\"不能省略\",{\"1\":{\"234\":1}}],[\"不能删除还有子行的数据\",{\"1\":{\"171\":1}}],[\"不能这样写\",{\"1\":{\"149\":1}}],[\"不能将文件直接放置在webapps目录下\",{\"1\":{\"134\":1}}],[\"不能写算了\",{\"1\":{\"127\":1}}],[\"不验证通讯另一方的身份\",{\"1\":{\"125\":1}}],[\"因wait方法而阻塞的线程也\",{\"1\":{\"868\":1}}],[\"因为后面写项目的时候\",{\"1\":{\"1205\":1}}],[\"因为后面会用到\",{\"1\":{\"947\":1}}],[\"因为我们再企业中写代码\",{\"1\":{\"1202\":1}}],[\"因为命令基本类似\",{\"1\":{\"1183\":1}}],[\"因为request已经帮我们封装了可以直接使用的方法了\",{\"1\":{\"1117\":1}}],[\"因为已经有了\",{\"1\":{\"1081\":1}}],[\"因为已经被微软的产品占用了\",{\"1\":{\"139\":1}}],[\"因为存在多个key落在同一个数组位置\",{\"1\":{\"1002\":1}}],[\"因为比如链表有1w个节点\",{\"1\":{\"1002\":1}}],[\"因为整数太大了\",{\"1\":{\"1002\":1}}],[\"因为输入是无限数目的\",{\"1\":{\"1000\":1}}],[\"因为在stack类的上面\",{\"1\":{\"970\":1}}],[\"因为在操作系统中\",{\"1\":{\"766\":1}}],[\"因为绝大部分都不涉及到多线程情况\",{\"1\":{\"969\":1}}],[\"因为效率低\",{\"1\":{\"969\":1}}],[\"因为collection和arraylist还隔了一层\",{\"1\":{\"961\":1}}],[\"因为面试如果答不上来\",{\"1\":{\"948\":1}}],[\"因为数组的最后一个元素可以直接连接到第一个元素\",{\"1\":{\"976\":1}}],[\"因为数组是连续存储可以做到随机访问\",{\"1\":{\"948\":1}}],[\"因为数据库中的列名和\",{\"1\":{\"259\":1}}],[\"因为泛型不涉及到强制类型转换\",{\"1\":{\"945\":1}}],[\"因为泛型不允许协变\",{\"1\":{\"944\":1}}],[\"因为网络编程实现的是两个进程间的通信\",{\"1\":{\"885\":1}}],[\"因为某对象a的wait\",{\"1\":{\"869\":1}}],[\"因为调用执行某对象的wait\",{\"1\":{\"869\":1}}],[\"因为运行时异常会自动抛出\",{\"1\":{\"756\":1}}],[\"因为java还有基本数据类型变量\",{\"1\":{\"701\":1}}],[\"因为java不是完全面向对象的编程语言\",{\"1\":{\"701\":1}}],[\"因为java不支持多继承\",{\"1\":{\"595\":1}}],[\"因为接口中往往有抽象方法\",{\"1\":{\"696\":1}}],[\"因为接口的声明修饰符中隐含了关键字abstract\",{\"1\":{\"598\":1}}],[\"因为默认的hashcode方法按照对象地址计算\",{\"1\":{\"684\":1}}],[\"因为隐式调用不会空指针异常\",{\"1\":{\"669\":1}}],[\"因为方法已经固定死了\",{\"1\":{\"654\":1}}],[\"因为方法的实参编译器已经知道该传入什么对象\",{\"1\":{\"653\":1}}],[\"因为方法的返回值编译器已经知道该返回什么对象\",{\"1\":{\"653\":1}}],[\"因为功能接口中有且仅有一个必须要实现的抽象方法\",{\"1\":{\"654\":1}}],[\"因为语法中仅有一套形参列表和方法体\",{\"1\":{\"653\":1}}],[\"因为抽象方法boolean\",{\"1\":{\"652\":1}}],[\"因为抽象类中抽象方法\",{\"1\":{\"595\":1}}],[\"因为静态内部类对象和外部类对象完全独立\",{\"1\":{\"625\":1}}],[\"因为这个autocar我们可能只使用\",{\"1\":{\"936\":1}}],[\"因为这个字符已经和原先字符串的意思大不相同\",{\"1\":{\"355\":1}}],[\"因为这毫无意义\",{\"1\":{\"635\":1}}],[\"因为这时成员内部类对象不存在\",{\"1\":{\"616\":1}}],[\"因为外部类对象已经存在\",{\"1\":{\"615\":1}}],[\"因为父类定义\",{\"1\":{\"939\":1}}],[\"因为父类没这个成员\",{\"1\":{\"588\":1}}],[\"因为父类可能还有父类\",{\"1\":{\"533\":1}}],[\"因为成员\",{\"1\":{\"570\":1}}],[\"因为如果无参创建对象\",{\"1\":{\"570\":1}}],[\"因为即便是jdk中的源码也没有百分百遵守\",{\"1\":{\"568\":1}}],[\"因为没有太多的必要性\",{\"1\":{\"566\":1}}],[\"因为没有权限访问\",{\"1\":{\"562\":1}}],[\"因为没有权限\",{\"1\":{\"538\":1}}],[\"因为没有任何对象可供操作\",{\"1\":{\"412\":1}}],[\"因为一方面\",{\"1\":{\"533\":1}}],[\"因为子类定义\",{\"1\":{\"939\":1}}],[\"因为子类已经匿名了\",{\"1\":{\"648\":1}}],[\"因为子类\",{\"1\":{\"524\":1}}],[\"因为idea会自动生成\",{\"1\":{\"499\":1}}],[\"因为if语法简单不容易出错\",{\"1\":{\"360\":1}}],[\"因为类加载只有一次\",{\"1\":{\"478\":1}}],[\"因为构造器赋值一定最后执行\",{\"1\":{\"468\":1}}],[\"因为是拷贝\",{\"1\":{\"425\":1}}],[\"因为是有序的\",{\"1\":{\"220\":1}}],[\"因为浮点数本身就是一种近似表示方法\",{\"1\":{\"342\":1}}],[\"因为基本数据类型很少\",{\"1\":{\"327\":1}}],[\"因为尾数的位数必然是有限的\",{\"1\":{\"323\":1}}],[\"因为有这个finalize方法后\",{\"1\":{\"689\":1}}],[\"因为有break关键字限制\",{\"1\":{\"359\":1}}],[\"因为有指数运算\",{\"1\":{\"323\":1}}],[\"因为有运维\",{\"1\":{\"125\":1}}],[\"因为只有明确了数据类型\",{\"1\":{\"320\":1}}],[\"因为它所有的方法都有锁\",{\"1\":{\"969\":1}}],[\"因为它会将集合中的所有元素都复制到新的数组中\",{\"1\":{\"954\":1}}],[\"因为它们全部都是object\",{\"1\":{\"938\":1}}],[\"因为它限制比较少\",{\"1\":{\"632\":1}}],[\"因为它能表示规范和标准\",{\"1\":{\"595\":1}}],[\"因为它类型转换的\",{\"1\":{\"389\":1}}],[\"因为它不需要类型转换\",{\"1\":{\"389\":1}}],[\"因为它更加就简洁\",{\"1\":{\"360\":1}}],[\"因为它的值一定不会发生变化\",{\"1\":{\"342\":1}}],[\"因为它太重要了\",{\"1\":{\"319\":1}}],[\"因为它提交数据的时候\",{\"1\":{\"115\":1}}],[\"因为debug模式会显示出对象中的所有的信息\",{\"1\":{\"283\":1}}],[\"因为工作中并不会使用\",{\"1\":{\"283\":1}}],[\"因为写起来非常舒服\",{\"1\":{\"253\":1}}],[\"因为\",{\"1\":{\"248\":1,\"264\":1,\"607\":1,\"944\":1}}],[\"因为自增的策略\",{\"1\":{\"233\":1}}],[\"因为叶子节点之间维护了一个指针\",{\"1\":{\"220\":1}}],[\"因为要在方法体中使用\",{\"1\":{\"654\":1}}],[\"因为要在父节点和子节点之间反复跳转\",{\"1\":{\"220\":2}}],[\"因为要比较所有数据\",{\"1\":{\"220\":2}}],[\"因为要比较所有的数据\",{\"1\":{\"220\":2}}],[\"因为插入一条数据\",{\"1\":{\"220\":1}}],[\"因为sublist只是一个视图\",{\"1\":{\"960\":1}}],[\"因为statement在执行一条sql语句的时候\",{\"1\":{\"204\":1}}],[\"因为sql语句是通过字符串拼接的\",{\"1\":{\"204\":1}}],[\"因为每一层查询会生成临时表\",{\"1\":{\"184\":1}}],[\"因为表都是在库里面的\",{\"1\":{\"152\":1}}],[\"因为文件系统中\",{\"1\":{\"149\":1}}],[\"因为按上下键\",{\"1\":{\"147\":1}}],[\"因为许可证的灵活\",{\"1\":{\"143\":1}}],[\"因为修改配置文件比较危险\",{\"1\":{\"137\":1}}],[\"因此我们可以方便地按照时间顺序遍历元素\",{\"1\":{\"1026\":1}}],[\"因此我们可以选择对数据进行哈希校验\",{\"1\":{\"188\":1}}],[\"因此它可以同时用作栈和队列\",{\"1\":{\"973\":1}}],[\"因此非常适用于需要频繁添加或删除元素的场景\",{\"1\":{\"961\":1}}],[\"因此不需要try\",{\"1\":{\"868\":1}}],[\"因此常常需要在内存和外设之间交换数据\",{\"1\":{\"780\":1}}],[\"因此该异常需要我们自己来定义\",{\"1\":{\"764\":1}}],[\"因此可以通过数组下标进行循环遍历\",{\"1\":{\"976\":1}}],[\"因此可以方便地进行双向遍历\",{\"1\":{\"965\":1}}],[\"因此可以高效地进行插入和删除操作\",{\"1\":{\"965\":1}}],[\"因此可以直接提供查询结果\",{\"1\":{\"231\":1}}],[\"因此可以借助于\",{\"1\":{\"54\":1}}],[\"因此需要根据实际情况定期进行索引优化和维护\",{\"1\":{\"218\":1}}],[\"因此很多时候\",{\"1\":{\"211\":1}}],[\"因此很难处理日益增长的用户数量\",{\"1\":{\"143\":1}}],[\"因此这个sql语句将返回users表中的所有行\",{\"1\":{\"204\":1}}],[\"因此在执行这些操作之前\",{\"1\":{\"188\":1}}],[\"因此在使用子查询时需要注意查询性能的影响\",{\"1\":{\"184\":1}}],[\"因此\",{\"1\":{\"51\":1,\"218\":1,\"1077\":1}}],[\"uer123\",{\"1\":{\"1132\":2}}],[\"uw\",{\"1\":{\"1132\":1}}],[\"ua\",{\"1\":{\"1120\":3,\"1138\":3,\"1140\":3,\"1150\":3}}],[\"uu\",{\"1\":{\"1028\":1}}],[\"u0000\",{\"1\":{\"356\":1,\"407\":1}}],[\"u\",{\"1\":{\"277\":6,\"420\":1}}],[\"udp\",{\"1\":{\"892\":3,\"894\":2,\"895\":4}}],[\"udp协议\",{\"1\":{\"885\":1}}],[\"ud\",{\"1\":{\"277\":8}}],[\"us\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"using\",{\"1\":{\"232\":1,\"233\":1,\"497\":1,\"1120\":1}}],[\"usfca\",{\"1\":{\"220\":1}}],[\"useservice\",{\"1\":{\"1107\":1}}],[\"usessl=false<\",{\"1\":{\"215\":1}}],[\"usessl=false\",{\"1\":{\"192\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"234\":1,\"244\":1,\"245\":1}}],[\"useactualparamname\",{\"1\":{\"246\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"274\":2}}],[\"usegeneratedkeys\",{\"0\":{\"274\":1},\"1\":{\"246\":1,\"274\":1}}],[\"usecolumnlabel\",{\"1\":{\"246\":1}}],[\"used\",{\"1\":{\"201\":1}}],[\"use\",{\"1\":{\"152\":2,\"157\":1,\"187\":1,\"212\":1,\"905\":1}}],[\"user对象之类\",{\"1\":{\"1152\":1}}],[\"userhhh\",{\"1\":{\"1132\":2}}],[\"userlevel\",{\"1\":{\"1132\":20}}],[\"userlistvo\",{\"1\":{\"1132\":9}}],[\"userlist\",{\"1\":{\"234\":2,\"1132\":3}}],[\"user456\",{\"1\":{\"1132\":2}}],[\"user4<integer>\",{\"1\":{\"939\":1}}],[\"user4<int>\",{\"1\":{\"939\":1}}],[\"user4<>\",{\"1\":{\"939\":2}}],[\"user<double>\",{\"1\":{\"944\":1}}],[\"user<\",{\"1\":{\"944\":2}}],[\"user<object>\",{\"1\":{\"944\":1}}],[\"user<t>\",{\"1\":{\"944\":1}}],[\"user<cat>\",{\"1\":{\"944\":1}}],[\"user<animal>\",{\"1\":{\"944\":1}}],[\"user<>\",{\"1\":{\"944\":3}}],[\"user<integer>\",{\"1\":{\"944\":5}}],[\"user<number>\",{\"1\":{\"944\":3}}],[\"user3\",{\"1\":{\"939\":2,\"1108\":1}}],[\"userid\",{\"1\":{\"275\":1,\"276\":1,\"277\":1,\"1152\":4}}],[\"userdetailmapper\",{\"1\":{\"276\":3}}],[\"userdetail\",{\"1\":{\"275\":3,\"276\":3,\"277\":2}}],[\"user2<>\",{\"1\":{\"939\":2}}],[\"user2<string>\",{\"1\":{\"939\":1}}],[\"user2<string\",{\"1\":{\"939\":1}}],[\"user2<类型>\",{\"1\":{\"939\":2}}],[\"user2\",{\"1\":{\"256\":2,\"924\":1,\"939\":3,\"944\":3}}],[\"usermapper接口\",{\"1\":{\"277\":1}}],[\"usermapper\",{\"1\":{\"234\":5,\"235\":4,\"237\":2,\"238\":4,\"239\":4,\"240\":4,\"244\":1,\"249\":2,\"256\":4,\"257\":1,\"276\":2,\"277\":1,\"1131\":4,\"1132\":4,\"1159\":8}}],[\"user=root\",{\"1\":{\"215\":1}}],[\"userservlet\",{\"1\":{\"1078\":1,\"1130\":2,\"1131\":1,\"1132\":3}}],[\"userserviceimpl>\",{\"1\":{\"1107\":1}}],[\"userserviceimpl\",{\"1\":{\"1019\":1,\"1107\":9,\"1109\":4}}],[\"userservice\",{\"1\":{\"1019\":1,\"1107\":3}}],[\"users\",{\"1\":{\"187\":1,\"204\":3,\"260\":2,\"276\":2,\"277\":2}}],[\"user11\",{\"1\":{\"939\":2}}],[\"user1<integer>\",{\"1\":{\"939\":2}}],[\"user1<>\",{\"1\":{\"939\":1}}],[\"user1<string>\",{\"1\":{\"939\":1}}],[\"user1\",{\"1\":{\"136\":4,\"139\":1,\"256\":2,\"939\":7,\"944\":2}}],[\"user\",{\"1\":{\"116\":1,\"138\":1,\"149\":2,\"180\":16,\"181\":2,\"182\":9,\"183\":10,\"204\":5,\"205\":1,\"206\":1,\"207\":2,\"215\":1,\"220\":6,\"232\":1,\"234\":8,\"235\":3,\"237\":7,\"238\":1,\"239\":3,\"240\":7,\"247\":3,\"249\":2,\"252\":5,\"253\":1,\"254\":3,\"255\":2,\"256\":9,\"257\":3,\"258\":1,\"260\":2,\"275\":17,\"276\":7,\"277\":10,\"283\":8,\"315\":1,\"767\":2,\"918\":9,\"924\":5,\"944\":10,\"1009\":3,\"1078\":2,\"1104\":1,\"1110\":1,\"1112\":3,\"1113\":1,\"1118\":5,\"1120\":2,\"1130\":7,\"1131\":11,\"1132\":9,\"1138\":2,\"1140\":2,\"1141\":1,\"1150\":2,\"1159\":3,\"1195\":3}}],[\"usernamefield\",{\"1\":{\"1108\":3}}],[\"username=\",{\"1\":{\"1142\":1}}],[\"username=lilei\",{\"1\":{\"1142\":2}}],[\"username=zhangsan\",{\"1\":{\"1026\":1,\"1111\":4,\"1113\":2,\"1116\":1}}],[\"username=root\",{\"1\":{\"214\":1,\"216\":1,\"217\":1,\"245\":1,\"1096\":1,\"1118\":1}}],[\"username123\",{\"1\":{\"315\":1}}],[\"username\",{\"1\":{\"115\":1,\"192\":2,\"199\":1,\"203\":4,\"204\":10,\"213\":5,\"234\":3,\"240\":1,\"244\":1,\"248\":6,\"283\":2,\"315\":2,\"316\":1,\"517\":1,\"924\":4,\"1094\":1,\"1095\":4,\"1096\":1,\"1097\":1,\"1104\":2,\"1108\":2,\"1110\":1,\"1116\":3,\"1118\":2,\"1119\":6,\"1120\":2,\"1131\":3,\"1132\":20,\"1142\":5,\"1145\":2,\"1147\":1,\"1159\":10}}],[\"unknownhostexception\",{\"1\":{\"893\":2,\"895\":2}}],[\"unlock\",{\"1\":{\"863\":1,\"864\":2}}],[\"unloading\",{\"1\":{\"497\":1}}],[\"unserialize\",{\"1\":{\"824\":2}}],[\"unsupportedencodingexception\",{\"1\":{\"801\":2,\"1131\":1}}],[\"unchecked\",{\"1\":{\"747\":1}}],[\"uncommitted\",{\"1\":{\"211\":1,\"212\":1}}],[\"unboxing\",{\"1\":{\"703\":1}}],[\"unnecessary\",{\"1\":{\"703\":2}}],[\"unpooled\",{\"1\":{\"248\":1}}],[\"unix\",{\"1\":{\"724\":1,\"768\":1}}],[\"unicode\",{\"1\":{\"315\":5,\"799\":1}}],[\"union要求返回的列数目要一致\",{\"1\":{\"185\":1}}],[\"union\",{\"1\":{\"185\":2}}],[\"unique和primary\",{\"1\":{\"170\":1}}],[\"unique\",{\"1\":{\"169\":1,\"170\":3}}],[\"unque\",{\"1\":{\"169\":1}}],[\"uri的部分\",{\"1\":{\"1132\":1}}],[\"uriutil\",{\"1\":{\"1131\":1}}],[\"uri\",{\"1\":{\"1102\":1,\"1111\":2}}],[\"uroot\",{\"1\":{\"147\":2,\"187\":3,\"212\":2}}],[\"urlencoder\",{\"1\":{\"1148\":1}}],[\"urlencoded\",{\"1\":{\"1113\":1}}],[\"urldecoder\",{\"1\":{\"1148\":1}}],[\"url编码\",{\"1\":{\"1137\":1}}],[\"urlpatterns\",{\"1\":{\"1086\":1}}],[\"url=\",{\"1\":{\"249\":1,\"1126\":1,\"1159\":4}}],[\"url=jdbc\",{\"1\":{\"214\":1,\"216\":1,\"245\":1}}],[\"url=http\",{\"1\":{\"121\":2}}],[\"url\",{\"1\":{\"138\":1,\"192\":3,\"199\":1,\"203\":4,\"213\":4,\"234\":3,\"244\":1,\"248\":6,\"918\":2,\"1097\":1,\"1111\":2}}],[\"url长度有限制\",{\"1\":{\"115\":1}}],[\"utils\",{\"1\":{\"893\":1,\"894\":2,\"895\":2}}],[\"util包下提供了\",{\"1\":{\"721\":1}}],[\"util\",{\"1\":{\"127\":4,\"139\":1,\"352\":1,\"678\":1,\"679\":1,\"730\":1,\"738\":2,\"739\":1,\"740\":1,\"741\":2,\"764\":1,\"777\":1,\"801\":1,\"825\":4,\"832\":1,\"839\":1,\"844\":1,\"859\":1,\"860\":1,\"864\":2,\"867\":2,\"880\":3,\"881\":6,\"884\":4,\"894\":2,\"895\":1,\"903\":3,\"918\":3,\"970\":1}}],[\"utf8\",{\"1\":{\"151\":2,\"233\":1}}],[\"utf8mb4才是真正的utf\",{\"1\":{\"149\":1}}],[\"utf8mb4\",{\"1\":{\"149\":11,\"156\":2,\"157\":3}}],[\"utf\",{\"1\":{\"115\":1,\"127\":2,\"136\":1,\"139\":1,\"149\":1,\"234\":2,\"244\":1,\"318\":1,\"799\":4,\"800\":1,\"1083\":1,\"1097\":1,\"1119\":1,\"1131\":2,\"1148\":4}}],[\"upload\",{\"1\":{\"1120\":3}}],[\"upperfirst\",{\"1\":{\"1118\":2}}],[\"uppercount++\",{\"1\":{\"737\":1}}],[\"uppercount\",{\"1\":{\"737\":2}}],[\"upgrade\",{\"1\":{\"1112\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"upan\",{\"1\":{\"204\":1}}],[\"update操作数据的主键\",{\"1\":{\"274\":1}}],[\"updatebyphone\",{\"1\":{\"268\":1,\"269\":3}}],[\"updatephone\",{\"1\":{\"268\":2}}],[\"updatetime\",{\"1\":{\"259\":1,\"1132\":20}}],[\"update>\",{\"1\":{\"239\":1,\"268\":1,\"269\":1}}],[\"updateuser\",{\"1\":{\"239\":2}}],[\"updatesql\",{\"1\":{\"201\":1}}],[\"update\",{\"1\":{\"160\":3,\"162\":2,\"171\":4,\"196\":1,\"209\":6,\"212\":1,\"233\":2,\"239\":1,\"268\":1,\"269\":1,\"420\":1}}],[\"up\",{\"1\":{\"21\":1}}],[\"语言\",{\"1\":{\"303\":1}}],[\"语言编写\",{\"1\":{\"144\":1}}],[\"语句都是可以单独执行代码\",{\"1\":{\"342\":1}}],[\"语句是一个行为\",{\"1\":{\"342\":1}}],[\"语句\",{\"1\":{\"342\":2}}],[\"语句来实现查询的方式\",{\"1\":{\"184\":1}}],[\"语句中嵌套另一个\",{\"1\":{\"184\":1}}],[\"语数外\",{\"1\":{\"162\":1}}],[\"语数外三科\",{\"1\":{\"162\":1}}],[\"语数外总分\",{\"1\":{\"162\":2}}],[\"语文分按照\",{\"1\":{\"997\":1}}],[\"语文最小成绩大于等于60\",{\"1\":{\"168\":1}}],[\"语文最少分大于等于70\",{\"1\":{\"168\":1}}],[\"语文大于等于60的\",{\"1\":{\"168\":1}}],[\"语文和数学\",{\"1\":{\"162\":1}}],[\"语文\",{\"1\":{\"162\":1}}],[\"语义不同\",{\"1\":{\"115\":1}}],[\"语法难度不低\",{\"1\":{\"657\":1}}],[\"语法很复杂\",{\"1\":{\"643\":1}}],[\"语法就直接new对象就可以了\",{\"1\":{\"627\":1,\"628\":1}}],[\"语法直接创建了一个对象\",{\"1\":{\"608\":1}}],[\"语法上有点像强转\",{\"1\":{\"653\":1}}],[\"语法上\",{\"1\":{\"569\":2}}],[\"语法上仍然允许该数据类型的变量作为实参\",{\"1\":{\"384\":1}}],[\"语法定义了一个类\",{\"1\":{\"608\":1}}],[\"语法定义\",{\"0\":{\"486\":1,\"493\":1,\"520\":1}}],[\"语法中的各个部分\",{\"1\":{\"417\":1}}],[\"语法格式就是\",{\"1\":{\"397\":1,\"398\":1}}],[\"语法要求\",{\"0\":{\"388\":1}}],[\"语法如下\",{\"1\":{\"376\":1,\"436\":2,\"440\":1,\"717\":1}}],[\"语法允许\",{\"1\":{\"362\":1}}],[\"语法是\",{\"1\":{\"341\":1,\"402\":1,\"629\":1,\"633\":1}}],[\"语法\",{\"0\":{\"75\":1,\"561\":1,\"647\":1,\"717\":1},\"1\":{\"56\":1,\"359\":1,\"362\":1,\"363\":1,\"364\":1,\"422\":1,\"437\":1,\"438\":1,\"449\":1,\"453\":2,\"466\":1,\"499\":1,\"541\":1,\"543\":1,\"566\":1,\"567\":1,\"570\":1,\"571\":1,\"572\":1,\"584\":1,\"586\":1,\"609\":1,\"616\":1,\"653\":1,\"752\":1,\"754\":1,\"760\":1,\"789\":1,\"924\":1,\"1090\":3}}],[\"语法进行了扩展\",{\"1\":{\"55\":1}}],[\"语法扩展\",{\"1\":{\"54\":1}}],[\"语法来分布高亮特定行\",{\"1\":{\"34\":1}}],[\"语法的各种标记\",{\"1\":{\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"gsonformatvo\",{\"1\":{\"1132\":1}}],[\"gsonformat\",{\"1\":{\"1132\":1}}],[\"givemethodvalue\",{\"1\":{\"1118\":2}}],[\"givefieldvalue\",{\"1\":{\"1118\":2}}],[\"gif\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"git可以右键\",{\"1\":{\"1205\":1}}],[\"git可以去记录这些文件产生的变化\",{\"1\":{\"1183\":1}}],[\"git分支是一种非常有用的功能\",{\"1\":{\"1204\":1}}],[\"git分支是git版本控制系统中的一种重要概念\",{\"1\":{\"1204\":1}}],[\"git默认创建一个主分支\",{\"1\":{\"1204\":1}}],[\"gitignore文件里面\",{\"1\":{\"1203\":1}}],[\"gitignore\",{\"1\":{\"1203\":2}}],[\"git在做版本控制的时候\",{\"1\":{\"1203\":1}}],[\"git给我们提供了一些可以回退的措施\",{\"1\":{\"1202\":1}}],[\"git没有办法帮我们处理\",{\"1\":{\"1201\":1}}],[\"git需要我们输入一个信息\",{\"1\":{\"1201\":1}}],[\"git会保存最新的代码\",{\"1\":{\"1201\":1}}],[\"gitconfig\",{\"1\":{\"1195\":1}}],[\"git文件夹\",{\"1\":{\"1192\":1}}],[\"git核心流程\",{\"0\":{\"1188\":1}}],[\"git学了\",{\"1\":{\"1183\":1}}],[\"git和svn的对比\",{\"1\":{\"1183\":1}}],[\"git的使用\",{\"0\":{\"1187\":1}}],[\"git的使用有点像一个\",{\"1\":{\"1183\":1}}],[\"git的特点\",{\"1\":{\"1183\":1}}],[\"git的分支是什么\",{\"1\":{\"1182\":1}}],[\"git是什么\",{\"1\":{\"1182\":1}}],[\"git\",{\"0\":{\"1182\":1,\"1189\":1,\"1213\":1},\"1\":{\"1183\":3,\"1192\":6,\"1194\":3,\"1195\":5,\"1201\":3,\"1202\":6,\"1204\":8}}],[\"gitee\",{\"1\":{\"212\":2,\"1192\":3}}],[\"github\",{\"1\":{\"144\":1}}],[\"guangdong\",{\"1\":{\"997\":1}}],[\"gun\",{\"1\":{\"821\":1,\"825\":2}}],[\"gui\",{\"1\":{\"212\":2,\"303\":1}}],[\"gb\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"gb18030\",{\"1\":{\"799\":1}}],[\"gb2312\",{\"1\":{\"799\":1}}],[\"gbk的取代版本\",{\"1\":{\"799\":1}}],[\"gbk\",{\"1\":{\"139\":1,\"799\":2,\"800\":1,\"801\":2,\"918\":1}}],[\"gc垃圾回收线程\",{\"1\":{\"842\":1}}],[\"gc\",{\"0\":{\"925\":1},\"1\":{\"690\":1,\"928\":2,\"934\":1}}],[\"gc自动垃圾回收的缺点\",{\"1\":{\"689\":1}}],[\"gasolinecar\",{\"1\":{\"599\":1}}],[\"galen\",{\"1\":{\"469\":3}}],[\"garbage\",{\"1\":{\"407\":1}}],[\"go\",{\"1\":{\"947\":1}}],[\"goto\",{\"1\":{\"312\":1,\"313\":1}}],[\"googlepay\",{\"1\":{\"721\":1}}],[\"google\",{\"1\":{\"442\":1}}],[\"google和oracle公司有一定的纠纷\",{\"1\":{\"303\":1}}],[\"goodbyeservlet\",{\"1\":{\"1096\":1}}],[\"goodsname\",{\"1\":{\"283\":1}}],[\"goods\",{\"1\":{\"283\":6}}],[\"goodslist\",{\"1\":{\"283\":2}}],[\"good\",{\"1\":{\"144\":1,\"978\":2}}],[\"g\",{\"1\":{\"283\":4}}],[\"gte\",{\"1\":{\"264\":1,\"265\":1}}],[\"gt\",{\"1\":{\"264\":1,\"265\":4,\"266\":1}}],[\"gg\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"1028\":1}}],[\"global\",{\"1\":{\"212\":2,\"1195\":2}}],[\"gecko\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"genericservlet和httpservlet\",{\"0\":{\"1085\":1}}],[\"genericservlet\",{\"1\":{\"1078\":2,\"1085\":3}}],[\"genericsextends2\",{\"1\":{\"944\":2}}],[\"generatestudents\",{\"1\":{\"997\":1}}],[\"generational\",{\"1\":{\"933\":1}}],[\"general\",{\"1\":{\"149\":4}}],[\"gender=male\",{\"1\":{\"1138\":1}}],[\"gender=\",{\"1\":{\"922\":1}}],[\"gender\",{\"1\":{\"232\":1,\"922\":5,\"1132\":20}}],[\"getvalue\",{\"1\":{\"1143\":2,\"1148\":1}}],[\"getusername\",{\"1\":{\"1131\":1}}],[\"getupdatecount\",{\"1\":{\"201\":2}}],[\"getquerystring\",{\"1\":{\"1111\":1,\"1116\":2}}],[\"getwriter\",{\"1\":{\"1078\":1,\"1124\":4,\"1126\":1,\"1127\":1,\"1130\":4,\"1131\":2,\"1148\":1,\"1152\":1,\"1159\":5}}],[\"getfirst\",{\"1\":{\"968\":1,\"975\":2}}],[\"getfield\",{\"1\":{\"920\":3}}],[\"getfields\",{\"1\":{\"920\":3}}],[\"getheight\",{\"1\":{\"1028\":2,\"1029\":2,\"1038\":3,\"1040\":3,\"1041\":6,\"1043\":1,\"1044\":1,\"1046\":1}}],[\"getheaders\",{\"1\":{\"128\":1}}],[\"getheadernames\",{\"1\":{\"127\":2,\"1112\":3}}],[\"getheader\",{\"1\":{\"127\":3,\"128\":8,\"1112\":6,\"1143\":1}}],[\"getholderautocar\",{\"1\":{\"936\":2}}],[\"getoffset\",{\"1\":{\"890\":1,\"892\":2,\"893\":1}}],[\"getoutputstream\",{\"1\":{\"127\":1,\"899\":1,\"902\":2,\"903\":1,\"904\":1,\"905\":2,\"1124\":2,\"1128\":1}}],[\"getlimit\",{\"1\":{\"1132\":1}}],[\"getlocalport\",{\"1\":{\"1111\":2,\"1115\":2}}],[\"getlocaladdr\",{\"1\":{\"1111\":2,\"1115\":2}}],[\"getlast\",{\"1\":{\"968\":1,\"975\":2}}],[\"getlabel\",{\"1\":{\"720\":1}}],[\"getlength\",{\"1\":{\"890\":1,\"892\":2,\"893\":1}}],[\"getpage\",{\"1\":{\"1132\":1}}],[\"getpart\",{\"1\":{\"1120\":3,\"1132\":1}}],[\"getparameter相关的方法\",{\"1\":{\"1132\":1}}],[\"getparametervalues\",{\"1\":{\"1117\":2}}],[\"getparameter\",{\"1\":{\"1117\":2,\"1118\":2,\"1119\":1,\"1131\":2,\"1132\":12,\"1142\":1,\"1159\":2}}],[\"getparametermap\",{\"1\":{\"1117\":2,\"1132\":3}}],[\"getparameternames\",{\"1\":{\"1117\":2}}],[\"getparameterxxx这样的一些方法\",{\"1\":{\"1117\":1}}],[\"getparametertypes\",{\"1\":{\"922\":1}}],[\"getparent\",{\"1\":{\"912\":2}}],[\"getpath\",{\"1\":{\"775\":1}}],[\"getport\",{\"1\":{\"903\":1}}],[\"getpriority\",{\"1\":{\"838\":3}}],[\"getproperty\",{\"1\":{\"203\":4,\"213\":4,\"767\":1,\"912\":2,\"918\":12,\"1026\":1}}],[\"getprotocol\",{\"1\":{\"127\":1,\"128\":3,\"1111\":2}}],[\"getatrribute\",{\"1\":{\"1159\":1}}],[\"getattribute\",{\"1\":{\"1121\":1,\"1131\":3,\"1132\":1,\"1152\":3,\"1159\":3}}],[\"getaddress\",{\"1\":{\"1028\":3,\"1029\":1,\"1036\":1,\"1037\":2,\"1040\":1,\"1043\":2,\"1044\":2,\"1045\":1,\"1049\":1,\"1052\":5}}],[\"getannotation\",{\"1\":{\"924\":3}}],[\"getabsolutepath\",{\"1\":{\"775\":1,\"776\":2}}],[\"getage\",{\"1\":{\"657\":1,\"740\":7,\"741\":5,\"1028\":2,\"1039\":4,\"1047\":2,\"1048\":2,\"1050\":5,\"1052\":1,\"1053\":1}}],[\"gettype\",{\"1\":{\"1118\":3}}],[\"gett\",{\"1\":{\"943\":3}}],[\"gettime\",{\"1\":{\"724\":1}}],[\"getteacher\",{\"1\":{\"606\":1}}],[\"getter方法的名字比较特殊\",{\"1\":{\"518\":1}}],[\"getter\",{\"1\":{\"262\":3,\"516\":1,\"518\":1,\"944\":1,\"1028\":1}}],[\"getcookies\",{\"1\":{\"1143\":2,\"1148\":1}}],[\"getcontenttype\",{\"1\":{\"1120\":2}}],[\"getcontextpath\",{\"1\":{\"1111\":2,\"1159\":1}}],[\"getconstructor\",{\"1\":{\"919\":4}}],[\"getconstructors\",{\"1\":{\"919\":3}}],[\"getconnection\",{\"1\":{\"192\":1,\"199\":1,\"203\":2,\"204\":2,\"209\":1,\"213\":5,\"214\":1,\"216\":1,\"217\":1,\"234\":1,\"237\":1,\"243\":1}}],[\"getcode\",{\"1\":{\"720\":1}}],[\"getclassloader\",{\"1\":{\"922\":1,\"923\":1,\"1107\":1,\"1109\":2,\"1124\":1,\"1128\":1}}],[\"getclass方法\",{\"0\":{\"659\":1}}],[\"getclass\",{\"1\":{\"658\":2,\"660\":1,\"663\":9,\"667\":1,\"674\":1,\"698\":2,\"857\":1,\"916\":3,\"954\":2,\"1107\":2,\"1109\":2,\"1124\":1,\"1128\":1}}],[\"getdeclaredmethod\",{\"1\":{\"921\":3,\"922\":1,\"923\":1,\"924\":1,\"1109\":5,\"1118\":1}}],[\"getdeclaredmethods\",{\"1\":{\"921\":3}}],[\"getdeclaredfield\",{\"1\":{\"920\":3,\"922\":1,\"924\":2,\"1108\":1,\"1118\":2}}],[\"getdeclaredfields\",{\"1\":{\"920\":3}}],[\"getdeclaredconstructor\",{\"1\":{\"919\":3,\"920\":1,\"921\":1,\"924\":1,\"1108\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"919\":3}}],[\"getdata\",{\"1\":{\"890\":1,\"892\":2,\"893\":1,\"923\":2,\"944\":2}}],[\"getdate\",{\"1\":{\"202\":1}}],[\"getdog\",{\"1\":{\"655\":6}}],[\"getid\",{\"1\":{\"594\":2,\"715\":1,\"717\":1,\"720\":5}}],[\"getinitparameter\",{\"1\":{\"1095\":2}}],[\"getinetaddress\",{\"1\":{\"903\":1}}],[\"getinstance\",{\"1\":{\"884\":2,\"924\":1}}],[\"getinterfaces\",{\"1\":{\"922\":1}}],[\"getint\",{\"1\":{\"197\":2,\"202\":1,\"214\":1,\"234\":1}}],[\"getinputstream\",{\"1\":{\"127\":1,\"899\":1,\"902\":2,\"903\":1,\"904\":1,\"905\":2,\"1113\":2,\"1116\":2,\"1120\":3}}],[\"getname\",{\"1\":{\"594\":2,\"667\":1,\"715\":1,\"717\":1,\"740\":1,\"741\":1,\"775\":1,\"776\":2,\"777\":3,\"833\":5,\"838\":1,\"841\":1,\"842\":2,\"844\":1,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"864\":1,\"867\":4,\"872\":2,\"880\":1,\"903\":1,\"922\":1,\"944\":1,\"1028\":2,\"1040\":3,\"1052\":2,\"1053\":1,\"1120\":2,\"1143\":2,\"1148\":1}}],[\"getnum\",{\"1\":{\"564\":3}}],[\"getxxx\",{\"1\":{\"516\":1}}],[\"get方法获取计算的结果\",{\"1\":{\"881\":1}}],[\"get方法\",{\"1\":{\"516\":1}}],[\"getmonecy\",{\"1\":{\"956\":1}}],[\"getmodifiers\",{\"1\":{\"922\":1}}],[\"getmessage\",{\"1\":{\"753\":1}}],[\"getmethods\",{\"1\":{\"921\":3}}],[\"getmethodname\",{\"1\":{\"128\":1}}],[\"getmethod\",{\"1\":{\"127\":2,\"128\":5,\"921\":3,\"1085\":1,\"1111\":2,\"1116\":1}}],[\"getmin\",{\"1\":{\"418\":1}}],[\"getmax\",{\"1\":{\"418\":1}}],[\"getmapper\",{\"1\":{\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":1,\"285\":5,\"287\":2,\"1131\":1,\"1132\":2,\"1159\":2}}],[\"getsubmittedfilename\",{\"1\":{\"1120\":3}}],[\"getsuperclass\",{\"1\":{\"922\":1}}],[\"getsize\",{\"1\":{\"1120\":2}}],[\"getsimplename\",{\"1\":{\"922\":4}}],[\"getsystemresourceasstream\",{\"1\":{\"918\":1}}],[\"getsystemresource\",{\"1\":{\"918\":1}}],[\"getsystemclassloader\",{\"1\":{\"912\":1,\"916\":1}}],[\"getsocketaddress\",{\"1\":{\"894\":2,\"895\":1}}],[\"getsession\",{\"1\":{\"1151\":2,\"1152\":2,\"1153\":1,\"1159\":3}}],[\"getservletcontext\",{\"1\":{\"1096\":4,\"1120\":1,\"1131\":5,\"1132\":1,\"1159\":2}}],[\"getservletconfig\",{\"1\":{\"1095\":2,\"1096\":1}}],[\"getsendpacket\",{\"1\":{\"893\":1,\"894\":2,\"895\":1}}],[\"getsetnamedemo\",{\"1\":{\"833\":1}}],[\"getscore\",{\"1\":{\"657\":1,\"740\":3,\"741\":5}}],[\"getsalary\",{\"1\":{\"594\":2}}],[\"getstatus\",{\"1\":{\"956\":1}}],[\"getstudentinfo\",{\"1\":{\"1019\":1}}],[\"getstudent\",{\"1\":{\"606\":3}}],[\"getstudentname\",{\"1\":{\"316\":1}}],[\"getstring\",{\"1\":{\"197\":2,\"202\":1,\"214\":1,\"234\":2}}],[\"getsqlsession\",{\"1\":{\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"285\":4,\"287\":2}}],[\"getbyname\",{\"1\":{\"892\":1,\"893\":1}}],[\"getbytes\",{\"1\":{\"127\":2,\"738\":3,\"788\":1,\"789\":7,\"790\":2,\"801\":4,\"818\":6,\"892\":1,\"893\":1,\"902\":1,\"903\":1,\"905\":1}}],[\"getbigdecimal\",{\"1\":{\"214\":1}}],[\"getremoteport\",{\"1\":{\"1115\":2}}],[\"getremoteaddr\",{\"1\":{\"1115\":2}}],[\"getreader\",{\"1\":{\"1113\":2,\"1116\":2,\"1132\":1}}],[\"getrealpath\",{\"1\":{\"1097\":2,\"1120\":1}}],[\"getreturntype\",{\"1\":{\"922\":1}}],[\"getreceivepacket\",{\"1\":{\"893\":1,\"894\":2,\"895\":1}}],[\"getresourceasstream\",{\"1\":{\"234\":1,\"244\":1,\"1107\":1,\"1109\":2,\"1110\":1,\"1124\":1,\"1128\":1,\"1131\":1}}],[\"getresourcename\",{\"1\":{\"128\":2}}],[\"getresultset\",{\"1\":{\"201\":2}}],[\"getrequesturl\",{\"1\":{\"1111\":2}}],[\"getrequesturi\",{\"1\":{\"127\":2,\"1111\":2,\"1130\":1}}],[\"getrequestheader\",{\"1\":{\"128\":1}}],[\"get的语义是用来进行查询\",{\"1\":{\"115\":1}}],[\"get和post区别\",{\"1\":{\"115\":1}}],[\"get请求\",{\"1\":{\"115\":1}}],[\"get请求的参数放在url上面\",{\"1\":{\"115\":1}}],[\"get请求是获取数据\",{\"1\":{\"115\":1}}],[\"get\",{\"1\":{\"115\":7,\"124\":1,\"127\":3,\"144\":1,\"213\":1,\"514\":1,\"880\":6,\"881\":4,\"920\":3,\"936\":15,\"941\":1,\"955\":1,\"956\":1,\"958\":1,\"961\":1,\"965\":1,\"997\":2,\"1018\":1,\"1023\":1,\"1026\":1,\"1046\":4,\"1047\":1,\"1050\":1,\"1085\":1,\"1107\":1,\"1109\":10,\"1111\":2,\"1112\":1,\"1116\":2,\"1117\":1,\"1118\":3,\"1119\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1,\"1152\":1,\"1159\":3}}],[\"gzip\",{\"1\":{\"121\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1113\":1,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"gmt时间\",{\"1\":{\"722\":1}}],[\"gmt请求时间gmt\",{\"1\":{\"116\":1}}],[\"gmt\",{\"1\":{\"116\":1,\"121\":2,\"775\":1,\"1105\":2,\"1121\":2,\"1122\":1,\"1123\":1,\"1132\":1,\"1142\":1,\"1150\":1}}],[\"grade\",{\"1\":{\"1019\":1}}],[\"grandson对象有三个引用都可以指向它\",{\"1\":{\"585\":1}}],[\"grandson\",{\"1\":{\"585\":5,\"939\":1}}],[\"groupid>\",{\"1\":{\"234\":2,\"244\":3,\"262\":1,\"1079\":1}}],[\"group\",{\"0\":{\"167\":1},\"1\":{\"167\":24,\"168\":15}}],[\"grow\",{\"1\":{\"23\":1}}],[\"green\",{\"1\":{\"23\":2}}],[\"其值为image\",{\"1\":{\"1120\":1}}],[\"其值不会发生改变的量\",{\"1\":{\"328\":1}}],[\"其键小于\",{\"1\":{\"1026\":1}}],[\"其键值严格小于\",{\"1\":{\"1026\":1}}],[\"其键值的范围从\",{\"1\":{\"1026\":1}}],[\"其键大于\",{\"1\":{\"1026\":1}}],[\"其键大于等于\",{\"1\":{\"1026\":1}}],[\"其键的范围从\",{\"1\":{\"1026\":1}}],[\"其元素大于\",{\"1\":{\"993\":1}}],[\"其元素大于等于\",{\"1\":{\"993\":1}}],[\"其元素从\",{\"1\":{\"993\":1}}],[\"其元素范围从\",{\"1\":{\"993\":1}}],[\"其底层\",{\"1\":{\"984\":3}}],[\"其区别不过是虚拟机栈为虚拟机执行java\",{\"1\":{\"925\":1}}],[\"其上的一个进程\",{\"1\":{\"885\":1}}],[\"其对象a1\",{\"1\":{\"740\":1}}],[\"其对象数组\",{\"1\":{\"740\":1}}],[\"其语法是\",{\"1\":{\"520\":1}}],[\"其比较的结论如下\",{\"1\":{\"477\":1}}],[\"其原因在于\",{\"1\":{\"474\":1}}],[\"其它对象即方法实参传入的对象\",{\"1\":{\"672\":1}}],[\"其它对象创建完毕后的赋值方式都不行\",{\"1\":{\"570\":1}}],[\"其它类的私有成员\",{\"1\":{\"607\":1}}],[\"其它常量随意\",{\"1\":{\"568\":1}}],[\"其它方式创建对象都不可以访问\",{\"1\":{\"536\":1}}],[\"其它场景这里先不考虑\",{\"1\":{\"489\":1}}],[\"其它诸如形参列表\",{\"1\":{\"450\":1}}],[\"其它任何方式都是错误的\",{\"1\":{\"434\":1}}],[\"其访问语法是\",{\"1\":{\"400\":1}}],[\"其作用范围仅在for循环内部\",{\"1\":{\"362\":1}}],[\"其结构都由五部分部分组成\",{\"1\":{\"361\":1}}],[\"其在命名中也有特殊含义\",{\"1\":{\"316\":1}}],[\"其在命名中有特殊含义\",{\"1\":{\"316\":1}}],[\"其次它的方法体是空的\",{\"1\":{\"687\":1}}],[\"其次\",{\"1\":{\"232\":1,\"490\":1,\"1197\":1}}],[\"其最新版本是\",{\"1\":{\"144\":1}}],[\"其实会提供一个响应头set\",{\"1\":{\"1150\":1}}],[\"其实产生一组新的request和response对象\",{\"1\":{\"1110\":1}}],[\"其实访问的这个指定的这个路径下的资源\",{\"1\":{\"1083\":1}}],[\"其实可以存无限的数据\",{\"1\":{\"1006\":1}}],[\"其实迭代器的思路很简单\",{\"1\":{\"955\":1}}],[\"其实不难知道该方法的作用\",{\"1\":{\"661\":1}}],[\"其实不太方便\",{\"1\":{\"220\":1}}],[\"其实已经很明显的告诉了你它的作用\",{\"1\":{\"693\":1}}],[\"其实已经描述了接口的特点\",{\"1\":{\"596\":1}}],[\"其实已经基本上完全不同\",{\"1\":{\"144\":1}}],[\"其实还有一些别的叫法\",{\"1\":{\"522\":1}}],[\"其实你只知道两种给成员变量赋值的手段\",{\"1\":{\"458\":1}}],[\"其实\",{\"1\":{\"431\":1,\"653\":1}}],[\"其实非常简单\",{\"1\":{\"347\":1,\"460\":1,\"699\":1}}],[\"其实上述定义已经说明了它的作用\",{\"1\":{\"311\":1}}],[\"其实有一定的作用\",{\"1\":{\"287\":1}}],[\"其实mybatis就是一个可以帮助我们把\",{\"1\":{\"234\":1}}],[\"其实也是非聚集索引\",{\"1\":{\"227\":1}}],[\"其实也就是这个表中的数据都存储到这个文件中\",{\"1\":{\"222\":1}}],[\"其实存储的都是地址\",{\"1\":{\"226\":1}}],[\"其实是定义了一个泛型叫做integer\",{\"1\":{\"940\":1}}],[\"其实是一种特殊的映射\",{\"1\":{\"679\":1}}],[\"其实是用的statement接口的实现类\",{\"1\":{\"201\":1}}],[\"其实是访问的\",{\"1\":{\"138\":1}}],[\"其实没有关系\",{\"1\":{\"171\":1}}],[\"其实就会在cookie中携带这个cookie\",{\"1\":{\"1150\":1}}],[\"其实就提供了session给客户端\",{\"1\":{\"1150\":1}}],[\"其实就是凭证失败的意思\",{\"1\":{\"1205\":1}}],[\"其实就是git可以追踪这个网盘\",{\"1\":{\"1183\":1}}],[\"其实就是保险柜的钥匙\",{\"1\":{\"1150\":1}}],[\"其实就是在一个servlet处理业务\",{\"1\":{\"1121\":1}}],[\"其实就是类型不一样\",{\"1\":{\"936\":1}}],[\"其实就是\",{\"1\":{\"607\":1}}],[\"其实就是去配置数据库连接\",{\"1\":{\"234\":1,\"244\":1,\"248\":1}}],[\"其实就是去解析这个sql语句中的关键字\",{\"1\":{\"204\":1}}],[\"其实就是批量的处理sql语句\",{\"1\":{\"204\":1}}],[\"其实就是请求的第一行\",{\"1\":{\"115\":1}}],[\"其实就相当于找到docbase\",{\"1\":{\"137\":1}}],[\"其实相当于找到\",{\"1\":{\"136\":1}}],[\"其余字符转为小写\",{\"1\":{\"738\":2}}],[\"其余整型对象是在具体使用时把对象放入缓存\",{\"1\":{\"709\":1}}],[\"其余场景不多见\",{\"1\":{\"600\":1}}],[\"其余地方都不可变\",{\"1\":{\"598\":1}}],[\"其余非public修饰的类和public类都属于同包的关系\",{\"1\":{\"499\":1}}],[\"其余的都掌握\",{\"1\":{\"825\":1}}],[\"其余的不需要\",{\"1\":{\"713\":1}}],[\"其余的任何不同都无法构成方法重载\",{\"1\":{\"388\":1}}],[\"其余的9500台电脑\",{\"1\":{\"126\":1}}],[\"其余代码全部不用动\",{\"1\":{\"128\":1}}],[\"其他分支可以基于主分支或其他分支创建\",{\"1\":{\"1204\":1}}],[\"其他不想被直接访问的资源\",{\"1\":{\"1098\":1}}],[\"其他31个位置\",{\"1\":{\"1012\":1}}],[\"其他线程\",{\"1\":{\"955\":1}}],[\"其他api\",{\"0\":{\"922\":1},\"1\":{\"922\":1}}],[\"其他写法\",{\"1\":{\"850\":2}}],[\"其他情况用字节流\",{\"1\":{\"784\":1}}],[\"其他类型有重载方法\",{\"1\":{\"743\":2}}],[\"其他功能\",{\"0\":{\"739\":1}}],[\"其他的操作与git基本操作一致\",{\"1\":{\"1205\":1}}],[\"其他的文件\",{\"1\":{\"1098\":1}}],[\"其他的不用它\",{\"1\":{\"1026\":1}}],[\"其他的流程很好弄懂\",{\"1\":{\"1016\":1}}],[\"其他的如果大家感兴趣可以自己去学习一下\",{\"1\":{\"947\":1}}],[\"其他的赋值方式\",{\"1\":{\"571\":1}}],[\"其他的数据库连接池的实现都需要去实现这个接口\",{\"1\":{\"213\":1}}],[\"其他父类\",{\"1\":{\"542\":1}}],[\"其他元素赋值\",{\"1\":{\"441\":1}}],[\"其他七种都可以互相转换\",{\"1\":{\"341\":1}}],[\"其他参考\",{\"1\":{\"316\":1}}],[\"其他结构为什么不行\",{\"1\":{\"218\":1}}],[\"其他约束\",{\"1\":{\"171\":1}}],[\"其他部分根据自己的情况来\",{\"1\":{\"127\":1}}],[\"其他时候\",{\"1\":{\"126\":1}}],[\"其中有一个关键点\",{\"1\":{\"1152\":1}}],[\"其中有两个引用指向同一个对象\",{\"1\":{\"456\":1}}],[\"其中浏览器负责展示用户界面\",{\"1\":{\"1077\":1}}],[\"其中包含\",{\"1\":{\"906\":1}}],[\"其中包含一个特殊的标志位\",{\"1\":{\"906\":1}}],[\"其中comparator接口的实现类对象就是比较器\",{\"1\":{\"741\":1}}],[\"其中xxx是对应基本数据类型\",{\"1\":{\"705\":1}}],[\"其中x和y的关系满足如下\",{\"1\":{\"358\":1}}],[\"其中自反性和排它性需要写代码做判断\",{\"1\":{\"674\":1}}],[\"其中将fs强转成son引用\",{\"1\":{\"585\":1}}],[\"其中具有通配的含义\",{\"1\":{\"504\":1}}],[\"其中一个关注点\",{\"1\":{\"1121\":1}}],[\"其中一个存着学生的一些信息\",{\"1\":{\"1019\":1}}],[\"其中一个student类使用全限定类名\",{\"1\":{\"503\":1}}],[\"其中一个表的记录可以对应另一个表中的多条记录\",{\"1\":{\"173\":1,\"174\":1}}],[\"其中一个表的记录只能对应另一个表中的一条记录\",{\"1\":{\"172\":1}}],[\"其中二维数组名\",{\"1\":{\"436\":1}}],[\"其中的数据被写入一个\",{\"1\":{\"923\":1}}],[\"其中的局部内部类也就不会持有引用了\",{\"1\":{\"640\":1}}],[\"其中的每一个一维数组相当于动态初始化\",{\"1\":{\"434\":1}}],[\"其中的一些消息头\",{\"1\":{\"119\":1}}],[\"其中的一些消息头和正文都是可选的\",{\"1\":{\"114\":1}}],[\"其中string\",{\"1\":{\"385\":1}}],[\"其中单目运算符\",{\"1\":{\"350\":1}}],[\"其中a2是一个二进制数\",{\"1\":{\"323\":1}}],[\"其中用户名为空或1等于1\",{\"1\":{\"204\":1}}],[\"其中\",{\"1\":{\"182\":1,\"204\":1,\"342\":1,\"346\":1,\"356\":1,\"361\":1,\"434\":2,\"497\":2,\"719\":1}}],[\"其中java语言中\",{\"1\":{\"126\":1}}],[\"其中每个学生信息占据一行\",{\"1\":{\"110\":1}}],[\"一组班主任数据\",{\"1\":{\"1019\":1}}],[\"一组学生数据\",{\"1\":{\"1019\":1}}],[\"一组数据\",{\"1\":{\"523\":1,\"540\":1}}],[\"一直到最后一个\",{\"1\":{\"1016\":1}}],[\"一直比较到没有元素\",{\"1\":{\"1016\":1}}],[\"一直向上抛出\",{\"1\":{\"749\":1}}],[\"一类是实现了collection接口的类\",{\"1\":{\"950\":1}}],[\"一堆无序的数据\",{\"1\":{\"947\":1}}],[\"一整个方法\",{\"1\":{\"924\":1}}],[\"一条执行路径就是一个线程\",{\"1\":{\"826\":1}}],[\"一条结果\",{\"0\":{\"257\":1}}],[\"一会又不打印\",{\"1\":{\"690\":1}}],[\"一起重写后\",{\"1\":{\"682\":1}}],[\"一起被称为数据库系统\",{\"1\":{\"141\":1}}],[\"一次匹配\",{\"1\":{\"754\":1}}],[\"一次性\",{\"1\":{\"648\":1}}],[\"一次是9\",{\"1\":{\"344\":1}}],[\"一\",{\"1\":{\"642\":1}}],[\"一方面没有体现代码复用\",{\"1\":{\"595\":1}}],[\"一部分猫和狗\",{\"1\":{\"595\":1}}],[\"一切需要永久保存的数据都以文件的形式\",{\"1\":{\"780\":1}}],[\"一切事物\",{\"1\":{\"505\":1}}],[\"一切访问过程是正常的\",{\"1\":{\"120\":1}}],[\"一共是\",{\"1\":{\"497\":1}}],[\"一共11个1\",{\"1\":{\"341\":1}}],[\"一场篮球比赛\",{\"1\":{\"472\":2}}],[\"一模一样\",{\"1\":{\"464\":1}}],[\"一只3岁黄色金毛\",{\"1\":{\"444\":1}}],[\"一只2岁黄白柯基\",{\"1\":{\"444\":1}}],[\"一只1岁白色萨摩亚\",{\"1\":{\"444\":1}}],[\"一只青蛙一次可以跳上一层台阶\",{\"1\":{\"442\":1}}],[\"一维数组使用for循环\",{\"1\":{\"440\":1}}],[\"一维数组的长度都是一样的\",{\"1\":{\"434\":1}}],[\"一维数组的个数\",{\"1\":{\"434\":2}}],[\"一维\",{\"1\":{\"400\":1}}],[\"一时改不了使用习惯\",{\"1\":{\"395\":1}}],[\"一点\",{\"1\":{\"389\":1}}],[\"一元\",{\"1\":{\"350\":1}}],[\"一律使用短路版本\",{\"1\":{\"347\":1}}],[\"一律自动转换为double进行计算\",{\"1\":{\"340\":1}}],[\"一律自动转换为float进行计算\",{\"1\":{\"340\":1}}],[\"一律自动转换为long进行计算\",{\"1\":{\"340\":1}}],[\"一律自动转换为int进行计算\",{\"1\":{\"340\":1}}],[\"一律自动转换为int进行运算\",{\"1\":{\"340\":1}}],[\"一旦一个文件已经被追踪并且提交到远程仓库中去了\",{\"1\":{\"1203\":1}}],[\"一旦强转错了\",{\"1\":{\"936\":1}}],[\"一旦运行就执行给定的\",{\"1\":{\"881\":1}}],[\"一旦通过类型匹配\",{\"1\":{\"754\":1}}],[\"一旦执行完毕紧接着\",{\"1\":{\"752\":1}}],[\"一旦发生错误\",{\"1\":{\"749\":1}}],[\"一旦发生运算\",{\"1\":{\"340\":1}}],[\"一旦成为接口的子类\",{\"1\":{\"696\":1}}],[\"一旦重写hashcode方法后\",{\"1\":{\"685\":1}}],[\"一旦栈溢出是严重错误\",{\"1\":{\"442\":1}}],[\"一旦能够找打分解问题的思路\",{\"1\":{\"442\":1}}],[\"一旦违反上述原则\",{\"1\":{\"427\":1}}],[\"一旦使用会编译报错\",{\"1\":{\"413\":1}}],[\"一旦程序抛出空指针异常\",{\"1\":{\"412\":1}}],[\"一旦程序出现异常\",{\"1\":{\"410\":1}}],[\"一旦gc这种机制出现问题\",{\"1\":{\"407\":1}}],[\"一旦循环启动\",{\"1\":{\"375\":1}}],[\"一旦某个case取值匹配上\",{\"1\":{\"359\":1}}],[\"一旦左边的操作数确定是false\",{\"1\":{\"347\":1}}],[\"一旦左边的操作数的结果确定是true\",{\"1\":{\"347\":1}}],[\"一种情况是\",{\"1\":{\"1137\":1}}],[\"一种工具\",{\"1\":{\"883\":1}}],[\"一种创建对象的新方式\",{\"1\":{\"658\":1}}],[\"一种规范\",{\"1\":{\"597\":1}}],[\"一种自定义的数据类型\",{\"1\":{\"455\":1}}],[\"一种数据类型对应一种内存空间\",{\"1\":{\"320\":1}}],[\"一种解释说明性的文字\",{\"1\":{\"317\":1}}],[\"一种访问控制方式\",{\"1\":{\"312\":3}}],[\"一种循环结构的引导词\",{\"1\":{\"312\":1}}],[\"一种叫做非主键索引\",{\"1\":{\"222\":1,\"225\":1}}],[\"一种叫做主键索引\",{\"1\":{\"222\":1,\"225\":1}}],[\"一台计算机可以同时安装多个不同版本的jdk\",{\"1\":{\"306\":1}}],[\"一台性能比较高的计算机主机\",{\"1\":{\"126\":1}}],[\"一级缓存中也没有\",{\"1\":{\"286\":1}}],[\"一级缓存什么时候失效呢\",{\"1\":{\"284\":1}}],[\"一级缓存默认是开启的\",{\"1\":{\"284\":1}}],[\"一级缓存是一个以sqlsession管理的mapper级别的缓存\",{\"1\":{\"284\":1}}],[\"一级缓存\",{\"0\":{\"284\":1}}],[\"一行多列\",{\"1\":{\"259\":1}}],[\"一行一列\",{\"1\":{\"257\":1}}],[\"一行一列的结果\",{\"1\":{\"257\":1}}],[\"一一对应\",{\"1\":{\"235\":1}}],[\"一层就要读一次磁盘\",{\"1\":{\"220\":1}}],[\"一致性是指\",{\"1\":{\"210\":1}}],[\"一致性\",{\"1\":{\"210\":1,\"674\":2}}],[\"一对一结构\",{\"0\":{\"275\":1}}],[\"一对一\",{\"0\":{\"172\":1},\"1\":{\"394\":1}}],[\"一对多的关系\",{\"1\":{\"947\":1}}],[\"一对多结构\",{\"0\":{\"278\":1}}],[\"一对多是指\",{\"1\":{\"173\":1}}],[\"一对多\",{\"0\":{\"173\":1},\"1\":{\"142\":1}}],[\"一些私密信息\",{\"1\":{\"1203\":1}}],[\"一些特殊的api\",{\"1\":{\"1026\":1}}],[\"一些子实现允许存储null\",{\"1\":{\"952\":1}}],[\"一些子实现允许存储重复的数据\",{\"1\":{\"952\":1}}],[\"一些不允许\",{\"1\":{\"952\":2}}],[\"一些无序\",{\"1\":{\"952\":1}}],[\"一些奇思妙想\",{\"1\":{\"760\":1}}],[\"一些奇怪的面试题目\",{\"1\":{\"433\":1}}],[\"一些细节问题\",{\"1\":{\"496\":1}}],[\"一些元素\",{\"1\":{\"421\":1}}],[\"一些问题\",{\"1\":{\"235\":1}}],[\"一些序号\",{\"1\":{\"169\":1}}],[\"一些老项目可能仍然在使用\",{\"1\":{\"144\":1}}],[\"一班学生成绩\",{\"1\":{\"431\":1}}],[\"一班\",{\"1\":{\"161\":3,\"162\":2,\"185\":2,\"278\":1}}],[\"一般会有一个master\",{\"1\":{\"1204\":1}}],[\"一般会有三个字段是固定的\",{\"1\":{\"171\":1}}],[\"一般的用法\",{\"1\":{\"1046\":1}}],[\"一般的使用方式\",{\"1\":{\"956\":1}}],[\"一般面试官问\",{\"1\":{\"1020\":1}}],[\"一般这样答\",{\"1\":{\"969\":1}}],[\"一般这样用\",{\"1\":{\"956\":1}}],[\"一般需要使用\",{\"1\":{\"968\":1}}],[\"一般需要使用数组的拷贝\",{\"1\":{\"421\":1}}],[\"一般就是想统计一下符合条件的\",{\"1\":{\"954\":1}}],[\"一般我们把这个概念称之为\",{\"1\":{\"885\":1}}],[\"一般出现在同步代码块嵌套\",{\"1\":{\"866\":1}}],[\"一般来讲\",{\"1\":{\"784\":1}}],[\"一般来说\",{\"1\":{\"668\":1,\"692\":1,\"976\":1}}],[\"一般来说要避免可变参数方法\",{\"1\":{\"423\":1}}],[\"一般来说联合查询作用不大\",{\"1\":{\"185\":1}}],[\"一般称呼为\",{\"1\":{\"726\":2}}],[\"一般也为true\",{\"1\":{\"698\":1}}],[\"一般两个独立的对象的哈希值是不同的\",{\"1\":{\"681\":1}}],[\"一般认为它的返回值是该对象的十进制地址值\",{\"1\":{\"667\":1}}],[\"一般选择第一个元素\",{\"1\":{\"418\":1}}],[\"一般为了方便使用\",{\"1\":{\"352\":1}}],[\"一般没有结果\",{\"1\":{\"342\":1}}],[\"一般情况下也为true\",{\"1\":{\"698\":1}}],[\"一般情况下也称作http响应报文\",{\"1\":{\"119\":1}}],[\"一般情况下也称作http请求报文\",{\"1\":{\"114\":1}}],[\"一般情况下\",{\"1\":{\"382\":1,\"696\":1}}],[\"一般情况下不要做强制类型转换\",{\"1\":{\"339\":1}}],[\"一般情况下声明和初始化都合起来使用\",{\"1\":{\"334\":1}}],[\"一般都是使用它来从properties配置文件中读取信息\",{\"1\":{\"1026\":1}}],[\"一般都是这种业务题\",{\"1\":{\"1019\":1}}],[\"一般都是指pc端的桌面应用程序\",{\"1\":{\"303\":1}}],[\"一般都是用来提取一些公共列\",{\"1\":{\"267\":1}}],[\"一般和if配合使用\",{\"1\":{\"264\":1}}],[\"一般和分组+聚合函数配合使用\",{\"1\":{\"167\":1}}],[\"一般问事务的四大特性\",{\"1\":{\"210\":1}}],[\"一般不会出现问题\",{\"1\":{\"339\":1}}],[\"一般不多\",{\"1\":{\"256\":1}}],[\"一般不使用\",{\"1\":{\"254\":1}}],[\"一般不用来做索引\",{\"1\":{\"220\":1}}],[\"一般不需要我们去备份和恢复数据库\",{\"1\":{\"188\":1}}],[\"一般不是root\",{\"1\":{\"147\":1}}],[\"一般配合聚合函数一起使用\",{\"1\":{\"167\":1}}],[\"一般用它来做分页查询\",{\"1\":{\"164\":1}}],[\"一般用来做\",{\"1\":{\"164\":1}}],[\"一般用于多行注释\",{\"1\":{\"152\":1}}],[\"一般使用字符串或者integer\",{\"1\":{\"1009\":1}}],[\"一般使用this关键字完成赋值就可以了\",{\"1\":{\"516\":1}}],[\"一般使用代码保证\",{\"1\":{\"171\":1}}],[\"一般使用\",{\"1\":{\"162\":1}}],[\"一般使用utf8mb4来当做字符集\",{\"1\":{\"149\":1}}],[\"一般有三种方式\",{\"1\":{\"152\":1}}],[\"一般常见两种网络架构模式\",{\"1\":{\"145\":1}}],[\"一般是存储在磁盘上\",{\"1\":{\"144\":1}}],[\"一般是一个权威机构\",{\"1\":{\"125\":1}}],[\"一定执行\",{\"1\":{\"760\":1}}],[\"一定会转化为红黑树吗\",{\"0\":{\"1012\":1}}],[\"一定会出现\",{\"1\":{\"999\":1}}],[\"一定会创建新对象\",{\"1\":{\"710\":1}}],[\"一定会触发该类的类加载\",{\"1\":{\"476\":1}}],[\"一定不要忘记在用完后\",{\"1\":{\"690\":1}}],[\"一定不可能光是一个接口\",{\"1\":{\"199\":1}}],[\"一定能够保证该成员被子类自身所使用\",{\"1\":{\"537\":1}}],[\"一定需要在外部\",{\"1\":{\"510\":1}}],[\"一定一定要能自己的话描述出来\",{\"1\":{\"217\":1}}],[\"一定是第一次\",{\"1\":{\"1192\":1}}],[\"一定是2022\",{\"1\":{\"356\":1}}],[\"一定是一个实现类\",{\"1\":{\"199\":1}}],[\"一定是你的网站做了国际化\",{\"1\":{\"116\":1}}],[\"一定要知道什么是队列\",{\"1\":{\"971\":1}}],[\"一定要带着自己的理解去背\",{\"1\":{\"969\":1}}],[\"一定要掌握\",{\"1\":{\"957\":1}}],[\"一定要注意一个问题\",{\"1\":{\"1003\":1}}],[\"一定要注意\",{\"1\":{\"956\":2,\"1002\":1,\"1203\":1}}],[\"一定要保持和equals方法一致的重写依据\",{\"1\":{\"683\":1}}],[\"一定要考虑连环触发类加载的情况\",{\"1\":{\"546\":1}}],[\"一定要是子类中\",{\"1\":{\"536\":1}}],[\"一定要分清楚\",{\"1\":{\"382\":1}}],[\"一定要通过同一个sqlsession获取出来的mapper\",{\"1\":{\"284\":1}}],[\"一定要留有一定空间\",{\"1\":{\"176\":1}}],[\"一定要对应上\",{\"1\":{\"158\":1}}],[\"一定要一一对应\",{\"1\":{\"158\":1}}],[\"一定要配置环境变量之后才能执行这个命令\",{\"1\":{\"147\":1}}],[\"一定要理解这个过程\",{\"1\":{\"127\":1}}],[\"一定要返回一个location\",{\"1\":{\"121\":1}}],[\"一个月之内\",{\"1\":{\"1183\":1}}],[\"一个被数字\",{\"1\":{\"1167\":1}}],[\"一个被星标了的苹果文章\",{\"1\":{\"1059\":1}}],[\"一个是post请求\",{\"1\":{\"1119\":1}}],[\"一个get请求\",{\"1\":{\"1119\":1}}],[\"一个url\",{\"1\":{\"1088\":1}}],[\"一个终止\",{\"1\":{\"1033\":1}}],[\"一个学生只对应一个老师\",{\"1\":{\"1019\":1}}],[\"一个红黑树再扩容之后\",{\"1\":{\"1014\":1}}],[\"一个y对应多个x\",{\"1\":{\"999\":1}}],[\"一个y可能对应多少个x\",{\"1\":{\"999\":1}}],[\"一个x对应一个y\",{\"1\":{\"999\":1}}],[\"一个班级的\",{\"1\":{\"997\":1}}],[\"一个大小有限的队列\",{\"1\":{\"979\":1}}],[\"一个结论\",{\"1\":{\"978\":1}}],[\"一个数据源\",{\"1\":{\"1033\":1}}],[\"一个数据元素\",{\"1\":{\"957\":1}}],[\"一个数组只要在内存中被创建出来\",{\"1\":{\"394\":1}}],[\"一个老师对应n个学生\",{\"1\":{\"1019\":1}}],[\"一个老师\",{\"1\":{\"950\":1}}],[\"一个节点\",{\"1\":{\"947\":2}}],[\"一个规范\",{\"1\":{\"942\":1}}],[\"一个车写一个车库类\",{\"1\":{\"936\":1}}],[\"一个jvm实例只存在一个堆\",{\"1\":{\"925\":1}}],[\"一个java源文件当中\",{\"1\":{\"499\":1}}],[\"一个java文件下的所有类\",{\"1\":{\"469\":1}}],[\"一个java文件中的多个class是同包\",{\"1\":{\"454\":1}}],[\"一个java文件中定义多个class应该并列而不是包含\",{\"1\":{\"454\":1}}],[\"一个java班上有80个人\",{\"1\":{\"429\":1}}],[\"一个成员变量等等\",{\"1\":{\"924\":1}}],[\"一个空的数据报包\",{\"1\":{\"893\":1}}],[\"一个空接口\",{\"1\":{\"696\":1}}],[\"一个可重入的互斥锁\",{\"1\":{\"864\":1}}],[\"一个操作要么一次执行完\",{\"1\":{\"853\":1}}],[\"一个不可分割的操作\",{\"1\":{\"853\":1}}],[\"一个不能\",{\"1\":{\"342\":1}}],[\"一个任务接一个任务按顺序执行\",{\"1\":{\"827\":1}}],[\"一个进程中可以有多个线程\",{\"1\":{\"826\":1}}],[\"一个字符是如何存在计算机中的\",{\"0\":{\"798\":1}}],[\"一个字符串是由多个字符组成的一串数据\",{\"1\":{\"728\":1}}],[\"一个字节由8位组成\",{\"1\":{\"321\":1}}],[\"一个支付场景\",{\"1\":{\"720\":1}}],[\"一个value\",{\"1\":{\"995\":1}}],[\"一个valueof\",{\"1\":{\"719\":1}}],[\"一个values\",{\"1\":{\"719\":1}}],[\"一个特殊的类用来存放固定的几个常量对象\",{\"1\":{\"713\":1}}],[\"一个个的列举\",{\"1\":{\"713\":1}}],[\"一个byte的取值范围的对象缓存生成时机是不同的\",{\"1\":{\"709\":1}}],[\"一个boolean元素占1个字节\",{\"1\":{\"325\":1}}],[\"一个对象在内存中都普遍占用两种资源\",{\"1\":{\"689\":1}}],[\"一个对象的创建过程\",{\"1\":{\"456\":1}}],[\"一个对象的内存图\",{\"1\":{\"456\":1}}],[\"一个继承了类或者实现了接口的匿名子类对象\",{\"1\":{\"647\":1}}],[\"一个描述cpu\",{\"1\":{\"607\":1}}],[\"一个描述computer\",{\"1\":{\"607\":1}}],[\"一个厂商\",{\"1\":{\"599\":1}}],[\"一个普通类实现接口必须实现所有抽象方法\",{\"1\":{\"596\":1}}],[\"一个抽象类中可以没有抽象方法\",{\"1\":{\"593\":1}}],[\"一个final修饰的类都没有子类\",{\"1\":{\"577\":1}}],[\"一个变量\",{\"1\":{\"461\":1}}],[\"一个变量必须明确它的数据类型\",{\"1\":{\"337\":1}}],[\"一个类实现了接口java\",{\"1\":{\"694\":1}}],[\"一个类想要做克隆操作\",{\"1\":{\"694\":1}}],[\"一个类在jvm中的生命周期\",{\"1\":{\"497\":1}}],[\"一个类从被加载到jvm内存中开始\",{\"1\":{\"497\":1}}],[\"一个类的多数成员变量都是私有的\",{\"1\":{\"516\":1}}],[\"一个类的生命周期包括\",{\"1\":{\"497\":1}}],[\"一个类的静态代码块如果没有被执行\",{\"1\":{\"496\":1}}],[\"一个类的类加载在一次程序运行过程中\",{\"1\":{\"456\":1}}],[\"一个类的定义\",{\"1\":{\"455\":1}}],[\"一个类当中\",{\"1\":{\"454\":1}}],[\"一个类可以在继承别的类的同时实现接口\",{\"1\":{\"596\":1}}],[\"一个类可以直接继承多个类\",{\"1\":{\"532\":1}}],[\"一个类可以最先开始类加载\",{\"1\":{\"479\":1}}],[\"一个类可以创建出千千万万个不同的对象\",{\"1\":{\"447\":1}}],[\"一个类可以描述千千万万个对象\",{\"1\":{\"446\":1}}],[\"一个类中\",{\"1\":{\"466\":1,\"475\":1}}],[\"一个类中发生方法重载时\",{\"1\":{\"389\":1}}],[\"一个类中的多个方法\",{\"1\":{\"388\":1}}],[\"一个长度为2的int类型二维数组内存图\",{\"1\":{\"430\":1}}],[\"一个方法只能有一个可变长参数\",{\"1\":{\"423\":1}}],[\"一个方法必须直接或间接地在main方法中调用才会被执行\",{\"1\":{\"383\":1}}],[\"一个经典的初学者问题\",{\"1\":{\"408\":1}}],[\"一个经典的问题\",{\"1\":{\"348\":1}}],[\"一个非常重要的原则就是\",{\"1\":{\"408\":1}}],[\"一个绝对空字符\",{\"1\":{\"407\":1}}],[\"一个能够终止的标准形式while循环\",{\"1\":{\"363\":1}}],[\"一个case分支所能执行的语句范围\",{\"1\":{\"359\":1}}],[\"一个servlet可以对应多个url\",{\"0\":{\"1088\":1}}],[\"一个string类型局部变量的声明\",{\"1\":{\"327\":1}}],[\"一个sql语句的结果可以作为另外一个sql语句的条件\",{\"1\":{\"184\":1}}],[\"一个独立的boolean类型变量当作int处理\",{\"1\":{\"325\":1}}],[\"一个入参\",{\"1\":{\"250\":1}}],[\"一个完整的settings配置\",{\"1\":{\"246\":1}}],[\"一个参数时\",{\"1\":{\"254\":1}}],[\"一个参数\",{\"0\":{\"250\":1},\"1\":{\"211\":1,\"250\":1,\"256\":1}}],[\"一个事务执行过程中看到的数据\",{\"1\":{\"211\":1}}],[\"一个事务提交之后\",{\"1\":{\"211\":1}}],[\"一个事务还没提交时\",{\"1\":{\"211\":1}}],[\"一个事务读取到了另外一个事务没有提交的数据\",{\"1\":{\"211\":1}}],[\"一个事务一旦生效\",{\"1\":{\"210\":1}}],[\"一个具体的值\",{\"1\":{\"170\":1}}],[\"一个表示父类对象\",{\"1\":{\"544\":1}}],[\"一个表达式你肯定看不懂\",{\"1\":{\"350\":1}}],[\"一个表中的外键指向另一个表中的某个字段\",{\"1\":{\"171\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"169\":1}}],[\"一个表一旦创建\",{\"1\":{\"157\":1}}],[\"一个\",{\"1\":{\"162\":1,\"950\":1,\"1203\":1}}],[\"一个mysql系统中\",{\"1\":{\"152\":1}}],[\"一个网站\",{\"1\":{\"116\":1}}],[\"一个折线图案例\",{\"1\":{\"72\":1}}],[\"一个散点图案例\",{\"1\":{\"71\":1}}],[\"一个拥有\",{\"1\":{\"61\":1}}],[\"一个链接\",{\"1\":{\"8\":1}}],[\"一个简单的幻灯片演示与各种小贴士\",{\"1\":{\"3\":1}}],[\"空间\",{\"1\":{\"1153\":1}}],[\"空的树映射\",{\"1\":{\"1025\":2}}],[\"空的可以生产\",{\"1\":{\"867\":1}}],[\"空的\",{\"1\":{\"867\":2}}],[\"空\",{\"1\":{\"867\":3}}],[\"空指针\",{\"1\":{\"754\":1}}],[\"空指针异常在多数情况下是有害的\",{\"1\":{\"412\":1}}],[\"空指针异常\",{\"0\":{\"412\":1},\"1\":{\"412\":2,\"747\":1,\"748\":1}}],[\"空接口的作用\",{\"1\":{\"696\":1}}],[\"空字符\",{\"1\":{\"356\":1}}],[\"空字符串\",{\"1\":{\"353\":1,\"729\":3}}],[\"空位都补0\",{\"1\":{\"348\":1}}],[\"空常量是引用数据类型独有的一种取值\",{\"1\":{\"328\":1}}],[\"空常量\",{\"1\":{\"328\":1,\"412\":1}}],[\"空格\",{\"1\":{\"315\":1,\"353\":1}}],[\"空格的分割规则等\",{\"1\":{\"110\":1}}],[\"空行\",{\"0\":{\"117\":1,\"122\":1},\"1\":{\"114\":1,\"119\":1,\"1104\":1,\"1105\":1,\"1110\":1,\"1121\":1}}],[\"发展历史\",{\"1\":{\"1183\":1}}],[\"发生了线程切换\",{\"1\":{\"859\":1}}],[\"发生了中断\",{\"1\":{\"844\":2}}],[\"发生了什么\",{\"1\":{\"789\":1}}],[\"发生\",{\"1\":{\"825\":1,\"828\":1}}],[\"发生异常之前的语句正常执行\",{\"1\":{\"749\":1}}],[\"发生错误之后的语句\",{\"1\":{\"749\":1}}],[\"发生错误的地方\",{\"1\":{\"749\":1}}],[\"发生的前提\",{\"1\":{\"585\":1}}],[\"发生的类不同\",{\"1\":{\"563\":1}}],[\"发生方法重载\",{\"1\":{\"423\":1}}],[\"发送到\",{\"1\":{\"1115\":1}}],[\"发送请求到我这台服务器\",{\"1\":{\"1146\":1}}],[\"发送请求后接收到的响应报文\",{\"1\":{\"1122\":1}}],[\"发送请求\",{\"1\":{\"1110\":1,\"1142\":1}}],[\"发送fin包\",{\"1\":{\"908\":2}}],[\"发送ack包\",{\"1\":{\"908\":3}}],[\"发送syn\",{\"1\":{\"908\":1}}],[\"发送syn包\",{\"1\":{\"908\":1}}],[\"发送sql语句\",{\"1\":{\"192\":1,\"194\":1,\"195\":1,\"197\":1,\"206\":1}}],[\"发送任务\",{\"1\":{\"895\":1}}],[\"发送逻辑\",{\"1\":{\"894\":2}}],[\"发送端接收端相互发送\",{\"0\":{\"894\":1},\"1\":{\"894\":1}}],[\"发送端\",{\"1\":{\"892\":1,\"894\":1}}],[\"发送端发送消息\",{\"0\":{\"892\":1},\"1\":{\"892\":1}}],[\"发送端步骤\",{\"0\":{\"887\":1}}],[\"发送给mysql服务器\",{\"1\":{\"204\":1}}],[\"发送用户名和密码\",{\"1\":{\"192\":1}}],[\"发送的时候的内容类型\",{\"1\":{\"116\":1}}],[\"发送的http请求一般称之为http请求报文\",{\"1\":{\"114\":1}}],[\"发现实际异常对象的类型和catch分支\",{\"1\":{\"754\":1}}],[\"发现\",{\"1\":{\"553\":1,\"559\":1}}],[\"发现的一种几何排列规律\",{\"1\":{\"441\":1}}],[\"发现有输出结果就可以断定配置成功了\",{\"1\":{\"307\":1}}],[\"发现不符合条件\",{\"1\":{\"230\":1}}],[\"发现没有携带端口号\",{\"1\":{\"139\":1}}],[\"发现需要去加载其他的css\",{\"1\":{\"113\":1}}],[\"呈现页面给用户\",{\"1\":{\"113\":1}}],[\"最早是用于linux的代码管理\",{\"1\":{\"1183\":1}}],[\"最早大家都用的连接池\",{\"1\":{\"214\":1}}],[\"最重要的一件事情是要让服务器知道客户端是谁\",{\"1\":{\"1137\":1}}],[\"最主要的场景就是前后端分离之后\",{\"1\":{\"1124\":1}}],[\"最主流的服务器端语言\",{\"1\":{\"303\":1}}],[\"最最核心的区别\",{\"1\":{\"873\":1}}],[\"最少1个\",{\"1\":{\"826\":1}}],[\"最全\",{\"1\":{\"546\":1}}],[\"最上层的父类\",{\"1\":{\"542\":1}}],[\"最经典的\",{\"1\":{\"495\":1}}],[\"最多连接两个节点\",{\"1\":{\"947\":1}}],[\"最多24\",{\"1\":{\"725\":1}}],[\"最多31\",{\"1\":{\"725\":1}}],[\"最多12\",{\"1\":{\"725\":1}}],[\"最多只能继承一个\",{\"1\":{\"532\":1}}],[\"最多只有一次\",{\"1\":{\"456\":1}}],[\"最多就只能表示1234四个数\",{\"1\":{\"323\":1}}],[\"最先要解决的问题就是\",{\"1\":{\"446\":1}}],[\"最基本\",{\"1\":{\"446\":1}}],[\"最小是0\",{\"1\":{\"438\":4}}],[\"最小值\",{\"1\":{\"168\":2,\"326\":1,\"418\":1}}],[\"最简单的算法就是引用计数法\",{\"1\":{\"927\":1}}],[\"最简单的情况下\",{\"1\":{\"415\":1}}],[\"最简单朴实的规避手段就是通过if进行判断\",{\"1\":{\"412\":1}}],[\"最佳的存储方式是使用线性表\",{\"1\":{\"394\":1}}],[\"最好还有抽象方法\",{\"1\":{\"595\":1}}],[\"最好是前无空格\",{\"1\":{\"422\":1}}],[\"最好也不要超过两层\",{\"1\":{\"370\":1}}],[\"最好不要使用\",{\"1\":{\"370\":1}}],[\"最高的肯定是匿名内部类和lambda表达式\",{\"1\":{\"643\":1}}],[\"最高效\",{\"1\":{\"348\":1}}],[\"最高位是0还是1\",{\"1\":{\"348\":1}}],[\"最常见的\",{\"1\":{\"712\":1}}],[\"最常见的就是类system的初始化\",{\"1\":{\"495\":1}}],[\"最常见的两种变量类型\",{\"1\":{\"456\":1}}],[\"最常见的也是最常用的引用数据类型就是string\",{\"1\":{\"327\":1}}],[\"最常用的一种写法\",{\"1\":{\"961\":1}}],[\"最常用的非关系型数据库\",{\"1\":{\"144\":1}}],[\"最常用类\",{\"1\":{\"728\":1}}],[\"最常用\",{\"1\":{\"347\":1,\"1034\":1}}],[\"最标准的写法\",{\"1\":{\"251\":1}}],[\"最左匹配元素\",{\"1\":{\"233\":1}}],[\"最短\",{\"1\":{\"207\":1}}],[\"最长报文段生存时间的两倍\",{\"1\":{\"907\":1}}],[\"最长\",{\"1\":{\"207\":1}}],[\"最低分\",{\"1\":{\"167\":1}}],[\"最大\",{\"1\":{\"1038\":1}}],[\"最大的一个特点就是有序\",{\"1\":{\"1024\":1}}],[\"最大堆内存\",{\"1\":{\"960\":1}}],[\"最大59\",{\"1\":{\"725\":2}}],[\"最大是n\",{\"1\":{\"438\":2}}],[\"最大是m\",{\"1\":{\"438\":2}}],[\"最大特征是只会执行一次\",{\"1\":{\"361\":1}}],[\"最大取值范围\",{\"1\":{\"340\":1,\"341\":1}}],[\"最大连接数量的限制\",{\"1\":{\"213\":1}}],[\"最大值是数组长度\",{\"1\":{\"393\":1}}],[\"最大值\",{\"1\":{\"168\":2,\"326\":1,\"418\":1}}],[\"最大长度2^32\",{\"1\":{\"153\":1}}],[\"最大长度65535字符\",{\"1\":{\"153\":1}}],[\"最大长度65535字节\",{\"1\":{\"153\":1}}],[\"最大位数5位\",{\"1\":{\"153\":1}}],[\"最本质的区别是\",{\"1\":{\"144\":1}}],[\"最流行的关系型数据库\",{\"1\":{\"143\":1}}],[\"最近\",{\"1\":{\"142\":1,\"389\":1}}],[\"最初由美国国家标准局\",{\"1\":{\"146\":1}}],[\"最初\",{\"1\":{\"142\":1}}],[\"最后一件事情\",{\"1\":{\"1201\":1}}],[\"最后一级是list\",{\"1\":{\"1132\":1}}],[\"最后一个元素\",{\"1\":{\"968\":1,\"975\":2}}],[\"最后一个else\",{\"1\":{\"359\":1}}],[\"最后的\",{\"1\":{\"760\":1}}],[\"最后的意思\",{\"1\":{\"565\":1}}],[\"最后又需要研究人类\",{\"1\":{\"581\":1}}],[\"最后测试调用这个public方法\",{\"1\":{\"555\":1}}],[\"最后执行构造器\",{\"1\":{\"546\":1}}],[\"最后执行完new对象构造器\",{\"1\":{\"546\":1}}],[\"最后执行这个类的构造器\",{\"1\":{\"546\":1}}],[\"最后执行双参构造器代码\",{\"1\":{\"468\":1}}],[\"最后思考\",{\"1\":{\"491\":1,\"570\":1}}],[\"最后被执行\",{\"1\":{\"487\":1}}],[\"最后在main方法中写要执行的代码\",{\"1\":{\"308\":1}}],[\"最后去数据库查找\",{\"1\":{\"286\":1}}],[\"最后再提一点\",{\"1\":{\"412\":1}}],[\"最后再说一点\",{\"1\":{\"336\":1}}],[\"最后再把参数设置进去\",{\"1\":{\"255\":1}}],[\"最后再需要使用\",{\"1\":{\"128\":1}}],[\"最后\",{\"1\":{\"252\":1,\"303\":1,\"307\":1,\"340\":1,\"359\":1,\"563\":1,\"615\":1,\"645\":1,\"682\":1,\"687\":1,\"724\":1,\"1201\":1}}],[\"最后显示\",{\"1\":{\"27\":1}}],[\"最终起效果的就是数字的\",{\"1\":{\"1008\":1}}],[\"最终结果应该是50000\",{\"1\":{\"969\":1}}],[\"最终返回学生对象\",{\"1\":{\"924\":1}}],[\"最终返回包里的数据\",{\"1\":{\"893\":1}}],[\"最终要返回这个类对应的字节码文件对象\",{\"1\":{\"923\":1}}],[\"最终得到结果\",{\"1\":{\"739\":2}}],[\"最终的\",{\"1\":{\"760\":1}}],[\"最终的变量\",{\"1\":{\"568\":1}}],[\"最终的方法\",{\"1\":{\"567\":1}}],[\"最终的类\",{\"1\":{\"566\":1}}],[\"最终的结果\",{\"1\":{\"336\":1}}],[\"最终一定父类构造器执行完毕\",{\"1\":{\"546\":1}}],[\"最终都是为了保证父类构造器先于子类执行\",{\"1\":{\"546\":1}}],[\"最终会拿到所有的和\",{\"1\":{\"1050\":1}}],[\"最终会拿到最大的\",{\"1\":{\"1050\":1}}],[\"最终会返回long类型\",{\"1\":{\"1035\":1}}],[\"最终会加入类的所有构造器中\",{\"1\":{\"490\":1}}],[\"最终会有3\",{\"1\":{\"181\":1}}],[\"最终我们知道1的阶乘就是1\",{\"1\":{\"442\":1}}],[\"最终获取最值\",{\"1\":{\"418\":1}}],[\"最终找出数据\",{\"1\":{\"394\":1}}],[\"最终可以根据结果找到出现问题的代码逻辑\",{\"1\":{\"319\":1}}],[\"最终余数是几\",{\"1\":{\"256\":1}}],[\"最终想用name\",{\"1\":{\"252\":1}}],[\"最终经过编译和对应接口文件编译到同一包下\",{\"1\":{\"244\":1}}],[\"最终\",{\"1\":{\"233\":1,\"253\":2,\"893\":1}}],[\"最终频繁查询的这个表\",{\"1\":{\"172\":1}}],[\"最终数据量太大的时候\",{\"1\":{\"172\":1}}],[\"最终渲染\",{\"1\":{\"124\":1}}],[\"最终利用dns服务器来进行解析\",{\"1\":{\"124\":1}}],[\"最终浏览器渲染出来页面\",{\"1\":{\"113\":1}}],[\"71\",{\"1\":{\"1132\":1}}],[\"72\",{\"1\":{\"1132\":1}}],[\"73\",{\"1\":{\"1132\":3}}],[\"7388140007375758175\",{\"1\":{\"824\":1}}],[\"74\",{\"1\":{\"1132\":1}}],[\"75=24\",{\"1\":{\"1012\":1}}],[\"75f\",{\"1\":{\"1006\":1}}],[\"75\",{\"1\":{\"984\":2,\"988\":2,\"1006\":3,\"1016\":1,\"1017\":2,\"1022\":2,\"1132\":1}}],[\"754算术规范\",{\"1\":{\"312\":1}}],[\"7的写法\",{\"1\":{\"939\":1}}],[\"7f\",{\"1\":{\"799\":1}}],[\"7s\",{\"1\":{\"741\":1}}],[\"76\",{\"1\":{\"431\":1,\"978\":3,\"1132\":1}}],[\"777\",{\"1\":{\"498\":1,\"924\":3,\"958\":1}}],[\"77\",{\"1\":{\"431\":1,\"740\":1,\"741\":1,\"1008\":2,\"1132\":1}}],[\"7889256375299507710\",{\"1\":{\"824\":1}}],[\"7889256375299507710l\",{\"1\":{\"824\":1}}],[\"78\",{\"1\":{\"431\":1,\"1104\":1,\"1110\":1,\"1112\":1,\"1132\":1}}],[\"700\",{\"1\":{\"222\":1,\"225\":1,\"229\":1}}],[\"70\",{\"1\":{\"161\":2,\"801\":1,\"1132\":3}}],[\"798e308\",{\"1\":{\"326\":1}}],[\"79\",{\"1\":{\"124\":1,\"1132\":2}}],[\"7\",{\"1\":{\"113\":1,\"144\":1,\"158\":1,\"161\":1,\"168\":1,\"192\":1,\"222\":2,\"225\":1,\"229\":1,\"278\":1,\"316\":1,\"350\":1,\"471\":1,\"606\":1,\"713\":1,\"715\":1,\"717\":1,\"833\":4,\"840\":2,\"956\":1,\"1016\":1,\"1104\":1,\"1107\":1,\"1110\":1,\"1112\":3,\"1113\":1,\"1120\":2,\"1132\":1,\"1138\":2,\"1140\":2,\"1141\":1,\"1150\":2,\"1201\":1}}],[\"整合mybatis完成上面的业务\",{\"1\":{\"1132\":1}}],[\"整合mybatis\",{\"1\":{\"1131\":1}}],[\"整理不同容器的结构思维导图\",{\"1\":{\"951\":1}}],[\"整形\",{\"1\":{\"407\":1}}],[\"整数值\",{\"1\":{\"798\":1}}],[\"整数的字面值常量默认作为int类型使用\",{\"1\":{\"342\":1}}],[\"整数常量的特殊性\",{\"0\":{\"342\":1}}],[\"整数常量\",{\"1\":{\"328\":1}}],[\"整数类型\",{\"1\":{\"312\":1}}],[\"整数型\",{\"1\":{\"153\":1}}],[\"整个应用之中的数据共享\",{\"1\":{\"1161\":1}}],[\"整个web应用提供的共享空间\",{\"1\":{\"1095\":1}}],[\"整个运算符和变量组成的式子称之为表达式\",{\"1\":{\"342\":1}}],[\"整个方法\",{\"1\":{\"318\":1}}],[\"整个类\",{\"1\":{\"318\":1,\"924\":1}}],[\"整个项目中必须唯一\",{\"1\":{\"234\":1}}],[\"整个索引的索引树\",{\"1\":{\"233\":1}}],[\"整个过程同上\",{\"1\":{\"113\":1}}],[\"整体表示的字符串就是\",{\"1\":{\"667\":1}}],[\"整体参考代码如下\",{\"1\":{\"441\":1}}],[\"整体就代表所有元素\",{\"1\":{\"417\":1}}],[\"整体的md5可以通过对整个数据表的所有记录进行md5哈希计算来获得\",{\"1\":{\"188\":1}}],[\"整体流程图\",{\"1\":{\"105\":1}}],[\"整型的包装类型对象\",{\"1\":{\"709\":1}}],[\"整型的取值范围是很容易得到的\",{\"1\":{\"326\":1}}],[\"整型包装类型对象相等的比较\",{\"0\":{\"709\":1}}],[\"整型包装类型对象之间的比较\",{\"1\":{\"708\":1}}],[\"整型除以整型结果仍然是整型\",{\"1\":{\"344\":1}}],[\"整型字面值常量\",{\"1\":{\"342\":1}}],[\"整型自然是占用内存空间越大\",{\"1\":{\"338\":1}}],[\"整型有四种\",{\"1\":{\"322\":1}}],[\"整型\",{\"0\":{\"322\":1},\"1\":{\"158\":2}}],[\"6v67l1olrebppwqhim0exe\",{\"1\":{\"1132\":1}}],[\"65536\",{\"1\":{\"1152\":1}}],[\"65535\",{\"1\":{\"338\":1,\"810\":1}}],[\"65\",{\"1\":{\"1132\":1}}],[\"62\",{\"1\":{\"1132\":2,\"1138\":1}}],[\"69\",{\"1\":{\"1104\":4,\"1110\":4,\"1111\":3,\"1112\":3,\"1132\":6,\"1134\":1}}],[\"68\",{\"1\":{\"978\":4,\"1132\":1}}],[\"63\",{\"1\":{\"1120\":1,\"1132\":1}}],[\"6379\",{\"1\":{\"768\":1}}],[\"632\",{\"1\":{\"324\":1}}],[\"6位\",{\"1\":{\"517\":1}}],[\"61\",{\"1\":{\"348\":1,\"801\":1,\"1132\":1}}],[\"64\",{\"1\":{\"978\":3,\"1132\":1}}],[\"64bit\",{\"1\":{\"326\":2}}],[\"64位\",{\"1\":{\"323\":1}}],[\"64个cpu\",{\"1\":{\"126\":1}}],[\"6条\",{\"1\":{\"163\":1}}],[\"67\",{\"1\":{\"153\":1,\"431\":1,\"801\":2,\"1132\":1}}],[\"66\",{\"1\":{\"740\":1,\"741\":1,\"1132\":2}}],[\"666\",{\"1\":{\"498\":1,\"545\":1,\"924\":1,\"958\":1}}],[\"6666666\",{\"1\":{\"1132\":2}}],[\"6666\",{\"1\":{\"153\":1}}],[\"664595\",{\"1\":{\"115\":2}}],[\"60s处于空闲状态的线程\",{\"1\":{\"880\":1}}],[\"600\",{\"1\":{\"222\":1,\"225\":1,\"229\":1}}],[\"60\",{\"1\":{\"142\":1,\"161\":4,\"162\":9,\"167\":1,\"348\":1,\"431\":1,\"801\":1,\"997\":2}}],[\"6\",{\"1\":{\"113\":1,\"124\":1,\"144\":1,\"158\":1,\"161\":1,\"168\":1,\"171\":2,\"192\":1,\"222\":1,\"225\":1,\"229\":1,\"230\":1,\"263\":1,\"278\":1,\"316\":1,\"350\":1,\"367\":1,\"441\":1,\"471\":1,\"606\":1,\"715\":1,\"717\":1,\"719\":1,\"833\":4,\"840\":2,\"867\":1,\"872\":1,\"953\":1,\"956\":1,\"958\":1,\"1016\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"渲染\",{\"1\":{\"113\":1,\"124\":1}}],[\"4kb\",{\"1\":{\"1149\":1}}],[\"4cf6\",{\"1\":{\"1132\":1}}],[\"4b8f\",{\"1\":{\"1120\":1}}],[\"4g\",{\"1\":{\"925\":1}}],[\"45\",{\"1\":{\"842\":1,\"867\":2,\"895\":1,\"1104\":1,\"1110\":1,\"1112\":1,\"1132\":2}}],[\"45个\",{\"1\":{\"263\":1}}],[\"4个抽象基类\",{\"0\":{\"783\":1}}],[\"46\",{\"1\":{\"776\":1,\"867\":2,\"904\":2,\"1132\":3,\"1140\":1,\"1150\":1}}],[\"4ms\",{\"1\":{\"741\":1}}],[\"44\",{\"1\":{\"740\":1,\"741\":1,\"1078\":1,\"1132\":3}}],[\"443\",{\"1\":{\"139\":1}}],[\"49\",{\"1\":{\"192\":1,\"895\":1,\"1040\":1,\"1117\":1,\"1132\":3}}],[\"4870\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"48\",{\"1\":{\"192\":1,\"472\":1,\"588\":2,\"884\":1,\"922\":1,\"1142\":1}}],[\"47<\",{\"1\":{\"234\":1,\"244\":1}}],[\"47\",{\"1\":{\"192\":1,\"741\":1,\"904\":1}}],[\"407d\",{\"1\":{\"1105\":2,\"1121\":2}}],[\"4000\",{\"1\":{\"817\":1}}],[\"403e38\",{\"1\":{\"326\":1}}],[\"40\",{\"1\":{\"278\":1,\"850\":1,\"867\":1,\"1040\":1}}],[\"40th\",{\"1\":{\"192\":1,\"1192\":1}}],[\"404\",{\"1\":{\"120\":1,\"127\":2}}],[\"4=12条数据\",{\"1\":{\"181\":1}}],[\"42\",{\"1\":{\"171\":3,\"838\":1,\"912\":1,\"1132\":1}}],[\"43\",{\"1\":{\"171\":3,\"794\":2,\"903\":2,\"1104\":4,\"1110\":4,\"1111\":3,\"1112\":3,\"1132\":16,\"1134\":1}}],[\"41\",{\"1\":{\"171\":1,\"776\":1,\"884\":1,\"924\":1,\"1112\":1,\"1132\":10}}],[\"4求加权平均分\",{\"1\":{\"162\":2}}],[\"4字节\",{\"1\":{\"153\":2,\"326\":2}}],[\"4字节来表示字符\",{\"1\":{\"149\":1}}],[\"4\",{\"0\":{\"1069\":1,\"1177\":1},\"1\":{\"113\":1,\"124\":1,\"132\":1,\"143\":1,\"144\":1,\"158\":2,\"161\":1,\"162\":3,\"168\":1,\"180\":2,\"187\":1,\"192\":2,\"196\":1,\"204\":1,\"234\":1,\"237\":1,\"240\":1,\"244\":1,\"251\":1,\"261\":1,\"263\":1,\"275\":2,\"278\":2,\"281\":2,\"286\":1,\"316\":1,\"344\":1,\"350\":1,\"359\":2,\"367\":1,\"441\":2,\"471\":1,\"606\":1,\"608\":1,\"655\":3,\"715\":1,\"717\":1,\"719\":1,\"790\":1,\"794\":1,\"806\":1,\"832\":2,\"833\":4,\"840\":2,\"850\":2,\"869\":1,\"872\":1,\"873\":1,\"952\":3,\"956\":2,\"969\":1,\"978\":5,\"1016\":6,\"1020\":1,\"1097\":2,\"1132\":1,\"1201\":2,\"1203\":2}}],[\"浏览器构造cookie\",{\"0\":{\"1140\":1},\"1\":{\"1139\":1}}],[\"浏览器地址栏不能写中文或一些特殊的字符\",{\"1\":{\"1137\":1}}],[\"浏览器期望从服务器获得正文的类型\",{\"1\":{\"1104\":1}}],[\"浏览器会代理用户发送http请求报文\",{\"1\":{\"124\":1}}],[\"浏览器会把这个东西显示在页面上\",{\"1\":{\"123\":1}}],[\"浏览器得到的信息\",{\"1\":{\"123\":1}}],[\"浏览器这边\",{\"1\":{\"121\":1}}],[\"浏览器类型\",{\"1\":{\"116\":1}}],[\"浏览器\",{\"1\":{\"116\":1,\"1110\":1,\"1137\":1,\"1139\":1,\"1149\":1,\"1160\":1}}],[\"浏览器所希望的语言种类\",{\"1\":{\"116\":1}}],[\"浏览器利用该头告诉服务器\",{\"1\":{\"116\":1}}],[\"浏览器能够进行解码的数据编码方式\",{\"1\":{\"116\":1}}],[\"浏览器通过这个头告诉服务器\",{\"1\":{\"116\":1}}],[\"浏览器告诉服务器\",{\"1\":{\"116\":1}}],[\"浏览器可以接收的类型\",{\"1\":{\"116\":1}}],[\"浏览器可接受的\",{\"1\":{\"116\":1}}],[\"浏览器设置了代理\",{\"1\":{\"115\":1}}],[\"浏览器发送请求时\",{\"1\":{\"115\":1}}],[\"浏览器发送http请求\",{\"1\":{\"113\":1}}],[\"浏览器缓存\",{\"1\":{\"113\":1}}],[\"有9个元素\",{\"1\":{\"1012\":1}}],[\"有5个线程\",{\"1\":{\"969\":1}}],[\"有多个请求\",{\"1\":{\"1130\":1}}],[\"有多个\",{\"1\":{\"953\":1}}],[\"有多少同学在18岁以下\",{\"1\":{\"951\":1}}],[\"有各种各样的子实现\",{\"1\":{\"950\":1}}],[\"有啥问题\",{\"1\":{\"950\":1}}],[\"有啥区别\",{\"1\":{\"413\":1}}],[\"有中文的情况\",{\"1\":{\"918\":1}}],[\"有能力的同学掌握\",{\"1\":{\"909\":1}}],[\"有包子生产者不能生产\",{\"1\":{\"867\":1}}],[\"有包子\",{\"1\":{\"867\":3}}],[\"有它自己的一套线程优先级\",{\"1\":{\"838\":1}}],[\"有个readline\",{\"1\":{\"821\":1}}],[\"有个同学入职了\",{\"1\":{\"147\":1}}],[\"有父子关系\",{\"1\":{\"754\":1}}],[\"有点类似于多分支if\",{\"1\":{\"754\":1}}],[\"有点类似于直接把一个成员内部类放进局部位置\",{\"1\":{\"633\":1}}],[\"有符号数的最大值\",{\"1\":{\"700\":1}}],[\"有符号整数\",{\"1\":{\"323\":1}}],[\"有什么特点\",{\"1\":{\"994\":1}}],[\"有什么注意事项\",{\"1\":{\"968\":1}}],[\"有什么需要注意的事项\",{\"1\":{\"956\":1}}],[\"有什么好处\",{\"1\":{\"942\":1,\"1182\":1}}],[\"有什么意义呢\",{\"1\":{\"696\":1}}],[\"有什么问题吗\",{\"1\":{\"590\":1}}],[\"有类似的作用\",{\"1\":{\"693\":1}}],[\"有两种设置的方式\",{\"1\":{\"1195\":1}}],[\"有两种解决方法\",{\"1\":{\"261\":1}}],[\"有两个情况\",{\"1\":{\"1014\":1}}],[\"有两个函数\",{\"1\":{\"688\":1}}],[\"有特殊需求\",{\"1\":{\"683\":1}}],[\"有详细的说明\",{\"1\":{\"666\":1}}],[\"有返回值两个参数的功能接口\",{\"1\":{\"654\":1}}],[\"有返回值一个参数的功能接口\",{\"1\":{\"654\":1}}],[\"有返回值无参数的功能接口\",{\"1\":{\"654\":1}}],[\"有且仅有一个必须要子类实现的抽象方法的接口\",{\"1\":{\"652\":1}}],[\"有且必须有一次\",{\"1\":{\"570\":1}}],[\"有极个别比较特殊的抽象方法\",{\"1\":{\"652\":1}}],[\"有权限后就可以创建对象了\",{\"1\":{\"629\":1}}],[\"有权限才行\",{\"1\":{\"551\":1}}],[\"有谁的引用访问的就是谁的\",{\"1\":{\"627\":1,\"628\":1}}],[\"有构造方法和构造代码块\",{\"1\":{\"636\":1}}],[\"有构造代码块\",{\"1\":{\"612\":1}}],[\"有构造器\",{\"1\":{\"612\":1}}],[\"有四个\",{\"1\":{\"620\":1}}],[\"有四个层次的字符集和校对规则\",{\"1\":{\"157\":1}}],[\"有四种访问权限级别\",{\"1\":{\"611\":1,\"622\":1}}],[\"有stagename属性和sing方法\",{\"1\":{\"540\":1}}],[\"有name属性和eat方法\",{\"1\":{\"540\":1}}],[\"有了ip地址和端口号\",{\"1\":{\"885\":1}}],[\"有了多态后\",{\"1\":{\"582\":2}}],[\"有了继承\",{\"1\":{\"525\":1}}],[\"有了外键之后\",{\"1\":{\"171\":1}}],[\"有姓名\",{\"1\":{\"519\":2}}],[\"有姓名属性\",{\"1\":{\"519\":1}}],[\"有必要时提供方法访问\",{\"1\":{\"516\":1}}],[\"有就有\",{\"1\":{\"503\":1}}],[\"有2个任务\",{\"1\":{\"828\":1}}],[\"有2个属性\",{\"1\":{\"478\":1}}],[\"有2个参数的构造方法执行了\",{\"1\":{\"465\":1}}],[\"有使用this调用单参构造器\",{\"1\":{\"468\":1}}],[\"有参构造\",{\"1\":{\"655\":1,\"959\":1}}],[\"有参构造方法\",{\"1\":{\"465\":1,\"1144\":2}}],[\"有参\",{\"1\":{\"466\":1}}],[\"有课程和年龄两个属性\",{\"1\":{\"463\":1}}],[\"有颜色\",{\"1\":{\"459\":1}}],[\"有默认的初始值\",{\"1\":{\"457\":1}}],[\"有无默认初始化不同\",{\"1\":{\"457\":2}}],[\"有三个类\",{\"1\":{\"1019\":1}}],[\"有三种格式\",{\"1\":{\"433\":1}}],[\"有三列\",{\"1\":{\"141\":1}}],[\"有序的时候\",{\"1\":{\"1026\":1}}],[\"有序的\",{\"1\":{\"993\":2}}],[\"有序\",{\"1\":{\"394\":1,\"962\":1,\"993\":1}}],[\"有序数组\",{\"1\":{\"220\":5}}],[\"有\",{\"1\":{\"388\":1,\"1012\":1}}],[\"有输入和输出\",{\"1\":{\"380\":1}}],[\"有时又称光标\",{\"1\":{\"955\":1}}],[\"有时需要传入数据\",{\"1\":{\"382\":1}}],[\"有时为了让程序更具有灵活性\",{\"1\":{\"351\":1}}],[\"有时候是想找出符合条件的\",{\"1\":{\"954\":1}}],[\"有时候是想统计个数\",{\"1\":{\"954\":1}}],[\"有时候发现\",{\"1\":{\"232\":1}}],[\"有时候\",{\"1\":{\"168\":1,\"620\":1}}],[\"有以下的三种提交方式\",{\"1\":{\"1194\":1}}],[\"有以下信息\",{\"1\":{\"1019\":1}}],[\"有以下分类\",{\"1\":{\"473\":1}}],[\"有以下案例\",{\"1\":{\"347\":1}}],[\"有以下表格\",{\"1\":{\"346\":1}}],[\"有以下规则\",{\"1\":{\"340\":1}}],[\"有如下方法\",{\"1\":{\"880\":1}}],[\"有如下赋值运算符和使用案例\",{\"1\":{\"345\":1}}],[\"有如下算术运算符和相关的例子\",{\"1\":{\"344\":1}}],[\"有效代码之前\",{\"1\":{\"503\":1}}],[\"有效数字16~17位\",{\"1\":{\"326\":1}}],[\"有效位数7~8位\",{\"1\":{\"326\":1}}],[\"有可能程序跑着跑着\",{\"1\":{\"283\":1}}],[\"有可能会发生冲突\",{\"1\":{\"1081\":1}}],[\"有可能会导致扩容\",{\"1\":{\"1016\":1}}],[\"有可能会无法\",{\"0\":{\"1015\":1}}],[\"有可能会造成不必要的回表\",{\"1\":{\"230\":1}}],[\"有可能会使用了默认的latin1\",{\"1\":{\"149\":1}}],[\"有自动生成id的场景下\",{\"1\":{\"273\":1}}],[\"有自研能力的公司使用较多\",{\"1\":{\"143\":1}}],[\"有些场景需要做文件上传\",{\"1\":{\"1120\":1}}],[\"有些场景是不完整的类加载的\",{\"1\":{\"571\":1}}],[\"有些子实现不允许存储null\",{\"1\":{\"980\":1}}],[\"有些子实现允许存储null\",{\"1\":{\"980\":1}}],[\"有些子实现是有序的\",{\"1\":{\"980\":1}}],[\"有些子实现无序\",{\"1\":{\"980\":1}}],[\"有些时候这本身就是一个用途\",{\"1\":{\"712\":1}}],[\"有些程序员喜欢在接口前加一个大写字母i来直接\",{\"1\":{\"596\":1}}],[\"有些类可能等到main方法执行到一半才触发类加载\",{\"1\":{\"546\":1}}],[\"有些同学对私有private的权限有疑问\",{\"1\":{\"509\":1}}],[\"有些机器在\",{\"1\":{\"307\":1}}],[\"有些条件下增加另外一种条件\",{\"1\":{\"263\":1}}],[\"有些情况下增加这种条件\",{\"1\":{\"263\":1}}],[\"有些人\",{\"1\":{\"126\":1}}],[\"有注解\",{\"1\":{\"253\":1}}],[\"有内置的别名\",{\"1\":{\"247\":1}}],[\"有很多种存储引擎\",{\"1\":{\"221\":1}}],[\"有3亿人都在用\",{\"1\":{\"172\":1}}],[\"有关系的一些表才需要这种多表设计\",{\"1\":{\"171\":1}}],[\"有的时候\",{\"1\":{\"1002\":1}}],[\"有的时候忘记了\",{\"1\":{\"215\":1}}],[\"有的是链表\",{\"1\":{\"955\":1}}],[\"有的话输出\",{\"1\":{\"776\":2}}],[\"有的资料里也称为类方法\",{\"1\":{\"473\":1}}],[\"有的资料里也称为类变量\",{\"1\":{\"473\":1}}],[\"有的同学\",{\"1\":{\"167\":1}}],[\"有的要注意留痕\",{\"1\":{\"150\":1}}],[\"有一条sql\",{\"1\":{\"232\":1}}],[\"有一张表\",{\"1\":{\"212\":1}}],[\"有一个属性load\",{\"1\":{\"1093\":1}}],[\"有一个方法叫play\",{\"1\":{\"1078\":1}}],[\"有一个类叫father\",{\"1\":{\"1078\":1}}],[\"有一个key\",{\"1\":{\"1008\":1}}],[\"有一个modcount\",{\"1\":{\"955\":1}}],[\"有一个数组长度是1000的\",{\"1\":{\"948\":1}}],[\"有一个汽车类\",{\"1\":{\"513\":1}}],[\"有一个比较大的缺点\",{\"1\":{\"336\":1}}],[\"有一个游标\",{\"1\":{\"202\":1}}],[\"有一个字符集和校对规则\",{\"1\":{\"157\":1}}],[\"有一些不知道的操作\",{\"1\":{\"1204\":1}}],[\"有一些不允许\",{\"1\":{\"996\":1}}],[\"有一些允许为null\",{\"1\":{\"996\":1}}],[\"有一些无序\",{\"1\":{\"996\":1}}],[\"有一些子接口有序\",{\"1\":{\"996\":1}}],[\"有一些特殊值\",{\"1\":{\"346\":1}}],[\"有一些需要使用缓存的场景\",{\"1\":{\"287\":1}}],[\"有一些情景可能会用到\",{\"1\":{\"256\":1}}],[\"有一些情况是不希望进行缓存\",{\"1\":{\"121\":1}}],[\"有一些字段\",{\"1\":{\"153\":1}}],[\"有一些排序规则不区分大小写\",{\"1\":{\"149\":1}}],[\"有一些四个字节的表示不了\",{\"1\":{\"149\":1}}],[\"有哪些常见的数据结构\",{\"1\":{\"947\":1}}],[\"有哪些优点和缺点\",{\"1\":{\"936\":1}}],[\"有哪些方法\",{\"1\":{\"662\":1}}],[\"有哪些列\",{\"1\":{\"155\":2}}],[\"有哪些字段\",{\"1\":{\"153\":1}}],[\"有人\",{\"1\":{\"149\":1}}],[\"有部分同学可能80端口号没法改\",{\"1\":{\"139\":1}}],[\"有这种做法时\",{\"1\":{\"693\":1}}],[\"有这种需求时\",{\"1\":{\"463\":1}}],[\"有这个文件夹\",{\"1\":{\"138\":1}}],[\"有这么多电脑\",{\"1\":{\"126\":1}}],[\"有针对性的做出响应\",{\"1\":{\"127\":1}}],[\"有没有冗余代码\",{\"1\":{\"590\":2}}],[\"有没有二维数组这种特殊的内存结构呢\",{\"1\":{\"430\":1}}],[\"有没有可能经过索引优化\",{\"1\":{\"230\":1}}],[\"有没有什么场景可以用它来做索引\",{\"1\":{\"220\":1}}],[\"有没有啥问题\",{\"1\":{\"123\":1}}],[\"有没有办法返回英语\",{\"1\":{\"116\":1}}],[\"有bug\",{\"1\":{\"120\":1}}],[\"有外国人\",{\"1\":{\"116\":1}}],[\"有几层模型\",{\"1\":{\"112\":1}}],[\"有七层的\",{\"1\":{\"112\":1}}],[\"超过190\",{\"1\":{\"1040\":1}}],[\"超过8\",{\"1\":{\"1016\":1}}],[\"超过8达到9个时候\",{\"1\":{\"1011\":1}}],[\"超高人\",{\"1\":{\"1040\":3}}],[\"超类\",{\"1\":{\"522\":1}}],[\"超市\",{\"1\":{\"141\":1}}],[\"超越了普通的文本\",{\"1\":{\"111\":1}}],[\"超文本\",{\"1\":{\"111\":1}}],[\"超文本传输协议\",{\"1\":{\"111\":1}}],[\"女娲造人是以自身为模板一样\",{\"1\":{\"446\":1}}],[\"女\",{\"1\":{\"110\":2}}],[\"陕西\",{\"1\":{\"110\":1}}],[\"男生和女生的人数\",{\"1\":{\"997\":1}}],[\"男\",{\"1\":{\"110\":3}}],[\"河南省\",{\"1\":{\"171\":1}}],[\"河南\",{\"1\":{\"110\":3,\"158\":1}}],[\"景天叔叔\",{\"1\":{\"953\":4}}],[\"景天\",{\"1\":{\"110\":1,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2}}],[\"实例\",{\"1\":{\"1022\":5}}],[\"实例具有指定的初始容量和指定的加载因子\",{\"1\":{\"984\":1}}],[\"实例具有指定的初始容量和默认的加载因子\",{\"1\":{\"984\":1}}],[\"实例的默认初始容量是\",{\"1\":{\"984\":1}}],[\"实例的容量调整为列表的当前大小\",{\"1\":{\"964\":1}}],[\"实例的容量\",{\"1\":{\"964\":1}}],[\"实例的浅表副本\",{\"1\":{\"964\":1,\"1026\":1}}],[\"实例化注解时\",{\"1\":{\"924\":1}}],[\"实例化对象\",{\"1\":{\"920\":1}}],[\"实例变量\",{\"1\":{\"477\":1}}],[\"实测下来\",{\"1\":{\"426\":1,\"571\":1}}],[\"实测三目运算符的运算效率要比if稍微高一点\",{\"1\":{\"349\":1}}],[\"实参列表\",{\"1\":{\"465\":1,\"466\":1,\"541\":2}}],[\"实参\",{\"1\":{\"453\":1,\"466\":1,\"489\":1,\"653\":1,\"938\":1}}],[\"实参能够自动类型转换去匹配形参的数据类型\",{\"1\":{\"389\":1}}],[\"实参的自动类型转换在重载中的应用\",{\"0\":{\"389\":1}}],[\"实参的自动类型转换\",{\"1\":{\"384\":1}}],[\"实参和形参的数据类型要一一对应\",{\"1\":{\"382\":1}}],[\"实线表示转换过程中不会有精度问题\",{\"1\":{\"338\":1}}],[\"实线虚线都表示能够发生自动类型转换\",{\"1\":{\"338\":1}}],[\"实时推荐等\",{\"1\":{\"303\":1}}],[\"实现其抽象方法service\",{\"1\":{\"1085\":2}}],[\"实现不同的业务\",{\"1\":{\"1078\":1}}],[\"实现一下这个\",{\"1\":{\"997\":1}}],[\"实现一下\",{\"1\":{\"995\":1}}],[\"实现一个功能更强大的计算器\",{\"1\":{\"390\":1}}],[\"实现在下标增加到数组最后一个元素时\",{\"1\":{\"976\":1}}],[\"实现callable接口\",{\"0\":{\"881\":1}}],[\"实现comparable接口\",{\"1\":{\"740\":2}}],[\"实现换行功能\",{\"1\":{\"789\":1}}],[\"实现文件追加功能\",{\"1\":{\"789\":1}}],[\"实现此接口的类\",{\"1\":{\"740\":1}}],[\"实现此接口的对象列表\",{\"1\":{\"740\":1}}],[\"实现接口可以\",{\"1\":{\"719\":1}}],[\"实现接口的类\",{\"1\":{\"598\":1}}],[\"实现空接口虽然没有得到任何成员\",{\"1\":{\"696\":1}}],[\"实现多继承\",{\"1\":{\"643\":1}}],[\"实现外部的类\",{\"1\":{\"641\":2}}],[\"实现真正意义上的多继承\",{\"1\":{\"600\":1}}],[\"实现者可以隐藏功能实现的细节\",{\"1\":{\"515\":1}}],[\"实现\",{\"1\":{\"459\":1,\"599\":2}}],[\"实现日常开发中最常见的\",{\"1\":{\"420\":1}}],[\"实现以下功能\",{\"1\":{\"377\":1}}],[\"实现的字符串拼接\",{\"1\":{\"738\":2}}],[\"实现的\",{\"1\":{\"312\":1}}],[\"实现功能可能会更加方便快捷\",{\"1\":{\"303\":1}}],[\"实现序列化接口\",{\"1\":{\"286\":1}}],[\"实现了空接口\",{\"1\":{\"696\":2}}],[\"实现了哪些功能\",{\"1\":{\"213\":1}}],[\"实现了免费开源\",{\"1\":{\"144\":1}}],[\"实现了班主任和南风老师之间的信息传递和宿舍分配任务\",{\"1\":{\"110\":1}}],[\"实体\",{\"1\":{\"469\":1}}],[\"实体就不完整\",{\"1\":{\"169\":1}}],[\"实体完整性\",{\"0\":{\"169\":1}}],[\"实际存储的数据长度\",{\"1\":{\"954\":1}}],[\"实际存了3个元素\",{\"1\":{\"954\":1}}],[\"实际值\",{\"1\":{\"743\":2}}],[\"实际常量\",{\"1\":{\"656\":1}}],[\"实际代码中\",{\"1\":{\"536\":1}}],[\"实际代码书写角度解释\",{\"1\":{\"523\":1}}],[\"实际为ismale\",{\"1\":{\"518\":1}}],[\"实际就是没有限制访问权限\",{\"1\":{\"509\":1}}],[\"实际用途\",{\"0\":{\"490\":1,\"495\":1}}],[\"实际开发过程中\",{\"1\":{\"1121\":1}}],[\"实际开发的基本需求就是基于数据库的\",{\"1\":{\"420\":1}}],[\"实际开发中十分常用\",{\"1\":{\"657\":1}}],[\"实际开发中的常量多使用它\",{\"1\":{\"571\":1}}],[\"实际开发中不要随意使用递归\",{\"1\":{\"442\":1}}],[\"实际开发中很少直接使用数组\",{\"1\":{\"394\":1}}],[\"实际开发中\",{\"1\":{\"360\":1,\"559\":1,\"566\":1,\"587\":1,\"598\":1,\"600\":1,\"625\":1,\"675\":1,\"683\":1}}],[\"实际开发中整数往往都是int类型的\",{\"1\":{\"322\":1}}],[\"实际开发中short使用频率也不高\",{\"1\":{\"322\":1}}],[\"实际参数列表\",{\"1\":{\"383\":1}}],[\"实际是存储了一个16位的无符号正整数值\",{\"1\":{\"324\":1}}],[\"实际是通过存储一个数值来映射对应的字符\",{\"1\":{\"324\":1}}],[\"实际工作中很少采用该级别\",{\"1\":{\"211\":1}}],[\"实际上都存储到底层持有的hashmap的key上\",{\"1\":{\"983\":1}}],[\"实际上都是这个枚举类型的\",{\"1\":{\"719\":1}}],[\"实际上编译器还自己创建了一个values\",{\"1\":{\"719\":1}}],[\"实际上当你查看源码时就会发现\",{\"1\":{\"696\":1}}],[\"实际上根本达不成这种目的\",{\"1\":{\"689\":1}}],[\"实际上有两种选择\",{\"1\":{\"675\":1}}],[\"实际上在多数情况下\",{\"1\":{\"654\":1}}],[\"实际上接口是抽象的\",{\"1\":{\"598\":1}}],[\"实际上如果一个抽象类\",{\"1\":{\"592\":1}}],[\"实际上如果没有继承\",{\"1\":{\"537\":1}}],[\"实际上是需要传入该枚举类型的对象\",{\"1\":{\"719\":1}}],[\"实际上是有的\",{\"1\":{\"590\":1}}],[\"实际上是jvm\",{\"1\":{\"398\":1}}],[\"实际上不管是\",{\"1\":{\"557\":1}}],[\"实际上不同对象\",{\"1\":{\"453\":1}}],[\"实际上可以总结为\",{\"1\":{\"551\":1}}],[\"实际上完全可以不导包去使用不同包下类\",{\"1\":{\"503\":1}}],[\"实际上所有构造方法重载的方法都应该写在一起\",{\"1\":{\"469\":1}}],[\"实际上只有默认值null\",{\"1\":{\"434\":1}}],[\"实际上来说\",{\"1\":{\"425\":1}}],[\"实际上我们使用的无参方法更多一些\",{\"1\":{\"1151\":1}}],[\"实际上我们并没有这样做\",{\"1\":{\"1143\":1}}],[\"实际上我们不应该这么去思考\",{\"1\":{\"406\":1}}],[\"实际上我们在使用的时候\",{\"1\":{\"201\":1}}],[\"实际上也是由程序员给出的\",{\"1\":{\"397\":1}}],[\"实际上这个方法的调用\",{\"1\":{\"389\":1}}],[\"实际上\",{\"1\":{\"383\":1,\"431\":1,\"592\":1,\"598\":2,\"681\":1,\"838\":1}}],[\"实际上转义字符可以表示任何一个普通字符\",{\"1\":{\"355\":1}}],[\"实际上仅仅声明变量那行代码在java中是没有意义的\",{\"1\":{\"334\":1}}],[\"实际上就是定义一个一个的常量\",{\"1\":{\"717\":1}}],[\"实际上就是定义了一种全新的数据类型\",{\"1\":{\"455\":1}}],[\"实际上就是外部类继承了多个类的成员\",{\"1\":{\"643\":1}}],[\"实际上就是遍历二维数组\",{\"1\":{\"441\":1}}],[\"实际上就是交换它们指向的数组\",{\"1\":{\"426\":1}}],[\"实际上就是操作返回值\",{\"1\":{\"383\":1}}],[\"实际上就是我们编写程序的过程\",{\"1\":{\"319\":1}}],[\"实际上就是根据官方jdk源码中文档注释\",{\"1\":{\"318\":1}}],[\"实际上没有和数据存储在一起\",{\"1\":{\"227\":1}}],[\"实际上实现类是\",{\"1\":{\"200\":1}}],[\"实际长度+1\",{\"1\":{\"153\":1}}],[\"实际的文章内容\",{\"1\":{\"48\":1}}],[\"宿舍分配\",{\"1\":{\"110\":1}}],[\"按链表的方式进行比较\",{\"1\":{\"1016\":1}}],[\"按简单的面向行的格式从输入字符流中读取属性列表\",{\"1\":{\"918\":1}}],[\"按顺序执行\",{\"1\":{\"828\":1}}],[\"按流向分\",{\"1\":{\"782\":1}}],[\"按需实现里面的抽象方法\",{\"1\":{\"599\":1}}],[\"按需实现抽象方法\",{\"1\":{\"598\":1,\"599\":1}}],[\"按位异或\",{\"1\":{\"350\":1}}],[\"按位异或赋值操作符\",{\"1\":{\"345\":1}}],[\"按位右移补零操作符\",{\"1\":{\"348\":1}}],[\"按位右移运算符\",{\"1\":{\"348\":1}}],[\"按位左移运算符\",{\"1\":{\"348\":1}}],[\"按位取反运算符翻转操作数的每一位\",{\"1\":{\"348\":1}}],[\"按位或\",{\"1\":{\"348\":1,\"350\":1}}],[\"按位或赋值操作符\",{\"1\":{\"345\":1}}],[\"按位与\",{\"1\":{\"348\":1,\"350\":1}}],[\"按位与赋值运算符\",{\"1\":{\"345\":1}}],[\"按位置传值\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"按位传值\",{\"1\":{\"251\":1,\"254\":1}}],[\"按班级查看平均分\",{\"1\":{\"168\":1}}],[\"按照我们之前的写法\",{\"1\":{\"1130\":1}}],[\"按照这个方式\",{\"1\":{\"1050\":2}}],[\"按照这种对应关系f\",{\"1\":{\"679\":1,\"999\":1}}],[\"按照红黑树的方式进行比较\",{\"1\":{\"1016\":1}}],[\"按照一定的顺序\",{\"1\":{\"953\":1}}],[\"按照任务的提交顺序\",{\"1\":{\"880\":2}}],[\"按照数据类型分\",{\"1\":{\"782\":1}}],[\"按照分数从高到低排序\",{\"1\":{\"740\":1}}],[\"按照年龄从大到小进行排序\",{\"1\":{\"740\":1}}],[\"按照年龄从小到大进行排序\",{\"1\":{\"740\":1,\"741\":1}}],[\"按照字典序\",{\"1\":{\"739\":1}}],[\"按照空格进行分割\",{\"1\":{\"739\":1}}],[\"按照空格拆分每个学生的具体信息\",{\"1\":{\"110\":1}}],[\"按照pattern格式编写的日期字符串\",{\"1\":{\"726\":1}}],[\"按照上述的规则\",{\"1\":{\"717\":1}}],[\"按照上述构想我们首先把方法的方法体去掉\",{\"1\":{\"591\":1}}],[\"按照以上规则重写equals方法\",{\"1\":{\"674\":1}}],[\"按照以往的经验\",{\"1\":{\"509\":1}}],[\"按照族谱一样把父类放在上面\",{\"1\":{\"529\":1}}],[\"按照代码的书写顺序从上往下执行\",{\"1\":{\"546\":1}}],[\"按照代码的书写顺序从上到下执行\",{\"1\":{\"488\":1}}],[\"按照代码的书写顺序去执行\",{\"1\":{\"494\":1}}],[\"按照类中构造代码块和显式赋值的代码书写顺序\",{\"1\":{\"489\":1}}],[\"按照从上到下的顺序来看的话\",{\"1\":{\"487\":1}}],[\"按照之前我们的做法\",{\"1\":{\"463\":1}}],[\"按照命名规范与约定进行命名\",{\"1\":{\"313\":1}}],[\"按照班级分组\",{\"1\":{\"167\":1,\"168\":1}}],[\"按照某个\",{\"1\":{\"167\":1}}],[\"按语文0\",{\"1\":{\"162\":2}}],[\"按下快捷键选择重写hashcode方法后\",{\"1\":{\"683\":1}}],[\"按下\",{\"1\":{\"36\":1,\"38\":1,\"40\":1}}],[\"再添加到\",{\"1\":{\"1203\":1}}],[\"再答细节\",{\"1\":{\"1020\":1}}],[\"再操作这个数据\",{\"0\":{\"1015\":1}}],[\"再取异或\",{\"1\":{\"1008\":1}}],[\"再访问sublist的对象\",{\"1\":{\"960\":1}}],[\"再存储到物理空间中\",{\"1\":{\"957\":1}}],[\"再调用原有集合类的remove方法\",{\"1\":{\"956\":1}}],[\"再同一个对象\",{\"1\":{\"869\":1}}],[\"再加一把锁\",{\"1\":{\"867\":1}}],[\"再通知我\",{\"1\":{\"828\":1}}],[\"再判断是否是\",{\"1\":{\"776\":1}}],[\"再判断是否是目标文件\",{\"1\":{\"776\":1}}],[\"再回去执行catch中return\",{\"1\":{\"760\":1}}],[\"再string\",{\"1\":{\"732\":2}}],[\"再直接赋值\",{\"1\":{\"732\":1}}],[\"再构造\",{\"1\":{\"732\":1}}],[\"再啰嗦一点就是\",{\"1\":{\"724\":1}}],[\"再循环到int类型最大值\",{\"1\":{\"700\":1}}],[\"再说\",{\"1\":{\"683\":1}}],[\"再强调一下\",{\"1\":{\"652\":1}}],[\"再要有静态内部类权限\",{\"1\":{\"629\":1}}],[\"再创建成员内部类对象\",{\"1\":{\"616\":1}}],[\"再转换回子类类型的引用\",{\"1\":{\"583\":1}}],[\"再去修改原有集合\",{\"1\":{\"955\":1}}],[\"再去选择学习一下\",{\"1\":{\"721\":1}}],[\"再去看代码首行有没有显式调用另一个构造器\",{\"1\":{\"546\":1}}],[\"再去查询一级缓存\",{\"1\":{\"286\":1}}],[\"再让c来继承a\",{\"1\":{\"533\":1}}],[\"再后来\",{\"1\":{\"530\":1}}],[\"再想通过智能导包导入别的包下的student类是无法完成的\",{\"1\":{\"504\":1}}],[\"再开始其余赋值操作\",{\"1\":{\"489\":1}}],[\"再执行两参构造器\",{\"1\":{\"471\":1}}],[\"再复习一下如果方法的参数是需要一个对象\",{\"1\":{\"470\":1}}],[\"再进行成员变量的赋值\",{\"1\":{\"463\":1}}],[\"再进行计算\",{\"1\":{\"341\":1}}],[\"再用其它引用访问会得到修改后的结果\",{\"1\":{\"456\":1}}],[\"再根据m\",{\"1\":{\"438\":1}}],[\"再根据查询到的主键值\",{\"1\":{\"233\":1}}],[\"再自增自减\",{\"1\":{\"344\":1}}],[\"再参与后续运算或者赋值\",{\"1\":{\"344\":1}}],[\"再以sqlsessionfactory的实例生产sqlsession实例对象的\",{\"1\":{\"234\":1}}],[\"再往后拿\",{\"1\":{\"230\":1}}],[\"再到主键索引树上找到k=5的记录\",{\"1\":{\"230\":1}}],[\"再到id索引树查到id=300对应的行\",{\"1\":{\"230\":1}}],[\"再对比分析\",{\"1\":{\"220\":1}}],[\"再对表进行各种操作\",{\"1\":{\"152\":1}}],[\"再按照第二列进行排序\",{\"1\":{\"166\":1}}],[\"再重新建一个表\",{\"1\":{\"157\":1}}],[\"再次访问\",{\"1\":{\"1093\":1}}],[\"再次还需要成员内部类的访问权限\",{\"1\":{\"617\":1}}],[\"再次输出两个数组的名及元素\",{\"1\":{\"409\":1}}],[\"再次输出数组名及元素\",{\"1\":{\"409\":1}}],[\"再次分别输出数组名及元素\",{\"1\":{\"409\":1}}],[\"再次执行一次循环体语句\",{\"1\":{\"364\":1}}],[\"再次执行布尔表达式进行条件判断\",{\"1\":{\"362\":1,\"364\":1}}],[\"再次通过操作系统缓存查找\",{\"1\":{\"124\":1}}],[\"再次点击即可缩小\",{\"1\":{\"40\":1}}],[\"再使用split\",{\"1\":{\"110\":1}}],[\"南风老师根据学生的性别信息进行宿舍分配\",{\"1\":{\"110\":1}}],[\"南风老师可以取得姓名\",{\"1\":{\"110\":1}}],[\"南风老师可以使用split\",{\"1\":{\"110\":1}}],[\"南风老师在接收到数据后\",{\"1\":{\"110\":1}}],[\"来写一个例子\",{\"1\":{\"1156\":1}}],[\"来看一下这个请求的响应报文\",{\"1\":{\"1142\":1}}],[\"来看一下myisam这种存储引擎是怎样存储数据的\",{\"1\":{\"222\":1}}],[\"来实现其方法\",{\"1\":{\"1085\":1}}],[\"来实现的\",{\"1\":{\"506\":1}}],[\"来避免每一次出队列都需要让所有数据都挪动一遍\",{\"1\":{\"976\":1}}],[\"来模拟头和尾\",{\"1\":{\"970\":1}}],[\"来模拟数据库\",{\"1\":{\"420\":1}}],[\"来自普通队列\",{\"1\":{\"968\":1}}],[\"来自list的\",{\"1\":{\"968\":1}}],[\"来自collection\",{\"1\":{\"968\":1}}],[\"来让自己可以产生协变的效果\",{\"1\":{\"944\":1}}],[\"来指定类型\",{\"1\":{\"939\":1}}],[\"来产生学生对象\",{\"1\":{\"924\":1}}],[\"来定义我们自己定义的注解的保留级别\",{\"1\":{\"924\":1}}],[\"来喝药\",{\"1\":{\"808\":2}}],[\"来继承\",{\"1\":{\"641\":1}}],[\"来保障强转的安全性\",{\"1\":{\"586\":1}}],[\"来保证数据的正确性\",{\"1\":{\"171\":1}}],[\"来决定行为\",{\"1\":{\"581\":1}}],[\"来决定\",{\"1\":{\"558\":1,\"559\":1}}],[\"来决定了\",{\"1\":{\"558\":1}}],[\"来决定的\",{\"1\":{\"551\":1,\"552\":1,\"557\":1}}],[\"来访问student从object类继承过来的clone方法\",{\"1\":{\"538\":1}}],[\"来调用clone方法\",{\"1\":{\"538\":1}}],[\"来进行操作\",{\"1\":{\"1093\":1}}],[\"来进行servlet的开发\",{\"1\":{\"1085\":1}}],[\"来进行测试操作\",{\"1\":{\"535\":1}}],[\"来进行占位\",{\"1\":{\"255\":1}}],[\"来判断调用哪个构造器\",{\"1\":{\"465\":1}}],[\"来和同名局部变量做区分\",{\"1\":{\"461\":1}}],[\"来表示访问同名成员变量\",{\"1\":{\"461\":1}}],[\"来表示字符\",{\"1\":{\"324\":1}}],[\"来展示这一过程\",{\"1\":{\"456\":1}}],[\"来存储一组具有相同类型的数据的结构\",{\"1\":{\"394\":1}}],[\"来存储查询的信息\",{\"1\":{\"283\":1}}],[\"来完成子类对象初始化的方式称之为\",{\"1\":{\"541\":1}}],[\"来完成了\",{\"1\":{\"463\":1}}],[\"来完成求两个int类型数值的和\",{\"1\":{\"383\":1}}],[\"来完成这些需求\",{\"1\":{\"375\":1}}],[\"来帮助我们实现这种\",{\"1\":{\"357\":1}}],[\"来使用属性\",{\"1\":{\"254\":1}}],[\"来代表第一个参数\",{\"1\":{\"254\":1}}],[\"来取值\",{\"1\":{\"250\":2,\"252\":3,\"253\":2,\"256\":1}}],[\"来唯一标识这条sql\",{\"1\":{\"234\":1}}],[\"来处理\",{\"1\":{\"206\":1}}],[\"来执行sql语句\",{\"1\":{\"195\":1}}],[\"来尽量的让每一列保持原子性\",{\"1\":{\"176\":1}}],[\"来查看备注\",{\"1\":{\"171\":1}}],[\"来按照换行符拆分每一行数据\",{\"1\":{\"110\":1}}],[\"来解析相对路径名\",{\"1\":{\"767\":1}}],[\"来解析\",{\"1\":{\"54\":1,\"128\":1}}],[\"nmggzpzfs\",{\"1\":{\"1132\":1}}],[\"nkp4d06\",{\"1\":{\"1132\":1}}],[\"n0\",{\"1\":{\"1120\":1}}],[\"ninhr3pxig38\",{\"1\":{\"1132\":1}}],[\"nickname\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":20}}],[\"nianling\",{\"1\":{\"316\":1}}],[\"nt\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"nthreads\",{\"1\":{\"880\":1}}],[\"ns\",{\"1\":{\"1097\":3}}],[\"nn\",{\"1\":{\"1028\":1}}],[\"n>=1\",{\"1\":{\"442\":1}}],[\"n+sum\",{\"1\":{\"442\":1}}],[\"n未知\",{\"1\":{\"438\":1}}],[\"n的取值获取相应位置的元素\",{\"1\":{\"438\":1}}],[\"n的取值\",{\"1\":{\"438\":1}}],[\"n表示在指定一维数组中元素的位置\",{\"1\":{\"438\":2}}],[\"n代表二维数组当中\",{\"1\":{\"434\":1}}],[\"nbbbc\",{\"1\":{\"356\":1}}],[\"n称之为阶码\",{\"1\":{\"323\":1}}],[\"n是指数\",{\"1\":{\"323\":1}}],[\"navigate\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"navigablekeyset\",{\"1\":{\"1026\":1}}],[\"navigableset\",{\"1\":{\"1026\":2}}],[\"navigableset<k>\",{\"1\":{\"1026\":2}}],[\"navigableset<e>\",{\"1\":{\"993\":2}}],[\"navigablemap<k\",{\"1\":{\"1026\":4}}],[\"navicat\",{\"0\":{\"188\":1}}],[\"nan\",{\"1\":{\"675\":1}}],[\"nationality\",{\"1\":{\"553\":3}}],[\"native表示该方法是一个本地方法\",{\"1\":{\"660\":1}}],[\"native\",{\"1\":{\"312\":1,\"403\":1,\"660\":1,\"677\":1,\"692\":1,\"925\":1,\"954\":1}}],[\"name为username\",{\"1\":{\"1147\":1}}],[\"name>username<\",{\"1\":{\"1097\":1}}],[\"name>\",{\"1\":{\"1097\":3}}],[\"name>hello<\",{\"1\":{\"1097\":2}}],[\"namelimit\",{\"1\":{\"924\":6}}],[\"namefield\",{\"1\":{\"920\":4,\"922\":2,\"924\":3}}],[\"name和int\",{\"1\":{\"684\":1}}],[\"names\",{\"1\":{\"258\":1}}],[\"namespace级别\",{\"1\":{\"286\":1}}],[\"namespace=\",{\"1\":{\"234\":1,\"276\":2}}],[\"namespace\",{\"1\":{\"234\":3}}],[\"name索引树上找\",{\"1\":{\"233\":1}}],[\"name是唯一的\",{\"1\":{\"209\":1}}],[\"name的表\",{\"1\":{\"154\":1}}],[\"name2\",{\"1\":{\"153\":1}}],[\"name这个库\",{\"1\":{\"152\":1}}],[\"name\",{\"1\":{\"128\":6,\"144\":2,\"148\":2,\"149\":9,\"150\":1,\"151\":1,\"152\":2,\"153\":7,\"154\":1,\"155\":3,\"156\":11,\"157\":3,\"158\":15,\"159\":5,\"160\":1,\"161\":2,\"162\":5,\"165\":4,\"167\":5,\"168\":7,\"169\":6,\"170\":2,\"171\":9,\"180\":1,\"188\":1,\"196\":1,\"197\":4,\"204\":4,\"209\":9,\"214\":3,\"220\":1,\"222\":1,\"225\":1,\"232\":8,\"233\":8,\"234\":3,\"237\":2,\"239\":2,\"244\":1,\"247\":4,\"251\":4,\"252\":7,\"253\":7,\"254\":6,\"255\":8,\"256\":1,\"257\":4,\"258\":2,\"259\":1,\"261\":4,\"263\":4,\"265\":2,\"267\":2,\"271\":9,\"273\":2,\"274\":2,\"275\":2,\"276\":2,\"277\":4,\"278\":3,\"279\":4,\"280\":7,\"281\":4,\"282\":4,\"283\":15,\"315\":1,\"316\":1,\"450\":1,\"458\":1,\"465\":1,\"467\":4,\"468\":5,\"469\":23,\"471\":6,\"472\":5,\"474\":6,\"478\":2,\"498\":9,\"517\":3,\"594\":12,\"655\":6,\"669\":7,\"713\":5,\"715\":6,\"717\":6,\"719\":3,\"740\":6,\"741\":6,\"788\":2,\"794\":1,\"824\":8,\"833\":7,\"838\":2,\"841\":2,\"867\":10,\"904\":5,\"910\":2,\"920\":5,\"921\":4,\"922\":9,\"923\":4,\"924\":6,\"939\":2,\"944\":1,\"997\":1,\"1009\":1,\"1019\":2,\"1028\":4,\"1040\":1,\"1086\":1,\"1094\":2,\"1095\":2,\"1097\":1,\"1120\":1,\"1143\":2,\"1144\":1,\"1148\":2,\"1195\":2}}],[\"name=lilei\",{\"1\":{\"1138\":1}}],[\"name=\",{\"1\":{\"115\":1,\"158\":1,\"159\":1,\"184\":2,\"215\":10,\"220\":1,\"233\":3,\"234\":4,\"244\":5,\"246\":28,\"248\":12,\"249\":1,\"283\":1,\"286\":1,\"669\":1,\"715\":1,\"717\":1,\"740\":1,\"741\":1,\"824\":1,\"867\":2,\"904\":1,\"922\":1,\"1104\":3,\"1119\":2,\"1120\":6}}],[\"numelements\",{\"1\":{\"978\":7}}],[\"num4\",{\"1\":{\"573\":2}}],[\"num3\",{\"1\":{\"573\":3}}],[\"num2\",{\"1\":{\"383\":5,\"573\":2}}],[\"num1\",{\"1\":{\"383\":5,\"573\":3}}],[\"numstr\",{\"1\":{\"352\":2}}],[\"num的作用域是整个main方法\",{\"1\":{\"331\":1}}],[\"num\",{\"1\":{\"316\":1,\"331\":2,\"352\":4,\"425\":2,\"564\":7,\"619\":3,\"703\":1,\"881\":5,\"924\":1}}],[\"numbers\",{\"1\":{\"948\":1}}],[\"number>\",{\"1\":{\"944\":1}}],[\"numberformatexception\",{\"1\":{\"748\":1}}],[\"number\",{\"1\":{\"164\":5,\"701\":6,\"944\":4,\"954\":1}}],[\"null没有办法比较大小\",{\"1\":{\"1024\":1}}],[\"null数组\",{\"1\":{\"415\":1}}],[\"nullpointerexceptione\",{\"1\":{\"412\":1}}],[\"nullpointerexception\",{\"1\":{\"412\":1,\"747\":1,\"748\":1,\"754\":1,\"978\":1}}],[\"null既不是对象也不是任何一种数据类型\",{\"1\":{\"407\":1}}],[\"null可以重复\",{\"1\":{\"170\":1}}],[\"null不是数据类型\",{\"1\":{\"170\":1}}],[\"null约束\",{\"1\":{\"170\":1}}],[\"null来单独处理null\",{\"1\":{\"162\":1}}],[\"null\",{\"1\":{\"127\":3,\"158\":2,\"162\":2,\"170\":12,\"180\":4,\"203\":4,\"205\":2,\"206\":2,\"207\":2,\"213\":1,\"214\":1,\"222\":2,\"225\":2,\"229\":2,\"233\":1,\"244\":1,\"264\":2,\"268\":3,\"269\":3,\"271\":8,\"275\":4,\"413\":1,\"720\":2,\"789\":2,\"814\":1,\"821\":1,\"844\":2,\"851\":1,\"867\":5,\"880\":1,\"884\":3,\"912\":1,\"923\":1,\"941\":3,\"942\":1,\"954\":2,\"968\":4,\"972\":2,\"978\":1,\"1008\":4,\"1009\":3,\"1016\":4,\"1026\":2,\"1113\":2,\"1116\":2,\"1131\":1,\"1132\":1,\"1148\":1,\"1159\":3}}],[\"nested\",{\"1\":{\"623\":4}}],[\"nextelement\",{\"1\":{\"1112\":2,\"1117\":1}}],[\"nextindex\",{\"1\":{\"959\":1}}],[\"nextint\",{\"1\":{\"352\":3,\"353\":3,\"764\":1,\"867\":2}}],[\"nextline\",{\"1\":{\"352\":3,\"353\":3,\"730\":1,\"738\":1,\"825\":2,\"894\":2,\"895\":1,\"903\":1}}],[\"next\",{\"1\":{\"197\":1,\"202\":1,\"204\":2,\"214\":1,\"234\":1,\"353\":3,\"949\":1,\"955\":9,\"956\":6,\"959\":1,\"1007\":1,\"1009\":1,\"1016\":2,\"1118\":2}}],[\"newinstance实例化对象\",{\"1\":{\"924\":1}}],[\"newinstance\",{\"1\":{\"919\":4,\"920\":1,\"921\":1,\"922\":1,\"923\":1,\"924\":1,\"1107\":1,\"1108\":2,\"1109\":3,\"1118\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"880\":1}}],[\"newstr\",{\"1\":{\"738\":2,\"739\":2}}],[\"newfixedthreadpool\",{\"1\":{\"880\":2,\"903\":1}}],[\"newfood\",{\"1\":{\"867\":4}}],[\"newcachedthreadpool\",{\"1\":{\"880\":2}}],[\"newline\",{\"1\":{\"808\":3}}],[\"new一个新的对象返回\",{\"1\":{\"706\":1}}],[\"new表示创建对象\",{\"1\":{\"647\":1}}],[\"new对象\",{\"1\":{\"631\":1}}],[\"new对象时\",{\"1\":{\"546\":1}}],[\"new对象过程中\",{\"1\":{\"489\":1}}],[\"new直接创建该类的对象\",{\"1\":{\"476\":1}}],[\"new关键字去创建对象的时候\",{\"1\":{\"465\":1}}],[\"new关键字表示在堆上开辟空间创建对象\",{\"1\":{\"452\":1}}],[\"new出来的东西\",{\"1\":{\"403\":1}}],[\"new是一个关键字\",{\"1\":{\"397\":1}}],[\"newdemo\",{\"1\":{\"383\":1}}],[\"new\",{\"1\":{\"127\":11,\"128\":3,\"156\":2,\"192\":1,\"199\":1,\"203\":2,\"209\":2,\"213\":6,\"214\":3,\"215\":1,\"216\":2,\"217\":4,\"234\":3,\"237\":1,\"244\":2,\"268\":1,\"269\":1,\"271\":12,\"273\":1,\"274\":1,\"312\":1,\"352\":3,\"353\":1,\"397\":1,\"398\":2,\"434\":5,\"441\":2,\"452\":2,\"459\":1,\"460\":2,\"463\":3,\"465\":4,\"467\":1,\"468\":1,\"469\":1,\"471\":3,\"472\":3,\"474\":3,\"478\":4,\"479\":4,\"480\":1,\"481\":1,\"483\":3,\"491\":1,\"498\":8,\"526\":2,\"538\":5,\"545\":1,\"564\":4,\"572\":2,\"573\":2,\"585\":2,\"588\":3,\"606\":4,\"616\":4,\"617\":2,\"629\":1,\"647\":1,\"655\":8,\"663\":4,\"669\":1,\"684\":2,\"690\":1,\"696\":1,\"703\":1,\"704\":1,\"706\":3,\"707\":8,\"710\":1,\"711\":2,\"715\":7,\"719\":8,\"729\":5,\"730\":1,\"732\":7,\"734\":3,\"735\":2,\"738\":1,\"739\":4,\"740\":5,\"741\":8,\"743\":1,\"744\":1,\"757\":1,\"764\":2,\"769\":5,\"771\":8,\"776\":2,\"777\":3,\"788\":3,\"789\":5,\"790\":6,\"794\":10,\"795\":4,\"801\":2,\"806\":6,\"807\":1,\"808\":2,\"812\":4,\"813\":3,\"814\":8,\"817\":8,\"818\":2,\"819\":1,\"820\":2,\"821\":2,\"822\":1,\"824\":5,\"825\":6,\"832\":1,\"833\":6,\"838\":3,\"839\":2,\"840\":1,\"841\":2,\"842\":1,\"844\":4,\"847\":1,\"850\":5,\"851\":4,\"855\":6,\"856\":6,\"857\":6,\"859\":3,\"860\":3,\"864\":5,\"866\":6,\"867\":31,\"870\":2,\"871\":3,\"872\":6,\"879\":2,\"880\":3,\"881\":9,\"884\":7,\"892\":6,\"893\":4,\"894\":4,\"895\":11,\"902\":4,\"903\":8,\"904\":5,\"905\":10,\"916\":1,\"918\":6,\"919\":1,\"921\":1,\"923\":4,\"924\":5,\"936\":16,\"939\":8,\"940\":8,\"942\":2,\"943\":1,\"944\":9,\"948\":1,\"953\":8,\"954\":2,\"955\":2,\"956\":6,\"961\":5,\"968\":1,\"978\":1,\"997\":2,\"1009\":2,\"1019\":2,\"1026\":4,\"1028\":32,\"1029\":2,\"1034\":1,\"1036\":1,\"1037\":1,\"1038\":1,\"1039\":1,\"1040\":3,\"1041\":2,\"1043\":1,\"1044\":1,\"1045\":1,\"1046\":3,\"1048\":1,\"1049\":1,\"1050\":1,\"1052\":2,\"1078\":5,\"1083\":1,\"1107\":3,\"1109\":4,\"1110\":1,\"1113\":6,\"1116\":3,\"1118\":2,\"1120\":3,\"1124\":1,\"1126\":2,\"1128\":1,\"1131\":1,\"1132\":5,\"1142\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":3}}],[\"networkutils\",{\"1\":{\"893\":1,\"894\":8,\"895\":5}}],[\"network\",{\"0\":{\"300\":1},\"1\":{\"300\":1}}],[\"net\",{\"1\":{\"127\":3,\"892\":5,\"893\":3,\"894\":4,\"895\":7,\"902\":3,\"903\":3,\"904\":3,\"905\":5,\"918\":1,\"1132\":20}}],[\"nq\",{\"1\":{\"121\":1}}],[\"n\",{\"1\":{\"110\":1,\"114\":1,\"119\":1,\"127\":17,\"207\":5,\"348\":4,\"354\":1,\"356\":1,\"433\":1,\"434\":3,\"438\":1,\"442\":26,\"703\":1,\"719\":2,\"789\":3,\"838\":2,\"1013\":4,\"1038\":1,\"1039\":3,\"1093\":1}}],[\"node\",{\"1\":{\"1007\":3,\"1009\":1,\"1016\":3}}],[\"node<t>\",{\"1\":{\"949\":2}}],[\"nosdn\",{\"1\":{\"1132\":20}}],[\"nosuchfieldexception\",{\"1\":{\"924\":3,\"1118\":2}}],[\"nosuchmethodexception\",{\"1\":{\"919\":2,\"923\":1,\"924\":1,\"1118\":1}}],[\"nosql\",{\"0\":{\"144\":1},\"1\":{\"142\":1,\"144\":1}}],[\"normalpeople\",{\"1\":{\"1038\":2}}],[\"normalstaff\",{\"1\":{\"594\":2}}],[\"norm\",{\"1\":{\"838\":1}}],[\"noargsconstructor\",{\"1\":{\"261\":1,\"262\":2,\"275\":2,\"278\":2,\"1132\":2}}],[\"noclassdeffounderror\",{\"1\":{\"215\":1}}],[\"non\",{\"1\":{\"211\":1,\"475\":1,\"623\":1,\"700\":1}}],[\"nonematch\",{\"0\":{\"1045\":1},\"1\":{\"1045\":4}}],[\"none\",{\"1\":{\"29\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"notserializableexception\",{\"1\":{\"824\":1}}],[\"notify的基本使用\",{\"1\":{\"872\":1}}],[\"notify机\",{\"1\":{\"868\":1}}],[\"notify唤醒c1\",{\"1\":{\"867\":1}}],[\"notifyall方法不定义在thread类中\",{\"0\":{\"876\":1}}],[\"notifyall\",{\"0\":{\"875\":1},\"1\":{\"658\":2,\"867\":1}}],[\"notify\",{\"0\":{\"874\":1,\"876\":1},\"1\":{\"658\":2,\"867\":9,\"868\":1,\"870\":2,\"871\":1,\"872\":13}}],[\"note12\",{\"1\":{\"263\":1}}],[\"note11\",{\"1\":{\"263\":1}}],[\"note\",{\"1\":{\"127\":1}}],[\"not\",{\"1\":{\"120\":1,\"127\":2,\"144\":1,\"162\":2,\"170\":3,\"222\":2,\"225\":2,\"229\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"no\",{\"1\":{\"73\":1,\"121\":1,\"246\":1}}],[\"籍贯\",{\"1\":{\"110\":1,\"153\":1}}],[\"姓名和对象本身\",{\"1\":{\"1052\":1}}],[\"姓名和年龄\",{\"1\":{\"1052\":1}}],[\"姓名string\",{\"1\":{\"478\":1}}],[\"姓名这东西\",{\"1\":{\"176\":1}}],[\"姓名是\",{\"1\":{\"158\":4,\"594\":2}}],[\"姓名\",{\"1\":{\"110\":1,\"153\":1,\"478\":2,\"517\":1,\"594\":3,\"956\":1}}],[\"通俗的讲\",{\"1\":{\"1031\":1}}],[\"通俗的做以下描述\",{\"1\":{\"885\":1}}],[\"通用的方法\",{\"1\":{\"1123\":1}}],[\"通用\",{\"1\":{\"942\":1}}],[\"通知消费者吃\",{\"1\":{\"867\":1}}],[\"通知gc进行垃圾回收\",{\"1\":{\"690\":1}}],[\"通行于台湾\",{\"1\":{\"799\":1}}],[\"通信次数\",{\"1\":{\"207\":1}}],[\"通常称为\",{\"1\":{\"1204\":1}}],[\"通常没有继续携带之前的jsessionid\",{\"1\":{\"1155\":1}}],[\"通常使用session维护的是一些敏感数据\",{\"1\":{\"1152\":1}}],[\"通常会携带文件\",{\"1\":{\"1132\":1}}],[\"通常不需要设置\",{\"1\":{\"1127\":1}}],[\"通常用来做资源的释放\",{\"1\":{\"1093\":1}}],[\"通常包括三个基本步\",{\"1\":{\"1033\":1}}],[\"通常是我们访问某一个请求\",{\"1\":{\"1091\":1}}],[\"通常是web浏览器\",{\"1\":{\"1078\":1}}],[\"通常是\",{\"1\":{\"767\":1}}],[\"通常\",{\"1\":{\"666\":1}}],[\"通常情况下\",{\"1\":{\"539\":1}}],[\"通常默认为一个表建立的索引不要超过5个\",{\"1\":{\"233\":1}}],[\"通常指的是\",{\"1\":{\"211\":2}}],[\"通常和分组一起使用\",{\"1\":{\"168\":1}}],[\"通常简称为数据库\",{\"1\":{\"141\":1}}],[\"通配符添加\",{\"1\":{\"1194\":1}}],[\"通配符匹配\",{\"1\":{\"162\":1}}],[\"通配\",{\"1\":{\"162\":1}}],[\"通讯2次\",{\"1\":{\"207\":1}}],[\"通讯1次\",{\"1\":{\"207\":1}}],[\"通讯n次\",{\"1\":{\"207\":1}}],[\"通讯双方应该在传递时遵循的规则\",{\"1\":{\"111\":1}}],[\"通讯的双方\",{\"1\":{\"111\":1}}],[\"通讯协议是一种规范\",{\"1\":{\"110\":1}}],[\"通过cookie来携带\",{\"1\":{\"1142\":1}}],[\"通过class能够获得实例\",{\"1\":{\"1108\":1}}],[\"通过class对象直接实例化对象\",{\"1\":{\"922\":1}}],[\"通过请求报文封装信息\",{\"1\":{\"1139\":1}}],[\"通过上面这种方式\",{\"1\":{\"1137\":1}}],[\"通过上述程序\",{\"1\":{\"498\":1}}],[\"通过上述方式就可以直接获取属性值了\",{\"1\":{\"453\":1}}],[\"通过字符流响应json数据\",{\"1\":{\"1124\":1}}],[\"通过part中提供的方法可以获得其他具体的信息\",{\"1\":{\"1120\":1}}],[\"通过分隔符\",{\"1\":{\"1120\":1}}],[\"通过形参给field赋值\",{\"1\":{\"1118\":1}}],[\"通过自己写的工具类\",{\"1\":{\"1118\":1}}],[\"通过反射获得的method\",{\"1\":{\"1109\":1}}],[\"通过反射获取注解信息\",{\"1\":{\"923\":1,\"924\":1}}],[\"通过反射获取方法\",{\"1\":{\"921\":1}}],[\"通过反射获取成员方法\",{\"0\":{\"921\":1}}],[\"通过反射获取成员变量\",{\"0\":{\"920\":1}}],[\"通过反射获取所有成员变量\",{\"1\":{\"920\":1}}],[\"通过反射获取所有构造方法\",{\"1\":{\"919\":1}}],[\"通过反射获取构造方法\",{\"0\":{\"919\":1}}],[\"通过反射的方式执行userserviceimpl中的sayhello\",{\"1\":{\"1109\":1}}],[\"通过反射的方式实现通用性的设置\",{\"1\":{\"1109\":1}}],[\"通过反射的方式复制\",{\"1\":{\"1108\":1}}],[\"通过构造方法实例化\",{\"1\":{\"1108\":1}}],[\"通过form表单分别构造get请求和post请求\",{\"1\":{\"1103\":1}}],[\"通过field读写对象的成员变量\",{\"1\":{\"920\":1}}],[\"通过该路径可以访问到这个servlet的service或doget\",{\"1\":{\"1086\":1}}],[\"通过该方法的方法名\",{\"1\":{\"661\":1}}],[\"通过浏览器的地址栏发送的请求是get请求\",{\"1\":{\"1085\":1}}],[\"通过tomcat可以访问静态资源和动态资源\",{\"1\":{\"1078\":1}}],[\"通过this或super关键字\",{\"1\":{\"542\":1}}],[\"通过类加载器\",{\"1\":{\"910\":1,\"918\":1}}],[\"通过accept建立连接\",{\"1\":{\"898\":1,\"902\":1}}],[\"通过auto\",{\"1\":{\"169\":1}}],[\"通过yield方法做不到\",{\"1\":{\"841\":1}}],[\"通过在流中使用文件可以实现对象的持久存储\",{\"1\":{\"823\":1}}],[\"通过约定标记结束\",{\"1\":{\"821\":1}}],[\"通过现有的\",{\"1\":{\"820\":1}}],[\"通过使用annotation\",{\"1\":{\"924\":1}}],[\"通过使用指定的\",{\"1\":{\"801\":1}}],[\"通过使用平台的默认字符集解码指定的\",{\"1\":{\"801\":1}}],[\"通过打开一个到实际文件的连接来创建一个\",{\"1\":{\"794\":2}}],[\"通过设置这种输出流\",{\"1\":{\"790\":1}}],[\"通过调用类中的hashcode方法计算key\",{\"1\":{\"680\":1}}],[\"通过匿名内部类来优化简单的接口实现\",{\"1\":{\"643\":1}}],[\"通过测试\",{\"1\":{\"591\":1}}],[\"通过隐含super\",{\"1\":{\"541\":1}}],[\"通过案例我们来分析一下继承的优缺点\",{\"1\":{\"530\":1}}],[\"通过编译的条件\",{\"1\":{\"529\":1}}],[\"通过继承\",{\"1\":{\"513\":1,\"1085\":1}}],[\"通过查看\",{\"1\":{\"488\":1}}],[\"通过下面的例子分析程序执行流程\",{\"1\":{\"467\":1}}],[\"通过实参列表的不同\",{\"1\":{\"465\":1}}],[\"通过读取二进制字节码文件\",{\"1\":{\"456\":1}}],[\"通过i\",{\"1\":{\"456\":1}}],[\"通过new关键字在堆上开辟空间\",{\"1\":{\"408\":1}}],[\"通过数组初始化的内存分配过程来一窥引用数据类型的特点\",{\"1\":{\"405\":1}}],[\"通过数值位的长度n可以直接算出最大值和最小值\",{\"1\":{\"326\":1}}],[\"通过寻址公式直接计算出对应的内存地址\",{\"1\":{\"394\":1}}],[\"通过以上标识符的语法要求\",{\"1\":{\"315\":1}}],[\"通过代理对象调用方法执行sql语句\",{\"1\":{\"244\":1}}],[\"通过mybatis\",{\"1\":{\"240\":1}}],[\"通过servletconfig提供的getservletcontext方法来获得\",{\"1\":{\"1096\":1}}],[\"通过servlet\",{\"1\":{\"1078\":1}}],[\"通过set方法对成员变量进行设置值\",{\"1\":{\"517\":1}}],[\"通过start方法启动线程\",{\"1\":{\"832\":3}}],[\"通过statement对象来执行sql\",{\"1\":{\"200\":1}}],[\"通过sqlsessionfactory获得一个sqlsession\",{\"1\":{\"234\":1}}],[\"通过这个id对应的就是一个session对象\",{\"1\":{\"1150\":1}}],[\"通过这个现象\",{\"1\":{\"342\":1}}],[\"通过这种方式\",{\"1\":{\"1137\":1}}],[\"通过这种方法\",{\"1\":{\"188\":1}}],[\"通过这些手段\",{\"1\":{\"116\":1}}],[\"通过减少用不到或很少用的功能\",{\"1\":{\"144\":1}}],[\"通过referer可以确定广告点击的来源\",{\"1\":{\"116\":1}}],[\"通过检查referer请求头\",{\"1\":{\"116\":1}}],[\"通过b页面跳转到a页面\",{\"1\":{\"116\":1}}],[\"通过指定索引\",{\"1\":{\"110\":1}}],[\"通过标准化语言sql进行操作\",{\"1\":{\"105\":1}}],[\"通过\",{\"1\":{\"53\":1,\"56\":1,\"1120\":1}}],[\"通过启用\",{\"1\":{\"34\":1}}],[\"过期时间\",{\"1\":{\"1159\":1}}],[\"过期或手动设置\",{\"1\":{\"1157\":1}}],[\"过一会\",{\"1\":{\"1012\":1}}],[\"过程中使用url编解码\",{\"1\":{\"1148\":1}}],[\"过程\",{\"0\":{\"910\":1}}],[\"过程同上\",{\"1\":{\"124\":1}}],[\"过于简洁也意味着不容易debug\",{\"1\":{\"657\":1}}],[\"过于简单的lambda表达式\",{\"1\":{\"657\":1}}],[\"过于麻烦了\",{\"1\":{\"392\":1}}],[\"过了两个月\",{\"1\":{\"319\":1}}],[\"过滤操作\",{\"0\":{\"1036\":1}}],[\"过滤掉\",{\"1\":{\"421\":1}}],[\"过滤\",{\"0\":{\"163\":1},\"1\":{\"1037\":1}}],[\"过户手续等重要信息\",{\"1\":{\"109\":1}}],[\"过渡动画\",{\"0\":{\"31\":1}}],[\"交换两个student对象的引用\",{\"1\":{\"470\":1}}],[\"交换两个student对象的age属性\",{\"1\":{\"470\":1}}],[\"交换这两个拷贝的值\",{\"1\":{\"426\":1}}],[\"交叉连接的结果没有实际的意义\",{\"1\":{\"181\":1}}],[\"交叉连接其实就是求多个表的笛卡尔积\",{\"1\":{\"181\":1}}],[\"交叉连接\",{\"0\":{\"181\":1},\"1\":{\"181\":1}}],[\"交付时间\",{\"1\":{\"109\":1}}],[\"交互演示\",{\"0\":{\"70\":1,\"76\":1},\"1\":{\"76\":1}}],[\"付款方式\",{\"1\":{\"109\":1}}],[\"押金退还条件等条款\",{\"1\":{\"108\":1}}],[\"房屋使用规定\",{\"1\":{\"108\":1}}],[\"租出去给别人用\",{\"1\":{\"126\":1}}],[\"租金支付方式\",{\"1\":{\"108\":1}}],[\"租房协议是一种合同\",{\"1\":{\"108\":1}}],[\"租房协议\",{\"0\":{\"108\":1},\"1\":{\"106\":1}}],[\"下的小程序\",{\"1\":{\"1078\":1}}],[\"下的所有java文件\",{\"1\":{\"777\":2}}],[\"下的所有类\",{\"1\":{\"503\":1}}],[\"下去一定要自己写一下这个代码\",{\"1\":{\"948\":1}}],[\"下去可以看下\",{\"1\":{\"232\":1}}],[\"下有没有a\",{\"1\":{\"776\":2}}],[\"下层的类越来越具体\",{\"1\":{\"591\":1}}],[\"下游类总可以看成一个上游类\",{\"1\":{\"533\":1}}],[\"下游的类总是继承上游类的所有成员\",{\"1\":{\"533\":1}}],[\"下一个节点\",{\"1\":{\"1007\":1}}],[\"下一个明确的定义了\",{\"1\":{\"446\":1}}],[\"下一篇\",{\"1\":{\"45\":1}}],[\"下标为和位置的元素互换\",{\"1\":{\"419\":1}}],[\"下标\",{\"1\":{\"393\":1,\"400\":1,\"401\":1,\"948\":2,\"955\":1}}],[\"下表中列出了运算符的优先级顺序\",{\"1\":{\"350\":1}}],[\"下列写法就是错误的\",{\"1\":{\"397\":1}}],[\"下列代码就可以写出来了\",{\"1\":{\"719\":1}}],[\"下列代码就是不正确的\",{\"1\":{\"570\":1}}],[\"下列代码哪行能通过编译\",{\"1\":{\"573\":1}}],[\"下列代码能够执行吗\",{\"1\":{\"341\":1}}],[\"下列代码会输出什么\",{\"1\":{\"336\":2}}],[\"下列语句中\",{\"1\":{\"341\":1}}],[\"下列做法不允许\",{\"1\":{\"336\":1}}],[\"下列方式严格禁止\",{\"1\":{\"336\":1}}],[\"下列是不合法的\",{\"1\":{\"315\":1}}],[\"下列都是合法的\",{\"1\":{\"315\":1}}],[\"下方有大量的条件\",{\"1\":{\"263\":1}}],[\"下载远程仓库的内容\",{\"1\":{\"1192\":1}}],[\"下载\",{\"0\":{\"1185\":1}}],[\"下载的场景会使用\",{\"1\":{\"1128\":1}}],[\"下载地址\",{\"1\":{\"306\":1}}],[\"下载安装\",{\"0\":{\"306\":1}}],[\"下载仓库地址\",{\"1\":{\"192\":1}}],[\"下载包\",{\"1\":{\"192\":1}}],[\"下划线与\",{\"1\":{\"316\":1}}],[\"下划线\",{\"1\":{\"315\":2}}],[\"下划线和美元符号组成\",{\"1\":{\"314\":1}}],[\"下划线隔开\",{\"1\":{\"153\":1}}],[\"下划线进行分割\",{\"1\":{\"149\":1}}],[\"下面具体讲解一下包装类型\",{\"1\":{\"700\":1}}],[\"下面我们详细分析引用数据类型的强制类型转换\",{\"1\":{\"583\":1}}],[\"下面我们看两个经典案例\",{\"1\":{\"336\":1}}],[\"下面代码是不允许的\",{\"1\":{\"572\":1}}],[\"下面详细了解一下\",{\"1\":{\"565\":1}}],[\"下面没有使用递归\",{\"1\":{\"442\":1}}],[\"下面这条sql的含义\",{\"1\":{\"204\":1}}],[\"下面read这一步不要再循环里面读取\",{\"1\":{\"127\":1}}],[\"下面分别整理三方协议\",{\"1\":{\"106\":1}}],[\"并切换到这个分支\",{\"1\":{\"1204\":1}}],[\"并生成结果\",{\"1\":{\"1033\":1}}],[\"并没有\",{\"1\":{\"1155\":1}}],[\"并没有把数据复制一份\",{\"1\":{\"960\":1}}],[\"并没有开辟新的执行路径\",{\"1\":{\"833\":1}}],[\"并打印\",{\"1\":{\"956\":1}}],[\"并打印到控制台\",{\"1\":{\"753\":1}}],[\"并显式地让它继承java\",{\"1\":{\"924\":1}}],[\"并执行相应的处理\",{\"1\":{\"924\":1}}],[\"并执行其他线程\",{\"1\":{\"841\":2}}],[\"并返回刚刚经过的元素\",{\"1\":{\"955\":1}}],[\"并返回等待执行的任务列表\",{\"1\":{\"880\":1}}],[\"并返回结果\",{\"1\":{\"601\":1}}],[\"并获取计算的结果\",{\"1\":{\"880\":1}}],[\"并使该线程重新获取锁\",{\"1\":{\"868\":1}}],[\"并释放锁\",{\"1\":{\"868\":1}}],[\"并启动\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"并发\",{\"1\":{\"827\":1}}],[\"并行\",{\"0\":{\"827\":1},\"1\":{\"827\":1}}],[\"并保存其参数\",{\"1\":{\"795\":2}}],[\"并将其插入到链表中即可\",{\"1\":{\"965\":1}}],[\"并将其存储在缓冲区数组\",{\"1\":{\"792\":1,\"794\":1}}],[\"并将结果存储到一个新的\",{\"1\":{\"801\":2}}],[\"并将新的信息替换\",{\"1\":{\"601\":1}}],[\"并把引用放入常量池\",{\"1\":{\"735\":1}}],[\"并用一个temp字符串引用也指向它\",{\"1\":{\"730\":2}}],[\"并用别名表示\",{\"1\":{\"168\":8}}],[\"并通过cfr反编译工具就可以得到编译器特殊处理后的代码\",{\"1\":{\"719\":1}}],[\"并存在某种对应关系f\",{\"1\":{\"679\":1,\"999\":1}}],[\"并可以增加它自己的新功能的能力\",{\"1\":{\"599\":1}}],[\"并可以进行动态替换\",{\"1\":{\"245\":1}}],[\"并出现父类引用指向不同子类对象\",{\"1\":{\"580\":1}}],[\"并给出不同的实现\",{\"1\":{\"502\":1}}],[\"并在内存中生成这个类对应的class对象\",{\"1\":{\"497\":1}}],[\"并在控制台打印异常信息\",{\"1\":{\"410\":1}}],[\"并说明原因\",{\"1\":{\"491\":1}}],[\"并分析流程\",{\"1\":{\"479\":1}}],[\"并进行显式赋值\",{\"1\":{\"456\":1}}],[\"并加载进jvm内存\",{\"1\":{\"456\":1}}],[\"并维护对象之间的交互\",{\"1\":{\"446\":1}}],[\"并输出结果\",{\"1\":{\"380\":3,\"387\":3}}],[\"并建立主键索引树\",{\"1\":{\"233\":1}}],[\"并提供方法给外界访问时\",{\"1\":{\"518\":1}}],[\"并提供多种语言的\",{\"1\":{\"144\":1}}],[\"并提高系统的可扩展性和稳定性\",{\"1\":{\"213\":1}}],[\"并重新创建新的实例\",{\"1\":{\"213\":1}}],[\"并不知道响应报文的响应体需要我们提供什么样的数据\",{\"1\":{\"1132\":1}}],[\"并不知道它有这个\",{\"1\":{\"551\":1}}],[\"并不能马上获取该对象锁\",{\"1\":{\"868\":1}}],[\"并不能代表时间和日期\",{\"1\":{\"726\":1}}],[\"并不一定会发生这些异常\",{\"1\":{\"758\":1}}],[\"并不一定会直接占用那么多\",{\"1\":{\"153\":1}}],[\"并不需要内部类有外部类对象的一个引用\",{\"1\":{\"620\":1}}],[\"并不意味着继承\",{\"1\":{\"539\":1}}],[\"并不是一个褒义词\",{\"1\":{\"1118\":1}}],[\"并不是一个对象更早成为\",{\"1\":{\"482\":1}}],[\"并不是语法限制\",{\"1\":{\"939\":1}}],[\"并不是获取所有层级\",{\"1\":{\"776\":2}}],[\"并不是随便拿一个方法都能用final修饰的\",{\"1\":{\"567\":1}}],[\"并不是创建对象\",{\"1\":{\"466\":1}}],[\"并不是内置数据类型\",{\"1\":{\"456\":1}}],[\"并不是立刻就会被回收\",{\"1\":{\"407\":1}}],[\"并不是操作系统\",{\"1\":{\"309\":1}}],[\"并不是物理上面的层次\",{\"1\":{\"112\":1}}],[\"并尽量避免做浮点数比较\",{\"1\":{\"153\":1}}],[\"并对操作系统的稳定性要求较高\",{\"1\":{\"143\":1}}],[\"并对请求作出响应\",{\"1\":{\"105\":1}}],[\"并能对常见的表格进行建表操作\",{\"1\":{\"140\":1}}],[\"并且增加注销功能\",{\"1\":{\"1159\":1}}],[\"并且会显示出版本号\",{\"1\":{\"1197\":1}}],[\"并且会被序列化\",{\"1\":{\"1156\":1}}],[\"并且会按照数字的顺序来初始化不同的servlet\",{\"1\":{\"1086\":1,\"1093\":1}}],[\"并且使用response做响应\",{\"1\":{\"1148\":1}}],[\"并且使用数据类型的定义统一了引用数据类型和基本数据类型\",{\"1\":{\"540\":1}}],[\"并且让浏览器发起请求的时候\",{\"1\":{\"1142\":1}}],[\"并且通过fiddler来抓取请求报文\",{\"1\":{\"1120\":1}}],[\"并且将其放入到servletcontext中\",{\"1\":{\"1110\":1}}],[\"并且将数组的index=length位置的元素设置为null\",{\"1\":{\"954\":1}}],[\"并且获得的是同一个servletcontext\",{\"1\":{\"1095\":1}}],[\"并且从中获取值\",{\"1\":{\"1094\":1}}],[\"并且可以在分支上进行独立的开发和提交\",{\"1\":{\"1204\":1}}],[\"并且可以在管道的节点上进行处理\",{\"1\":{\"1031\":1}}],[\"并且可以自己添加新的成员\",{\"1\":{\"520\":1}}],[\"并且高度最高的三个同学\",{\"1\":{\"1028\":1}}],[\"并且高效\",{\"1\":{\"657\":1}}],[\"并且需要按照时间排序\",{\"1\":{\"1026\":1}}],[\"并且把指针往后挪一下\",{\"1\":{\"959\":1}}],[\"并且把中断信息保存到log\",{\"1\":{\"844\":2}}],[\"并且订单状态是已发货\",{\"1\":{\"956\":1}}],[\"并且避免了许多运行时类型转换错误的问题\",{\"1\":{\"938\":1}}],[\"并且执行静态代码块中的内容\",{\"1\":{\"910\":1}}],[\"并且传输的过程通过io流的形式出现\",{\"1\":{\"885\":1}}],[\"并且不需要将所有元素都复制到新的数组中\",{\"1\":{\"954\":1}}],[\"并且不会进入回收站\",{\"1\":{\"773\":1}}],[\"并且不产生新的未使用对象\",{\"1\":{\"744\":1}}],[\"并且catch正常捕获异常执行\",{\"1\":{\"760\":1}}],[\"并且前面的字符都相同\",{\"1\":{\"739\":1}}],[\"并且放在枚举体的最上面\",{\"1\":{\"717\":1}}],[\"并且存在自动拆装箱\",{\"1\":{\"712\":1}}],[\"并且我们确有需求把基本数据类型变量也当成一个对象使用\",{\"1\":{\"701\":1}}],[\"并且我们上面提过\",{\"1\":{\"342\":1}}],[\"并且返回字符串string就可以了\",{\"1\":{\"665\":1}}],[\"并且返回这个sql语句产生的结果集\",{\"1\":{\"201\":1}}],[\"并且由于子类对象的隐式初始化\",{\"1\":{\"658\":1}}],[\"并且是接口的子类对象\",{\"1\":{\"651\":1}}],[\"并且复用奔驰车所有已有的一些功能组件\",{\"1\":{\"599\":1}}],[\"并且接口在继承接口后\",{\"1\":{\"598\":1}}],[\"并且抽象类作为父类\",{\"1\":{\"591\":1}}],[\"并且用对象名点调用同名方法时\",{\"1\":{\"580\":1}}],[\"并且用一对大括号括起来的结构\",{\"1\":{\"484\":1}}],[\"并且类加载的顺序是\",{\"1\":{\"541\":1}}],[\"并且结果确实是10\",{\"1\":{\"539\":1}}],[\"并且该对象仅需使用一次即可\",{\"1\":{\"483\":1}}],[\"并且该class必须要和文件名同名\",{\"1\":{\"308\":1}}],[\"并且这个引用编译器会自动加入到局部内部类中\",{\"1\":{\"639\":1}}],[\"并且这个方法执行完毕后\",{\"1\":{\"425\":1}}],[\"并且这个可变长参数必须是该方法的最后一个参数\",{\"1\":{\"423\":1}}],[\"并且这些单词数量不多\",{\"1\":{\"146\":1}}],[\"并且\",{\"1\":{\"422\":1,\"674\":1}}],[\"并且都是int\",{\"1\":{\"389\":1}}],[\"并且保持一致\",{\"1\":{\"382\":1}}],[\"并且在本地创建一个和远程仓库名同名的文件夹\",{\"1\":{\"1192\":1}}],[\"并且在某些测试的场景中\",{\"1\":{\"351\":1}}],[\"并且在mysql中使用推荐使用主键自增的策略\",{\"1\":{\"233\":1}}],[\"并且仅用于连接变量\",{\"1\":{\"344\":1}}],[\"并且数据类型一旦确定不能随意更改\",{\"1\":{\"337\":1}}],[\"并且数据类型不会轻易改变\",{\"1\":{\"319\":1}}],[\"并且一个变量一旦确定数据类型\",{\"1\":{\"319\":1}}],[\"并且编译器会自动忽略它\",{\"1\":{\"319\":1}}],[\"并且标识符严格区分大小写\",{\"1\":{\"315\":1}}],[\"并且工资相当可观\",{\"1\":{\"303\":1}}],[\"并且没有提供开关给用户关闭\",{\"1\":{\"284\":1}}],[\"并且方法名要和标签的id值保持一致\",{\"1\":{\"235\":1}}],[\"并且改名为mybatis\",{\"1\":{\"234\":1}}],[\"并且密码为空\",{\"1\":{\"204\":1}}],[\"并且加载进来\",{\"1\":{\"192\":1}}],[\"并且加以解析\",{\"1\":{\"113\":1}}],[\"并且提供了高层次的数据利用性\",{\"1\":{\"143\":1}}],[\"并且做出http响应\",{\"1\":{\"113\":1}}],[\"并且它会自动换行\",{\"1\":{\"8\":1}}],[\"程序开发人员可以在不改变原有逻辑的情况下\",{\"1\":{\"924\":1}}],[\"程序开发中将接口和它的实现类之间的关系\",{\"1\":{\"597\":1}}],[\"程序停止向屏幕输出问候的语句\",{\"1\":{\"825\":3}}],[\"程序不停地在屏幕上输出一句问候的语句\",{\"1\":{\"825\":3}}],[\"程序不仅可以省略主体的大括号\",{\"1\":{\"655\":2}}],[\"程序继续正常执行\",{\"1\":{\"752\":1}}],[\"程序在编译时期就能确定它们的值\",{\"1\":{\"731\":1}}],[\"程序在运行期间出现了不正常情况\",{\"1\":{\"410\":1}}],[\"程序在运行期间\",{\"1\":{\"402\":1}}],[\"程序中的所有字符串字面值\",{\"1\":{\"728\":1}}],[\"程序中根本不需要创建它的对象\",{\"1\":{\"590\":1}}],[\"程序设计接口的灵活性就增加了\",{\"1\":{\"600\":1}}],[\"程序会直接从finally代码块中的return结束方法\",{\"1\":{\"760\":1}}],[\"程序会先执行完finally代码块后\",{\"1\":{\"760\":1}}],[\"程序会先执行完finally代码块\",{\"1\":{\"760\":1}}],[\"程序会先找到\",{\"1\":{\"468\":1}}],[\"程序会输出\",{\"1\":{\"696\":1}}],[\"程序会自动根据不同的角色对象\",{\"1\":{\"582\":1}}],[\"程序扩展性也太差了\",{\"1\":{\"581\":1}}],[\"程序的其他部分只有被授权的操作\",{\"1\":{\"515\":1}}],[\"程序的开发\",{\"1\":{\"505\":1}}],[\"程序的执行结果是什么呢\",{\"1\":{\"378\":1}}],[\"程序每一步的执行流程\",{\"1\":{\"468\":1}}],[\"程序世界中的也类似\",{\"1\":{\"445\":1}}],[\"程序必须停止执行\",{\"1\":{\"442\":1}}],[\"程序员缺乏对对象销毁的控制\",{\"1\":{\"689\":1}}],[\"程序员将释放资源的语句写进析构函数中\",{\"1\":{\"689\":1}}],[\"程序员应该意识到\",{\"1\":{\"682\":1}}],[\"程序员之间互相交流api\",{\"1\":{\"658\":1}}],[\"程序员只需要充分利用这些api就足以完成开发需求\",{\"1\":{\"658\":1}}],[\"程序员只是指定数组的长度\",{\"1\":{\"398\":1}}],[\"程序员包含3个属性\",{\"1\":{\"594\":1}}],[\"程序员负责技术开发\",{\"1\":{\"594\":1}}],[\"程序员还是比较少见有需要把方法设置成final修饰的\",{\"1\":{\"567\":1}}],[\"程序员没有写任何代码\",{\"1\":{\"542\":1}}],[\"程序员几乎无法干涉和主动回收垃圾\",{\"1\":{\"407\":1}}],[\"程序运行期间\",{\"1\":{\"662\":1}}],[\"程序运行时调用方法的代价是\",{\"1\":{\"403\":1}}],[\"程序运行过程中\",{\"1\":{\"330\":1}}],[\"程序计数器用来记录当前执行的行数\",{\"1\":{\"403\":1}}],[\"程序计数器\",{\"1\":{\"403\":2,\"925\":2}}],[\"程序就是通过语句来执行功能的\",{\"1\":{\"342\":1}}],[\"程序是由虚拟机\",{\"1\":{\"309\":1}}],[\"程序是可靠的\",{\"1\":{\"188\":1}}],[\"程序\",{\"1\":{\"105\":1}}],[\"掌握git的核心流程\",{\"1\":{\"1182\":1}}],[\"掌握通过response能够完成的设置\",{\"1\":{\"1102\":1}}],[\"掌握通过request能够获得的信息\",{\"1\":{\"1102\":1}}],[\"掌握service方法\",{\"1\":{\"1075\":1}}],[\"掌握set的子类\",{\"1\":{\"979\":1}}],[\"掌握set接口存储数据的特点\",{\"1\":{\"979\":1}}],[\"掌握web应用的目录结构\",{\"1\":{\"1075\":1}}],[\"掌握流的几个重要终止操作\",{\"1\":{\"1027\":1}}],[\"掌握流的几个重要中间操作\",{\"1\":{\"1027\":1}}],[\"掌握流的使用\",{\"1\":{\"1027\":1}}],[\"掌握先大后小顺序\",{\"1\":{\"1020\":1}}],[\"掌握linkedhashmap和treemap存储数据的特点\",{\"1\":{\"994\":1}}],[\"掌握list接口的特有遍历方式\",{\"1\":{\"956\":1}}],[\"掌握list接口特殊的方法\",{\"1\":{\"956\":1}}],[\"掌握hashmap的初始化容量及扩容机制\",{\"1\":{\"994\":1}}],[\"掌握hashmap的添加一份key\",{\"1\":{\"994\":1}}],[\"掌握hashmap的底层结构\",{\"1\":{\"994\":1}}],[\"掌握hashmap存储数据的特点\",{\"1\":{\"994\":1}}],[\"掌握http报文格式\",{\"1\":{\"105\":1}}],[\"掌握queue的结构\",{\"1\":{\"970\":1}}],[\"掌握cookie和session的使用场景\",{\"1\":{\"1136\":1}}],[\"掌握cookie的设置\",{\"1\":{\"1136\":1}}],[\"掌握collection遍历方法的特点及迭代器方法需要小心的bug\",{\"1\":{\"951\":1}}],[\"掌握collection的遍历方法\",{\"1\":{\"951\":1}}],[\"掌握collection的增\",{\"1\":{\"951\":1}}],[\"掌握class\",{\"1\":{\"909\":1}}],[\"掌握注解的定义与使用\",{\"1\":{\"924\":1}}],[\"掌握tomcat的使用\",{\"1\":{\"1075\":1}}],[\"掌握tcp编程\",{\"1\":{\"885\":1}}],[\"掌握this关键字的使用\",{\"1\":{\"458\":1}}],[\"掌握udp编程\",{\"1\":{\"885\":1}}],[\"掌握init\",{\"1\":{\"1075\":1}}],[\"掌握instanceof关键字\",{\"1\":{\"573\":1}}],[\"掌握io体系及分类\",{\"1\":{\"778\":1}}],[\"掌握相对路径\",{\"1\":{\"765\":1}}],[\"掌握finally使用\",{\"1\":{\"745\":1}}],[\"掌握异常的处理\",{\"1\":{\"745\":1}}],[\"掌握异常的分类体系\",{\"1\":{\"745\":1}}],[\"掌握接口的特点与使用\",{\"1\":{\"594\":1}}],[\"掌握接口的定义\",{\"1\":{\"594\":1}}],[\"掌握抽象类的特点与使用\",{\"1\":{\"589\":1}}],[\"掌握抽象类的定义\",{\"1\":{\"589\":1}}],[\"掌握引用数据类型的类型转换\",{\"1\":{\"573\":1}}],[\"掌握多态的使用\",{\"1\":{\"573\":1}}],[\"掌握多态的定义\",{\"1\":{\"573\":1}}],[\"掌握如何获取字节码文件对象\",{\"1\":{\"909\":1}}],[\"掌握如何自定义异常\",{\"1\":{\"745\":1}}],[\"掌握如何使用封装\",{\"1\":{\"514\":1}}],[\"掌握如何定义类\",{\"1\":{\"443\":1}}],[\"掌握封装的概念与特点\",{\"1\":{\"514\":1}}],[\"掌握几种代码块的执行顺序\",{\"1\":{\"483\":1}}],[\"掌握代码块的作用与特点\",{\"1\":{\"483\":1}}],[\"掌握代码块的几种分类\",{\"1\":{\"483\":1}}],[\"掌握匿名对象的用途与特点\",{\"1\":{\"479\":1}}],[\"掌握匿名对象的概念\",{\"1\":{\"479\":1}}],[\"掌握静态与非静态的区别\",{\"1\":{\"471\":1}}],[\"掌握静态成员方法的使用与特点\",{\"1\":{\"471\":1}}],[\"掌握静态成员变量的使用与特点\",{\"1\":{\"471\":1}}],[\"掌握局部变量与成员变量的区别\",{\"1\":{\"456\":1}}],[\"掌握jvm运行时数据区的栈和堆\",{\"1\":{\"391\":1}}],[\"掌握java中的三种注释\",{\"1\":{\"316\":1}}],[\"掌握数组的常见操作\",{\"1\":{\"391\":1}}],[\"掌握数组的定义与使用\",{\"1\":{\"391\":1}}],[\"掌握数据类型的分类\",{\"1\":{\"319\":1}}],[\"掌握数据库注入问题\",{\"1\":{\"189\":1}}],[\"掌握方法的重载\",{\"1\":{\"379\":1}}],[\"掌握方法的定义与使用\",{\"1\":{\"379\":1}}],[\"掌握跳转关键字break\",{\"1\":{\"356\":1}}],[\"掌握顺序结构\",{\"1\":{\"356\":1}}],[\"掌握常见的几个转义字符\",{\"1\":{\"354\":1}}],[\"掌握常量的定义\",{\"1\":{\"319\":1}}],[\"掌握使用注解处理器获取注解信息\",{\"1\":{\"924\":1}}],[\"掌握使用配置文件\",{\"1\":{\"909\":1}}],[\"掌握使用object中的如下成员方法\",{\"1\":{\"658\":1}}],[\"掌握使用三目运算符\",{\"1\":{\"342\":1}}],[\"掌握使用逻辑运算符\",{\"1\":{\"342\":1}}],[\"掌握使用赋值运算符\",{\"1\":{\"342\":1}}],[\"掌握使用算术运算符\",{\"1\":{\"342\":1}}],[\"掌握使用jdbc进行增删改查\",{\"1\":{\"189\":1}}],[\"掌握使用jdbc访问数据库\",{\"1\":{\"189\":1}}],[\"掌握变量的使用\",{\"1\":{\"319\":1}}],[\"掌握标识符的组成规则\",{\"1\":{\"313\":1}}],[\"掌握索引的数据结构\",{\"1\":{\"218\":1}}],[\"掌握池化思想的好处\",{\"1\":{\"213\":1}}],[\"掌握事务的使用\",{\"1\":{\"189\":1}}],[\"掌握特殊关键字的使用\",{\"1\":{\"140\":1}}],[\"掌握对象的创建与使用\",{\"1\":{\"443\":1}}],[\"掌握对象与类的关系\",{\"1\":{\"443\":1}}],[\"掌握对数据的增删改查\",{\"1\":{\"140\":1}}],[\"掌握对表的增加\",{\"1\":{\"140\":1}}],[\"掌握对库的增加\",{\"1\":{\"140\":1}}],[\"掌握什么是数据库\",{\"1\":{\"140\":1}}],[\"掌握\",{\"0\":{\"136\":1}}],[\"掌握直接部署\",{\"1\":{\"105\":1}}],[\"掌握状态码\",{\"1\":{\"105\":1}}],[\"蔬菜\",{\"2\":{\"103\":1}}],[\"番茄\",{\"0\":{\"100\":1}}],[\"草莓\",{\"0\":{\"95\":1},\"2\":{\"98\":1}}],[\"大驼峰\",{\"1\":{\"1019\":1}}],[\"大部分的东西\",{\"1\":{\"961\":1}}],[\"大卡车跑跑跑\",{\"1\":{\"936\":1}}],[\"大多数情况下\",{\"1\":{\"814\":1}}],[\"大多数的成员变量都是私有化的\",{\"1\":{\"559\":1}}],[\"大郎\",{\"1\":{\"808\":2}}],[\"大五码\",{\"1\":{\"799\":1}}],[\"大的放后面\",{\"1\":{\"739\":2}}],[\"大写\",{\"1\":{\"737\":2}}],[\"大大提升程序的灵活性\",{\"1\":{\"662\":1}}],[\"大括号已经限制了它的访问范围\",{\"1\":{\"635\":1}}],[\"大方\",{\"1\":{\"510\":1}}],[\"大宝剑\",{\"1\":{\"469\":1}}],[\"大致就如下图所示\",{\"1\":{\"680\":1}}],[\"大致的作用\",{\"1\":{\"497\":1}}],[\"大致可以做以下操作\",{\"1\":{\"453\":1}}],[\"大致图案如下\",{\"1\":{\"441\":1}}],[\"大致思路是\",{\"1\":{\"421\":1}}],[\"大致知道意思\",{\"1\":{\"116\":1}}],[\"大体上可以分为三步走\",{\"1\":{\"352\":1}}],[\"大体的思路是一样的\",{\"1\":{\"307\":1}}],[\"大变小\",{\"1\":{\"339\":1}}],[\"大取值范围\",{\"1\":{\"338\":1,\"339\":1,\"341\":2}}],[\"大约\",{\"1\":{\"326\":2}}],[\"大概是多少\",{\"1\":{\"1006\":1}}],[\"大概922亿亿\",{\"1\":{\"326\":1}}],[\"大概就没什么人能够快速理解该段代码了\",{\"1\":{\"319\":1}}],[\"大小重复\",{\"1\":{\"991\":1}}],[\"大小有序\",{\"1\":{\"991\":1}}],[\"大小写转换等各种针对字符串的操作\",{\"1\":{\"728\":1}}],[\"大小写不敏感是啥意思\",{\"1\":{\"149\":1}}],[\"大小的运算符\",{\"1\":{\"346\":1}}],[\"大小\",{\"1\":{\"326\":1}}],[\"大数据开发也是java开发的另一个方向\",{\"1\":{\"303\":1}}],[\"大数据\",{\"1\":{\"303\":2}}],[\"大数据量的应用场景下\",{\"1\":{\"213\":1}}],[\"大数据领域使用的比较多的数据库\",{\"1\":{\"144\":1}}],[\"大于给定key的最小key\",{\"1\":{\"1026\":1}}],[\"大于给定key的最小键值对\",{\"1\":{\"1026\":1}}],[\"大于size\",{\"1\":{\"954\":1}}],[\"大于0\",{\"1\":{\"740\":1}}],[\"大于或者小于要求给出提示\",{\"1\":{\"354\":1}}],[\"大于根节点\",{\"1\":{\"220\":1}}],[\"大于等于给定key的最小key\",{\"1\":{\"1026\":1}}],[\"大于等于给定key的最小键值对\",{\"1\":{\"1026\":1}}],[\"大于等于\",{\"1\":{\"162\":1,\"954\":1}}],[\"大于\",{\"1\":{\"162\":1,\"265\":1,\"978\":1}}],[\"大于20的\",{\"1\":{\"162\":1}}],[\"大文本字符串\",{\"1\":{\"153\":1}}],[\"大公司\",{\"1\":{\"143\":1}}],[\"大商业公司\",{\"1\":{\"143\":1}}],[\"大家觉得\",{\"1\":{\"1202\":1}}],[\"大家觉得应不应该出现在deque这个接口里面\",{\"1\":{\"975\":1}}],[\"大家觉得应不应该使用外键呢\",{\"1\":{\"171\":1}}],[\"大家不要动\",{\"1\":{\"1192\":1}}],[\"大家要注意一下报错信息\",{\"1\":{\"1192\":1}}],[\"大家要注意\",{\"1\":{\"1020\":1}}],[\"大家了解了这个特点\",{\"1\":{\"951\":1}}],[\"大家都是兄弟\",{\"1\":{\"796\":1}}],[\"大家都知道\",{\"1\":{\"701\":1}}],[\"大家知道即可\",{\"1\":{\"606\":1}}],[\"大家课下看看\",{\"1\":{\"588\":1}}],[\"大家在使用逻辑与或时\",{\"1\":{\"347\":1}}],[\"大家可以记一下\",{\"1\":{\"723\":1}}],[\"大家可以记忆一下\",{\"1\":{\"327\":1}}],[\"大家可以根据实际情况\",{\"1\":{\"721\":1}}],[\"大家可以自行测试一下\",{\"1\":{\"346\":1}}],[\"大家写代码的时候能够正确合理使用注释\",{\"1\":{\"316\":1}}],[\"大家进入企业里面了\",{\"1\":{\"147\":1}}],[\"大家一定要掌握这个映射关系\",{\"1\":{\"138\":1}}],[\"大家晚上如果抓不上包\",{\"1\":{\"115\":1}}],[\"大类型\",{\"1\":{\"116\":1}}],[\"大\",{\"2\":{\"94\":1,\"1058\":1,\"1063\":1,\"1068\":1,\"1073\":1}}],[\"火龙果\",{\"0\":{\"90\":1},\"2\":{\"93\":1}}],[\"圆周率\",{\"1\":{\"386\":1,\"570\":1}}],[\"圆\",{\"2\":{\"89\":1,\"104\":1,\"1058\":1,\"1063\":1,\"1068\":1,\"1073\":1}}],[\"小巧\",{\"1\":{\"1149\":1}}],[\"小练习\",{\"1\":{\"1112\":1}}],[\"小程序\",{\"1\":{\"1078\":1}}],[\"小驼峰\",{\"1\":{\"1019\":2}}],[\"小驼峰命名法\",{\"1\":{\"382\":1}}],[\"小汽车持有类和卡车持有类\",{\"1\":{\"936\":1}}],[\"小汽车跑跑跑\",{\"1\":{\"936\":2}}],[\"小笼包\",{\"1\":{\"867\":1}}],[\"小写\",{\"1\":{\"737\":2}}],[\"小写字母字符\",{\"1\":{\"737\":2}}],[\"小明\",{\"1\":{\"684\":2}}],[\"小花\",{\"1\":{\"655\":1}}],[\"小黑\",{\"1\":{\"655\":1}}],[\"小括号是不可以省略的\",{\"1\":{\"654\":1}}],[\"小括号\",{\"1\":{\"654\":1}}],[\"小括号中的数字代表执行顺序\",{\"1\":{\"168\":1}}],[\"小细节\",{\"1\":{\"509\":1}}],[\"小的值\",{\"1\":{\"418\":1}}],[\"小试牛刀请用所学知识分析\",{\"1\":{\"601\":1}}],[\"小试牛刀\",{\"1\":{\"386\":1,\"390\":1}}],[\"小tips\",{\"1\":{\"348\":1}}],[\"小结\",{\"0\":{\"341\":1,\"908\":1,\"1133\":1,\"1149\":1}}],[\"小取值范围\",{\"1\":{\"338\":1,\"339\":1,\"341\":2}}],[\"小米智能电视机的开关机也做得足够炫酷\",{\"1\":{\"580\":1}}],[\"小米手机\",{\"1\":{\"263\":1}}],[\"小米\",{\"1\":{\"263\":2}}],[\"小米10\",{\"1\":{\"263\":1}}],[\"小于key最大的key\",{\"1\":{\"1026\":1}}],[\"小于key的最大的键值对\",{\"1\":{\"1026\":1}}],[\"小于64\",{\"1\":{\"1012\":1}}],[\"小于集合的长度\",{\"1\":{\"954\":1}}],[\"小于0\",{\"1\":{\"740\":1}}],[\"小于根节点的值\",{\"1\":{\"220\":1}}],[\"小于等于key最大的key\",{\"1\":{\"1026\":1}}],[\"小于等于key的最大的键值对\",{\"1\":{\"1026\":1}}],[\"小于等于\",{\"1\":{\"162\":1}}],[\"小于等于60的\",{\"1\":{\"162\":2}}],[\"小于\",{\"1\":{\"162\":1,\"265\":1}}],[\"小于180的\",{\"1\":{\"162\":2}}],[\"小数3\",{\"1\":{\"815\":1}}],[\"小数字面值常量不具有这种特点\",{\"1\":{\"342\":1}}],[\"小数常量\",{\"1\":{\"328\":1}}],[\"小数\",{\"1\":{\"153\":1}}],[\"小微机环境\",{\"1\":{\"143\":1}}],[\"小说\",{\"1\":{\"126\":1}}],[\"小类型的方式将互联网上面的资源加以分类\",{\"1\":{\"116\":1}}],[\"小类型\",{\"1\":{\"116\":1}}],[\"小\",{\"2\":{\"89\":1,\"99\":1}}],[\"红色代表是新增的文件\",{\"1\":{\"1205\":1}}],[\"红黑树被拆成两部分\",{\"1\":{\"1016\":1}}],[\"红黑树拆成低位\",{\"1\":{\"1014\":1}}],[\"红黑树转化为链表\",{\"0\":{\"1014\":1}}],[\"红黑树\",{\"1\":{\"220\":1}}],[\"红\",{\"2\":{\"89\":1,\"94\":1,\"99\":1,\"104\":1,\"1058\":1,\"1063\":1,\"1068\":1,\"1073\":1}}],[\"这中间的代码\",{\"1\":{\"1197\":1}}],[\"这中间需要从数据库获取数据\",{\"1\":{\"105\":1}}],[\"这段会话就会变成这个样子\",{\"1\":{\"1137\":1}}],[\"这块内容其实就是分隔符\",{\"1\":{\"1120\":1}}],[\"这两种方式其实都是执行的是service方法\",{\"1\":{\"1085\":1}}],[\"这两部分\",{\"1\":{\"1014\":1}}],[\"这两个方法在\",{\"1\":{\"675\":1}}],[\"这两个方法都无法调用了\",{\"1\":{\"423\":1}}],[\"这两个对象的成员变量的取值\",{\"1\":{\"674\":1}}],[\"这两个结构\",{\"1\":{\"487\":1}}],[\"这两个引用拷贝被销毁\",{\"1\":{\"426\":1}}],[\"这两个修饰符很重要\",{\"1\":{\"385\":1}}],[\"这两个字上\",{\"1\":{\"338\":1}}],[\"这当然不是巧合\",{\"1\":{\"924\":1}}],[\"这四种固定支付方式\",{\"1\":{\"720\":1}}],[\"这依赖于java\",{\"1\":{\"703\":1}}],[\"这也不符合原则\",{\"1\":{\"684\":1}}],[\"这也将是你的第一个java程序\",{\"1\":{\"308\":1}}],[\"这严重违背原则\",{\"1\":{\"684\":1}}],[\"这本身就是不现实的\",{\"1\":{\"679\":1}}],[\"这其实就是java的反射技术\",{\"1\":{\"662\":1}}],[\"这其实就已经说明白了\",{\"1\":{\"623\":1}}],[\"这有点类似于\",{\"1\":{\"652\":1}}],[\"这有时候会造成一些奇怪的问题\",{\"1\":{\"306\":1}}],[\"这在极端的场景下\",{\"1\":{\"643\":1}}],[\"这在绝大多数情况下是不可能的\",{\"1\":{\"529\":1}}],[\"这句话直白的翻译过来就是\",{\"1\":{\"623\":1}}],[\"这属于强制类型转换\",{\"1\":{\"583\":1}}],[\"这大幅度简化了代码\",{\"1\":{\"582\":1}}],[\"这仍然是一个父类引用指向子类对象\",{\"1\":{\"581\":1}}],[\"这仍然属于方法的重写\",{\"1\":{\"537\":1}}],[\"这说明在不重写访问权限的情况下\",{\"1\":{\"687\":1}}],[\"这说明什么呢\",{\"1\":{\"681\":1}}],[\"这说明使用\",{\"1\":{\"548\":1}}],[\"这说明数组对内存空间使用的要求很高\",{\"1\":{\"394\":1}}],[\"这叫做子类在父类的基础上进行扩展\",{\"1\":{\"520\":1}}],[\"这可以看成一种\",{\"1\":{\"503\":1}}],[\"这可以大大提高查询速度\",{\"1\":{\"218\":1}}],[\"这三步主要做\",{\"1\":{\"497\":1}}],[\"这三个要素是\",{\"1\":{\"885\":1}}],[\"这三个步骤\",{\"1\":{\"497\":1}}],[\"这三个方法实现的都是相似的功能\",{\"1\":{\"387\":1}}],[\"这行代码一定要处在构造器代码的第一行\",{\"1\":{\"466\":1}}],[\"这实际也是方法重载的应用\",{\"1\":{\"465\":1}}],[\"这实际上是编译异常处理的一种方式\",{\"1\":{\"756\":1}}],[\"这实际上和数组的数据结构结构有关系\",{\"1\":{\"394\":1}}],[\"这实际上就是方法的作用\",{\"1\":{\"380\":1}}],[\"这五大区域\",{\"1\":{\"403\":1}}],[\"这片区域称之为jvm的运行时数据区域\",{\"1\":{\"402\":1}}],[\"这和表达式的类型提升有关\",{\"1\":{\"344\":1}}],[\"这意味cpu对象能够操控\",{\"1\":{\"607\":1}}],[\"这意味虽然构造代码块可以给静态成员变量赋值\",{\"1\":{\"496\":1}}],[\"这意味着最先添加的元素将最先被移除\",{\"1\":{\"970\":1}}],[\"这意味着克隆后的引用和原先的引用指向同一个对象\",{\"1\":{\"699\":1}}],[\"这意味着要创建它的对象\",{\"1\":{\"633\":1}}],[\"这意味着cpu对象\",{\"1\":{\"607\":1}}],[\"这意味着\",{\"1\":{\"583\":1,\"626\":1,\"692\":1}}],[\"这意味着引用指向的对象不可更改了\",{\"1\":{\"568\":1}}],[\"这意味着使用\",{\"1\":{\"559\":1}}],[\"这意味着首先要触发\",{\"1\":{\"546\":1}}],[\"这意味着方法\",{\"1\":{\"380\":1}}],[\"这意味着我们程序员不需要写额外代码\",{\"1\":{\"338\":1}}],[\"这意味桌面应用一般都可以单机使用\",{\"1\":{\"303\":1}}],[\"这时总不可能让数组一个位置存两个元素\",{\"1\":{\"680\":1}}],[\"这时就会隐式调用该对象的\",{\"1\":{\"668\":1}}],[\"这时就需要使用标签\",{\"1\":{\"376\":1}}],[\"这时仍然需要jvm来做一些特殊操作\",{\"1\":{\"662\":1}}],[\"这时父类引用其实指向的是\",{\"1\":{\"585\":1}}],[\"这时父类引用fs指向的实际对象就是son子类对象\",{\"1\":{\"585\":1}}],[\"这时出于安全的考虑\",{\"1\":{\"566\":1}}],[\"这时要注意\",{\"1\":{\"683\":1}}],[\"这时要明确指出这个类的所属包\",{\"1\":{\"503\":1}}],[\"这时要返回容器\",{\"1\":{\"413\":1}}],[\"这时\",{\"1\":{\"503\":2,\"513\":1,\"615\":1}}],[\"这时建议直接删除package声明\",{\"1\":{\"499\":1}}],[\"这时往往不好找到一个已存在的实现去使用\",{\"1\":{\"415\":1}}],[\"这时如果该boolean类型的成员变量本身就叫isxxx时\",{\"1\":{\"518\":1}}],[\"这时如果还想通过引用操作堆上对象\",{\"1\":{\"412\":1}}],[\"这时如果不想死循环\",{\"1\":{\"362\":1}}],[\"这时注意作用域即可\",{\"1\":{\"331\":1}}],[\"这时会提示修改扩展名点击确认即可\",{\"1\":{\"308\":1}}],[\"这时只需要查\",{\"1\":{\"231\":1}}],[\"这时候才会进入后面的逻辑\",{\"1\":{\"1009\":1}}],[\"这时候类型肯定不能写死\",{\"1\":{\"942\":1}}],[\"这时候t是个什么类型呢\",{\"1\":{\"939\":1}}],[\"这时候想到的就是\",{\"1\":{\"595\":1}}],[\"这时候的子类就变成了父类\",{\"1\":{\"579\":1}}],[\"这时候用你的文件夹\",{\"1\":{\"1192\":1}}],[\"这时候用\",{\"1\":{\"258\":1}}],[\"这时候用integer\",{\"1\":{\"258\":1}}],[\"这时候需要我们手动将这个类的属性设置进去\",{\"1\":{\"234\":1}}],[\"这时候我就用默认值\",{\"1\":{\"171\":1}}],[\"这时候就认为是重复的数据\",{\"1\":{\"163\":1}}],[\"这时候会使用非关系型数据库来做一些事情\",{\"1\":{\"144\":1}}],[\"这时候\",{\"1\":{\"138\":1,\"169\":1,\"954\":1,\"1002\":1,\"1008\":1,\"1201\":1}}],[\"这时候怎么写\",{\"1\":{\"137\":1}}],[\"这就允许对其操作可以像链条一样排列\",{\"1\":{\"1036\":1}}],[\"这就要求我们\",{\"1\":{\"1009\":1}}],[\"这就说明什么\",{\"1\":{\"948\":1}}],[\"这就意味着是修改不了的\",{\"1\":{\"702\":1}}],[\"这就意味着还需要重写这个类的equals方法\",{\"1\":{\"675\":1}}],[\"这就意味着java当中的每个变量都必须有它的数据类型\",{\"1\":{\"319\":1}}],[\"这就很难受了\",{\"1\":{\"654\":1}}],[\"这就需要把父类类型引用\",{\"1\":{\"583\":1}}],[\"这就有点意思了\",{\"1\":{\"555\":1}}],[\"这就不得不提\",{\"1\":{\"389\":1}}],[\"这就对我们java开发者来说造成了极大的便利\",{\"1\":{\"213\":1}}],[\"这就是git\",{\"1\":{\"1183\":1}}],[\"这就是线程安全问题\",{\"1\":{\"969\":1}}],[\"这就是线程安全的\",{\"1\":{\"969\":1}}],[\"这就是传输协议\",{\"1\":{\"885\":1}}],[\"这就是哈希映射\",{\"1\":{\"679\":1,\"999\":1}}],[\"这就是api的意义所在\",{\"1\":{\"658\":1}}],[\"这就是所谓的静态内部类\",{\"1\":{\"620\":1}}],[\"这就是多态一个基本的使用案例\",{\"1\":{\"581\":1}}],[\"这就是具体方法的实现\",{\"1\":{\"580\":1}}],[\"这就是继承中的方法的覆盖\",{\"1\":{\"559\":1}}],[\"这就是继承\",{\"1\":{\"520\":1}}],[\"这就是java的继承机制\",{\"1\":{\"520\":1}}],[\"这就是java当中的\",{\"1\":{\"478\":1}}],[\"这就是java程序的基本运行原理\",{\"1\":{\"309\":1}}],[\"这就是我们之前方法的调用\",{\"1\":{\"475\":1}}],[\"这就是方法的传值问题\",{\"1\":{\"424\":1}}],[\"这就是签名的由来\",{\"1\":{\"389\":1}}],[\"这就是形式参数列表\",{\"1\":{\"382\":1}}],[\"这就是浮点数的精度问题\",{\"1\":{\"336\":1}}],[\"这就是编码表\",{\"1\":{\"324\":1}}],[\"这就是一个典型的sql注入攻击\",{\"1\":{\"204\":1}}],[\"这就是关系型数据库\",{\"1\":{\"143\":1}}],[\"这一般是通过将该对象的内部地址转换成一个int整数来实现的\",{\"1\":{\"681\":1}}],[\"这一般是通过数据库来实现的\",{\"1\":{\"420\":1}}],[\"这一点就需要手动完成了\",{\"1\":{\"577\":1}}],[\"这一点随便写一个父类成员变量的getter方法就可以验证了\",{\"1\":{\"548\":1}}],[\"这一点实际上和数组是一样的\",{\"1\":{\"456\":1}}],[\"这一点在开发中\",{\"1\":{\"389\":1}}],[\"这一方面为java程序员的开发节省了大量的精力\",{\"1\":{\"407\":1}}],[\"这一条注意事项仍然生效\",{\"1\":{\"642\":1}}],[\"这一条随着知识点的学习\",{\"1\":{\"346\":1}}],[\"这一条是注释最主要的作用\",{\"1\":{\"319\":1}}],[\"这一列的值不经常变化的\",{\"1\":{\"233\":1}}],[\"这一列非null的总行数\",{\"1\":{\"168\":1}}],[\"这一行数据对应的主键值\",{\"1\":{\"227\":1}}],[\"这一次中包含1w条sql语句信息\",{\"1\":{\"206\":1}}],[\"这一步在第一次操作的时候\",{\"1\":{\"1196\":1}}],[\"这一步会产生一个文件的版本号\",{\"1\":{\"1195\":1}}],[\"这一步需要大家注意几件事情\",{\"1\":{\"1195\":1}}],[\"这一步不是必须的\",{\"1\":{\"694\":1}}],[\"这一步\",{\"1\":{\"204\":1}}],[\"这些不要让git管理\",{\"1\":{\"1203\":1}}],[\"这些元素按\",{\"1\":{\"978\":1}}],[\"这些元素按其\",{\"1\":{\"967\":1}}],[\"这些元素是按照该\",{\"1\":{\"963\":1}}],[\"这些条件怎么传\",{\"1\":{\"956\":1}}],[\"这些信息是通过请求头中一个特殊的请求头携带的\",{\"1\":{\"1137\":1}}],[\"这些信息被存储在annotation的\",{\"1\":{\"924\":1}}],[\"这些信息jvm是需要知道的\",{\"1\":{\"541\":1}}],[\"这些标记可以在编译\",{\"1\":{\"924\":1}}],[\"这些字符串包括\",{\"1\":{\"776\":1}}],[\"这些字符中包含有sql语句中的关键字\",{\"1\":{\"204\":1}}],[\"这些对象比较特殊\",{\"1\":{\"731\":1}}],[\"这些对象所占用的内存都是可以准确释放的\",{\"1\":{\"689\":1}}],[\"这些隐含的修饰符不要写出来\",{\"1\":{\"598\":1}}],[\"这些具体实现方法可以让子类继承\",{\"1\":{\"592\":1}}],[\"这些方法是哪来的\",{\"1\":{\"533\":1}}],[\"这些方法不需要提供给外界使用\",{\"1\":{\"510\":1}}],[\"这些鸭子不能游泳了\",{\"1\":{\"530\":1}}],[\"这些鸭子有一些共同的属性\",{\"1\":{\"530\":1}}],[\"这些实参的值在原先的方法中会怎么变呢\",{\"1\":{\"424\":1}}],[\"这些区域各有各的用途\",{\"1\":{\"402\":1}}],[\"这些数据也可以是敏感数据\",{\"1\":{\"1149\":1}}],[\"这些数据是有序的\",{\"1\":{\"393\":1}}],[\"这些数据元素的数据类型\",{\"1\":{\"393\":1}}],[\"这些数据最终都是在磁盘上的\",{\"1\":{\"221\":1}}],[\"这些case是绝对互斥平行的\",{\"1\":{\"359\":1}}],[\"这些内容其实包含了图片的字节数据\",{\"1\":{\"1120\":1}}],[\"这些内容在后续再详细学习\",{\"1\":{\"327\":1}}],[\"这些内存单元我们称之为变量\",{\"1\":{\"330\":1}}],[\"这些符号被称为标识符\",{\"1\":{\"314\":1}}],[\"这些来代表第一个参数\",{\"1\":{\"254\":1}}],[\"这些文件\",{\"1\":{\"234\":1}}],[\"这些连接准备好被任何需要它们的线程使用\",{\"1\":{\"213\":1}}],[\"这些操作要么全部执行\",{\"1\":{\"208\":1}}],[\"这些早期系统虽然简单\",{\"1\":{\"142\":1}}],[\"这将返回表中记录的总数\",{\"1\":{\"188\":1}}],[\"这代表null\",{\"1\":{\"170\":1}}],[\"这无关孰优孰劣\",{\"1\":{\"144\":1}}],[\"这样我们就可以忽略掉这些文件\",{\"1\":{\"1203\":1}}],[\"这样我们才能知道\",{\"1\":{\"247\":1}}],[\"这样不可行\",{\"1\":{\"1183\":1}}],[\"这样会很被动\",{\"1\":{\"1020\":1}}],[\"这样才能保证两个方法的结果具有一致性\",{\"1\":{\"682\":1}}],[\"这样才能连续计算\",{\"1\":{\"394\":1}}],[\"这样做不是不行\",{\"1\":{\"595\":1}}],[\"这样做的好处就是可以实现java程序的跨平台运行\",{\"1\":{\"309\":1}}],[\"这样该方法在调用传参时\",{\"1\":{\"581\":1}}],[\"这样在外界看来\",{\"1\":{\"579\":1}}],[\"这样静态成员变量的赋值方式还有\",{\"1\":{\"571\":1}}],[\"这样类中成员\",{\"1\":{\"566\":1}}],[\"这样就是一种标准和规范\",{\"1\":{\"595\":1}}],[\"这样就得到一个抽象方法\",{\"1\":{\"591\":1}}],[\"这样就能够保证\",{\"1\":{\"542\":1}}],[\"这样就充分保证了想一想\",{\"1\":{\"537\":1}}],[\"这样就可以通过引用间接访问堆上的对象\",{\"1\":{\"405\":1}}],[\"这样对象之间的交互会更加灵活\",{\"1\":{\"469\":1}}],[\"这样对于java的使用者来说去使用第三方开源的数据库连接池就可能不太方便\",{\"1\":{\"213\":1}}],[\"这样每个存储单元的地址偏移量都是相同的\",{\"1\":{\"394\":1}}],[\"这样既方便记忆\",{\"1\":{\"387\":1}}],[\"这样格式就变成\",{\"1\":{\"362\":1}}],[\"这样肯定不存在冲突问题\",{\"1\":{\"353\":1}}],[\"这样写代码会更流畅\",{\"1\":{\"319\":1}}],[\"这样写没用\",{\"1\":{\"136\":1}}],[\"这样开发环境不会因为重装系统而丢失\",{\"1\":{\"306\":1}}],[\"这样速度快\",{\"1\":{\"283\":1}}],[\"这样的代码存在许多问题\",{\"1\":{\"938\":1}}],[\"这样的\",{\"1\":{\"924\":1}}],[\"这样的两个对象就不是完全独立的了\",{\"1\":{\"699\":1}}],[\"这样的话\",{\"1\":{\"681\":1,\"699\":1,\"709\":2}}],[\"这样的对应\",{\"1\":{\"679\":1,\"999\":1}}],[\"这样的类\",{\"1\":{\"591\":1}}],[\"这样的一个字符串\",{\"1\":{\"400\":1}}],[\"这样的一个for循环就变成了死循环\",{\"1\":{\"362\":1}}],[\"这样的做法\",{\"1\":{\"392\":1}}],[\"这样的程序结构\",{\"1\":{\"311\":1}}],[\"这样的文件可以有多个\",{\"1\":{\"234\":1}}],[\"这样的导航数据库来存储和操作数据\",{\"1\":{\"142\":1}}],[\"这样可以使接口更加灵活和通用\",{\"1\":{\"941\":1}}],[\"这样可以一直写下去\",{\"1\":{\"936\":1}}],[\"这样可以节约资源\",{\"1\":{\"213\":1}}],[\"这样可以提高系统的可靠性和稳定性\",{\"1\":{\"213\":1}}],[\"这样可以提高系统的性能和响应速度\",{\"1\":{\"213\":1}}],[\"这样\",{\"1\":{\"188\":1,\"319\":1,\"487\":1,\"497\":1,\"668\":1}}],[\"这边\",{\"1\":{\"121\":1}}],[\"这是同事a的第一次提交\",{\"1\":{\"1197\":1}}],[\"这是linus写得代码\",{\"1\":{\"1183\":1}}],[\"这是不合理的\",{\"1\":{\"1159\":1}}],[\"这是不行的\",{\"1\":{\"533\":1}}],[\"这是另一种常见的架构模型\",{\"1\":{\"1077\":1}}],[\"这是系统提供的一个数组拷贝方法\",{\"1\":{\"954\":1}}],[\"这是一些规范\",{\"1\":{\"939\":1}}],[\"这是一个死循环\",{\"1\":{\"700\":1}}],[\"这是一个隐式的继承\",{\"1\":{\"658\":1}}],[\"这是一个不错的命名习惯\",{\"1\":{\"592\":1}}],[\"这是一个单独针对数组操作的异常\",{\"1\":{\"411\":1}}],[\"这是一个非常重要的知识点\",{\"1\":{\"408\":1}}],[\"这是一个普通字符串\",{\"1\":{\"170\":1}}],[\"这是一个有着\",{\"1\":{\"8\":1}}],[\"这是一个\",{\"0\":{\"8\":1}}],[\"这是一个博客主页的案例\",{\"1\":{\"0\":1}}],[\"这是if语句\",{\"1\":{\"707\":1}}],[\"这是方法抛出异常列表的声明\",{\"1\":{\"687\":1}}],[\"这是映射定义强制要求的\",{\"1\":{\"682\":1}}],[\"这是局部内部类的一个重要用途\",{\"1\":{\"637\":1}}],[\"这是接口非常重要的优点\",{\"1\":{\"597\":1}}],[\"这是从上到下的\",{\"1\":{\"583\":1}}],[\"这是为什么呢\",{\"1\":{\"542\":1}}],[\"这是做不到的\",{\"1\":{\"532\":1}}],[\"这是jvm了解这个类型的过程\",{\"1\":{\"456\":1}}],[\"这是最直观的\",{\"1\":{\"442\":1}}],[\"这是最重要的请求头信息之一\",{\"1\":{\"116\":1}}],[\"这是因为这个接口并没有抽象方法\",{\"1\":{\"696\":1}}],[\"这是因为tostring方法\",{\"1\":{\"685\":1}}],[\"这是因为equals是判断对象相等的\",{\"1\":{\"682\":1}}],[\"这是因为idea的debug模式下\",{\"1\":{\"669\":1}}],[\"这是因为方法的实参可以是形参类型的对象\",{\"1\":{\"641\":1}}],[\"这是因为方法的返回值可以是返回值类型的对象\",{\"1\":{\"641\":1}}],[\"这是因为方法的调用结果是根据对象的实际类型决定的\",{\"1\":{\"559\":1}}],[\"这是因为默认值不能当成final修饰成员变量的取值\",{\"1\":{\"570\":1}}],[\"这是因为\",{\"1\":{\"508\":1}}],[\"这是因为在java当中的\",{\"1\":{\"503\":1}}],[\"这是因为数组中的元素具有默认值\",{\"1\":{\"398\":1}}],[\"这是因为早期很多java开发者都是c\",{\"1\":{\"395\":1}}],[\"这是因为操作系统底层多是c语言开发的\",{\"1\":{\"303\":1}}],[\"这是后面方法这一章节的知识\",{\"1\":{\"378\":1}}],[\"这是switch和if最本质的区别\",{\"1\":{\"360\":1}}],[\"这是浮点数的优点\",{\"1\":{\"323\":1}}],[\"这是两个标签\",{\"1\":{\"267\":1}}],[\"这是希望从数据库读写数据时能以更简单有效的方法进行\",{\"1\":{\"146\":1}}],[\"这几层都是什么\",{\"1\":{\"112\":1}}],[\"这个名字的文件\",{\"1\":{\"1203\":1}}],[\"这个命令\",{\"1\":{\"1202\":1}}],[\"这个命令可以帮助我们把工作区中的变化提交到缓冲区\",{\"1\":{\"1194\":1}}],[\"这个命令可以帮助我们查看工作区和缓冲区中的变化\",{\"1\":{\"1193\":1}}],[\"这个文件中去忽略它的变化\",{\"1\":{\"1203\":1}}],[\"这个文件中存储了数据和索引\",{\"1\":{\"225\":1}}],[\"这个文件\",{\"1\":{\"1195\":1}}],[\"这个网盘大家都可以来操作\",{\"1\":{\"1183\":1}}],[\"这个jsession这个cookie的name对应的value就是session对象的id\",{\"1\":{\"1150\":1}}],[\"这个默认的path就是你当前这个请求的path\",{\"1\":{\"1145\":1}}],[\"这个特殊的响应头set\",{\"1\":{\"1142\":1}}],[\"这个特殊的请求头叫cookie\",{\"1\":{\"1137\":1}}],[\"这个编号是89757\",{\"1\":{\"1137\":1}}],[\"这个编号第一次创建对象是10001\",{\"1\":{\"478\":2}}],[\"这个请求由登录页面提供\",{\"1\":{\"1131\":1}}],[\"这个请求主要是干啥的\",{\"1\":{\"115\":1}}],[\"这个servlet在应用程序启动过程中就会率先开始初始化\",{\"1\":{\"1110\":1}}],[\"这个servlet映射的url\",{\"1\":{\"1092\":1}}],[\"这个sql\",{\"1\":{\"230\":1}}],[\"这个sql语句的含义是\",{\"1\":{\"204\":1}}],[\"这个sql语句将user和user\",{\"1\":{\"182\":1}}],[\"这个sql相当于创建了一个test1的表\",{\"1\":{\"153\":1}}],[\"这个新的下标只有两个选择\",{\"1\":{\"1013\":1}}],[\"这个新的类会得到已存在的类的成员\",{\"1\":{\"520\":1}}],[\"这个api\",{\"1\":{\"975\":1}}],[\"这个与迭代器类似\",{\"1\":{\"959\":1}}],[\"这个位置之前叫做迭代器生成之后\",{\"1\":{\"955\":1}}],[\"这个位置之前叫做迭代器生成之前\",{\"1\":{\"955\":1}}],[\"这个接口的特点\",{\"1\":{\"951\":1}}],[\"这个操作叫做协变\",{\"1\":{\"944\":1}}],[\"这个前面的e叫做定义了一个泛型e\",{\"1\":{\"940\":1}}],[\"这个t就是标识符\",{\"1\":{\"939\":1}}],[\"这个i是变量\",{\"1\":{\"939\":1}}],[\"这个ip地址指向唯一的一台主机\",{\"1\":{\"885\":1}}],[\"这个算法的基本思想是将一系列称为\",{\"1\":{\"928\":1}}],[\"这个人要能正常听到我说话\",{\"1\":{\"885\":1}}],[\"这个pattern参数就应该写作\",{\"1\":{\"725\":1}}],[\"这个类\",{\"1\":{\"1107\":1}}],[\"这个类当中的方法大多已过时\",{\"1\":{\"721\":1}}],[\"这个类继承了\",{\"1\":{\"719\":1}}],[\"这个类是一次性的\",{\"1\":{\"641\":1}}],[\"这个问题的答案很简单\",{\"1\":{\"719\":1}}],[\"这个范围的整型包装类型对象\",{\"1\":{\"709\":1}}],[\"这个value都是final修饰的\",{\"1\":{\"702\":1}}],[\"这个题目更重要的一点在于\",{\"1\":{\"700\":1}}],[\"这个释放的过程在不同的语言当中\",{\"1\":{\"689\":1}}],[\"这个内存在对象销毁时就会随之释放\",{\"1\":{\"689\":1}}],[\"这个内存地址是留给外界访问用的\",{\"1\":{\"403\":1}}],[\"这个整数就是该对象的哈希值\",{\"1\":{\"679\":1}}],[\"这个方法相当于把高级功能中listfiles\",{\"1\":{\"777\":1}}],[\"这个方法是一个本地方法\",{\"1\":{\"723\":1}}],[\"这个方法是获取一行的内容作为一个字符串被接收\",{\"1\":{\"353\":1}}],[\"这个方法的名字\",{\"1\":{\"693\":1}}],[\"这个方法也没有任何参数\",{\"1\":{\"677\":1}}],[\"这个相等的规则就非常苛刻了\",{\"1\":{\"673\":1}}],[\"这个比较的条件就比较宽松了\",{\"1\":{\"675\":1}}],[\"这个比较是比较苛刻的\",{\"1\":{\"675\":1}}],[\"这个比较规则非常简单\",{\"1\":{\"673\":1}}],[\"这个比较严重\",{\"1\":{\"211\":1}}],[\"这个结果我们再熟悉不过了\",{\"1\":{\"667\":1}}],[\"这个结果就是返回值\",{\"1\":{\"382\":1}}],[\"这个字符串的组成是\",{\"1\":{\"667\":1}}],[\"这个字段通常是另一个表中的主键\",{\"1\":{\"171\":1}}],[\"这个lambda表达式创建了接口的子类对象\",{\"1\":{\"653\":1}}],[\"这个案例中有哪些抽象类\",{\"1\":{\"601\":1}}],[\"这个仅了解\",{\"1\":{\"600\":1}}],[\"这个抽象类里面是对功能和行为的抽象\",{\"1\":{\"595\":1}}],[\"这个注解写在子类的方法头上\",{\"1\":{\"560\":1}}],[\"这个父类中的同名方法\",{\"1\":{\"559\":1}}],[\"这个就是代表我想忽略\",{\"1\":{\"1203\":1}}],[\"这个就是客户端技术\",{\"1\":{\"1137\":1}}],[\"这个就是协议\",{\"1\":{\"110\":1}}],[\"这个就主要靠自己开动脑筋了\",{\"1\":{\"683\":1}}],[\"这个就要随机应变了\",{\"1\":{\"546\":1}}],[\"这个继承了一个已存在类的类\",{\"1\":{\"520\":1}}],[\"这个后面会详细学习\",{\"1\":{\"508\":1}}],[\"这个访问级别继承再学习\",{\"1\":{\"506\":1}}],[\"这个优点仅是理论上的\",{\"1\":{\"482\":1}}],[\"这个对象是一次性的\",{\"1\":{\"649\":1}}],[\"这个对象必须是\",{\"1\":{\"481\":2}}],[\"这个对象表示查询的结果集\",{\"1\":{\"202\":1}}],[\"这个引用指向当前对象\",{\"1\":{\"460\":1}}],[\"这个引用拷贝也被销毁了\",{\"1\":{\"425\":1}}],[\"这个语法写出来\",{\"1\":{\"653\":1}}],[\"这个语法结构\",{\"1\":{\"647\":1}}],[\"这个语法还是和访问成员变量是有很大区别的\",{\"1\":{\"555\":1}}],[\"这个语法只有一个需要注意的地方\",{\"1\":{\"486\":1,\"493\":1}}],[\"这个语法\",{\"1\":{\"452\":1,\"548\":1}}],[\"这个代码很好写\",{\"1\":{\"442\":1}}],[\"这个表叫做帕斯卡三角形\",{\"1\":{\"441\":1}}],[\"这个表中的所有的索引树都是存储在这个文件中\",{\"1\":{\"222\":1}}],[\"这个副本仍然指向了原先引用所指向的对象\",{\"1\":{\"425\":1}}],[\"这个实参的副本也被销毁了\",{\"1\":{\"425\":1}}],[\"这个异常在数组操作中很常见\",{\"1\":{\"411\":1}}],[\"这个程序中有大量的代码是重复的\",{\"1\":{\"380\":1}}],[\"这个我们面向对象再详谈\",{\"1\":{\"341\":1}}],[\"这个变量也成为局部变量\",{\"1\":{\"335\":1}}],[\"这个作用范围称之为变量的作用域\",{\"1\":{\"335\":1}}],[\"这个作为了解即可\",{\"1\":{\"137\":1}}],[\"这个数组完全是不可用的\",{\"1\":{\"413\":1}}],[\"这个数再大\",{\"1\":{\"323\":1}}],[\"这个数\",{\"1\":{\"323\":1}}],[\"这个数非常小\",{\"1\":{\"323\":1}}],[\"这个标签可以帮助我们在执行目标sql语句之前或者是之后执行一条额外的sql语句\",{\"1\":{\"273\":1}}],[\"这个配置\",{\"1\":{\"269\":1}}],[\"这个是git可以帮我们处理这个问题\",{\"1\":{\"1201\":1}}],[\"这个是mybatis的一个插件\",{\"1\":{\"263\":1}}],[\"这个是mysql默认的隔离级别\",{\"1\":{\"211\":1}}],[\"这个是映射器的配置\",{\"1\":{\"249\":1}}],[\"这个其实表示和数据库之间的一个连接\",{\"1\":{\"234\":1}}],[\"这个过程是指\",{\"1\":{\"1139\":1}}],[\"这个过程如果我们自己来完成的话\",{\"1\":{\"1120\":1}}],[\"这个过程中\",{\"1\":{\"699\":1}}],[\"这个过程称之为\",{\"1\":{\"653\":1}}],[\"这个过程需要写额外代码完成\",{\"1\":{\"529\":1}}],[\"这个过程发生了引用数据类型的类型转换\",{\"1\":{\"524\":1}}],[\"这个过程都要执行\",{\"1\":{\"479\":1}}],[\"这个过程会持续到switch结束或者碰到一个break\",{\"1\":{\"359\":1}}],[\"这个过程\",{\"1\":{\"230\":1,\"234\":1,\"726\":2}}],[\"这个查询过程读了\",{\"1\":{\"230\":1}}],[\"这个地址是指向myd文件里面的\",{\"1\":{\"227\":1}}],[\"这个b+树就叫做主键索引树\",{\"1\":{\"223\":1}}],[\"这个存储引擎是由mysql的官方团队开发的\",{\"1\":{\"221\":1}}],[\"这个存储引擎其实一开始是以插件的形式存在的\",{\"1\":{\"221\":1}}],[\"这个主要是和磁盘的读取策略以及\",{\"1\":{\"220\":1}}],[\"这个时候修改temp字符串的内容\",{\"1\":{\"730\":2}}],[\"这个时候\",{\"1\":{\"459\":1,\"481\":1,\"591\":1}}],[\"这个时候普遍有两种做法\",{\"1\":{\"413\":1}}],[\"这个时候对象就没有引用指向它\",{\"1\":{\"407\":1}}],[\"这个时候statement的执行不仅限于自身case了\",{\"1\":{\"359\":1}}],[\"这个时候查询的次数就会变多\",{\"1\":{\"220\":1}}],[\"这个时候用户可能输入一些字符\",{\"1\":{\"204\":1}}],[\"这个输入会更改sql查询语句\",{\"1\":{\"204\":1}}],[\"这个格式是一种压缩格式\",{\"1\":{\"192\":1}}],[\"这个被称为笛卡尔积\",{\"1\":{\"181\":1}}],[\"这个有关系\",{\"1\":{\"171\":1}}],[\"这个不是null\",{\"1\":{\"170\":1}}],[\"这个都是可以的\",{\"1\":{\"153\":1}}],[\"这个乱码我们目前不需要解决\",{\"1\":{\"139\":1}}],[\"这个东西并不底层\",{\"1\":{\"402\":1}}],[\"这个东西\",{\"1\":{\"116\":1}}],[\"这个协议可能包括换行符的使用\",{\"1\":{\"110\":1}}],[\"这种模型通常用于桌面应用程序或本地网络环境中\",{\"1\":{\"1077\":1}}],[\"这种模型常见于web应用程序\",{\"1\":{\"1077\":1}}],[\"这种风格将要处理的元素集合看作一种流\",{\"1\":{\"1031\":1}}],[\"这种查询不叫结构变化\",{\"1\":{\"955\":1}}],[\"这种查询了两遍索引树的情况\",{\"1\":{\"233\":1}}],[\"这种都叫单列数据\",{\"1\":{\"950\":1}}],[\"这种规则可以和ascii编码保持最大程度的兼容\",{\"1\":{\"799\":1}}],[\"这种排序被称为类的自然排序\",{\"1\":{\"740\":1}}],[\"这种需求还是很少见的\",{\"1\":{\"694\":1}}],[\"这种需求是很常见的\",{\"1\":{\"662\":1}}],[\"这种不靠谱的机制\",{\"1\":{\"690\":1}}],[\"这种不正常情况的信息就会封装成一个异常对象\",{\"1\":{\"410\":1}}],[\"这种做法比起抽象方法的强制子类实现\",{\"1\":{\"687\":1}}],[\"这种设计的目的是为了让子类自己去重写该方法的实现\",{\"1\":{\"687\":1}}],[\"这种设计方式可以提高数据存储的效率和灵活性\",{\"1\":{\"171\":1}}],[\"这种操作实际上java代码本身是做不到的\",{\"1\":{\"663\":1}}],[\"这种语法在java中称之为\",{\"1\":{\"654\":1}}],[\"这种方式有点类似于匿名对象\",{\"1\":{\"653\":1}}],[\"这种方式创建的二维数组\",{\"1\":{\"434\":1}}],[\"这种接口在java中\",{\"1\":{\"652\":1}}],[\"这种继承关系的限制\",{\"1\":{\"595\":1}}],[\"这种全新的数据类型\",{\"1\":{\"595\":2}}],[\"这种场景实际开发中\",{\"1\":{\"585\":1}}],[\"这种场景下就可以使用static\",{\"1\":{\"478\":1}}],[\"这种强转的形式还是比较好理解的\",{\"1\":{\"585\":1}}],[\"这种子类对象的初始化方式\",{\"1\":{\"542\":1}}],[\"这种程序员没有写任何代码\",{\"1\":{\"541\":1}}],[\"这种自定义的数据类型jvm不认识它\",{\"1\":{\"540\":1}}],[\"这种合情合理的需求呢\",{\"1\":{\"505\":1}}],[\"这种代码形式\",{\"1\":{\"487\":1}}],[\"这种代码写出来也不美观\",{\"1\":{\"392\":1}}],[\"这种情况没有初始值就无法返回结果\",{\"1\":{\"1050\":1}}],[\"这种情况下\",{\"1\":{\"713\":1}}],[\"这种情况\",{\"1\":{\"461\":1}}],[\"这种情况就是\",{\"1\":{\"442\":1}}],[\"这种完全不同于基本数据类型的数据类型\",{\"1\":{\"455\":1}}],[\"这种将大问题分解为小问题的思想就是递归的思想\",{\"1\":{\"442\":1}}],[\"这种格式初始化的二维数组\",{\"1\":{\"438\":1}}],[\"这种对象没有意义了\",{\"1\":{\"407\":1}}],[\"这种对象意味着我们就无法再次使用它了\",{\"1\":{\"407\":1}}],[\"这种和java同源的设计语言\",{\"1\":{\"395\":1}}],[\"这种编号\",{\"1\":{\"393\":1}}],[\"这种写法实际上是错误的\",{\"1\":{\"352\":1}}],[\"这种叫做聚集索引\",{\"1\":{\"226\":1}}],[\"这种索引叫做\",{\"1\":{\"224\":1}}],[\"这种类型的文件\",{\"1\":{\"192\":1}}],[\"这种冗余数据的做法叫\",{\"1\":{\"178\":1}}],[\"这种关系通常需要通过中间表来实现\",{\"1\":{\"174\":1}}],[\"这种关系\",{\"1\":{\"172\":1,\"173\":1}}],[\"这种结构组织的\",{\"1\":{\"146\":1}}],[\"这种\",{\"1\":{\"143\":1,\"570\":1}}],[\"这种大公司\",{\"1\":{\"126\":1}}],[\"这种约定的数据格式和操作流程\",{\"1\":{\"110\":1}}],[\"这种协议通常包括详细的条款和条件\",{\"1\":{\"107\":1}}],[\"这里应该做查询\",{\"1\":{\"1132\":1}}],[\"这里有一个170以下的学生\",{\"1\":{\"1046\":1}}],[\"这里有个简单的概念认识就可以了\",{\"1\":{\"324\":1}}],[\"这里只是看起来好像是integer\",{\"1\":{\"940\":1}}],[\"这里的\",{\"1\":{\"950\":1,\"1090\":1}}],[\"这里的步骤可能很繁琐\",{\"1\":{\"936\":1}}],[\"这里的位置是指目标字符串的第一个字符\",{\"1\":{\"737\":4}}],[\"这里的性别信息是约定好的第四列数据\",{\"1\":{\"110\":1}}],[\"这里特别要强调的一点是\",{\"1\":{\"726\":1}}],[\"这里提供一个时间戳的转换网站\",{\"1\":{\"724\":1}}],[\"这里需要注意的地方有\",{\"1\":{\"692\":1}}],[\"这里就是avatar\",{\"1\":{\"1120\":1}}],[\"这里就是具体元素的值\",{\"1\":{\"440\":1}}],[\"这里就体现了java\",{\"1\":{\"689\":1}}],[\"这里所谓的\",{\"1\":{\"658\":1}}],[\"这里讲一下它的形式\",{\"1\":{\"606\":1}}],[\"这里讲一个形象的案例\",{\"1\":{\"582\":1}}],[\"这里留给大家思考~\",{\"1\":{\"561\":1}}],[\"这里能够调用谁的对象的clone\",{\"1\":{\"538\":1}}],[\"这里能否创建student对象\",{\"1\":{\"538\":1}}],[\"这里你不需要你看\",{\"1\":{\"510\":1}}],[\"这里还是要强调一下\",{\"1\":{\"509\":1}}],[\"这里还是想再强调一下\",{\"1\":{\"494\":1}}],[\"这里直接跳过不学习\",{\"1\":{\"509\":1}}],[\"这里总结一下给静态成员变量赋值的几种方式\",{\"1\":{\"494\":1}}],[\"这里总结给成员变量赋值的几种方式\",{\"1\":{\"487\":1}}],[\"这里我们讲的是servlet的生命周期\",{\"1\":{\"1093\":1}}],[\"这里我们就来学习一下这个date类\",{\"1\":{\"721\":1}}],[\"这里我们就来研究一下clone方法的使用步骤\",{\"1\":{\"694\":1}}],[\"这里我们做一下原理的讲解\",{\"1\":{\"708\":1}}],[\"这里我们先不管\",{\"1\":{\"692\":1}}],[\"这里我们先不用了解它的详细过程\",{\"1\":{\"456\":1}}],[\"这里我们可以先简单了解一下\",{\"1\":{\"680\":1}}],[\"这里我们直接说明一下\",{\"1\":{\"648\":1}}],[\"这里我们想到了抽象类\",{\"1\":{\"595\":1}}],[\"这里我们来补充讲解一下\",{\"1\":{\"534\":1}}],[\"这里我们不妨总结一下\",{\"1\":{\"467\":1}}],[\"这里我们简单了解一下即可~如果你想知道更详细的\",{\"1\":{\"326\":1}}],[\"这里先了解\",{\"1\":{\"667\":1}}],[\"这里先默认是\",{\"1\":{\"450\":1}}],[\"这里先记一下\",{\"1\":{\"328\":1}}],[\"这里不是json而是普通字符\",{\"1\":{\"1127\":1}}],[\"这里不适用继承\",{\"1\":{\"595\":1}}],[\"这里不再赘述\",{\"1\":{\"457\":1,\"648\":1}}],[\"这里不再细表\",{\"1\":{\"323\":1}}],[\"这里不应该一行定义多个变量\",{\"1\":{\"433\":1}}],[\"这里犯了两个错误\",{\"1\":{\"433\":1}}],[\"这里两个拷贝完成了数组交换\",{\"1\":{\"426\":1}}],[\"这里举一个反例\",{\"1\":{\"426\":1}}],[\"这里举一个非常常见的案例\",{\"1\":{\"311\":1}}],[\"这里简单了解一下\",{\"1\":{\"410\":1}}],[\"这里是logo\",{\"1\":{\"1120\":1}}],[\"这里是你需要关注\",{\"1\":{\"510\":1}}],[\"这里是数组对象\",{\"1\":{\"397\":1}}],[\"这里是内容\",{\"1\":{\"86\":1,\"87\":1,\"91\":1,\"92\":1,\"96\":1,\"97\":1,\"101\":1,\"102\":1,\"1055\":1,\"1056\":1,\"1060\":1,\"1061\":1,\"1065\":1,\"1066\":1,\"1070\":1,\"1071\":1,\"1163\":1,\"1164\":1,\"1168\":1,\"1169\":1,\"1173\":1,\"1174\":1,\"1178\":1,\"1179\":1}}],[\"这里涉及一个二进制表示小数的转换问题\",{\"1\":{\"336\":1}}],[\"这里\",{\"1\":{\"327\":1,\"478\":1,\"541\":1}}],[\"这里要理清楚两个点\",{\"1\":{\"317\":1}}],[\"这里面当然包括中文\",{\"1\":{\"315\":1}}],[\"这里常见的类型有类和接口\",{\"1\":{\"312\":1}}],[\"这里给出六个功能接口\",{\"1\":{\"654\":1}}],[\"这里给出一个测试代码\",{\"1\":{\"690\":1}}],[\"这里给出一个继承语法的练习案例\",{\"1\":{\"530\":1}}],[\"这里给出一个手写的参考代码\",{\"1\":{\"440\":1}}],[\"这里给一个友情提示\",{\"1\":{\"308\":1}}],[\"这里给大家演示一个问题\",{\"1\":{\"215\":1}}],[\"这里以windows操作系统为例\",{\"1\":{\"307\":1}}],[\"这里传入的\",{\"1\":{\"234\":1}}],[\"这份文件规定了房屋的购买价格\",{\"1\":{\"109\":1}}],[\"樱桃\",{\"0\":{\"85\":1},\"2\":{\"88\":1}}],[\"此映射不包含任何映射关系\",{\"1\":{\"1026\":1}}],[\"此方法通常要优于\",{\"1\":{\"972\":1}}],[\"此方法一直阻塞\",{\"1\":{\"792\":1,\"794\":1}}],[\"此内存区域的唯一目的就是存放对象\",{\"1\":{\"925\":1}}],[\"此类实现了一个输出流\",{\"1\":{\"923\":1}}],[\"此类实现服务器套接字\",{\"1\":{\"900\":1}}],[\"此类实现客户端套接字\",{\"1\":{\"899\":1}}],[\"此类表示数据报包\",{\"1\":{\"890\":1}}],[\"此类表示用来发送和接收数据报包的套接字\",{\"1\":{\"889\":1}}],[\"此操作受到系统计时器和调度程序精度和准确性的影响\",{\"1\":{\"839\":1}}],[\"此抽象类是表示字节输入流的所有类的超类\",{\"1\":{\"792\":1}}],[\"此抽象类是表示输出字节流的所有类的超类\",{\"1\":{\"786\":1}}],[\"此抽象的路径名表示的目录中的所有文件和文件夹的名字\",{\"1\":{\"776\":1}}],[\"此抽象路径名表示的文件的长度\",{\"1\":{\"775\":1}}],[\"此目录由系统属性\",{\"1\":{\"767\":1}}],[\"此接口强行对实现它的每个类的对象进行整体排序\",{\"1\":{\"740\":1}}],[\"此接口并不是java语法中的\",{\"1\":{\"658\":1}}],[\"此对象即调用该equals方法的对象\",{\"1\":{\"672\":1}}],[\"此时session的编号会附着在地址栏的后面\",{\"1\":{\"1158\":1}}],[\"此时\",{\"1\":{\"906\":1,\"907\":2}}],[\"此时如果没有再次使用notify语句\",{\"1\":{\"868\":1}}],[\"此时单参构造不会执行\",{\"1\":{\"471\":1}}],[\"此时2参构造不会执行\",{\"1\":{\"471\":1}}],[\"此时表示方法拥有返回值\",{\"1\":{\"382\":1}}],[\"此时需要在字段列表后声明的方法\",{\"1\":{\"169\":1}}],[\"此页面应当包含\",{\"1\":{\"82\":1}}],[\"此文字有脚注^first\",{\"1\":{\"62\":1}}],[\"徽章\",{\"1\":{\"81\":1}}],[\"徽章文字\",{\"1\":{\"81\":1}}],[\"分支操作\",{\"1\":{\"1204\":1}}],[\"分支管理\",{\"0\":{\"1204\":1}}],[\"分支语句结构的引导词\",{\"1\":{\"312\":1}}],[\"分三个层级\",{\"1\":{\"997\":1}}],[\"分代收集算法\",{\"0\":{\"933\":1}}],[\"分配给线程的默认优先级\",{\"1\":{\"838\":1}}],[\"分配新的\",{\"1\":{\"833\":1}}],[\"分配它们的长度\",{\"1\":{\"441\":1}}],[\"分隔符中name对应的值也是这个\",{\"1\":{\"1120\":1}}],[\"分隔功能\",{\"1\":{\"739\":1}}],[\"分隔的意思\",{\"1\":{\"356\":1}}],[\"分析一个请求体\",{\"1\":{\"1104\":1}}],[\"分析一下\",{\"1\":{\"590\":1}}],[\"分析不存在的情况\",{\"1\":{\"851\":1}}],[\"分析不存在的票\",{\"1\":{\"851\":1}}],[\"分析\",{\"1\":{\"595\":1,\"607\":1,\"851\":3}}],[\"分析程序的执行顺序\",{\"1\":{\"545\":1}}],[\"分情况讨论final修饰变量\",{\"1\":{\"568\":1}}],[\"分数不合法\",{\"1\":{\"764\":1}}],[\"分数\",{\"1\":{\"472\":3}}],[\"分数+3\",{\"1\":{\"472\":2}}],[\"分解成若干相似的小规模的子问题\",{\"1\":{\"442\":1}}],[\"分别去获得请求参数\",{\"1\":{\"1119\":1}}],[\"分别访问\",{\"1\":{\"1093\":1}}],[\"分别url\",{\"1\":{\"1091\":1}}],[\"分别定义一个表示人和学生的类\",{\"1\":{\"519\":1}}],[\"分别输出数组名及元素\",{\"1\":{\"409\":1}}],[\"分别静态\",{\"1\":{\"409\":1}}],[\"分别是\",{\"1\":{\"318\":1}}],[\"分类仍然是\",{\"1\":{\"527\":1}}],[\"分类\",{\"0\":{\"507\":1,\"912\":1},\"1\":{\"312\":1,\"608\":1}}],[\"分类为\",{\"1\":{\"80\":1}}],[\"分次查询\",{\"0\":{\"276\":1,\"279\":1,\"282\":1}}],[\"分列问题\",{\"1\":{\"256\":1}}],[\"分表问题\",{\"1\":{\"256\":1}}],[\"分组或者统计数据\",{\"1\":{\"184\":1}}],[\"分组\",{\"0\":{\"167\":1}}],[\"分差大于30的\",{\"1\":{\"162\":2}}],[\"分割\",{\"1\":{\"159\":1}}],[\"分割垂直幻灯片\",{\"1\":{\"5\":1}}],[\"分布式版本控制工具\",{\"1\":{\"1183\":1}}],[\"分布式\",{\"1\":{\"144\":1,\"1183\":1}}],[\"分门别类的来存储数据\",{\"1\":{\"141\":1}}],[\"分为几步\",{\"1\":{\"851\":1}}],[\"分为响应行\",{\"1\":{\"119\":1}}],[\"分为请求行\",{\"1\":{\"114\":1}}],[\"分层的目的主要是为了解耦\",{\"1\":{\"112\":1}}],[\"分层\",{\"1\":{\"112\":1}}],[\"日常工作几乎不会直接涉及到底层网络协议和实现细节\",{\"1\":{\"885\":1}}],[\"日常开发\",{\"1\":{\"567\":1}}],[\"日常开发中\",{\"1\":{\"469\":1}}],[\"日文编码表\",{\"1\":{\"800\":1}}],[\"日文等\",{\"1\":{\"315\":1}}],[\"日本人听到可能会跪坐\",{\"1\":{\"514\":1}}],[\"日志配置\",{\"1\":{\"246\":1}}],[\"日志目录\",{\"1\":{\"130\":1}}],[\"日期\",{\"1\":{\"153\":1}}],[\"日\",{\"1\":{\"80\":1,\"724\":2}}],[\"月份\",{\"1\":{\"724\":1}}],[\"月\",{\"1\":{\"80\":1,\"724\":2}}],[\"年1月1日\",{\"1\":{\"775\":1}}],[\"年份\",{\"1\":{\"724\":1}}],[\"年月日时分秒\",{\"1\":{\"153\":2}}],[\"年月日\",{\"1\":{\"153\":1,\"844\":3}}],[\"年代\",{\"1\":{\"142\":2}}],[\"年代初诞生至今\",{\"1\":{\"142\":1}}],[\"年龄大于20的人数\",{\"1\":{\"1053\":1}}],[\"年龄大于18的\",{\"1\":{\"159\":1}}],[\"年龄最小的学生\",{\"1\":{\"1050\":1}}],[\"年龄最大的学生\",{\"1\":{\"1050\":1}}],[\"年龄不合法\",{\"1\":{\"924\":1}}],[\"年龄校验\",{\"1\":{\"924\":1}}],[\"年龄18\",{\"1\":{\"924\":1}}],[\"年龄在18\",{\"1\":{\"924\":1}}],[\"年龄相同的情况下\",{\"1\":{\"740\":1}}],[\"年龄25\",{\"1\":{\"158\":1}}],[\"年龄\",{\"1\":{\"110\":1,\"153\":1,\"162\":1,\"478\":1,\"517\":2,\"950\":1,\"956\":1}}],[\"年\",{\"1\":{\"80\":1,\"153\":1,\"724\":2}}],[\"^异或位运算符\",{\"1\":{\"348\":1}}],[\"^=\",{\"1\":{\"345\":1}}],[\"^\",{\"1\":{\"75\":1,\"345\":2,\"347\":2,\"348\":3,\"350\":2,\"978\":2,\"1008\":8,\"1016\":2}}],[\"^i\",{\"1\":{\"75\":1}}],[\"^r\",{\"1\":{\"75\":2}}],[\"操作sublist产生的对象\",{\"1\":{\"960\":1}}],[\"操作起来非常的麻烦\",{\"1\":{\"950\":1}}],[\"操作起来麻烦\",{\"1\":{\"950\":1}}],[\"操作受限的线性表\",{\"1\":{\"947\":1,\"970\":1}}],[\"操作栈\",{\"1\":{\"925\":1}}],[\"操作系统本身\",{\"1\":{\"838\":1}}],[\"操作系统优先级\",{\"0\":{\"837\":1}}],[\"操作系统缓存\",{\"1\":{\"113\":1}}],[\"操作的集合\",{\"1\":{\"455\":1}}],[\"操作方法调用就是操作方法的返回值\",{\"1\":{\"383\":1}}],[\"操作数的值减少1\",{\"1\":{\"344\":1}}],[\"操作数的值增加1\",{\"1\":{\"344\":1}}],[\"操作符\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"350\":1}}],[\"操作指令可能无法正常显示结果\",{\"1\":{\"307\":1}}],[\"操作环境变量需要注意\",{\"1\":{\"144\":1}}],[\"操作\",{\"1\":{\"73\":1,\"420\":1,\"445\":1}}],[\"wq\",{\"1\":{\"1201\":1}}],[\"wdbeanutils\",{\"1\":{\"1118\":1}}],[\"wpimg\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"w3\",{\"1\":{\"1097\":1}}],[\"wu\",{\"1\":{\"951\":2,\"953\":7,\"955\":5,\"956\":1,\"1034\":2}}],[\"wwdeuiqjbzl8teyy\",{\"1\":{\"1132\":1}}],[\"ww\",{\"1\":{\"740\":1,\"741\":1,\"1028\":1}}],[\"www\",{\"1\":{\"115\":5,\"120\":4,\"121\":3,\"124\":1,\"220\":1,\"244\":2,\"256\":2,\"1097\":1,\"1113\":1,\"1182\":1}}],[\"workspace\",{\"1\":{\"1083\":1}}],[\"workspace2\",{\"1\":{\"769\":3,\"771\":3,\"788\":1}}],[\"work\",{\"1\":{\"594\":5}}],[\"word拼写\",{\"1\":{\"826\":1}}],[\"word\",{\"1\":{\"313\":1,\"784\":1}}],[\"world\",{\"1\":{\"308\":2,\"315\":1,\"327\":1,\"479\":1,\"498\":1,\"1124\":3}}],[\"wallstcn\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"wangao4\",{\"1\":{\"1132\":2}}],[\"wangshuai\",{\"1\":{\"1132\":2}}],[\"wangdao\",{\"1\":{\"1120\":1}}],[\"wangwu=789987\",{\"1\":{\"1141\":2}}],[\"wangwu\",{\"1\":{\"261\":1}}],[\"want\",{\"1\":{\"739\":3}}],[\"wait定义在\",{\"1\":{\"873\":1}}],[\"wait与notify的基本使用\",{\"0\":{\"872\":1}}],[\"wait与notify机制\",{\"0\":{\"868\":1},\"1\":{\"868\":1}}],[\"wait方法释放锁\",{\"1\":{\"871\":1}}],[\"waiting\",{\"1\":{\"847\":2}}],[\"waittostop\",{\"1\":{\"825\":4}}],[\"wait\",{\"0\":{\"869\":1,\"873\":1},\"1\":{\"658\":2,\"825\":4,\"867\":14,\"868\":2,\"869\":1,\"870\":7,\"871\":3,\"872\":8,\"873\":3}}],[\"warning\",{\"1\":{\"246\":1}}],[\"war包部署到了tomcat中之后\",{\"1\":{\"138\":1}}],[\"war\",{\"1\":{\"136\":1,\"1080\":2,\"1084\":1}}],[\"wrapper\",{\"1\":{\"213\":1,\"704\":2}}],[\"writeobject\",{\"1\":{\"823\":2,\"824\":2,\"904\":2}}],[\"writeboolean\",{\"1\":{\"817\":1}}],[\"writebyte\",{\"1\":{\"817\":1}}],[\"writechar\",{\"1\":{\"817\":1}}],[\"writefloat\",{\"1\":{\"817\":1}}],[\"writelong\",{\"1\":{\"817\":1}}],[\"writeshort\",{\"1\":{\"817\":1}}],[\"writedata\",{\"1\":{\"817\":2}}],[\"writedouble\",{\"1\":{\"816\":1,\"817\":2}}],[\"writeint\",{\"1\":{\"816\":1,\"817\":2}}],[\"write数据\",{\"1\":{\"789\":1}}],[\"writer\",{\"1\":{\"783\":1,\"808\":2,\"820\":2,\"824\":1}}],[\"write\",{\"1\":{\"127\":3,\"309\":1,\"786\":4,\"788\":12,\"789\":15,\"790\":9,\"804\":5,\"806\":15,\"807\":2,\"808\":3,\"817\":3,\"818\":6,\"844\":2,\"902\":1,\"903\":2,\"905\":3,\"923\":1,\"1078\":1,\"1113\":2,\"1120\":1,\"1124\":2,\"1126\":1,\"1127\":1,\"1128\":1,\"1130\":4,\"1131\":2}}],[\"with\",{\"1\":{\"789\":2}}],[\"win64\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"win\",{\"1\":{\"307\":1,\"800\":1}}],[\"windows等平台下\",{\"1\":{\"143\":1}}],[\"windows\",{\"1\":{\"113\":1,\"304\":1,\"767\":2,\"768\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":2,\"1132\":1,\"1138\":2,\"1140\":2,\"1150\":2}}],[\"widenius的女儿maria的名字\",{\"1\":{\"143\":1}}],[\"weixinopenid\",{\"1\":{\"1132\":20}}],[\"weight\",{\"1\":{\"153\":1}}],[\"weak\",{\"1\":{\"933\":1}}],[\"wechat\",{\"1\":{\"720\":3}}],[\"wechatpay\",{\"1\":{\"720\":1}}],[\"weekdaynum\",{\"1\":{\"719\":27}}],[\"weekday2\",{\"1\":{\"715\":17}}],[\"weekday\",{\"1\":{\"713\":2,\"717\":3,\"718\":4}}],[\"welcome\",{\"1\":{\"139\":4}}],[\"webkitformboundary1pgacdbbgfgbpzyi\",{\"1\":{\"1120\":4}}],[\"webp\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"web资源\",{\"1\":{\"1099\":1}}],[\"webapp文件夹\",{\"1\":{\"1099\":1}}],[\"webapps目录下\",{\"1\":{\"134\":1}}],[\"webapps目录下的\",{\"1\":{\"134\":1,\"138\":1}}],[\"webapps\",{\"1\":{\"130\":1}}],[\"webinitparam\",{\"1\":{\"1086\":1,\"1094\":2,\"1095\":2,\"1097\":1}}],[\"webservlet的value属性值\",{\"1\":{\"1132\":1}}],[\"webservlet的value属性或url\",{\"1\":{\"1089\":1}}],[\"webservlet的\",{\"1\":{\"1097\":1}}],[\"webservlet注解的value属性的用法\",{\"1\":{\"1089\":1}}],[\"webservlet注解的时候\",{\"1\":{\"1088\":1,\"1093\":1}}],[\"webservlet注解\",{\"0\":{\"1086\":1}}],[\"webservlet\",{\"1\":{\"1078\":2,\"1085\":2,\"1086\":1,\"1088\":1,\"1093\":3,\"1094\":1,\"1095\":1,\"1096\":3,\"1097\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1116\":1,\"1117\":1,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":2,\"1132\":3,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1152\":2,\"1159\":3}}],[\"webservice\",{\"1\":{\"924\":1}}],[\"web服务器\",{\"1\":{\"1077\":1}}],[\"web应用的描述文件\",{\"1\":{\"1098\":1}}],[\"web应用的类加载路径classpath\",{\"1\":{\"1098\":1}}],[\"web应用的根目录\",{\"1\":{\"1098\":1}}],[\"web应用的目录结构\",{\"0\":{\"1098\":1}}],[\"web应用通过浏览器访问\",{\"1\":{\"303\":1}}],[\"web应用当然也可以采用c\",{\"1\":{\"303\":1}}],[\"web应用具备以下特点\",{\"1\":{\"303\":1}}],[\"web应用程序\",{\"1\":{\"303\":1}}],[\"web应用\",{\"1\":{\"303\":2,\"1080\":1}}],[\"web\",{\"1\":{\"139\":1,\"1097\":2,\"1098\":2,\"1099\":1,\"1100\":1}}],[\"wednesday\",{\"1\":{\"715\":1,\"717\":1,\"719\":4}}],[\"wed\",{\"1\":{\"72\":1,\"116\":1,\"1122\":1,\"1123\":1}}],[\"wh\",{\"1\":{\"1028\":9,\"1052\":5}}],[\"when>\",{\"1\":{\"266\":2}}],[\"when\",{\"0\":{\"266\":1},\"1\":{\"264\":1,\"266\":1}}],[\"where>\",{\"1\":{\"264\":2,\"265\":1,\"266\":1,\"267\":1,\"272\":1}}],[\"where这个标签可以帮助我们在最终执行的sql中自动生成where关键字\",{\"1\":{\"264\":1}}],[\"where主要用于对原始表进行过滤\",{\"1\":{\"167\":1}}],[\"where相当于是过滤器\",{\"1\":{\"159\":1}}],[\"where\",{\"0\":{\"162\":1,\"264\":1},\"1\":{\"66\":1,\"149\":1,\"159\":2,\"160\":2,\"161\":3,\"162\":20,\"164\":3,\"167\":1,\"168\":2,\"171\":1,\"182\":1,\"184\":6,\"185\":3,\"195\":1,\"196\":1,\"204\":8,\"209\":4,\"220\":5,\"226\":1,\"229\":1,\"230\":4,\"231\":2,\"232\":2,\"233\":6,\"234\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":1,\"247\":5,\"249\":1,\"250\":2,\"251\":1,\"256\":5,\"257\":3,\"259\":1,\"263\":4,\"267\":2,\"268\":1,\"269\":1,\"276\":1,\"279\":1,\"282\":1,\"283\":2}}],[\"while中的循环体语句和循环控制语句\",{\"1\":{\"364\":1}}],[\"while中的循环体语句\",{\"1\":{\"364\":1}}],[\"while还是do\",{\"1\":{\"361\":1}}],[\"while循环的语义\",{\"1\":{\"364\":1}}],[\"while循环的循环控制语句\",{\"1\":{\"364\":1}}],[\"while循环看起来语法和for循环不同\",{\"1\":{\"363\":1}}],[\"while循环\",{\"0\":{\"363\":1,\"364\":1},\"1\":{\"361\":2,\"894\":1}}],[\"while循环结构中\",{\"1\":{\"312\":1}}],[\"while\",{\"1\":{\"127\":2,\"197\":1,\"214\":1,\"234\":1,\"312\":1,\"361\":1,\"363\":1,\"364\":1,\"366\":1,\"442\":1,\"737\":1,\"794\":3,\"814\":1,\"821\":1,\"825\":4,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"860\":1,\"864\":1,\"867\":4,\"894\":3,\"895\":2,\"903\":3,\"905\":4,\"923\":1,\"955\":1,\"956\":2,\"1112\":2,\"1113\":2,\"1117\":1,\"1118\":2,\"1120\":1,\"1124\":1,\"1128\":1}}],[\"pp\",{\"1\":{\"1028\":1}}],[\"pptx\",{\"1\":{\"1192\":1}}],[\"ppt\",{\"1\":{\"784\":1}}],[\"p指的是原本存在的元素\",{\"1\":{\"1009\":1}}],[\"p就是\",{\"1\":{\"1009\":1}}],[\"peeklast\",{\"1\":{\"968\":1,\"975\":2}}],[\"peekfirst\",{\"1\":{\"968\":1,\"975\":2}}],[\"peek\",{\"1\":{\"968\":1,\"970\":1,\"972\":2,\"975\":1}}],[\"period\",{\"1\":{\"883\":3,\"884\":3}}],[\"personlist\",{\"1\":{\"1039\":2,\"1050\":2}}],[\"personcls\",{\"1\":{\"920\":6,\"921\":6}}],[\"person类和student类都可以使用person类的静态成员变量国籍\",{\"1\":{\"553\":1}}],[\"person类和student类的静态成员变量国籍分别属于两个类本身\",{\"1\":{\"553\":1}}],[\"person类的无参构造\",{\"1\":{\"545\":1}}],[\"person类加载\",{\"1\":{\"545\":1}}],[\"person构造代码块\",{\"1\":{\"545\":1}}],[\"person\",{\"1\":{\"467\":5,\"545\":3,\"553\":4,\"919\":3,\"920\":2,\"921\":4,\"922\":6}}],[\"persondemo\",{\"1\":{\"316\":1}}],[\"performance\",{\"1\":{\"148\":1}}],[\"psvar\",{\"1\":{\"545\":5}}],[\"p3\",{\"1\":{\"472\":2,\"474\":4}}],[\"p2抢到>\",{\"1\":{\"867\":1}}],[\"p2\",{\"1\":{\"472\":2,\"474\":4,\"867\":1}}],[\"pyhond\",{\"1\":{\"465\":1}}],[\"python\",{\"1\":{\"281\":1,\"319\":1,\"463\":1}}],[\"p1又抢到\",{\"1\":{\"867\":1}}],[\"p1抢到\",{\"1\":{\"867\":1}}],[\"p1\",{\"1\":{\"265\":3,\"472\":2,\"474\":4,\"867\":1}}],[\"p123456\",{\"1\":{\"147\":1,\"212\":2}}],[\"phys\",{\"1\":{\"1120\":1}}],[\"phantom\",{\"1\":{\"211\":1}}],[\"phones\",{\"1\":{\"271\":24,\"272\":2}}],[\"phone\",{\"1\":{\"153\":1,\"263\":7,\"264\":5,\"265\":10,\"266\":2,\"267\":5,\"268\":9,\"269\":11,\"271\":41,\"272\":2,\"273\":16,\"274\":17}}],[\"pi\",{\"1\":{\"570\":1}}],[\"pi获取\",{\"1\":{\"386\":1}}],[\"pic\",{\"1\":{\"180\":1,\"275\":2,\"277\":4}}],[\"pid\",{\"1\":{\"171\":1}}],[\"p\",{\"1\":{\"147\":1,\"187\":3,\"467\":1,\"889\":2,\"919\":1,\"921\":2,\"1009\":6,\"1016\":4,\"1029\":2,\"1132\":1}}],[\"pom\",{\"0\":{\"1079\":1},\"1\":{\"1080\":1,\"1099\":1,\"1100\":1}}],[\"pop\",{\"1\":{\"968\":1,\"975\":1}}],[\"polllastentry\",{\"1\":{\"1026\":1}}],[\"polllast\",{\"1\":{\"968\":1,\"975\":2}}],[\"pollfirstentry\",{\"1\":{\"1026\":1}}],[\"pollfirst\",{\"1\":{\"968\":1,\"975\":2,\"1028\":3}}],[\"poll\",{\"1\":{\"968\":1,\"970\":1,\"972\":2,\"975\":1}}],[\"polymorphic\",{\"1\":{\"575\":1}}],[\"port\",{\"1\":{\"885\":1,\"889\":1,\"890\":1,\"892\":4,\"893\":2,\"895\":6,\"899\":1,\"900\":1,\"902\":2,\"918\":6}}],[\"port=\",{\"1\":{\"139\":1}}],[\"power\",{\"1\":{\"978\":1}}],[\"pow\",{\"1\":{\"348\":1}}],[\"pooled\",{\"1\":{\"234\":1,\"244\":1,\"248\":4}}],[\"pool\",{\"1\":{\"214\":1,\"880\":5,\"903\":2}}],[\"pooling\",{\"1\":{\"213\":1}}],[\"posts\",{\"0\":{\"1206\":1}}],[\"postman构造cookie\",{\"0\":{\"1141\":1},\"1\":{\"1139\":1}}],[\"postman中设置请求头\",{\"1\":{\"1137\":1}}],[\"postmanruntime\",{\"1\":{\"1113\":1,\"1141\":1}}],[\"postman\",{\"1\":{\"1076\":1}}],[\"postgres\",{\"1\":{\"143\":1}}],[\"postgresql\",{\"1\":{\"143\":1}}],[\"post的语义是用来进行提交数据\",{\"1\":{\"115\":1}}],[\"post请求请求参数乱码\",{\"0\":{\"1119\":1}}],[\"post请求请求的参数放在请求体里\",{\"1\":{\"115\":1}}],[\"post请求安全一点\",{\"1\":{\"115\":1}}],[\"post请求一般是提交数据\",{\"1\":{\"115\":1}}],[\"post请求\",{\"1\":{\"115\":2,\"1104\":1}}],[\"post\",{\"1\":{\"115\":3,\"1085\":1,\"1104\":2,\"1110\":1,\"1111\":2,\"1113\":1,\"1119\":1,\"1120\":2}}],[\"position\",{\"1\":{\"71\":1,\"954\":1}}],[\"pull\",{\"0\":{\"1197\":1},\"1\":{\"1201\":1}}],[\"push之前最好先pull一下\",{\"1\":{\"1201\":1}}],[\"push呢\",{\"1\":{\"1196\":1}}],[\"push的时候\",{\"1\":{\"1196\":1}}],[\"push这个命令可以帮助我们把本地仓库中的所有变化\",{\"1\":{\"1196\":1}}],[\"push\",{\"0\":{\"1196\":1},\"1\":{\"965\":1,\"968\":1,\"975\":1,\"1201\":2,\"1204\":1}}],[\"putall\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"put\",{\"1\":{\"127\":1,\"144\":1,\"997\":1,\"1010\":2,\"1018\":1,\"1023\":1,\"1026\":1,\"1116\":1,\"1159\":1}}],[\"publication\",{\"1\":{\"153\":1}}],[\"public\",{\"1\":{\"81\":1,\"127\":10,\"203\":3,\"204\":3,\"205\":1,\"206\":1,\"207\":1,\"213\":3,\"214\":4,\"234\":5,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":3,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"268\":1,\"269\":1,\"271\":3,\"272\":1,\"273\":1,\"274\":1,\"275\":2,\"276\":1,\"277\":1,\"278\":2,\"279\":1,\"280\":1,\"281\":2,\"282\":1,\"283\":1,\"285\":3,\"287\":1,\"308\":2,\"312\":1,\"316\":3,\"331\":2,\"383\":2,\"385\":2,\"389\":5,\"415\":2,\"418\":2,\"419\":2,\"423\":4,\"424\":1,\"425\":1,\"426\":1,\"440\":1,\"441\":1,\"442\":5,\"444\":1,\"450\":3,\"459\":4,\"460\":3,\"465\":6,\"467\":2,\"468\":5,\"469\":17,\"471\":7,\"472\":4,\"474\":4,\"478\":3,\"479\":5,\"491\":5,\"498\":14,\"506\":2,\"508\":1,\"509\":2,\"516\":4,\"517\":2,\"518\":2,\"534\":2,\"535\":3,\"538\":3,\"539\":2,\"545\":7,\"555\":2,\"560\":2,\"564\":7,\"570\":2,\"573\":5,\"588\":11,\"590\":3,\"594\":14,\"595\":3,\"596\":1,\"598\":2,\"606\":3,\"611\":1,\"619\":3,\"622\":1,\"650\":2,\"655\":4,\"660\":1,\"663\":1,\"665\":1,\"667\":1,\"668\":1,\"669\":4,\"671\":1,\"673\":1,\"677\":1,\"690\":2,\"696\":3,\"699\":1,\"700\":1,\"706\":2,\"710\":1,\"711\":3,\"713\":1,\"715\":10,\"717\":3,\"718\":2,\"719\":10,\"720\":8,\"723\":2,\"725\":1,\"726\":2,\"729\":14,\"730\":2,\"737\":6,\"738\":6,\"739\":4,\"740\":9,\"741\":11,\"742\":3,\"743\":17,\"744\":1,\"764\":6,\"769\":3,\"771\":10,\"772\":1,\"773\":1,\"774\":3,\"775\":5,\"776\":6,\"777\":4,\"788\":2,\"789\":12,\"790\":4,\"794\":6,\"795\":2,\"801\":2,\"806\":2,\"807\":2,\"808\":2,\"812\":2,\"813\":2,\"814\":4,\"817\":4,\"818\":8,\"819\":2,\"820\":2,\"821\":2,\"824\":5,\"825\":8,\"832\":3,\"833\":13,\"838\":7,\"839\":3,\"840\":3,\"841\":4,\"842\":3,\"844\":3,\"850\":6,\"851\":3,\"855\":3,\"856\":3,\"857\":3,\"859\":3,\"860\":4,\"864\":3,\"866\":6,\"867\":40,\"870\":4,\"871\":3,\"872\":6,\"880\":7,\"881\":7,\"884\":8,\"892\":4,\"893\":4,\"894\":4,\"895\":10,\"902\":4,\"903\":6,\"904\":7,\"905\":4,\"912\":2,\"916\":4,\"918\":6,\"919\":2,\"920\":2,\"921\":2,\"922\":12,\"923\":4,\"924\":9,\"936\":27,\"940\":2,\"941\":7,\"942\":3,\"943\":3,\"944\":4,\"949\":1,\"953\":6,\"954\":3,\"955\":1,\"959\":1,\"978\":1,\"1028\":8,\"1029\":2,\"1036\":1,\"1078\":2,\"1085\":4,\"1086\":1,\"1088\":1,\"1093\":3,\"1094\":1,\"1095\":2,\"1096\":4,\"1107\":1,\"1109\":1,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1116\":1,\"1117\":1,\"1118\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":4,\"1132\":13,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"praparestatement\",{\"1\":{\"255\":1}}],[\"predicate类型的实例\",{\"1\":{\"1036\":1}}],[\"predicate\",{\"1\":{\"1036\":3,\"1043\":1,\"1044\":1,\"1045\":1}}],[\"predicate<\",{\"1\":{\"1036\":1,\"1043\":1,\"1044\":1,\"1045\":1}}],[\"prefix=\",{\"1\":{\"269\":1}}],[\"prefixoverrides\",{\"1\":{\"268\":2}}],[\"prefix\",{\"1\":{\"268\":2}}],[\"preparation\",{\"1\":{\"497\":1}}],[\"prepare\",{\"1\":{\"1083\":1}}],[\"preparedstatementb\",{\"1\":{\"209\":4}}],[\"preparedstatementa\",{\"1\":{\"209\":5}}],[\"preparedstatement来处理\",{\"1\":{\"207\":1}}],[\"preparedstatement批处理\",{\"0\":{\"207\":1}}],[\"preparedstatement比statement要好很多\",{\"1\":{\"204\":1}}],[\"preparedstatement\",{\"1\":{\"204\":5,\"207\":7,\"209\":2,\"214\":3,\"255\":1}}],[\"preparedstatement会把当前这个没有参数的sql语句\",{\"1\":{\"204\":1}}],[\"preparestatement使用的比statement多很多\",{\"1\":{\"204\":1}}],[\"preparestatement\",{\"1\":{\"204\":2,\"207\":2,\"209\":2,\"214\":1}}],[\"prepaprestatement\",{\"1\":{\"207\":1}}],[\"previousindex\",{\"1\":{\"959\":1}}],[\"previous\",{\"1\":{\"202\":1,\"959\":1}}],[\"pressure\",{\"1\":{\"1026\":1}}],[\"press\",{\"1\":{\"153\":1}}],[\"prioritydemo\",{\"1\":{\"838\":1}}],[\"priority\",{\"1\":{\"838\":8}}],[\"primitive\",{\"1\":{\"711\":2}}],[\"primarystudent类的\",{\"1\":{\"545\":1}}],[\"primarystudent类加载\",{\"1\":{\"545\":1}}],[\"primarystudent构造代码块\",{\"1\":{\"545\":1}}],[\"primarystudent\",{\"1\":{\"545\":6}}],[\"primary\",{\"1\":{\"161\":1,\"169\":9,\"170\":1,\"171\":3,\"177\":1,\"180\":2,\"209\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":1,\"233\":2,\"240\":1,\"261\":1,\"263\":2,\"275\":2,\"278\":2,\"281\":3}}],[\"price=\",{\"1\":{\"867\":2}}],[\"price\",{\"1\":{\"153\":1,\"263\":1,\"469\":4,\"471\":6,\"867\":10}}],[\"printf\",{\"1\":{\"820\":1}}],[\"printwriter\",{\"1\":{\"820\":20,\"824\":1,\"1124\":1}}],[\"printwriter字符打印流\",{\"0\":{\"820\":1}}],[\"printstream\",{\"1\":{\"819\":12,\"820\":1,\"821\":1,\"824\":1}}],[\"printstream字节打印流\",{\"0\":{\"819\":1}}],[\"printstaff\",{\"1\":{\"594\":2}}],[\"printstacktrace\",{\"1\":{\"127\":4,\"203\":3,\"209\":1,\"234\":1,\"244\":1,\"753\":1,\"764\":1,\"789\":6,\"825\":2,\"832\":1,\"839\":2,\"840\":1,\"842\":2,\"844\":4,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":1,\"867\":4,\"870\":2,\"871\":2,\"872\":6,\"895\":3,\"903\":1,\"923\":1,\"924\":1}}],[\"printer\",{\"1\":{\"818\":8}}],[\"printdoubleln\",{\"1\":{\"818\":4}}],[\"printdouble\",{\"1\":{\"818\":5}}],[\"printintln\",{\"1\":{\"818\":5}}],[\"printint\",{\"1\":{\"818\":4}}],[\"printthis\",{\"1\":{\"460\":2}}],[\"printarray\",{\"1\":{\"415\":2}}],[\"print\",{\"1\":{\"367\":1,\"415\":1,\"440\":6,\"441\":1,\"819\":5,\"820\":5,\"944\":3}}],[\"println\",{\"1\":{\"127\":1,\"192\":1,\"197\":4,\"204\":3,\"209\":2,\"214\":1,\"234\":3,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"259\":1,\"260\":1,\"268\":1,\"269\":1,\"271\":4,\"272\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"285\":2,\"287\":1,\"308\":1,\"324\":2,\"336\":2,\"340\":8,\"352\":5,\"356\":5,\"359\":2,\"367\":1,\"377\":1,\"378\":3,\"383\":3,\"415\":4,\"417\":1,\"440\":1,\"441\":1,\"459\":2,\"460\":2,\"465\":4,\"468\":2,\"469\":7,\"471\":7,\"472\":4,\"474\":5,\"478\":5,\"479\":4,\"491\":6,\"498\":21,\"509\":1,\"517\":1,\"539\":1,\"545\":12,\"555\":1,\"560\":2,\"564\":1,\"588\":20,\"590\":3,\"594\":6,\"595\":2,\"598\":1,\"606\":1,\"619\":3,\"655\":13,\"657\":1,\"663\":2,\"668\":2,\"669\":1,\"690\":1,\"696\":2,\"700\":1,\"704\":6,\"706\":3,\"707\":4,\"710\":1,\"718\":1,\"720\":3,\"729\":5,\"730\":4,\"734\":6,\"735\":5,\"737\":8,\"738\":9,\"739\":5,\"740\":4,\"741\":5,\"743\":3,\"744\":2,\"754\":2,\"767\":1,\"769\":2,\"771\":5,\"776\":2,\"777\":1,\"789\":2,\"794\":11,\"795\":2,\"801\":4,\"812\":2,\"813\":1,\"814\":5,\"817\":10,\"820\":1,\"821\":1,\"824\":1,\"825\":14,\"832\":3,\"833\":9,\"838\":3,\"839\":4,\"840\":3,\"841\":1,\"842\":4,\"844\":2,\"850\":3,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":4,\"860\":5,\"864\":1,\"866\":4,\"867\":12,\"870\":2,\"871\":5,\"872\":9,\"880\":5,\"881\":4,\"884\":1,\"892\":3,\"894\":2,\"895\":1,\"902\":3,\"903\":1,\"904\":1,\"905\":5,\"912\":6,\"916\":4,\"918\":10,\"919\":10,\"920\":11,\"921\":9,\"922\":12,\"923\":1,\"924\":3,\"936\":5,\"943\":1,\"944\":3,\"953\":9,\"955\":4,\"956\":4,\"1028\":3,\"1029\":1,\"1036\":1,\"1037\":2,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":5,\"1047\":1,\"1048\":1,\"1049\":1,\"1050\":3,\"1052\":3,\"1085\":2,\"1088\":1,\"1095\":1,\"1096\":3,\"1097\":2,\"1112\":5,\"1115\":1,\"1116\":1,\"1117\":3,\"1119\":1,\"1124\":1,\"1129\":1,\"1131\":1,\"1143\":1,\"1148\":1,\"1152\":1,\"1159\":5}}],[\"private修饰内部类\",{\"1\":{\"643\":1}}],[\"private方法\",{\"1\":{\"567\":1,\"577\":1}}],[\"private小细节\",{\"1\":{\"509\":1}}],[\"private\",{\"1\":{\"127\":8,\"209\":1,\"213\":5,\"261\":4,\"262\":4,\"275\":9,\"278\":7,\"281\":4,\"312\":1,\"506\":2,\"509\":2,\"517\":5,\"518\":2,\"534\":2,\"593\":1,\"594\":3,\"611\":1,\"622\":1,\"702\":1,\"715\":3,\"717\":3,\"719\":2,\"720\":3,\"722\":1,\"738\":1,\"739\":1,\"764\":1,\"776\":1,\"794\":4,\"817\":4,\"824\":2,\"825\":4,\"851\":1,\"856\":1,\"857\":1,\"884\":4,\"904\":1,\"922\":3,\"923\":1,\"924\":2,\"936\":6,\"978\":2,\"997\":1,\"1028\":4,\"1116\":1,\"1118\":2,\"1126\":2,\"1130\":3,\"1131\":2,\"1132\":8,\"1148\":1,\"1159\":1}}],[\"progit\",{\"1\":{\"1182\":1}}],[\"programming\",{\"1\":{\"658\":1}}],[\"programdata\",{\"1\":{\"222\":1}}],[\"program\",{\"1\":{\"144\":1,\"925\":1}}],[\"profile\",{\"1\":{\"1120\":1}}],[\"protected修饰内部类\",{\"1\":{\"643\":1}}],[\"protected修饰的成员\",{\"1\":{\"536\":1}}],[\"protected修饰的成员在不同包的子类中可以访问\",{\"1\":{\"535\":1}}],[\"protected就有意义了\",{\"1\":{\"537\":1}}],[\"protected关键字的使用定义上\",{\"1\":{\"535\":1}}],[\"protected访问权限\",{\"0\":{\"534\":1},\"1\":{\"518\":1}}],[\"protected权限\",{\"1\":{\"509\":1}}],[\"protected\",{\"1\":{\"312\":1,\"506\":2,\"509\":1,\"534\":2,\"538\":2,\"611\":1,\"622\":1,\"658\":2,\"687\":1,\"690\":1,\"692\":1,\"923\":2,\"1085\":3,\"1088\":2,\"1095\":1,\"1096\":2,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":2,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":3}}],[\"protocol=\",{\"1\":{\"139\":1}}],[\"protocol\",{\"1\":{\"111\":1,\"127\":3,\"885\":1,\"1111\":1}}],[\"process\",{\"0\":{\"826\":1}}],[\"processing\",{\"1\":{\"262\":1}}],[\"processors\",{\"1\":{\"262\":1}}],[\"process=>operation\",{\"1\":{\"73\":1}}],[\"projectlombok<\",{\"1\":{\"262\":1}}],[\"producertask\",{\"1\":{\"867\":12}}],[\"produces\",{\"1\":{\"201\":1}}],[\"products\",{\"1\":{\"601\":1}}],[\"prod\",{\"1\":{\"248\":1}}],[\"proxyfactory\",{\"1\":{\"246\":1}}],[\"property\",{\"1\":{\"276\":1,\"279\":1}}],[\"property=\",{\"1\":{\"261\":4,\"276\":5,\"277\":9,\"279\":7,\"280\":7,\"282\":3,\"283\":11}}],[\"property是成员变量名\",{\"1\":{\"261\":1}}],[\"property>\",{\"1\":{\"215\":10}}],[\"properties等\",{\"1\":{\"1161\":1}}],[\"properties1\",{\"1\":{\"1026\":2}}],[\"properties类\",{\"1\":{\"918\":1}}],[\"properties的格式\",{\"1\":{\"918\":1}}],[\"properties表示可以外部配置的属性\",{\"1\":{\"245\":1}}],[\"properties文件\",{\"1\":{\"215\":1,\"1026\":1}}],[\"properties\",{\"0\":{\"245\":1,\"918\":1},\"1\":{\"139\":1,\"203\":9,\"213\":9,\"214\":6,\"215\":1,\"216\":6,\"217\":6,\"245\":1,\"918\":31,\"1026\":4,\"1107\":7,\"1109\":20}}],[\"properties配置\",{\"1\":{\"139\":1}}],[\"prompt\",{\"1\":{\"201\":1}}],[\"provincelist\",{\"1\":{\"997\":2}}],[\"province表的id字段\",{\"1\":{\"171\":1}}],[\"province\",{\"1\":{\"171\":13,\"997\":3}}],[\"page\",{\"1\":{\"1132\":11}}],[\"page=1\",{\"1\":{\"1132\":3}}],[\"pages\",{\"1\":{\"1077\":1,\"1132\":4}}],[\"packaging=war\",{\"1\":{\"1084\":1}}],[\"packaging\",{\"1\":{\"1080\":1}}],[\"packaging>\",{\"1\":{\"1079\":1}}],[\"package声明必须处在一个java文件有效代码的第一行\",{\"1\":{\"499\":1}}],[\"package这个关键字我们并不陌生\",{\"1\":{\"499\":1}}],[\"package关键字的使用很简单\",{\"1\":{\"499\":1}}],[\"package关键字\",{\"0\":{\"499\":1}}],[\"package\",{\"1\":{\"127\":2,\"312\":1,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"499\":1,\"506\":1,\"719\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2}}],[\"pattern时才初始化\",{\"1\":{\"1131\":1}}],[\"pattern的合法写法\",{\"1\":{\"1130\":1}}],[\"pattern>\",{\"1\":{\"1097\":2}}],[\"pattern设置为\",{\"1\":{\"1092\":1}}],[\"pattern也是hello\",{\"1\":{\"1092\":1}}],[\"pattern是\",{\"1\":{\"1091\":1}}],[\"pattern和servlet之间的映射关系\",{\"1\":{\"1089\":1}}],[\"pattern属性来维护\",{\"1\":{\"1089\":1}}],[\"pattern属性\",{\"1\":{\"1088\":1,\"1097\":1}}],[\"pattern不能对应多个servlet\",{\"1\":{\"1088\":1}}],[\"pattern\",{\"0\":{\"1088\":1,\"1089\":1},\"1\":{\"725\":1,\"1097\":1,\"1132\":1}}],[\"path为\",{\"1\":{\"1147\":1}}],[\"path3\",{\"1\":{\"1145\":1}}],[\"pathservlet2\",{\"1\":{\"1145\":1}}],[\"pathservlet1\",{\"1\":{\"1145\":1}}],[\"path2\",{\"1\":{\"1145\":1}}],[\"path1\",{\"1\":{\"1145\":2}}],[\"pathname\",{\"1\":{\"769\":2,\"771\":1,\"777\":7}}],[\"path\",{\"0\":{\"1145\":1},\"1\":{\"187\":2,\"912\":1,\"1111\":1,\"1144\":1,\"1145\":1}}],[\"path的值\",{\"1\":{\"137\":1}}],[\"path=\",{\"1\":{\"121\":1,\"137\":1,\"1105\":2,\"1121\":2,\"1150\":1}}],[\"paypal\",{\"1\":{\"721\":1}}],[\"paymenttypeenum\",{\"1\":{\"720\":8}}],[\"paytype来进行描述\",{\"1\":{\"720\":1}}],[\"pascal\",{\"1\":{\"441\":2}}],[\"passwordfromdb\",{\"1\":{\"1159\":4}}],[\"password=lisi\",{\"1\":{\"1116\":1}}],[\"password=admin\",{\"1\":{\"1026\":1}}],[\"password=123456\",{\"1\":{\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"245\":1,\"1096\":1,\"1118\":1}}],[\"password\",{\"1\":{\"180\":1,\"192\":2,\"199\":1,\"203\":4,\"204\":14,\"213\":5,\"215\":1,\"234\":3,\"240\":1,\"244\":1,\"248\":6,\"252\":2,\"275\":2,\"276\":2,\"277\":4,\"517\":1,\"918\":6,\"924\":4,\"1094\":1,\"1095\":4,\"1096\":1,\"1104\":2,\"1110\":1,\"1118\":2,\"1131\":3,\"1132\":20,\"1159\":3}}],[\"parm\",{\"1\":{\"924\":1}}],[\"parallelstream\",{\"1\":{\"1047\":1}}],[\"parallel\",{\"0\":{\"827\":1}}],[\"param>\",{\"1\":{\"1097\":2}}],[\"parametername\",{\"1\":{\"1117\":3}}],[\"parameternames\",{\"1\":{\"1117\":3}}],[\"parameterarray\",{\"1\":{\"1116\":4}}],[\"parametermap\",{\"1\":{\"1116\":2,\"1117\":1,\"1118\":10}}],[\"parameterstring\",{\"1\":{\"1116\":9}}],[\"parameterservlet\",{\"1\":{\"1096\":1,\"1117\":1}}],[\"parameter2\",{\"1\":{\"1109\":6}}],[\"parameter1\",{\"1\":{\"1109\":6}}],[\"parameter\",{\"1\":{\"1096\":1,\"1107\":2,\"1109\":2,\"1116\":5,\"1117\":2,\"1119\":2}}],[\"parametertypes\",{\"1\":{\"919\":4,\"921\":4,\"922\":2}}],[\"parametertype=\",{\"1\":{\"234\":1,\"244\":1,\"247\":4}}],[\"parametertype\",{\"1\":{\"234\":1,\"922\":2}}],[\"param3\",{\"1\":{\"254\":2}}],[\"param2\",{\"1\":{\"254\":4}}],[\"param1\",{\"1\":{\"254\":3}}],[\"param里面怎么写\",{\"1\":{\"251\":1}}],[\"param\",{\"1\":{\"250\":2,\"251\":3,\"252\":2,\"253\":3,\"254\":3,\"255\":4,\"259\":1,\"264\":1,\"265\":4,\"266\":3,\"271\":2,\"272\":1,\"273\":1,\"274\":1,\"1097\":2}}],[\"param注解\",{\"1\":{\"250\":2,\"251\":1}}],[\"parent1\",{\"1\":{\"912\":2}}],[\"parent\",{\"1\":{\"769\":4,\"771\":2,\"912\":3}}],[\"parsemsg\",{\"1\":{\"893\":1,\"894\":2,\"895\":1}}],[\"parseexception\",{\"1\":{\"884\":2,\"942\":1}}],[\"parse\",{\"1\":{\"726\":1,\"884\":1,\"942\":4}}],[\"parsedouble\",{\"1\":{\"705\":1}}],[\"parsexxx\",{\"1\":{\"705\":1}}],[\"parseint\",{\"1\":{\"352\":1,\"353\":1,\"704\":2,\"705\":1}}],[\"parserequestheader\",{\"1\":{\"127\":2}}],[\"parserequestline\",{\"1\":{\"127\":2}}],[\"parserequest\",{\"1\":{\"127\":2}}],[\"part中的getinputstream做处理\",{\"1\":{\"1132\":1}}],[\"part\",{\"1\":{\"1120\":3}}],[\"parts\",{\"1\":{\"127\":4}}],[\"partial\",{\"1\":{\"75\":1,\"246\":1}}],[\"partial^r\",{\"1\":{\"75\":1}}],[\"png的图片\",{\"1\":{\"136\":1}}],[\"png\",{\"1\":{\"116\":1,\"136\":1,\"137\":2,\"139\":2,\"784\":1,\"1120\":5}}],[\"plain\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":1,\"1132\":1}}],[\"platform\",{\"1\":{\"1077\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"play\",{\"1\":{\"941\":8,\"943\":1,\"1078\":5}}],[\"playgame\",{\"1\":{\"588\":3}}],[\"playground\",{\"1\":{\"76\":1}}],[\"player<string>\",{\"1\":{\"941\":1}}],[\"player<e>\",{\"1\":{\"941\":2}}],[\"player<integer>\",{\"1\":{\"941\":1}}],[\"player<t>\",{\"1\":{\"941\":2,\"943\":1}}],[\"player\",{\"1\":{\"472\":8,\"474\":10,\"941\":2}}],[\"plantz\",{\"1\":{\"469\":4}}],[\"plant\",{\"1\":{\"469\":4}}],[\"plugin\",{\"1\":{\"56\":1}}],[\"5ebb\",{\"1\":{\"1105\":2,\"1121\":2}}],[\"5倍\",{\"1\":{\"956\":1}}],[\"5之前\",{\"1\":{\"938\":1}}],[\"5中被引入的\",{\"1\":{\"938\":1}}],[\"5个常规的write\",{\"1\":{\"808\":1}}],[\"5个write\",{\"1\":{\"806\":1,\"807\":1}}],[\"52\",{\"1\":{\"806\":1,\"895\":2,\"1132\":8}}],[\"52th\",{\"1\":{\"244\":1}}],[\"52th3\",{\"1\":{\"212\":2,\"234\":1}}],[\"52th3>test52th\",{\"1\":{\"187\":1}}],[\"5码\",{\"1\":{\"799\":1}}],[\"57\",{\"1\":{\"789\":1,\"840\":1,\"922\":1}}],[\"59\",{\"1\":{\"740\":1,\"741\":1,\"824\":1,\"1132\":9}}],[\"54\",{\"1\":{\"431\":1,\"818\":1,\"1132\":3}}],[\"50th\",{\"1\":{\"1192\":1}}],[\"50岁以上\",{\"1\":{\"1040\":1}}],[\"501个数据\",{\"1\":{\"948\":1}}],[\"50\",{\"1\":{\"153\":2,\"209\":1,\"263\":1,\"730\":1,\"839\":1,\"880\":1,\"892\":2,\"997\":1,\"1132\":2}}],[\"500m\",{\"1\":{\"960\":1}}],[\"50000\",{\"1\":{\"209\":2,\"978\":1}}],[\"5000\",{\"1\":{\"153\":1,\"208\":1,\"872\":2,\"884\":1}}],[\"500\",{\"1\":{\"120\":1,\"153\":2,\"222\":1,\"225\":1,\"229\":1,\"230\":1,\"978\":3}}],[\"537\",{\"1\":{\"1104\":2,\"1110\":2,\"1112\":4,\"1120\":2,\"1132\":2,\"1138\":2,\"1140\":2,\"1150\":2}}],[\"53\",{\"1\":{\"127\":1,\"978\":4,\"1001\":1,\"1008\":1,\"1132\":2}}],[\"5w\",{\"1\":{\"126\":1}}],[\"58\",{\"1\":{\"124\":1,\"474\":1,\"737\":1,\"801\":1,\"916\":1,\"1132\":3}}],[\"512\",{\"1\":{\"263\":1}}],[\"51\",{\"1\":{\"121\":2,\"147\":2,\"1105\":2,\"1121\":2}}],[\"55th3\",{\"1\":{\"212\":2}}],[\"55\",{\"1\":{\"116\":1,\"460\":1,\"789\":1,\"851\":1,\"1132\":4,\"1150\":1}}],[\"56703b4acafe\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"56b74782c4c7\",{\"1\":{\"1105\":2,\"1121\":2}}],[\"56\",{\"1\":{\"116\":1,\"817\":1,\"880\":1,\"1105\":2,\"1121\":2,\"1132\":5}}],[\"5\",{\"1\":{\"71\":4,\"113\":1,\"124\":1,\"144\":2,\"153\":3,\"158\":2,\"161\":3,\"162\":5,\"164\":5,\"168\":1,\"180\":1,\"192\":2,\"213\":1,\"221\":2,\"222\":2,\"225\":1,\"229\":1,\"230\":3,\"234\":2,\"244\":1,\"252\":1,\"257\":1,\"263\":1,\"266\":1,\"269\":1,\"275\":1,\"278\":1,\"281\":2,\"316\":1,\"340\":13,\"350\":1,\"378\":1,\"441\":2,\"442\":1,\"471\":1,\"606\":1,\"608\":1,\"700\":1,\"715\":1,\"717\":1,\"719\":1,\"808\":1,\"833\":4,\"838\":1,\"840\":2,\"850\":2,\"860\":1,\"872\":1,\"939\":1,\"956\":1,\"958\":1,\"1016\":2,\"1020\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1147\":1,\"1150\":1,\"1201\":1}}],[\"y3jesuul3ck2fkhygxo0rsojeoiwlrl6nky\",{\"1\":{\"1132\":1}}],[\"y是有限的\",{\"1\":{\"999\":1}}],[\"youngplayer\",{\"1\":{\"941\":2}}],[\"yourselfvfsimpl\",{\"1\":{\"246\":1}}],[\"yml\",{\"1\":{\"918\":1}}],[\"yielddemo\",{\"1\":{\"841\":1}}],[\"yield\",{\"1\":{\"841\":2}}],[\"yy\",{\"1\":{\"1028\":1}}],[\"yyds\",{\"1\":{\"790\":1}}],[\"yyyy\",{\"1\":{\"153\":4,\"725\":1,\"844\":1,\"884\":1,\"942\":2,\"1126\":1,\"1148\":1}}],[\"yanxuan\",{\"1\":{\"1132\":20}}],[\"yanghuitriangle\",{\"1\":{\"441\":1}}],[\"yanghui\",{\"1\":{\"441\":1}}],[\"yaxis\",{\"1\":{\"72\":1}}],[\"y=f\",{\"1\":{\"999\":2,\"1000\":1}}],[\"y=\",{\"1\":{\"359\":2}}],[\"y++\",{\"1\":{\"359\":6}}],[\"y的值\",{\"1\":{\"344\":1}}],[\"year\",{\"1\":{\"153\":1}}],[\"yes\",{\"1\":{\"73\":1}}],[\"y^\",{\"1\":{\"75\":2}}],[\"y\",{\"1\":{\"71\":4,\"75\":2,\"344\":1,\"358\":3,\"359\":2,\"655\":8,\"674\":7,\"725\":1,\"999\":2}}],[\"散点数据集\",{\"1\":{\"71\":1}}],[\"图\",{\"1\":{\"947\":1}}],[\"图中框起来的一列数据是什么意思呢\",{\"1\":{\"924\":1}}],[\"图文并茂详解数据结构之哈希表\",{\"1\":{\"680\":1}}],[\"图形用户界面\",{\"1\":{\"303\":1}}],[\"图模型\",{\"1\":{\"142\":1}}],[\"图书馆\",{\"1\":{\"141\":1}}],[\"图片等\",{\"1\":{\"1098\":1}}],[\"图片等内容\",{\"1\":{\"1078\":1}}],[\"图片等资源\",{\"1\":{\"111\":1}}],[\"图片文件\",{\"1\":{\"796\":2}}],[\"图片\",{\"1\":{\"126\":1,\"1102\":1,\"1104\":1}}],[\"图片按照什么发的\",{\"1\":{\"121\":1}}],[\"图片网站可以通过检查referer来判断请求是否合法\",{\"1\":{\"116\":1}}],[\"图片网站\",{\"1\":{\"116\":1}}],[\"图片防盗链\",{\"1\":{\"116\":2}}],[\"图片增强\",{\"0\":{\"65\":1}}],[\"图表\",{\"0\":{\"71\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"69\":1}}],[\"向服务器发起请求的时候\",{\"1\":{\"1149\":1}}],[\"向前遍历的下标\",{\"1\":{\"959\":1}}],[\"向前遍历\",{\"1\":{\"959\":1}}],[\"向前是否可以遍历\",{\"1\":{\"959\":1}}],[\"向后遍历的数据的下标\",{\"1\":{\"959\":1}}],[\"向后遍历\",{\"1\":{\"959\":1}}],[\"向线程池中提交runnable类型的任务\",{\"1\":{\"880\":1}}],[\"向文本输出流打印对象的格式化表示形式\",{\"1\":{\"820\":1}}],[\"向文件中写1000\",{\"1\":{\"818\":1}}],[\"向输出流写入一个字节\",{\"1\":{\"786\":1,\"788\":1}}],[\"向下限定\",{\"1\":{\"944\":2}}],[\"向下转型是一种强转\",{\"1\":{\"586\":1}}],[\"向下转型是有条件的\",{\"1\":{\"584\":1}}],[\"向下转型\",{\"1\":{\"529\":1,\"583\":1,\"584\":1,\"587\":1}}],[\"向下移动\",{\"1\":{\"202\":1}}],[\"向上限定\",{\"1\":{\"944\":2}}],[\"向上抛出\",{\"1\":{\"759\":1}}],[\"向上给方法的调用者抛出一个该异常信息封装成的对象\",{\"1\":{\"749\":1}}],[\"向上转型\",{\"1\":{\"528\":1}}],[\"向上移动\",{\"1\":{\"202\":1}}],[\"向mysql服务器发送了sql语句\",{\"1\":{\"205\":1,\"206\":1}}],[\"向\",{\"1\":{\"69\":1}}],[\"样式化\",{\"0\":{\"69\":1}}],[\"导致未知的错误\",{\"1\":{\"1081\":1}}],[\"导致哪个线程处于阻塞状态\",{\"1\":{\"869\":1}}],[\"导致当前线程等待\",{\"1\":{\"658\":1}}],[\"导致抛出classcastexception异常\",{\"1\":{\"587\":1}}],[\"导致程序终止执行\",{\"1\":{\"586\":1}}],[\"导致将本不是方法重写的方法\",{\"1\":{\"560\":1}}],[\"导致数组越界\",{\"1\":{\"441\":1}}],[\"导致很多人也认为java也是两种传参方式\",{\"1\":{\"426\":1}}],[\"导致google不愿意再在安卓中使用java语言\",{\"1\":{\"303\":1}}],[\"导致存储中文报错\",{\"1\":{\"149\":1}}],[\"导包仍然是更好的手段\",{\"1\":{\"503\":1}}],[\"导包在pom\",{\"1\":{\"244\":1}}],[\"导包了\",{\"1\":{\"215\":1}}],[\"导包是指导入其他的人或者是组织写的代码\",{\"1\":{\"192\":1}}],[\"导包\",{\"1\":{\"192\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"234\":1,\"262\":1,\"352\":1}}],[\"导入文件\",{\"0\":{\"67\":1}}],[\"导航栏\",{\"1\":{\"45\":1,\"82\":1}}],[\"脚注\",{\"0\":{\"62\":1}}],[\"我给你一个编号\",{\"1\":{\"1137\":1}}],[\"我给你提醒\",{\"1\":{\"1137\":1}}],[\"我给你提供一个默认的\",{\"1\":{\"1092\":1}}],[\"我一般主要是干什么\",{\"1\":{\"954\":1}}],[\"我一执行sql\",{\"1\":{\"156\":1}}],[\"我直接告知你我的信息\",{\"1\":{\"1137\":1}}],[\"我直接复制一下\",{\"1\":{\"954\":1}}],[\"我直接给出具体做法\",{\"1\":{\"327\":1}}],[\"我就知道它是转换\",{\"1\":{\"942\":1}}],[\"我就给它拼接上去\",{\"1\":{\"263\":1}}],[\"我知道你准备好关闭连接了\",{\"1\":{\"908\":1}}],[\"我知道你同意建立连接了\",{\"1\":{\"908\":1}}],[\"我也已经完成数据传输\",{\"1\":{\"908\":1}}],[\"我收到了你的关闭请求\",{\"1\":{\"908\":1}}],[\"我已经完成数据传输\",{\"1\":{\"908\":1}}],[\"我同意建立连接\",{\"1\":{\"908\":1}}],[\"我会尽量排除这些知识和概念\",{\"1\":{\"885\":1}}],[\"我会教论语\",{\"1\":{\"588\":1}}],[\"我走我的\",{\"1\":{\"828\":1}}],[\"我今天拉便便了\",{\"1\":{\"807\":1}}],[\"我要教java\",{\"1\":{\"588\":1}}],[\"我要使用里面的name\",{\"1\":{\"252\":1}}],[\"我去商场买了一台一万多的小米智能电视机\",{\"1\":{\"580\":1}}],[\"我\",{\"1\":{\"533\":1}}],[\"我喜欢杨幂\",{\"1\":{\"498\":1}}],[\"我喜欢杨超越\",{\"1\":{\"498\":1}}],[\"我喜欢学习c++\",{\"1\":{\"378\":1}}],[\"我喜欢学习java\",{\"1\":{\"378\":1}}],[\"我热爱java\",{\"1\":{\"377\":1}}],[\"我热爱学习java\",{\"1\":{\"377\":3}}],[\"我希望循环到一半就结束\",{\"1\":{\"375\":1}}],[\"我相信你不会愿意看到这种代码吧\",{\"1\":{\"349\":1}}],[\"我的世界\",{\"1\":{\"303\":1}}],[\"我不知道如何去使用\",{\"1\":{\"201\":1}}],[\"我在电话另一端不用等待\",{\"1\":{\"828\":1}}],[\"我在电话另一端等待\",{\"1\":{\"828\":1}}],[\"我在jd\",{\"1\":{\"796\":1}}],[\"我在学习jdbc的时候\",{\"1\":{\"201\":1}}],[\"我在右对齐\",{\"1\":{\"60\":1}}],[\"我是和谁去看电影\",{\"1\":{\"1137\":1}}],[\"我是和谁去吃煲仔饭\",{\"1\":{\"1137\":1}}],[\"我是李雷\",{\"1\":{\"1137\":7}}],[\"我是truck特有的方法\",{\"1\":{\"936\":1}}],[\"我是java学习者\",{\"1\":{\"201\":1}}],[\"我是居中的\",{\"1\":{\"60\":1}}],[\"我和您确认一下\",{\"1\":{\"150\":1}}],[\"我需要遍历数组\",{\"1\":{\"955\":1}}],[\"我需要使用遥控器才能操控\",{\"1\":{\"580\":1}}],[\"我需要特定的数据怎么办呢\",{\"1\":{\"159\":1}}],[\"我需要删除某个环境的某个库\",{\"1\":{\"150\":1}}],[\"我需要请求不同的资源\",{\"1\":{\"115\":1}}],[\"我确认一下\",{\"1\":{\"150\":1}}],[\"我存储\",{\"1\":{\"149\":1}}],[\"我想知道命令\",{\"1\":{\"1204\":1}}],[\"我想请你吃饭\",{\"1\":{\"1137\":5}}],[\"我想根据省份进行分组\",{\"1\":{\"997\":1}}],[\"我想遍历这个链表\",{\"1\":{\"955\":1}}],[\"我想遍历这个集合\",{\"1\":{\"955\":1}}],[\"我想建立连接\",{\"1\":{\"908\":1}}],[\"我想找一个人聊天\",{\"1\":{\"885\":1}}],[\"我想找出一些数据\",{\"1\":{\"159\":1}}],[\"我想要被别人访问的地方\",{\"1\":{\"505\":1}}],[\"我想访问这个\",{\"1\":{\"136\":1}}],[\"我想切换服务器了\",{\"1\":{\"128\":1}}],[\"我只需要对着接口开发\",{\"1\":{\"128\":1}}],[\"我自己用\",{\"1\":{\"126\":1}}],[\"我现在拿到了一个网页\",{\"1\":{\"123\":1}}],[\"我传入一个班级id\",{\"1\":{\"120\":1}}],[\"我这个网址用不了\",{\"1\":{\"120\":1}}],[\"我这边最希望拿到的数据是中文\",{\"1\":{\"116\":1}}],[\"我优先能处理的类型\",{\"1\":{\"116\":1}}],[\"我们每一次commit都有一个版本号\",{\"1\":{\"1202\":1}}],[\"我们每个人都是独立的个体\",{\"1\":{\"445\":1}}],[\"我们\",{\"1\":{\"1159\":1}}],[\"我们应该在session中存储用户信息\",{\"1\":{\"1159\":1}}],[\"我们应该创建一个什么样的结构的数据\",{\"1\":{\"1159\":1}}],[\"我们应该将学习的重心放在学习\",{\"1\":{\"658\":1}}],[\"我们下一次发起请求的时候\",{\"1\":{\"1150\":1}}],[\"我们构造一个新的请求http\",{\"1\":{\"1145\":1}}],[\"我们去吃香他她香他她煲仔饭吧\",{\"1\":{\"1137\":3}}],[\"我们去吃香他她煲仔饭吧\",{\"1\":{\"1137\":1}}],[\"我们刚刚只复制了请求报文\",{\"1\":{\"1132\":1}}],[\"我们当前可以使用request中的getpart方法直接拿到其图片部分\",{\"1\":{\"1120\":1}}],[\"我们首先来看文件上传的请求的form表单如何构造\",{\"1\":{\"1120\":1}}],[\"我们建议使用set方法做赋值\",{\"1\":{\"1108\":1}}],[\"我们用哪种方式\",{\"1\":{\"1107\":1}}],[\"我们用户不能够直接的去操作它\",{\"1\":{\"287\":1}}],[\"我们通常使用的是其value属性\",{\"1\":{\"1087\":1}}],[\"我们通过一个案例来理解多态的优缺点\",{\"1\":{\"581\":1}}],[\"我们通过一个引例\",{\"1\":{\"540\":1}}],[\"我们通过测试发现\",{\"1\":{\"532\":1}}],[\"我们通过画对象内存图\",{\"1\":{\"456\":1}}],[\"我们接下来的需求\",{\"1\":{\"1078\":1}}],[\"我们开发为什么要定义规范\",{\"1\":{\"1078\":1}}],[\"我们开发的时候\",{\"1\":{\"125\":1}}],[\"我们这个commit\",{\"1\":{\"1195\":1}}],[\"我们这样认为\",{\"1\":{\"1019\":1}}],[\"我们这里只简单了解一下就可以了\",{\"1\":{\"327\":1}}],[\"我们采用的链表\",{\"1\":{\"1002\":1}}],[\"我们举一个生活中的例子\",{\"1\":{\"995\":1}}],[\"我们所有的集合类\",{\"1\":{\"987\":1}}],[\"我们存储到hashset中的数据\",{\"1\":{\"983\":1}}],[\"我们获取到了iterator\",{\"1\":{\"955\":1}}],[\"我们一般遍历一个集合\",{\"1\":{\"954\":1}}],[\"我们一般在工作过程中\",{\"1\":{\"951\":1}}],[\"我们一起来专注于java代码本身\",{\"1\":{\"885\":1}}],[\"我们想要获得这个class对象\",{\"1\":{\"1107\":1}}],[\"我们想提供一个方法\",{\"1\":{\"944\":1}}],[\"我们想求n的阶乘\",{\"1\":{\"442\":1}}],[\"我们约定字符串的格式为\",{\"1\":{\"942\":1}}],[\"我们假设i\",{\"1\":{\"937\":2}}],[\"我们希望代码某个参数类型是灵活可变的\",{\"1\":{\"937\":1}}],[\"我们希望这个成员总是被子类使用\",{\"1\":{\"537\":1}}],[\"我们仅需要知道\",{\"1\":{\"885\":1}}],[\"我们仅需要关注下面两个成员方法就足够了\",{\"1\":{\"726\":1}}],[\"我们能看到加锁跟释放锁的过程\",{\"1\":{\"864\":1}}],[\"我们thread的优先级\",{\"1\":{\"838\":1}}],[\"我们学习过的异常处理策略有2种\",{\"1\":{\"759\":1}}],[\"我们学习object类\",{\"1\":{\"658\":1}}],[\"我们如果对字符串进行拼接操作\",{\"1\":{\"741\":2}}],[\"我们来分析一下上面的请求报文\",{\"1\":{\"1120\":1}}],[\"我们来看一下date类目前还能够使用的\",{\"1\":{\"723\":1}}],[\"我们来首先看一下object类当中\",{\"1\":{\"680\":1}}],[\"我们仍然以上述的星期常量为案例\",{\"1\":{\"718\":1}}],[\"我们早就学习过static关键字了\",{\"1\":{\"700\":1}}],[\"我们java程序员只需要把释放资源的代码放在finalize方法中\",{\"1\":{\"689\":1}}],[\"我们没办法直接看代码分析方法的实现\",{\"1\":{\"681\":1}}],[\"我们没有在代码的任何位置\",{\"1\":{\"542\":1}}],[\"我们没有前端和各种界面的输入信息\",{\"1\":{\"351\":1}}],[\"我们数学中学习的函数\",{\"1\":{\"679\":1}}],[\"我们认为的对象相等的规则\",{\"1\":{\"674\":1}}],[\"我们认为方法的名字可以用来区分方法\",{\"1\":{\"387\":1}}],[\"我们再去打印对象名\",{\"1\":{\"668\":1}}],[\"我们看到\",{\"1\":{\"668\":1}}],[\"我们马上就会学习\",{\"1\":{\"667\":1}}],[\"我们先获得其键值对信息\",{\"1\":{\"1143\":1}}],[\"我们先介绍一下date类的tostring方法\",{\"1\":{\"724\":1}}],[\"我们先来看一下object类当中\",{\"1\":{\"672\":1}}],[\"我们先来看一看tostring\",{\"1\":{\"666\":1}}],[\"我们先复习一下我们认识引用数据类型的过程\",{\"1\":{\"540\":1}}],[\"我们并不建议直接通过反射的方式给成员变量赋值\",{\"1\":{\"1108\":1}}],[\"我们并不关心全限定类名和地址值\",{\"1\":{\"668\":1}}],[\"我们并不需要特别的标注\",{\"1\":{\"658\":1}}],[\"我们并不陌生\",{\"1\":{\"452\":1}}],[\"我们虽然我们没有详细了解\",{\"1\":{\"658\":1}}],[\"我们基于上述功能接口\",{\"1\":{\"654\":1}}],[\"我们统一规定\",{\"1\":{\"608\":1}}],[\"我们按照它是一个类\",{\"1\":{\"608\":1}}],[\"我们定义一个包含周一到周日的常量的一个枚举类型\",{\"1\":{\"717\":1}}],[\"我们定义了一辆汽车\",{\"1\":{\"599\":1}}],[\"我们定义抽象类\",{\"1\":{\"591\":1}}],[\"我们主要探讨它的子类特点\",{\"1\":{\"598\":1}}],[\"我们主要探讨\",{\"1\":{\"592\":1}}],[\"我们主要探究两个方向\",{\"1\":{\"549\":1,\"556\":1}}],[\"我们提出两个改进的方向\",{\"1\":{\"590\":1}}],[\"我们其实就可以大致总结多态的优点了\",{\"1\":{\"582\":1}}],[\"我们其实可以发现编译器是很\",{\"1\":{\"342\":1}}],[\"我们以方法中的局部变量为例子\",{\"1\":{\"569\":1}}],[\"我们以后开发的时候\",{\"1\":{\"256\":1}}],[\"我们很少会主动把一个类设置成final\",{\"1\":{\"566\":1}}],[\"我们将animal类设置为抽象类\",{\"1\":{\"595\":1}}],[\"我们将程序的运行分成两部分\",{\"1\":{\"546\":1}}],[\"我们将这个过程叫做数据类型转换\",{\"1\":{\"337\":1}}],[\"我们知道引用数据类型变量分为两个部分\",{\"1\":{\"540\":1}}],[\"我们知道类中的成员包括2部分\",{\"1\":{\"455\":1}}],[\"我们测试一下\",{\"1\":{\"539\":1}}],[\"我们说\",{\"1\":{\"869\":1}}],[\"我们说子类会继承父类的所有成员\",{\"1\":{\"539\":1}}],[\"我们说索引是一个可以帮助我们高效获取数据的数据结构\",{\"1\":{\"220\":1}}],[\"我们回顾一下java当中类中成员和构造器的四个访问权限等级\",{\"1\":{\"534\":1}}],[\"我们还是要清楚\",{\"1\":{\"645\":1}}],[\"我们还没有继承的概念\",{\"1\":{\"534\":1}}],[\"我们还把使用去实现某种特定功能的过程叫做方法的调用\",{\"1\":{\"380\":1}}],[\"我们设计了三种类型的鸭子\",{\"1\":{\"530\":1}}],[\"我们留到继承的章节中学习\",{\"1\":{\"509\":1}}],[\"我们发现不仅能够创建周一到周日的对象\",{\"1\":{\"713\":1}}],[\"我们发现抽象类不能创建对象\",{\"1\":{\"591\":1}}],[\"我们发现编译后的代码中并不存在的结构\",{\"1\":{\"488\":1}}],[\"我们发现\",{\"1\":{\"487\":1}}],[\"我们发现student双参构造器中\",{\"1\":{\"468\":1}}],[\"我们理解的代码块就是为了限制局部变量的一个大括号\",{\"1\":{\"484\":1}}],[\"我们根据匿名对象的优缺点\",{\"1\":{\"483\":1}}],[\"我们简单思考可以知道\",{\"1\":{\"478\":1}}],[\"我们从以下几个角度分析\",{\"1\":{\"523\":1}}],[\"我们从以下四个角度比较\",{\"1\":{\"477\":1}}],[\"我们从以下五个方面去比较\",{\"1\":{\"457\":1}}],[\"我们后面会详细学习\",{\"1\":{\"456\":1}}],[\"我们称之为外部类\",{\"1\":{\"608\":1}}],[\"我们称之为内部类\",{\"1\":{\"608\":1}}],[\"我们称之为抽象类\",{\"1\":{\"591\":1}}],[\"我们称之为\",{\"1\":{\"455\":1,\"699\":2}}],[\"我们称为覆盖索引\",{\"1\":{\"231\":1}}],[\"我们称为回表\",{\"1\":{\"230\":1}}],[\"我们给出的数据类型的概念\",{\"1\":{\"455\":1}}],[\"我们给一个列声明为主键\",{\"1\":{\"232\":1}}],[\"我们终于可以给我们之前天天用的类\",{\"1\":{\"446\":1}}],[\"我们程序员所有能干预的赋值方式\",{\"1\":{\"487\":1}}],[\"我们程序员创建程序中的对象\",{\"1\":{\"446\":1}}],[\"我们程序员的工作就变成了\",{\"1\":{\"446\":1}}],[\"我们引入了类与对象\",{\"1\":{\"444\":1}}],[\"我们只要知道头一个地址\",{\"1\":{\"948\":1}}],[\"我们只要找到这两个部分就能够写出递归的代码了\",{\"1\":{\"442\":1}}],[\"我们只知道这是一个子类对象\",{\"1\":{\"647\":1}}],[\"我们只将该类作为派生其他类的父类\",{\"1\":{\"591\":1}}],[\"我们只有进入对应的数据库中\",{\"1\":{\"152\":1}}],[\"我们把一些常见的公共电话与它的功能做一个对应\",{\"1\":{\"995\":1}}],[\"我们把一定会触发类加载的场景\",{\"1\":{\"456\":1}}],[\"我们把方法在运行时调用自身的情况\",{\"1\":{\"442\":1}}],[\"我们把杨辉三角的每一行的数据看成是一个一维数组\",{\"1\":{\"441\":1}}],[\"我们把这种对象称之为垃圾或者垃圾对象\",{\"1\":{\"407\":1}}],[\"我们现在想存储\",{\"1\":{\"1016\":1}}],[\"我们现在做一个应用程序\",{\"1\":{\"607\":1}}],[\"我们现在只需要研究和的赋值顺序\",{\"1\":{\"487\":1}}],[\"我们现在还没有学习过数据库\",{\"1\":{\"420\":1}}],[\"我们现在新建了一个xml文件\",{\"1\":{\"136\":1}}],[\"我们都需要重写hashcode方法\",{\"1\":{\"682\":1}}],[\"我们都知道数组的静态初始化\",{\"1\":{\"408\":1}}],[\"我们都要在二者之间寻找一个平衡点\",{\"1\":{\"211\":1}}],[\"我们毕竟不是java开发者\",{\"1\":{\"395\":1}}],[\"我们讲过\",{\"1\":{\"389\":1}}],[\"我们等到面向对象阶段会重点学习它们\",{\"1\":{\"385\":1}}],[\"我们等到日后再谈\",{\"1\":{\"346\":1}}],[\"我们就无法添加继承关系\",{\"1\":{\"936\":1}}],[\"我们就具体使用两种不同的传输协议来讲解java网络编程\",{\"1\":{\"885\":1}}],[\"我们就主要来研究一下class类和它的对象\",{\"1\":{\"661\":1}}],[\"我们就迫切需要一种全新的数据类型\",{\"1\":{\"595\":1}}],[\"我们就可以利用生命周期的init方法去初始化sqlsessionfactory实例\",{\"1\":{\"1110\":1}}],[\"我们就可以通过key获取哈希值\",{\"1\":{\"680\":1}}],[\"我们就可以总结出\",{\"1\":{\"510\":1}}],[\"我们就可以获取对应的列的值\",{\"1\":{\"202\":1}}],[\"我们就了解了\",{\"1\":{\"497\":1}}],[\"我们就需要这种语法机制\",{\"1\":{\"380\":1}}],[\"我们是不可控的\",{\"1\":{\"375\":1}}],[\"我们对循环的把控是改变循环的初始条件\",{\"1\":{\"375\":1}}],[\"我们对数据的组织逻辑上是按照库\",{\"1\":{\"146\":1}}],[\"我们已经使用过匿名对象了\",{\"1\":{\"646\":1}}],[\"我们已经知道clone方法的作用了\",{\"1\":{\"694\":1}}],[\"我们已经知道\",{\"1\":{\"548\":1}}],[\"我们已经讲到过\",{\"1\":{\"522\":1}}],[\"我们已经学习过了java继承的基本语法\",{\"1\":{\"532\":1}}],[\"我们已经学习过方法\",{\"1\":{\"442\":1}}],[\"我们已经学习完了所有的循环结构\",{\"1\":{\"375\":1}}],[\"我们已经具备了\",{\"1\":{\"212\":1}}],[\"我们之前提到过\",{\"1\":{\"337\":1}}],[\"我们会假定一种不存在的类型来代替这个参数类型\",{\"1\":{\"939\":1}}],[\"我们会以作为该方法的重写实现\",{\"1\":{\"668\":1}}],[\"我们会在后面学习该知识点\",{\"1\":{\"662\":1}}],[\"我们会在后面详细讲解\",{\"1\":{\"324\":1}}],[\"我们会发现\",{\"1\":{\"555\":1}}],[\"我们会学习非常多给对象中元素赋值的方式\",{\"1\":{\"408\":1}}],[\"我们会直接认为name是书的名字\",{\"1\":{\"153\":1}}],[\"我们也可以自己指定path\",{\"1\":{\"1145\":1}}],[\"我们也可以使用param1\",{\"1\":{\"254\":1}}],[\"我们也可以使用算术运算符\",{\"1\":{\"162\":1}}],[\"我们也不会考虑它的实现细节\",{\"1\":{\"660\":1}}],[\"我们也做不了什么\",{\"1\":{\"580\":1}}],[\"我们也要求大家按照规范书写注释\",{\"1\":{\"319\":1}}],[\"我们常说的jdk文档\",{\"1\":{\"318\":1}}],[\"我们的客户端和服务器之间\",{\"1\":{\"1137\":1}}],[\"我们的请求参数属于上面的哪种请求\",{\"1\":{\"1132\":1}}],[\"我们的第二步\",{\"1\":{\"1005\":1}}],[\"我们的结论是\",{\"1\":{\"598\":1}}],[\"我们的开发工具idea就是依赖java语言编写的\",{\"1\":{\"303\":1}}],[\"我们的查询需求\",{\"1\":{\"231\":1}}],[\"我们日常生活中使用的大多数应用程序都是web应用\",{\"1\":{\"303\":1}}],[\"我们既可以写\",{\"1\":{\"257\":1}}],[\"我们必须要写一个resulttype\",{\"1\":{\"257\":1}}],[\"我们经常使用前面三种方式\",{\"1\":{\"254\":1}}],[\"我们使用的mysql版本是5\",{\"1\":{\"1107\":1}}],[\"我们使用了一个符号来代替类型\",{\"1\":{\"937\":1}}],[\"我们使用这个方法来屏蔽这十几个步骤\",{\"1\":{\"936\":1}}],[\"我们使用object类当中的默实现就足够了\",{\"1\":{\"698\":1}}],[\"我们使用object默认实现就够了\",{\"1\":{\"694\":1}}],[\"我们使用某个类时\",{\"1\":{\"503\":1}}],[\"我们使用idea新建java文件是无需关心package声明的\",{\"1\":{\"499\":1}}],[\"我们使用一个xml文件来存放一组sql\",{\"1\":{\"234\":1}}],[\"我们使用官方提供的客户端去连接server\",{\"1\":{\"147\":1}}],[\"我们选来做索引的就是b+树\",{\"1\":{\"220\":1}}],[\"我们选驱动\",{\"1\":{\"192\":1}}],[\"我们需要手动处理\",{\"1\":{\"1201\":1}}],[\"我们需要完成的业务\",{\"1\":{\"1132\":1}}],[\"我们需要写3个servlet\",{\"1\":{\"1130\":1}}],[\"我们需要得到一个数字与之对应\",{\"1\":{\"1008\":1}}],[\"我们需要来协助我们\",{\"1\":{\"719\":1}}],[\"我们需要枚举类型\",{\"1\":{\"713\":1}}],[\"我们需要统一口径\",{\"1\":{\"608\":1}}],[\"我们需要传递实参给方法\",{\"1\":{\"424\":1}}],[\"我们需要数组遍历完成各种独特的功能\",{\"1\":{\"415\":1}}],[\"我们需要了解\",{\"1\":{\"382\":1}}],[\"我们需要知道自动生成的id是多少\",{\"1\":{\"273\":1}}],[\"我们需要去遍历\",{\"1\":{\"234\":1}}],[\"我们需要先了解一下数据库的组成结构\",{\"1\":{\"221\":1}}],[\"我们需要导两个包\",{\"1\":{\"215\":1}}],[\"我们需要进行数据完整性和正确性的检查\",{\"1\":{\"188\":1}}],[\"我们要在这里做字符集的设置\",{\"1\":{\"1127\":1}}],[\"我们要对这个学生列表进行处理\",{\"1\":{\"1028\":1}}],[\"我们要搞清楚成员内部类和外部类之间\",{\"1\":{\"614\":1}}],[\"我们要求大家\",{\"1\":{\"560\":1}}],[\"我们要先讲解一个注解\",{\"1\":{\"560\":1}}],[\"我们要告诉需要开辟多少内存空间\",{\"1\":{\"396\":1}}],[\"我们要记住的是\",{\"1\":{\"363\":1}}],[\"我们要写多少方法\",{\"1\":{\"263\":2}}],[\"我们要进行两步操作\",{\"1\":{\"208\":1}}],[\"我们要根据学生的性别\",{\"1\":{\"110\":1}}],[\"我们可利用this对成员变量进行赋值\",{\"1\":{\"466\":1}}],[\"我们可以忽略哪些内容呢\",{\"1\":{\"1203\":1}}],[\"我们可以设置content\",{\"1\":{\"1127\":1}}],[\"我们可以写这样的代码\",{\"1\":{\"1120\":1}}],[\"我们可以写一个public方法\",{\"1\":{\"555\":1}}],[\"我们可以借助第三方工具来封装\",{\"1\":{\"1120\":1}}],[\"我们可以将预报时间作为key\",{\"1\":{\"1026\":1}}],[\"我们可以在一个泛型类上\",{\"1\":{\"939\":1}}],[\"我们可以先假定一种不存在的类型来代指这个参数类型\",{\"1\":{\"937\":1}}],[\"我们可以先定义一个顶层父类animal作为父类\",{\"1\":{\"581\":1}}],[\"我们可以参考官方文档去学习\",{\"1\":{\"658\":1}}],[\"我们可以创建两个类\",{\"1\":{\"607\":1}}],[\"我们可以创建以下java类\",{\"1\":{\"535\":1}}],[\"我们可以最大程度的遵守标准\",{\"1\":{\"599\":1}}],[\"我们可以知道对象名点成员变量\",{\"1\":{\"551\":1}}],[\"我们可以总结类加载的时机\",{\"1\":{\"541\":1}}],[\"我们可以总结一下编译器在查找并决定使用某个class时\",{\"1\":{\"503\":1}}],[\"我们可以总结一下使用递归的两要素\",{\"1\":{\"442\":1}}],[\"我们可以一样的\",{\"1\":{\"490\":1}}],[\"我们可以得出以下结论\",{\"1\":{\"488\":1,\"719\":1}}],[\"我们可以得到以下结论\",{\"1\":{\"336\":1}}],[\"我们可以给teacher类定义一个构造器\",{\"1\":{\"466\":1}}],[\"我们可以从两个角度理解数据类型\",{\"1\":{\"320\":1}}],[\"我们可以把上述程序作为我们写java代码的一个标准范式\",{\"1\":{\"308\":1}}],[\"我们可以不使用转义字符\",{\"1\":{\"265\":1}}],[\"我们可以通过html提供一个登录表单\",{\"1\":{\"1131\":1}}],[\"我们可以通过取别名的方式来解决\",{\"1\":{\"259\":1}}],[\"我们可以通过比较哈希值来确定数据是否发生了变化\",{\"1\":{\"188\":1}}],[\"我们可以自己不实现接口\",{\"1\":{\"235\":2}}],[\"我们可以有效地检测数据变化\",{\"1\":{\"188\":1}}],[\"我们可以执行以下步骤\",{\"1\":{\"188\":1}}],[\"我们可以考虑以下方法\",{\"1\":{\"188\":1}}],[\"我们可以使用treemap来存储天气预报信息\",{\"1\":{\"1026\":1}}],[\"我们可以使用枚举类型来描述这几种固定支付方式\",{\"1\":{\"720\":1}}],[\"我们可以使用\",{\"1\":{\"254\":1}}],[\"我们可以使用以下sql查询语句来检查数据表中的记录总数\",{\"1\":{\"188\":1}}],[\"我们可以使用union关键字对sql1和sql2的结果去做并集\",{\"1\":{\"185\":1}}],[\"我们可以使用一条命令去看\",{\"1\":{\"169\":1}}],[\"我们可以用到算数运算符\",{\"1\":{\"162\":1}}],[\"我们可以看到请求和响应的字符串\",{\"1\":{\"115\":1}}],[\"我们可能需要了解到一些重要的sql运算符\",{\"1\":{\"162\":1}}],[\"我们在这个userservlet上可否写一个\",{\"1\":{\"1130\":1}}],[\"我们在servlet中可以获得本地的ip和port\",{\"1\":{\"1115\":1}}],[\"我们在上面的代码中需要做的就是继承genericservlet或httpservlet\",{\"1\":{\"1085\":1}}],[\"我们在学习任何一个接口之前\",{\"1\":{\"951\":1}}],[\"我们在写代码的时候\",{\"1\":{\"937\":1}}],[\"我们在java语言中设置的线程优先级\",{\"1\":{\"838\":1}}],[\"我们在java早期的源代码中\",{\"1\":{\"395\":1}}],[\"我们在后面还会见到\",{\"1\":{\"696\":1}}],[\"我们在面向对象基础时\",{\"1\":{\"534\":1}}],[\"我们在创建某个类对象\",{\"1\":{\"533\":1}}],[\"我们在实际开发中\",{\"1\":{\"510\":1}}],[\"我们在开发时\",{\"1\":{\"412\":1}}],[\"我们在k索引树上读了三条记录\",{\"1\":{\"230\":1}}],[\"我们在工作中基本上是以关系型数据库为主\",{\"1\":{\"144\":1}}],[\"我们在url上输入\",{\"1\":{\"138\":1}}],[\"我们介绍几款常见的关系型数据库\",{\"1\":{\"143\":1}}],[\"我们有啥办法完成部署\",{\"1\":{\"134\":1}}],[\"我们不用vector\",{\"1\":{\"969\":1}}],[\"我们不用去管它\",{\"1\":{\"125\":1}}],[\"我们不应该写出产生这种异常的代码\",{\"1\":{\"759\":1}}],[\"我们不需要这样一个苛刻的规则\",{\"1\":{\"673\":1}}],[\"我们不可选择具体哪个子类生效\",{\"1\":{\"530\":1}}],[\"我们不清楚\",{\"1\":{\"287\":1}}],[\"我们不希望数据库丢数据\",{\"1\":{\"186\":1}}],[\"我们不想直接将文件拷贝到\",{\"1\":{\"134\":1}}],[\"我们编写的代码只需要这么去写httpservletrequest\",{\"1\":{\"128\":1}}],[\"警告容器\",{\"1\":{\"57\":1}}],[\"与数组长度取余\",{\"1\":{\"1016\":1}}],[\"与其现在把链表转换为红黑树\",{\"1\":{\"1012\":1}}],[\"与其他语言\",{\"1\":{\"146\":1}}],[\"与hashset唯一的不同\",{\"1\":{\"987\":1}}],[\"与arraylist不同的是\",{\"1\":{\"965\":1}}],[\"与传统的数组不同\",{\"1\":{\"961\":1}}],[\"与以上行为一致\",{\"1\":{\"941\":1}}],[\"与符号无关\",{\"1\":{\"940\":1}}],[\"与java\",{\"1\":{\"925\":1}}],[\"与虚拟机栈所发挥的作用是非常相似的\",{\"1\":{\"925\":1}}],[\"与异步\",{\"0\":{\"828\":1}}],[\"与并发\",{\"0\":{\"827\":1}}],[\"与线程\",{\"0\":{\"826\":1}}],[\"与之相对应的\",{\"1\":{\"402\":1}}],[\"与此同时\",{\"1\":{\"380\":1}}],[\"与自动类型转换相对应的就是强制类型转换\",{\"1\":{\"339\":1}}],[\"与实体类中的字段进行映射的\",{\"1\":{\"261\":1}}],[\"与innodb的区别\",{\"0\":{\"228\":1}}],[\"与mysql通信了2次\",{\"1\":{\"207\":1}}],[\"与\",{\"1\":{\"57\":1,\"162\":2,\"348\":1}}],[\"vwwjxgtdtnshduwb2dstodov\",{\"1\":{\"1132\":1}}],[\"v=\",{\"1\":{\"1120\":3,\"1138\":3,\"1140\":3,\"1150\":3}}],[\"v=b3\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"vv\",{\"1\":{\"1028\":1}}],[\"v>>\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"v>\",{\"1\":{\"997\":1,\"1017\":1,\"1018\":1,\"1022\":1,\"1023\":1,\"1025\":2,\"1026\":16}}],[\"vm\",{\"1\":{\"960\":1}}],[\"vector为啥被替代\",{\"1\":{\"969\":1}}],[\"vector是线程安全的\",{\"1\":{\"969\":1}}],[\"vector是jdk1\",{\"1\":{\"969\":1}}],[\"vector是list的子实现\",{\"1\":{\"969\":2}}],[\"vector的数据结构表现是线性表\",{\"1\":{\"969\":1}}],[\"vector\",{\"0\":{\"969\":1},\"1\":{\"987\":1}}],[\"vector和arraylist的区别\",{\"1\":{\"956\":1}}],[\"verification\",{\"1\":{\"497\":1}}],[\"version>\",{\"1\":{\"234\":2,\"244\":3,\"262\":1,\"1079\":1}}],[\"version=\",{\"1\":{\"136\":1,\"139\":1,\"234\":2,\"244\":1,\"1083\":1,\"1097\":2}}],[\"version\",{\"1\":{\"127\":2,\"307\":1,\"1082\":1,\"1098\":1,\"1099\":1,\"1100\":2,\"1202\":1}}],[\"v4\",{\"0\":{\"895\":1,\"905\":1},\"1\":{\"895\":4,\"905\":2}}],[\"v\",{\"1\":{\"817\":2,\"880\":1,\"939\":2,\"997\":4,\"1007\":1,\"1016\":1,\"1018\":4,\"1023\":4,\"1026\":4,\"1120\":2}}],[\"vs\",{\"0\":{\"477\":1,\"563\":1,\"599\":1,\"758\":1,\"873\":1},\"1\":{\"342\":1,\"833\":1,\"864\":1,\"873\":1,\"881\":1,\"883\":1,\"924\":1}}],[\"volatile\",{\"1\":{\"312\":1}}],[\"void方法\",{\"1\":{\"1048\":1}}],[\"void方法没有返回值\",{\"1\":{\"383\":1}}],[\"void表示方法没有返回值\",{\"1\":{\"385\":1}}],[\"void\",{\"1\":{\"127\":5,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"213\":1,\"214\":2,\"234\":2,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"259\":1,\"260\":1,\"268\":1,\"269\":1,\"271\":3,\"272\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"285\":3,\"287\":1,\"308\":1,\"312\":1,\"331\":2,\"383\":1,\"385\":1,\"389\":5,\"415\":2,\"419\":2,\"423\":3,\"424\":1,\"425\":1,\"426\":1,\"440\":1,\"441\":1,\"444\":1,\"450\":1,\"459\":3,\"460\":2,\"465\":3,\"468\":1,\"469\":8,\"471\":1,\"472\":2,\"474\":2,\"478\":1,\"479\":1,\"491\":1,\"498\":4,\"509\":1,\"516\":1,\"517\":1,\"538\":2,\"539\":1,\"545\":1,\"555\":2,\"560\":2,\"564\":1,\"566\":1,\"573\":2,\"588\":9,\"590\":3,\"594\":7,\"595\":3,\"598\":2,\"606\":1,\"619\":1,\"650\":2,\"652\":2,\"654\":3,\"655\":6,\"658\":4,\"669\":1,\"687\":1,\"690\":2,\"696\":2,\"700\":1,\"706\":1,\"718\":2,\"720\":2,\"724\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":4,\"739\":3,\"740\":1,\"741\":2,\"743\":1,\"744\":1,\"764\":2,\"769\":1,\"771\":2,\"776\":3,\"777\":1,\"786\":5,\"788\":4,\"789\":7,\"790\":2,\"794\":7,\"795\":1,\"801\":1,\"804\":5,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":6,\"818\":21,\"819\":1,\"820\":1,\"821\":1,\"823\":1,\"824\":3,\"825\":8,\"832\":2,\"833\":9,\"838\":5,\"839\":3,\"840\":3,\"841\":3,\"842\":3,\"843\":1,\"844\":2,\"850\":4,\"851\":4,\"855\":2,\"856\":3,\"857\":3,\"859\":1,\"860\":1,\"863\":2,\"864\":2,\"866\":2,\"867\":14,\"870\":2,\"871\":1,\"872\":2,\"880\":4,\"881\":2,\"883\":1,\"884\":2,\"889\":2,\"892\":2,\"894\":2,\"895\":4,\"899\":1,\"902\":2,\"903\":3,\"904\":2,\"905\":3,\"912\":1,\"916\":2,\"918\":5,\"919\":1,\"920\":3,\"921\":1,\"922\":3,\"923\":1,\"924\":5,\"936\":7,\"940\":1,\"941\":1,\"943\":1,\"944\":3,\"953\":7,\"954\":1,\"955\":3,\"958\":1,\"959\":3,\"964\":2,\"968\":3,\"975\":3,\"978\":1,\"981\":1,\"997\":2,\"1018\":2,\"1023\":2,\"1026\":2,\"1028\":1,\"1029\":1,\"1048\":1,\"1078\":1,\"1085\":4,\"1088\":2,\"1095\":1,\"1096\":3,\"1107\":1,\"1109\":1,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1118\":2,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1126\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1131\":6,\"1132\":4,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":5}}],[\"vfsimpl\",{\"1\":{\"246\":1}}],[\"vim怎样使用\",{\"1\":{\"1201\":1}}],[\"vip\",{\"1\":{\"721\":1}}],[\"visualization\",{\"1\":{\"220\":1}}],[\"video\",{\"1\":{\"116\":1}}],[\"v3\",{\"0\":{\"894\":1,\"904\":1},\"1\":{\"894\":3,\"904\":4}}],[\"v3为2\",{\"1\":{\"212\":2}}],[\"v3均为2\",{\"1\":{\"212\":1}}],[\"v2ex\",{\"1\":{\"442\":1}}],[\"v2为1\",{\"1\":{\"212\":1}}],[\"v2为2\",{\"1\":{\"212\":1}}],[\"v2\",{\"0\":{\"893\":1,\"903\":1},\"1\":{\"212\":1,\"215\":1,\"867\":5,\"903\":3}}],[\"v1为1\",{\"1\":{\"212\":1}}],[\"v1\",{\"0\":{\"892\":1,\"902\":1},\"1\":{\"127\":2,\"212\":2,\"867\":5,\"892\":3,\"902\":3}}],[\"vue等\",{\"1\":{\"130\":1}}],[\"vue\",{\"0\":{\"76\":1},\"1\":{\"76\":2,\"212\":1}}],[\"vuepress\",{\"0\":{\"55\":1},\"1\":{\"51\":2,\"53\":2,\"54\":1,\"55\":2,\"56\":1,\"81\":1}}],[\"val2\",{\"1\":{\"944\":2}}],[\"val\",{\"1\":{\"675\":1,\"944\":2}}],[\"value为object的键值对\",{\"1\":{\"1159\":1}}],[\"value形式的保险柜\",{\"1\":{\"1152\":1}}],[\"value不支持特殊字符和中文\",{\"1\":{\"1148\":1}}],[\"value>\",{\"1\":{\"1097\":1}}],[\"value>root<\",{\"1\":{\"1097\":1}}],[\"value属性和url\",{\"1\":{\"1088\":1}}],[\"value属性建立url和servlet之间的映射关系\",{\"1\":{\"1087\":1}}],[\"value属性\",{\"0\":{\"1087\":1},\"1\":{\"1097\":2}}],[\"value代表什么东西\",{\"1\":{\"1053\":1}}],[\"value值\",{\"1\":{\"1007\":1}}],[\"value键值对的数目\",{\"1\":{\"1006\":1}}],[\"value结构\",{\"1\":{\"950\":1}}],[\"value结构的数据\",{\"1\":{\"950\":1}}],[\"valueof\",{\"1\":{\"703\":4,\"704\":4,\"706\":1,\"710\":1,\"711\":1,\"719\":2,\"738\":6,\"818\":4,\"820\":1,\"1132\":6}}],[\"value的格式\",{\"1\":{\"1123\":1}}],[\"value的形式\",{\"1\":{\"1112\":1}}],[\"value的二进制是\",{\"1\":{\"700\":1}}],[\"value的二进制是0111\",{\"1\":{\"700\":1}}],[\"value的数据结构\",{\"1\":{\"680\":1}}],[\"value数据时\",{\"1\":{\"1010\":1}}],[\"value数据数目超过\",{\"1\":{\"1006\":1}}],[\"value数据\",{\"0\":{\"1015\":1},\"1\":{\"1003\":1,\"1013\":1,\"1020\":1}}],[\"value数据的方式\",{\"1\":{\"997\":1}}],[\"value数据的流程\",{\"1\":{\"994\":1}}],[\"value数据按照上述结构存储后\",{\"1\":{\"680\":1}}],[\"value数据库\",{\"1\":{\"144\":1}}],[\"value=20\",{\"1\":{\"1016\":1}}],[\"value=\",{\"1\":{\"234\":4,\"244\":4,\"246\":28,\"248\":12,\"283\":1,\"286\":1,\"1087\":1,\"1104\":1}}],[\"value=1\",{\"1\":{\"212\":1}}],[\"value是学生集合\",{\"1\":{\"1019\":1}}],[\"value是主键的值\",{\"1\":{\"227\":1}}],[\"value是这一行的其他值\",{\"1\":{\"227\":1}}],[\"valuen\",{\"1\":{\"158\":2}}],[\"valuem\",{\"1\":{\"158\":2}}],[\"value2\",{\"1\":{\"158\":3,\"359\":1}}],[\"value1\",{\"1\":{\"158\":3,\"359\":1}}],[\"values后\",{\"1\":{\"158\":1}}],[\"values需要与之对应\",{\"1\":{\"158\":1}}],[\"values\",{\"1\":{\"149\":1,\"158\":14,\"161\":13,\"169\":3,\"170\":2,\"171\":8,\"180\":9,\"192\":1,\"194\":1,\"205\":1,\"206\":1,\"207\":2,\"209\":4,\"212\":1,\"220\":1,\"222\":1,\"225\":1,\"229\":1,\"237\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"261\":1,\"263\":1,\"271\":5,\"273\":1,\"274\":1,\"275\":9,\"278\":10,\"281\":15,\"719\":1,\"720\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"value\",{\"1\":{\"72\":1,\"127\":3,\"144\":2,\"212\":1,\"253\":1,\"283\":2,\"359\":1,\"424\":1,\"700\":3,\"702\":2,\"711\":2,\"729\":4,\"918\":1,\"920\":2,\"924\":2,\"939\":1,\"997\":2,\"1007\":2,\"1009\":1,\"1016\":2,\"1018\":2,\"1023\":2,\"1026\":4,\"1086\":1,\"1093\":3,\"1094\":3,\"1095\":3,\"1096\":1,\"1097\":2,\"1104\":1,\"1109\":6,\"1112\":2,\"1116\":2,\"1118\":9,\"1131\":1,\"1143\":2,\"1144\":1,\"1148\":2,\"1152\":1}}],[\"var1\",{\"1\":{\"1120\":1}}],[\"vary\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":1}}],[\"var\",{\"1\":{\"423\":2,\"471\":2}}],[\"varchar\",{\"1\":{\"153\":16,\"157\":3,\"158\":2,\"161\":2,\"169\":3,\"170\":1,\"171\":6,\"180\":4,\"209\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":2,\"233\":2,\"240\":3,\"261\":2,\"263\":5,\"275\":5,\"278\":2,\"281\":2}}],[\"variable\",{\"1\":{\"57\":1,\"331\":1}}],[\"提交信息\",{\"1\":{\"1205\":1}}],[\"提交的信息一般要去设置模板\",{\"1\":{\"1195\":1}}],[\"提交了一个版本\",{\"1\":{\"1195\":1}}],[\"提交\",{\"1\":{\"1120\":1,\"1195\":1}}],[\"提交callable类型的任务\",{\"1\":{\"880\":2}}],[\"提交任务\",{\"1\":{\"880\":2,\"903\":1}}],[\"提交事务\",{\"1\":{\"209\":3,\"243\":2}}],[\"提出一个问题\",{\"1\":{\"721\":1}}],[\"提升了程序的扩展性\",{\"1\":{\"582\":1}}],[\"提升了程序的可维护性\",{\"1\":{\"582\":1}}],[\"提升代码可读性\",{\"1\":{\"560\":1}}],[\"提升代码的可复用性\",{\"1\":{\"112\":1}}],[\"提供session\",{\"0\":{\"1150\":1}}],[\"提供统一的规范接口servletrequest和servletresponse\",{\"1\":{\"1110\":1}}],[\"提供的信息都是键值对形式的\",{\"1\":{\"1160\":1}}],[\"提供的初始化参数\",{\"1\":{\"1097\":1}}],[\"提供的哈希表\",{\"1\":{\"678\":1,\"679\":1}}],[\"提供初始化参数\",{\"1\":{\"1086\":1}}],[\"提供deployment的配置\",{\"1\":{\"1084\":1}}],[\"提供子工程通用的内容\",{\"1\":{\"1080\":1}}],[\"提供两份数据\",{\"1\":{\"1019\":1}}],[\"提供key\",{\"1\":{\"950\":1}}],[\"提供接口来完成商品的管理\",{\"1\":{\"601\":1}}],[\"提供一个sqlsessionfactory的实例\",{\"1\":{\"1131\":1}}],[\"提供一个servlet\",{\"1\":{\"1110\":1}}],[\"提供一个比较器\",{\"1\":{\"1041\":1}}],[\"提供一个方法\",{\"1\":{\"924\":1}}],[\"提供一个静态的方法获取实例\",{\"1\":{\"884\":3}}],[\"提供一个全局的自身的成员变量\",{\"1\":{\"884\":3}}],[\"提供一个打印基本信息的public的方法\",{\"1\":{\"517\":1}}],[\"提供一个公共的\",{\"1\":{\"516\":1}}],[\"提供一个交换数组的方法swap\",{\"1\":{\"426\":1}}],[\"提供公共的\",{\"1\":{\"516\":1}}],[\"提供了通用的方法\",{\"1\":{\"1123\":1}}],[\"提供了一个页面\",{\"1\":{\"1092\":1}}],[\"提供了诸如\",{\"1\":{\"721\":1}}],[\"提供了很多个类来表示日期\",{\"1\":{\"721\":1}}],[\"提供了将对象字符串化的方式\",{\"1\":{\"658\":1}}],[\"提供了两种传值方式\",{\"1\":{\"426\":1}}],[\"提供了明确的规范\",{\"1\":{\"318\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"56\":1}}],[\"提前跳出一个块\",{\"1\":{\"312\":1}}],[\"提高效率\",{\"1\":{\"976\":1}}],[\"提高了效率\",{\"1\":{\"970\":1}}],[\"提高了代码的复用性\",{\"1\":{\"530\":1}}],[\"提高了开发效率\",{\"1\":{\"513\":1}}],[\"提高开发mybatis应用程序的效率\",{\"1\":{\"263\":1}}],[\"提高可靠性\",{\"1\":{\"213\":1}}],[\"提高性能\",{\"1\":{\"213\":1}}],[\"提取\",{\"1\":{\"267\":2}}],[\"提取公共方法\",{\"1\":{\"203\":1}}],[\"提取工具类\",{\"1\":{\"203\":1}}],[\"提示\",{\"1\":{\"81\":1}}],[\"提示容器\",{\"0\":{\"57\":1},\"1\":{\"57\":1}}],[\"主分支\",{\"1\":{\"1204\":1}}],[\"主机ip\",{\"1\":{\"1104\":1}}],[\"主线程打印3个数\",{\"1\":{\"844\":2}}],[\"主动调用session\",{\"1\":{\"1153\":1}}],[\"主动调用gc进行回收\",{\"1\":{\"934\":1}}],[\"主动在程序中抛出异常\",{\"1\":{\"757\":1}}],[\"主动控制优先级\",{\"1\":{\"350\":1}}],[\"主键这一列会默认创建一个主键索引树\",{\"1\":{\"232\":1}}],[\"主键这一行对应的其他列的数据\",{\"1\":{\"226\":1}}],[\"主键这一行数据对应的地址值\",{\"1\":{\"223\":1}}],[\"主键索引和非主键索引\",{\"1\":{\"226\":1,\"227\":2}}],[\"主键索引是指myisam默认会根据主键这一列的值\",{\"1\":{\"223\":1}}],[\"主键索引\",{\"0\":{\"223\":1,\"226\":1},\"1\":{\"226\":1,\"227\":1}}],[\"主键值\",{\"1\":{\"223\":1,\"226\":1}}],[\"主键值不能为空\",{\"1\":{\"170\":1}}],[\"主键值从1000开始自增\",{\"1\":{\"169\":1}}],[\"主键或unique\",{\"1\":{\"169\":1}}],[\"主键可以由多个字段共同组成\",{\"1\":{\"169\":1}}],[\"主键\",{\"1\":{\"169\":1,\"177\":1}}],[\"主播贴了一个商品链接\",{\"1\":{\"116\":1}}],[\"主播带货\",{\"1\":{\"116\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"81\":1}}],[\"主题扩展了更多\",{\"1\":{\"56\":1}}],[\"主题扩展\",{\"0\":{\"56\":1}}],[\"主要使用的是其setxxx方法\",{\"1\":{\"1110\":1}}],[\"主要使用的是其getxxx方法\",{\"1\":{\"1110\":1}}],[\"主要使用string类中的成员方法\",{\"1\":{\"655\":1}}],[\"主要存储的就是单列数据\",{\"1\":{\"950\":1}}],[\"主要用于存放车\",{\"1\":{\"936\":1}}],[\"主要逻辑\",{\"1\":{\"796\":1}}],[\"主要关注它的成员方法\",{\"1\":{\"658\":1}}],[\"主要就是格式的简化\",{\"1\":{\"654\":1}}],[\"主要就是考虑权限\",{\"1\":{\"629\":1}}],[\"主要就是增加了回去的指针\",{\"1\":{\"220\":1}}],[\"主要目的是执行和static相关的内容\",{\"1\":{\"497\":1}}],[\"主要目的是将符号引用替换为直接引用\",{\"1\":{\"497\":1}}],[\"主要目的是进行静态成员变量的默认初始化\",{\"1\":{\"497\":1}}],[\"主要目的是为了确保class文件的字节流中包含的信息符合当前jvm的要求\",{\"1\":{\"497\":1}}],[\"主要有以下\",{\"1\":{\"436\":1}}],[\"主要有以下原因\",{\"1\":{\"303\":1}}],[\"主要包括\",{\"1\":{\"410\":1}}],[\"主要分几步\",{\"1\":{\"240\":1}}],[\"主要的问题\",{\"1\":{\"220\":1}}],[\"主要的原因是字符串拼接\",{\"1\":{\"204\":1}}],[\"主要的原因是效率\",{\"1\":{\"172\":1}}],[\"主要做了三件事\",{\"1\":{\"187\":1}}],[\"主要是静态资源\",{\"1\":{\"1098\":1}}],[\"主要是控制数组上能存储的数据\",{\"1\":{\"1006\":1}}],[\"主要是处理业务信息\",{\"1\":{\"951\":1}}],[\"主要是以下四点\",{\"1\":{\"666\":1}}],[\"主要是c\",{\"1\":{\"660\":1}}],[\"主要是两个角度考虑\",{\"1\":{\"600\":1}}],[\"主要是做通过类加载器\",{\"1\":{\"497\":1}}],[\"主要是介绍mybatis的核心配置文件\",{\"1\":{\"244\":1}}],[\"主要是三个问题\",{\"1\":{\"153\":1}}],[\"主要是用来限制mysql表中的数据\",{\"1\":{\"168\":1}}],[\"主要是用来做一些关系型数据库不擅长的事情\",{\"1\":{\"144\":1}}],[\"主要是用关系型数据库\",{\"1\":{\"144\":1}}],[\"主要取决于企业希望如何使用数据\",{\"1\":{\"144\":1}}],[\"主要应用于os\",{\"1\":{\"143\":1}}],[\"主要由开源社区在维护\",{\"1\":{\"143\":1}}],[\"主要特点就是快\",{\"1\":{\"142\":1}}],[\"主要从事数据处理的工作\",{\"1\":{\"303\":1}}],[\"主要从\",{\"1\":{\"51\":1}}],[\"主要功能与配置演示\",{\"0\":{\"42\":1}}],[\"中运行\",{\"1\":{\"1078\":1}}],[\"中老年\",{\"1\":{\"1040\":1}}],[\"中年\",{\"1\":{\"1040\":1}}],[\"中青年\",{\"1\":{\"1040\":1}}],[\"中存在该键的映射关系\",{\"1\":{\"1026\":1}}],[\"中共享同一个对象\",{\"1\":{\"709\":1}}],[\"中指出\",{\"1\":{\"403\":1}}],[\"中arraylist\",{\"1\":{\"394\":1}}],[\"中断子线程\",{\"1\":{\"844\":3}}],[\"中断\",{\"1\":{\"376\":1}}],[\"中间使用分号分隔开\",{\"1\":{\"1138\":1}}],[\"中间操作\",{\"0\":{\"1035\":1},\"1\":{\"1033\":1}}],[\"中间某一次我希望跳过循环\",{\"1\":{\"375\":1}}],[\"中间18个0\",{\"1\":{\"336\":1}}],[\"中间断更了几年\",{\"1\":{\"214\":1}}],[\"中有\",{\"1\":{\"252\":1}}],[\"中找对应的数据\",{\"1\":{\"171\":1}}],[\"中大型企业\",{\"1\":{\"143\":1}}],[\"中小企业\",{\"1\":{\"143\":2}}],[\"中\",{\"1\":{\"143\":1,\"153\":1,\"792\":1,\"794\":1,\"1094\":1,\"1183\":1}}],[\"中文编码表\",{\"1\":{\"800\":1}}],[\"中文存不进去\",{\"1\":{\"157\":1}}],[\"中文文件乱码问题\",{\"1\":{\"139\":1}}],[\"中文\",{\"1\":{\"130\":1,\"139\":1}}],[\"中文简体\",{\"1\":{\"116\":1}}],[\"中国的中文编码表升级\",{\"1\":{\"799\":1}}],[\"中国的中文编码表\",{\"1\":{\"799\":1}}],[\"中国的时区缩写是cst\",{\"1\":{\"724\":1}}],[\"中国处在东八区\",{\"1\":{\"724\":1}}],[\"中国人听到可能会盘腿而坐\",{\"1\":{\"514\":1}}],[\"中国\",{\"1\":{\"124\":1,\"171\":1}}],[\"中设置页面信息\",{\"1\":{\"80\":1}}],[\"中使用\",{\"1\":{\"57\":1}}],[\"中的数据共享\",{\"1\":{\"1161\":1}}],[\"中的元素相同的新链接哈希\",{\"1\":{\"988\":1}}],[\"中的元素的新\",{\"1\":{\"984\":1}}],[\"中的元素的列表\",{\"1\":{\"967\":1}}],[\"中的内存空间\",{\"1\":{\"442\":1}}],[\"中的\",{\"1\":{\"55\":1,\"271\":1,\"730\":1}}],[\"中很重要的一个概念\",{\"1\":{\"53\":1}}],[\"对高于180的同学根据身高进行排序\",{\"1\":{\"1041\":2}}],[\"对元素进行去重处理\",{\"1\":{\"1037\":1}}],[\"对元素进行过滤\",{\"1\":{\"1036\":1}}],[\"对arraylist排序\",{\"1\":{\"1026\":1}}],[\"对key的重复的定义和hashmap一样\",{\"1\":{\"1020\":1}}],[\"对key进行计算\",{\"1\":{\"1016\":1}}],[\"对key计算它的hash\",{\"1\":{\"1016\":1}}],[\"对16进行取余\",{\"1\":{\"1008\":1}}],[\"对很多场景进行测试\",{\"1\":{\"1006\":1}}],[\"对数组长度进行取余\",{\"1\":{\"1005\":1,\"1016\":1}}],[\"对数据进行增删改查\",{\"1\":{\"420\":1}}],[\"对数据进行解析\",{\"1\":{\"121\":1}}],[\"对数据的增删改查\",{\"1\":{\"146\":1}}],[\"对计算得到的int值\",{\"1\":{\"1005\":1}}],[\"对多\",{\"1\":{\"999\":1}}],[\"对重复的key的定义\",{\"1\":{\"994\":1}}],[\"对重复的定义\",{\"1\":{\"979\":1}}],[\"对集合的元素\",{\"1\":{\"953\":1}}],[\"对一个集合中的元素\",{\"1\":{\"953\":1}}],[\"对一些精度要求比较高的数据\",{\"1\":{\"153\":1}}],[\"对不对\",{\"1\":{\"945\":1}}],[\"对外提供获取小汽车方法\",{\"1\":{\"936\":1}}],[\"对每个属性都要赋值\",{\"1\":{\"924\":1}}],[\"对每一个字母\",{\"1\":{\"125\":1}}],[\"对中\",{\"1\":{\"924\":1}}],[\"对字节码文件格式的验证\",{\"1\":{\"910\":1}}],[\"对字符串中的字符进行排序\",{\"1\":{\"739\":2}}],[\"对方只能听懂汉语\",{\"1\":{\"885\":1}}],[\"对锁对象的持有\",{\"1\":{\"873\":1}}],[\"对此监视器的所有权\",{\"1\":{\"869\":1}}],[\"对共享数据的访问操作\",{\"1\":{\"855\":2,\"856\":2,\"857\":2}}],[\"对操作系统的建议\",{\"1\":{\"838\":1}}],[\"对以前使用\",{\"1\":{\"824\":1}}],[\"对异常的处理操作\",{\"1\":{\"752\":2,\"754\":3}}],[\"对枚举对象\",{\"1\":{\"715\":1}}],[\"对称性\",{\"1\":{\"674\":1}}],[\"对称加密\",{\"1\":{\"125\":2}}],[\"对该类做一些操作\",{\"1\":{\"662\":1}}],[\"对该行数据进行md5哈希计算\",{\"1\":{\"188\":1}}],[\"对上述例子的基础上\",{\"1\":{\"517\":1}}],[\"对上述例子进行修改\",{\"1\":{\"517\":1}}],[\"对原有类的功能进行扩展\",{\"1\":{\"513\":1}}],[\"对其他任意类都可见\",{\"1\":{\"508\":1}}],[\"对程序而言是致命错误\",{\"1\":{\"442\":1}}],[\"对这个2的幂次取余\",{\"1\":{\"1008\":1}}],[\"对这个容器有一个基础的认识\",{\"1\":{\"951\":1}}],[\"对这个引用的副本进行操作\",{\"1\":{\"425\":1}}],[\"对这个副本进行操作\",{\"1\":{\"425\":1}}],[\"对这条数据进行md5哈希算法\",{\"1\":{\"188\":1}}],[\"对java而言将会是非常难以解决的问题\",{\"1\":{\"407\":1}}],[\"对我们sql参数或从结果集中取出一个值时\",{\"1\":{\"247\":1}}],[\"对订单的sql\",{\"1\":{\"234\":1}}],[\"对比文件的变化\",{\"1\":{\"1192\":1}}],[\"对比各个容器的不同\",{\"1\":{\"951\":1}}],[\"对比一下\",{\"1\":{\"233\":1,\"442\":1}}],[\"对比b+树来说要方便一些\",{\"1\":{\"220\":1}}],[\"对象生命周期\",{\"1\":{\"1153\":1}}],[\"对象上\",{\"1\":{\"869\":1}}],[\"对象相关\",{\"1\":{\"824\":1}}],[\"对象相等后\",{\"1\":{\"682\":1}}],[\"对象流\",{\"0\":{\"822\":1}}],[\"对象构造一个\",{\"1\":{\"807\":2}}],[\"对象表示的文件中写入数据的文件输出流\",{\"1\":{\"788\":2}}],[\"对象所有的状态及属性在其生命周期内不会发生任何变化\",{\"1\":{\"730\":1}}],[\"对象一旦被创建后\",{\"1\":{\"730\":1}}],[\"对象数组来存放所有的常量对象\",{\"1\":{\"719\":1}}],[\"对象地址不一样\",{\"1\":{\"706\":1,\"707\":1}}],[\"对象其实早就已经没用了\",{\"1\":{\"689\":1}}],[\"对象在存在时\",{\"1\":{\"689\":1}}],[\"对象在内存中存在\",{\"1\":{\"689\":1}}],[\"对象资源占用的情况\",{\"0\":{\"689\":1}}],[\"对象只能改变状态\",{\"1\":{\"526\":1}}],[\"对象结构存在后就进行默认初始化\",{\"1\":{\"489\":1}}],[\"对象之间如果需要交互\",{\"1\":{\"469\":1}}],[\"对象之间相互协作\",{\"1\":{\"445\":1}}],[\"对象描述的是程序世界中的个体\",{\"1\":{\"469\":1}}],[\"对象究竟是哪些\",{\"1\":{\"469\":1}}],[\"对象与类\",{\"0\":{\"469\":1}}],[\"对象创建流程\",{\"0\":{\"468\":1}}],[\"对象创建出来后\",{\"1\":{\"453\":1}}],[\"对象成为\",{\"1\":{\"457\":1}}],[\"对象被销毁回收内存自然就不存在了\",{\"1\":{\"457\":1}}],[\"对象是在加载类时由\",{\"1\":{\"917\":1}}],[\"对象是引用数据类型的实质\",{\"1\":{\"540\":1}}],[\"对象是不可能有的\",{\"1\":{\"454\":1}}],[\"对象是实质\",{\"1\":{\"405\":1}}],[\"对象名x\",{\"1\":{\"655\":1}}],[\"对象名引用成员方法\",{\"1\":{\"655\":3}}],[\"对象名点成员方法的访问特征\",{\"1\":{\"580\":1}}],[\"对象名点成员方法\",{\"1\":{\"557\":1,\"558\":1}}],[\"对象名点成员变量的访问特征\",{\"1\":{\"579\":1}}],[\"对象名点成员变量\",{\"1\":{\"552\":1}}],[\"对象名点访问成员变量的范围是编译器决定的\",{\"1\":{\"551\":1}}],[\"对象名点\",{\"1\":{\"548\":1}}],[\"对象名遵循小驼峰式的命名规范\",{\"1\":{\"452\":1}}],[\"对象名和之前讲的数组名是一个概念\",{\"1\":{\"452\":1}}],[\"对象名\",{\"0\":{\"549\":1,\"556\":1},\"1\":{\"452\":1,\"453\":3,\"480\":1,\"481\":1,\"572\":1,\"584\":1,\"655\":2,\"752\":2,\"754\":3}}],[\"对象就是面向对象程序设计的核心\",{\"1\":{\"445\":1}}],[\"对象中的成员变量就已经具有了默认值\",{\"1\":{\"487\":1}}],[\"对象中的成员变量也就失去意义了\",{\"1\":{\"457\":1}}],[\"对象中的成员变量\",{\"1\":{\"453\":1}}],[\"对象中的元素\",{\"1\":{\"458\":1}}],[\"对象中的元素具有默认值\",{\"1\":{\"408\":1}}],[\"对象中的元素需要进行赋值\",{\"1\":{\"408\":1}}],[\"对象中元素赋值的第一步永远是\",{\"1\":{\"408\":1}}],[\"对象中元素的默认初始化\",{\"0\":{\"408\":1}}],[\"对象的销毁不会导致数据的销毁\",{\"1\":{\"1153\":1}}],[\"对象的销毁\",{\"1\":{\"1153\":1}}],[\"对象的基本数据类型和图形写入\",{\"1\":{\"823\":1}}],[\"对象的垃圾回收具有不确定性\",{\"1\":{\"689\":1}}],[\"对象的哈希值\",{\"1\":{\"680\":1}}],[\"对象的状态\",{\"1\":{\"674\":1}}],[\"对象的状态仍可变\",{\"1\":{\"568\":1}}],[\"对象的十六进制地址值\",{\"1\":{\"667\":1}}],[\"对象的实际类型\",{\"1\":{\"558\":1}}],[\"对象的由来\",{\"1\":{\"549\":1,\"556\":1}}],[\"对象的引用\",{\"1\":{\"467\":1}}],[\"对象的引用就会被销毁\",{\"1\":{\"407\":1}}],[\"对象的属性\",{\"1\":{\"463\":1}}],[\"对象的类型是什么\",{\"1\":{\"452\":1}}],[\"对象的创建与使用\",{\"0\":{\"451\":1}}],[\"对象的创建\",{\"1\":{\"446\":1,\"1153\":1}}],[\"对象的概念\",{\"0\":{\"445\":1}}],[\"对象的一部分了\",{\"1\":{\"406\":1}}],[\"对象才是引用数据类型的实质\",{\"1\":{\"407\":1}}],[\"对象里面\",{\"1\":{\"253\":1}}],[\"对象有注解\",{\"1\":{\"252\":2}}],[\"对象属性名\",{\"1\":{\"252\":1}}],[\"对象前面没有任何的注解\",{\"1\":{\"252\":1}}],[\"对象没有注解\",{\"1\":{\"252\":1}}],[\"对象传值\",{\"0\":{\"252\":1}}],[\"对象关系映射\",{\"1\":{\"234\":1}}],[\"对象池等\",{\"1\":{\"213\":1}}],[\"对象\",{\"1\":{\"199\":1,\"200\":1,\"254\":1,\"403\":1,\"407\":1,\"413\":1,\"526\":1,\"544\":1,\"585\":1,\"604\":1,\"606\":1,\"794\":1,\"807\":4,\"823\":1,\"833\":1,\"855\":1,\"857\":1,\"870\":2,\"916\":2,\"1076\":1,\"1093\":1,\"1095\":1,\"1109\":1}}],[\"对着jar包右键\",{\"1\":{\"192\":1}}],[\"对应关系图\",{\"0\":{\"1100\":1}}],[\"对应数组下标的物理地址\",{\"1\":{\"948\":1}}],[\"对应基本数据类型值\",{\"1\":{\"703\":1}}],[\"对应包装类\",{\"1\":{\"701\":1}}],[\"对应包装类型的compare方法去比较浮点数的大小\",{\"1\":{\"675\":1}}],[\"对应的驱动com\",{\"1\":{\"1107\":1}}],[\"对应的驱动是com\",{\"1\":{\"1107\":1}}],[\"对应的form表单如下\",{\"1\":{\"1104\":1}}],[\"对应的是web资源目录\",{\"1\":{\"1099\":1}}],[\"对应的\",{\"1\":{\"699\":1}}],[\"对应的引用示例\",{\"1\":{\"655\":1}}],[\"对应的映射的sql标签的\",{\"1\":{\"261\":1}}],[\"对应的索引树也会变多\",{\"1\":{\"233\":1}}],[\"对应的数据\",{\"1\":{\"233\":1}}],[\"对应表a中的多条数据\",{\"1\":{\"174\":1}}],[\"对应表a中的一条数据\",{\"1\":{\"173\":1}}],[\"对应表b中的多条数据\",{\"1\":{\"173\":1,\"174\":1}}],[\"对应ip地址\",{\"1\":{\"113\":1}}],[\"对表的增删改查\",{\"1\":{\"146\":1}}],[\"对库的增删改查\",{\"1\":{\"146\":1}}],[\"对速度的要求非常高\",{\"1\":{\"144\":1}}],[\"对开发者的学习成本和企业的切换成本很高\",{\"1\":{\"144\":1}}],[\"对tomcat进行配置\",{\"1\":{\"130\":1}}],[\"对于任意一个输入\",{\"1\":{\"1008\":1}}],[\"对于任何非空引用值\",{\"1\":{\"674\":4}}],[\"对于key来说的\",{\"1\":{\"1003\":2}}],[\"对于一个y\",{\"1\":{\"999\":2}}],[\"对于一个x\",{\"1\":{\"999\":2}}],[\"对于遍历来说\",{\"1\":{\"954\":1}}],[\"对于注解而言\",{\"1\":{\"924\":1}}],[\"对于实现java网络编程\",{\"1\":{\"885\":1}}],[\"对于实现该接口的a类来说\",{\"1\":{\"740\":1}}],[\"对于b线程来说\",{\"1\":{\"859\":1}}],[\"对于boolean类型的成员变量来说\",{\"1\":{\"518\":1}}],[\"对于以上的异常\",{\"1\":{\"764\":1}}],[\"对于以上比较规则的equals方法的重写\",{\"1\":{\"674\":1}}],[\"对于运行时异常\",{\"1\":{\"759\":1}}],[\"对于编译时异常\",{\"1\":{\"756\":1,\"759\":1}}],[\"对于某个对象的引用x\",{\"1\":{\"698\":1}}],[\"对于集合a中的任何一个元素a\",{\"1\":{\"679\":1,\"999\":1}}],[\"对于电脑而言\",{\"1\":{\"607\":1}}],[\"对于类\",{\"1\":{\"768\":1}}],[\"对于类studnet\",{\"1\":{\"606\":1}}],[\"对于类的访问权限控制\",{\"1\":{\"508\":1}}],[\"对于引用数据类型而言\",{\"1\":{\"734\":1}}],[\"对于引用数据类型的方法传参\",{\"1\":{\"603\":1}}],[\"对于引用数据类型形参和实参而言\",{\"1\":{\"425\":1}}],[\"对于这台电视机而言\",{\"1\":{\"580\":1}}],[\"对于下列一个成员方法\",{\"1\":{\"561\":1}}],[\"对于下列代码\",{\"1\":{\"539\":1,\"553\":1,\"684\":1}}],[\"对于下列程序代码\",{\"1\":{\"468\":1}}],[\"对于的访问权限\",{\"1\":{\"509\":1}}],[\"对于动态初始化格式二的二维数组\",{\"1\":{\"438\":1}}],[\"对于动态初始化格式一的二维数组\",{\"1\":{\"438\":1}}],[\"对于静态初始化二维数组\",{\"1\":{\"438\":1}}],[\"对于基本数据类型的成员变量来说\",{\"1\":{\"699\":1}}],[\"对于基本数据类型的方法形参\",{\"1\":{\"603\":1}}],[\"对于基本数据类型形参和实参而言\",{\"1\":{\"425\":1}}],[\"对于基本数据类型而言\",{\"1\":{\"338\":1,\"734\":1}}],[\"对于声明的数组\",{\"1\":{\"408\":1}}],[\"对于数组而言\",{\"1\":{\"396\":1}}],[\"对于变量而言\",{\"1\":{\"396\":1}}],[\"对于修饰符列表中有static的方法\",{\"1\":{\"383\":1}}],[\"对于循环控制关键字的使用\",{\"1\":{\"375\":1}}],[\"对于顺序结构而言\",{\"1\":{\"356\":1}}],[\"对于逻辑或来说\",{\"1\":{\"347\":1}}],[\"对于两个操作数\",{\"1\":{\"346\":1}}],[\"对于两个操作数a和b\",{\"1\":{\"345\":1}}],[\"对于int\",{\"1\":{\"344\":1,\"348\":1}}],[\"对于innodb的b+树来说\",{\"1\":{\"233\":1}}],[\"对于innodb的表来说\",{\"1\":{\"226\":1}}],[\"对于innodb来说\",{\"1\":{\"227\":1}}],[\"对于整数字面值常量\",{\"1\":{\"342\":1}}],[\"对于s1和s2\",{\"1\":{\"327\":1}}],[\"对于学习任何编程语言来说\",{\"1\":{\"308\":1}}],[\"对于java项目来说\",{\"1\":{\"1203\":1}}],[\"对于java程序员而言\",{\"1\":{\"885\":1}}],[\"对于java的引用类型而言\",{\"1\":{\"530\":1}}],[\"对于java\",{\"1\":{\"257\":1}}],[\"对于非主键索引\",{\"1\":{\"227\":1}}],[\"对于myisam中的索引来说\",{\"1\":{\"224\":1}}],[\"对于myisam来说\",{\"1\":{\"222\":1,\"227\":1}}],[\"对于它的非主键索引\",{\"1\":{\"222\":1}}],[\"对于它的主键索引\",{\"1\":{\"222\":1}}],[\"对于企业的损失非常大\",{\"1\":{\"186\":1}}],[\"对于win7的同学\",{\"1\":{\"144\":1}}],[\"对于每一行\",{\"1\":{\"141\":1}}],[\"对于http协议来说\",{\"1\":{\"139\":1}}],[\"对于服务器厂商b\",{\"1\":{\"128\":1}}],[\"对于服务器a厂商\",{\"1\":{\"128\":1}}],[\"对于服务器来说\",{\"1\":{\"127\":1}}],[\"对于开发者来说\",{\"1\":{\"128\":1}}],[\"对于浏览器来说\",{\"1\":{\"123\":1}}],[\"对于王道这个网站\",{\"1\":{\"116\":1}}],[\"对于\",{\"1\":{\"81\":1,\"347\":1,\"412\":1,\"768\":1}}],[\"对\",{\"1\":{\"55\":1}}],[\"为啥要\",{\"1\":{\"1008\":1}}],[\"为啥不选红黑树做索引\",{\"1\":{\"220\":1}}],[\"为null的时候\",{\"1\":{\"1008\":1}}],[\"为number个\",{\"1\":{\"164\":1}}],[\"为true\",{\"1\":{\"980\":1}}],[\"为每一个都单独写一个类\",{\"1\":{\"936\":1}}],[\"为每个\",{\"1\":{\"53\":1}}],[\"为此\",{\"1\":{\"927\":1}}],[\"为用户线程服务的线程\",{\"1\":{\"842\":1}}],[\"为其他输出流添加了功能\",{\"1\":{\"819\":1}}],[\"为\",{\"1\":{\"698\":1,\"993\":1,\"1026\":2}}],[\"为不相等的对象生成不同整数结果可以提高哈希表的性能\",{\"1\":{\"682\":1}}],[\"为第三列之后的元素赋值\",{\"1\":{\"441\":1}}],[\"为案例\",{\"1\":{\"367\":1}}],[\"为真\",{\"1\":{\"346\":3,\"347\":4}}],[\"为假\",{\"1\":{\"346\":3,\"347\":2}}],[\"为latin1\",{\"1\":{\"157\":1}}],[\"为基础的对象关系型数据库管理系统\",{\"1\":{\"143\":1}}],[\"为什么提供的是接口\",{\"1\":{\"1110\":1}}],[\"为什么这么设计\",{\"1\":{\"1012\":1}}],[\"为什么必须要重写hashcode和equals方法\",{\"1\":{\"1009\":1}}],[\"为什么没有用这两个\",{\"1\":{\"1008\":1}}],[\"为什么使用的是\",{\"1\":{\"1008\":1}}],[\"为什么使用泛型\",{\"1\":{\"945\":1}}],[\"为什么hashmap的底层是数组+链表+红黑树\",{\"1\":{\"1003\":1}}],[\"为什么hashmap的底层\",{\"1\":{\"1002\":1}}],[\"为什么被弃用\",{\"1\":{\"969\":1}}],[\"为什么被替换掉\",{\"1\":{\"956\":1}}],[\"为什么数组的效率比链表高\",{\"1\":{\"948\":1}}],[\"为什么wait\",{\"0\":{\"876\":1}}],[\"为什么runnable中的run方法会运行在子线程中\",{\"0\":{\"851\":1}}],[\"为什么不靠谱\",{\"1\":{\"690\":1}}],[\"为什么不把数据全部存储在内存上\",{\"1\":{\"283\":1}}],[\"为什么要这样写\",{\"1\":{\"1008\":1}}],[\"为什么要取余\",{\"1\":{\"1002\":1}}],[\"为什么要提供一套集合类\",{\"1\":{\"950\":1}}],[\"为什么要close\",{\"1\":{\"789\":1}}],[\"为什么要学习file类\",{\"0\":{\"766\":1}}],[\"为什么要自定义异常\",{\"0\":{\"761\":1}}],[\"为什么要同时重写hashcode和equals方法\",{\"0\":{\"684\":1}}],[\"为什么要复用代码\",{\"1\":{\"519\":1}}],[\"为什么程序员需要在程序的运行期间\",{\"1\":{\"662\":1}}],[\"为什么会体现出这种特点\",{\"1\":{\"540\":1}}],[\"为什么设置protectd访问权限\",{\"0\":{\"537\":1}}],[\"为什么class没有私有或者protected之类的权限\",{\"1\":{\"508\":1}}],[\"为什么类中的所有成员方法都可以访问到成员变量\",{\"1\":{\"460\":1}}],[\"为什么非要有序且数据类型一样\",{\"1\":{\"394\":1}}],[\"为什么byte\",{\"1\":{\"342\":1}}],[\"为什么一个能够运行\",{\"1\":{\"342\":1}}],[\"为什么\",{\"1\":{\"341\":1,\"459\":1,\"706\":1,\"707\":1,\"796\":1,\"867\":1}}],[\"为什么采用这种数据结构\",{\"1\":{\"233\":1}}],[\"为什么红黑树和二叉搜索树不行\",{\"1\":{\"220\":1}}],[\"为什么索引结构是b+树\",{\"1\":{\"220\":1}}],[\"为什么说树的高度降低了之后\",{\"1\":{\"220\":1}}],[\"为什么需要重写\",{\"1\":{\"1009\":1}}],[\"为什么需要序列化\",{\"1\":{\"822\":1}}],[\"为什么需要索引\",{\"1\":{\"218\":1}}],[\"为什么需要数据库呢\",{\"1\":{\"141\":1}}],[\"为什么有字符流\",{\"0\":{\"797\":1}}],[\"为什么有io\",{\"0\":{\"780\":1}}],[\"为什么有sql\",{\"1\":{\"144\":1}}],[\"为什么有数据库这个东西\",{\"1\":{\"140\":1}}],[\"为什么阿里云\",{\"1\":{\"126\":1}}],[\"为各种场景提供了有效的工具\",{\"1\":{\"116\":1}}],[\"为了管理linux的核心代码来开发的一个分布式的版本控制工具\",{\"1\":{\"1183\":1}}],[\"为了提供统一的规范\",{\"1\":{\"1110\":1}}],[\"为了让大家了解这个问题\",{\"1\":{\"951\":1}}],[\"为了让代码更好理解\",{\"1\":{\"171\":1}}],[\"为了更好地理解三次握手和四次挥手\",{\"1\":{\"908\":1}}],[\"为了更快速地处理非结构化数据\",{\"1\":{\"142\":1}}],[\"为了还原编译器对枚举类型做的\",{\"1\":{\"719\":1}}],[\"为了避免空指针异常\",{\"1\":{\"669\":1}}],[\"为了避免sql注入攻击\",{\"1\":{\"204\":1}}],[\"为了方便语法练习\",{\"1\":{\"654\":1}}],[\"为了上课方便\",{\"1\":{\"608\":1}}],[\"为了能够出国交流\",{\"1\":{\"601\":1}}],[\"为了体现接口的特殊性\",{\"1\":{\"598\":1}}],[\"为了体现祖先类在设计上的抽象性\",{\"1\":{\"591\":1}}],[\"为了代码简洁\",{\"1\":{\"483\":1}}],[\"为了完成程序开发\",{\"1\":{\"446\":1}}],[\"为了完成上述两个要求\",{\"1\":{\"396\":1}}],[\"为了解决上述问题\",{\"1\":{\"444\":1}}],[\"为了解决这个需求\",{\"1\":{\"380\":1}}],[\"为了描述jvm运行时内存空间\",{\"1\":{\"403\":1}}],[\"为了确保签名不同\",{\"1\":{\"389\":1}}],[\"为了确保数据传递的顺利进行\",{\"1\":{\"110\":1}}],[\"为了起好名字\",{\"1\":{\"316\":1}}],[\"为了丰富文档写作\",{\"1\":{\"55\":1}}],[\"会合并到master\",{\"1\":{\"1204\":1}}],[\"会拉取远程仓库中的所有的变化到本地\",{\"1\":{\"1197\":1}}],[\"会创建一个\",{\"1\":{\"1192\":1}}],[\"会有一个dev分支\",{\"1\":{\"1204\":1}}],[\"会有请求报文和响应报文\",{\"1\":{\"1137\":1}}],[\"会有专门的章节去讲\",{\"1\":{\"410\":1}}],[\"会员管理\",{\"0\":{\"1132\":1}}],[\"会执行多少次\",{\"1\":{\"1093\":1}}],[\"会执行default中的语句\",{\"1\":{\"359\":1}}],[\"会将optional包含的值\",{\"1\":{\"1046\":1}}],[\"会将其直接当做object使用\",{\"1\":{\"939\":1}}],[\"会找到大于等于当前值的一个2的幂次方\",{\"1\":{\"1017\":1}}],[\"会找指定的配置文件\",{\"1\":{\"215\":1}}],[\"会转换为红黑树\",{\"1\":{\"1016\":2}}],[\"会转化为红黑树\",{\"1\":{\"1012\":1}}],[\"会进行比较\",{\"1\":{\"1016\":1}}],[\"会对键\",{\"1\":{\"1002\":1}}],[\"会问到hashmap\",{\"1\":{\"994\":1}}],[\"会影响原来的对象\",{\"1\":{\"960\":1}}],[\"会影响查询速度\",{\"1\":{\"220\":1}}],[\"会误认为是\",{\"1\":{\"960\":1}}],[\"会报并发修改异常\",{\"1\":{\"955\":1}}],[\"会报错而不是帮你创建\",{\"1\":{\"771\":2}}],[\"会报错\",{\"1\":{\"153\":1,\"167\":1,\"936\":1,\"960\":1,\"1026\":1,\"1192\":1}}],[\"会检查\",{\"1\":{\"955\":1}}],[\"会怎样操作\",{\"1\":{\"955\":1}}],[\"会直接进入vim界面\",{\"1\":{\"1201\":1}}],[\"会直接进行扩容\",{\"1\":{\"1016\":1}}],[\"会直接使用这个数组\",{\"1\":{\"954\":1}}],[\"会直接\",{\"1\":{\"954\":1}}],[\"会全部删除\",{\"1\":{\"953\":2,\"981\":1}}],[\"会向客户端发送一个包含fin标志位的数据包\",{\"1\":{\"907\":1}}],[\"会向客户端发送一个包含ack标志位的确认数据包\",{\"1\":{\"907\":1}}],[\"会向客户端发送一个确认数据包\",{\"1\":{\"906\":1}}],[\"会向服务器发送一个包含ack标志位的确认数据包\",{\"1\":{\"907\":1}}],[\"会向服务器发送一个包含ack标志位的数据包\",{\"1\":{\"906\":1}}],[\"会向服务器发送一个包含\",{\"1\":{\"907\":1}}],[\"会给大家讲\",{\"1\":{\"951\":1}}],[\"会给每台计算机分配一个ip地址\",{\"1\":{\"885\":1}}],[\"会给出相关的错误原因\",{\"1\":{\"308\":1}}],[\"会根据需要创建新线程\",{\"1\":{\"880\":1}}],[\"会继续\",{\"1\":{\"868\":1}}],[\"会得到以下输出结果\",{\"1\":{\"724\":1}}],[\"会得到接口的所有抽象方法\",{\"1\":{\"599\":1}}],[\"会从dev拉一个分支\",{\"1\":{\"1204\":1}}],[\"会从c1中删除所有的c2\",{\"1\":{\"953\":1}}],[\"会从缓存\",{\"1\":{\"709\":1}}],[\"会从数据库中查\",{\"1\":{\"283\":1}}],[\"会要求该类必须实现抽象方法\",{\"1\":{\"696\":1}}],[\"会要求你选择重写依据的成员变量\",{\"1\":{\"683\":1}}],[\"会要求将抽象类命名为abstracxxx或basexxx\",{\"1\":{\"592\":1}}],[\"会在阻塞的时候\",{\"1\":{\"873\":1}}],[\"会在堆上自动创建一个\",{\"1\":{\"662\":1}}],[\"会在多的一方添加字段来表示关系\",{\"1\":{\"173\":1}}],[\"会持有外部类对象的引用\",{\"1\":{\"639\":1}}],[\"会存在一个动物对象吗\",{\"1\":{\"590\":1}}],[\"会存在循环小数的情况\",{\"1\":{\"336\":1}}],[\"会变成一个局部常量\",{\"1\":{\"569\":1}}],[\"会发现\",{\"1\":{\"936\":1}}],[\"会发现访问的结果是子类中方法的行为\",{\"1\":{\"555\":1}}],[\"会发现访问的结果是子类中属性的取值\",{\"1\":{\"548\":1}}],[\"会发生什么\",{\"1\":{\"121\":1}}],[\"会严格体现到每一个子类中\",{\"1\":{\"530\":1}}],[\"会智能的导入需要的某个类\",{\"1\":{\"504\":1}}],[\"会打印该类的全限定类名\",{\"1\":{\"500\":1}}],[\"会覆盖掉先执行结构的结果\",{\"1\":{\"494\":1}}],[\"会自动调用该类的tostring\",{\"1\":{\"669\":1}}],[\"会自动调用的静态方法\",{\"1\":{\"494\":1}}],[\"会自动去类路径下\",{\"1\":{\"215\":1}}],[\"会触发cat类加载\",{\"1\":{\"471\":1}}],[\"会因为this\",{\"1\":{\"471\":1}}],[\"会经常疑惑何为当前对象呢\",{\"1\":{\"460\":1}}],[\"会经历怎样的过程\",{\"1\":{\"230\":1}}],[\"会引发栈溢出错误\",{\"1\":{\"442\":1}}],[\"会这么样呢\",{\"1\":{\"429\":1}}],[\"会再交换回去\",{\"1\":{\"419\":1}}],[\"会显示该引用存储的堆上的对象的内存地址\",{\"1\":{\"406\":1}}],[\"会显示到页面上\",{\"1\":{\"123\":1}}],[\"会\",{\"1\":{\"389\":1}}],[\"会编译不通过\",{\"1\":{\"376\":1,\"377\":1}}],[\"会编译报错\",{\"1\":{\"331\":1,\"389\":1,\"585\":1,\"642\":1}}],[\"会导致一个问题\",{\"1\":{\"1137\":1}}],[\"会导致报错\",{\"1\":{\"936\":1}}],[\"会导致堆内存溢出\",{\"1\":{\"643\":1}}],[\"会导致方法只进栈不出栈\",{\"1\":{\"442\":1}}],[\"会导致程序意外终止\",{\"1\":{\"412\":1}}],[\"会导致程序并不会等待并接收一个字符串\",{\"1\":{\"353\":1}}],[\"会导致内存空间的浪费\",{\"1\":{\"394\":1}}],[\"会导致非常混乱\",{\"1\":{\"213\":1}}],[\"会不断加深理解\",{\"1\":{\"346\":1}}],[\"会不会造成\",{\"1\":{\"211\":1}}],[\"会不会变成\",{\"1\":{\"149\":1}}],[\"会产生一个版本信息\",{\"1\":{\"1195\":2}}],[\"会产生扩容\",{\"1\":{\"1013\":1}}],[\"会产生精度丢失\",{\"1\":{\"338\":1}}],[\"会产生脏读\",{\"1\":{\"211\":1}}],[\"会出现精度问题\",{\"1\":{\"675\":1}}],[\"会出现精度丢失数据失真的问题\",{\"1\":{\"338\":1}}],[\"会出现一些不属于该类的方法\",{\"1\":{\"533\":1}}],[\"会出现一个\",{\"1\":{\"308\":1}}],[\"会出现什么问题\",{\"1\":{\"215\":1}}],[\"会走缓存\",{\"1\":{\"285\":2}}],[\"会清空当前sqlsession缓存\",{\"1\":{\"284\":1}}],[\"会被反序列化\",{\"1\":{\"1156\":1}}],[\"会被问到\",{\"1\":{\"951\":1}}],[\"会被问的问题有很多很多\",{\"1\":{\"212\":1}}],[\"会被存到原对象的id中\",{\"1\":{\"274\":1}}],[\"会查得出来属性\",{\"1\":{\"261\":1}}],[\"会把这个分支合并到dev\",{\"1\":{\"1204\":1}}],[\"会把泛型编译成object以及类型强转\",{\"1\":{\"945\":1}}],[\"会把子类对象直接赋值给父类引用变量时\",{\"1\":{\"514\":1}}],[\"会把包裹着的块\",{\"1\":{\"268\":1}}],[\"会把`成员变量名`\",{\"1\":{\"259\":1}}],[\"会把sql的结果\",{\"1\":{\"185\":1}}],[\"会降低树的高度\",{\"1\":{\"220\":1}}],[\"会一直等待\",{\"1\":{\"212\":1}}],[\"会加\",{\"1\":{\"211\":2}}],[\"会让高位和低位对在数组上的下标起作用\",{\"1\":{\"1008\":1}}],[\"会让你查询变得更简单\",{\"1\":{\"178\":1}}],[\"会让文字在不超出幻灯片范围的情况下尽可能大\",{\"1\":{\"14\":1}}],[\"会提升查询效率\",{\"1\":{\"172\":1}}],[\"会先触发父类的加载\",{\"1\":{\"914\":1}}],[\"会先对对象中成员变量默认初始化\",{\"1\":{\"471\":1}}],[\"会先去\",{\"1\":{\"233\":1}}],[\"会先按照英语成绩分组\",{\"1\":{\"167\":1}}],[\"会先按照第一个字段进行分组\",{\"1\":{\"167\":1}}],[\"会先满足第一个列的排序要求\",{\"1\":{\"166\":1}}],[\"会用2字节来存储长度\",{\"1\":{\"153\":1}}],[\"会用1\",{\"1\":{\"153\":1}}],[\"会用非关系型数据库\",{\"1\":{\"144\":1}}],[\"会四舍五入\",{\"1\":{\"153\":1}}],[\"会服务器接收到\",{\"1\":{\"124\":1}}],[\"会按照网页来进行解析\",{\"1\":{\"123\":1}}],[\"会乱码\",{\"1\":{\"123\":1}}],[\"会优先响应这几种指定的类型\",{\"1\":{\"116\":1}}],[\"会使用流进行数据的处理工作\",{\"1\":{\"1027\":1}}],[\"会使用map的增删改查api\",{\"1\":{\"994\":1}}],[\"会使用import\",{\"1\":{\"498\":1}}],[\"会使用第三方的连接池\",{\"1\":{\"213\":1}}],[\"会使用库层级的\",{\"1\":{\"157\":1}}],[\"会使用服务层面的字符集\",{\"1\":{\"157\":1}}],[\"会使用数据库服务层面的字符集和校对规则\",{\"1\":{\"157\":1}}],[\"会使用4字节存储长度\",{\"1\":{\"153\":1}}],[\"会使用\",{\"1\":{\"54\":1}}],[\"是无效的\",{\"1\":{\"1203\":1}}],[\"是无符号右移动的时候\",{\"1\":{\"348\":1}}],[\"是找不回来的\",{\"1\":{\"1202\":1}}],[\"是找到连接的条件\",{\"1\":{\"183\":1}}],[\"是远端的版本\",{\"1\":{\"1201\":1}}],[\"是留你的\",{\"1\":{\"1197\":1}}],[\"是git自己的元信息的一个文件夹\",{\"1\":{\"1192\":1}}],[\"是应对如果流中没有任何元素情况\",{\"1\":{\"1050\":1}}],[\"是想让你说你的认识\",{\"1\":{\"1020\":1}}],[\"是最大的情况\",{\"1\":{\"1012\":1}}],[\"是最常见的java引用数据类型\",{\"1\":{\"327\":1}}],[\"是最常用的整数数据类型\",{\"1\":{\"322\":1}}],[\"是我们传入的hash值\",{\"1\":{\"1009\":1}}],[\"是我们放进来的数组\",{\"1\":{\"954\":1}}],[\"是同一个\",{\"1\":{\"1009\":1}}],[\"是同一种类型的对象\",{\"1\":{\"663\":1}}],[\"是2的幂次\",{\"1\":{\"1001\":1}}],[\"是更新数据\",{\"1\":{\"997\":1}}],[\"是更常用的方式\",{\"1\":{\"398\":1}}],[\"是更常用的浮点数类型\",{\"1\":{\"323\":1}}],[\"是消费者权益保护\",{\"1\":{\"995\":1}}],[\"是车辆救援\",{\"1\":{\"995\":1}}],[\"是火警\",{\"1\":{\"995\":1}}],[\"是医院\",{\"1\":{\"995\":1}}],[\"是警察局\",{\"1\":{\"995\":1}}],[\"是0\",{\"1\":{\"991\":1}}],[\"是数组+链表+红黑树\",{\"1\":{\"1002\":1,\"1003\":1}}],[\"是数组的一种特殊形式\",{\"1\":{\"976\":1}}],[\"是数据库提供的数据\",{\"1\":{\"287\":1}}],[\"是数据库中一种特殊的数据结构\",{\"1\":{\"218\":1}}],[\"是什么\",{\"1\":{\"970\":1}}],[\"是先进后出的数据容器\",{\"1\":{\"970\":1}}],[\"是deque接口\",{\"1\":{\"968\":1}}],[\"是list接口继承过来的\",{\"1\":{\"968\":1}}],[\"是latin1的字符集\",{\"1\":{\"149\":1}}],[\"是采用哪种方式写得多\",{\"1\":{\"961\":1}}],[\"是元素的个数\",{\"1\":{\"954\":1}}],[\"是arraylist底层的数组\",{\"1\":{\"954\":1}}],[\"是arraylist的toarray实现\",{\"1\":{\"954\":1}}],[\"是将数据添加到c2中\",{\"1\":{\"953\":1}}],[\"是重点\",{\"1\":{\"951\":1}}],[\"是讲一个类型转到另外一个类型\",{\"1\":{\"942\":1}}],[\"是默认类型\",{\"1\":{\"939\":1}}],[\"是各个线程共享的内存区域\",{\"1\":{\"925\":1}}],[\"是计算机网络中主机的唯一标识\",{\"1\":{\"885\":1}}],[\"是计算机出现了之后发明的计算机领域专用符号\",{\"1\":{\"356\":1}}],[\"是正常状态\",{\"1\":{\"844\":2}}],[\"是程序设计的软件设计模式\",{\"1\":{\"955\":1}}],[\"是程序开发者的职责\",{\"1\":{\"925\":1}}],[\"是程序中的执行线程\",{\"1\":{\"830\":1}}],[\"是程序的入口方法\",{\"1\":{\"385\":2}}],[\"是字节流通向字符流的桥梁\",{\"1\":{\"812\":1}}],[\"是字符流通向字节流的桥梁\",{\"1\":{\"806\":1}}],[\"是需要消耗高昂的时间和空间的\",{\"1\":{\"731\":1}}],[\"是需要被使用的\",{\"1\":{\"320\":1}}],[\"是如何表示时间和日期的呢\",{\"1\":{\"721\":1}}],[\"是cfr工具的版本号\",{\"1\":{\"719\":1}}],[\"是collection\",{\"1\":{\"271\":1}}],[\"是和它对应的基本数据类型是没有区别的\",{\"1\":{\"703\":1}}],[\"是依赖于本地方法实现的\",{\"1\":{\"697\":1}}],[\"是依赖包\",{\"1\":{\"506\":1}}],[\"是独立的关系\",{\"1\":{\"697\":1}}],[\"是很重要的\",{\"1\":{\"680\":1}}],[\"是特殊的局部内部类\",{\"1\":{\"651\":1}}],[\"是特殊的数据类型\",{\"1\":{\"540\":1}}],[\"是隐含自身类对象的引用的\",{\"1\":{\"639\":1}}],[\"是隐式的导入了每个java类\",{\"1\":{\"503\":1}}],[\"是后面类名的对象还是子类对象\",{\"1\":{\"586\":1}}],[\"是后面类名的一个对象或者子类对象\",{\"1\":{\"586\":1}}],[\"是完全可以的\",{\"1\":{\"585\":1}}],[\"是肯定不会因为创建对象而产生不同的\",{\"1\":{\"570\":1}}],[\"是何种对象\",{\"1\":{\"559\":1}}],[\"是共用的关系\",{\"1\":{\"553\":1}}],[\"是谁\",{\"1\":{\"551\":1}}],[\"是绝不可能共存的\",{\"1\":{\"543\":1}}],[\"是绝对不会发生改变的量才能称之为常量\",{\"1\":{\"328\":1}}],[\"是通过父子类构造器调用的\",{\"1\":{\"542\":1}}],[\"是通过jdbc进行操作\",{\"1\":{\"105\":1}}],[\"是自定义的数据类型\",{\"1\":{\"540\":1}}],[\"是自增的\",{\"1\":{\"169\":1}}],[\"是没有选择的\",{\"1\":{\"530\":1}}],[\"是强制类型转换\",{\"1\":{\"529\":1}}],[\"是为了充分混合\",{\"1\":{\"1008\":1}}],[\"是为了尽可能地隐藏内部的细节\",{\"1\":{\"515\":1}}],[\"是为了让sql的字段更好理解\",{\"1\":{\"171\":1}}],[\"是由访问权限修饰符实现的\",{\"1\":{\"505\":1}}],[\"是由多个描述性很强的单词构成\",{\"1\":{\"146\":1}}],[\"是类似于2的一次方\",{\"1\":{\"978\":1}}],[\"是类加载的最后一个步骤\",{\"1\":{\"497\":1}}],[\"是类加载的特殊设计机制保证的\",{\"1\":{\"494\":1}}],[\"是类中成员方法的一个隐式传参\",{\"1\":{\"460\":1}}],[\"是jvm层面进行类加载的一种设计机制\",{\"1\":{\"494\":1}}],[\"是java平台的企业版\",{\"1\":{\"1077\":1}}],[\"是java平台的标准版\",{\"1\":{\"1077\":1}}],[\"是java核心类\",{\"1\":{\"728\":1}}],[\"是java反射的前置知识点\",{\"1\":{\"658\":1}}],[\"是java的核心类包\",{\"1\":{\"503\":1}}],[\"是java之中最负盛名的异常\",{\"1\":{\"412\":1}}],[\"是java沿袭自c语言的一种声明方式\",{\"1\":{\"395\":1}}],[\"是java开发的\",{\"1\":{\"303\":1}}],[\"是java程序与数据库进行交互的一种标准接口\",{\"1\":{\"191\":1}}],[\"是在客户端会话技术基础上的\",{\"1\":{\"1137\":1}}],[\"是在某个类类加载的时期\",{\"1\":{\"663\":1}}],[\"是在类加载过程中执行的\",{\"1\":{\"479\":1}}],[\"是在该类没有任何构造器的情况下才有的\",{\"1\":{\"466\":1}}],[\"是常用的做法\",{\"1\":{\"469\":1}}],[\"是常用的循环控制关键字\",{\"1\":{\"376\":1}}],[\"是允许同时定义多个构造方法的\",{\"1\":{\"466\":1}}],[\"是面向对象的编程语言\",{\"1\":{\"445\":1}}],[\"是全球最大的程序员问答平台\",{\"1\":{\"442\":1}}],[\"是比exception要更加的严重的错误\",{\"1\":{\"442\":1}}],[\"是开头也是最后的元素\",{\"1\":{\"440\":1}}],[\"是非常常见的操作\",{\"1\":{\"416\":1}}],[\"是创建的对象当中的元素具有初始化\",{\"1\":{\"408\":1}}],[\"是直接用新value是替代旧value\",{\"1\":{\"1010\":1}}],[\"是直接给出数组对象的元素值\",{\"1\":{\"408\":1}}],[\"是直接对整数的二进制位进行计算的运算符\",{\"1\":{\"348\":1}}],[\"是引用数据类型的实质\",{\"1\":{\"407\":1}}],[\"是有限的\",{\"1\":{\"1000\":1}}],[\"是有内存地址的\",{\"1\":{\"403\":1}}],[\"是有符号右移\",{\"1\":{\"348\":1}}],[\"是经典的错误错误\",{\"1\":{\"398\":1}}],[\"是日常开发中最常用的容器\",{\"1\":{\"394\":1}}],[\"是不可能真的用来做资源释放的\",{\"1\":{\"690\":1}}],[\"是不可能再改变了\",{\"1\":{\"394\":1}}],[\"是不能直接访问类的成员变量的\",{\"1\":{\"700\":1}}],[\"是不能自己新增成员的\",{\"1\":{\"653\":1}}],[\"是不能跨越种族的\",{\"1\":{\"599\":1}}],[\"是不会的\",{\"1\":{\"631\":1}}],[\"是不会编译报错的\",{\"1\":{\"592\":1}}],[\"是不是zs\",{\"1\":{\"956\":1}}],[\"是不是在迭代器使用过程中\",{\"1\":{\"955\":1}}],[\"是不是空字符串\",{\"1\":{\"736\":1}}],[\"是不是真正意义上的常量\",{\"1\":{\"570\":1}}],[\"是不是一个表建立的索引越多越好\",{\"1\":{\"233\":1}}],[\"是不是能够直接\",{\"1\":{\"156\":1}}],[\"是形参列表\",{\"1\":{\"385\":1}}],[\"是既重要也不重要的知识点\",{\"1\":{\"350\":1}}],[\"是典型的二元运算符\",{\"1\":{\"345\":1}}],[\"是从\",{\"1\":{\"339\":1}}],[\"是从什么浏览器发起的请求\",{\"1\":{\"116\":1}}],[\"是编码值参与了运算\",{\"1\":{\"340\":1}}],[\"是编码值参与了转换\",{\"1\":{\"338\":1}}],[\"是编码值参与运算\",{\"1\":{\"324\":1}}],[\"是可以的\",{\"1\":{\"599\":1,\"654\":1}}],[\"是可以访问到父类中的静态成员的\",{\"1\":{\"539\":1}}],[\"是可以优化的\",{\"1\":{\"380\":1}}],[\"是可以被复用的\",{\"1\":{\"380\":1}}],[\"是可以完全替代三目运算符的\",{\"1\":{\"349\":1}}],[\"是可以赋值成功的\",{\"1\":{\"342\":1}}],[\"是可以参与数值运算的\",{\"1\":{\"324\":1}}],[\"是可以直接运行的\",{\"1\":{\"192\":1}}],[\"是用来遍历这个容器对象所有数据的接口\",{\"1\":{\"955\":1}}],[\"是用来做参数映射的\",{\"1\":{\"261\":1}}],[\"是用生物的体细胞\",{\"1\":{\"693\":1}}],[\"是用户在登录页面上输入的值\",{\"1\":{\"204\":1}}],[\"是使用的statement\",{\"1\":{\"255\":1}}],[\"是使用的\",{\"1\":{\"255\":1}}],[\"是唯一的\",{\"1\":{\"248\":1}}],[\"是个maven项目\",{\"1\":{\"244\":1}}],[\"是这么描述的\",{\"1\":{\"681\":1}}],[\"是这个sql语句的坐标\",{\"1\":{\"234\":1}}],[\"是这样的\",{\"1\":{\"204\":1}}],[\"是存放protected修饰的成员变量的父类\",{\"1\":{\"535\":1}}],[\"是存放返回数据的地方\",{\"0\":{\"123\":1}}],[\"是存储信息的密度太低\",{\"1\":{\"220\":1}}],[\"是访问并可能操作各种数据项的一个数据库操作序列\",{\"1\":{\"208\":1}}],[\"是mysql提供的一个实现类\",{\"1\":{\"199\":1}}],[\"是跟着业务走的\",{\"1\":{\"176\":1}}],[\"是列的一个属性\",{\"1\":{\"170\":1}}],[\"是因为拷贝引用和原先的引用指向了同一个对象\",{\"1\":{\"699\":1}}],[\"是因为成员内部类对象的成员变量列表中\",{\"1\":{\"614\":1}}],[\"是因为没有开这个选项\",{\"1\":{\"167\":1}}],[\"是因为有一个选项没开\",{\"1\":{\"167\":1}}],[\"是因为我们的cmd是gbk的编码\",{\"1\":{\"139\":1}}],[\"是湖北人的\",{\"1\":{\"159\":1}}],[\"是表名\",{\"1\":{\"159\":1}}],[\"是查询的关键词\",{\"1\":{\"159\":1}}],[\"是的话\",{\"1\":{\"956\":2}}],[\"是的\",{\"1\":{\"150\":1}}],[\"是指将数据及相关操作绑定在一起的一种编程机制\",{\"1\":{\"515\":1}}],[\"是指为了控制循环进程而定义的变量\",{\"1\":{\"361\":1}}],[\"是指在mybatis进行分次查询的时候\",{\"1\":{\"283\":1}}],[\"是指在同一个字符集内字符之间的比较规则\",{\"1\":{\"149\":1}}],[\"是指我们可以把其他的非主键列声明为索引列\",{\"1\":{\"224\":1}}],[\"是指排序的\",{\"1\":{\"149\":1}}],[\"是两个不同的概念\",{\"1\":{\"149\":1}}],[\"是跨平台的非关系型数据库\",{\"1\":{\"144\":1}}],[\"是一行一行来进行比较的\",{\"1\":{\"1192\":1}}],[\"是一块较小的内\",{\"1\":{\"925\":1}}],[\"是一致时\",{\"1\":{\"674\":1}}],[\"是一起的\",{\"1\":{\"235\":1}}],[\"是一种比较灵活的数据结构\",{\"1\":{\"973\":1}}],[\"是一种可以在队列的两端添加或删除元素的数据结构\",{\"1\":{\"973\":1}}],[\"是一种数据结构\",{\"1\":{\"970\":1,\"976\":1}}],[\"是一种引用类型\",{\"1\":{\"385\":1}}],[\"是一种特殊的运算\",{\"1\":{\"350\":1}}],[\"是一种常见的资源管理技术\",{\"1\":{\"213\":1}}],[\"是一种sql中的表连接操作\",{\"1\":{\"182\":1,\"183\":1}}],[\"是一种专门用来和数据库通信的语言\",{\"1\":{\"146\":1}}],[\"是一种专门用来和数据库通信的标准语言\",{\"1\":{\"144\":1}}],[\"是一个版本控制工具\",{\"1\":{\"1183\":1}}],[\"是一个双向链表\",{\"1\":{\"965\":1}}],[\"是一个超级减分项\",{\"1\":{\"957\":1}}],[\"是一个创建集合的方法\",{\"1\":{\"953\":1}}],[\"是一个载体\",{\"1\":{\"950\":1}}],[\"是一个类能够调用clone方法的标志\",{\"1\":{\"694\":1}}],[\"是一个本地方法\",{\"1\":{\"681\":1}}],[\"是一个局部常量\",{\"1\":{\"642\":1}}],[\"是一个非常基础的继承语法的代码\",{\"1\":{\"590\":1}}],[\"是一个编译上的概念\",{\"1\":{\"551\":1}}],[\"是一个\",{\"1\":{\"480\":1}}],[\"是一个引用\",{\"1\":{\"461\":1}}],[\"是一个错误\",{\"1\":{\"442\":1}}],[\"是一个模糊的调用\",{\"1\":{\"389\":1}}],[\"是一个坐标\",{\"1\":{\"234\":1}}],[\"是一个不可分割的工作单位\",{\"1\":{\"208\":1}}],[\"是一个up猪\",{\"1\":{\"158\":1}}],[\"是一个up主\",{\"1\":{\"158\":1}}],[\"是一个视频区up主\",{\"1\":{\"158\":2}}],[\"是一个开源的使用\",{\"1\":{\"144\":1}}],[\"是一个由\",{\"1\":{\"144\":1}}],[\"是以node结点存储的\",{\"1\":{\"1007\":1}}],[\"是以加州大学伯克利分校计算机系开发的\",{\"1\":{\"143\":1}}],[\"是以虚拟映射为准\",{\"1\":{\"138\":2}}],[\"是甲骨文公司的一款关系数据库管理系统\",{\"1\":{\"143\":1}}],[\"是http\",{\"1\":{\"139\":1}}],[\"是要在webapps目录下操作的\",{\"1\":{\"135\":1}}],[\"是已经直接配置好的\",{\"1\":{\"125\":1}}],[\"是否所有元素\",{\"1\":{\"1044\":1,\"1045\":1}}],[\"是否所有的全匹配\",{\"0\":{\"1044\":1}}],[\"是否存在某个\",{\"1\":{\"1043\":1}}],[\"是否一定会转化为红黑树\",{\"1\":{\"1016\":1}}],[\"是否有弊端\",{\"1\":{\"1137\":1}}],[\"是否有一个\",{\"1\":{\"1043\":1}}],[\"是否有任意一个匹配\",{\"0\":{\"1043\":1}}],[\"是否有序\",{\"1\":{\"979\":1}}],[\"是否有下一个元素\",{\"1\":{\"955\":2}}],[\"是否允许存储null\",{\"1\":{\"969\":1,\"979\":1}}],[\"是否允许存储重复元素\",{\"1\":{\"969\":1}}],[\"是否允许发送多个http请求\",{\"1\":{\"115\":1}}],[\"是否了解hashtable\",{\"1\":{\"1020\":1}}],[\"是否了解list的子类\",{\"1\":{\"994\":1}}],[\"是否了解list接口\",{\"1\":{\"994\":1}}],[\"是否了解最开始的一个线程安全的list\",{\"1\":{\"969\":1}}],[\"是否了解arraylist和vector的区别\",{\"1\":{\"969\":1}}],[\"是否\",{\"1\":{\"956\":1}}],[\"是否包含某个请求头呢\",{\"1\":{\"1112\":1}}],[\"是否包含\",{\"1\":{\"953\":2}}],[\"是否包含元素\",{\"1\":{\"953\":1}}],[\"是否为空\",{\"1\":{\"953\":1,\"981\":1}}],[\"是否为null\",{\"1\":{\"162\":1}}],[\"是否可以直接访问到\",{\"1\":{\"948\":1}}],[\"是否物理存在\",{\"1\":{\"769\":1,\"771\":1,\"774\":1}}],[\"是否以目标字符串对象的字符序列结尾\",{\"1\":{\"736\":1}}],[\"是否已目标字符串的字符序列开头\",{\"1\":{\"736\":1}}],[\"是否是后面类名的对象或者子类对象\",{\"1\":{\"675\":1}}],[\"是否是父类方法的重写\",{\"1\":{\"560\":1}}],[\"是否受访问权限限制\",{\"1\":{\"619\":1,\"632\":1}}],[\"是否受权限控制\",{\"1\":{\"544\":1}}],[\"是否需要定义80个变量\",{\"1\":{\"392\":1}}],[\"是否需要分\",{\"1\":{\"176\":1}}],[\"是否等于8\",{\"1\":{\"266\":2}}],[\"是否走了索引\",{\"1\":{\"232\":1}}],[\"是否不为null\",{\"1\":{\"162\":1}}],[\"是否执行操作\",{\"1\":{\"73\":1}}],[\"是\",{\"1\":{\"53\":1,\"544\":1}}],[\"演示\",{\"0\":{\"212\":1},\"1\":{\"52\":1}}],[\"请重新登录\",{\"1\":{\"1159\":1}}],[\"请联系管理员\",{\"1\":{\"1131\":1}}],[\"请把对应值打印出来\",{\"1\":{\"1112\":1}}],[\"请设计程序模拟窗口售票的场景\",{\"1\":{\"851\":2}}],[\"请按照以下步骤进行操作\",{\"1\":{\"719\":1}}],[\"请按照以下步骤创建需要的类\",{\"1\":{\"502\":1}}],[\"请回答下列代码的执行结果是什么\",{\"1\":{\"700\":1}}],[\"请完成下面测试\",{\"1\":{\"502\":1}}],[\"请写代码统计外部创建student对象的次数\",{\"1\":{\"491\":1}}],[\"请说明程序的输出结果\",{\"1\":{\"479\":1}}],[\"请指出创建student对象\",{\"1\":{\"468\":1}}],[\"请大家思考一个问题\",{\"1\":{\"453\":1}}],[\"请问s字符串的内容会随之改变吗\",{\"1\":{\"730\":2}}],[\"请问输出的结果是什么\",{\"1\":{\"502\":1}}],[\"请问能够交换成功吗\",{\"1\":{\"470\":2}}],[\"请问调用的是方法1还是方法2呢\",{\"1\":{\"389\":1}}],[\"请问调用的是方法几呢\",{\"1\":{\"389\":1}}],[\"请问这个程序有哪些缺点呢\",{\"1\":{\"380\":1,\"387\":1}}],[\"请问这是1231吗\",{\"1\":{\"336\":1}}],[\"请思考\",{\"1\":{\"388\":1}}],[\"请明确记住\",{\"1\":{\"388\":1}}],[\"请在注释处补全代码\",{\"1\":{\"377\":1}}],[\"请使用所学的知识设计该员工系统\",{\"1\":{\"594\":1}}],[\"请使用标准格式for循环\",{\"1\":{\"362\":1}}],[\"请使用绝对链接\",{\"1\":{\"81\":1}}],[\"请键盘录入一个任意字符串s\",{\"1\":{\"730\":2}}],[\"请键盘录入一个字符串\",{\"1\":{\"352\":1}}],[\"请键盘录入一个int整数\",{\"1\":{\"352\":1}}],[\"请输入一个int数据\",{\"1\":{\"352\":1}}],[\"请自行看文档学习即可\",{\"1\":{\"323\":1}}],[\"请参考以下格式\",{\"1\":{\"725\":1}}],[\"请参考文档\",{\"1\":{\"719\":1}}],[\"请参考\",{\"1\":{\"319\":1}}],[\"请不要在代码中写出保留字\",{\"1\":{\"313\":1}}],[\"请打开文件资源管理器\",{\"1\":{\"308\":1}}],[\"请一定要打开操作系统中文件后缀名的显示\",{\"1\":{\"308\":1}}],[\"请求携带的jsessionid变了\",{\"1\":{\"1157\":1}}],[\"请求来自于哪一个客户端\",{\"1\":{\"1137\":1}}],[\"请求有误\",{\"1\":{\"1131\":1}}],[\"请求uri的最后一级\",{\"1\":{\"1130\":1}}],[\"请求url是什么\",{\"1\":{\"1132\":1}}],[\"请求url和uri\",{\"1\":{\"1111\":1}}],[\"请求url\",{\"1\":{\"1102\":1}}],[\"请求分发案例\",{\"0\":{\"1130\":1}}],[\"请求转发\",{\"1\":{\"1121\":1}}],[\"请求是从客户机发到服务器的\",{\"1\":{\"1115\":1}}],[\"请求正文\",{\"1\":{\"1104\":1}}],[\"请求的url\",{\"1\":{\"1104\":1}}],[\"请求参数名\",{\"1\":{\"1118\":1}}],[\"请求参数的场景\",{\"1\":{\"1116\":1}}],[\"请求参数\",{\"1\":{\"1102\":1,\"1116\":2,\"1132\":1}}],[\"请求协议\",{\"1\":{\"1102\":1,\"1104\":1,\"1111\":1}}],[\"请求关闭连接\",{\"1\":{\"907\":1,\"908\":1}}],[\"请求报文中的请求头cookie包含了对应的值\",{\"1\":{\"1139\":1}}],[\"请求报文是\",{\"1\":{\"1113\":1}}],[\"请求报文的组成\",{\"1\":{\"1110\":1}}],[\"请求报文的组成部分\",{\"1\":{\"1104\":1}}],[\"请求报文和响应报文分别包含哪些部分\",{\"1\":{\"1103\":1}}],[\"请求报文和响应报文\",{\"1\":{\"1103\":1}}],[\"请求报文\",{\"0\":{\"1104\":1},\"1\":{\"128\":1,\"1112\":1,\"1137\":1,\"1140\":1,\"1141\":1}}],[\"请求报文在网络中中转传输到达服务器之后\",{\"1\":{\"124\":1}}],[\"请求报文格式\",{\"1\":{\"105\":1}}],[\"请求完整的处理流程\",{\"0\":{\"124\":1}}],[\"请求体里出现字符串\",{\"1\":{\"1132\":1}}],[\"请求体里出现key=value\",{\"1\":{\"1132\":1}}],[\"请求体和响应体分别要使用到输入流和输出流\",{\"1\":{\"1129\":1}}],[\"请求体的部分\",{\"1\":{\"1113\":1}}],[\"请求体\",{\"0\":{\"118\":1,\"1113\":1},\"1\":{\"1110\":1}}],[\"请求体四部分\",{\"1\":{\"114\":1}}],[\"请求\",{\"1\":{\"115\":1,\"1110\":1,\"1131\":1,\"1142\":2}}],[\"请求资源有点问题\",{\"1\":{\"115\":1}}],[\"请求资源\",{\"1\":{\"115\":2}}],[\"请求方法\",{\"1\":{\"115\":1,\"1104\":1,\"1111\":2}}],[\"请求行\",{\"0\":{\"115\":1,\"1111\":1},\"1\":{\"115\":1,\"1104\":1,\"1110\":1}}],[\"请求头大小写不敏感\",{\"1\":{\"1112\":1}}],[\"请求头中的信息\",{\"1\":{\"1112\":1}}],[\"请求头结束的标志\",{\"1\":{\"127\":1}}],[\"请求头开始的标志\",{\"1\":{\"127\":1}}],[\"请求头可以理解为是对于请求信息的额外补充\",{\"1\":{\"116\":1}}],[\"请求头\",{\"0\":{\"116\":1,\"1112\":1},\"1\":{\"114\":1,\"116\":1,\"128\":1,\"1102\":1,\"1104\":1,\"1110\":1}}],[\"请阅读\",{\"1\":{\"55\":1}}],[\"请先阅读\",{\"1\":{\"52\":1}}],[\"请滚动鼠标滚轮进入下一页\",{\"1\":{\"3\":1}}],[\"介绍一个工具\",{\"1\":{\"1132\":1}}],[\"介绍\",{\"0\":{\"52\":1,\"208\":1,\"219\":1,\"1183\":1},\"1\":{\"52\":1,\"53\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}],[\"以gitee为例\",{\"1\":{\"1190\":1}}],[\"以会话的形式来体现客户端和服务器之间的交流\",{\"1\":{\"1137\":1}}],[\"以1\",{\"1\":{\"1128\":1}}],[\"以\",{\"1\":{\"1090\":1,\"1158\":1}}],[\"以保证迭代顺序\",{\"1\":{\"1021\":1}}],[\"以保障租户和房东的合法权益\",{\"1\":{\"108\":1}}],[\"以等待计算的完成\",{\"1\":{\"880\":1}}],[\"以将具有指定缓冲区大小的数据写入指定的底层输出流\",{\"1\":{\"790\":1}}],[\"以将数据写入指定的底层输出流\",{\"1\":{\"790\":1}}],[\"以内存为参照物\",{\"1\":{\"782\":1}}],[\"以字节为单位\",{\"1\":{\"775\":1}}],[\"以传入的字符串格式进行解析或者格式化日期\",{\"1\":{\"725\":1}}],[\"以示区别\",{\"1\":{\"475\":1}}],[\"以遍历并打印数组元素为例\",{\"1\":{\"417\":1}}],[\"以后大家会天天和引用数据类型打交道\",{\"1\":{\"412\":1}}],[\"以后简称栈\",{\"1\":{\"403\":1}}],[\"以后我们还会碰到\",{\"1\":{\"389\":1}}],[\"以后再来具体分析每步在做什么\",{\"1\":{\"352\":1}}],[\"以分号结尾\",{\"1\":{\"342\":2}}],[\"以分号分割\",{\"1\":{\"214\":1}}],[\"以下两种可能性\",{\"1\":{\"1153\":1}}],[\"以下的api了解即可\",{\"1\":{\"968\":1}}],[\"以下包装类和八种基本数据类型对应关系\",{\"1\":{\"701\":1}}],[\"以下猫狗继承案例\",{\"1\":{\"590\":1}}],[\"以下步骤\",{\"1\":{\"546\":1}}],[\"以下访问可行\",{\"1\":{\"539\":1}}],[\"以下方法代码\",{\"1\":{\"425\":1}}],[\"以下方法调用\",{\"1\":{\"423\":1}}],[\"以下main方法中就无法再定义num局部变量了\",{\"1\":{\"331\":1}}],[\"以下作简单了解\",{\"1\":{\"325\":1}}],[\"以下哪些标识符的命名规则符合规范\",{\"1\":{\"316\":1}}],[\"以下划线进行分割\",{\"1\":{\"149\":1}}],[\"以java8版本为例\",{\"1\":{\"313\":1}}],[\"以实现在控制台打印\",{\"1\":{\"308\":1}}],[\"以上概念了解即可\",{\"1\":{\"924\":1}}],[\"以上方法大家在使用时\",{\"1\":{\"724\":1}}],[\"以上5点常规协定\",{\"1\":{\"674\":1}}],[\"以上特点是class对象最重要的特点\",{\"1\":{\"663\":1}}],[\"以上总结\",{\"1\":{\"598\":1}}],[\"以上三种方式\",{\"1\":{\"570\":1}}],[\"以上三种赋值方式的执行顺序\",{\"1\":{\"467\":1}}],[\"以上问题就是子类对象的初始化问题\",{\"1\":{\"540\":1}}],[\"以上语法就得到了一个匿名对象\",{\"1\":{\"480\":1}}],[\"以上两种赋值方式\",{\"1\":{\"571\":1}}],[\"以上两部分对于一个正常的递归而言都是必须的\",{\"1\":{\"442\":1}}],[\"以上两个位置中继续嵌套的\",{\"1\":{\"331\":1}}],[\"以上需求完全是合理可能的\",{\"1\":{\"375\":1}}],[\"以上的情况都在使用if而不是switch\",{\"1\":{\"360\":1}}],[\"以上图中\",{\"1\":{\"338\":1}}],[\"以上结构\",{\"1\":{\"327\":1}}],[\"以上\",{\"1\":{\"307\":1,\"497\":1,\"667\":1}}],[\"以上是查询所有数据\",{\"1\":{\"159\":1}}],[\"以默认配置为准\",{\"1\":{\"283\":1}}],[\"以总开关的配置为准\",{\"1\":{\"283\":1}}],[\"以局部开关的配置为准\",{\"1\":{\"283\":1}}],[\"以什么字符分割开\",{\"1\":{\"271\":1}}],[\"以避免过多的实例占用系统资源\",{\"1\":{\"213\":1}}],[\"以确定数据是否发生变化\",{\"1\":{\"188\":1}}],[\"以确保它至少能够容纳最小容量参数所指定的元素数\",{\"1\":{\"964\":1}}],[\"以确保数据的准确性和完整性\",{\"1\":{\"188\":1}}],[\"以确保数据能够被正确拆分和解析\",{\"1\":{\"110\":1}}],[\"以确保各方在交往过程中能够达成共识\",{\"1\":{\"107\":1}}],[\"以满足各种不同的需求\",{\"1\":{\"179\":1}}],[\"以此类推\",{\"1\":{\"166\":1}}],[\"以服务器部分来做一个举例说明\",{\"1\":{\"128\":1}}],[\"以访问http\",{\"1\":{\"124\":1}}],[\"以防止图片被盗链\",{\"1\":{\"116\":1}}],[\"以post请求方法访问cskaoyan\",{\"1\":{\"115\":1}}],[\"以及idea中使用tomcat应用的方式\",{\"1\":{\"1075\":1}}],[\"以及为什么使用这种形式\",{\"1\":{\"970\":1}}],[\"以及为什么需要事务\",{\"1\":{\"189\":1}}],[\"以及queue是什么\",{\"1\":{\"970\":1}}],[\"以及解决的办法\",{\"1\":{\"956\":1}}],[\"以及以上类型的数组形式\",{\"1\":{\"924\":1}}],[\"以及异常出现在程序中的位置\",{\"1\":{\"753\":1}}],[\"以及集合a到集合b的对应关系f\",{\"1\":{\"679\":1,\"999\":1}}],[\"以及集合类型\",{\"1\":{\"247\":1}}],[\"以及新的产品信息\",{\"1\":{\"601\":1}}],[\"以及吃饭这个行为\",{\"1\":{\"519\":1}}],[\"以及怎么解决数据库注入问题\",{\"1\":{\"189\":1}}],[\"以及定义它有什么好处\",{\"1\":{\"189\":1}}],[\"以及列的类型\",{\"1\":{\"155\":1}}],[\"以及列类型\",{\"1\":{\"153\":1}}],[\"以及从小规模到大规模应用程序的执行能力\",{\"1\":{\"143\":1}}],[\"以及它们的关系\",{\"1\":{\"143\":1}}],[\"以及网络传输中提及的通讯协议\",{\"1\":{\"106\":1}}],[\"以及所有不在\",{\"1\":{\"12\":1}}],[\"以便进行不同的工作\",{\"1\":{\"1204\":1}}],[\"以便能够容纳更多的元素\",{\"1\":{\"961\":1}}],[\"以便能够适应不同类型的数据\",{\"1\":{\"939\":1}}],[\"以便在实现接口时指定具体的类型\",{\"1\":{\"941\":1}}],[\"以便在网络通信中传输可靠的数据\",{\"1\":{\"908\":1}}],[\"以便将来使用\",{\"1\":{\"795\":2}}],[\"以便于统计用户支付习惯进行数据分析\",{\"1\":{\"720\":1}}],[\"以便后者负责给学生分配宿舍\",{\"1\":{\"110\":1}}],[\"以便发送方和接收方能够正常地进行信息交流\",{\"1\":{\"110\":1}}],[\"以便\",{\"1\":{\"51\":1}}],[\"文档示例\",{\"0\":{\"831\":1,\"849\":1}}],[\"文档解释\",{\"0\":{\"666\":1}}],[\"文档地址\",{\"1\":{\"323\":1}}],[\"文档注释\",{\"1\":{\"318\":3,\"924\":1}}],[\"文档数据库\",{\"1\":{\"144\":1}}],[\"文本文件\",{\"1\":{\"308\":1,\"796\":2}}],[\"文本字符串\",{\"1\":{\"153\":1}}],[\"文章标题列表\",{\"1\":{\"82\":1}}],[\"文章加密\",{\"2\":{\"50\":1}}],[\"文件下载\",{\"1\":{\"1125\":1}}],[\"文件里面全是string\",{\"1\":{\"918\":1}}],[\"文件已经上传成功\",{\"1\":{\"905\":1}}],[\"文件已经存在\",{\"1\":{\"789\":1}}],[\"文件相关\",{\"1\":{\"824\":1}}],[\"文件复制功能\",{\"0\":{\"796\":1}}],[\"文件过滤器\",{\"0\":{\"777\":1}}],[\"文件和目录路径名的抽象表示形式\",{\"1\":{\"768\":1}}],[\"文件夹可以有两种状态\",{\"1\":{\"1192\":1}}],[\"文件夹\",{\"1\":{\"454\":1,\"1099\":1}}],[\"文件夹的名字叫做\",{\"1\":{\"1192\":1}}],[\"文件夹的名称\",{\"1\":{\"134\":1}}],[\"文件夹的图片\",{\"1\":{\"81\":1}}],[\"文件的类型\",{\"1\":{\"1194\":1}}],[\"文件的历史版本状态\",{\"1\":{\"1183\":1}}],[\"文件的名字和接口的文件的名字保持一致\",{\"1\":{\"244\":1}}],[\"文件的名字\",{\"1\":{\"235\":1,\"1194\":1}}],[\"文件的最后修改时间\",{\"1\":{\"121\":1}}],[\"文件上传完成\",{\"1\":{\"905\":1}}],[\"文件上传\",{\"0\":{\"1120\":1},\"1\":{\"115\":1}}],[\"文件放置在一起\",{\"1\":{\"81\":1}}],[\"文件\",{\"1\":{\"51\":1,\"1102\":1,\"1104\":1,\"1124\":1}}],[\"文件生成页面\",{\"1\":{\"51\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"81\":1}}],[\"文字\",{\"1\":{\"48\":2}}],[\"文字段落\",{\"1\":{\"48\":24}}],[\"文字并包含\",{\"1\":{\"8\":1}}],[\"段落\",{\"1\":{\"48\":2}}],[\"页脚\",{\"1\":{\"45\":1,\"82\":1}}],[\"页面上出现\",{\"1\":{\"1078\":1}}],[\"页面时\",{\"1\":{\"601\":1}}],[\"页面一成不变的\",{\"1\":{\"126\":1}}],[\"页面结构\",{\"0\":{\"82\":1}}],[\"页面内容\",{\"0\":{\"81\":1}}],[\"页面配置\",{\"0\":{\"79\":1},\"1\":{\"80\":1},\"2\":{\"84\":1}}],[\"页面引入配置\",{\"1\":{\"53\":1}}],[\"页面信息\",{\"0\":{\"80\":1},\"1\":{\"45\":1}}],[\"页面展示\",{\"1\":{\"43\":1,\"67\":1}}],[\"评论\",{\"1\":{\"45\":1,\"82\":1}}],[\"上群里\",{\"1\":{\"1204\":1}}],[\"上google\",{\"1\":{\"1204\":1}}],[\"上遍历的接口\",{\"1\":{\"955\":1}}],[\"上调用其notify\",{\"1\":{\"869\":1}}],[\"上层处理\",{\"0\":{\"755\":1}}],[\"上层的类越来越抽象\",{\"1\":{\"591\":1}}],[\"上\",{\"1\":{\"658\":1,\"679\":1,\"827\":1}}],[\"上节中属性的访问范围是一样的\",{\"1\":{\"557\":1}}],[\"上面我们已经说过了\",{\"1\":{\"698\":1}}],[\"上面等价于下面\",{\"1\":{\"616\":1}}],[\"上面两种方法仅供了解\",{\"1\":{\"600\":1}}],[\"上面四条\",{\"1\":{\"596\":1}}],[\"上面其实已经说过了\",{\"1\":{\"544\":1}}],[\"上面已经说过了\",{\"1\":{\"313\":1}}],[\"上来说\",{\"1\":{\"523\":1}}],[\"上一行上一列的元素值\",{\"1\":{\"441\":1}}],[\"上一行同列的元素值\",{\"1\":{\"441\":1}}],[\"上一篇\",{\"1\":{\"45\":1}}],[\"上海\",{\"1\":{\"158\":5}}],[\"上传商品的描述图片等\",{\"1\":{\"1120\":1}}],[\"上传等\",{\"1\":{\"351\":1}}],[\"上传word\",{\"1\":{\"118\":1}}],[\"上传一个文件\",{\"1\":{\"118\":1}}],[\"上网google一下\",{\"1\":{\"116\":1}}],[\"上述所有的扩容\",{\"1\":{\"1016\":1}}],[\"上述规定告诉我们\",{\"1\":{\"698\":1}}],[\"上述规则\",{\"1\":{\"551\":1}}],[\"上述三条\",{\"1\":{\"682\":1}}],[\"上述作用弄明白了以后\",{\"1\":{\"668\":1}}],[\"上述表示泛型\",{\"1\":{\"660\":1}}],[\"上述两个方法在使用时都可能抛出异常\",{\"1\":{\"726\":1}}],[\"上述两个不同的请求\",{\"1\":{\"115\":1}}],[\"上述两条\",{\"1\":{\"607\":1}}],[\"上述语法返回一个boolean类型值\",{\"1\":{\"586\":1}}],[\"上述代码\",{\"1\":{\"700\":2}}],[\"上述代码中\",{\"1\":{\"696\":1}}],[\"上述代码中ia接口就是一个功能接口\",{\"1\":{\"652\":1}}],[\"上述代码执行\",{\"1\":{\"690\":1}}],[\"上述代码还演示了方法重写\",{\"1\":{\"538\":1}}],[\"上述代码也可以写成\",{\"1\":{\"526\":1}}],[\"上述嵌套for意味着\",{\"1\":{\"367\":1}}],[\"上述运算符都是可用的\",{\"1\":{\"346\":1}}],[\"上述说的现象都是针对\",{\"1\":{\"342\":1}}],[\"上述关键字\",{\"1\":{\"312\":1}}],[\"上述过程中\",{\"1\":{\"110\":1}}],[\"上下角标\",{\"0\":{\"59\":1}}],[\"上使用\",{\"1\":{\"40\":1}}],[\"贡献者\",{\"1\":{\"45\":1,\"82\":1}}],[\"侧边栏\",{\"1\":{\"45\":1,\"82\":1}}],[\"展示全部商品\",{\"1\":{\"601\":1}}],[\"展示页面\",{\"1\":{\"601\":1}}],[\"展示数据\",{\"1\":{\"105\":1}}],[\"展示\",{\"0\":{\"51\":1},\"1\":{\"43\":1,\"67\":1}}],[\"的第二个伟大作品\",{\"1\":{\"1183\":1}}],[\"的信息\",{\"1\":{\"1159\":1}}],[\"的user后面的值的不同做不同的处理\",{\"1\":{\"1130\":1}}],[\"的一部分\",{\"1\":{\"1078\":1}}],[\"的一个新特性\",{\"1\":{\"651\":1}}],[\"的一个引用\",{\"1\":{\"544\":1}}],[\"的一个参数\",{\"1\":{\"250\":1}}],[\"的请求并生成响应\",{\"1\":{\"1078\":1}}],[\"的流\",{\"1\":{\"1038\":1}}],[\"的空插入顺序\",{\"1\":{\"1022\":2}}],[\"的空\",{\"1\":{\"1017\":2}}],[\"的空列表\",{\"1\":{\"963\":1}}],[\"的hashcode\",{\"1\":{\"1008\":1}}],[\"的部分视图\",{\"1\":{\"993\":4}}],[\"的新空链接哈希\",{\"1\":{\"988\":2}}],[\"的计算公式是\",{\"1\":{\"978\":1}}],[\"的迭代器返回的顺序排列\",{\"1\":{\"967\":1,\"978\":1}}],[\"的迭代器返回它们的顺序排列的\",{\"1\":{\"963\":1}}],[\"的构造方法\",{\"0\":{\"967\":1}}],[\"的映射\",{\"1\":{\"950\":1}}],[\"的元素的双端队列\",{\"1\":{\"978\":1}}],[\"的元素的列表\",{\"1\":{\"963\":1}}],[\"的元素\",{\"1\":{\"950\":1}}],[\"的特性\",{\"1\":{\"933\":1}}],[\"的特点\",{\"1\":{\"344\":1}}],[\"的消息\",{\"1\":{\"894\":2,\"895\":1}}],[\"的包\",{\"1\":{\"890\":1,\"892\":1}}],[\"的包发送到指定主机上的指定端口号\",{\"1\":{\"890\":1,\"892\":1}}],[\"的现象\",{\"1\":{\"867\":1}}],[\"的八个低位\",{\"1\":{\"786\":1,\"788\":1}}],[\"的常规协定是\",{\"1\":{\"786\":1,\"788\":1}}],[\"的异常\",{\"1\":{\"764\":1}}],[\"的时候\",{\"1\":{\"939\":1,\"1159\":1}}],[\"的时候会创建2个对象\",{\"1\":{\"732\":1}}],[\"的时候就设定好呢\",{\"1\":{\"463\":1}}],[\"的取值范围内时\",{\"1\":{\"709\":1}}],[\"的方法中无法访问一个非静态的成员变量\",{\"1\":{\"700\":1}}],[\"的性能\",{\"1\":{\"678\":1,\"679\":1}}],[\"的隐含调用的tostring方法能不写出来就不要写出来\",{\"1\":{\"669\":1}}],[\"的对象作为起始点\",{\"1\":{\"928\":1}}],[\"的对象\",{\"1\":{\"662\":1}}],[\"的对象或者子类对象\",{\"1\":{\"481\":2}}],[\"的实现\",{\"1\":{\"680\":1}}],[\"的实现来完成功能的方法\",{\"1\":{\"660\":1}}],[\"的实质\",{\"1\":{\"348\":1}}],[\"的运行时类\",{\"1\":{\"658\":1}}],[\"的语法来引用方法\",{\"1\":{\"655\":2}}],[\"的子类对象\",{\"1\":{\"647\":1}}],[\"的功能\",{\"1\":{\"599\":1,\"821\":2}}],[\"的情况下创建一个新\",{\"1\":{\"813\":1}}],[\"的情况下\",{\"1\":{\"598\":1}}],[\"的情况下通过浏览器访问网站都是get请求\",{\"1\":{\"115\":1}}],[\"的员工\",{\"1\":{\"594\":2}}],[\"的作用域是provided\",{\"1\":{\"1081\":1}}],[\"的作用\",{\"1\":{\"592\":1}}],[\"的机会是很罕见的\",{\"1\":{\"559\":1}}],[\"的机制\",{\"1\":{\"555\":1}}],[\"的引用\",{\"1\":{\"544\":1}}],[\"的叫法\",{\"1\":{\"522\":1}}],[\"的形式\",{\"1\":{\"518\":1,\"541\":1}}],[\"的速度\",{\"1\":{\"469\":1}}],[\"的英雄\",{\"1\":{\"469\":1}}],[\"的老师讲\",{\"1\":{\"465\":2}}],[\"的车在高速公路上以\",{\"1\":{\"459\":2}}],[\"的阶乘的值\",{\"1\":{\"442\":1}}],[\"的阶乘\",{\"1\":{\"442\":1}}],[\"的套娃会导致程序崩溃\",{\"1\":{\"442\":1}}],[\"的输入而能够正常输出\",{\"1\":{\"415\":1}}],[\"的下标时的问题\",{\"1\":{\"411\":1}}],[\"的单独存在于堆上\",{\"1\":{\"407\":1}}],[\"的过程\",{\"1\":{\"396\":1}}],[\"的井号排列\",{\"1\":{\"370\":1}}],[\"的逻辑\",{\"1\":{\"357\":1,\"358\":2}}],[\"的比较\",{\"1\":{\"346\":1}}],[\"的结果必然是一个布尔值\",{\"1\":{\"346\":1}}],[\"的括号中需要一个值来告诉它循环是否结束且我们一般都会用表达式\",{\"1\":{\"342\":1}}],[\"的那个\",{\"1\":{\"340\":1}}],[\"的强制类型转换极易造成数据溢出导致数据失真\",{\"1\":{\"339\":1}}],[\"的概念\",{\"1\":{\"331\":1,\"999\":1}}],[\"的文件中写入数据的输出文件流\",{\"1\":{\"788\":1}}],[\"的文件\",{\"1\":{\"308\":1}}],[\"的定制软件\",{\"1\":{\"303\":1}}],[\"的缓存\",{\"1\":{\"286\":2}}],[\"的区别\",{\"1\":{\"255\":1,\"348\":1,\"353\":1}}],[\"的值要和java接口的全限定名称保持一致\",{\"1\":{\"244\":1}}],[\"的值已经在\",{\"1\":{\"231\":1}}],[\"的值\",{\"1\":{\"231\":1}}],[\"的问题\",{\"1\":{\"211\":1}}],[\"的数据结构\",{\"1\":{\"970\":1}}],[\"的数据类型将会提升到\",{\"1\":{\"340\":1}}],[\"的数据类型\",{\"1\":{\"339\":1,\"341\":1}}],[\"的数据类型转换到\",{\"1\":{\"339\":1}}],[\"的数据类型转换之间\",{\"1\":{\"338\":1}}],[\"的数据的时候\",{\"1\":{\"171\":2}}],[\"的数据库\",{\"1\":{\"149\":1}}],[\"的同学信息\",{\"1\":{\"162\":2}}],[\"的同时点击幻灯片的任何元素\",{\"1\":{\"40\":1}}],[\"的表记录\",{\"1\":{\"159\":1}}],[\"的类型比较好\",{\"1\":{\"153\":1}}],[\"的字符串表示形式转换为\",{\"1\":{\"675\":1}}],[\"的字符串表示\",{\"1\":{\"666\":1}}],[\"的字符串\",{\"1\":{\"149\":1}}],[\"的字符集\",{\"1\":{\"149\":1}}],[\"的sql语句\",{\"1\":{\"148\":1}}],[\"的封装对象统一使用httpservletrequest接口来充当\",{\"1\":{\"128\":1}}],[\"的\",{\"0\":{\"958\":1,\"964\":1,\"968\":1},\"1\":{\"61\":1,\"80\":1,\"342\":1,\"389\":1,\"456\":1,\"537\":1,\"541\":1,\"596\":1,\"682\":1,\"786\":1,\"788\":1,\"823\":1}}],[\"的段落\",{\"1\":{\"8\":1}}],[\"o3\",{\"1\":{\"1132\":1}}],[\"oo\",{\"1\":{\"1028\":1}}],[\"oop3\",{\"1\":{\"294\":1}}],[\"oop2\",{\"1\":{\"293\":1}}],[\"oop1\",{\"1\":{\"292\":1}}],[\"o是一个truck对象\",{\"1\":{\"936\":1}}],[\"o操作\",{\"1\":{\"690\":1}}],[\"o操作时\",{\"1\":{\"689\":1}}],[\"o资源\",{\"1\":{\"689\":1}}],[\"o2\",{\"1\":{\"663\":2,\"741\":8,\"1028\":5,\"1047\":2,\"1048\":2}}],[\"o1<\",{\"1\":{\"741\":1}}],[\"o1\",{\"1\":{\"663\":2,\"741\":6,\"919\":2,\"920\":2,\"1028\":5,\"1047\":2,\"1048\":2}}],[\"objc\",{\"1\":{\"867\":3}}],[\"objb\",{\"1\":{\"866\":4,\"867\":6}}],[\"obja\",{\"1\":{\"866\":4,\"867\":6}}],[\"obj\",{\"1\":{\"652\":2,\"658\":2,\"671\":1,\"673\":2,\"707\":6,\"736\":1,\"823\":1,\"855\":3,\"856\":2,\"857\":2,\"920\":4,\"921\":2}}],[\"object>\",{\"1\":{\"1159\":1}}],[\"objectoutpustream\",{\"1\":{\"824\":1}}],[\"objectoutputstream\",{\"1\":{\"823\":4,\"824\":3,\"904\":3}}],[\"objectoutputstream序列化流\",{\"0\":{\"823\":1}}],[\"objectinputstream反序列化流\",{\"0\":{\"824\":1}}],[\"objectinputstream\",{\"1\":{\"823\":1,\"824\":7,\"904\":3}}],[\"object默认的hashcode方法\",{\"1\":{\"681\":1}}],[\"object类中\",{\"1\":{\"873\":1}}],[\"object类的clone方法的默认实现是完全直接拷贝一份成员变量\",{\"1\":{\"699\":1}}],[\"object类当中的equals方法默认实现\",{\"1\":{\"673\":2}}],[\"object类当中\",{\"1\":{\"667\":1}}],[\"object类有且仅有一个默认提供的无参构造方法\",{\"1\":{\"658\":1}}],[\"object类是没有成员变量定义的\",{\"1\":{\"658\":1}}],[\"object类是所有类继承层次的祖先类\",{\"1\":{\"658\":1}}],[\"object类是java每一个类的父类\",{\"1\":{\"652\":1}}],[\"object类是java所有类继承层次中顶层祖先类\",{\"1\":{\"533\":1}}],[\"object类\",{\"1\":{\"658\":1}}],[\"objectfactory\",{\"1\":{\"247\":1}}],[\"object\",{\"0\":{\"658\":1},\"1\":{\"201\":1,\"234\":1,\"247\":2,\"533\":1,\"538\":2,\"542\":1,\"598\":1,\"652\":2,\"658\":4,\"663\":2,\"671\":1,\"673\":1,\"681\":1,\"682\":2,\"692\":1,\"696\":1,\"701\":2,\"707\":2,\"711\":2,\"736\":1,\"740\":1,\"823\":1,\"824\":3,\"855\":2,\"856\":2,\"857\":2,\"859\":5,\"860\":5,\"866\":4,\"867\":10,\"870\":4,\"871\":6,\"872\":18,\"873\":1,\"880\":1,\"919\":2,\"920\":10,\"921\":8,\"922\":1,\"923\":2,\"936\":9,\"939\":2,\"940\":4,\"941\":4,\"950\":1,\"953\":6,\"954\":5,\"958\":2,\"964\":1,\"968\":2,\"975\":2,\"981\":4,\"997\":5,\"1008\":2,\"1018\":5,\"1023\":5,\"1026\":5,\"1107\":1,\"1108\":2,\"1109\":11,\"1118\":1,\"1131\":1,\"1132\":1,\"1152\":4,\"1159\":2}}],[\"oi\",{\"1\":{\"617\":1}}],[\"o流的形式\",{\"1\":{\"456\":1}}],[\"overtimework\",{\"1\":{\"594\":1}}],[\"overtime\",{\"1\":{\"594\":1}}],[\"overload\",{\"1\":{\"387\":1,\"563\":1}}],[\"override注解对方法重写的检验\",{\"1\":{\"652\":1}}],[\"override注解标记会报错\",{\"1\":{\"562\":1}}],[\"override\",{\"1\":{\"127\":1,\"538\":1,\"560\":4,\"563\":1,\"564\":1,\"588\":2,\"590\":2,\"594\":4,\"595\":2,\"598\":2,\"668\":1,\"669\":1,\"690\":1,\"699\":1,\"715\":1,\"717\":1,\"740\":3,\"741\":3,\"777\":2,\"789\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1,\"866\":1,\"867\":8,\"880\":3,\"881\":2,\"884\":1,\"895\":2,\"903\":1,\"904\":1,\"922\":1,\"923\":1,\"924\":2,\"941\":3,\"942\":1,\"1028\":1,\"1029\":1,\"1078\":1,\"1085\":3,\"1088\":2,\"1095\":1,\"1096\":3,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":4,\"1132\":1,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"ognl表达式\",{\"1\":{\"265\":1}}],[\"ognl\",{\"1\":{\"264\":1}}],[\"otherapi\",{\"1\":{\"922\":1}}],[\"otherwise>\",{\"1\":{\"266\":1}}],[\"otherwise就相当于java中的\",{\"1\":{\"266\":1}}],[\"otherwise\",{\"0\":{\"266\":1},\"1\":{\"264\":1}}],[\"other\",{\"1\":{\"246\":1}}],[\"operation\",{\"1\":{\"1130\":4,\"1131\":2}}],[\"open=\",{\"1\":{\"271\":4,\"272\":1}}],[\"open\",{\"1\":{\"271\":1}}],[\"opensession设置为真\",{\"1\":{\"244\":2}}],[\"opensession\",{\"1\":{\"234\":1,\"244\":3,\"1131\":1,\"1132\":2,\"1159\":2}}],[\"optional\",{\"1\":{\"1050\":2}}],[\"optional包含值返回true\",{\"1\":{\"1046\":1}}],[\"optional中存在几个方法\",{\"1\":{\"1046\":1}}],[\"optional作为一个容器代表一个值存在或者不存在\",{\"1\":{\"1046\":1}}],[\"optional<integer>\",{\"1\":{\"1050\":5}}],[\"optional<student>\",{\"1\":{\"1046\":2,\"1047\":1}}],[\"optional<t>\",{\"1\":{\"1046\":1,\"1047\":1,\"1050\":1}}],[\"options\",{\"1\":{\"71\":1,\"960\":1}}],[\"oppo\",{\"1\":{\"263\":4}}],[\"oldcapacity\",{\"1\":{\"1013\":1}}],[\"oldlen\",{\"1\":{\"1013\":1}}],[\"oldplayer<e>\",{\"1\":{\"941\":2}}],[\"old\",{\"1\":{\"156\":2,\"739\":4}}],[\"originservlet\",{\"1\":{\"1116\":1}}],[\"origin\",{\"1\":{\"1104\":1,\"1105\":2,\"1110\":1,\"1112\":1,\"1116\":1,\"1120\":2,\"1121\":2,\"1132\":3}}],[\"original\",{\"1\":{\"729\":2}}],[\"orelse\",{\"1\":{\"1046\":2}}],[\"org\",{\"1\":{\"234\":5,\"244\":2,\"246\":4,\"769\":1,\"771\":1,\"1097\":4,\"1120\":1}}],[\"organized\",{\"1\":{\"141\":1}}],[\"orm\",{\"1\":{\"234\":1,\"923\":1}}],[\"or\",{\"1\":{\"162\":4,\"204\":5,\"251\":1,\"265\":1}}],[\"order=desc\",{\"1\":{\"1132\":3}}],[\"order=\",{\"1\":{\"273\":1}}],[\"order\",{\"0\":{\"166\":1},\"1\":{\"149\":2,\"166\":2,\"168\":1,\"256\":1,\"273\":1,\"274\":1,\"956\":2,\"1132\":7}}],[\"ordbms\",{\"1\":{\"143\":1}}],[\"oracle官网下载jdk\",{\"1\":{\"306\":1}}],[\"oracle的数据库\",{\"1\":{\"143\":1}}],[\"oracle\",{\"1\":{\"143\":1,\"191\":1}}],[\"offerlast\",{\"1\":{\"968\":1,\"970\":1,\"975\":2}}],[\"offerfirst\",{\"1\":{\"968\":1,\"970\":1,\"975\":2}}],[\"offer\",{\"1\":{\"968\":1,\"970\":1,\"972\":2,\"975\":1}}],[\"off\",{\"1\":{\"786\":2,\"788\":3,\"790\":1,\"792\":1,\"794\":2,\"795\":1,\"804\":2,\"806\":2,\"810\":1,\"812\":1,\"923\":1,\"978\":2}}],[\"offsetnumer\",{\"1\":{\"164\":1}}],[\"offsetnumber\",{\"1\":{\"164\":3}}],[\"offset\",{\"1\":{\"164\":6,\"729\":4,\"743\":2,\"890\":3,\"892\":5,\"893\":2}}],[\"oftype=\",{\"1\":{\"279\":1,\"280\":1,\"282\":1,\"283\":3}}],[\"oftype\",{\"1\":{\"279\":1}}],[\"of\",{\"1\":{\"141\":1,\"153\":1,\"383\":1,\"702\":1,\"954\":1,\"978\":1,\"1034\":1}}],[\"once\",{\"1\":{\"309\":1}}],[\"on子句指定了连接条件\",{\"1\":{\"182\":1}}],[\"on\",{\"1\":{\"171\":2,\"182\":2,\"183\":4,\"209\":1,\"233\":1,\"277\":1,\"280\":1,\"282\":1,\"283\":3,\"842\":2,\"1093\":1,\"1097\":3}}],[\"only\",{\"1\":{\"144\":1,\"167\":1,\"588\":2}}],[\"onaliyun\",{\"1\":{\"127\":2}}],[\"oneperson\",{\"1\":{\"895\":2}}],[\"one\",{\"1\":{\"74\":2}}],[\"ok\",{\"1\":{\"120\":2,\"124\":1,\"127\":1}}],[\"omega^i\",{\"1\":{\"75\":1}}],[\"omega^r\",{\"1\":{\"75\":1}}],[\"omega\",{\"1\":{\"75\":4}}],[\"o\",{\"1\":{\"36\":1,\"283\":3,\"696\":2,\"729\":1,\"740\":6,\"780\":1,\"824\":3,\"870\":5,\"919\":2,\"920\":6,\"921\":3,\"922\":2,\"923\":2,\"936\":3,\"941\":1,\"953\":5,\"958\":2,\"968\":2,\"975\":2,\"981\":3,\"997\":1,\"1018\":1,\"1023\":1,\"1132\":1}}],[\"out2\",{\"1\":{\"905\":2}}],[\"output\",{\"1\":{\"779\":1}}],[\"outputstreamwriter\",{\"1\":{\"806\":8,\"824\":1}}],[\"outputstreamwriter转换流\",{\"0\":{\"806\":1}}],[\"outputstream\",{\"1\":{\"127\":8,\"783\":1,\"789\":1,\"790\":2,\"806\":2,\"816\":1,\"818\":3,\"819\":2,\"820\":4,\"823\":3,\"824\":1,\"899\":1,\"902\":2,\"903\":2,\"904\":5,\"905\":4,\"922\":1,\"1113\":3,\"1120\":2,\"1124\":2,\"1128\":3}}],[\"outofmemoryerror\",{\"1\":{\"747\":1}}],[\"outerclazz\",{\"1\":{\"609\":1,\"616\":3,\"617\":2,\"620\":1,\"629\":2}}],[\"outer可以省略掉\",{\"1\":{\"183\":1}}],[\"outer\",{\"1\":{\"183\":7,\"616\":2,\"619\":1,\"650\":2}}],[\"out\",{\"1\":{\"21\":3,\"127\":1,\"153\":1,\"192\":1,\"197\":4,\"204\":3,\"209\":2,\"214\":1,\"234\":3,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"259\":1,\"260\":1,\"268\":1,\"269\":1,\"271\":4,\"272\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"285\":2,\"287\":1,\"308\":1,\"324\":2,\"336\":2,\"340\":8,\"352\":5,\"356\":5,\"359\":2,\"367\":2,\"377\":1,\"378\":3,\"383\":3,\"415\":5,\"417\":1,\"440\":7,\"441\":2,\"459\":2,\"460\":2,\"465\":4,\"468\":2,\"469\":7,\"471\":7,\"472\":4,\"474\":5,\"478\":5,\"479\":4,\"491\":6,\"498\":21,\"509\":1,\"517\":1,\"539\":1,\"545\":12,\"555\":1,\"560\":2,\"564\":1,\"588\":20,\"590\":3,\"594\":6,\"595\":2,\"598\":1,\"606\":1,\"619\":3,\"655\":13,\"657\":1,\"663\":2,\"668\":2,\"669\":1,\"690\":1,\"696\":2,\"700\":1,\"704\":6,\"706\":3,\"707\":4,\"710\":1,\"718\":1,\"720\":3,\"729\":5,\"730\":4,\"734\":6,\"735\":5,\"737\":8,\"738\":9,\"739\":5,\"740\":4,\"741\":5,\"743\":3,\"744\":2,\"754\":2,\"767\":1,\"769\":2,\"771\":5,\"776\":2,\"777\":1,\"788\":6,\"789\":23,\"790\":11,\"794\":11,\"795\":2,\"801\":4,\"806\":14,\"808\":2,\"812\":2,\"813\":1,\"814\":5,\"816\":1,\"817\":14,\"818\":11,\"819\":2,\"820\":4,\"821\":2,\"823\":1,\"824\":4,\"825\":14,\"832\":3,\"833\":9,\"838\":3,\"839\":4,\"840\":3,\"841\":1,\"842\":4,\"844\":2,\"850\":3,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":4,\"860\":5,\"864\":1,\"866\":4,\"867\":12,\"870\":2,\"871\":5,\"872\":9,\"880\":5,\"881\":4,\"884\":1,\"892\":3,\"894\":2,\"895\":1,\"902\":6,\"903\":3,\"904\":4,\"905\":11,\"912\":6,\"916\":4,\"918\":10,\"919\":10,\"920\":11,\"921\":9,\"922\":12,\"923\":4,\"924\":3,\"936\":5,\"943\":1,\"944\":3,\"953\":9,\"955\":4,\"956\":4,\"1028\":3,\"1029\":1,\"1036\":1,\"1037\":2,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":5,\"1047\":1,\"1048\":1,\"1049\":1,\"1050\":3,\"1052\":3,\"1085\":2,\"1088\":1,\"1095\":1,\"1096\":3,\"1097\":2,\"1112\":5,\"1115\":1,\"1116\":1,\"1117\":3,\"1119\":1,\"1129\":1,\"1131\":1,\"1143\":1}}],[\"或gsonformatplus\",{\"1\":{\"1132\":1}}],[\"或客户端\",{\"1\":{\"1110\":1}}],[\"或url\",{\"1\":{\"1097\":1}}],[\"或urlpatterns\",{\"0\":{\"1087\":1}}],[\"或等于\",{\"1\":{\"993\":1,\"1026\":2}}],[\"或notifyall\",{\"1\":{\"869\":1}}],[\"或collections\",{\"1\":{\"740\":1}}],[\"或对象容器\",{\"1\":{\"740\":1}}],[\"或始终返回\",{\"1\":{\"674\":1}}],[\"或拼接\",{\"1\":{\"668\":1}}],[\"或实现或不实现\",{\"1\":{\"592\":1}}],[\"或间接的继承了object\",{\"1\":{\"533\":1}}],[\"或显示定义或隐式定义的\",{\"1\":{\"505\":1}}],[\"或常量\",{\"1\":{\"346\":1}}],[\"或计算后的结果\",{\"1\":{\"345\":1}}],[\"或使用预处理语句等安全措施来防范这种攻击\",{\"1\":{\"204\":1}}],[\"或90的同学\",{\"1\":{\"162\":1}}],[\"或简称oracle\",{\"1\":{\"143\":1}}],[\"或者合并全留\",{\"1\":{\"1201\":1}}],[\"或者两份都留\",{\"1\":{\"1197\":1}}],[\"或者concurrentmap\",{\"1\":{\"1052\":1}}],[\"或者chatgpt一下\",{\"1\":{\"993\":1}}],[\"或者不变化类型\",{\"1\":{\"1040\":1}}],[\"或者equals返回true\",{\"1\":{\"1009\":1}}],[\"或者类中\",{\"1\":{\"939\":1}}],[\"或者全部不指定\",{\"1\":{\"939\":1}}],[\"或者全不指明默认object\",{\"1\":{\"939\":1}}],[\"或者说影响越大\",{\"1\":{\"938\":1}}],[\"或者定期重复执行\",{\"1\":{\"883\":1}}],[\"或者可使用默认的大小\",{\"1\":{\"814\":1}}],[\"或者可以接受平台默认的字符集\",{\"1\":{\"812\":1}}],[\"或者接受默认的大小\",{\"1\":{\"808\":1}}],[\"或者用对象名拼接字符串\",{\"1\":{\"668\":1}}],[\"或者需要访问子类独有成员\",{\"1\":{\"648\":1}}],[\"或者通过super去访问到父类中同名成员变量\",{\"1\":{\"553\":1}}],[\"或者有没有\",{\"1\":{\"551\":1}}],[\"或者其它的一些操作\",{\"1\":{\"540\":1}}],[\"或者其它容器\",{\"1\":{\"413\":2}}],[\"或者二维数组长度\",{\"1\":{\"438\":1}}],[\"或者换句话说\",{\"1\":{\"430\":1}}],[\"或者新增\",{\"1\":{\"421\":1}}],[\"或者兼容\",{\"1\":{\"382\":2}}],[\"或者就是一个布尔值\",{\"1\":{\"358\":1}}],[\"或者已经达到了最大的位数\",{\"1\":{\"336\":1}}],[\"或者成员域的值不能被改变\",{\"1\":{\"312\":1}}],[\"或者成员方法不能被覆盖\",{\"1\":{\"312\":1}}],[\"或者去chatgpt问\",{\"1\":{\"215\":1}}],[\"或者作为其他查询语句的一部分\",{\"1\":{\"184\":1}}],[\"或者想根据年龄进行排序\",{\"1\":{\"166\":1}}],[\"或者是删除指定的字符\",{\"1\":{\"268\":1}}],[\"或者是别名\",{\"1\":{\"259\":1}}],[\"或者是具有下列性质的二叉树\",{\"1\":{\"220\":1}}],[\"或者是数据库表中的数据很多\",{\"1\":{\"171\":1}}],[\"或者是聚合函数聚合起来的东西\",{\"1\":{\"167\":1}}],[\"或者是做分页上面\",{\"1\":{\"164\":1}}],[\"或者是某些列的不重复值\",{\"1\":{\"163\":1}}],[\"或者使用字符串的形式\",{\"1\":{\"153\":1}}],[\"或者班主任让大家填写信息的时候\",{\"1\":{\"141\":1}}],[\"或者看到请求使用的是http\",{\"1\":{\"116\":1}}],[\"或者查一下\",{\"1\":{\"116\":1}}],[\"或者\",{\"1\":{\"115\":1,\"346\":1,\"356\":1,\"480\":1,\"532\":2,\"937\":1,\"952\":1,\"956\":1,\"1013\":1,\"1016\":1}}],[\"或\",{\"1\":{\"36\":1,\"38\":1,\"162\":2,\"336\":1,\"348\":1,\"820\":1,\"1104\":1,\"1204\":1}}],[\"e4f8\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"errmsg\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":3}}],[\"errno\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":3}}],[\"error\",{\"1\":{\"442\":1,\"747\":1}}],[\"ejb\",{\"1\":{\"1077\":1}}],[\"edge\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"edg\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"edition\",{\"1\":{\"1077\":2,\"1078\":1}}],[\"edit\",{\"1\":{\"960\":1}}],[\"edu\",{\"1\":{\"220\":1}}],[\"e及其父类\",{\"1\":{\"944\":1}}],[\"e及其子类\",{\"1\":{\"944\":1}}],[\"e>\",{\"1\":{\"939\":1,\"953\":2,\"958\":1,\"963\":1,\"967\":1,\"978\":1,\"981\":1,\"984\":1,\"988\":1,\"992\":2}}],[\"ef\",{\"1\":{\"737\":2,\"738\":1}}],[\"eatmethod\",{\"1\":{\"922\":3}}],[\"eatmethod2\",{\"1\":{\"921\":4}}],[\"eatmethod1\",{\"1\":{\"921\":3}}],[\"eatfood\",{\"1\":{\"867\":4}}],[\"eat\",{\"1\":{\"469\":1,\"921\":3,\"922\":5}}],[\"eager关闭\",{\"1\":{\"283\":1}}],[\"equalsignorecase\",{\"1\":{\"736\":1}}],[\"equals比较时所用的信息没有被修改\",{\"1\":{\"682\":1}}],[\"equals默认实现\",{\"0\":{\"673\":1}}],[\"equals有相同\",{\"1\":{\"672\":1}}],[\"equals方法是object的方法\",{\"1\":{\"734\":1}}],[\"equals方法也是可以用快捷键自动生成的\",{\"1\":{\"675\":1}}],[\"equals方法仍然返回true\",{\"1\":{\"675\":1}}],[\"equals方法\",{\"0\":{\"670\":1}}],[\"equals和hashcode这两个方法\",{\"1\":{\"658\":1}}],[\"equalsandhashcode\",{\"1\":{\"262\":1}}],[\"equals\",{\"1\":{\"246\":1,\"262\":2,\"327\":1,\"652\":2,\"658\":3,\"671\":1,\"673\":1,\"674\":7,\"682\":2,\"698\":1,\"708\":1,\"734\":3,\"736\":1,\"776\":1,\"821\":1,\"825\":2,\"953\":1,\"956\":1,\"980\":1,\"981\":1,\"993\":1,\"997\":1,\"1009\":3,\"1016\":2,\"1018\":1,\"1023\":1,\"1028\":1,\"1036\":1,\"1037\":2,\"1040\":1,\"1045\":1,\"1085\":2,\"1116\":2,\"1130\":3,\"1148\":1,\"1159\":1}}],[\"ee方向\",{\"1\":{\"303\":1}}],[\"ee\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"232\":2,\"924\":1,\"1028\":1,\"1078\":2}}],[\"ello\",{\"1\":{\"735\":1}}],[\"else的执行\",{\"1\":{\"754\":1}}],[\"else的场景\",{\"1\":{\"266\":1}}],[\"else后面不能再加分支了\",{\"1\":{\"358\":1}}],[\"else从使用效果上来说\",{\"1\":{\"349\":1}}],[\"else\",{\"1\":{\"204\":3,\"266\":3,\"312\":1,\"358\":3,\"415\":1,\"440\":4,\"707\":1,\"737\":2,\"776\":1,\"844\":1,\"856\":1,\"857\":1,\"866\":3,\"867\":10,\"924\":1,\"1040\":2,\"1046\":1,\"1050\":1,\"1085\":1,\"1116\":1,\"1118\":2,\"1130\":2,\"1131\":1,\"1159\":2}}],[\"electrocar\",{\"1\":{\"599\":1}}],[\"electronically\",{\"1\":{\"141\":1}}],[\"elements\",{\"1\":{\"954\":1,\"978\":8}}],[\"elementdata就是底层用来存储数据的数组\",{\"1\":{\"954\":1}}],[\"elementdata\",{\"1\":{\"954\":9}}],[\"elementtype\",{\"1\":{\"924\":6,\"1086\":1}}],[\"element\",{\"1\":{\"5\":1,\"939\":1,\"941\":1,\"958\":3,\"968\":1,\"970\":1,\"972\":2,\"975\":1}}],[\"eg\",{\"1\":{\"162\":2,\"164\":1,\"167\":1,\"168\":6,\"246\":1}}],[\"emptyinterface\",{\"1\":{\"696\":3}}],[\"employer\",{\"1\":{\"517\":1}}],[\"email=\",{\"1\":{\"239\":1}}],[\"email\",{\"1\":{\"158\":2,\"234\":3,\"237\":2,\"239\":1,\"254\":2,\"255\":8,\"275\":2,\"276\":2,\"277\":4,\"1195\":2}}],[\"emc代表数据存储\",{\"1\":{\"143\":1}}],[\"emc\",{\"1\":{\"143\":1}}],[\"ec2\",{\"1\":{\"147\":2}}],[\"echarts\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"e\",{\"1\":{\"127\":8,\"203\":2,\"209\":2,\"213\":6,\"214\":2,\"234\":2,\"244\":2,\"307\":1,\"729\":1,\"754\":2,\"767\":2,\"768\":1,\"789\":12,\"825\":4,\"832\":2,\"839\":4,\"840\":2,\"842\":4,\"844\":8,\"851\":2,\"855\":2,\"856\":4,\"857\":4,\"859\":4,\"860\":4,\"864\":2,\"867\":8,\"870\":4,\"871\":4,\"872\":12,\"895\":6,\"903\":2,\"923\":2,\"924\":2,\"939\":5,\"941\":6,\"942\":2,\"944\":4,\"953\":4,\"955\":2,\"956\":4,\"958\":5,\"959\":6,\"968\":24,\"972\":11,\"975\":31,\"978\":4,\"981\":2,\"993\":6}}],[\"exchange\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"exception作为编译时异常\",{\"1\":{\"747\":1}}],[\"exception是编译时异常和运行时异常的父类\",{\"1\":{\"747\":1}}],[\"exception是运行时异常还是编译时异常\",{\"1\":{\"747\":1}}],[\"exception\",{\"0\":{\"296\":1},\"1\":{\"203\":2,\"209\":1,\"214\":1,\"296\":1,\"747\":1,\"764\":1,\"789\":2,\"880\":2,\"881\":2,\"895\":2,\"902\":2,\"903\":2,\"904\":2,\"905\":2,\"920\":1,\"921\":1,\"922\":2,\"924\":1,\"1109\":1}}],[\"excel也可以存储\",{\"1\":{\"141\":1}}],[\"ext\",{\"1\":{\"912\":1}}],[\"extension\",{\"1\":{\"912\":1}}],[\"extends后面跟一个类名\",{\"1\":{\"532\":1}}],[\"extends\",{\"0\":{\"599\":1},\"1\":{\"213\":1,\"312\":1,\"520\":1,\"539\":1,\"545\":2,\"553\":2,\"564\":1,\"585\":2,\"588\":2,\"590\":2,\"594\":3,\"595\":2,\"596\":1,\"598\":1,\"599\":2,\"606\":1,\"719\":1,\"764\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"884\":1,\"916\":1,\"923\":1,\"939\":3,\"940\":12,\"944\":3,\"953\":2,\"958\":1,\"959\":1,\"963\":1,\"967\":1,\"978\":1,\"981\":1,\"984\":1,\"988\":1,\"992\":1,\"997\":2,\"1017\":2,\"1018\":2,\"1022\":2,\"1023\":2,\"1025\":3,\"1026\":2,\"1040\":1,\"1078\":1,\"1085\":3,\"1088\":1,\"1093\":3,\"1094\":1,\"1095\":1,\"1096\":3,\"1107\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1116\":1,\"1117\":1,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":2,\"1132\":3,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1152\":2,\"1159\":3}}],[\"exit\",{\"1\":{\"760\":1}}],[\"exists\",{\"1\":{\"127\":1,\"180\":2,\"232\":1,\"261\":1,\"275\":2,\"278\":2,\"281\":3,\"769\":4,\"771\":4,\"774\":1}}],[\"ex5\",{\"1\":{\"739\":1}}],[\"ex4\",{\"1\":{\"738\":1}}],[\"ex3\",{\"1\":{\"738\":1,\"777\":1}}],[\"ex2\",{\"1\":{\"737\":1,\"776\":1}}],[\"ex1\",{\"1\":{\"737\":1}}],[\"exe命令来运行某个主类\",{\"1\":{\"914\":1}}],[\"exerciseblock\",{\"1\":{\"498\":1}}],[\"exe\",{\"1\":{\"304\":2,\"784\":1}}],[\"executionexception\",{\"1\":{\"880\":1,\"881\":4}}],[\"executing\",{\"1\":{\"201\":1}}],[\"executorservice\",{\"1\":{\"880\":6,\"903\":2}}],[\"executorservices\",{\"1\":{\"880\":1}}],[\"executors\",{\"1\":{\"880\":4,\"903\":2}}],[\"executemap\",{\"1\":{\"1116\":2}}],[\"executebatch\",{\"1\":{\"206\":1,\"207\":1}}],[\"execute\",{\"1\":{\"201\":1}}],[\"executequerybyconnection\",{\"1\":{\"214\":2}}],[\"executequery\",{\"1\":{\"197\":1,\"201\":1,\"204\":2,\"214\":3,\"234\":1}}],[\"executeupdate\",{\"1\":{\"192\":1,\"194\":1,\"195\":2,\"196\":1,\"201\":1,\"205\":1,\"209\":2}}],[\"example01\",{\"1\":{\"316\":1}}],[\"example\",{\"1\":{\"246\":2,\"953\":1}}],[\"examplelogprefix\",{\"1\":{\"246\":1}}],[\"expired\",{\"1\":{\"1147\":1}}],[\"expires=sun\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"expires\",{\"1\":{\"121\":1}}],[\"expf2zlrpdsw91\",{\"1\":{\"1132\":1}}],[\"exploded\",{\"1\":{\"1084\":1}}],[\"explain\",{\"1\":{\"232\":1}}],[\"expression\",{\"1\":{\"342\":1,\"359\":2}}],[\"ex\",{\"1\":{\"203\":4,\"739\":1,\"776\":1,\"838\":1,\"872\":1,\"881\":1}}],[\"etc\",{\"1\":{\"113\":1}}],[\"enterprise\",{\"1\":{\"1077\":2,\"1078\":1}}],[\"entryset\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"entry<k\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":9}}],[\"entry\",{\"1\":{\"997\":1}}],[\"ensurecapacity\",{\"1\":{\"964\":1}}],[\"encode\",{\"1\":{\"1148\":1}}],[\"encoding=\",{\"1\":{\"136\":1,\"139\":1,\"234\":2,\"244\":1,\"1083\":1,\"1097\":1}}],[\"encoding\",{\"1\":{\"116\":1,\"121\":1,\"139\":1,\"318\":1,\"1104\":1,\"1105\":2,\"1110\":1,\"1112\":3,\"1113\":1,\"1120\":1,\"1121\":2,\"1132\":3,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"enctype=\",{\"1\":{\"1104\":1,\"1120\":1}}],[\"encapsulate\",{\"1\":{\"515\":1}}],[\"enum<weekdaynum>\",{\"1\":{\"719\":1}}],[\"enum是枚举定义关键字\",{\"1\":{\"717\":1}}],[\"enumeration<string>\",{\"1\":{\"1112\":3,\"1117\":2}}],[\"enumeration\",{\"1\":{\"713\":1}}],[\"enum\",{\"1\":{\"312\":1,\"717\":2,\"719\":9,\"720\":1,\"1028\":1}}],[\"enumtypehandler\",{\"1\":{\"246\":1}}],[\"enable\",{\"1\":{\"262\":1}}],[\"environment\",{\"1\":{\"304\":1}}],[\"environments\",{\"0\":{\"248\":1},\"1\":{\"248\":1}}],[\"environments>\",{\"1\":{\"234\":1,\"244\":1,\"248\":1}}],[\"environment>\",{\"1\":{\"234\":1,\"244\":1,\"248\":3}}],[\"engine=innodb\",{\"1\":{\"225\":1,\"229\":1,\"232\":1}}],[\"engine=myisam\",{\"1\":{\"222\":1}}],[\"english\",{\"1\":{\"161\":1,\"162\":11,\"163\":3,\"165\":1,\"167\":3,\"168\":12}}],[\"en\",{\"1\":{\"115\":1,\"116\":2,\"234\":2,\"244\":1,\"1104\":3,\"1110\":3,\"1112\":6,\"1120\":3,\"1132\":3,\"1138\":3,\"1140\":3,\"1150\":3}}],[\"endswith\",{\"1\":{\"736\":1,\"776\":1,\"777\":3}}],[\"end=arr\",{\"1\":{\"419\":1}}],[\"end\",{\"1\":{\"74\":3,\"127\":2,\"419\":3,\"655\":5,\"700\":3,\"737\":2,\"741\":2,\"743\":4,\"832\":3,\"833\":4,\"839\":1,\"840\":3,\"842\":1,\"905\":2}}],[\"enhance\",{\"1\":{\"56\":1}}],[\"e=>end\",{\"1\":{\"73\":1}}],[\"esc\",{\"1\":{\"36\":1}}],[\"+无穷\",{\"1\":{\"1040\":2}}],[\"+msg\",{\"1\":{\"894\":2}}],[\"+receivepacket\",{\"1\":{\"894\":2,\"895\":1}}],[\"+food\",{\"1\":{\"867\":2}}],[\"+i\",{\"1\":{\"833\":2,\"838\":1,\"841\":1,\"842\":2,\"844\":2,\"872\":2,\"880\":1}}],[\"+i+\",{\"1\":{\"205\":1,\"206\":1}}],[\"+newstr\",{\"1\":{\"739\":1}}],[\"+lowercount\",{\"1\":{\"737\":1}}],[\"+uppercount\",{\"1\":{\"737\":1}}],[\"+username+\",{\"1\":{\"204\":1}}],[\"+digitalcount\",{\"1\":{\"737\":1}}],[\"+skillr+\",{\"1\":{\"469\":1}}],[\"+y\",{\"1\":{\"359\":2}}],[\"+=\",{\"1\":{\"345\":3,\"472\":3,\"474\":3,\"738\":1,\"739\":1,\"741\":1,\"978\":1}}],[\"++size\",{\"1\":{\"1006\":1}}],[\"++x\",{\"1\":{\"344\":1}}],[\"++a\",{\"1\":{\"344\":1}}],[\"++\",{\"1\":{\"344\":2}}],[\"+password+\",{\"1\":{\"204\":1}}],[\"+12\",{\"1\":{\"1012\":1}}],[\"+100的结果\",{\"1\":{\"881\":2}}],[\"+100\",{\"1\":{\"362\":1}}],[\"+1\",{\"1\":{\"125\":1,\"978\":1}}],[\"+\",{\"1\":{\"34\":2,\"75\":1,\"125\":1,\"127\":2,\"162\":19,\"165\":2,\"168\":6,\"192\":5,\"197\":4,\"198\":1,\"209\":5,\"214\":4,\"248\":1,\"304\":2,\"307\":1,\"324\":1,\"340\":15,\"341\":2,\"342\":6,\"344\":3,\"345\":3,\"350\":4,\"358\":1,\"382\":1,\"383\":2,\"415\":2,\"440\":7,\"441\":4,\"442\":2,\"453\":2,\"459\":6,\"465\":4,\"466\":1,\"469\":18,\"472\":4,\"474\":8,\"478\":2,\"498\":3,\"499\":2,\"504\":1,\"517\":5,\"518\":1,\"523\":2,\"526\":1,\"540\":2,\"551\":1,\"557\":1,\"562\":1,\"573\":3,\"594\":11,\"598\":1,\"653\":1,\"655\":3,\"667\":4,\"668\":10,\"669\":5,\"675\":1,\"683\":1,\"700\":1,\"704\":7,\"706\":1,\"715\":6,\"717\":6,\"720\":3,\"729\":5,\"730\":4,\"735\":3,\"737\":6,\"738\":7,\"739\":2,\"740\":8,\"741\":8,\"743\":3,\"764\":1,\"769\":1,\"771\":1,\"794\":1,\"808\":1,\"821\":1,\"824\":8,\"833\":2,\"838\":3,\"841\":1,\"842\":2,\"844\":2,\"851\":3,\"855\":3,\"856\":6,\"857\":6,\"864\":3,\"867\":18,\"872\":2,\"880\":1,\"881\":3,\"892\":1,\"894\":2,\"895\":2,\"903\":5,\"904\":6,\"922\":14,\"944\":3,\"948\":2,\"978\":17,\"997\":1,\"1013\":6,\"1026\":1,\"1046\":1,\"1050\":5,\"1095\":2,\"1096\":3,\"1097\":2,\"1112\":3,\"1115\":7,\"1116\":1,\"1117\":3,\"1118\":1,\"1119\":1,\"1130\":1,\"1131\":2,\"1132\":1,\"1142\":1,\"1143\":2,\"1152\":2,\"1159\":2}}],[\"xn1111\",{\"1\":{\"1132\":2}}],[\"xڭ\",{\"1\":{\"1120\":1}}],[\"xhtml+xml\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"x64\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"xsd\",{\"1\":{\"1097\":1}}],[\"xsi\",{\"1\":{\"1097\":1}}],[\"xsi=\",{\"1\":{\"1097\":1}}],[\"x或x+len\",{\"1\":{\"1016\":1}}],[\"x位置\",{\"1\":{\"1013\":1}}],[\"x+oldcapacity\",{\"1\":{\"1016\":1}}],[\"x+16\",{\"1\":{\"1013\":1}}],[\"x++\",{\"1\":{\"344\":1,\"415\":2,\"418\":2,\"419\":1}}],[\"x是无限的\",{\"1\":{\"999\":1}}],[\"xms500m\",{\"1\":{\"960\":2}}],[\"xms200m\",{\"1\":{\"925\":1}}],[\"xmx500m\",{\"1\":{\"960\":2}}],[\"xmx300m\",{\"1\":{\"925\":1}}],[\"xmlschema\",{\"1\":{\"1097\":1}}],[\"xmlns\",{\"1\":{\"1097\":4}}],[\"xmlns=\",{\"1\":{\"1097\":1}}],[\"xml里面\",{\"1\":{\"263\":1}}],[\"xml里面就怎么写\",{\"1\":{\"250\":1}}],[\"xml的标签中\",{\"1\":{\"260\":1}}],[\"xml的名称\",{\"1\":{\"136\":1}}],[\"xml就怎么写\",{\"1\":{\"251\":1}}],[\"xml中\",{\"1\":{\"276\":2}}],[\"xml中写\",{\"1\":{\"251\":1}}],[\"xml中就怎么写\",{\"1\":{\"250\":1,\"251\":1}}],[\"xml中的namespace\",{\"1\":{\"244\":1}}],[\"xml中的namespace的值保持一致\",{\"1\":{\"235\":1}}],[\"xml中的内容\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"xmllanguagedriver\",{\"1\":{\"246\":1}}],[\"xmltags\",{\"1\":{\"246\":1}}],[\"xml配置文件引入到主配置文件中\",{\"1\":{\"244\":1}}],[\"xml配置文件\",{\"1\":{\"244\":1,\"249\":1}}],[\"xml文件中的内容\",{\"1\":{\"1083\":1}}],[\"xml文件中的标签\",{\"1\":{\"263\":1}}],[\"xml文件中的\",{\"1\":{\"235\":1}}],[\"xml文件中有配置\",{\"1\":{\"139\":1}}],[\"xml文件\",{\"1\":{\"215\":1,\"276\":2,\"279\":1,\"1099\":1}}],[\"xml文件的名称\",{\"1\":{\"136\":1}}],[\"xml可以在这里修改tomcat的端口\",{\"1\":{\"139\":1}}],[\"xml\",{\"0\":{\"137\":1,\"1079\":1},\"1\":{\"136\":3,\"138\":1,\"139\":5,\"215\":1,\"234\":7,\"235\":2,\"244\":8,\"249\":3,\"263\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":2,\"286\":1,\"918\":1,\"1078\":1,\"1080\":1,\"1083\":1,\"1097\":4,\"1098\":1,\"1100\":1,\"1110\":1,\"1112\":1,\"1120\":1,\"1131\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"xiaomi\",{\"1\":{\"575\":1}}],[\"xx\",{\"1\":{\"516\":2,\"1028\":1}}],[\"xxx或\",{\"1\":{\"1090\":1}}],[\"xxxx\",{\"1\":{\"789\":1}}],[\"xxxxxx\",{\"1\":{\"789\":1}}],[\"xxxxxxx\",{\"1\":{\"754\":1}}],[\"xxx是变量名\",{\"1\":{\"518\":1}}],[\"xxx表示成员变量名\",{\"1\":{\"516\":1}}],[\"xxx\",{\"1\":{\"113\":4,\"204\":10,\"318\":1,\"475\":1,\"1090\":2,\"1109\":1,\"1130\":1,\"1195\":1,\"1203\":1}}],[\"x=1\",{\"1\":{\"418\":2}}],[\"x=0\",{\"1\":{\"415\":2,\"419\":1}}],[\"x<arr\",{\"1\":{\"415\":2,\"418\":2,\"419\":1}}],[\"x<=\",{\"1\":{\"358\":1}}],[\"x>=3时\",{\"1\":{\"358\":1}}],[\"xaxis\",{\"1\":{\"72\":1}}],[\"x\",{\"1\":{\"34\":2,\"64\":1,\"71\":5,\"344\":2,\"352\":1,\"359\":4,\"415\":4,\"418\":4,\"419\":4,\"655\":7,\"674\":9,\"698\":6,\"999\":4,\"1000\":1,\"1013\":9,\"1016\":1,\"1113\":1,\"1132\":1}}],[\"功能上和urlpatterns其实是一样的\",{\"1\":{\"1087\":1}}],[\"功能内部能够处理的就处理\",{\"1\":{\"759\":1}}],[\"功能没有实现\",{\"1\":{\"687\":1}}],[\"功能接口案例\",{\"1\":{\"654\":1}}],[\"功能接口准备完毕后\",{\"1\":{\"653\":1}}],[\"功能接口指的是\",{\"1\":{\"652\":1}}],[\"功能接口不仅有一个抽象方法\",{\"1\":{\"652\":1}}],[\"功能接口中被实现方法的第一个参数作为调用者\",{\"1\":{\"655\":1}}],[\"功能接口中被实现方法的全部参数传给该构造器作为参数\",{\"1\":{\"655\":1}}],[\"功能接口中被实现方法的全部参数传给该成员方法作为参数\",{\"1\":{\"655\":1}}],[\"功能接口中被实现方法的全部参数传给该类静态方法作为参数\",{\"1\":{\"655\":1}}],[\"功能接口中可以允许有它们存在\",{\"1\":{\"652\":1}}],[\"功能接口中只能有一个抽象方法吗\",{\"1\":{\"652\":1}}],[\"功能接口中只能有一个方法吗\",{\"1\":{\"652\":1}}],[\"功能接口在语法上\",{\"1\":{\"652\":1}}],[\"功能接口\",{\"1\":{\"652\":1}}],[\"功能十分丰富\",{\"1\":{\"580\":1}}],[\"功能足够强大了\",{\"1\":{\"566\":1}}],[\"功能强\",{\"1\":{\"143\":1}}],[\"功能\",{\"0\":{\"32\":1,\"33\":1,\"35\":1,\"37\":1,\"39\":1},\"1\":{\"936\":2}}],[\"可存储重复元素\",{\"1\":{\"974\":1}}],[\"可存储null\",{\"1\":{\"969\":1}}],[\"可重复\",{\"1\":{\"969\":1}}],[\"可重复读\",{\"1\":{\"212\":2}}],[\"可重复读是指\",{\"1\":{\"211\":1}}],[\"可在容器对象\",{\"1\":{\"955\":1}}],[\"可读性怎么样\",{\"1\":{\"1053\":1}}],[\"可读性更强\",{\"1\":{\"938\":1}}],[\"可读性很差\",{\"1\":{\"344\":1,\"1053\":1}}],[\"可维护性和安全性\",{\"1\":{\"938\":1}}],[\"可维护性更强\",{\"1\":{\"519\":1}}],[\"可配置\",{\"1\":{\"924\":1}}],[\"可谓千差万别\",{\"1\":{\"924\":1}}],[\"可谓是改了又改\",{\"1\":{\"721\":1}}],[\"可使用\",{\"1\":{\"923\":1}}],[\"可使用指定的\",{\"1\":{\"806\":1}}],[\"可暴力破解\",{\"1\":{\"920\":1}}],[\"可保存在流中或从流中加载\",{\"1\":{\"918\":1}}],[\"可安排任务执行一次\",{\"1\":{\"883\":1}}],[\"可用于修类\",{\"1\":{\"924\":1}}],[\"可用\",{\"1\":{\"859\":1}}],[\"可变长度来表示一个字符\",{\"1\":{\"799\":1}}],[\"可变参数的三个点位于数据类型和变量名之间\",{\"1\":{\"422\":1}}],[\"可变参数用于形参列表中\",{\"1\":{\"422\":1}}],[\"可变参数适用于\",{\"1\":{\"421\":1}}],[\"可惜现实是很骨感的\",{\"1\":{\"689\":1}}],[\"可根据id查询或者根据商品名称查询\",{\"1\":{\"601\":1}}],[\"可行吗\",{\"1\":{\"595\":1}}],[\"可靠性\",{\"1\":{\"191\":1,\"213\":1}}],[\"可靠性好的\",{\"1\":{\"143\":1}}],[\"可移植性\",{\"1\":{\"191\":1}}],[\"可移植的方式来访问数据库\",{\"1\":{\"191\":1}}],[\"可比较null\",{\"1\":{\"162\":1}}],[\"可选持久性的键值对\",{\"1\":{\"144\":1}}],[\"可基于内存\",{\"1\":{\"144\":1}}],[\"可支持从大型计算机到单用户环境\",{\"1\":{\"143\":1}}],[\"可不可以部署呢\",{\"1\":{\"135\":1}}],[\"可能就扩容了\",{\"1\":{\"1012\":1}}],[\"可能就会产生问题\",{\"1\":{\"689\":1}}],[\"可能很多时候我们并不能确定某一个参数的具体类型\",{\"1\":{\"937\":1}}],[\"可能很多同学\",{\"1\":{\"595\":1}}],[\"可能转错\",{\"1\":{\"936\":1}}],[\"可能出现异常的代码\",{\"1\":{\"752\":2,\"754\":1,\"789\":1}}],[\"可能存在一些特殊的机制\",{\"1\":{\"548\":1}}],[\"可能是未来高端的编程趋势\",{\"1\":{\"657\":1}}],[\"可能是this\",{\"1\":{\"546\":1}}],[\"可能是如下\",{\"1\":{\"430\":1}}],[\"可能完全和\",{\"1\":{\"533\":1}}],[\"可能有多个x\",{\"1\":{\"999\":1}}],[\"可能有问题\",{\"1\":{\"797\":1}}],[\"可能有错\",{\"1\":{\"442\":1}}],[\"可能有一个结果\",{\"1\":{\"413\":1}}],[\"可能已经发现了\",{\"1\":{\"431\":1}}],[\"可能会oom\",{\"1\":{\"960\":1}}],[\"可能会偶尔见到它\",{\"1\":{\"600\":1}}],[\"可能会出现classcastexception\",{\"1\":{\"529\":1}}],[\"可能会出现包名错乱的情况\",{\"1\":{\"499\":1}}],[\"可能会出现问题\",{\"1\":{\"211\":1}}],[\"可能会指向null的引用\",{\"1\":{\"412\":1}}],[\"可能会导致扩容\",{\"1\":{\"1016\":1}}],[\"可能会导致电脑死机\",{\"1\":{\"960\":1}}],[\"可能会导致内存溢出的风险\",{\"1\":{\"954\":1}}],[\"可能会导致a账户的钱扣了\",{\"1\":{\"208\":1}}],[\"可能会导致乱码\",{\"1\":{\"121\":1}}],[\"可能会改变sql语句的格式\",{\"1\":{\"204\":1}}],[\"可能能看到你的密码\",{\"1\":{\"147\":1}}],[\"可能需要1w台\",{\"1\":{\"126\":1}}],[\"可能报文在中途已经被篡改\",{\"1\":{\"125\":1}}],[\"可能的值\",{\"1\":{\"29\":1}}],[\"可以添加小组全部成员\",{\"1\":{\"1200\":1}}],[\"可以注册后自行设置\",{\"1\":{\"1190\":1}}],[\"可以回退\",{\"1\":{\"1183\":1}}],[\"可以记录和追踪\",{\"1\":{\"1183\":1}}],[\"可以很轻松的实现多台主机\",{\"1\":{\"1149\":1}}],[\"可以携带多组键值对信息\",{\"1\":{\"1138\":1}}],[\"可以啊\",{\"1\":{\"1137\":4}}],[\"可以object或map\",{\"1\":{\"1132\":1}}],[\"可以设置响应头的key和value\",{\"1\":{\"1123\":1}}],[\"可以读取字节数据将其保存下来\",{\"1\":{\"1120\":1}}],[\"可以知道有哪一些请求头\",{\"1\":{\"1112\":1}}],[\"可以先获得构造器\",{\"1\":{\"1108\":1}}],[\"可以获得这个成员变量\",{\"1\":{\"1094\":1}}],[\"可以获取队列头部或尾部的元素\",{\"1\":{\"973\":1}}],[\"可以代表多级的任意url\",{\"1\":{\"1090\":1}}],[\"可以转换以下\",{\"1\":{\"1005\":1}}],[\"可以说不知道\",{\"1\":{\"1003\":1}}],[\"可以说oracle数据库系统是世界上流行的关系数据库管理系统\",{\"1\":{\"143\":1}}],[\"可以快速获取一个值\",{\"1\":{\"995\":1}}],[\"可以方便地操作其中的元素\",{\"1\":{\"961\":1,\"965\":1}}],[\"可以动态地添加\",{\"1\":{\"961\":1}}],[\"可以针对当前代码\",{\"1\":{\"960\":1}}],[\"可以返回index\",{\"1\":{\"959\":1}}],[\"可以返回该类的对象或者该类的子类对象\",{\"1\":{\"604\":1}}],[\"可以一次容纳多个对象\",{\"1\":{\"950\":1}}],[\"可以一致或宽松\",{\"1\":{\"563\":1}}],[\"可以是人\",{\"1\":{\"950\":1}}],[\"可以是以下的\",{\"1\":{\"944\":1}}],[\"可以是任意的对象\",{\"1\":{\"855\":1}}],[\"可以这样子理解\",{\"1\":{\"1110\":1}}],[\"可以这样使用吗\",{\"1\":{\"944\":1}}],[\"可以这么算\",{\"1\":{\"348\":2}}],[\"可以适应不同类型的数据结构和对象\",{\"1\":{\"941\":1}}],[\"可以适应不同类型的数据结构或对象\",{\"1\":{\"941\":1}}],[\"可以完成功能\",{\"1\":{\"936\":1}}],[\"可以作用的目标\",{\"1\":{\"924\":1}}],[\"可以参考一篇网络博客\",{\"1\":{\"908\":1}}],[\"可以做到应用之间的数据共享\",{\"1\":{\"1145\":1}}],[\"可以做到同时发生\",{\"1\":{\"825\":1}}],[\"可以做\",{\"1\":{\"1092\":1}}],[\"可以做一些操作\",{\"1\":{\"696\":2}}],[\"可以做一定的代码提示\",{\"1\":{\"263\":1}}],[\"可以操作文件的流\",{\"1\":{\"820\":1}}],[\"可以操作任意类型的数据\",{\"1\":{\"820\":1}}],[\"可以由方法体内的语句处理\",{\"1\":{\"758\":1}}],[\"可以跟多个异常类名\",{\"1\":{\"758\":1}}],[\"可以填入字符\",{\"1\":{\"737\":2}}],[\"可以允许传入子类对象\",{\"1\":{\"675\":1}}],[\"可以允许的数据类型有\",{\"1\":{\"359\":1}}],[\"可以任意访问\",{\"1\":{\"660\":1}}],[\"可以指定缓冲区的大小\",{\"1\":{\"808\":1,\"814\":1}}],[\"可以指定插入列\",{\"1\":{\"158\":1}}],[\"可以指向源码中的方法或者第三方工具的方法\",{\"1\":{\"655\":1}}],[\"可以借助方法的形参的数据类型完成类型推断\",{\"1\":{\"653\":1}}],[\"可以借助方法的返回值数据类型完成类型推断\",{\"1\":{\"653\":1}}],[\"可以借鉴\",{\"1\":{\"596\":1}}],[\"可以取代接口的匿名内部类\",{\"1\":{\"651\":1}}],[\"可以简化赋值\",{\"1\":{\"924\":1}}],[\"可以简化代码书写\",{\"1\":{\"649\":1}}],[\"可以简单看成是一种存储键值对key\",{\"1\":{\"680\":1}}],[\"可以简写为下面格式\",{\"1\":{\"434\":1}}],[\"可以访问子类独有的成员\",{\"1\":{\"648\":1}}],[\"可以创建一个分支来解决某个bug\",{\"1\":{\"1204\":1}}],[\"可以创建一个数组装他们的成绩\",{\"1\":{\"429\":1}}],[\"可以创建多个成员内部类继承外部多个类\",{\"1\":{\"643\":1}}],[\"可以近似的看成是一个computer类的成员\",{\"1\":{\"607\":1}}],[\"可以重写父接口中的抽象方法和默认方法\",{\"1\":{\"598\":1}}],[\"可以重写从父类继承过来的方法的访问权限\",{\"1\":{\"537\":1}}],[\"可以定义普通成员变量\",{\"1\":{\"612\":1}}],[\"可以定义抽象方法\",{\"1\":{\"598\":1}}],[\"可以定义全局常量\",{\"1\":{\"598\":1}}],[\"可以定义方法\",{\"1\":{\"598\":1}}],[\"可以定义\",{\"1\":{\"598\":1}}],[\"可以称呼接口为\",{\"1\":{\"596\":1}}],[\"可以强制约束子类实现它\",{\"1\":{\"595\":1}}],[\"可以调用父类的构造方法给父类的成员变量赋值\",{\"1\":{\"592\":1}}],[\"可以向上转型到形参数据类型\",{\"1\":{\"584\":1}}],[\"可以修饰类\",{\"1\":{\"760\":1}}],[\"可以修饰基本数据类型变量\",{\"1\":{\"568\":1}}],[\"可以修饰\",{\"1\":{\"567\":2}}],[\"可以保持一致\",{\"1\":{\"561\":1}}],[\"可以更为宽松\",{\"1\":{\"561\":1}}],[\"可以有多次中间操作\",{\"1\":{\"1036\":1}}],[\"可以有多个x与之对应\",{\"1\":{\"999\":1}}],[\"可以有静态全局常量\",{\"1\":{\"612\":1}}],[\"可以有三种方式\",{\"1\":{\"549\":1,\"556\":1}}],[\"可以有两种写法\",{\"1\":{\"158\":1}}],[\"可以随意访问\",{\"1\":{\"538\":1}}],[\"可以对数据进行验证\",{\"1\":{\"515\":1}}],[\"可以唯一的\",{\"1\":{\"500\":1}}],[\"可以分为\",{\"1\":{\"484\":1}}],[\"可以把仓库设置成公开仓库\",{\"1\":{\"1200\":1}}],[\"可以把它理解为镜子\",{\"1\":{\"960\":1}}],[\"可以把它当做用户线程的奴仆\",{\"1\":{\"842\":1}}],[\"可以把它声明为static修饰的静态成员方法\",{\"1\":{\"478\":1}}],[\"可以把子类也设置为抽象类\",{\"1\":{\"592\":1}}],[\"可以把这个表拆成一个小表+另一个大表\",{\"1\":{\"172\":1}}],[\"可以按照参数个数的多少去排列\",{\"1\":{\"469\":1}}],[\"可以显式地\",{\"1\":{\"520\":1}}],[\"可以显著增加代码可读性\",{\"1\":{\"461\":1}}],[\"可以显示一下语文总分\",{\"1\":{\"168\":1}}],[\"可以显示出一个页面\",{\"1\":{\"139\":1}}],[\"可以改变引用数据类型中对象里的数据\",{\"1\":{\"427\":1}}],[\"可以用作栈或队列来进行数据操作\",{\"1\":{\"973\":1}}],[\"可以用源码的方法或者第三方工具类的方法\",{\"1\":{\"656\":1}}],[\"可以用多次\",{\"1\":{\"648\":1}}],[\"可以用private\",{\"1\":{\"643\":1}}],[\"可以用内部类\",{\"1\":{\"632\":1}}],[\"可以用数组的形式存储新的产品信息\",{\"1\":{\"601\":1}}],[\"可以用super区分\",{\"1\":{\"544\":1}}],[\"可以用\",{\"1\":{\"461\":1,\"648\":1,\"1053\":1,\"1201\":1}}],[\"可以用存放元素\",{\"1\":{\"420\":1}}],[\"可以用来唯一确定一台主机\",{\"1\":{\"885\":1}}],[\"可以用来修饰\",{\"1\":{\"565\":1}}],[\"可以用来统计和分析海量数据\",{\"1\":{\"303\":1}}],[\"可以用来控制事务和事务之间的隔离性\",{\"1\":{\"211\":1}}],[\"可以用来大量放置数据的地方\",{\"1\":{\"118\":1}}],[\"可以用来指代网络中的一台计算机主机\",{\"1\":{\"113\":1}}],[\"可以打印数组引用\",{\"1\":{\"408\":1}}],[\"可以打印出具体值\",{\"1\":{\"408\":1}}],[\"可以认为相当于\",{\"1\":{\"924\":1}}],[\"可以认为默认初始化是jvm在创建对象的内存结构时\",{\"1\":{\"458\":1}}],[\"可以认为是经过初始化的\",{\"1\":{\"413\":1}}],[\"可以认为是该数组对象的内存地址空间\",{\"1\":{\"400\":1}}],[\"可以认为引用指向了虚无\",{\"1\":{\"407\":1}}],[\"可以得到类似于\",{\"1\":{\"400\":1}}],[\"可以单独使用\",{\"1\":{\"397\":1}}],[\"可以发现很多格式二的使用案例\",{\"1\":{\"395\":1}}],[\"可以直观的看到这个数组是一个什么数据类型的数组\",{\"1\":{\"395\":1}}],[\"可以直接输入对应的key\",{\"1\":{\"1112\":1}}],[\"可以直接访问的资源\",{\"1\":{\"1098\":1}}],[\"可以直接跳过\",{\"1\":{\"1020\":1}}],[\"可以直接套用过来\",{\"1\":{\"649\":1}}],[\"可以直接在后面调用方法\",{\"1\":{\"648\":1}}],[\"可以直接在局部内部类的成员方法中\",{\"1\":{\"639\":1}}],[\"可以直接将上述语法直接写在if判断中\",{\"1\":{\"586\":1}}],[\"可以直接通过类名访问\",{\"1\":{\"474\":1}}],[\"可以直接引入这个公用sql\",{\"1\":{\"267\":1}}],[\"可以直接使用newinstance方法\",{\"1\":{\"1108\":1}}],[\"可以直接使用object类中的实现\",{\"1\":{\"652\":1}}],[\"可以直接使用快捷键alt\",{\"1\":{\"518\":1}}],[\"可以直接使用\",{\"1\":{\"264\":1,\"608\":1}}],[\"可以直接运行\",{\"1\":{\"155\":1}}],[\"可以存储null\",{\"1\":{\"957\":1,\"962\":1,\"966\":1}}],[\"可以存储重复元素\",{\"1\":{\"957\":1,\"962\":1,\"966\":1}}],[\"可以存储基本数据类型元素\",{\"1\":{\"393\":1}}],[\"可以存储这种关联\",{\"1\":{\"143\":1}}],[\"可以构成方法重载\",{\"1\":{\"388\":3}}],[\"可以具有相同的方法名\",{\"1\":{\"388\":1}}],[\"可以传入不同的数据\",{\"1\":{\"380\":1}}],[\"可以控制java当中的循环体代码重复执行\",{\"1\":{\"375\":1}}],[\"可以多多练习\",{\"1\":{\"370\":1}}],[\"可以统一用字符串接收数值类型\",{\"1\":{\"353\":1}}],[\"可以继续往下看学习其中的原因\",{\"1\":{\"352\":1}}],[\"可以总结出以下规律\",{\"1\":{\"341\":1}}],[\"可以运行相同的java程序\",{\"1\":{\"309\":1}}],[\"可以运行一下这个命令\",{\"1\":{\"171\":1}}],[\"可以自己尝试来做一下\",{\"1\":{\"1159\":1}}],[\"可以自己写\",{\"1\":{\"656\":1}}],[\"可以自动类型转换到形参数据类型\",{\"1\":{\"584\":1}}],[\"可以自动类型转换成形参的数据类型\",{\"1\":{\"384\":1}}],[\"可以自动拼接where关键字\",{\"1\":{\"264\":1}}],[\"可以自行百度配置一下\",{\"1\":{\"307\":1}}],[\"可以了解一下的是\",{\"1\":{\"303\":1}}],[\"可以提升哈希表性能\",{\"1\":{\"682\":1}}],[\"可以提升内存利用率\",{\"1\":{\"482\":1}}],[\"可以提高效率\",{\"1\":{\"1012\":1}}],[\"可以提高程序的灵活性\",{\"1\":{\"351\":1}}],[\"可以提高系统的性能\",{\"1\":{\"213\":1}}],[\"可以提取公共的sql片段\",{\"1\":{\"267\":1}}],[\"可以将下标对数组长度取模\",{\"1\":{\"976\":1}}],[\"可以将其合并到主分支或其他分支上\",{\"1\":{\"1204\":1}}],[\"可以将其视为一种对话\",{\"1\":{\"908\":1}}],[\"可以将其声明为抽象方法\",{\"1\":{\"590\":1}}],[\"可以将循环控制语句\",{\"1\":{\"362\":1}}],[\"可以将这些表\",{\"1\":{\"256\":1}}],[\"可以将本地的资源发布到网络中\",{\"1\":{\"126\":1}}],[\"可以防止sql注入\",{\"1\":{\"255\":1}}],[\"可以写多级的url\",{\"1\":{\"1090\":1}}],[\"可以写语句\",{\"1\":{\"464\":1}}],[\"可以写class\",{\"1\":{\"249\":1}}],[\"可以写url\",{\"1\":{\"249\":1}}],[\"可以写resource\",{\"1\":{\"249\":1}}],[\"可以配置成适应多种环境\",{\"1\":{\"248\":1}}],[\"可以让我们忽略一些文件\",{\"1\":{\"1203\":1}}],[\"可以让我们对分组后的各组数据过滤\",{\"1\":{\"167\":1}}],[\"可以让使用者显式的检查值存在或者不存在\",{\"1\":{\"1046\":1}}],[\"可以让你以一种声明的方式处理数据\",{\"1\":{\"1031\":1}}],[\"可以让桥车继承汽车类\",{\"1\":{\"513\":1}}],[\"可以让开发者知道接口和这个xml是一起的\",{\"1\":{\"244\":1}}],[\"可以走这颗索引树\",{\"1\":{\"233\":1}}],[\"可以看成该类的一个成员\",{\"1\":{\"609\":1}}],[\"可以看出\",{\"1\":{\"440\":1}}],[\"可以看出group\",{\"1\":{\"167\":1}}],[\"可以看查询的过程\",{\"1\":{\"232\":1}}],[\"可以看到文件的变动\",{\"1\":{\"1205\":1}}],[\"可以看到\",{\"1\":{\"230\":1}}],[\"可以帮助开发人员更好地管理代码并提高开发效率\",{\"1\":{\"1204\":1}}],[\"可以帮助我们根据传入的条件\",{\"1\":{\"263\":1}}],[\"可以帮助我们生成mapper\",{\"1\":{\"263\":1}}],[\"可以帮助我们管理驱动\",{\"1\":{\"199\":1}}],[\"可以帮助代码在编译的时候生成对应的方法\",{\"1\":{\"262\":1}}],[\"可以帮助mysql提高查询语句的效率\",{\"1\":{\"219\":1}}],[\"可以不赋值\",{\"1\":{\"924\":1}}],[\"可以不需要子类实现\",{\"1\":{\"652\":1}}],[\"可以不写namespace\",{\"1\":{\"276\":1}}],[\"可以不用在url后面写\",{\"1\":{\"214\":1}}],[\"可以不指定插入的列\",{\"1\":{\"158\":1}}],[\"可以解决部分幻读问题\",{\"1\":{\"212\":1}}],[\"可以选择重写方法的返回值类型\",{\"1\":{\"694\":1}}],[\"可以选择从protected改写成public\",{\"1\":{\"537\":1}}],[\"可以选择使用nextdouble方法\",{\"1\":{\"352\":1}}],[\"可以选择使用nextint方法\",{\"1\":{\"352\":1}}],[\"可以选择使用nextline方法\",{\"1\":{\"352\":1}}],[\"可以选择不同的方法\",{\"1\":{\"352\":1}}],[\"可以选\",{\"1\":{\"192\":1}}],[\"可以被java识别并且运行\",{\"1\":{\"192\":1}}],[\"可以新建一个\",{\"1\":{\"187\":1}}],[\"可以考虑持有对方的引用作为成员变量\",{\"1\":{\"469\":1}}],[\"可以考虑一些独特的需求\",{\"1\":{\"415\":1}}],[\"可以考虑使用联合索引\",{\"1\":{\"233\":1}}],[\"可以考虑使用外键\",{\"1\":{\"171\":1}}],[\"可以考虑union联合查询来提高效率\",{\"1\":{\"185\":1}}],[\"可以考虑冗余数据\",{\"1\":{\"178\":1}}],[\"可以使用字符流\",{\"1\":{\"1124\":1}}],[\"可以使用特殊的servlet来处理\",{\"1\":{\"1090\":1}}],[\"可以使用通配符\",{\"1\":{\"1090\":1}}],[\"可以使用以下类型来接收\",{\"1\":{\"944\":1}}],[\"可以使用以下语法创建对象\",{\"1\":{\"452\":1}}],[\"可以使用这个treemap\",{\"1\":{\"1026\":1}}],[\"可以使用这个类型吗\",{\"1\":{\"944\":1}}],[\"可以使用这些方法\",{\"1\":{\"204\":1}}],[\"可以使用泛型\",{\"1\":{\"939\":2}}],[\"可以使用注解\",{\"1\":{\"652\":1}}],[\"可以使用局部内部类创建它\",{\"1\":{\"641\":1}}],[\"可以使用的修饰符有4种\",{\"1\":{\"509\":1}}],[\"可以使用静态代码块\",{\"1\":{\"496\":1}}],[\"可以使用this\",{\"1\":{\"461\":1}}],[\"可以使用多个判断条件\",{\"1\":{\"360\":1}}],[\"可以使用不同的scanner对象接收\",{\"1\":{\"353\":1}}],[\"可以使用include标签\",{\"1\":{\"267\":2}}],[\"可以使用ognl表达式的写法\",{\"1\":{\"265\":1}}],[\"可以使用取别名的方式解决\",{\"1\":{\"259\":1}}],[\"可以使用外部的propertie配置文件\",{\"1\":{\"245\":1}}],[\"可以使用\",{\"1\":{\"171\":1,\"258\":1,\"265\":1,\"823\":1}}],[\"可以使用varchar\",{\"1\":{\"153\":1}}],[\"可以插入null\",{\"1\":{\"170\":1}}],[\"可以插入多行\",{\"1\":{\"158\":1}}],[\"可以省略不写\",{\"1\":{\"1087\":1}}],[\"可以省略this\",{\"1\":{\"461\":1}}],[\"可以省略new关键字\",{\"1\":{\"397\":1}}],[\"可以省略\",{\"1\":{\"165\":1,\"234\":1}}],[\"可以为空不写\",{\"1\":{\"382\":1}}],[\"可以为一些计算的属性取别名\",{\"1\":{\"165\":1}}],[\"可以为取出来的列名\",{\"1\":{\"165\":1}}],[\"可以无脑冲\",{\"1\":{\"156\":1}}],[\"可以根据某个条件处理之后\",{\"1\":{\"1043\":1,\"1044\":1,\"1045\":1}}],[\"可以根据关键字快速定位到数据所在的位置\",{\"1\":{\"218\":1}}],[\"可以根据上下文推断\",{\"1\":{\"153\":1}}],[\"可以根据上下文进行推断\",{\"1\":{\"153\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"51\":1}}],[\"可以问同事\",{\"1\":{\"147\":1}}],[\"可以进行比较复杂的和高级的数据库操作\",{\"1\":{\"146\":1}}],[\"可以\",{\"1\":{\"135\":1,\"309\":1,\"948\":1,\"1183\":1}}],[\"可以在这个文件中声明哪些文件不被git追踪版本信息\",{\"1\":{\"1203\":1}}],[\"可以在git仓库的根目录下\",{\"1\":{\"1203\":1}}],[\"可以在队列的头部或尾部添加或删除元素\",{\"1\":{\"973\":1}}],[\"可以在语法层面强制方法调用者处理该异常\",{\"1\":{\"756\":1}}],[\"可以在end和start两个变量的声明前\",{\"1\":{\"700\":1}}],[\"可以在不同的分支之间进行切换\",{\"1\":{\"1204\":1}}],[\"可以在不事先知道该类内容的前提下\",{\"1\":{\"662\":1}}],[\"可以在不关注具体实现细节的前提下\",{\"1\":{\"658\":1}}],[\"可以在调用方法的实参位置填入一个\",{\"1\":{\"649\":1}}],[\"可以在调用方法的位置定义一个\",{\"1\":{\"641\":1}}],[\"可以在方法的局部位置写一个\",{\"1\":{\"641\":1,\"649\":1}}],[\"可以在无需编写原有类的情况下\",{\"1\":{\"513\":1}}],[\"可以在tomcat启动成功的窗口中按住ctrl键\",{\"1\":{\"132\":1}}],[\"可以在浏览器中进行设置\",{\"1\":{\"116\":1}}],[\"可以找阿里云\",{\"1\":{\"126\":1}}],[\"可以响应文本类型\",{\"1\":{\"123\":1}}],[\"可以实现对请求来源的合法性判断\",{\"1\":{\"116\":1}}],[\"可以确定请求图片的来源\",{\"1\":{\"116\":1}}],[\"可以通过cookie的方式来携带一些信息\",{\"1\":{\"1149\":1}}],[\"可以通过class直接实例化\",{\"1\":{\"922\":1}}],[\"可以通过idea中的tomcat的catalina\",{\"1\":{\"1121\":1}}],[\"可以通过遍历的方式来使用\",{\"1\":{\"1112\":1}}],[\"可以通过servletconfig来获得\",{\"1\":{\"1097\":1}}],[\"可以通过键值对的方式在存储和取出数据\",{\"1\":{\"1095\":1}}],[\"可以通过get方法获取\",{\"1\":{\"1050\":1}}],[\"可以通过将下标加上数组长度来返回到最后一个元素\",{\"1\":{\"976\":1}}],[\"可以通过\",{\"1\":{\"740\":1}}],[\"可以通过==进行地址值的比较\",{\"1\":{\"453\":1}}],[\"可以通过创建自己的对象工厂来实现\",{\"1\":{\"247\":1}}],[\"可以通过服务器端设置\",{\"1\":{\"116\":1}}],[\"可以通过解析请求头中的referer字段来获取访问来源信息\",{\"1\":{\"116\":1}}],[\"可以通过配置中的\",{\"1\":{\"29\":1}}],[\"第2行\",{\"1\":{\"1141\":1}}],[\"第17行里的值\",{\"1\":{\"1140\":1}}],[\"第10000行\",{\"1\":{\"141\":1}}],[\"第\",{\"1\":{\"948\":1}}],[\"第四次挥手\",{\"1\":{\"907\":1}}],[\"第四步\",{\"1\":{\"244\":1}}],[\"第九步\",{\"1\":{\"244\":1}}],[\"第八步\",{\"1\":{\"244\":1}}],[\"第七步\",{\"1\":{\"244\":1}}],[\"第六步\",{\"1\":{\"244\":1}}],[\"第五步\",{\"1\":{\"244\":1}}],[\"第三方的依赖\",{\"1\":{\"1098\":1}}],[\"第三方服务的配置信息\",{\"1\":{\"918\":1}}],[\"第三次挥手\",{\"1\":{\"907\":1}}],[\"第三次握手\",{\"1\":{\"906\":1}}],[\"第三个同学\",{\"1\":{\"950\":1}}],[\"第三个条件\",{\"1\":{\"885\":1}}],[\"第三个参数\",{\"1\":{\"254\":2}}],[\"第三只狗\",{\"1\":{\"444\":1}}],[\"第三步\",{\"1\":{\"244\":1,\"262\":1,\"694\":1}}],[\"第三范式\",{\"0\":{\"178\":1}}],[\"第二行提交\",{\"1\":{\"1197\":1}}],[\"第二行有两列\",{\"1\":{\"441\":1}}],[\"第二类\",{\"1\":{\"968\":1}}],[\"第二次发起请求的请求头\",{\"1\":{\"1150\":1}}],[\"第二次挥手\",{\"1\":{\"907\":1}}],[\"第二次握手\",{\"1\":{\"906\":1}}],[\"第二次校验\",{\"1\":{\"884\":1}}],[\"第二种\",{\"1\":{\"732\":1}}],[\"第二种格式\",{\"1\":{\"395\":1}}],[\"第二\",{\"1\":{\"616\":1}}],[\"第二只狗\",{\"1\":{\"444\":1}}],[\"第二条sql\",{\"1\":{\"276\":1}}],[\"第二条sql执行时\",{\"1\":{\"276\":1}}],[\"第二个值\",{\"1\":{\"1132\":1}}],[\"第二个情况\",{\"1\":{\"1014\":1}}],[\"第二个条件\",{\"1\":{\"885\":1}}],[\"第二个参数是value\",{\"1\":{\"1123\":1}}],[\"第二个参数\",{\"1\":{\"254\":3}}],[\"第二个显示\",{\"1\":{\"27\":2}}],[\"第二步\",{\"1\":{\"244\":1,\"262\":1,\"694\":1}}],[\"第二范式\",{\"0\":{\"177\":1}}],[\"第一件事情\",{\"1\":{\"1201\":1}}],[\"第一类\",{\"1\":{\"968\":1}}],[\"第一次提交的时候\",{\"1\":{\"1195\":1}}],[\"第一次挥手\",{\"1\":{\"907\":1}}],[\"第一次握手\",{\"1\":{\"906\":1}}],[\"第一种\",{\"1\":{\"732\":1,\"961\":1}}],[\"第一种格式具有更好的可读性\",{\"1\":{\"395\":1}}],[\"第一只dog\",{\"1\":{\"444\":1}}],[\"第一行的元素从1开始\",{\"1\":{\"441\":1}}],[\"第一行有一列\",{\"1\":{\"441\":1}}],[\"第一个值\",{\"1\":{\"1132\":1}}],[\"第一个参数是key\",{\"1\":{\"1123\":1}}],[\"第一个情况\",{\"1\":{\"1014\":1}}],[\"第一个元素\",{\"1\":{\"968\":3,\"975\":3}}],[\"第一个条件\",{\"1\":{\"885\":1}}],[\"第一个字符取出来\",{\"1\":{\"738\":1}}],[\"第一个字符转为大写\",{\"1\":{\"738\":2}}],[\"第一个java程序的运行过程如下\",{\"1\":{\"309\":1}}],[\"第一个java程序\",{\"0\":{\"308\":1}}],[\"第一个jdbc程序\",{\"0\":{\"192\":1}}],[\"第一个显示\",{\"1\":{\"27\":1}}],[\"第一范式\",{\"0\":{\"176\":1},\"1\":{\"176\":1}}],[\"第一步\",{\"1\":{\"120\":1,\"157\":1,\"244\":1,\"262\":1,\"694\":1}}],[\"顺序为\",{\"1\":{\"542\":1}}],[\"顺序结构\",{\"1\":{\"356\":1}}],[\"顺序\",{\"0\":{\"27\":1},\"1\":{\"993\":1}}],[\"渐变\",{\"0\":{\"28\":1,\"29\":1,\"30\":1}}],[\"渐出\",{\"1\":{\"25\":1}}],[\"渐入\",{\"1\":{\"25\":1}}],[\"d9jdgh3ow2ubtbxayvtanur5nra2rw2coo\",{\"1\":{\"1132\":1}}],[\"dsfnjdnc\",{\"1\":{\"1132\":2}}],[\"dlrb\",{\"1\":{\"1124\":1,\"1128\":1}}],[\"d0915e770aa6\",{\"1\":{\"1120\":1}}],[\"dcbc35b9=2a0b80c2\",{\"1\":{\"1120\":1}}],[\"dun\",{\"1\":{\"739\":6}}],[\"durability\",{\"1\":{\"210\":1}}],[\"d4\",{\"1\":{\"710\":2}}],[\"d3\",{\"1\":{\"710\":2}}],[\"dynamiccolumnname\",{\"1\":{\"256\":4}}],[\"dynamictablenamelist\",{\"1\":{\"256\":2}}],[\"dynamictablename\",{\"1\":{\"256\":2}}],[\"dtd\",{\"1\":{\"234\":6,\"244\":3}}],[\"daemondemo\",{\"1\":{\"842\":1}}],[\"day\",{\"1\":{\"718\":3}}],[\"damage\",{\"1\":{\"469\":10}}],[\"dao\",{\"1\":{\"212\":1,\"234\":1}}],[\"dateencode\",{\"1\":{\"1148\":2}}],[\"datestr\",{\"1\":{\"1126\":2}}],[\"date>\",{\"1\":{\"942\":1}}],[\"date+getname\",{\"1\":{\"844\":1}}],[\"date类型\",{\"1\":{\"942\":1}}],[\"date类的成员方法也大多过时了\",{\"1\":{\"724\":1}}],[\"date类的对象中是通过存储一个long类型的时间戳进而来存储时间的\",{\"1\":{\"721\":1}}],[\"date类的对象表示一个特定的时刻瞬间\",{\"1\":{\"721\":1}}],[\"date类只有一个构造器\",{\"1\":{\"723\":1}}],[\"date类作为一个表示时间和日期的类\",{\"1\":{\"721\":1}}],[\"date\",{\"1\":{\"116\":1,\"121\":1,\"127\":2,\"153\":2,\"171\":1,\"247\":2,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"721\":1,\"723\":7,\"724\":1,\"726\":5,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":4,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"883\":2,\"884\":10,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2,\"942\":2,\"1026\":2,\"1078\":1,\"1085\":2,\"1105\":1,\"1117\":1,\"1121\":1,\"1122\":1,\"1123\":1,\"1126\":4,\"1131\":1,\"1132\":1,\"1142\":2,\"1148\":4,\"1150\":1}}],[\"datadto\",{\"1\":{\"1132\":2}}],[\"data请求\",{\"1\":{\"1132\":1}}],[\"data可以用\",{\"1\":{\"949\":1}}],[\"datagrampacket\",{\"0\":{\"890\":1},\"1\":{\"889\":2,\"890\":3,\"892\":9,\"893\":8,\"894\":6,\"895\":4}}],[\"datagramsocket\",{\"0\":{\"889\":1},\"1\":{\"889\":1,\"892\":13,\"894\":12,\"895\":32}}],[\"datainputstream\",{\"1\":{\"817\":6,\"824\":1}}],[\"datainputstream数据输入流\",{\"0\":{\"817\":1}}],[\"dataoutputstream\",{\"1\":{\"816\":1,\"817\":4,\"824\":1}}],[\"dataoutputstream数据输出流\",{\"0\":{\"816\":1}}],[\"data都是存的地址\",{\"1\":{\"227\":1}}],[\"data是地址\",{\"1\":{\"222\":1}}],[\"data是地址值\",{\"1\":{\"222\":1}}],[\"data存储的就是数据的地址\",{\"1\":{\"222\":1}}],[\"datasource>\",{\"1\":{\"234\":1,\"244\":1,\"248\":3}}],[\"datasource接口\",{\"1\":{\"213\":1}}],[\"datasource\",{\"1\":{\"213\":2,\"214\":4,\"215\":1,\"216\":3}}],[\"datasets\",{\"1\":{\"71\":1}}],[\"data1\",{\"1\":{\"153\":1,\"939\":1,\"941\":3}}],[\"databases\",{\"1\":{\"148\":2}}],[\"database\",{\"0\":{\"1207\":1},\"1\":{\"141\":2,\"143\":1,\"148\":2,\"149\":5,\"150\":1,\"151\":1,\"157\":3,\"191\":1,\"204\":1}}],[\"data\",{\"1\":{\"17\":1,\"27\":1,\"29\":1,\"31\":1,\"71\":2,\"72\":2,\"141\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"261\":1,\"262\":2,\"275\":2,\"278\":2,\"281\":2,\"321\":1,\"892\":2,\"893\":2,\"923\":3,\"924\":2,\"936\":5,\"937\":1,\"939\":6,\"944\":3,\"949\":1,\"1104\":1,\"1105\":1,\"1120\":4,\"1121\":1,\"1132\":15}}],[\"dd\",{\"1\":{\"153\":3,\"725\":1,\"844\":1,\"884\":1,\"942\":2,\"1028\":1,\"1126\":1,\"1148\":1}}],[\"d代表小数位数\",{\"1\":{\"153\":1}}],[\"d代表是小数位数\",{\"1\":{\"153\":1}}],[\"d位\",{\"1\":{\"153\":1}}],[\"dev经过测试\",{\"1\":{\"1204\":1}}],[\"dev\",{\"1\":{\"1204\":4}}],[\"development\",{\"1\":{\"234\":2,\"244\":2,\"248\":2,\"304\":1}}],[\"deque是queue的子接口\",{\"1\":{\"974\":1}}],[\"deque接口提供了双端队列的实现\",{\"1\":{\"973\":1}}],[\"deque\",{\"0\":{\"973\":1},\"1\":{\"956\":1,\"965\":1,\"973\":1}}],[\"delay\",{\"1\":{\"883\":2,\"884\":2}}],[\"deleted\",{\"1\":{\"1132\":20}}],[\"delete不会因为文件不存在\",{\"1\":{\"773\":1}}],[\"deletecharat\",{\"1\":{\"743\":2}}],[\"delete>\",{\"1\":{\"238\":1}}],[\"deleteuserbyid\",{\"1\":{\"238\":3,\"239\":1}}],[\"delete\",{\"1\":{\"161\":3,\"162\":2,\"171\":1,\"195\":1,\"238\":1,\"420\":1,\"743\":2,\"773\":1}}],[\"destroy\",{\"1\":{\"1093\":3}}],[\"destroy方法执行时机和次数\",{\"1\":{\"1075\":1}}],[\"destpos\",{\"1\":{\"954\":2}}],[\"dest\",{\"1\":{\"772\":1,\"954\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"descendingmap\",{\"1\":{\"1026\":1}}],[\"descendingkeyset\",{\"1\":{\"1026\":1}}],[\"descendingiterator\",{\"1\":{\"968\":1,\"975\":1}}],[\"describe\",{\"1\":{\"155\":1}}],[\"description\",{\"1\":{\"127\":2,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"594\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2,\"1086\":1}}],[\"desc\",{\"1\":{\"66\":1,\"155\":2,\"158\":2,\"166\":1,\"1132\":1}}],[\"deflate\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1113\":1,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"defineclass\",{\"1\":{\"917\":1,\"923\":3}}],[\"def\",{\"1\":{\"743\":1}}],[\"default不一定放在最后\",{\"1\":{\"359\":1}}],[\"default也不是必须的\",{\"1\":{\"359\":1}}],[\"defaultenumtypehandler\",{\"1\":{\"246\":1}}],[\"defaultexecutortype\",{\"1\":{\"246\":1}}],[\"defaultscriptinglanguage\",{\"1\":{\"246\":1}}],[\"defaultstatementtimeout\",{\"1\":{\"246\":1}}],[\"defaultfetchsize\",{\"1\":{\"246\":1}}],[\"default=\",{\"1\":{\"234\":1,\"244\":1,\"248\":1}}],[\"default\",{\"1\":{\"171\":7,\"209\":2,\"215\":1,\"222\":2,\"225\":2,\"229\":2,\"233\":2,\"312\":1,\"359\":4,\"598\":2,\"600\":1,\"924\":6,\"1006\":2,\"1086\":10,\"1131\":1}}],[\"debug模式启动程序\",{\"1\":{\"669\":1}}],[\"debug练习\",{\"1\":{\"468\":1}}],[\"deprecated\",{\"1\":{\"658\":1,\"689\":1,\"924\":1}}],[\"dependencies>\",{\"1\":{\"244\":1,\"1079\":1}}],[\"dependency>\",{\"1\":{\"234\":2,\"244\":3,\"262\":1,\"1079\":1}}],[\"derived\",{\"1\":{\"522\":1}}],[\"deeptostring\",{\"1\":{\"440\":1}}],[\"demo6\",{\"1\":{\"789\":1}}],[\"demo3\",{\"1\":{\"738\":1,\"789\":1,\"795\":1,\"813\":1,\"814\":1,\"817\":1,\"820\":1,\"821\":1,\"833\":1,\"857\":1,\"867\":1,\"871\":1,\"918\":1,\"1111\":5,\"1159\":3}}],[\"demo这种类我们称之为外部其他类\",{\"1\":{\"608\":1}}],[\"demo类开始初始化步骤了\",{\"1\":{\"498\":1}}],[\"demo类加载\",{\"1\":{\"471\":1}}],[\"demo2中是可以获得这个cookie的\",{\"1\":{\"1145\":1}}],[\"demo2或\",{\"1\":{\"1145\":1}}],[\"demo2\",{\"1\":{\"389\":1,\"423\":1,\"737\":1,\"789\":1,\"790\":1,\"794\":1,\"801\":1,\"807\":1,\"812\":1,\"814\":1,\"817\":1,\"819\":1,\"825\":1,\"833\":1,\"851\":1,\"856\":1,\"867\":1,\"870\":1,\"880\":1,\"916\":1,\"918\":1,\"1083\":1,\"1150\":2,\"1158\":1}}],[\"demo14\",{\"1\":{\"1131\":2}}],[\"demo13\",{\"1\":{\"1130\":1}}],[\"demo12\",{\"1\":{\"1126\":1,\"1129\":1}}],[\"demo15\",{\"1\":{\"1120\":1}}],[\"demo1\",{\"1\":{\"389\":1,\"940\":1,\"943\":1,\"1083\":2,\"1085\":2,\"1140\":1,\"1141\":1,\"1142\":1,\"1145\":6,\"1146\":5,\"1147\":1}}],[\"demo11\",{\"1\":{\"282\":4,\"283\":2}}],[\"demo\",{\"1\":{\"316\":1,\"334\":1,\"340\":1,\"341\":1,\"342\":1,\"344\":1,\"383\":1,\"459\":1,\"460\":2,\"465\":1,\"468\":1,\"469\":1,\"471\":1,\"472\":1,\"474\":1,\"478\":1,\"479\":5,\"491\":1,\"498\":8,\"502\":1,\"538\":4,\"539\":1,\"545\":1,\"564\":1,\"573\":1,\"588\":2,\"598\":1,\"608\":1,\"650\":1,\"655\":1,\"669\":1,\"690\":1,\"696\":1,\"720\":1,\"729\":2,\"730\":1,\"737\":1,\"741\":1,\"764\":1,\"767\":2,\"788\":2,\"790\":2,\"794\":3,\"806\":2,\"808\":2,\"812\":1,\"813\":1,\"814\":1,\"818\":1,\"820\":1,\"824\":1,\"825\":1,\"832\":2,\"838\":1,\"850\":3,\"855\":1,\"864\":1,\"866\":1,\"867\":3,\"870\":1,\"880\":1,\"881\":1,\"884\":1,\"912\":1,\"916\":2,\"918\":1,\"922\":1,\"923\":1,\"924\":2}}],[\"demo7\",{\"1\":{\"261\":1,\"1117\":1,\"1118\":1}}],[\"demo4\",{\"1\":{\"260\":1,\"261\":2,\"789\":1,\"833\":1,\"859\":1,\"872\":1,\"1112\":1}}],[\"demo9\",{\"1\":{\"259\":1,\"276\":6,\"277\":2,\"279\":4,\"280\":2,\"1120\":2}}],[\"demo8\",{\"1\":{\"250\":2,\"251\":1,\"1119\":2}}],[\"demo5\",{\"1\":{\"249\":1,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"789\":1,\"860\":1,\"1113\":1}}],[\"detail表连接起来\",{\"1\":{\"182\":1}}],[\"detail\",{\"1\":{\"180\":7,\"181\":1,\"182\":4,\"183\":4,\"275\":7,\"276\":1,\"277\":1}}],[\"decode\",{\"1\":{\"1148\":1}}],[\"decodedate\",{\"1\":{\"1148\":2}}],[\"declaredmethod\",{\"1\":{\"1109\":6}}],[\"declaredmethods\",{\"1\":{\"921\":2}}],[\"declaredfields\",{\"1\":{\"920\":2}}],[\"declaredconstructor\",{\"1\":{\"919\":4,\"920\":2,\"921\":2,\"924\":3}}],[\"declaredconstructors\",{\"1\":{\"919\":2}}],[\"declared\",{\"1\":{\"623\":1}}],[\"declaration\",{\"1\":{\"395\":1,\"433\":1}}],[\"dec\",{\"1\":{\"153\":1}}],[\"decimal\",{\"1\":{\"153\":3,\"247\":1,\"263\":1}}],[\"dram\",{\"1\":{\"766\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"216\":1}}],[\"druid\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"driverdemo\",{\"1\":{\"1107\":1}}],[\"driver=com\",{\"1\":{\"245\":1,\"1107\":2}}],[\"driver<\",{\"1\":{\"215\":1}}],[\"driverclass=com\",{\"1\":{\"215\":1}}],[\"driverclass\",{\"1\":{\"213\":1,\"215\":1,\"1107\":2}}],[\"driverclassname=com\",{\"1\":{\"214\":1,\"216\":1}}],[\"driverclassname\",{\"1\":{\"203\":1,\"213\":3}}],[\"drivermanager\",{\"0\":{\"199\":1},\"1\":{\"192\":2,\"199\":2,\"203\":1,\"213\":1,\"234\":1}}],[\"driver\",{\"1\":{\"192\":3,\"199\":1,\"203\":3,\"214\":1,\"215\":1,\"216\":1,\"234\":2,\"244\":2,\"245\":1,\"248\":6,\"1107\":6}}],[\"drivers\",{\"1\":{\"113\":1}}],[\"drop\",{\"1\":{\"150\":1,\"154\":1,\"156\":1,\"180\":2,\"204\":1,\"232\":3,\"261\":1,\"275\":2,\"278\":2,\"281\":3}}],[\"db47\",{\"1\":{\"245\":1}}],[\"db7\",{\"1\":{\"234\":1}}],[\"dbcp断更后\",{\"1\":{\"215\":1}}],[\"dbcpdatasource1\",{\"1\":{\"214\":1}}],[\"dbcp\",{\"0\":{\"214\":1},\"1\":{\"214\":3}}],[\"dba\",{\"1\":{\"186\":1}}],[\"db1\",{\"1\":{\"157\":2}}],[\"dbname>\",{\"1\":{\"187\":1}}],[\"dbname\",{\"1\":{\"149\":3,\"187\":3}}],[\"db\",{\"1\":{\"148\":1,\"149\":5,\"150\":1,\"151\":1,\"152\":2,\"213\":1}}],[\"db2的操作比较复杂\",{\"1\":{\"143\":1}}],[\"db2支持标准的sql\",{\"1\":{\"143\":1}}],[\"db2数据库是由ibm公司研制的一种关系型数据库管理系统\",{\"1\":{\"143\":1}}],[\"db2数据库\",{\"1\":{\"143\":1}}],[\"dbms\",{\"1\":{\"141\":1}}],[\"dielock3\",{\"1\":{\"867\":4}}],[\"dielock2\",{\"1\":{\"867\":4}}],[\"dielock\",{\"1\":{\"866\":4}}],[\"dirname\",{\"1\":{\"1192\":1}}],[\"dirs\",{\"1\":{\"912\":1}}],[\"dir2\",{\"1\":{\"771\":2}}],[\"dir\",{\"1\":{\"767\":2,\"771\":2,\"776\":6,\"777\":4}}],[\"dirty\",{\"1\":{\"211\":1}}],[\"digitalcount++\",{\"1\":{\"737\":1}}],[\"digitalcount\",{\"1\":{\"737\":2}}],[\"displayname\",{\"1\":{\"1086\":1}}],[\"disposition\",{\"0\":{\"1128\":1},\"1\":{\"121\":1,\"1120\":2,\"1125\":1,\"1128\":3}}],[\"dis\",{\"1\":{\"817\":10}}],[\"disk是null\",{\"1\":{\"264\":1}}],[\"disk=1024\",{\"1\":{\"263\":1}}],[\"disk\",{\"1\":{\"263\":5,\"264\":4,\"266\":4,\"267\":2,\"268\":3,\"269\":3,\"271\":7,\"273\":2,\"274\":2}}],[\"distinctbeijingcount\",{\"1\":{\"1037\":2}}],[\"distinct方法\",{\"1\":{\"1037\":1}}],[\"distinct方法用于筛选元素\",{\"1\":{\"1037\":1}}],[\"distinct\",{\"0\":{\"163\":1,\"1037\":1},\"1\":{\"163\":4,\"1037\":2}}],[\"dictionary\",{\"1\":{\"144\":1}}],[\"div>\",{\"1\":{\"127\":1}}],[\"domainservlet\",{\"1\":{\"1146\":1}}],[\"domain\",{\"0\":{\"1146\":1},\"1\":{\"1144\":1,\"1146\":2}}],[\"do对应的servlet来处理请求\",{\"1\":{\"1090\":1}}],[\"do就可以找到\",{\"1\":{\"1090\":1}}],[\"dopost\",{\"1\":{\"1085\":3,\"1088\":1,\"1094\":1,\"1116\":1,\"1117\":1,\"1119\":1,\"1120\":2,\"1130\":1,\"1131\":1,\"1159\":1}}],[\"dopost方法中的形参\",{\"1\":{\"1110\":1}}],[\"dopost方法\",{\"1\":{\"1085\":2,\"1086\":1}}],[\"doservice\",{\"1\":{\"1085\":1}}],[\"dos\",{\"1\":{\"817\":12}}],[\"doget\",{\"1\":{\"1085\":3,\"1088\":2,\"1093\":1,\"1094\":1,\"1095\":1,\"1096\":2,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":2,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"dog也是animal\",{\"1\":{\"523\":1}}],[\"dog类开始初始化步骤了\",{\"1\":{\"498\":1}}],[\"dog\",{\"1\":{\"479\":11,\"498\":9,\"590\":1,\"595\":1,\"655\":15,\"699\":1,\"944\":1}}],[\"dog3\",{\"1\":{\"444\":1,\"479\":1,\"655\":2}}],[\"dog2\",{\"1\":{\"444\":1,\"479\":1,\"655\":2}}],[\"dog1\",{\"1\":{\"444\":1,\"655\":2}}],[\"dogage3\",{\"1\":{\"444\":1}}],[\"dogage2\",{\"1\":{\"444\":1}}],[\"dogage1\",{\"1\":{\"444\":1}}],[\"dogcolor3\",{\"1\":{\"444\":1}}],[\"dogcolor2\",{\"1\":{\"444\":1}}],[\"dogcolor1\",{\"1\":{\"444\":1}}],[\"dogname3\",{\"1\":{\"444\":1}}],[\"dogname2\",{\"1\":{\"444\":1}}],[\"dogname1\",{\"1\":{\"444\":1}}],[\"do\",{\"0\":{\"364\":1},\"1\":{\"312\":1,\"361\":1,\"364\":4,\"1090\":1}}],[\"doublecapacity\",{\"1\":{\"978\":1}}],[\"doublevalue\",{\"1\":{\"944\":1}}],[\"double的valueof方法\",{\"1\":{\"710\":1}}],[\"doublet\",{\"1\":{\"675\":1}}],[\"doubleintvalue\",{\"1\":{\"424\":1,\"425\":1}}],[\"double~\",{\"1\":{\"341\":1}}],[\"double这些数值类型和char类型之间进行\",{\"1\":{\"337\":1}}],[\"double更精确\",{\"1\":{\"323\":1}}],[\"double\",{\"1\":{\"153\":2,\"247\":4,\"312\":1,\"323\":2,\"326\":1,\"334\":1,\"336\":1,\"348\":2,\"389\":3,\"407\":1,\"459\":2,\"468\":1,\"469\":2,\"471\":3,\"517\":2,\"594\":8,\"675\":2,\"701\":2,\"705\":1,\"707\":2,\"710\":5,\"738\":2,\"816\":2,\"817\":3,\"818\":10,\"819\":2,\"820\":2,\"884\":2,\"944\":3}}],[\"double也是类似\",{\"1\":{\"153\":1}}],[\"docx是类似压缩包的文件\",{\"1\":{\"1192\":1}}],[\"document\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"documented\",{\"1\":{\"1086\":1}}],[\"docbase里的真实路径\",{\"1\":{\"1097\":1}}],[\"docbase配置\",{\"1\":{\"1076\":1}}],[\"docbase下的\",{\"1\":{\"137\":2}}],[\"docbase\",{\"0\":{\"1083\":1},\"1\":{\"136\":2,\"139\":1,\"1084\":1}}],[\"docbase=\",{\"1\":{\"136\":1,\"137\":1,\"139\":1,\"1083\":1}}],[\"doctype\",{\"1\":{\"115\":1,\"234\":2,\"244\":1}}],[\"down\",{\"1\":{\"21\":1}}],[\"dns服务器解析\",{\"1\":{\"113\":1}}],[\"d\",{\"1\":{\"34\":1,\"136\":1,\"137\":2,\"139\":3,\"153\":4,\"233\":2,\"249\":1,\"336\":2,\"341\":1,\"420\":1,\"479\":1,\"498\":1,\"538\":2,\"699\":2,\"710\":2,\"725\":1,\"739\":1,\"769\":3,\"771\":3,\"776\":2,\"777\":1,\"788\":1,\"813\":1,\"816\":1,\"817\":2,\"819\":1,\"820\":1,\"905\":2,\"923\":1,\"1083\":1,\"1091\":1,\"1113\":2}}],[\"fgfskljasdljdlkasjksalk\",{\"1\":{\"1201\":1}}],[\"f6c6\",{\"1\":{\"1132\":1}}],[\"f778738c\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"f泛型有两个\",{\"1\":{\"942\":1}}],[\"ft5\",{\"1\":{\"940\":1}}],[\"ft41\",{\"1\":{\"940\":1}}],[\"ft4\",{\"1\":{\"940\":1}}],[\"ft3\",{\"1\":{\"940\":1}}],[\"ft2\",{\"1\":{\"940\":1}}],[\"ft1\",{\"1\":{\"940\":1}}],[\"ft\",{\"1\":{\"940\":10}}],[\"futuretask2\",{\"1\":{\"881\":3}}],[\"futuretask1\",{\"1\":{\"881\":3}}],[\"futuretask<integer>\",{\"1\":{\"881\":2}}],[\"futuretask<>\",{\"1\":{\"881\":3}}],[\"futuretask<string>\",{\"1\":{\"881\":1}}],[\"futuretask\",{\"1\":{\"881\":8}}],[\"future\",{\"1\":{\"880\":4,\"881\":1}}],[\"future<string>\",{\"1\":{\"880\":1}}],[\"future<t>\",{\"1\":{\"880\":1}}],[\"future<\",{\"1\":{\"880\":1}}],[\"function<\",{\"1\":{\"1040\":1}}],[\"functionalinterface\",{\"1\":{\"652\":3,\"654\":6,\"655\":6,\"924\":1}}],[\"functionalinterface标记在接口头上\",{\"1\":{\"652\":1}}],[\"func方法执行了\",{\"1\":{\"789\":1}}],[\"func\",{\"1\":{\"738\":2,\"764\":2,\"789\":2,\"923\":1}}],[\"func2\",{\"1\":{\"655\":3}}],[\"func1\",{\"1\":{\"655\":3}}],[\"full\",{\"1\":{\"167\":1,\"183\":1}}],[\"fs1\",{\"1\":{\"585\":1}}],[\"fs2\",{\"1\":{\"526\":1,\"585\":1}}],[\"fs\",{\"1\":{\"526\":1,\"564\":1,\"585\":5}}],[\"flush\",{\"1\":{\"786\":1,\"790\":3,\"806\":2,\"807\":2,\"808\":2,\"820\":2,\"844\":2,\"1113\":1}}],[\"flag\",{\"1\":{\"518\":2,\"825\":8,\"844\":3,\"866\":5,\"867\":10}}],[\"floorkey\",{\"1\":{\"1026\":1}}],[\"floorentry\",{\"1\":{\"1026\":1}}],[\"float任何数据类型与double进行计算\",{\"1\":{\"340\":1}}],[\"float和double都不适合用于精确计算的场合\",{\"1\":{\"336\":1}}],[\"float和double类型主要是为了科学计算和工程计算而设计的\",{\"1\":{\"336\":1}}],[\"float\",{\"1\":{\"153\":3,\"161\":3,\"247\":4,\"312\":1,\"323\":3,\"326\":1,\"336\":3,\"337\":1,\"341\":1,\"342\":2,\"389\":1,\"407\":1,\"675\":3,\"701\":2,\"817\":1,\"984\":1,\"988\":1,\"1017\":1,\"1022\":2}}],[\"flowchart\",{\"1\":{\"74\":2}}],[\"f2\",{\"1\":{\"342\":1}}],[\"ff\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"1028\":1}}],[\"failed\",{\"1\":{\"1205\":1}}],[\"faibonacci\",{\"1\":{\"442\":3}}],[\"factory\",{\"1\":{\"1159\":2}}],[\"factor\",{\"1\":{\"1006\":1}}],[\"factorial2\",{\"1\":{\"442\":1}}],[\"factorial\",{\"1\":{\"442\":3}}],[\"fasttime\",{\"1\":{\"722\":1,\"723\":1}}],[\"father泛型为e\",{\"1\":{\"940\":1}}],[\"father泛型为integer\",{\"1\":{\"940\":1}}],[\"father泛型为string\",{\"1\":{\"940\":1}}],[\"father<t>\",{\"1\":{\"940\":2}}],[\"father<e>\",{\"1\":{\"940\":2}}],[\"father<string>\",{\"1\":{\"940\":2}}],[\"father<>\",{\"1\":{\"940\":1}}],[\"father<integer>\",{\"1\":{\"940\":5}}],[\"father1\",{\"1\":{\"939\":2}}],[\"father\",{\"1\":{\"526\":2,\"539\":2,\"555\":1,\"560\":1,\"564\":6,\"585\":6,\"588\":8,\"939\":1,\"940\":3,\"1078\":3}}],[\"false中断\",{\"1\":{\"844\":2}}],[\"false则表示不是\",{\"1\":{\"586\":1}}],[\"false\",{\"1\":{\"200\":1,\"201\":1,\"204\":2,\"209\":3,\"246\":5,\"283\":1,\"325\":2,\"347\":1,\"349\":2,\"362\":1,\"364\":1,\"601\":1,\"674\":1,\"706\":1,\"707\":2,\"710\":1,\"711\":4,\"719\":2,\"735\":3,\"825\":2,\"844\":1,\"866\":1,\"867\":3,\"953\":1,\"1026\":1,\"1086\":1,\"1132\":20}}],[\"fade\",{\"1\":{\"21\":8,\"29\":1}}],[\"f12\",{\"1\":{\"198\":1}}],[\"f11\",{\"1\":{\"38\":1}}],[\"fk\",{\"1\":{\"171\":1}}],[\"feature1\",{\"1\":{\"1204\":3}}],[\"feibonacci\",{\"1\":{\"442\":1}}],[\"fetchoperation\",{\"1\":{\"1131\":1}}],[\"fetch\",{\"1\":{\"1120\":4,\"1138\":4,\"1140\":5,\"1141\":1,\"1143\":1,\"1145\":1,\"1146\":5,\"1150\":4,\"1158\":1}}],[\"fetchtype=\",{\"1\":{\"283\":1}}],[\"fetchtype\",{\"1\":{\"283\":1}}],[\"fetchresourcename\",{\"1\":{\"128\":1}}],[\"fetchmethod\",{\"1\":{\"128\":2}}],[\"fetchheader\",{\"1\":{\"128\":2}}],[\"feb\",{\"1\":{\"116\":1,\"1105\":2,\"1121\":2,\"1122\":1,\"1123\":1,\"1142\":1,\"1150\":1}}],[\"fdkljsahfjksdhfshdkfjhdskjfhsdjkl\",{\"1\":{\"125\":1}}],[\"fourth\",{\"1\":{\"1146\":1}}],[\"found<\",{\"1\":{\"127\":1}}],[\"found\",{\"1\":{\"120\":1,\"127\":1}}],[\"foods\",{\"1\":{\"867\":6}}],[\"food\",{\"1\":{\"867\":29,\"922\":3}}],[\"fori\",{\"1\":{\"956\":1}}],[\"form\",{\"1\":{\"1104\":1,\"1113\":1,\"1120\":4,\"1132\":1}}],[\"format\",{\"1\":{\"726\":1,\"820\":1,\"844\":1,\"1126\":1,\"1148\":3}}],[\"form>\",{\"1\":{\"115\":1,\"1104\":1,\"1119\":2,\"1120\":1}}],[\"for省略大括号\",{\"1\":{\"654\":1}}],[\"for结构的大括号\",{\"1\":{\"331\":1}}],[\"fortran语言\",{\"1\":{\"312\":1}}],[\"foreach在查询时候的使用\",{\"1\":{\"272\":1}}],[\"foreach在插入的使用\",{\"1\":{\"271\":1}}],[\"foreach>\",{\"1\":{\"271\":4,\"272\":1}}],[\"foreach遍历传入的集合\",{\"1\":{\"271\":1}}],[\"foreach的循环从插入的时候\",{\"1\":{\"271\":2}}],[\"foreach可以帮助我们去循环处理sql语句\",{\"1\":{\"270\":1}}],[\"foreach\",{\"0\":{\"270\":1,\"956\":1,\"1048\":1},\"1\":{\"205\":1,\"272\":2,\"657\":1,\"956\":2,\"1048\":4}}],[\"foreign\",{\"1\":{\"171\":4}}],[\"for循环的变形体主要有以下形式\",{\"1\":{\"362\":1}}],[\"for循环内部定义的变量\",{\"1\":{\"362\":1}}],[\"for循环是最基础\",{\"1\":{\"361\":1}}],[\"for循环\",{\"0\":{\"362\":1},\"1\":{\"207\":2,\"361\":1}}],[\"for循环来做\",{\"1\":{\"205\":1}}],[\"for循环逐条插入\",{\"0\":{\"205\":1}}],[\"forname\",{\"1\":{\"203\":1,\"213\":1,\"857\":1,\"916\":5,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"924\":2,\"1107\":4,\"1109\":2}}],[\"for\",{\"1\":{\"127\":2,\"201\":1,\"205\":1,\"206\":1,\"207\":1,\"213\":1,\"271\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"312\":1,\"362\":4,\"366\":1,\"367\":3,\"376\":3,\"377\":1,\"378\":1,\"415\":3,\"417\":1,\"418\":2,\"419\":2,\"440\":2,\"441\":6,\"700\":1,\"720\":1,\"737\":1,\"738\":1,\"739\":3,\"741\":1,\"776\":2,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":2,\"844\":2,\"872\":2,\"880\":2,\"881\":1,\"919\":2,\"920\":2,\"921\":2,\"922\":2,\"956\":3,\"997\":1,\"1028\":1,\"1116\":1,\"1143\":1,\"1148\":1,\"1205\":1}}],[\"forum\",{\"1\":{\"115\":4}}],[\"fifo\",{\"1\":{\"970\":1}}],[\"firstservlet\",{\"1\":{\"1093\":1}}],[\"firstkey\",{\"1\":{\"1026\":1}}],[\"firstentry\",{\"1\":{\"1026\":1}}],[\"firsttime\",{\"1\":{\"883\":1,\"884\":1}}],[\"first\",{\"1\":{\"767\":1,\"1028\":3,\"1083\":2,\"1093\":4}}],[\"finish\",{\"1\":{\"907\":1}}],[\"fin\",{\"1\":{\"907\":3}}],[\"findfirst\",{\"0\":{\"1047\":1},\"1\":{\"1047\":3}}],[\"findany\",{\"0\":{\"1046\":1},\"1\":{\"1046\":5,\"1047\":1}}],[\"findalljava\",{\"1\":{\"776\":3}}],[\"find\",{\"1\":{\"978\":1}}],[\"findclass\",{\"1\":{\"923\":1}}],[\"findbyid\",{\"1\":{\"720\":2}}],[\"final与finally有什么区别\",{\"1\":{\"760\":1}}],[\"finalize方法也会在对象销毁时自动被调用\",{\"1\":{\"689\":1}}],[\"finalize方法是java沿用的c++中的析构函数的设计\",{\"1\":{\"688\":1}}],[\"finalize方法\",{\"0\":{\"686\":1},\"1\":{\"688\":1}}],[\"finalize\",{\"1\":{\"658\":2,\"687\":1,\"690\":1}}],[\"final天生和接口矛盾\",{\"1\":{\"598\":1}}],[\"final是阻止继承而abstract是抽象类\",{\"1\":{\"592\":1}}],[\"final限制了重写\",{\"1\":{\"577\":1}}],[\"final只能修饰引用\",{\"1\":{\"572\":1}}],[\"final修饰\",{\"1\":{\"715\":1}}],[\"final修饰它\",{\"1\":{\"660\":1}}],[\"final修饰的方法\",{\"1\":{\"577\":1}}],[\"final修饰引用数据类型的变量\",{\"1\":{\"572\":1}}],[\"final修饰静态成员变量是一个全局常量\",{\"1\":{\"571\":1}}],[\"final修饰静态成员变量表示一个静态的\",{\"1\":{\"571\":1}}],[\"final修饰成员变量表示该成员变量变成了一个常量\",{\"1\":{\"570\":1}}],[\"final修饰成员方法\",{\"1\":{\"567\":1}}],[\"final修饰局部变量后\",{\"1\":{\"569\":1}}],[\"final修饰变量时\",{\"1\":{\"568\":1}}],[\"final修饰变量时可以修饰局部变量\",{\"1\":{\"568\":1}}],[\"final修饰变量\",{\"0\":{\"568\":1},\"1\":{\"568\":1}}],[\"final修饰方法表示最后的方法\",{\"1\":{\"567\":1}}],[\"final修饰方法\",{\"0\":{\"567\":1}}],[\"final修饰类时\",{\"1\":{\"566\":1}}],[\"final修饰类\",{\"0\":{\"566\":1}}],[\"final有最终的\",{\"1\":{\"565\":1}}],[\"final关键字\",{\"0\":{\"565\":1},\"1\":{\"760\":1}}],[\"final关键字的作用\",{\"1\":{\"518\":1}}],[\"final\",{\"1\":{\"312\":1,\"566\":1,\"567\":1,\"570\":2,\"571\":3,\"572\":2,\"573\":4,\"588\":4,\"593\":1,\"598\":1,\"645\":1,\"660\":1,\"702\":1,\"711\":2,\"715\":7,\"719\":10,\"726\":1,\"824\":1,\"859\":1,\"860\":1,\"866\":2,\"867\":5,\"871\":1,\"872\":2,\"904\":1,\"1008\":2,\"1148\":2}}],[\"finally代码块\",{\"1\":{\"760\":1}}],[\"finally代码中有return\",{\"1\":{\"760\":1}}],[\"finally\",{\"0\":{\"760\":1},\"1\":{\"127\":1,\"312\":1,\"760\":2,\"789\":2,\"844\":1,\"864\":1}}],[\"filter方法参数\",{\"1\":{\"1036\":1}}],[\"filter方法用于通过设置的条件过滤出元素\",{\"1\":{\"1036\":1}}],[\"filter\",{\"0\":{\"1036\":1},\"1\":{\"657\":1,\"1027\":1,\"1029\":1,\"1036\":2,\"1037\":2,\"1038\":3,\"1039\":2,\"1040\":2,\"1041\":2,\"1043\":1,\"1044\":1,\"1046\":1,\"1049\":1,\"1052\":5,\"1053\":2}}],[\"fileupload\",{\"1\":{\"1120\":3}}],[\"filereader\",{\"1\":{\"813\":7,\"824\":1}}],[\"filereader简化流\",{\"0\":{\"813\":1}}],[\"filewriter\",{\"1\":{\"807\":15,\"808\":2,\"820\":2,\"824\":1,\"844\":9,\"1113\":1}}],[\"filewriter简化流\",{\"0\":{\"807\":1}}],[\"fileoutputstream\",{\"1\":{\"788\":9,\"789\":12,\"790\":7,\"806\":2,\"808\":1,\"817\":2,\"818\":2,\"824\":2,\"905\":5,\"1113\":2,\"1120\":2}}],[\"fileoutputstream文件字节输出流\",{\"0\":{\"788\":1}}],[\"filefilter\",{\"1\":{\"777\":3}}],[\"filefilter是一个接口\",{\"1\":{\"777\":1}}],[\"file1\",{\"1\":{\"769\":2,\"771\":2}}],[\"file对象表示的文件\",{\"1\":{\"769\":1,\"771\":1,\"774\":1}}],[\"file2\",{\"1\":{\"769\":1,\"771\":1}}],[\"filenotfound\",{\"1\":{\"1100\":1}}],[\"filenotfoundexception\",{\"1\":{\"748\":1,\"788\":1,\"789\":4,\"817\":1,\"923\":1}}],[\"filename=1\",{\"1\":{\"1128\":2}}],[\"filename=\",{\"1\":{\"1120\":1}}],[\"filename=aaa\",{\"1\":{\"121\":1}}],[\"filename\",{\"1\":{\"788\":1,\"794\":1,\"807\":2,\"813\":1,\"819\":1,\"820\":2,\"1194\":1}}],[\"files\",{\"1\":{\"144\":1,\"776\":4,\"777\":4}}],[\"file>\",{\"1\":{\"139\":3}}],[\"file>index\",{\"1\":{\"139\":3}}],[\"fileinputstream文件字节输入流\",{\"0\":{\"794\":1}}],[\"fileinputstream\",{\"1\":{\"127\":4,\"203\":1,\"213\":1,\"214\":1,\"216\":1,\"217\":1,\"794\":18,\"795\":2,\"812\":2,\"814\":4,\"817\":2,\"824\":2,\"905\":5,\"918\":5,\"923\":3,\"1026\":1}}],[\"file\",{\"0\":{\"765\":1},\"1\":{\"127\":6,\"139\":2,\"249\":2,\"769\":22,\"771\":26,\"772\":1,\"776\":23,\"777\":9,\"788\":9,\"790\":1,\"794\":4,\"806\":1,\"807\":6,\"813\":3,\"819\":2,\"820\":2,\"1104\":1,\"1113\":8,\"1120\":3}}],[\"fieldname\",{\"1\":{\"1118\":8}}],[\"fields\",{\"1\":{\"920\":2}}],[\"fieldtest\",{\"1\":{\"920\":1}}],[\"field\",{\"0\":{\"920\":1},\"1\":{\"474\":1,\"475\":1,\"700\":1,\"909\":1,\"920\":19,\"922\":2,\"924\":4,\"1108\":1,\"1118\":11}}],[\"fight\",{\"1\":{\"469\":2}}],[\"fiddler抓包\",{\"1\":{\"115\":1}}],[\"fiddler软件无法抓包\",{\"1\":{\"115\":1}}],[\"fiddler软件便会记录下来\",{\"1\":{\"115\":1}}],[\"fiddler软件\",{\"1\":{\"115\":1}}],[\"fit\",{\"1\":{\"14\":1}}],[\"free\",{\"1\":{\"407\":1,\"925\":1}}],[\"frm\",{\"1\":{\"222\":1,\"225\":1,\"228\":2}}],[\"fromkey\",{\"1\":{\"1026\":8}}],[\"frominclusive\",{\"1\":{\"993\":1,\"1026\":1}}],[\"fromindex++\",{\"1\":{\"737\":1}}],[\"fromindex\",{\"1\":{\"737\":9,\"958\":1,\"960\":1}}],[\"fromelement\",{\"1\":{\"993\":8}}],[\"fromname\",{\"1\":{\"209\":2}}],[\"from\",{\"1\":{\"149\":1,\"158\":3,\"159\":6,\"161\":3,\"162\":19,\"163\":6,\"164\":10,\"165\":4,\"166\":1,\"167\":14,\"168\":28,\"171\":1,\"180\":2,\"181\":1,\"182\":3,\"183\":4,\"184\":6,\"185\":3,\"188\":1,\"195\":1,\"197\":1,\"204\":8,\"214\":1,\"220\":5,\"226\":1,\"229\":1,\"230\":4,\"231\":2,\"232\":5,\"233\":6,\"234\":3,\"238\":1,\"240\":1,\"244\":1,\"247\":5,\"249\":1,\"250\":2,\"251\":1,\"256\":7,\"257\":3,\"258\":2,\"259\":1,\"260\":1,\"261\":3,\"263\":4,\"264\":3,\"265\":1,\"266\":1,\"267\":2,\"272\":1,\"275\":2,\"276\":2,\"277\":1,\"278\":2,\"279\":2,\"280\":1,\"281\":3,\"282\":2,\"283\":3,\"475\":1,\"700\":1,\"1132\":1}}],[\"frontmatter\",{\"1\":{\"45\":1,\"53\":3,\"80\":1,\"82\":1}}],[\"frame\",{\"1\":{\"925\":1}}],[\"frac\",{\"1\":{\"75\":4}}],[\"fragment\",{\"1\":{\"19\":1,\"27\":1}}],[\"friday\",{\"1\":{\"715\":1,\"717\":1,\"718\":1,\"719\":4}}],[\"fri\",{\"1\":{\"72\":1,\"1142\":1}}],[\"f\",{\"1\":{\"38\":1,\"336\":2,\"342\":1,\"564\":1,\"588\":8,\"817\":2,\"940\":2,\"1204\":1}}],[\"b3\",{\"1\":{\"1117\":1}}],[\"b634\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"bj\",{\"1\":{\"1028\":13,\"1029\":1,\"1036\":1,\"1037\":2,\"1040\":1,\"1043\":2,\"1044\":1,\"1049\":1}}],[\"b是2的幂次方\",{\"1\":{\"978\":2}}],[\"b是数集的映射罢了\",{\"1\":{\"679\":1}}],[\"b没有锁\",{\"1\":{\"884\":1}}],[\"b执行\",{\"1\":{\"884\":1}}],[\"b已经执行了\",{\"1\":{\"872\":1}}],[\"b进入sync\",{\"1\":{\"859\":1,\"872\":1}}],[\"b进来了\",{\"1\":{\"884\":1}}],[\"b进来\",{\"1\":{\"851\":1}}],[\"b线程计算1+2+3+\",{\"1\":{\"881\":2}}],[\"b线程打印100\",{\"1\":{\"872\":2}}],[\"b线程打印2\",{\"1\":{\"872\":2}}],[\"b线程进来\",{\"1\":{\"866\":1,\"867\":2}}],[\"b线程进入sync\",{\"1\":{\"860\":1,\"871\":1}}],[\"b线程已经执行了\",{\"1\":{\"860\":1,\"871\":1}}],[\"b线程执行了\",{\"1\":{\"859\":1}}],[\"b线程就可以获取锁\",{\"1\":{\"859\":1}}],[\"b线程设置最小优先级\",{\"1\":{\"838\":2}}],[\"b就处于同步阻塞状态\",{\"1\":{\"859\":1}}],[\"b也想访问同步代码块中的内容\",{\"1\":{\"859\":1}}],[\"b抢到了执行权\",{\"1\":{\"859\":1}}],[\"b抢到了\",{\"1\":{\"851\":1}}],[\"b窗口卖了第0张票\",{\"1\":{\"851\":1}}],[\"b窗口\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"b打印4\",{\"1\":{\"872\":2}}],[\"b打印1\",{\"1\":{\"841\":2}}],[\"b打印0\",{\"1\":{\"841\":2}}],[\"b打印完\",{\"1\":{\"838\":1}}],[\"b任务可以执行\",{\"1\":{\"828\":1}}],[\"bw\",{\"1\":{\"808\":6}}],[\"bdcaegf\",{\"1\":{\"739\":1}}],[\"b时返回\",{\"1\":{\"675\":1}}],[\"bc20\",{\"1\":{\"1132\":1}}],[\"bc\",{\"1\":{\"655\":1}}],[\"b继承c\",{\"1\":{\"533\":1}}],[\"b又继承了c\",{\"1\":{\"533\":1}}],[\"bs\",{\"1\":{\"356\":1}}],[\"bsd\",{\"1\":{\"144\":2}}],[\"b等价于a\",{\"1\":{\"345\":5}}],[\"b++\",{\"1\":{\"344\":1}}],[\"b+树和二叉搜索树的效率\",{\"1\":{\"233\":1}}],[\"b+树其实也是mysql官方推荐我们使用的数据结构\",{\"1\":{\"220\":1}}],[\"b+树其实就是在b树的基础之上进行了优化\",{\"1\":{\"220\":1}}],[\"b+树\",{\"1\":{\"220\":3,\"233\":1}}],[\"b=a\",{\"1\":{\"1005\":1,\"1016\":1}}],[\"b=10\",{\"1\":{\"344\":1}}],[\"b=0\",{\"1\":{\"344\":1}}],[\"b=200\",{\"1\":{\"344\":1}}],[\"b=\",{\"1\":{\"344\":1,\"498\":1}}],[\"b2\",{\"1\":{\"341\":3,\"342\":1,\"1043\":2,\"1044\":2,\"1117\":1}}],[\"branch\",{\"1\":{\"1204\":1}}],[\"brand\",{\"1\":{\"263\":10,\"264\":4,\"267\":2,\"268\":3,\"269\":3,\"271\":9,\"273\":2,\"274\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"br\",{\"1\":{\"814\":9,\"821\":3,\"1113\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"break就有了两个使用场景\",{\"1\":{\"376\":1}}],[\"break并不仅仅能用在循环中\",{\"1\":{\"376\":1}}],[\"break意为\",{\"1\":{\"376\":1}}],[\"break\",{\"0\":{\"376\":1},\"1\":{\"312\":1,\"359\":5,\"375\":1,\"376\":1,\"718\":3,\"720\":3,\"794\":1,\"821\":1,\"825\":2,\"1131\":2}}],[\"browser\",{\"1\":{\"145\":1,\"303\":1,\"1077\":1}}],[\"bbb\",{\"1\":{\"356\":2}}],[\"bb\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"817\":2,\"924\":1,\"1028\":1}}],[\"btree\",{\"1\":{\"220\":2,\"232\":1,\"233\":1}}],[\"b树对比红黑树和二叉树最大的进步\",{\"1\":{\"220\":1}}],[\"b树\",{\"1\":{\"220\":3}}],[\"b账户信息不对\",{\"1\":{\"209\":1}}],[\"b账户的钱没有增加\",{\"1\":{\"208\":1}}],[\"best\",{\"1\":{\"978\":1}}],[\"benz\",{\"1\":{\"599\":1}}],[\"be\",{\"1\":{\"475\":1,\"700\":1,\"954\":1}}],[\"beattacked\",{\"1\":{\"469\":2}}],[\"beanutils\",{\"1\":{\"1118\":4,\"1132\":3}}],[\"bean里面的变量名\",{\"1\":{\"261\":1}}],[\"bean\",{\"1\":{\"234\":2,\"240\":1,\"244\":1,\"247\":2,\"250\":2,\"251\":1,\"256\":2,\"259\":1,\"260\":1,\"261\":3,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"276\":3,\"277\":2,\"279\":3,\"280\":2,\"282\":3,\"283\":7,\"919\":1,\"920\":2,\"921\":2,\"922\":2}}],[\"before\",{\"1\":{\"273\":1,\"825\":6,\"870\":2,\"871\":1,\"872\":2,\"880\":1,\"892\":1,\"902\":1,\"905\":1}}],[\"beforefirst\",{\"1\":{\"202\":1}}],[\"beijingcount\",{\"1\":{\"1037\":2}}],[\"beijing\",{\"1\":{\"261\":1}}],[\"between\",{\"1\":{\"162\":2,\"220\":1,\"230\":2}}],[\"begin\",{\"1\":{\"127\":2}}],[\"birthday=2000\",{\"1\":{\"1118\":1}}],[\"bitkeeper公司\",{\"1\":{\"1183\":1}}],[\"bit\",{\"1\":{\"321\":1}}],[\"big\",{\"1\":{\"799\":1}}],[\"bigdecimal\",{\"1\":{\"214\":1,\"247\":3,\"675\":7}}],[\"bigint\",{\"1\":{\"153\":1,\"233\":2}}],[\"binaryoperator\",{\"1\":{\"1050\":1}}],[\"binaryoperator<t>\",{\"1\":{\"1050\":2}}],[\"bind\",{\"1\":{\"905\":1}}],[\"bindexception\",{\"1\":{\"905\":1}}],[\"bin目录下唤出cmd\",{\"1\":{\"131\":1,\"132\":1}}],[\"bin\",{\"1\":{\"130\":1,\"149\":2,\"151\":1,\"156\":1}}],[\"bing\",{\"1\":{\"120\":4,\"739\":3}}],[\"bye\",{\"1\":{\"1096\":1}}],[\"by的select列中\",{\"1\":{\"167\":1}}],[\"by对查询数据结果集进行排序\",{\"1\":{\"166\":1}}],[\"by\",{\"0\":{\"166\":1,\"167\":1},\"1\":{\"149\":2,\"166\":1,\"167\":16,\"168\":13,\"256\":1,\"424\":2,\"747\":1,\"1132\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"923\":4}}],[\"byte是最小的\",{\"1\":{\"338\":1}}],[\"byte类型也叫字节型\",{\"1\":{\"322\":1}}],[\"bytes1\",{\"1\":{\"905\":3,\"923\":2}}],[\"bytestream\",{\"1\":{\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1}}],[\"bytes\",{\"1\":{\"127\":6,\"729\":7,\"738\":2,\"788\":3,\"794\":11,\"795\":3,\"801\":8,\"892\":6,\"893\":6,\"902\":3,\"903\":3,\"905\":6,\"923\":3,\"1113\":3,\"1116\":3,\"1120\":3,\"1124\":3,\"1128\":3}}],[\"byte\",{\"1\":{\"127\":4,\"247\":4,\"312\":1,\"321\":1,\"322\":1,\"326\":1,\"340\":5,\"341\":3,\"342\":5,\"359\":1,\"407\":1,\"573\":5,\"701\":2,\"729\":6,\"738\":3,\"786\":4,\"788\":7,\"790\":2,\"792\":3,\"794\":12,\"795\":4,\"801\":12,\"817\":1,\"890\":3,\"892\":7,\"893\":4,\"902\":2,\"903\":2,\"905\":6,\"923\":8,\"1113\":2,\"1116\":2,\"1120\":2,\"1124\":2,\"1128\":2}}],[\"banana\",{\"0\":{\"1212\":1}}],[\"bank\",{\"1\":{\"720\":3}}],[\"bankpay\",{\"1\":{\"720\":1}}],[\"back\",{\"1\":{\"978\":2}}],[\"backgroundcolor\",{\"1\":{\"71\":1}}],[\"background\",{\"1\":{\"17\":1}}],[\"babe\",{\"1\":{\"910\":1}}],[\"balance\",{\"1\":{\"517\":1}}],[\"baidu\",{\"1\":{\"316\":1}}],[\"baigujin\",{\"1\":{\"275\":1}}],[\"baigujing\",{\"1\":{\"180\":1,\"275\":1}}],[\"baseparam\",{\"1\":{\"1132\":18}}],[\"baseservlet就会将这个object转换为json字符串\",{\"1\":{\"1132\":1}}],[\"baseservlet\",{\"1\":{\"1132\":3}}],[\"basestaff\",{\"1\":{\"594\":5}}],[\"base看一下其生成的jsp\",{\"1\":{\"1121\":1}}],[\"basemap5\",{\"1\":{\"283\":3}}],[\"basecourseresultmap2\",{\"1\":{\"283\":2}}],[\"basecourseresultmap1\",{\"1\":{\"282\":2}}],[\"baseclazzmap\",{\"1\":{\"279\":2}}],[\"baseresultmap2\",{\"1\":{\"280\":2}}],[\"baseresultmap\",{\"1\":{\"279\":2}}],[\"baseusermap2\",{\"1\":{\"277\":2}}],[\"baseusermap\",{\"1\":{\"276\":2}}],[\"base\",{\"1\":{\"267\":6,\"321\":1,\"522\":1}}],[\"basicdatasourcefactory\",{\"1\":{\"214\":1}}],[\"batchuseprepaprestatement\",{\"1\":{\"207\":1}}],[\"batchusestatement\",{\"1\":{\"206\":2}}],[\"batchuseforeach\",{\"1\":{\"205\":1}}],[\"bat文件\",{\"1\":{\"131\":1,\"132\":1}}],[\"b服务器提供一个获取请求头的方法是requestb\",{\"1\":{\"128\":1}}],[\"buf\",{\"1\":{\"890\":2,\"892\":2}}],[\"bufferedreader\",{\"1\":{\"814\":8,\"821\":3,\"824\":1,\"1113\":2,\"1116\":1}}],[\"bufferedreader缓冲流\",{\"0\":{\"814\":1}}],[\"bufferedwriter\",{\"1\":{\"808\":5,\"824\":1,\"1113\":6}}],[\"bufferedwriter缓冲流\",{\"0\":{\"808\":1}}],[\"bufferedinputstream\",{\"1\":{\"795\":7,\"824\":1}}],[\"bufferedinputstream缓冲字节输入流\",{\"0\":{\"795\":1}}],[\"bufferedoutputstream\",{\"1\":{\"790\":9,\"806\":1,\"824\":1}}],[\"bufferedoutputstream缓冲字节输出流\",{\"0\":{\"790\":1}}],[\"buffer\",{\"1\":{\"127\":12}}],[\"bubblesort\",{\"1\":{\"739\":2}}],[\"building\",{\"1\":{\"491\":2}}],[\"build\",{\"1\":{\"234\":1,\"244\":1,\"1110\":1,\"1131\":1}}],[\"bu\",{\"1\":{\"167\":1}}],[\"bug等时\",{\"1\":{\"567\":1}}],[\"bug\",{\"1\":{\"120\":1}}],[\"boundary=\",{\"1\":{\"1120\":1}}],[\"bodyservlet\",{\"1\":{\"1124\":1}}],[\"bodyservlet2\",{\"1\":{\"1113\":1,\"1124\":1}}],[\"bodyservlet1\",{\"1\":{\"1113\":1}}],[\"body2\",{\"1\":{\"1113\":1,\"1124\":1}}],[\"body1\",{\"1\":{\"1113\":1,\"1124\":1}}],[\"body\",{\"1\":{\"1113\":1}}],[\"body>\",{\"1\":{\"115\":1}}],[\"boy\",{\"1\":{\"951\":1}}],[\"box\",{\"1\":{\"867\":48}}],[\"boxing\",{\"1\":{\"703\":1}}],[\"bonus\",{\"1\":{\"594\":6}}],[\"bootstrap\",{\"1\":{\"912\":1}}],[\"boolean的全局常量\",{\"1\":{\"711\":1}}],[\"boolean的valueof方法\",{\"1\":{\"711\":1}}],[\"boolean对象之间的比较\",{\"1\":{\"708\":1}}],[\"boolean只能自己和自己比较\",{\"1\":{\"346\":1}}],[\"boolean类型不参与基本数据类型的数据类型转换\",{\"1\":{\"337\":1}}],[\"boolean类型\",{\"1\":{\"325\":1}}],[\"boolean\",{\"1\":{\"201\":1,\"202\":2,\"204\":4,\"209\":1,\"247\":4,\"312\":1,\"325\":1,\"347\":2,\"349\":1,\"407\":1,\"518\":4,\"652\":1,\"658\":1,\"663\":1,\"671\":1,\"673\":1,\"701\":2,\"705\":6,\"711\":8,\"736\":6,\"769\":1,\"771\":7,\"772\":1,\"773\":1,\"774\":3,\"777\":3,\"788\":2,\"807\":3,\"817\":1,\"819\":1,\"820\":2,\"825\":2,\"842\":1,\"844\":1,\"866\":2,\"867\":5,\"919\":1,\"922\":2,\"924\":4,\"953\":19,\"955\":2,\"958\":1,\"959\":2,\"968\":5,\"972\":2,\"975\":6,\"981\":9,\"993\":3,\"997\":4,\"1018\":4,\"1022\":1,\"1023\":4,\"1026\":6,\"1043\":3,\"1044\":3,\"1045\":2,\"1086\":1,\"1151\":1}}],[\"book\",{\"1\":{\"153\":3,\"155\":2}}],[\"bottom\",{\"1\":{\"71\":1}}],[\"b1\",{\"1\":{\"74\":1,\"341\":3,\"1043\":2,\"1044\":2,\"1045\":2,\"1117\":1}}],[\"b\",{\"1\":{\"34\":1,\"145\":2,\"233\":4,\"324\":1,\"334\":1,\"336\":7,\"341\":3,\"342\":3,\"344\":4,\"345\":9,\"346\":7,\"347\":7,\"348\":5,\"349\":4,\"354\":1,\"356\":2,\"389\":2,\"498\":2,\"588\":4,\"598\":1,\"654\":2,\"655\":1,\"675\":2,\"679\":1,\"711\":2,\"739\":1,\"771\":2,\"786\":6,\"788\":10,\"790\":3,\"792\":3,\"794\":3,\"795\":2,\"813\":1,\"817\":2,\"828\":1,\"838\":3,\"841\":3,\"856\":3,\"857\":2,\"859\":1,\"860\":1,\"866\":2,\"867\":4,\"869\":1,\"871\":1,\"872\":4,\"873\":4,\"905\":1,\"916\":3,\"923\":1,\"924\":2,\"978\":12,\"999\":1,\"1001\":4,\"1003\":2,\"1005\":1,\"1008\":3,\"1016\":3,\"1050\":8,\"1077\":2,\"1132\":2,\"1204\":2}}],[\"b|c\",{\"1\":{\"34\":1}}],[\"blaise\",{\"1\":{\"441\":1}}],[\"blue\",{\"1\":{\"23\":2}}],[\"blockingqueue\",{\"0\":{\"979\":1}}],[\"blocked\",{\"1\":{\"847\":1}}],[\"block\",{\"1\":{\"9\":1,\"491\":2}}],[\"bloghome\",{\"1\":{\"0\":1}}],[\"blog\",{\"0\":{\"0\":1}}],[\"背景条件\",{\"1\":{\"936\":1}}],[\"背景\",{\"0\":{\"17\":1},\"1\":{\"940\":1}}],[\"使它们能够方便地打印各种数据值表示形式\",{\"1\":{\"819\":1}}],[\"使它们填充满幻灯片垂直方向上的剩余空间\",{\"1\":{\"15\":1}}],[\"使代码变得更加优雅\",{\"1\":{\"657\":1}}],[\"使之与参数\",{\"1\":{\"833\":2}}],[\"使之与外部发生联系\",{\"1\":{\"515\":1}}],[\"使之能轻松成为mysql的代替品\",{\"1\":{\"143\":1}}],[\"使其一致\",{\"1\":{\"801\":1}}],[\"使其构成一个不可分割的独立实体\",{\"1\":{\"515\":1}}],[\"使其成为静态成员变量\",{\"1\":{\"474\":1}}],[\"使方法生效\",{\"1\":{\"383\":1}}],[\"使循环终止\",{\"1\":{\"361\":1}}],[\"使得代码更加健壮\",{\"1\":{\"938\":1}}],[\"使得可以输出三个num\",{\"1\":{\"619\":1}}],[\"使得开发人员可以更加方便地使用资源实例\",{\"1\":{\"213\":1}}],[\"使得java程序可以与不同的数据库进行通信而无需改变代码\",{\"1\":{\"191\":1}}],[\"使得java程序可以通过这些api来连接和操作各种关系型数据库\",{\"1\":{\"191\":1}}],[\"使得在主播带货\",{\"1\":{\"116\":1}}],[\"使数据符合规范\",{\"1\":{\"168\":1}}],[\"使相同的\",{\"1\":{\"31\":1}}],[\"使用git管理起来\",{\"1\":{\"1205\":1}}],[\"使用getclass方法比较\",{\"1\":{\"675\":1}}],[\"使用分支的好处是可以让多个人在同一个仓库中同时进行开发\",{\"1\":{\"1204\":1}}],[\"使用使用这个方法获得的是json\",{\"1\":{\"1132\":1}}],[\"使用response主要为了输出\",{\"1\":{\"1110\":1}}],[\"使用resultmap\",{\"1\":{\"261\":1}}],[\"使用request主要为了输入\",{\"1\":{\"1110\":1}}],[\"使用这个实例其实维护的也是键值对\",{\"1\":{\"1095\":1}}],[\"使用这些已经预先定义好的方法和工具实现自己的需求\",{\"1\":{\"658\":1}}],[\"使用其\",{\"1\":{\"1087\":1}}],[\"使用anymatch\",{\"1\":{\"1043\":1}}],[\"使用api成组使用\",{\"1\":{\"970\":1}}],[\"使用流解决上述问题\",{\"0\":{\"1029\":1}}],[\"使用键的自然顺序构造一个新的\",{\"1\":{\"1025\":1}}],[\"使用计算得到的hash\",{\"1\":{\"1016\":1}}],[\"使用两个int值来存储头和尾的位置\",{\"1\":{\"976\":1}}],[\"使用两个int值来代表头和尾\",{\"1\":{\"970\":1}}],[\"使用两个横线进行注释的时候\",{\"1\":{\"152\":1}}],[\"使用线性表存储数据的方式可以这样理解\",{\"1\":{\"957\":1}}],[\"使用迭代器的删除方法\",{\"1\":{\"956\":1}}],[\"使用迭代器过程中\",{\"1\":{\"955\":1}}],[\"使用foreach\",{\"1\":{\"956\":1}}],[\"使用form表单\",{\"1\":{\"115\":2}}],[\"使用toarray方法需要谨慎考虑\",{\"1\":{\"954\":1}}],[\"使用tostring方法\",{\"1\":{\"704\":1}}],[\"使用最多的一类方法\",{\"1\":{\"951\":1}}],[\"使用数组实现不现实\",{\"1\":{\"995\":1}}],[\"使用数组\",{\"1\":{\"950\":1}}],[\"使用数组完成一下这些功能\",{\"1\":{\"950\":1}}],[\"使用单个大写字母\",{\"1\":{\"939\":1}}],[\"使用单引号引起来的字符都是\",{\"1\":{\"328\":1}}],[\"使用泛型后\",{\"1\":{\"938\":1}}],[\"使用泛型\",{\"1\":{\"936\":1}}],[\"使用object持有这些类\",{\"1\":{\"936\":1}}],[\"使用了一个指针\",{\"1\":{\"925\":1}}],[\"使用了服务器a产品\",{\"1\":{\"128\":1}}],[\"使用反射方式来强制创建某个类或接口对应的java\",{\"1\":{\"914\":1}}],[\"使用多线程优化v3\",{\"0\":{\"895\":1}}],[\"使用多态的形式访问\",{\"1\":{\"578\":1}}],[\"使用工具类优化v1\",{\"0\":{\"893\":1}}],[\"使用wait\",{\"1\":{\"872\":2}}],[\"使用where关键词\",{\"1\":{\"159\":1}}],[\"使用条件不同\",{\"1\":{\"873\":1}}],[\"使用条件\",{\"1\":{\"870\":1}}],[\"使用同步方法\",{\"1\":{\"867\":1}}],[\"使用同步代码块\",{\"1\":{\"867\":1}}],[\"使用默认的字符集\",{\"1\":{\"813\":1}}],[\"使用角度\",{\"1\":{\"813\":1}}],[\"使用简化流写数据\",{\"1\":{\"807\":1}}],[\"使用转换流读取数据\",{\"1\":{\"812\":1}}],[\"使用转换输出流写数据\",{\"1\":{\"806\":1}}],[\"使用转义字符意义不大\",{\"1\":{\"355\":1}}],[\"使用平台的默认字符集将此\",{\"1\":{\"801\":1}}],[\"使用字节打印流写数据\",{\"1\":{\"819\":1}}],[\"使用字节流读取中文\",{\"1\":{\"797\":1}}],[\"使用字节流读取英文数字\",{\"1\":{\"797\":1}}],[\"使用字节流复制\",{\"1\":{\"796\":1}}],[\"使用字符打印流写数据\",{\"1\":{\"820\":1}}],[\"使用字符流复制\",{\"1\":{\"796\":1}}],[\"使用字符串常量池\",{\"1\":{\"731\":1}}],[\"使用指定文件创建不具有自动行刷新的新\",{\"1\":{\"820\":1}}],[\"使用指定的底层\",{\"1\":{\"817\":1}}],[\"使用指定的字符集将此\",{\"1\":{\"801\":1}}],[\"使用指定的缓冲区\",{\"1\":{\"795\":1}}],[\"使用指定缓冲区\",{\"1\":{\"790\":1}}],[\"使用指南\",{\"1\":{\"80\":2},\"2\":{\"44\":1,\"46\":1,\"49\":1,\"77\":1,\"83\":1,\"84\":1}}],[\"使用所有带缓冲区的输出流\",{\"1\":{\"790\":1}}],[\"使用缓冲的输入流循环读取数据\",{\"1\":{\"814\":1}}],[\"使用缓冲的输入流读取数据\",{\"1\":{\"814\":1}}],[\"使用缓冲的输入流\",{\"1\":{\"795\":1}}],[\"使用缓冲输出流写数据\",{\"1\":{\"808\":1}}],[\"使用缓冲输出流\",{\"1\":{\"790\":1}}],[\"使用缓存\",{\"1\":{\"120\":1}}],[\"使用系统默认换行符\",{\"1\":{\"789\":1}}],[\"使用带append的构造方法\",{\"1\":{\"789\":1}}],[\"使用带比较器的sort方法\",{\"1\":{\"741\":1}}],[\"使用过这些的\",{\"1\":{\"1020\":1}}],[\"使用过程中\",{\"1\":{\"951\":1}}],[\"使用过滤器\",{\"1\":{\"777\":2}}],[\"使用过方法了\",{\"1\":{\"442\":1}}],[\"使用给定string中的字符替换词序列的子字符串中的字符\",{\"1\":{\"743\":2}}],[\"使用lambda\",{\"1\":{\"741\":1}}],[\"使用limit对数据表查询结果集大小进行限定\",{\"1\":{\"164\":1}}],[\"使用时按照规范使用即可\",{\"1\":{\"726\":1}}],[\"使用时还需要创建对象才能用\",{\"1\":{\"608\":1}}],[\"使用基础的date类足够了\",{\"1\":{\"721\":1}}],[\"使用枚举的场景\",{\"0\":{\"721\":1}}],[\"使用枚举类型来替代常量\",{\"1\":{\"718\":1}}],[\"使用枚举类型来改写一下这个方法\",{\"1\":{\"718\":1}}],[\"使用enum关键字定义枚举类型并编译后\",{\"1\":{\"719\":1}}],[\"使用enum关键字实现枚举\",{\"0\":{\"716\":1},\"1\":{\"714\":1}}],[\"使用constructor创建对象\",{\"1\":{\"919\":1}}],[\"使用callable\",{\"1\":{\"881\":3}}],[\"使用cfr进行反编译\",{\"1\":{\"719\":1}}],[\"使用c语言开发相关应用程序\",{\"1\":{\"303\":1}}],[\"使用关键字enum\",{\"1\":{\"717\":1}}],[\"使用包装类要注意空指针异常\",{\"1\":{\"708\":1}}],[\"使用任何一个引用去修改对象的状态\",{\"1\":{\"699\":1}}],[\"使用前提\",{\"0\":{\"652\":1}}],[\"使用匿名内部类\",{\"1\":{\"741\":1}}],[\"使用匿名内部类的优点\",{\"1\":{\"649\":1}}],[\"使用匿名对象简洁方便\",{\"1\":{\"483\":1}}],[\"使用匿名对象作为方法的返回值\",{\"1\":{\"481\":1}}],[\"使用匿名对象作为方法的实参\",{\"1\":{\"481\":1}}],[\"使用局部内部类就得不偿失了\",{\"1\":{\"641\":1}}],[\"使用局部内部类的优点\",{\"1\":{\"641\":1}}],[\"使用内部类只是为了把一个类隐藏在另外一个类的内部\",{\"1\":{\"620\":1}}],[\"使用链式调用的形式为\",{\"1\":{\"606\":1}}],[\"使用接口有如下优点\",{\"1\":{\"597\":1}}],[\"使用接口的方式写这个关系\",{\"1\":{\"234\":1}}],[\"使用该语法\",{\"1\":{\"586\":1}}],[\"使用该方式这些花销就可避免\",{\"1\":{\"213\":1}}],[\"使用父类引用指向子类对象\",{\"1\":{\"583\":1}}],[\"使用父类的实现即可\",{\"1\":{\"567\":1}}],[\"使用快捷键alt\",{\"1\":{\"562\":1,\"675\":1}}],[\"使用子类引用接收\",{\"1\":{\"548\":1,\"555\":1}}],[\"使用子查询实现分组统计等等\",{\"1\":{\"184\":1}}],[\"使用子查询查询最大值或最小值\",{\"1\":{\"184\":1}}],[\"使用继承extends\",{\"1\":{\"520\":1}}],[\"使用private私有化成员变量\",{\"1\":{\"518\":1}}],[\"使用者能够完全得到自己想要的功能\",{\"1\":{\"515\":1}}],[\"使用idea来开发web应用\",{\"1\":{\"1075\":1}}],[\"使用idea自动生成的哈希算法\",{\"1\":{\"683\":1}}],[\"使用int值\",{\"1\":{\"970\":1}}],[\"使用integer\",{\"1\":{\"705\":1}}],[\"使用integer的构造方法\",{\"1\":{\"704\":1}}],[\"使用instanceof比较\",{\"1\":{\"675\":1}}],[\"使用in查询\",{\"0\":{\"272\":1}}],[\"使用import关键字手动导包的语法是\",{\"1\":{\"503\":1}}],[\"使用构造方法对象创建对象\",{\"1\":{\"919\":1}}],[\"使用构造方法改进引例\",{\"1\":{\"465\":2}}],[\"使用构造代码块赋值也是一个不错的选择\",{\"1\":{\"490\":1}}],[\"使用new对象的方式创建对象\",{\"1\":{\"488\":1}}],[\"使用new关键字就会创建新的对象\",{\"1\":{\"454\":1}}],[\"使用类名\",{\"1\":{\"475\":1}}],[\"使用静态成员变量修改之前的引例\",{\"1\":{\"474\":2}}],[\"使用案例\",{\"0\":{\"1053\":1},\"1\":{\"474\":1}}],[\"使用都不依赖于对象\",{\"1\":{\"474\":1}}],[\"使用与特点\",{\"1\":{\"474\":1,\"475\":1}}],[\"使用起来不是很方便\",{\"1\":{\"472\":1}}],[\"使用对象名点来调用\",{\"1\":{\"460\":1}}],[\"使用对象获取对象的属性和行为\",{\"1\":{\"453\":1}}],[\"使用对象传值\",{\"1\":{\"252\":2}}],[\"使用递归要深思熟虑递归的深度和出口\",{\"1\":{\"442\":1}}],[\"使用递归求解一个问题\",{\"1\":{\"442\":1}}],[\"使用递归计算n\",{\"1\":{\"442\":1}}],[\"使用方式类似于iterator\",{\"1\":{\"1112\":1}}],[\"使用方式\",{\"1\":{\"936\":2}}],[\"使用方式等都不会改变\",{\"1\":{\"570\":1}}],[\"使用方式等等\",{\"1\":{\"568\":1}}],[\"使用方式是\",{\"1\":{\"465\":1}}],[\"使用方法重载\",{\"1\":{\"390\":1}}],[\"使用方便\",{\"1\":{\"143\":1}}],[\"使用细节\",{\"0\":{\"384\":1}}],[\"使用细节和注意事项\",{\"1\":{\"346\":1}}],[\"使用void标记的方法\",{\"1\":{\"382\":1}}],[\"使用场景\",{\"0\":{\"478\":1,\"649\":1,\"712\":1},\"1\":{\"377\":1,\"378\":1,\"1036\":1,\"1037\":1,\"1040\":1}}],[\"使用场景及作用\",{\"1\":{\"376\":1}}],[\"使用标签标注循环层次时\",{\"1\":{\"376\":1}}],[\"使用注意事项\",{\"1\":{\"376\":1}}],[\"使用步骤\",{\"0\":{\"352\":1}}],[\"使用以下方法\",{\"1\":{\"726\":2}}],[\"使用以下声明方式声明的代码块\",{\"1\":{\"486\":1,\"493\":1}}],[\"使用以下代码\",{\"1\":{\"348\":1}}],[\"使用以下性能比较高的电脑\",{\"1\":{\"126\":1}}],[\"使用双引号引起来的字符串都是\",{\"1\":{\"328\":1}}],[\"使用变量的第一步需要明确数据类型的概念\",{\"1\":{\"319\":1}}],[\"使用驼峰命名法可以清晰得看到不同单词组成的新字符串\",{\"1\":{\"316\":1}}],[\"使用join后输出结果\",{\"1\":{\"840\":1}}],[\"使用javase就足够了\",{\"1\":{\"1077\":1}}],[\"使用java代码计算\",{\"1\":{\"336\":2}}],[\"使用java进行安卓开发十分流行\",{\"1\":{\"303\":1}}],[\"使用java做服务器端最大的优点是稳定\",{\"1\":{\"303\":1}}],[\"使用jdbc连接来管理事务\",{\"1\":{\"248\":1}}],[\"使用jdbc进行增删改查\",{\"0\":{\"193\":1}}],[\"使用别名的方式来解决\",{\"1\":{\"261\":1}}],[\"使用别名\",{\"1\":{\"261\":1}}],[\"使用具体的类型\",{\"1\":{\"258\":1}}],[\"使用map传值\",{\"0\":{\"253\":1},\"1\":{\"253\":3,\"254\":1}}],[\"使用mybatis做查询\",{\"1\":{\"1131\":1}}],[\"使用mybatis自带的连接池\",{\"1\":{\"248\":1}}],[\"使用mybatis必须以sqlsessionfactory的实例为核心\",{\"1\":{\"234\":1}}],[\"使用外部的连接池\",{\"1\":{\"248\":1}}],[\"使用一下mybatis\",{\"1\":{\"1131\":1}}],[\"使用一些类作为key时\",{\"1\":{\"1009\":1}}],[\"使用一个流的时候\",{\"1\":{\"1033\":1}}],[\"使用一个集合类\",{\"1\":{\"956\":2}}],[\"使用一个时间戳来创建对应时间的日期对象\",{\"1\":{\"723\":1}}],[\"使用一个对象工厂实例来完成实例化工作\",{\"1\":{\"247\":1}}],[\"使用一种大类型\",{\"1\":{\"116\":1}}],[\"使用session\",{\"0\":{\"1152\":1}}],[\"使用set方式\",{\"1\":{\"158\":1}}],[\"使用split方法\",{\"1\":{\"739\":2}}],[\"使用static\",{\"1\":{\"715\":1}}],[\"使用static关键字修饰成员变量\",{\"1\":{\"474\":1}}],[\"使用string里的api\",{\"1\":{\"704\":1}}],[\"使用string数组保存人名\",{\"1\":{\"420\":1}}],[\"使用scanner能多次接收一个int数据\",{\"1\":{\"354\":1}}],[\"使用scanner进行输入\",{\"1\":{\"354\":1}}],[\"使用scanner不同方法录入多种数据\",{\"1\":{\"352\":1}}],[\"使用scanner在需要录入多种数据类型时\",{\"1\":{\"352\":1}}],[\"使用scanner在单独录入数据时\",{\"1\":{\"352\":1}}],[\"使用scanner键盘录入是很不错的选择\",{\"1\":{\"351\":1}}],[\"使用sqlsession内部封装的connection\",{\"1\":{\"243\":2}}],[\"使用sqlsession提交事务\",{\"1\":{\"242\":2}}],[\"使用完毕后未主动释放\",{\"1\":{\"925\":1}}],[\"使用完毕\",{\"1\":{\"213\":1}}],[\"使用池化技术可以发挥更加显著的优势\",{\"1\":{\"213\":1}}],[\"使用的是特殊的响应头\",{\"1\":{\"1142\":1}}],[\"使用的是匹配度更高的servlet\",{\"1\":{\"1091\":1}}],[\"使用的方法\",{\"1\":{\"1026\":1}}],[\"使用的原则\",{\"1\":{\"510\":1}}],[\"使用的编码集是\",{\"1\":{\"324\":1}}],[\"使用的时候注解需要通过\",{\"1\":{\"924\":1}}],[\"使用的时候\",{\"1\":{\"254\":1,\"939\":1,\"945\":1,\"956\":2}}],[\"使用的\",{\"1\":{\"213\":1,\"1190\":1}}],[\"使用连接池有哪些好处\",{\"1\":{\"213\":1}}],[\"使用事务\",{\"0\":{\"209\":1}}],[\"使用deque\",{\"1\":{\"970\":1}}],[\"使用deque来替代stack\",{\"1\":{\"970\":1}}],[\"使用decimal\",{\"1\":{\"153\":1}}],[\"使用double\",{\"1\":{\"705\":1}}],[\"使用distinct对数据表中一个或多个字段重复的数据进行过滤\",{\"1\":{\"163\":1}}],[\"使用db\",{\"1\":{\"152\":1}}],[\"使用1\",{\"1\":{\"149\":1}}],[\"使用4个字节来代表一个字符\",{\"1\":{\"149\":1}}],[\"使用下划线代替\",{\"1\":{\"149\":1}}],[\"使用浏览器\",{\"1\":{\"115\":1}}],[\"使用何种方法向当前的请求资源地址发起请求\",{\"1\":{\"115\":1}}],[\"使用\",{\"0\":{\"453\":1},\"1\":{\"5\":3,\"115\":1,\"153\":1,\"162\":2,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"234\":2,\"240\":1,\"252\":1,\"255\":2,\"262\":1,\"276\":1,\"308\":2,\"497\":1,\"562\":1,\"592\":1,\"606\":1,\"936\":1,\"956\":1,\"1026\":1,\"1089\":1}}],[\"ly\",{\"1\":{\"1132\":1}}],[\"ll\",{\"1\":{\"1028\":1}}],[\"luck\",{\"1\":{\"978\":2}}],[\"lu\",{\"1\":{\"724\":1}}],[\"lf\",{\"1\":{\"356\":1}}],[\"l\",{\"1\":{\"336\":2,\"729\":2,\"817\":2,\"1120\":1}}],[\"lte\",{\"1\":{\"264\":1,\"265\":1}}],[\"lt\",{\"1\":{\"264\":1,\"265\":4}}],[\"ls\",{\"1\":{\"208\":1,\"740\":1,\"741\":1,\"824\":1,\"919\":1,\"951\":2,\"953\":12,\"955\":5,\"956\":5,\"1034\":2}}],[\"lock它是一把真正的\",{\"1\":{\"864\":1}}],[\"lock是个接口\",{\"1\":{\"864\":1}}],[\"lock的使用\",{\"1\":{\"864\":1}}],[\"locks\",{\"1\":{\"864\":2}}],[\"lock\",{\"0\":{\"863\":1},\"1\":{\"863\":1,\"864\":9}}],[\"localport\",{\"1\":{\"1111\":1,\"1115\":2}}],[\"localaddr\",{\"1\":{\"1111\":1,\"1115\":2}}],[\"localdate\",{\"1\":{\"721\":1}}],[\"local\",{\"1\":{\"331\":1,\"824\":2}}],[\"localcachescope\",{\"1\":{\"246\":1}}],[\"localhost目录下新建一个root\",{\"1\":{\"139\":1}}],[\"localhost里面也有\",{\"1\":{\"138\":1}}],[\"localhost\",{\"0\":{\"136\":1},\"1\":{\"134\":4,\"136\":4,\"137\":3,\"138\":1,\"139\":3,\"192\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"234\":2,\"244\":1,\"245\":1,\"1078\":1,\"1085\":2,\"1104\":1,\"1111\":3,\"1113\":2,\"1117\":1,\"1118\":1,\"1120\":4,\"1129\":1,\"1130\":3,\"1131\":1,\"1138\":2,\"1140\":2,\"1141\":2,\"1142\":1,\"1145\":4,\"1150\":2,\"1158\":1}}],[\"localhost指的是本机\",{\"1\":{\"113\":1}}],[\"locationservlet\",{\"1\":{\"1129\":1}}],[\"location\",{\"0\":{\"1129\":1},\"1\":{\"120\":1,\"121\":1,\"1125\":1,\"1129\":2,\"1131\":1}}],[\"lo\",{\"1\":{\"735\":2}}],[\"lowerkey\",{\"1\":{\"1026\":1}}],[\"lowerentry\",{\"1\":{\"1026\":1}}],[\"lowercount++\",{\"1\":{\"737\":1}}],[\"lowercount\",{\"1\":{\"737\":2}}],[\"low\",{\"1\":{\"706\":2}}],[\"low=\",{\"1\":{\"706\":1}}],[\"lol\",{\"1\":{\"469\":1}}],[\"lombok在项目中\",{\"1\":{\"262\":1}}],[\"lombok\",{\"0\":{\"262\":1},\"1\":{\"262\":2}}],[\"long任何数据类型与float进行计算\",{\"1\":{\"340\":1}}],[\"long\",{\"1\":{\"247\":4,\"312\":1,\"322\":2,\"326\":1,\"336\":2,\"337\":1,\"340\":1,\"341\":2,\"407\":1,\"442\":3,\"701\":2,\"722\":1,\"723\":2,\"724\":2,\"741\":2,\"775\":3,\"817\":1,\"824\":1,\"839\":1,\"883\":5,\"884\":5,\"904\":1,\"1037\":2,\"1038\":1,\"1039\":1,\"1049\":2,\"1120\":2}}],[\"longtext\",{\"1\":{\"153\":1}}],[\"loadonstartup为正数\",{\"1\":{\"1110\":1}}],[\"loadonstartup\",{\"1\":{\"1086\":1,\"1093\":3,\"1096\":1,\"1097\":1,\"1131\":1}}],[\"loadfactor\",{\"1\":{\"984\":1,\"988\":1,\"1017\":1,\"1022\":2}}],[\"loadclass\",{\"1\":{\"916\":2,\"923\":1}}],[\"loading\",{\"1\":{\"497\":1}}],[\"load\",{\"1\":{\"203\":1,\"213\":1,\"214\":1,\"216\":1,\"217\":1,\"918\":8,\"1006\":1,\"1026\":1,\"1097\":2,\"1107\":1,\"1109\":2}}],[\"logcls\",{\"1\":{\"923\":4}}],[\"log4j2\",{\"1\":{\"246\":1}}],[\"log4j\",{\"1\":{\"246\":1}}],[\"logprefix\",{\"1\":{\"246\":1}}],[\"logical\",{\"1\":{\"347\":1}}],[\"logimpl\",{\"1\":{\"246\":2}}],[\"loginservlet\",{\"1\":{\"1159\":1}}],[\"login对应的处理方法\",{\"1\":{\"1131\":1}}],[\"loginannotation\",{\"1\":{\"924\":3}}],[\"loginmethod\",{\"1\":{\"924\":3}}],[\"login2\",{\"1\":{\"204\":1}}],[\"login\",{\"1\":{\"115\":1,\"204\":3,\"240\":1,\"924\":7,\"1078\":4,\"1104\":1,\"1110\":1,\"1111\":3,\"1130\":3,\"1131\":6,\"1159\":4}}],[\"log2\",{\"1\":{\"220\":1}}],[\"logging\",{\"1\":{\"139\":2,\"246\":5}}],[\"logs\",{\"1\":{\"130\":1}}],[\"log\",{\"0\":{\"1198\":1},\"1\":{\"75\":2,\"844\":1,\"923\":2}}],[\"logoutservlet\",{\"1\":{\"1159\":1}}],[\"logout\",{\"1\":{\"1159\":1}}],[\"logo\",{\"1\":{\"15\":1,\"66\":2,\"1120\":1}}],[\"largeicon\",{\"1\":{\"1086\":1}}],[\"lambda写法\",{\"1\":{\"655\":1}}],[\"lambda\",{\"1\":{\"651\":1,\"655\":2,\"850\":2}}],[\"lambda表达式在stream\",{\"1\":{\"657\":1}}],[\"lambda表达式在取代匿名内部类时\",{\"1\":{\"651\":1}}],[\"lambda表达式是特殊的局部内部类\",{\"1\":{\"656\":1}}],[\"lambda表达式是匿名内部类的更进一步\",{\"1\":{\"651\":1}}],[\"lambda表达式示例\",{\"1\":{\"655\":1}}],[\"lambda表达式支持的方法引用\",{\"1\":{\"655\":1}}],[\"lambda表达式的主体只有1条语句时\",{\"1\":{\"655\":2}}],[\"lambda表达式的抽象方法实现都会很复杂\",{\"1\":{\"654\":1}}],[\"lambda表达式的类型推断\",{\"1\":{\"653\":1}}],[\"lambda表达式要求的接口中\",{\"1\":{\"652\":1}}],[\"lambda表达式虽然说是取代接口的匿名内部类\",{\"1\":{\"652\":1}}],[\"lambda表达式得到的也不是一个类\",{\"1\":{\"651\":1}}],[\"lambda表达式仍然是局部内部类\",{\"1\":{\"651\":1}}],[\"lambda表达式更简洁\",{\"1\":{\"643\":1}}],[\"lambda表达式\",{\"0\":{\"651\":1},\"1\":{\"608\":1,\"642\":1,\"650\":1,\"653\":1,\"655\":1,\"741\":1,\"777\":1}}],[\"lazy\",{\"1\":{\"283\":1}}],[\"lazy开启\",{\"1\":{\"283\":1}}],[\"lazyloadtriggermethods\",{\"1\":{\"246\":1}}],[\"lazyloadingenabled\",{\"1\":{\"246\":1,\"283\":1}}],[\"latin1\",{\"1\":{\"149\":3,\"157\":3}}],[\"lanugage\",{\"1\":{\"144\":1}}],[\"lang包下\",{\"1\":{\"728\":1}}],[\"lang包\",{\"1\":{\"503\":1}}],[\"lang\",{\"1\":{\"215\":1,\"234\":1,\"244\":1,\"247\":2,\"257\":2,\"258\":1,\"538\":1,\"682\":1,\"694\":1,\"696\":1,\"701\":8,\"747\":5,\"748\":6,\"833\":1,\"842\":1,\"870\":1,\"910\":1,\"914\":1,\"919\":4,\"920\":2,\"921\":2,\"922\":4,\"923\":2,\"924\":13,\"940\":1}}],[\"lang=\",{\"1\":{\"115\":1}}],[\"language\",{\"1\":{\"111\":1,\"116\":3,\"121\":1,\"146\":1,\"1104\":1,\"1110\":1,\"1112\":3,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"lastloginip\",{\"1\":{\"1132\":20}}],[\"lastlogintime\",{\"1\":{\"1132\":20}}],[\"lastkey\",{\"1\":{\"1026\":1}}],[\"lastentry\",{\"1\":{\"1026\":1}}],[\"lastindexof\",{\"1\":{\"956\":1,\"958\":1,\"1130\":1}}],[\"lastmodified\",{\"1\":{\"775\":1}}],[\"last\",{\"1\":{\"121\":1,\"273\":1,\"1148\":4}}],[\"label3\",{\"1\":{\"376\":1}}],[\"label2\",{\"1\":{\"376\":1}}],[\"label\",{\"1\":{\"71\":1,\"376\":3,\"720\":5}}],[\"layout\",{\"1\":{\"0\":1}}],[\"liuqiangdong\",{\"1\":{\"1146\":1}}],[\"lipanl\",{\"1\":{\"1132\":2}}],[\"lib里没有\",{\"1\":{\"1100\":1}}],[\"lib目录\",{\"1\":{\"1100\":1}}],[\"lib文件夹\",{\"1\":{\"1098\":1}}],[\"lifecycle\",{\"1\":{\"1093\":1}}],[\"listvo\",{\"1\":{\"1132\":4}}],[\"list的底层是线性表\",{\"1\":{\"969\":1}}],[\"list接口\",{\"1\":{\"963\":1}}],[\"listiterator\",{\"0\":{\"959\":1},\"1\":{\"958\":2}}],[\"listiterator<e>\",{\"1\":{\"958\":2,\"959\":1}}],[\"list添加的位置\",{\"1\":{\"958\":1}}],[\"list是线性表的实现\",{\"1\":{\"958\":1}}],[\"list是collection的子接口\",{\"1\":{\"957\":1,\"958\":1}}],[\"listfiles\",{\"1\":{\"776\":5,\"777\":3}}],[\"list建议使用list\",{\"1\":{\"272\":1}}],[\"listparam\",{\"1\":{\"271\":2}}],[\"list类型参数\",{\"1\":{\"271\":1}}],[\"list\",{\"0\":{\"958\":1},\"1\":{\"247\":2,\"256\":2,\"258\":3,\"260\":2,\"271\":2,\"272\":3,\"283\":1,\"394\":1,\"657\":1,\"776\":1,\"956\":1,\"961\":5,\"968\":1,\"1052\":1,\"1132\":12}}],[\"list<marketuser>\",{\"1\":{\"1132\":4}}],[\"list<superperson>\",{\"1\":{\"1040\":1}}],[\"list<student>\",{\"1\":{\"278\":1,\"997\":2,\"1019\":2,\"1028\":2,\"1029\":2,\"1036\":2,\"1037\":1,\"1038\":4,\"1039\":3,\"1040\":2,\"1041\":4,\"1043\":1,\"1044\":1,\"1045\":1,\"1046\":2,\"1048\":1,\"1049\":1,\"1050\":1,\"1052\":2}}],[\"list<studentdo>\",{\"1\":{\"261\":2}}],[\"list<string>\",{\"1\":{\"258\":2,\"956\":1,\"961\":2,\"968\":1,\"997\":1,\"1040\":3,\"1159\":1}}],[\"list<person>\",{\"1\":{\"1039\":1,\"1050\":1}}],[\"list<phone>\",{\"1\":{\"263\":5,\"266\":1,\"271\":4,\"272\":2}}],[\"list<grade>\",{\"1\":{\"1019\":1}}],[\"list<e>\",{\"1\":{\"958\":1}}],[\"list<teacher>\",{\"1\":{\"1019\":1}}],[\"list<teccourse>\",{\"1\":{\"282\":2,\"283\":2}}],[\"list<tecstu>\",{\"1\":{\"281\":1}}],[\"list<t>\",{\"1\":{\"941\":1}}],[\"list<runnable>\",{\"1\":{\"880\":1}}],[\"list<cskaoyanuser>\",{\"1\":{\"1159\":1}}],[\"list<clazz>\",{\"1\":{\"279\":2,\"280\":2}}],[\"list<connection>\",{\"1\":{\"213\":1}}],[\"list<integer>\",{\"1\":{\"272\":1}}],[\"list<account>\",{\"1\":{\"251\":1}}],[\"list<user>\",{\"1\":{\"234\":2,\"254\":1,\"256\":4,\"260\":2,\"276\":2,\"277\":2,\"283\":2}}],[\"list>\",{\"1\":{\"139\":2}}],[\"lisi=654321\",{\"1\":{\"1140\":2}}],[\"lisi\",{\"1\":{\"169\":2,\"188\":1,\"261\":1,\"1109\":1}}],[\"limit=20\",{\"1\":{\"1132\":3}}],[\"limit\",{\"0\":{\"164\":1,\"1038\":1},\"1\":{\"164\":16,\"168\":1,\"1029\":1,\"1038\":8,\"1132\":15}}],[\"like中\",{\"1\":{\"162\":1}}],[\"like\",{\"1\":{\"148\":1,\"162\":1,\"597\":1,\"606\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"linus迫不得己自己开发了一个分布式版本控制工具\",{\"1\":{\"1183\":1}}],[\"linus\",{\"1\":{\"1183\":2}}],[\"linux系统的源码已经由git管理了\",{\"1\":{\"1183\":1}}],[\"linux\",{\"1\":{\"40\":1}}],[\"lineservlet\",{\"1\":{\"1111\":1,\"1122\":1}}],[\"lineseparator\",{\"1\":{\"789\":1,\"806\":4,\"818\":2,\"912\":2}}],[\"linekdhashset允许存储null\",{\"1\":{\"987\":1}}],[\"line\",{\"1\":{\"72\":1,\"127\":2,\"814\":3,\"821\":5,\"1111\":3,\"1122\":1}}],[\"linear\",{\"1\":{\"71\":1}}],[\"linkelist\",{\"1\":{\"987\":1}}],[\"linkedhashmap\",{\"1\":{\"1022\":10}}],[\"linkedhashmap的api\",{\"0\":{\"1023\":1}}],[\"linkedhashmap的构造方法\",{\"0\":{\"1022\":1}}],[\"linkedhashmap的特点\",{\"0\":{\"1021\":1}}],[\"linkedhashmap允许存储null\",{\"1\":{\"1021\":1}}],[\"linkedhashmap不允许存储重复数据\",{\"1\":{\"1021\":1}}],[\"linkedhashmap存储元素有序\",{\"1\":{\"1021\":1}}],[\"linkedhashmap在hashmap的基础上\",{\"1\":{\"1021\":1}}],[\"linkedhashmap底层基本上完全复用了父类hashmap的结构\",{\"1\":{\"1021\":1}}],[\"linkedhashmap是hashmap的一个子类\",{\"1\":{\"1021\":1}}],[\"linkedhashset的api\",{\"0\":{\"989\":1}}],[\"linkedhashset的构造方法\",{\"0\":{\"988\":1}}],[\"linkedhashset的特点和linkedhashmap的key保持一致\",{\"1\":{\"987\":1}}],[\"linkedhashset的特点\",{\"0\":{\"987\":1}}],[\"linkedhashset存储数据有序\",{\"1\":{\"987\":1}}],[\"linkedhashset底层持有一个linkedhashmap对象\",{\"1\":{\"987\":1}}],[\"linkedhashset是hashset一个子类\",{\"1\":{\"987\":1}}],[\"linkedhashset\",{\"0\":{\"986\":1},\"1\":{\"979\":1,\"980\":2,\"987\":1,\"988\":4,\"989\":1,\"993\":2}}],[\"linkedlist<>\",{\"1\":{\"1052\":1}}],[\"linkedlist<student>\",{\"1\":{\"1052\":1}}],[\"linkedlist除外\",{\"1\":{\"974\":1}}],[\"linkedlist里面的api分两类\",{\"1\":{\"968\":1}}],[\"linkedlist底层结构是双向链表\",{\"1\":{\"966\":1}}],[\"linkedlist数据结构表现为线性表\",{\"1\":{\"966\":1}}],[\"linkedlist是list的子实现\",{\"1\":{\"966\":1}}],[\"linkedlist是java集合框架中的一种\",{\"1\":{\"965\":1}}],[\"linkedlist还提供了一些特殊的方法\",{\"1\":{\"965\":1}}],[\"linkedlist提供了一系列方法\",{\"1\":{\"965\":1}}],[\"linkedlist的每个节点都包含了一个指向前一个节点和后一个节点的指针\",{\"1\":{\"965\":1}}],[\"linkedlist的底层结构\",{\"1\":{\"956\":1}}],[\"linkedlist在内部并不使用数组来存储元素\",{\"1\":{\"965\":1}}],[\"linkedlist\",{\"0\":{\"965\":1,\"967\":1,\"968\":1},\"1\":{\"967\":2}}],[\"link\",{\"1\":{\"66\":1,\"192\":1}}],[\"light\",{\"1\":{\"66\":1}}],[\"leak\",{\"1\":{\"925\":1}}],[\"legend\",{\"1\":{\"469\":5}}],[\"len为数组的长度\",{\"1\":{\"1016\":1}}],[\"lenth\",{\"1\":{\"958\":1}}],[\"len\",{\"1\":{\"402\":1,\"786\":2,\"788\":3,\"790\":1,\"792\":2,\"794\":3,\"795\":1,\"804\":2,\"806\":2,\"810\":1,\"812\":1,\"923\":1}}],[\"length是2的幂次方\",{\"1\":{\"1016\":1}}],[\"length之间\",{\"1\":{\"958\":1}}],[\"length\",{\"1\":{\"116\":1,\"121\":1,\"127\":5,\"402\":1,\"415\":4,\"418\":2,\"419\":4,\"436\":2,\"440\":8,\"441\":6,\"729\":2,\"737\":3,\"738\":1,\"739\":2,\"743\":2,\"775\":1,\"786\":1,\"788\":1,\"867\":2,\"890\":4,\"892\":8,\"893\":4,\"923\":1,\"924\":5,\"954\":9,\"959\":1,\"978\":4,\"1005\":2,\"1016\":2,\"1104\":1,\"1105\":1,\"1110\":1,\"1112\":1,\"1113\":4,\"1116\":1,\"1120\":4,\"1121\":1,\"1122\":1,\"1123\":1,\"1124\":3,\"1128\":3,\"1130\":1,\"1132\":1,\"1142\":1,\"1148\":1,\"1150\":1}}],[\"leecode\",{\"1\":{\"947\":1}}],[\"leetcode和学学数据库的问题\",{\"1\":{\"212\":1}}],[\"lee\",{\"1\":{\"212\":2}}],[\"level\",{\"1\":{\"212\":2}}],[\"let\",{\"1\":{\"34\":3}}],[\"left\",{\"1\":{\"21\":1,\"75\":3,\"183\":3,\"277\":1,\"280\":1,\"282\":1,\"283\":3}}],[\"c58c7c2b23823ca5ba375ddb39e8bf136b8ddd9b\",{\"1\":{\"1197\":1}}],[\"czc123\",{\"1\":{\"1132\":2}}],[\"cj\",{\"1\":{\"1107\":2}}],[\"ceilingkey\",{\"1\":{\"1026\":1}}],[\"ceilingentry\",{\"1\":{\"1026\":1}}],[\"center\",{\"1\":{\"127\":1}}],[\"cyclic\",{\"1\":{\"976\":1}}],[\"c4\",{\"1\":{\"916\":2}}],[\"c3\",{\"1\":{\"916\":2,\"1117\":1}}],[\"c3p0的配置文件位置\",{\"1\":{\"215\":1}}],[\"c3p0\",{\"0\":{\"215\":1},\"1\":{\"215\":7}}],[\"c抢到了\",{\"1\":{\"851\":1}}],[\"c抢到了cpu的执行权\",{\"1\":{\"851\":1}}],[\"c进来\",{\"1\":{\"851\":1}}],[\"c窗口卖了第\",{\"1\":{\"851\":1}}],[\"c窗口\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"cbuf\",{\"1\":{\"804\":2,\"810\":2}}],[\"cfr\",{\"1\":{\"719\":2}}],[\"cfr反编译\",{\"1\":{\"719\":1}}],[\"cf\",{\"1\":{\"588\":5}}],[\"c语言语法当中只有格式二声明数组\",{\"1\":{\"395\":1}}],[\"c的值\",{\"1\":{\"344\":1}}],[\"c盘\",{\"1\":{\"307\":1}}],[\"cpj123\",{\"1\":{\"1132\":2}}],[\"cpp\",{\"1\":{\"784\":1}}],[\"cpu类近似看成computer类的成员\",{\"1\":{\"607\":1}}],[\"cpu可以控制计算机的一切硬件资源\",{\"1\":{\"607\":1}}],[\"cpu是电脑中最重要的组件\",{\"1\":{\"607\":1}}],[\"cpu\",{\"1\":{\"263\":1,\"608\":1,\"623\":1}}],[\"cpu型号\",{\"1\":{\"263\":1}}],[\"cpds\",{\"1\":{\"215\":2}}],[\"cglib\",{\"1\":{\"246\":1}}],[\"ccc\",{\"1\":{\"1146\":6}}],[\"cc\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"1028\":1}}],[\"chromium\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"chrome\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"childrenplayer\",{\"1\":{\"941\":1}}],[\"childplayer\",{\"1\":{\"941\":1}}],[\"child\",{\"1\":{\"769\":4,\"771\":2}}],[\"china\",{\"1\":{\"724\":1}}],[\"chinese+math+english\",{\"1\":{\"168\":1}}],[\"chinese\",{\"1\":{\"161\":1,\"162\":12,\"165\":1,\"167\":7,\"168\":16}}],[\"checkout\",{\"1\":{\"1202\":3,\"1204\":4}}],[\"checkouttimeout\",{\"1\":{\"215\":1}}],[\"check\",{\"1\":{\"884\":2}}],[\"checked\",{\"1\":{\"747\":1}}],[\"chs\",{\"1\":{\"738\":2}}],[\"ch\",{\"1\":{\"705\":8,\"737\":4,\"817\":2,\"1120\":3,\"1138\":3,\"1140\":3,\"1150\":3}}],[\"choose>\",{\"1\":{\"266\":1}}],[\"choose\",{\"0\":{\"266\":1},\"1\":{\"264\":1,\"266\":1}}],[\"changfengdeebmw\",{\"1\":{\"127\":2}}],[\"chatgpt一下\",{\"1\":{\"116\":1}}],[\"chatgpt\",{\"1\":{\"115\":1,\"442\":1}}],[\"charat\",{\"1\":{\"737\":5}}],[\"character的缩写\",{\"1\":{\"324\":1}}],[\"characterencoding=utf8\",{\"1\":{\"192\":1,\"215\":2,\"216\":1,\"217\":1,\"234\":1,\"244\":1,\"245\":1}}],[\"character\",{\"1\":{\"149\":4,\"151\":1,\"156\":1,\"157\":3,\"233\":1,\"701\":1,\"705\":1}}],[\"charstream\",{\"1\":{\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2}}],[\"chars\",{\"1\":{\"729\":2,\"738\":5,\"739\":14,\"806\":3,\"812\":3,\"813\":3,\"814\":3,\"1118\":3}}],[\"charsetname\",{\"1\":{\"801\":2,\"806\":1,\"812\":1}}],[\"charset\",{\"1\":{\"116\":1,\"801\":1,\"806\":1,\"812\":1}}],[\"charset=utf\",{\"1\":{\"1104\":1,\"1105\":2,\"1110\":1,\"1112\":1,\"1121\":1,\"1127\":2,\"1130\":1,\"1131\":1,\"1132\":1,\"1159\":3}}],[\"charset=\",{\"1\":{\"115\":1,\"149\":1,\"1131\":1}}],[\"char任何数据类型与int进行计算\",{\"1\":{\"340\":1}}],[\"char之间不互相转换\",{\"1\":{\"340\":1}}],[\"char类型比较特殊\",{\"1\":{\"338\":1,\"340\":1}}],[\"char类型在代码中的表现\",{\"1\":{\"324\":1}}],[\"char本身就是单词\",{\"1\":{\"324\":1}}],[\"char\",{\"1\":{\"153\":2,\"312\":1,\"324\":2,\"334\":1,\"340\":4,\"341\":2,\"359\":1,\"407\":1,\"701\":1,\"705\":10,\"729\":6,\"737\":3,\"738\":6,\"739\":5,\"794\":5,\"799\":1,\"804\":2,\"806\":3,\"810\":2,\"812\":6,\"813\":2,\"814\":2,\"817\":1,\"1118\":1}}],[\"chart\",{\"1\":{\"71\":1}}],[\"css等这些资源\",{\"1\":{\"1090\":1}}],[\"css\",{\"1\":{\"1078\":1,\"1098\":1}}],[\"cskoyan\",{\"1\":{\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2}}],[\"cskaoyanmarket\",{\"1\":{\"1132\":1}}],[\"cskaoyanusers\",{\"1\":{\"1159\":4}}],[\"cskaoyanuser\",{\"1\":{\"1131\":6,\"1159\":1}}],[\"cskaoyan2023\",{\"1\":{\"1083\":1}}],[\"cskaoyan\",{\"1\":{\"113\":1,\"115\":5,\"121\":3,\"124\":2,\"127\":4,\"139\":1,\"234\":3,\"240\":1,\"244\":1,\"245\":1,\"249\":2,\"250\":2,\"251\":1,\"259\":1,\"260\":1,\"261\":3,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"276\":6,\"277\":2,\"279\":4,\"280\":2,\"282\":4,\"283\":2,\"316\":1,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"719\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":2,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":5,\"918\":3,\"919\":2,\"920\":3,\"921\":3,\"922\":5,\"923\":2,\"924\":4,\"1097\":1,\"1107\":4}}],[\"cst\",{\"1\":{\"724\":1}}],[\"csdn博客\",{\"1\":{\"719\":1}}],[\"csdn\",{\"1\":{\"442\":1}}],[\"cs\",{\"1\":{\"149\":2,\"220\":1}}],[\"ciggar\",{\"1\":{\"1192\":1,\"1195\":1}}],[\"city\",{\"1\":{\"171\":6}}],[\"ci\",{\"1\":{\"149\":5}}],[\"crud\",{\"1\":{\"420\":1,\"951\":1}}],[\"crud工程师\",{\"1\":{\"420\":1}}],[\"cr\",{\"1\":{\"356\":1}}],[\"cross\",{\"1\":{\"181\":1}}],[\"createnewfile\",{\"1\":{\"771\":3}}],[\"createtime\",{\"1\":{\"259\":1}}],[\"createdatasource\",{\"1\":{\"214\":1,\"216\":1}}],[\"createstatement\",{\"1\":{\"192\":1,\"200\":1,\"204\":1,\"205\":1,\"206\":1,\"234\":1}}],[\"create\",{\"1\":{\"148\":2,\"149\":5,\"153\":6,\"155\":3,\"157\":5,\"158\":1,\"161\":1,\"169\":6,\"170\":2,\"171\":12,\"177\":1,\"180\":2,\"209\":2,\"212\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":1,\"233\":3,\"240\":1,\"261\":1,\"263\":2,\"275\":2,\"278\":2,\"281\":3,\"420\":1,\"1130\":2,\"1151\":1}}],[\"crlf即\",{\"1\":{\"114\":1,\"119\":1}}],[\"c++当中的析构函数就是完成这个功能的\",{\"1\":{\"689\":1}}],[\"c++当中的用法\",{\"1\":{\"375\":1}}],[\"c++开发转过来的\",{\"1\":{\"395\":1}}],[\"c++等\",{\"1\":{\"319\":1}}],[\"c++的天下\",{\"1\":{\"303\":1}}],[\"c++\",{\"1\":{\"146\":1,\"281\":1,\"312\":1,\"426\":1,\"463\":1,\"465\":1,\"660\":1,\"925\":1}}],[\"custom\",{\"1\":{\"1123\":2}}],[\"cursor\",{\"1\":{\"955\":1}}],[\"currentthread\",{\"1\":{\"833\":4,\"842\":1,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"864\":1,\"867\":4,\"872\":2,\"880\":1,\"903\":1}}],[\"currenttimemillis\",{\"1\":{\"723\":2,\"741\":2}}],[\"currentclazz\",{\"1\":{\"535\":1}}],[\"current\",{\"1\":{\"23\":3,\"171\":7,\"209\":3,\"233\":3}}],[\"cutrequest\",{\"1\":{\"128\":1}}],[\"clear\",{\"1\":{\"953\":1,\"981\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"clazz3\",{\"1\":{\"1107\":1,\"1108\":3}}],[\"clazz2\",{\"1\":{\"1107\":1}}],[\"clazz1\",{\"1\":{\"1107\":1}}],[\"clazzmapper\",{\"1\":{\"279\":1}}],[\"clazzmapper接口\",{\"1\":{\"279\":1,\"280\":1}}],[\"clazzes\",{\"1\":{\"279\":2,\"280\":2}}],[\"clazz\",{\"1\":{\"278\":1,\"279\":4,\"280\":4,\"1109\":9,\"1118\":9}}],[\"class>\",{\"1\":{\"1097\":1}}],[\"class>com\",{\"1\":{\"1097\":1}}],[\"classpath\",{\"1\":{\"923\":7}}],[\"class属性\",{\"1\":{\"857\":1}}],[\"classdesc\",{\"1\":{\"824\":1}}],[\"class这个枚举类型编译后的class文件进行反编译的指令是\",{\"1\":{\"719\":1}}],[\"class对象的创建\",{\"1\":{\"663\":1}}],[\"class对象是jvm创建的\",{\"1\":{\"663\":1}}],[\"class对象\",{\"0\":{\"662\":1},\"1\":{\"663\":1,\"857\":2,\"914\":1}}],[\"class<t>\",{\"1\":{\"1118\":3}}],[\"class<userserviceimpl>\",{\"1\":{\"1107\":1}}],[\"class<b>\",{\"1\":{\"916\":1}}],[\"class<a>\",{\"1\":{\"916\":1}}],[\"class<\",{\"1\":{\"658\":1,\"660\":2,\"916\":4,\"919\":5,\"920\":1,\"921\":5,\"922\":9,\"923\":4,\"924\":1,\"1107\":3,\"1109\":2,\"1118\":1}}],[\"classcastexception\",{\"1\":{\"586\":1,\"748\":1}}],[\"class类型\",{\"1\":{\"924\":1}}],[\"class类\",{\"1\":{\"565\":1}}],[\"classloader里的loadclass\",{\"1\":{\"916\":1}}],[\"classloader\",{\"1\":{\"497\":1,\"910\":1,\"912\":7,\"916\":3,\"918\":2,\"922\":4,\"923\":4}}],[\"class的\",{\"1\":{\"469\":1}}],[\"class和文件名保持一致\",{\"1\":{\"469\":1}}],[\"class是最常见的关键字之一\",{\"1\":{\"311\":1}}],[\"classid\",{\"1\":{\"278\":1,\"279\":2,\"280\":1}}],[\"classes里没有\",{\"1\":{\"1100\":1}}],[\"classes文件夹\",{\"1\":{\"1098\":1,\"1099\":1}}],[\"classes\",{\"1\":{\"623\":4}}],[\"classes的目录\",{\"1\":{\"249\":1}}],[\"classess路径\",{\"1\":{\"249\":1}}],[\"classnotfound\",{\"1\":{\"1100\":1}}],[\"classnotfoundexception\",{\"1\":{\"209\":1,\"213\":1,\"824\":2,\"916\":2,\"919\":1,\"923\":2,\"924\":1,\"1107\":1}}],[\"classname\",{\"1\":{\"127\":2,\"197\":3,\"278\":1,\"916\":3,\"1109\":6}}],[\"class=\",{\"1\":{\"196\":1,\"249\":1}}],[\"class文件\",{\"1\":{\"192\":1,\"456\":1,\"719\":1,\"910\":1,\"923\":1}}],[\"class\",{\"0\":{\"21\":1,\"23\":1},\"1\":{\"14\":1,\"15\":1,\"19\":1,\"127\":2,\"153\":1,\"161\":1,\"162\":3,\"163\":4,\"165\":1,\"167\":20,\"168\":11,\"169\":1,\"185\":3,\"197\":1,\"203\":2,\"213\":1,\"214\":2,\"234\":1,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":1,\"247\":1,\"261\":1,\"262\":1,\"275\":2,\"278\":9,\"279\":3,\"280\":5,\"281\":2,\"285\":5,\"287\":2,\"308\":2,\"312\":1,\"315\":1,\"316\":3,\"331\":1,\"423\":1,\"446\":1,\"449\":1,\"450\":1,\"458\":1,\"459\":2,\"460\":2,\"465\":2,\"467\":1,\"468\":2,\"469\":4,\"471\":3,\"472\":2,\"474\":3,\"478\":2,\"479\":3,\"491\":2,\"498\":6,\"502\":4,\"517\":2,\"520\":1,\"522\":2,\"535\":3,\"538\":3,\"539\":3,\"545\":4,\"553\":4,\"564\":3,\"566\":1,\"573\":2,\"585\":3,\"588\":6,\"590\":3,\"591\":1,\"594\":4,\"595\":3,\"596\":1,\"599\":1,\"606\":2,\"608\":3,\"609\":2,\"619\":2,\"620\":2,\"633\":1,\"650\":2,\"655\":4,\"663\":4,\"669\":2,\"690\":2,\"696\":2,\"713\":1,\"715\":1,\"719\":3,\"720\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":2,\"741\":4,\"764\":3,\"769\":1,\"771\":1,\"776\":2,\"777\":2,\"788\":1,\"789\":6,\"790\":2,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":2,\"819\":1,\"820\":1,\"821\":1,\"824\":4,\"825\":2,\"832\":2,\"833\":8,\"838\":4,\"839\":2,\"840\":2,\"841\":2,\"842\":2,\"844\":2,\"850\":3,\"851\":3,\"855\":3,\"856\":3,\"857\":4,\"859\":1,\"860\":1,\"864\":2,\"866\":3,\"867\":16,\"870\":2,\"871\":1,\"872\":2,\"880\":4,\"881\":4,\"884\":6,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":3,\"904\":3,\"905\":2,\"910\":3,\"912\":2,\"916\":14,\"917\":3,\"918\":3,\"919\":9,\"920\":2,\"921\":3,\"922\":8,\"923\":4,\"924\":15,\"936\":10,\"939\":8,\"940\":14,\"941\":6,\"942\":1,\"943\":3,\"944\":1,\"949\":1,\"954\":2,\"997\":1,\"1007\":1,\"1019\":1,\"1028\":2,\"1040\":1,\"1078\":1,\"1085\":3,\"1088\":1,\"1093\":3,\"1094\":1,\"1095\":1,\"1096\":3,\"1107\":7,\"1109\":8,\"1111\":1,\"1112\":1,\"1113\":2,\"1116\":1,\"1117\":1,\"1118\":1,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":3,\"1132\":10,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1152\":2,\"1159\":5,\"1203\":2}}],[\"clonedog\",{\"1\":{\"699\":2}}],[\"clonestu\",{\"1\":{\"699\":4}}],[\"cloneable却不会报错\",{\"1\":{\"696\":1}}],[\"cloneable接口的底层也是这么判断的\",{\"1\":{\"696\":1}}],[\"cloneable接口是一个空接口\",{\"1\":{\"696\":1}}],[\"cloneable接口\",{\"0\":{\"696\":1}}],[\"cloneable\",{\"1\":{\"694\":1}}],[\"clone方法是一种新的创建对象的方式\",{\"1\":{\"697\":1}}],[\"clone方法的方法声明为\",{\"1\":{\"692\":1}}],[\"clone方法\",{\"0\":{\"691\":1}}],[\"clonenotsupportedexception是方法抛出异常的声明\",{\"1\":{\"692\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"538\":3,\"692\":1,\"699\":1,\"748\":1}}],[\"clone\",{\"0\":{\"1192\":1},\"1\":{\"246\":1,\"538\":8,\"658\":3,\"692\":1,\"698\":3,\"699\":4,\"719\":1,\"964\":1,\"1026\":1,\"1192\":3}}],[\"close释放资源\",{\"1\":{\"794\":2}}],[\"close执行了\",{\"1\":{\"789\":1}}],[\"close方法会自动执行\",{\"1\":{\"789\":1}}],[\"close=\",{\"1\":{\"271\":4,\"272\":1}}],[\"close\",{\"1\":{\"121\":1,\"127\":1,\"192\":2,\"200\":1,\"201\":1,\"203\":4,\"214\":1,\"234\":1,\"271\":1,\"286\":1,\"287\":1,\"786\":1,\"788\":3,\"789\":7,\"790\":3,\"794\":5,\"795\":2,\"806\":2,\"807\":2,\"808\":2,\"812\":2,\"813\":2,\"814\":4,\"817\":6,\"818\":7,\"819\":2,\"820\":2,\"821\":2,\"824\":4,\"844\":1,\"892\":2,\"902\":3,\"904\":5,\"905\":7,\"1113\":4,\"1120\":1,\"1124\":1,\"1128\":2}}],[\"client\",{\"0\":{\"897\":1},\"1\":{\"127\":7,\"145\":1,\"303\":1,\"902\":1,\"903\":1,\"904\":1,\"905\":1,\"1077\":1}}],[\"client就是连接进来的一个客户端\",{\"1\":{\"127\":1}}],[\"cancel\",{\"1\":{\"883\":1,\"884\":1}}],[\"cannot\",{\"1\":{\"475\":1,\"700\":1}}],[\"capacity\",{\"1\":{\"742\":1,\"743\":2,\"978\":3,\"1006\":1}}],[\"car\",{\"1\":{\"459\":6,\"599\":1,\"936\":11}}],[\"card有任何的null输入值\",{\"1\":{\"170\":1}}],[\"card\",{\"1\":{\"153\":1,\"170\":1}}],[\"calculatesize\",{\"1\":{\"978\":2}}],[\"calculator\",{\"1\":{\"386\":1}}],[\"calendar等新的日期类\",{\"1\":{\"721\":1}}],[\"call执行了\",{\"1\":{\"881\":1}}],[\"call执行结束\",{\"1\":{\"880\":1}}],[\"callable有返回值\",{\"1\":{\"881\":1}}],[\"callable里是call方法\",{\"1\":{\"881\":1}}],[\"callable<integer>\",{\"1\":{\"881\":1}}],[\"callable<v>\",{\"1\":{\"881\":1}}],[\"callable<string>\",{\"1\":{\"880\":1,\"881\":1}}],[\"callable<t>\",{\"1\":{\"880\":1}}],[\"callabletask\",{\"1\":{\"880\":2}}],[\"callable\",{\"1\":{\"880\":1,\"881\":5}}],[\"callable是带返回值的\",{\"1\":{\"880\":1}}],[\"called\",{\"1\":{\"623\":2}}],[\"call\",{\"1\":{\"424\":2,\"880\":2,\"881\":2}}],[\"callsettersonnulls\",{\"1\":{\"246\":1}}],[\"case穿越问题\",{\"1\":{\"359\":1}}],[\"case\",{\"1\":{\"149\":2,\"312\":1,\"359\":8,\"478\":1,\"718\":3,\"720\":3,\"1131\":2}}],[\"cat也是animal\",{\"1\":{\"523\":1}}],[\"cat类开始初始化步骤了\",{\"1\":{\"498\":1}}],[\"cat单参构造方法先不执行\",{\"1\":{\"471\":1}}],[\"cat\",{\"1\":{\"471\":12,\"479\":6,\"491\":6,\"498\":6,\"590\":1,\"595\":1,\"944\":3}}],[\"catalina\",{\"0\":{\"136\":1},\"1\":{\"138\":1,\"139\":1}}],[\"catch语句捕捉异常\",{\"1\":{\"868\":1}}],[\"catch一起使用\",{\"1\":{\"760\":1}}],[\"catch代码块中如果有return\",{\"1\":{\"760\":1}}],[\"catch代码块中的代码\",{\"1\":{\"752\":1}}],[\"catch结合\",{\"1\":{\"760\":1}}],[\"catch的执行\",{\"1\":{\"752\":1}}],[\"catch\",{\"0\":{\"751\":1},\"1\":{\"127\":4,\"203\":3,\"209\":1,\"213\":3,\"214\":1,\"234\":1,\"244\":1,\"312\":1,\"752\":2,\"754\":5,\"756\":1,\"759\":1,\"760\":2,\"764\":1,\"789\":9,\"825\":2,\"832\":1,\"839\":2,\"840\":1,\"842\":2,\"844\":4,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":1,\"867\":4,\"870\":2,\"871\":2,\"872\":6,\"895\":3,\"903\":1,\"923\":1,\"924\":1,\"942\":1}}],[\"category\",{\"1\":{\"72\":1}}],[\"cacheenabled\",{\"1\":{\"246\":1,\"286\":1}}],[\"cache\",{\"1\":{\"121\":2,\"706\":1,\"709\":1,\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"cn\",{\"1\":{\"116\":2,\"121\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1,\"1182\":1}}],[\"cdots\",{\"1\":{\"75\":1}}],[\"c2抢到\",{\"1\":{\"867\":1}}],[\"c2\",{\"1\":{\"74\":1,\"471\":1,\"867\":2,\"916\":3,\"953\":6,\"1117\":1}}],[\"c1抢到\",{\"1\":{\"867\":2}}],[\"c1\",{\"1\":{\"74\":2,\"867\":2,\"916\":5,\"953\":14,\"1117\":1}}],[\"copied\",{\"1\":{\"954\":1}}],[\"copyproperties\",{\"1\":{\"1118\":1,\"1132\":3}}],[\"copy\",{\"1\":{\"954\":1}}],[\"copyof\",{\"1\":{\"954\":2}}],[\"corresponding\",{\"1\":{\"711\":2}}],[\"coach\",{\"1\":{\"601\":1}}],[\"codes\",{\"1\":{\"1083\":1}}],[\"coder\",{\"1\":{\"594\":2}}],[\"code\",{\"1\":{\"234\":1,\"444\":1,\"459\":1,\"463\":1,\"465\":1,\"472\":1,\"474\":1,\"702\":1,\"711\":4,\"720\":6}}],[\"courseid\",{\"1\":{\"282\":1}}],[\"course\",{\"1\":{\"249\":1,\"281\":24,\"282\":3,\"283\":3,\"463\":3,\"465\":4}}],[\"cource\",{\"1\":{\"184\":6}}],[\"counter\",{\"1\":{\"925\":1}}],[\"count++\",{\"1\":{\"478\":1,\"700\":1,\"737\":1,\"860\":1}}],[\"count这个值是个局部变量\",{\"1\":{\"472\":1}}],[\"country\",{\"1\":{\"171\":1}}],[\"count\",{\"0\":{\"1049\":1},\"1\":{\"167\":1,\"168\":11,\"188\":1,\"472\":9,\"474\":9,\"478\":2,\"700\":2,\"729\":2,\"737\":2,\"860\":3,\"1035\":1,\"1037\":2,\"1049\":6,\"1053\":1}}],[\"column=\",{\"1\":{\"261\":4,\"276\":5,\"277\":8,\"279\":7,\"280\":6,\"282\":3,\"283\":10}}],[\"column是数据库的列名\",{\"1\":{\"261\":1}}],[\"column是要连接的列\",{\"1\":{\"182\":1}}],[\"columns是要返回的列\",{\"1\":{\"182\":1}}],[\"columns\",{\"1\":{\"182\":1,\"183\":2}}],[\"columntype2\",{\"1\":{\"170\":1}}],[\"columntype\",{\"1\":{\"169\":3,\"170\":1}}],[\"columnname2\",{\"1\":{\"169\":1,\"170\":1}}],[\"columnname是主键\",{\"1\":{\"169\":1}}],[\"columnname\",{\"1\":{\"168\":1,\"169\":4,\"170\":1,\"171\":1,\"202\":3}}],[\"column3=value3\",{\"1\":{\"158\":1}}],[\"column2=value2\",{\"1\":{\"158\":2,\"160\":1,\"162\":1}}],[\"column2\",{\"1\":{\"158\":1}}],[\"column1=value1\",{\"1\":{\"158\":2,\"160\":1,\"162\":1}}],[\"column1\",{\"1\":{\"158\":1,\"170\":2}}],[\"column\",{\"1\":{\"153\":4,\"156\":8,\"168\":1,\"182\":2,\"183\":4,\"256\":1,\"267\":2,\"276\":1,\"279\":1}}],[\"collect2\",{\"1\":{\"1039\":2,\"1040\":2,\"1052\":2}}],[\"collect1\",{\"1\":{\"1039\":2,\"1040\":2,\"1052\":2}}],[\"collectors\",{\"1\":{\"1029\":1,\"1035\":1,\"1036\":1,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1052\":9,\"1053\":1}}],[\"collect\",{\"0\":{\"1051\":1},\"1\":{\"1027\":1,\"1029\":1,\"1035\":1,\"1036\":3,\"1038\":3,\"1039\":2,\"1040\":8,\"1041\":6,\"1051\":1,\"1052\":8,\"1053\":1}}],[\"collection存储的是单列数据\",{\"1\":{\"995\":1}}],[\"collection2里面的所有元素\",{\"1\":{\"953\":1}}],[\"collection2\",{\"1\":{\"953\":1}}],[\"collection2=\",{\"1\":{\"953\":1}}],[\"collection1里面的所有元素\",{\"1\":{\"953\":1}}],[\"collection1\",{\"1\":{\"953\":1}}],[\"collection1=\",{\"1\":{\"953\":1}}],[\"collection中\",{\"1\":{\"953\":3}}],[\"collection的api我们已经学习过\",{\"1\":{\"958\":1}}],[\"collection的add方法\",{\"1\":{\"953\":1}}],[\"collection的一些子实现有序\",{\"1\":{\"952\":1}}],[\"collection里面的元素个数\",{\"1\":{\"953\":1,\"981\":1}}],[\"collection里面必须写注解的值\",{\"1\":{\"271\":1}}],[\"collection<v>\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"collection<student>\",{\"1\":{\"956\":1}}],[\"collection<string>\",{\"1\":{\"953\":8,\"955\":2,\"956\":4,\"961\":1}}],[\"collection<integer>\",{\"1\":{\"953\":2}}],[\"collection<\",{\"1\":{\"953\":7,\"958\":1,\"963\":1,\"967\":1,\"978\":1,\"981\":4,\"984\":1,\"988\":1,\"992\":1}}],[\"collection是顶级接口\",{\"1\":{\"952\":1}}],[\"collection是最基本的集合接口\",{\"1\":{\"950\":1}}],[\"collection是一个接口\",{\"1\":{\"950\":1}}],[\"collections\",{\"1\":{\"740\":1}}],[\"collection简称gc\",{\"1\":{\"407\":1}}],[\"collection>\",{\"1\":{\"279\":1,\"280\":1,\"282\":1,\"283\":1}}],[\"collection在不使用注解情况下\",{\"1\":{\"272\":1}}],[\"collection=\",{\"1\":{\"271\":4,\"272\":1}}],[\"collection参数\",{\"1\":{\"271\":3}}],[\"collection\",{\"0\":{\"946\":1},\"1\":{\"141\":1,\"247\":2,\"279\":1,\"740\":1,\"950\":3,\"953\":26,\"955\":13,\"956\":13,\"961\":2,\"963\":2,\"967\":2,\"978\":2,\"984\":1,\"988\":1,\"992\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1,\"1034\":3,\"1052\":1}}],[\"collation\",{\"1\":{\"149\":2}}],[\"collate\",{\"1\":{\"149\":2,\"151\":1,\"156\":1}}],[\"color\",{\"1\":{\"66\":1,\"127\":1,\"459\":4,\"491\":8}}],[\"cookie信息可以跨应用共享\",{\"1\":{\"1160\":1}}],[\"cookie的值为string字符串\",{\"1\":{\"1160\":1}}],[\"cookie的格式\",{\"0\":{\"1138\":1}}],[\"cookie共享的是常规信息\",{\"1\":{\"1160\":1}}],[\"cookie是客户端技术\",{\"1\":{\"1160\":1}}],[\"cookie和session都是为了让服务端获取客户端提供的信息\",{\"1\":{\"1160\":1}}],[\"cookie和session\",{\"0\":{\"1160\":1}}],[\"cookie设置\",{\"1\":{\"1148\":1}}],[\"cookie获取\",{\"1\":{\"1148\":1}}],[\"cookieremoveservlet\",{\"1\":{\"1147\":1}}],[\"cookie可以持久化保存\",{\"1\":{\"1147\":1}}],[\"cookie会给你设置一个默认的path\",{\"1\":{\"1145\":1}}],[\"cookie这个类的实例中封装信息\",{\"1\":{\"1144\":1}}],[\"cookie中的信息\",{\"0\":{\"1144\":1}}],[\"cookieservlet\",{\"1\":{\"1143\":1}}],[\"cookiesetservlet\",{\"1\":{\"1142\":1}}],[\"cookies\",{\"1\":{\"1143\":3,\"1148\":4}}],[\"cookie\",{\"1\":{\"116\":1,\"121\":1,\"1105\":2,\"1120\":1,\"1121\":2,\"1137\":1,\"1138\":2,\"1140\":3,\"1141\":3,\"1142\":6,\"1143\":10,\"1145\":14,\"1146\":10,\"1147\":13,\"1148\":9,\"1150\":3}}],[\"com这样的domain是不可以的\",{\"1\":{\"1146\":1}}],[\"com作为父域名\",{\"1\":{\"1146\":1}}],[\"comparatortest\",{\"1\":{\"741\":1}}],[\"comparator\",{\"1\":{\"741\":1,\"992\":1,\"1025\":1,\"1026\":1,\"1041\":1}}],[\"comparator<student>\",{\"1\":{\"1028\":1,\"1029\":1}}],[\"comparator<student2>\",{\"1\":{\"741\":2}}],[\"comparator<\",{\"1\":{\"741\":1,\"992\":1,\"1025\":1,\"1026\":1,\"1041\":1}}],[\"comparator接口\",{\"0\":{\"741\":1}}],[\"comparable\",{\"1\":{\"993\":2}}],[\"comparable<student>\",{\"1\":{\"740\":1}}],[\"comparabletest\",{\"1\":{\"740\":1}}],[\"comparable接口返回的\",{\"1\":{\"991\":1}}],[\"comparable接口\",{\"0\":{\"740\":1}}],[\"compareto方法就是按照字典序进行比较的\",{\"1\":{\"739\":1}}],[\"comparetoignorecase\",{\"1\":{\"739\":1}}],[\"compareto\",{\"1\":{\"739\":1,\"740\":4,\"1028\":2}}],[\"compare\",{\"1\":{\"675\":2,\"741\":3,\"1028\":1,\"1029\":1}}],[\"comparison\",{\"1\":{\"346\":1}}],[\"computer\",{\"1\":{\"608\":1}}],[\"computer类中的所有成员\",{\"1\":{\"607\":1}}],[\"compute\",{\"1\":{\"147\":2,\"944\":3}}],[\"combopooleddatasource\",{\"1\":{\"215\":1}}],[\"common\",{\"1\":{\"1192\":2}}],[\"commons\",{\"1\":{\"214\":3,\"246\":1}}],[\"commondatasource\",{\"1\":{\"213\":1}}],[\"commit的时候需要指定提交的信息\",{\"1\":{\"1195\":1}}],[\"commit这个命令可以帮助我们把git仓库中\",{\"1\":{\"1195\":1}}],[\"committed\",{\"1\":{\"211\":1,\"212\":1}}],[\"commit\",{\"0\":{\"1195\":1},\"1\":{\"200\":1,\"209\":3,\"237\":2,\"242\":1,\"243\":1,\"1195\":3,\"1201\":2,\"1203\":1,\"1205\":1}}],[\"comment\",{\"1\":{\"153\":1,\"171\":9}}],[\"com时\",{\"1\":{\"139\":1}}],[\"com为例\",{\"1\":{\"124\":1}}],[\"com\",{\"1\":{\"66\":2,\"113\":4,\"115\":7,\"116\":1,\"120\":4,\"121\":3,\"124\":1,\"127\":4,\"147\":2,\"158\":1,\"192\":1,\"200\":1,\"201\":1,\"212\":2,\"215\":1,\"234\":4,\"237\":1,\"240\":1,\"244\":4,\"245\":1,\"247\":2,\"249\":4,\"250\":2,\"251\":1,\"256\":2,\"259\":1,\"260\":1,\"261\":3,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"275\":5,\"276\":6,\"277\":2,\"279\":4,\"280\":2,\"282\":4,\"283\":2,\"316\":1,\"442\":1,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"680\":2,\"719\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":2,\"806\":2,\"807\":2,\"808\":2,\"812\":2,\"813\":2,\"814\":4,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":2,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":5,\"918\":3,\"919\":2,\"920\":3,\"921\":3,\"922\":5,\"923\":2,\"924\":4,\"1028\":13,\"1105\":1,\"1107\":2,\"1121\":1,\"1146\":7,\"1192\":3,\"1195\":2}}],[\"conversation\",{\"0\":{\"1135\":1}}],[\"converter<string\",{\"1\":{\"942\":1}}],[\"converter<t\",{\"1\":{\"942\":1}}],[\"convert\",{\"1\":{\"942\":2}}],[\"convex\",{\"1\":{\"29\":1}}],[\"conctructor\",{\"1\":{\"944\":1}}],[\"concurrency\",{\"0\":{\"827\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"955\":1}}],[\"concurrent\",{\"1\":{\"825\":2,\"832\":1,\"839\":1,\"859\":1,\"860\":1,\"864\":2,\"880\":3,\"881\":6,\"884\":1,\"903\":2}}],[\"concat\",{\"1\":{\"167\":7,\"168\":3,\"738\":4,\"739\":1}}],[\"concave\",{\"1\":{\"29\":1}}],[\"connectexception\",{\"1\":{\"905\":1}}],[\"connecttask\",{\"1\":{\"903\":4}}],[\"connector\",{\"1\":{\"234\":1,\"244\":1}}],[\"connectivity\",{\"1\":{\"191\":1}}],[\"connection对象\",{\"1\":{\"234\":1}}],[\"connectionproperties=characterencoding=utf8\",{\"1\":{\"214\":1}}],[\"connections\",{\"1\":{\"213\":6}}],[\"connectiontimeout=\",{\"1\":{\"139\":1}}],[\"connection\",{\"0\":{\"200\":1},\"1\":{\"116\":1,\"121\":1,\"192\":4,\"199\":1,\"200\":5,\"203\":9,\"204\":6,\"205\":1,\"206\":1,\"207\":1,\"209\":10,\"213\":9,\"214\":7,\"216\":2,\"217\":2,\"234\":3,\"237\":3,\"243\":1,\"905\":1,\"1104\":1,\"1110\":1,\"1112\":3,\"1113\":1,\"1120\":1,\"1122\":1,\"1123\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1142\":1,\"1150\":2}}],[\"conntroller\",{\"1\":{\"212\":1}}],[\"conn\",{\"1\":{\"199\":1,\"243\":2}}],[\"consumer<\",{\"1\":{\"1048\":1}}],[\"consumertask\",{\"1\":{\"867\":12}}],[\"consumer\",{\"1\":{\"867\":8}}],[\"consistency\",{\"1\":{\"210\":1}}],[\"consolehandler\",{\"1\":{\"139\":1}}],[\"constructors\",{\"1\":{\"919\":2}}],[\"constructor<\",{\"1\":{\"919\":7,\"920\":1,\"921\":1,\"1108\":1}}],[\"constructor<t>\",{\"1\":{\"919\":4}}],[\"constructortest\",{\"1\":{\"919\":1}}],[\"constructor\",{\"0\":{\"919\":1},\"1\":{\"463\":1,\"491\":2,\"909\":1,\"919\":13,\"920\":1,\"921\":1,\"922\":1,\"924\":3,\"1108\":2}}],[\"constraint\",{\"1\":{\"171\":2}}],[\"const\",{\"1\":{\"10\":1,\"57\":1,\"312\":1,\"313\":1}}],[\"configurations\",{\"1\":{\"960\":1}}],[\"configurationfactory\",{\"1\":{\"246\":2}}],[\"configuration>\",{\"1\":{\"234\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"249\":2}}],[\"configuration\",{\"1\":{\"234\":1,\"244\":1}}],[\"config>\",{\"1\":{\"215\":4}}],[\"config\",{\"1\":{\"215\":1,\"217\":2,\"234\":4,\"244\":6,\"918\":3,\"1095\":1,\"1195\":2}}],[\"conf\",{\"0\":{\"136\":1,\"137\":1},\"1\":{\"130\":1,\"139\":4,\"768\":1}}],[\"container\",{\"1\":{\"955\":1}}],[\"containsvalue\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"containskey\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"contains1\",{\"1\":{\"953\":2}}],[\"containsdemo1\",{\"1\":{\"953\":1}}],[\"containsall1\",{\"1\":{\"953\":2}}],[\"containsalldemo1\",{\"1\":{\"953\":1}}],[\"containsall\",{\"1\":{\"951\":1,\"953\":6,\"981\":1}}],[\"contains\",{\"1\":{\"736\":1,\"950\":1,\"951\":1,\"953\":6,\"955\":1,\"981\":1}}],[\"continue在循环表示结束当前次的循环\",{\"1\":{\"377\":1}}],[\"continue不同于break\",{\"1\":{\"377\":1}}],[\"continue意为\",{\"1\":{\"377\":1}}],[\"continue\",{\"0\":{\"377\":1},\"1\":{\"312\":1,\"356\":1,\"375\":1,\"378\":1}}],[\"context域\",{\"1\":{\"1161\":1}}],[\"contextpath\",{\"1\":{\"1111\":1}}],[\"context\",{\"1\":{\"137\":1,\"475\":1,\"700\":1,\"1084\":1,\"1111\":1}}],[\"contentdispositionservlet\",{\"1\":{\"1128\":1}}],[\"contenttypeservlet\",{\"1\":{\"1127\":1}}],[\"contenttype\",{\"1\":{\"1120\":1,\"1127\":1}}],[\"content\",{\"0\":{\"1127\":1,\"1128\":1},\"1\":{\"116\":2,\"121\":5,\"127\":2,\"1104\":3,\"1105\":4,\"1110\":2,\"1112\":2,\"1113\":2,\"1120\":5,\"1121\":2,\"1122\":1,\"1123\":1,\"1125\":2,\"1127\":2,\"1128\":2,\"1130\":1,\"1131\":2,\"1132\":2,\"1142\":1,\"1150\":1}}],[\"control\",{\"1\":{\"121\":1,\"1105\":3,\"1112\":1,\"1120\":1,\"1121\":3,\"1132\":3,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"condition之间的关系\",{\"1\":{\"358\":1}}],[\"condition2\",{\"1\":{\"358\":1}}],[\"condition1\",{\"1\":{\"358\":1}}],[\"condition\",{\"1\":{\"164\":3,\"358\":3}}],[\"cond\",{\"1\":{\"73\":2}}],[\"cond=>condition\",{\"1\":{\"73\":1}}],[\"ctrl\",{\"1\":{\"40\":1,\"198\":1}}],[\"c\",{\"1\":{\"34\":2,\"113\":1,\"144\":2,\"145\":1,\"187\":1,\"222\":1,\"233\":3,\"280\":4,\"283\":8,\"319\":1,\"324\":4,\"334\":1,\"336\":2,\"340\":1,\"341\":1,\"342\":1,\"344\":3,\"349\":4,\"420\":1,\"491\":3,\"588\":7,\"655\":3,\"737\":5,\"739\":1,\"741\":1,\"771\":1,\"804\":1,\"806\":3,\"812\":3,\"922\":12,\"924\":4,\"925\":2,\"953\":7,\"958\":1,\"963\":1,\"967\":1,\"978\":1,\"981\":4,\"984\":1,\"988\":1,\"992\":1,\"1077\":1,\"1132\":2}}],[\"rf\",{\"1\":{\"1204\":1}}],[\"rm\",{\"1\":{\"1204\":1}}],[\"rr\",{\"1\":{\"1028\":1}}],[\"r>\",{\"1\":{\"942\":1,\"1040\":1}}],[\"r输入cmd\",{\"1\":{\"307\":1}}],[\"rs\",{\"1\":{\"201\":1}}],[\"rt\",{\"1\":{\"191\":1}}],[\"rows\",{\"1\":{\"244\":1}}],[\"rollback\",{\"1\":{\"200\":1,\"209\":3}}],[\"round\",{\"1\":{\"168\":2}}],[\"root之间没有任何引用链相连\",{\"1\":{\"928\":1}}],[\"roots包含对象呢\",{\"1\":{\"928\":1}}],[\"roots\",{\"1\":{\"928\":1}}],[\"root\",{\"1\":{\"138\":1,\"139\":1,\"147\":1,\"192\":1,\"204\":1,\"234\":2,\"244\":1,\"1094\":1,\"1095\":1,\"1096\":1,\"1097\":1}}],[\"root文件夹\",{\"1\":{\"138\":1}}],[\"random\",{\"1\":{\"867\":10}}],[\"range\",{\"1\":{\"153\":1}}],[\"ram\",{\"1\":{\"766\":1}}],[\"ramsey16k的博客\",{\"1\":{\"719\":1}}],[\"radius\",{\"1\":{\"386\":1}}],[\"rar是类似的\",{\"1\":{\"192\":1}}],[\"rar\",{\"1\":{\"116\":1}}],[\"rdbms\",{\"1\":{\"143\":1}}],[\"run方法执行完\",{\"1\":{\"846\":1}}],[\"run方法只是普通方法调用\",{\"1\":{\"833\":1}}],[\"run模式启动程序\",{\"1\":{\"669\":1}}],[\"runtime\",{\"1\":{\"304\":1,\"924\":2,\"1086\":1}}],[\"runtimeexception的一个子类\",{\"1\":{\"868\":1}}],[\"runtimeexception及其子类\",{\"1\":{\"747\":1}}],[\"runtimeexception\",{\"1\":{\"209\":2,\"213\":3,\"214\":1,\"764\":1,\"942\":1}}],[\"run\",{\"1\":{\"127\":1,\"309\":1,\"459\":5,\"825\":2,\"832\":1,\"833\":11,\"838\":4,\"839\":2,\"840\":2,\"841\":2,\"842\":1,\"844\":1,\"850\":2,\"851\":4,\"855\":2,\"856\":2,\"857\":2,\"864\":2,\"866\":1,\"867\":6,\"880\":1,\"884\":1,\"895\":2,\"903\":1,\"936\":14}}],[\"runnable没有返回值\",{\"1\":{\"881\":1}}],[\"runnable里是run方法\",{\"1\":{\"881\":1}}],[\"runnabletask\",{\"1\":{\"880\":3}}],[\"runnable类型的任务\",{\"1\":{\"880\":1}}],[\"runnable\",{\"1\":{\"127\":1,\"316\":1,\"825\":2,\"847\":1,\"850\":2,\"851\":5,\"855\":1,\"856\":1,\"857\":1,\"864\":1,\"866\":1,\"867\":6,\"880\":3,\"881\":1,\"895\":2,\"903\":1}}],[\"realpath1\",{\"1\":{\"1097\":3}}],[\"realpath\",{\"1\":{\"1097\":3}}],[\"readobject\",{\"1\":{\"824\":3,\"904\":2}}],[\"readboolean\",{\"1\":{\"817\":1}}],[\"readbyte\",{\"1\":{\"817\":1}}],[\"readchar\",{\"1\":{\"817\":1}}],[\"readcount2\",{\"1\":{\"794\":2,\"905\":2}}],[\"readcount\",{\"1\":{\"792\":1,\"794\":9,\"795\":2,\"812\":2,\"813\":2,\"814\":2,\"902\":2,\"903\":2,\"905\":6,\"923\":3}}],[\"readfloat\",{\"1\":{\"817\":1}}],[\"readlong\",{\"1\":{\"817\":1}}],[\"readline\",{\"1\":{\"814\":8,\"821\":1,\"1113\":1,\"1116\":1,\"1132\":1}}],[\"readshort\",{\"1\":{\"817\":1}}],[\"readsingle\",{\"1\":{\"794\":2}}],[\"readdouble\",{\"1\":{\"817\":3}}],[\"readdata4\",{\"1\":{\"794\":2}}],[\"readdata3\",{\"1\":{\"794\":2}}],[\"readdata2\",{\"1\":{\"794\":2}}],[\"readdata\",{\"1\":{\"792\":1,\"794\":10,\"795\":2,\"812\":2,\"817\":2}}],[\"readint\",{\"1\":{\"817\":3}}],[\"readwhile2\",{\"1\":{\"794\":2}}],[\"readwhile1\",{\"1\":{\"794\":2}}],[\"readmulti\",{\"1\":{\"794\":2}}],[\"reader的子类filereader\",{\"1\":{\"783\":1}}],[\"reader\",{\"1\":{\"783\":1,\"813\":3,\"814\":2,\"824\":1,\"918\":2,\"1113\":3,\"1116\":2}}],[\"read\",{\"1\":{\"127\":2,\"211\":6,\"212\":4,\"420\":1,\"792\":3,\"794\":21,\"795\":6,\"810\":3,\"812\":8,\"813\":2,\"814\":1,\"817\":3,\"902\":1,\"903\":2,\"905\":5,\"923\":1,\"1113\":1,\"1116\":1,\"1120\":1,\"1124\":1,\"1128\":1}}],[\"register\",{\"1\":{\"925\":1,\"1118\":1}}],[\"registerdriver\",{\"1\":{\"192\":1,\"199\":1}}],[\"receivetask\",{\"1\":{\"895\":5}}],[\"receive接收\",{\"1\":{\"894\":1,\"895\":1}}],[\"receivepacket\",{\"1\":{\"892\":5,\"893\":6,\"894\":6,\"895\":3}}],[\"receiver\",{\"1\":{\"892\":1,\"894\":1}}],[\"receive\",{\"1\":{\"889\":1,\"892\":3,\"894\":3,\"895\":1}}],[\"receive方法接收数据\",{\"1\":{\"888\":1,\"892\":1}}],[\"release\",{\"1\":{\"869\":1}}],[\"relation\",{\"1\":{\"523\":1}}],[\"relationship\",{\"1\":{\"234\":1}}],[\"relational\",{\"1\":{\"143\":1,\"923\":1}}],[\"reentrantlock\",{\"1\":{\"864\":2}}],[\"reentrantlock可重入锁\",{\"0\":{\"864\":1}}],[\"re\",{\"1\":{\"739\":1}}],[\"replace\",{\"1\":{\"739\":2,\"743\":2,\"912\":2}}],[\"repeatable\",{\"1\":{\"211\":2,\"212\":2}}],[\"reverse\",{\"1\":{\"419\":3,\"743\":4,\"744\":1}}],[\"reset不会改变文件中的内容\",{\"1\":{\"1202\":1}}],[\"reset\",{\"1\":{\"1202\":2}}],[\"reserved\",{\"1\":{\"313\":1}}],[\"response是针对于cookie有提供特定的方法\",{\"1\":{\"1142\":1}}],[\"response流通的\",{\"1\":{\"1110\":1}}],[\"response和http报文之间的关系\",{\"1\":{\"1102\":1}}],[\"response\",{\"0\":{\"1101\":1},\"1\":{\"1110\":2,\"1122\":2,\"1123\":2,\"1132\":4,\"1159\":12}}],[\"resp\",{\"1\":{\"1085\":5,\"1088\":3,\"1095\":1,\"1096\":2,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":3,\"1117\":3,\"1119\":1,\"1120\":2,\"1124\":6,\"1126\":5,\"1127\":3,\"1128\":3,\"1129\":3,\"1130\":14,\"1131\":14,\"1142\":3,\"1143\":1,\"1145\":4,\"1146\":2,\"1147\":4,\"1148\":3,\"1152\":3,\"1159\":5}}],[\"resize\",{\"1\":{\"1006\":1}}],[\"resolution\",{\"1\":{\"497\":1}}],[\"resources文件夹\",{\"1\":{\"1099\":1}}],[\"resources\",{\"1\":{\"234\":1,\"244\":1,\"789\":2,\"1083\":1,\"1110\":1,\"1131\":1}}],[\"resource=\",{\"1\":{\"234\":2,\"244\":2,\"245\":1,\"249\":2}}],[\"result2\",{\"1\":{\"881\":3}}],[\"result1\",{\"1\":{\"881\":3}}],[\"result\",{\"1\":{\"261\":1,\"383\":1,\"442\":3,\"573\":4,\"739\":1,\"1109\":1,\"1143\":1,\"1152\":2}}],[\"resultmap=\",{\"1\":{\"261\":1,\"276\":1,\"277\":1,\"279\":2,\"280\":1,\"282\":1,\"283\":2}}],[\"resultmap>\",{\"1\":{\"261\":1,\"276\":1,\"277\":1,\"279\":2,\"280\":1,\"282\":1,\"283\":3}}],[\"resultmap的type属性\",{\"1\":{\"261\":1}}],[\"resultmap的id属性\",{\"1\":{\"261\":1}}],[\"resultmap对应\",{\"1\":{\"261\":1}}],[\"resultmap\",{\"0\":{\"261\":1},\"1\":{\"256\":1,\"261\":2}}],[\"resulttype中是单个元素的类型\",{\"1\":{\"260\":1}}],[\"resulttype的值是单个元素的类型\",{\"1\":{\"260\":1}}],[\"resulttype写得是bean的全限定类名\",{\"1\":{\"259\":1}}],[\"resulttype写单个元素的类型即可\",{\"1\":{\"260\":1}}],[\"resulttype写单个元素的类型\",{\"1\":{\"258\":1}}],[\"resulttype=\",{\"1\":{\"234\":2,\"240\":1,\"244\":1,\"247\":5,\"250\":2,\"251\":1,\"256\":2,\"257\":3,\"258\":1,\"259\":1,\"260\":1,\"261\":2,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"273\":1,\"276\":1,\"282\":1,\"283\":1}}],[\"resulttype\",{\"1\":{\"234\":1,\"273\":1}}],[\"resultlist\",{\"1\":{\"234\":3}}],[\"results\",{\"1\":{\"201\":1}}],[\"resultset\",{\"0\":{\"202\":1},\"1\":{\"197\":7,\"201\":1,\"202\":7,\"203\":4,\"204\":6,\"214\":6,\"234\":6}}],[\"resultset指结果集对象\",{\"1\":{\"197\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"207\":1}}],[\"retainall\",{\"1\":{\"951\":1,\"953\":1,\"981\":1}}],[\"retention\",{\"1\":{\"924\":2,\"1086\":1}}],[\"retentionpolicy\",{\"1\":{\"924\":5,\"1086\":1}}],[\"retention元注解\",{\"1\":{\"924\":1}}],[\"retrieve\",{\"1\":{\"420\":1}}],[\"ret\",{\"1\":{\"201\":3,\"202\":2,\"204\":3}}],[\"returntype\",{\"1\":{\"922\":3}}],[\"return后的返回值的数据类型\",{\"1\":{\"382\":1}}],[\"return还可以在方法中\",{\"1\":{\"378\":1}}],[\"return在java当中表示直接结束当前方法\",{\"1\":{\"378\":1}}],[\"return可以在一个方法的任何位置使用\",{\"1\":{\"378\":1}}],[\"return意为\",{\"1\":{\"378\":1}}],[\"return使用\",{\"1\":{\"356\":1}}],[\"returninstanceforemptyrow\",{\"1\":{\"246\":1}}],[\"returning\",{\"1\":{\"201\":1}}],[\"returnconnection\",{\"1\":{\"213\":1}}],[\"return\",{\"0\":{\"378\":1},\"1\":{\"127\":6,\"203\":1,\"204\":4,\"209\":2,\"213\":3,\"312\":1,\"375\":1,\"378\":1,\"383\":1,\"418\":2,\"442\":11,\"481\":1,\"516\":1,\"518\":2,\"538\":1,\"564\":2,\"573\":2,\"594\":3,\"606\":2,\"663\":1,\"667\":1,\"668\":1,\"669\":1,\"673\":1,\"696\":1,\"699\":2,\"706\":2,\"710\":1,\"711\":1,\"715\":3,\"717\":3,\"719\":2,\"720\":5,\"740\":8,\"741\":7,\"777\":2,\"824\":1,\"867\":3,\"880\":2,\"881\":2,\"884\":2,\"893\":5,\"904\":1,\"922\":2,\"923\":2,\"924\":1,\"936\":6,\"941\":3,\"942\":1,\"943\":2,\"944\":1,\"954\":4,\"978\":2,\"997\":1,\"1008\":2,\"1028\":2,\"1029\":1,\"1040\":3,\"1043\":2,\"1044\":1,\"1050\":4,\"1095\":1,\"1116\":2,\"1118\":1,\"1132\":1}}],[\"rememberme=deleteme\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"remindstr\",{\"1\":{\"738\":2}}],[\"remind\",{\"1\":{\"738\":2}}],[\"removelastoccurrence\",{\"1\":{\"968\":1,\"975\":1}}],[\"removelast\",{\"1\":{\"968\":1,\"975\":2}}],[\"removefirstoccurrence\",{\"1\":{\"968\":1,\"975\":1}}],[\"removefirst\",{\"1\":{\"968\":1,\"975\":2}}],[\"remove时候\",{\"1\":{\"955\":1}}],[\"removedemo1\",{\"1\":{\"953\":1}}],[\"removealldemo1\",{\"1\":{\"953\":1}}],[\"removeall\",{\"1\":{\"951\":1,\"953\":3,\"956\":1,\"981\":1}}],[\"remove\",{\"1\":{\"213\":1,\"950\":1,\"951\":1,\"953\":3,\"955\":3,\"956\":4,\"958\":1,\"959\":1,\"961\":1,\"965\":1,\"970\":1,\"972\":2,\"975\":1,\"981\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1,\"1147\":1}}],[\"remoteport\",{\"1\":{\"1115\":2}}],[\"remoteaddr\",{\"1\":{\"1115\":2}}],[\"remote\",{\"1\":{\"144\":1}}],[\"remark=\",{\"1\":{\"160\":1}}],[\"remark\",{\"1\":{\"158\":5,\"160\":1}}],[\"renameto\",{\"1\":{\"772\":1}}],[\"rename\",{\"1\":{\"156\":2}}],[\"req\",{\"1\":{\"1085\":6,\"1088\":3,\"1095\":1,\"1096\":2,\"1110\":1,\"1115\":5,\"1116\":2,\"1117\":2,\"1120\":4,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":10,\"1131\":11,\"1142\":2,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":2,\"1152\":4,\"1159\":2}}],[\"reqeust\",{\"1\":{\"127\":1}}],[\"request中提供了直接获得cookie的方法\",{\"1\":{\"1143\":1}}],[\"request域\",{\"1\":{\"1121\":1,\"1161\":1}}],[\"request做请求转发\",{\"0\":{\"1121\":1}}],[\"request对于请求参数的封装实际上\",{\"1\":{\"1117\":1}}],[\"requests\",{\"1\":{\"1112\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"requestb\",{\"1\":{\"128\":1}}],[\"requesta\",{\"1\":{\"128\":1}}],[\"request2\",{\"1\":{\"128\":1}}],[\"requestheaders\",{\"1\":{\"127\":4}}],[\"requestmessage\",{\"1\":{\"127\":8}}],[\"requesturi\",{\"1\":{\"127\":5,\"1130\":5}}],[\"request\",{\"0\":{\"1101\":1},\"1\":{\"127\":10,\"128\":13,\"1105\":2,\"1110\":2,\"1111\":8,\"1112\":8,\"1113\":4,\"1116\":5,\"1117\":6,\"1118\":2,\"1119\":3,\"1121\":4,\"1132\":24,\"1143\":4,\"1153\":1,\"1159\":9}}],[\"refused\",{\"1\":{\"905\":1}}],[\"reflectexecution\",{\"1\":{\"1109\":2}}],[\"reflect\",{\"0\":{\"301\":1},\"1\":{\"301\":1,\"919\":2,\"920\":2,\"921\":2,\"922\":4,\"923\":2,\"924\":4}}],[\"refid=\",{\"1\":{\"267\":3}}],[\"referenced\",{\"1\":{\"475\":1,\"700\":1}}],[\"reference\",{\"1\":{\"424\":1}}],[\"references\",{\"1\":{\"171\":4}}],[\"referer请求头是http请求中的一部分\",{\"1\":{\"116\":1}}],[\"referer请求头\",{\"1\":{\"116\":1}}],[\"referer\",{\"1\":{\"116\":1,\"128\":2,\"1104\":1,\"1110\":1,\"1112\":1,\"1120\":1,\"1132\":1}}],[\"refer\",{\"1\":{\"128\":2}}],[\"refreshpersecond\",{\"1\":{\"1126\":1}}],[\"refreshandforward\",{\"1\":{\"1126\":1}}],[\"refresh\",{\"0\":{\"1126\":1},\"1\":{\"121\":1,\"1125\":1,\"1126\":2,\"1131\":1,\"1159\":4}}],[\"reduce5\",{\"1\":{\"1050\":2}}],[\"reduce4\",{\"1\":{\"1050\":2}}],[\"reduce3\",{\"1\":{\"1050\":2}}],[\"reduce2\",{\"1\":{\"1050\":2}}],[\"reduce\",{\"0\":{\"1050\":1},\"1\":{\"1050\":10}}],[\"redmi\",{\"1\":{\"263\":4}}],[\"redblack\",{\"1\":{\"220\":1}}],[\"rediscli\",{\"1\":{\"144\":2}}],[\"redis\",{\"1\":{\"144\":6,\"287\":1}}],[\"redirectport=\",{\"1\":{\"139\":1}}],[\"red\",{\"1\":{\"23\":2,\"127\":1}}],[\"rgb\",{\"1\":{\"71\":1}}],[\"rgba\",{\"1\":{\"66\":1}}],[\"right\",{\"1\":{\"21\":1,\"75\":3,\"183\":3}}],[\"r\",{\"1\":{\"14\":1,\"15\":1,\"75\":3,\"110\":1,\"114\":1,\"119\":1,\"127\":17,\"354\":1,\"356\":1,\"420\":1,\"789\":3,\"942\":1}}],[\"😉\",{\"1\":{\"1026\":2}}],[\"👆\",{\"1\":{\"14\":1,\"15\":1}}],[\"👇\",{\"1\":{\"4\":1}}],[\"⚠请注意\",{\"1\":{\"12\":1}}],[\"ihdr\",{\"1\":{\"1120\":1}}],[\"ihasreturntwoparam\",{\"1\":{\"654\":1}}],[\"ihasreturnoneparam\",{\"1\":{\"654\":1}}],[\"ihasreturnnoparam\",{\"1\":{\"654\":1}}],[\"ii\",{\"1\":{\"1028\":1}}],[\"i初始值是0\",{\"1\":{\"969\":1}}],[\"illegalstateexception\",{\"1\":{\"972\":1}}],[\"illegalargumentexception\",{\"1\":{\"924\":2}}],[\"illegalaccessexception\",{\"1\":{\"919\":2,\"923\":1,\"924\":1,\"1107\":1,\"1118\":2}}],[\"illegalmonitorstateexception\",{\"1\":{\"868\":1,\"869\":1,\"870\":1}}],[\"illegalthreadstateexception\",{\"1\":{\"833\":1,\"842\":1}}],[\"i6\",{\"1\":{\"706\":2}}],[\"i5\",{\"1\":{\"706\":2}}],[\"i4\",{\"1\":{\"706\":2,\"707\":2}}],[\"i3\",{\"1\":{\"706\":2,\"707\":2}}],[\"i2\",{\"1\":{\"706\":2,\"707\":2}}],[\"i1\",{\"1\":{\"704\":1,\"706\":2,\"707\":2}}],[\"ig2\",{\"1\":{\"655\":2}}],[\"ig\",{\"1\":{\"655\":5}}],[\"ignored\",{\"1\":{\"383\":1}}],[\"ie2\",{\"1\":{\"655\":2}}],[\"ie\",{\"1\":{\"655\":5}}],[\"ieee754标准学习\",{\"1\":{\"326\":1}}],[\"ieee754标准\",{\"1\":{\"323\":1}}],[\"ieee754标准下的浮点数\",{\"1\":{\"323\":1}}],[\"ieee754标准的浮点数表示方式牵扯到\",{\"1\":{\"323\":1}}],[\"icc\",{\"1\":{\"1120\":1}}],[\"iccpphotoshop\",{\"1\":{\"1120\":1}}],[\"ic1\",{\"1\":{\"655\":2}}],[\"ic2\",{\"1\":{\"655\":2}}],[\"ic\",{\"1\":{\"655\":6}}],[\"ia接口中的testa方法的实现\",{\"1\":{\"655\":1}}],[\"ia1\",{\"1\":{\"655\":2}}],[\"ia2\",{\"1\":{\"655\":2}}],[\"ia\",{\"1\":{\"652\":2,\"655\":6}}],[\"i表示行\",{\"1\":{\"441\":1}}],[\"i大写的字母i表示数组的类型是int类型\",{\"1\":{\"400\":1}}],[\"i<100\",{\"1\":{\"271\":1}}],[\"ib\",{\"1\":{\"655\":7}}],[\"ibatis\",{\"1\":{\"246\":2}}],[\"ibd\",{\"1\":{\"225\":1,\"228\":1}}],[\"ibm的小型机\",{\"1\":{\"143\":1}}],[\"i+=2\",{\"1\":{\"872\":2}}],[\"i++\",{\"1\":{\"205\":1,\"206\":1,\"207\":1,\"213\":1,\"271\":1,\"367\":1,\"377\":1,\"378\":1,\"415\":1,\"440\":1,\"441\":4,\"700\":1,\"737\":1,\"739\":1,\"741\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":2,\"844\":2,\"856\":1,\"857\":1,\"880\":2,\"881\":1,\"997\":1}}],[\"i+1\",{\"1\":{\"75\":1}}],[\"ip或端口号或域名发生变化\",{\"1\":{\"1157\":1}}],[\"ip地址\",{\"1\":{\"885\":2}}],[\"iphone去模拟多态场景\",{\"1\":{\"575\":1}}],[\"iphone14\",{\"1\":{\"274\":1}}],[\"iphone13\",{\"1\":{\"273\":1}}],[\"ip\",{\"1\":{\"192\":1,\"893\":2,\"895\":6,\"1115\":2}}],[\"io流\",{\"1\":{\"1031\":1}}],[\"io的分类\",{\"0\":{\"782\":1}}],[\"io包中的类总是根据\",{\"1\":{\"767\":1}}],[\"io操作异常\",{\"1\":{\"748\":1}}],[\"ioe\",{\"1\":{\"143\":1}}],[\"ioexception\",{\"1\":{\"127\":5,\"203\":1,\"213\":1,\"234\":1,\"244\":1,\"748\":1,\"771\":2,\"788\":2,\"789\":9,\"790\":3,\"794\":10,\"795\":2,\"806\":1,\"807\":2,\"808\":2,\"812\":2,\"813\":2,\"814\":4,\"817\":6,\"818\":7,\"819\":2,\"820\":2,\"821\":2,\"824\":3,\"844\":3,\"892\":4,\"894\":4,\"895\":4,\"903\":2,\"918\":6,\"923\":3,\"1078\":2,\"1085\":4,\"1088\":2,\"1095\":1,\"1096\":2,\"1107\":1,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":3,\"1122\":1,\"1123\":1,\"1124\":2,\"1126\":1,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1131\":3,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"io\",{\"0\":{\"778\":1},\"1\":{\"127\":3,\"748\":2,\"769\":1,\"771\":2,\"776\":2,\"777\":2,\"788\":4,\"789\":11,\"790\":4,\"794\":6,\"795\":3,\"801\":1,\"806\":1,\"807\":2,\"808\":4,\"812\":3,\"813\":2,\"814\":8,\"817\":2,\"818\":3,\"819\":2,\"820\":4,\"821\":3,\"823\":1,\"824\":3,\"844\":2,\"885\":1,\"892\":2,\"894\":2,\"895\":2,\"902\":2,\"903\":3,\"904\":5,\"905\":6,\"918\":8,\"922\":1,\"923\":4,\"1078\":1}}],[\"ifpresent\",{\"1\":{\"1046\":2}}],[\"if的判断条件可以是一个连续的取值范围\",{\"1\":{\"360\":1}}],[\"if的使用场景\",{\"1\":{\"360\":1}}],[\"if的test中就怎么写\",{\"1\":{\"265\":1}}],[\"if多分支使用注意事项\",{\"1\":{\"358\":1}}],[\"if是最常见和常用的\",{\"1\":{\"357\":1}}],[\"if语句\",{\"0\":{\"358\":1},\"1\":{\"357\":1}}],[\"if中就可以写什么\",{\"1\":{\"265\":1}}],[\"if>\",{\"1\":{\"264\":2,\"265\":2,\"268\":3,\"269\":3}}],[\"if标签可以帮助我们去做判断是否满足某个条件\",{\"1\":{\"265\":1}}],[\"if标签\",{\"1\":{\"264\":1}}],[\"ifmmp\",{\"1\":{\"125\":1}}],[\"if\",{\"0\":{\"265\":1},\"1\":{\"116\":1,\"127\":2,\"180\":2,\"203\":3,\"204\":3,\"209\":2,\"213\":1,\"232\":1,\"261\":1,\"266\":4,\"275\":2,\"278\":2,\"281\":3,\"312\":1,\"331\":1,\"349\":1,\"358\":5,\"360\":1,\"377\":1,\"378\":1,\"415\":1,\"418\":2,\"440\":4,\"442\":6,\"696\":1,\"706\":1,\"707\":1,\"720\":2,\"737\":2,\"739\":1,\"740\":1,\"764\":1,\"776\":4,\"789\":1,\"794\":1,\"821\":1,\"825\":2,\"844\":2,\"851\":2,\"855\":1,\"856\":3,\"857\":3,\"860\":1,\"864\":1,\"866\":3,\"867\":10,\"884\":3,\"924\":5,\"954\":4,\"956\":1,\"978\":6,\"1006\":1,\"1028\":2,\"1040\":2,\"1046\":2,\"1050\":2,\"1085\":2,\"1116\":2,\"1118\":2,\"1130\":3,\"1131\":1,\"1148\":2,\"1159\":2}}],[\"iml\",{\"1\":{\"1203\":1}}],[\"img\",{\"1\":{\"240\":1,\"968\":1}}],[\"img等资源\",{\"1\":{\"113\":1}}],[\"implement\",{\"1\":{\"599\":1}}],[\"implements\",{\"0\":{\"599\":1},\"1\":{\"312\":1,\"596\":2,\"599\":2,\"606\":1,\"696\":1,\"740\":1,\"741\":1,\"777\":1,\"789\":1,\"824\":1,\"850\":1,\"851\":2,\"855\":1,\"856\":1,\"857\":1,\"864\":1,\"866\":1,\"867\":6,\"880\":2,\"881\":2,\"895\":2,\"903\":1,\"904\":1,\"936\":2,\"941\":6,\"942\":1}}],[\"impl\",{\"1\":{\"128\":2,\"192\":1,\"598\":2}}],[\"import导包语句应该放在package声明之后\",{\"1\":{\"503\":1}}],[\"import关键字存在智能导包的形式\",{\"1\":{\"504\":1}}],[\"import关键字\",{\"0\":{\"501\":1}}],[\"import\",{\"1\":{\"127\":10,\"312\":1,\"352\":1,\"503\":1,\"504\":1,\"730\":1,\"738\":2,\"739\":1,\"740\":1,\"741\":2,\"764\":1,\"769\":2,\"771\":3,\"776\":2,\"777\":3,\"788\":4,\"789\":11,\"790\":4,\"794\":6,\"795\":3,\"801\":2,\"806\":1,\"807\":2,\"808\":4,\"812\":3,\"813\":2,\"814\":8,\"817\":2,\"818\":3,\"819\":2,\"820\":4,\"821\":3,\"824\":1,\"825\":4,\"832\":1,\"839\":1,\"844\":4,\"859\":1,\"860\":1,\"864\":2,\"867\":2,\"880\":3,\"881\":6,\"884\":6,\"892\":7,\"893\":3,\"894\":10,\"895\":12,\"902\":5,\"903\":9,\"904\":8,\"905\":9,\"918\":12,\"919\":2,\"920\":3,\"921\":3,\"922\":4,\"923\":6,\"924\":8,\"1078\":6}}],[\"imageview\",{\"1\":{\"1132\":20}}],[\"image\",{\"1\":{\"105\":1,\"114\":1,\"116\":4,\"119\":1,\"134\":1,\"141\":1,\"143\":1,\"149\":1,\"157\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"178\":1,\"180\":1,\"188\":1,\"190\":1,\"191\":1,\"192\":1,\"202\":2,\"204\":2,\"212\":1,\"213\":2,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"219\":3,\"220\":6,\"221\":1,\"222\":4,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"235\":1,\"244\":1,\"245\":1,\"247\":1,\"255\":2,\"262\":1,\"263\":1,\"275\":1,\"284\":1,\"286\":3,\"312\":1,\"320\":1,\"335\":1,\"338\":1,\"356\":1,\"358\":3,\"359\":1,\"394\":2,\"403\":1,\"405\":1,\"408\":1,\"409\":1,\"426\":1,\"430\":1,\"447\":1,\"456\":2,\"469\":1,\"474\":1,\"540\":1,\"594\":1,\"701\":1,\"720\":1,\"730\":5,\"731\":1,\"732\":2,\"734\":1,\"735\":1,\"739\":1,\"744\":1,\"747\":1,\"748\":1,\"767\":1,\"781\":1,\"786\":1,\"788\":1,\"790\":2,\"792\":1,\"794\":3,\"795\":1,\"796\":1,\"802\":1,\"804\":1,\"806\":1,\"807\":1,\"808\":1,\"813\":1,\"814\":1,\"817\":1,\"819\":1,\"820\":3,\"823\":1,\"824\":2,\"825\":1,\"827\":1,\"831\":1,\"840\":1,\"848\":1,\"849\":1,\"852\":2,\"853\":1,\"861\":1,\"862\":2,\"863\":1,\"865\":1,\"867\":1,\"877\":1,\"878\":1,\"881\":1,\"885\":1,\"886\":1,\"895\":1,\"896\":1,\"905\":1,\"909\":1,\"913\":1,\"914\":1,\"917\":1,\"918\":1,\"923\":1,\"924\":2,\"925\":2,\"928\":1,\"930\":2,\"931\":2,\"932\":1,\"933\":1,\"936\":1,\"937\":1,\"944\":1,\"948\":1,\"949\":1,\"954\":2,\"955\":3,\"957\":1,\"958\":1,\"960\":1,\"961\":1,\"969\":2,\"970\":2,\"973\":1,\"978\":1,\"979\":1,\"1082\":1,\"1083\":1,\"1084\":4,\"1085\":1,\"1092\":1,\"1098\":1,\"1100\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1117\":1,\"1120\":6,\"1121\":3,\"1132\":4,\"1137\":3,\"1138\":3,\"1140\":3,\"1141\":1,\"1142\":1,\"1144\":1,\"1145\":1,\"1146\":3,\"1150\":2,\"1151\":1,\"1183\":2,\"1186\":1,\"1188\":1,\"1191\":1,\"1193\":1,\"1195\":2,\"1196\":2,\"1197\":1,\"1198\":1,\"1200\":1,\"1201\":1,\"1202\":2,\"1203\":1,\"1205\":2}}],[\"i\",{\"1\":{\"75\":1,\"205\":2,\"206\":2,\"207\":3,\"209\":1,\"213\":2,\"268\":2,\"269\":2,\"271\":9,\"273\":1,\"367\":2,\"377\":3,\"378\":4,\"400\":1,\"415\":3,\"440\":12,\"441\":19,\"598\":1,\"700\":2,\"703\":4,\"704\":2,\"706\":9,\"737\":3,\"738\":6,\"739\":6,\"741\":2,\"817\":4,\"833\":10,\"838\":5,\"839\":3,\"840\":3,\"841\":2,\"842\":4,\"844\":4,\"856\":2,\"857\":2,\"872\":4,\"880\":5,\"881\":2,\"922\":2,\"937\":1,\"939\":1,\"997\":4}}],[\"i=1\",{\"1\":{\"75\":1}}],[\"i=0\",{\"1\":{\"11\":1,\"271\":1}}],[\"iss53\",{\"1\":{\"1204\":4}}],[\"issue号\",{\"1\":{\"1195\":3}}],[\"isarray\",{\"1\":{\"1118\":2}}],[\"isannotationpresent\",{\"1\":{\"924\":3}}],[\"ispresent\",{\"1\":{\"1046\":4}}],[\"iso8859\",{\"1\":{\"799\":2}}],[\"isolation\",{\"1\":{\"210\":1,\"212\":4}}],[\"isdirectory\",{\"1\":{\"774\":1}}],[\"isdigit\",{\"1\":{\"705\":1}}],[\"isletter\",{\"1\":{\"705\":1}}],[\"isletterordigit\",{\"1\":{\"705\":1}}],[\"islowercase\",{\"1\":{\"705\":1}}],[\"iswhitespace\",{\"1\":{\"705\":1}}],[\"isuppercase\",{\"1\":{\"705\":1}}],[\"isflag\",{\"1\":{\"518\":1}}],[\"isfile\",{\"1\":{\"127\":1,\"774\":1,\"776\":2}}],[\"ismale\",{\"1\":{\"518\":3}}],[\"isempty\",{\"1\":{\"213\":1,\"736\":1,\"867\":3,\"953\":1,\"981\":1,\"997\":1,\"1018\":1,\"1023\":1}}],[\"is\",{\"1\":{\"66\":2,\"141\":1,\"162\":3,\"383\":1,\"523\":3,\"524\":1,\"528\":1,\"533\":1,\"595\":2,\"597\":1,\"606\":1}}],[\"identity\",{\"1\":{\"1050\":2}}],[\"idea中使用tomcat\",{\"0\":{\"1084\":1}}],[\"idea中\",{\"1\":{\"960\":1}}],[\"idea也给hashcode方法的重写提供快速生成\",{\"1\":{\"683\":1}}],[\"idea给我们提示的时候\",{\"1\":{\"533\":1}}],[\"idea会自动导包\",{\"1\":{\"503\":1}}],[\"idea有自动导包功能\",{\"1\":{\"352\":1}}],[\"idea的debug模式下不能复现懒加载\",{\"1\":{\"283\":1}}],[\"ideaprojects\",{\"1\":{\"249\":1}}],[\"idea\",{\"1\":{\"130\":1,\"800\":1,\"1098\":1,\"1120\":1,\"1203\":1}}],[\"id2\",{\"1\":{\"655\":2}}],[\"id是\",{\"1\":{\"594\":2}}],[\"id是主键\",{\"1\":{\"169\":1}}],[\"id主键映射\",{\"1\":{\"261\":1}}],[\"id1\",{\"1\":{\"250\":2,\"251\":2}}],[\"id1lsdfjasdlfdjkl\",{\"1\":{\"250\":2}}],[\"idx\",{\"1\":{\"232\":4,\"233\":2}}],[\"idleconnectiontestperiod\",{\"1\":{\"215\":1}}],[\"id上建立一个外键\",{\"1\":{\"171\":1}}],[\"id会跳过\",{\"1\":{\"169\":1}}],[\"id=20054\",{\"1\":{\"256\":1}}],[\"id=500\",{\"1\":{\"229\":1}}],[\"id=50301\",{\"1\":{\"220\":1}}],[\"id=\",{\"1\":{\"184\":1,\"234\":3,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":4,\"247\":5,\"248\":3,\"249\":1,\"250\":2,\"251\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"256\":2,\"257\":3,\"258\":1,\"259\":1,\"260\":1,\"261\":4,\"264\":2,\"265\":1,\"266\":1,\"267\":5,\"268\":1,\"269\":1,\"271\":4,\"272\":1,\"273\":1,\"274\":1,\"276\":3,\"277\":2,\"279\":4,\"280\":2,\"282\":3,\"283\":6,\"668\":1,\"715\":1,\"717\":1}}],[\"id=1\",{\"1\":{\"162\":1,\"184\":1}}],[\"id=10\",{\"1\":{\"161\":1,\"220\":1}}],[\"id=6\",{\"1\":{\"158\":1,\"162\":1}}],[\"id\",{\"1\":{\"61\":1,\"153\":5,\"157\":3,\"158\":7,\"159\":1,\"161\":2,\"162\":2,\"165\":1,\"167\":1,\"169\":2,\"170\":3,\"171\":20,\"177\":1,\"180\":3,\"182\":4,\"183\":4,\"184\":5,\"195\":1,\"196\":1,\"197\":4,\"209\":1,\"214\":3,\"220\":1,\"222\":1,\"225\":1,\"229\":1,\"230\":1,\"231\":3,\"232\":1,\"233\":5,\"234\":7,\"237\":2,\"238\":3,\"239\":2,\"240\":4,\"244\":4,\"247\":12,\"250\":4,\"251\":4,\"252\":2,\"254\":3,\"256\":5,\"257\":9,\"259\":5,\"261\":4,\"263\":2,\"264\":2,\"265\":9,\"266\":5,\"267\":7,\"268\":2,\"269\":2,\"271\":9,\"272\":3,\"273\":2,\"274\":4,\"275\":5,\"276\":4,\"277\":13,\"278\":5,\"279\":7,\"280\":12,\"281\":21,\"282\":8,\"283\":24,\"478\":7,\"594\":12,\"655\":5,\"668\":1,\"713\":5,\"715\":6,\"717\":6,\"720\":9,\"1019\":3,\"1132\":20}}],[\"item=\",{\"1\":{\"271\":4,\"272\":1}}],[\"item\",{\"1\":{\"271\":1}}],[\"iterator<string>\",{\"1\":{\"955\":2,\"956\":1,\"1118\":3}}],[\"iterator<e>\",{\"1\":{\"953\":1,\"959\":1,\"968\":1,\"975\":1,\"981\":1}}],[\"iteratordemo1\",{\"1\":{\"955\":1}}],[\"iterator是个接口\",{\"1\":{\"955\":1}}],[\"iterator\",{\"0\":{\"955\":1},\"1\":{\"247\":2,\"417\":1,\"953\":1,\"955\":9,\"956\":7,\"981\":1,\"1118\":10}}],[\"it\",{\"1\":{\"54\":2,\"201\":1}}],[\"inf\",{\"1\":{\"1099\":1,\"1100\":1}}],[\"inf文件夹\",{\"1\":{\"1098\":1}}],[\"infoservlet\",{\"1\":{\"1159\":1}}],[\"info对应的处理方法\",{\"1\":{\"1131\":1}}],[\"info`\",{\"1\":{\"171\":1}}],[\"information\",{\"1\":{\"148\":1}}],[\"info可以出现在任意位置\",{\"1\":{\"148\":1}}],[\"info\",{\"1\":{\"148\":2,\"149\":2,\"155\":2,\"158\":7,\"517\":1,\"1130\":2,\"1131\":4,\"1159\":2}}],[\"in2\",{\"1\":{\"905\":2}}],[\"inetaddress\",{\"1\":{\"885\":1,\"890\":1,\"892\":4,\"893\":3}}],[\"invalidate\",{\"1\":{\"1153\":1,\"1159\":2}}],[\"invalidclassexception\",{\"1\":{\"824\":1}}],[\"invocationtargetexception\",{\"1\":{\"919\":2,\"923\":2,\"924\":2,\"1118\":1}}],[\"invokefathertest\",{\"1\":{\"555\":1}}],[\"invoke\",{\"1\":{\"380\":1,\"921\":6,\"923\":1,\"1109\":8,\"1118\":4}}],[\"inoreturntwoparam\",{\"1\":{\"654\":1}}],[\"inoreturnoneparam\",{\"1\":{\"654\":1}}],[\"inoreturnnoparam\",{\"1\":{\"654\":1}}],[\"initoffset\",{\"1\":{\"1132\":2}}],[\"initparams属性\",{\"1\":{\"1097\":1}}],[\"initparams\",{\"1\":{\"1086\":1,\"1094\":1,\"1095\":1,\"1097\":1}}],[\"init\",{\"1\":{\"851\":2,\"1093\":4,\"1096\":1,\"1097\":1,\"1131\":3,\"1132\":1,\"1159\":1}}],[\"initnumber++\",{\"1\":{\"478\":1}}],[\"initnumber\",{\"1\":{\"478\":1}}],[\"initial\",{\"1\":{\"978\":3,\"1006\":1}}],[\"initialcapacity++\",{\"1\":{\"978\":2}}],[\"initialcapacity\",{\"1\":{\"963\":1,\"978\":60,\"984\":2,\"988\":2,\"1017\":2,\"1022\":3}}],[\"initialization\",{\"1\":{\"396\":1,\"434\":1,\"497\":1}}],[\"initialpoolsize\",{\"1\":{\"215\":1}}],[\"initialsize=10\",{\"1\":{\"214\":1}}],[\"instantiationexception\",{\"1\":{\"919\":1,\"923\":1,\"924\":1,\"1107\":1}}],[\"instance对象执行method的返回值\",{\"1\":{\"1109\":1}}],[\"instance的username成员变量是否是lisi\",{\"1\":{\"1109\":1}}],[\"instance2的username这个成员变量赋值zhangsan\",{\"1\":{\"1108\":1}}],[\"instance2\",{\"1\":{\"1108\":3}}],[\"instance1\",{\"1\":{\"1108\":1,\"1109\":1}}],[\"instance\",{\"1\":{\"447\":1,\"884\":9,\"1097\":1,\"1107\":1,\"1109\":7,\"1118\":15}}],[\"instanceof关键字\",{\"0\":{\"586\":1}}],[\"instanceof\",{\"1\":{\"312\":1,\"586\":2,\"675\":1,\"696\":1}}],[\"instream\",{\"1\":{\"918\":1}}],[\"insecure\",{\"1\":{\"1112\":2,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"insensitive\",{\"1\":{\"149\":1}}],[\"insert完成\",{\"1\":{\"669\":1}}],[\"insert快速生成\",{\"1\":{\"518\":1}}],[\"insert快速生成构造器\",{\"1\":{\"466\":1}}],[\"insertphone2\",{\"1\":{\"274\":3}}],[\"insertphone\",{\"1\":{\"273\":3}}],[\"insertphonearrayparam\",{\"1\":{\"271\":2}}],[\"insertphonearray\",{\"1\":{\"271\":4}}],[\"insertphonelistparam\",{\"1\":{\"271\":3}}],[\"insertphonelist\",{\"1\":{\"271\":3}}],[\"insertaccount6\",{\"1\":{\"254\":2}}],[\"insertaccount5\",{\"1\":{\"254\":2}}],[\"insertaccount4\",{\"1\":{\"253\":1}}],[\"insertaccount3\",{\"1\":{\"253\":2}}],[\"insertaccount2\",{\"1\":{\"252\":2}}],[\"insertaccount\",{\"1\":{\"244\":3,\"252\":2}}],[\"insert>\",{\"1\":{\"237\":1,\"244\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"271\":4,\"273\":1,\"274\":1}}],[\"insertuser7\",{\"1\":{\"255\":3}}],[\"insertuser6\",{\"1\":{\"255\":3}}],[\"insertuser2\",{\"1\":{\"254\":1}}],[\"insertuser5\",{\"1\":{\"253\":1}}],[\"insertuser\",{\"1\":{\"237\":3}}],[\"insert\",{\"1\":{\"149\":1,\"158\":16,\"161\":13,\"169\":3,\"170\":2,\"171\":8,\"180\":9,\"192\":1,\"194\":1,\"205\":1,\"206\":1,\"207\":2,\"209\":4,\"212\":1,\"220\":1,\"222\":1,\"225\":1,\"229\":1,\"237\":1,\"244\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"261\":1,\"263\":1,\"271\":5,\"273\":2,\"274\":1,\"275\":9,\"278\":10,\"281\":15,\"562\":1,\"675\":1,\"683\":1,\"743\":2}}],[\"inclusive\",{\"1\":{\"993\":2,\"1026\":4}}],[\"include可以帮助我们引入公共的sql片段\",{\"1\":{\"267\":1}}],[\"include\",{\"0\":{\"267\":1},\"1\":{\"267\":2}}],[\"incompatible\",{\"1\":{\"824\":1}}],[\"increment2\",{\"1\":{\"169\":4}}],[\"increment是否一定连续\",{\"1\":{\"169\":1}}],[\"increment来指定\",{\"1\":{\"169\":1}}],[\"increment=1000\",{\"1\":{\"169\":1}}],[\"increment\",{\"1\":{\"161\":1,\"169\":5,\"171\":1,\"177\":1,\"180\":2,\"209\":1,\"233\":1,\"240\":1,\"261\":1,\"263\":2,\"275\":2,\"278\":2,\"281\":3}}],[\"innodb和myisam有什么区别\",{\"1\":{\"233\":1}}],[\"innodb举例\",{\"0\":{\"229\":1}}],[\"innodb支持表锁和行锁\",{\"1\":{\"228\":1}}],[\"innodb支持外键\",{\"1\":{\"228\":1}}],[\"innodb支持事务\",{\"1\":{\"228\":1}}],[\"innodb只有两个文件\",{\"1\":{\"228\":1}}],[\"innodb使用索引存储\",{\"1\":{\"226\":1}}],[\"innodb的索引分为两种类型\",{\"1\":{\"225\":1}}],[\"innodb\",{\"0\":{\"225\":1},\"1\":{\"221\":1,\"225\":2,\"232\":1}}],[\"innerclazz\",{\"1\":{\"609\":1,\"616\":4,\"617\":2}}],[\"inner\",{\"1\":{\"182\":4,\"616\":2,\"619\":1,\"623\":2,\"629\":1,\"633\":1}}],[\"indirector\",{\"1\":{\"215\":1}}],[\"index1\",{\"1\":{\"271\":5}}],[\"index关键词\",{\"1\":{\"222\":1}}],[\"indexof\",{\"1\":{\"127\":4,\"737\":13,\"956\":1,\"958\":1,\"1116\":1}}],[\"index=500\",{\"1\":{\"948\":1}}],[\"index=\",{\"1\":{\"271\":3}}],[\"index=3\",{\"1\":{\"110\":1}}],[\"index=0\",{\"1\":{\"110\":1}}],[\"index\",{\"0\":{\"0\":1},\"1\":{\"27\":1,\"127\":5,\"218\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":10,\"233\":1,\"234\":1,\"271\":1,\"393\":1,\"737\":2,\"743\":2,\"867\":4,\"941\":1,\"956\":4,\"958\":7,\"1116\":3,\"1130\":2}}],[\"input\",{\"1\":{\"204\":6,\"779\":1}}],[\"inputstreamreader\",{\"1\":{\"812\":8,\"814\":4,\"821\":2,\"824\":1,\"918\":2}}],[\"inputstreamreader转换流\",{\"0\":{\"812\":1}}],[\"inputstream的子类fileinputstream\",{\"1\":{\"783\":1}}],[\"inputstream\",{\"1\":{\"127\":5,\"234\":3,\"244\":4,\"783\":1,\"795\":2,\"812\":2,\"817\":2,\"821\":1,\"824\":3,\"899\":1,\"902\":2,\"903\":2,\"904\":4,\"905\":4,\"918\":3,\"1107\":3,\"1113\":3,\"1116\":2,\"1120\":7,\"1124\":4,\"1128\":4}}],[\"intput标签中的name属性值其实就是请求参数名\",{\"1\":{\"1120\":1}}],[\"intvalue\",{\"1\":{\"703\":3}}],[\"int整数\",{\"1\":{\"679\":1}}],[\"int构造方法\",{\"1\":{\"545\":1}}],[\"int任何数据类型与long进行计算\",{\"1\":{\"340\":1}}],[\"interruptedexception\",{\"1\":{\"825\":2,\"832\":1,\"839\":2,\"840\":1,\"842\":2,\"844\":2,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":1,\"867\":4,\"870\":2,\"871\":2,\"872\":6,\"880\":1,\"881\":2,\"884\":1}}],[\"inter\",{\"1\":{\"650\":1}}],[\"interface具有同等地位\",{\"1\":{\"924\":1}}],[\"interfaces\",{\"1\":{\"922\":2}}],[\"interface\",{\"1\":{\"128\":1,\"213\":1,\"312\":1,\"595\":1,\"596\":1,\"598\":2,\"650\":1,\"652\":2,\"654\":6,\"655\":6,\"658\":1,\"696\":1,\"924\":6,\"936\":1,\"941\":5,\"942\":1,\"959\":1,\"1036\":1,\"1086\":1}}],[\"integer是number的子类\",{\"1\":{\"944\":1}}],[\"integer有区别\",{\"1\":{\"940\":1}}],[\"integer>\",{\"1\":{\"939\":1,\"1052\":1}}],[\"integer对象是在jvm启动时就把对象放入缓存\",{\"1\":{\"709\":1}}],[\"integer的一些面试问题\",{\"0\":{\"707\":1}}],[\"integer的缓存机制\",{\"0\":{\"706\":1}}],[\"integercache\",{\"1\":{\"706\":4}}],[\"integer中有缓存\",{\"1\":{\"706\":1}}],[\"integer源代码\",{\"1\":{\"706\":1}}],[\"integer3\",{\"1\":{\"704\":2}}],[\"integer2\",{\"1\":{\"703\":2,\"704\":3}}],[\"integer1\",{\"1\":{\"703\":1,\"704\":2}}],[\"integer\",{\"1\":{\"234\":1,\"238\":1,\"240\":1,\"244\":2,\"247\":8,\"250\":2,\"251\":1,\"254\":3,\"257\":3,\"259\":1,\"261\":2,\"262\":2,\"263\":2,\"265\":2,\"266\":3,\"273\":1,\"275\":3,\"278\":4,\"281\":2,\"352\":1,\"353\":1,\"667\":2,\"700\":5,\"701\":1,\"702\":1,\"703\":10,\"704\":12,\"706\":10,\"707\":10,\"881\":3,\"937\":1,\"939\":1,\"940\":3,\"941\":2,\"943\":1,\"944\":1,\"1050\":3,\"1132\":25}}],[\"into\",{\"1\":{\"149\":1,\"158\":16,\"161\":13,\"169\":3,\"170\":2,\"171\":8,\"180\":9,\"192\":1,\"194\":1,\"205\":1,\"206\":1,\"207\":2,\"209\":4,\"212\":1,\"220\":1,\"222\":1,\"225\":1,\"229\":1,\"237\":1,\"244\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"261\":1,\"263\":1,\"271\":5,\"273\":1,\"274\":1,\"275\":9,\"278\":10,\"281\":15}}],[\"int\",{\"1\":{\"127\":6,\"153\":5,\"157\":3,\"158\":2,\"161\":1,\"169\":3,\"170\":2,\"171\":7,\"177\":1,\"180\":3,\"192\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":2,\"201\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":6,\"212\":1,\"213\":1,\"214\":1,\"222\":2,\"225\":2,\"229\":2,\"232\":2,\"233\":3,\"234\":1,\"237\":2,\"238\":2,\"239\":2,\"240\":2,\"244\":2,\"247\":6,\"252\":2,\"253\":3,\"254\":3,\"255\":2,\"261\":2,\"263\":6,\"268\":2,\"269\":2,\"271\":9,\"273\":2,\"274\":2,\"275\":3,\"278\":4,\"281\":5,\"312\":1,\"316\":2,\"322\":3,\"326\":1,\"331\":4,\"334\":1,\"336\":5,\"337\":1,\"340\":2,\"341\":1,\"342\":1,\"344\":6,\"346\":2,\"348\":1,\"349\":1,\"352\":4,\"359\":5,\"367\":2,\"377\":1,\"378\":1,\"383\":6,\"389\":3,\"402\":1,\"407\":1,\"415\":5,\"418\":8,\"419\":6,\"423\":3,\"424\":1,\"425\":1,\"426\":3,\"433\":1,\"440\":3,\"441\":9,\"442\":9,\"444\":3,\"450\":1,\"465\":2,\"467\":2,\"468\":3,\"469\":10,\"471\":3,\"472\":2,\"474\":2,\"478\":3,\"487\":1,\"491\":3,\"498\":5,\"509\":1,\"517\":1,\"539\":1,\"545\":7,\"564\":5,\"570\":2,\"573\":3,\"588\":9,\"594\":6,\"619\":3,\"654\":9,\"655\":11,\"658\":1,\"667\":1,\"677\":1,\"700\":4,\"701\":1,\"702\":1,\"703\":4,\"704\":2,\"705\":1,\"706\":5,\"713\":3,\"715\":3,\"717\":3,\"719\":1,\"720\":5,\"729\":8,\"737\":34,\"738\":3,\"739\":4,\"740\":8,\"741\":10,\"742\":1,\"743\":16,\"764\":1,\"786\":3,\"788\":6,\"790\":4,\"792\":6,\"794\":18,\"795\":5,\"804\":5,\"806\":5,\"808\":1,\"810\":5,\"812\":4,\"813\":1,\"814\":2,\"816\":2,\"817\":3,\"818\":10,\"819\":2,\"820\":2,\"824\":5,\"833\":4,\"838\":9,\"839\":1,\"840\":1,\"841\":1,\"842\":2,\"844\":2,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"860\":1,\"864\":1,\"867\":6,\"872\":2,\"880\":3,\"881\":4,\"889\":1,\"890\":7,\"892\":11,\"893\":3,\"895\":3,\"899\":1,\"900\":1,\"902\":3,\"903\":1,\"904\":2,\"905\":3,\"910\":2,\"919\":3,\"922\":7,\"923\":3,\"924\":9,\"937\":1,\"939\":1,\"941\":2,\"948\":2,\"953\":2,\"954\":5,\"956\":3,\"958\":10,\"959\":2,\"963\":1,\"964\":1,\"978\":8,\"981\":2,\"984\":2,\"988\":2,\"997\":4,\"1006\":1,\"1007\":1,\"1008\":4,\"1009\":1,\"1016\":1,\"1017\":2,\"1018\":2,\"1022\":3,\"1023\":2,\"1026\":1,\"1028\":6,\"1029\":1,\"1040\":2,\"1086\":1,\"1111\":2,\"1113\":1,\"1115\":4,\"1116\":1,\"1120\":1,\"1122\":1,\"1124\":1,\"1128\":1,\"1130\":1,\"1132\":1,\"1144\":1}}],[\"in\",{\"1\":{\"21\":3,\"162\":3,\"184\":2,\"185\":1,\"272\":1,\"352\":3,\"353\":1,\"538\":1,\"730\":1,\"738\":1,\"764\":1,\"794\":24,\"795\":8,\"812\":6,\"814\":2,\"817\":5,\"821\":5,\"824\":4,\"825\":2,\"894\":2,\"895\":1,\"902\":2,\"903\":3,\"904\":2,\"905\":7,\"918\":2,\"923\":2,\"954\":1}}],[\"inline\",{\"1\":{\"9\":1}}],[\"smallicon\",{\"1\":{\"1086\":1}}],[\"sneakythrows\",{\"1\":{\"1118\":1,\"1131\":1,\"1132\":3}}],[\"snapshot\",{\"1\":{\"1083\":1}}],[\"snow\",{\"1\":{\"212\":2,\"244\":3,\"247\":2,\"249\":2,\"256\":2}}],[\"s代表客户端\",{\"1\":{\"1077\":1}}],[\"s代表浏览器\",{\"1\":{\"1077\":1}}],[\"s模型中\",{\"1\":{\"1077\":2}}],[\"s是指不同的客户端\",{\"1\":{\"1077\":1}}],[\"s是一个引用\",{\"1\":{\"668\":1}}],[\"s和c\",{\"1\":{\"1077\":1}}],[\"skip\",{\"0\":{\"1039\":1},\"1\":{\"1039\":4}}],[\"skillr\",{\"1\":{\"469\":4}}],[\"skille\",{\"1\":{\"469\":4}}],[\"skillw\",{\"1\":{\"469\":4}}],[\"skillq\",{\"1\":{\"469\":4}}],[\"src文件夹\",{\"1\":{\"1099\":1}}],[\"srcpos\",{\"1\":{\"954\":2}}],[\"src\",{\"1\":{\"954\":2,\"1100\":1}}],[\"sram\",{\"1\":{\"766\":1}}],[\"sz\",{\"1\":{\"808\":1,\"814\":1,\"1028\":1,\"1045\":1}}],[\"sb\",{\"1\":{\"741\":2,\"743\":9,\"744\":3}}],[\"s9\",{\"1\":{\"735\":2}}],[\"s8\",{\"1\":{\"735\":2}}],[\"s7\",{\"1\":{\"735\":2}}],[\"s6\",{\"1\":{\"734\":3}}],[\"s5\",{\"1\":{\"734\":3,\"735\":2,\"740\":2,\"741\":2}}],[\"s=\",{\"1\":{\"668\":1}}],[\"sdf\",{\"1\":{\"844\":2,\"884\":2}}],[\"sd\",{\"1\":{\"606\":2}}],[\"svn也会用\",{\"1\":{\"1183\":1}}],[\"svn\",{\"1\":{\"1183\":1}}],[\"svip\",{\"1\":{\"721\":1}}],[\"svarstring\",{\"1\":{\"545\":6}}],[\"svar\",{\"1\":{\"545\":8}}],[\"svg\",{\"1\":{\"66\":1}}],[\"s4\",{\"1\":{\"478\":2,\"734\":3,\"735\":3,\"738\":3,\"740\":2,\"741\":2}}],[\"s3\",{\"1\":{\"478\":2,\"704\":3,\"729\":3,\"734\":3,\"735\":2,\"738\":3,\"740\":2,\"741\":2}}],[\"s2\",{\"1\":{\"327\":2,\"478\":2,\"564\":1,\"663\":2,\"684\":1,\"704\":3,\"729\":3,\"731\":1,\"734\":3,\"735\":2,\"738\":3,\"740\":2,\"741\":2,\"801\":2,\"814\":2,\"1029\":2,\"1041\":4}}],[\"s1对象明明和s2对象不相等\",{\"1\":{\"684\":1}}],[\"s1对象明明和s2对象相等\",{\"1\":{\"684\":1}}],[\"s1和s2的内容是一致的\",{\"1\":{\"327\":1}}],[\"s1\",{\"1\":{\"327\":2,\"345\":2,\"478\":2,\"684\":1,\"704\":3,\"729\":3,\"731\":1,\"732\":4,\"734\":3,\"735\":5,\"738\":3,\"739\":2,\"740\":2,\"741\":2,\"744\":2,\"801\":2,\"814\":2,\"1029\":2,\"1041\":4}}],[\"sysetm\",{\"1\":{\"912\":1}}],[\"systemresource\",{\"1\":{\"918\":2}}],[\"systemclassloader\",{\"1\":{\"912\":3,\"916\":2}}],[\"system类的初始化\",{\"1\":{\"495\":1}}],[\"system\",{\"1\":{\"127\":1,\"143\":1,\"192\":1,\"197\":4,\"204\":3,\"209\":2,\"214\":1,\"234\":3,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"259\":1,\"260\":1,\"268\":1,\"269\":1,\"271\":4,\"272\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"285\":2,\"287\":1,\"308\":1,\"324\":2,\"336\":2,\"340\":8,\"352\":8,\"353\":1,\"356\":5,\"359\":2,\"367\":2,\"377\":1,\"378\":3,\"383\":3,\"415\":5,\"417\":1,\"440\":7,\"441\":2,\"459\":2,\"460\":2,\"465\":4,\"468\":2,\"469\":7,\"471\":7,\"472\":4,\"474\":5,\"478\":5,\"479\":4,\"491\":6,\"498\":21,\"503\":1,\"509\":1,\"517\":1,\"539\":1,\"545\":12,\"555\":1,\"560\":2,\"564\":1,\"566\":1,\"588\":20,\"590\":3,\"594\":6,\"595\":2,\"598\":1,\"606\":1,\"619\":3,\"655\":13,\"657\":1,\"663\":2,\"668\":2,\"669\":1,\"690\":2,\"696\":2,\"700\":1,\"704\":6,\"706\":3,\"707\":4,\"710\":1,\"718\":1,\"720\":3,\"723\":2,\"729\":5,\"730\":5,\"734\":6,\"735\":5,\"737\":8,\"738\":10,\"739\":5,\"740\":4,\"741\":7,\"743\":3,\"744\":2,\"754\":2,\"764\":1,\"767\":2,\"769\":2,\"771\":5,\"776\":2,\"777\":1,\"789\":3,\"794\":11,\"795\":2,\"801\":4,\"806\":4,\"812\":2,\"813\":1,\"814\":5,\"817\":10,\"818\":2,\"821\":5,\"824\":1,\"825\":16,\"832\":3,\"833\":9,\"838\":3,\"839\":4,\"840\":3,\"841\":1,\"842\":4,\"844\":2,\"850\":3,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":4,\"860\":5,\"864\":1,\"866\":4,\"867\":12,\"870\":2,\"871\":5,\"872\":9,\"880\":5,\"881\":4,\"884\":1,\"892\":3,\"894\":4,\"895\":2,\"902\":3,\"903\":2,\"904\":1,\"905\":5,\"912\":10,\"916\":4,\"918\":10,\"919\":10,\"920\":11,\"921\":9,\"922\":12,\"923\":1,\"924\":3,\"934\":1,\"936\":5,\"943\":1,\"944\":3,\"953\":9,\"954\":2,\"955\":4,\"956\":4,\"1028\":3,\"1029\":1,\"1036\":1,\"1037\":2,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":5,\"1047\":1,\"1048\":1,\"1049\":1,\"1050\":3,\"1052\":3,\"1085\":2,\"1088\":1,\"1095\":1,\"1096\":3,\"1097\":2,\"1112\":5,\"1115\":1,\"1116\":1,\"1117\":3,\"1119\":1,\"1129\":1,\"1131\":1,\"1143\":1}}],[\"system32\",{\"1\":{\"113\":1}}],[\"syn\",{\"1\":{\"906\":4}}],[\"sync\",{\"1\":{\"859\":2,\"860\":2,\"867\":2,\"871\":2,\"872\":4}}],[\"synchronize\",{\"1\":{\"906\":1}}],[\"synchronized是一把隐式的锁\",{\"1\":{\"864\":1}}],[\"synchronized是关键字\",{\"1\":{\"864\":1}}],[\"synchronized执行流程\",{\"1\":{\"859\":1}}],[\"synchronized的细节\",{\"0\":{\"858\":1}}],[\"synchronized\",{\"0\":{\"854\":1},\"1\":{\"312\":1,\"855\":2,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":2,\"866\":6,\"867\":14,\"870\":1,\"871\":2,\"872\":4,\"884\":2}}],[\"synchronization\",{\"0\":{\"828\":1}}],[\"synthetic\",{\"1\":{\"719\":1}}],[\"swaparray\",{\"1\":{\"426\":1}}],[\"switch当中是可以使用枚举类型的\",{\"1\":{\"718\":1}}],[\"switch始终只能对一个条件进行选择\",{\"1\":{\"360\":1}}],[\"switch的使用场景\",{\"1\":{\"360\":1}}],[\"switch的使用非常少见\",{\"1\":{\"357\":1}}],[\"switch的执行流程\",{\"1\":{\"359\":1}}],[\"switch语句中某个case分支\",{\"1\":{\"376\":1}}],[\"switch语句\",{\"0\":{\"359\":1},\"1\":{\"357\":1}}],[\"switch\",{\"1\":{\"312\":1,\"359\":3,\"360\":1,\"718\":1,\"720\":1,\"1131\":1}}],[\"swedish\",{\"1\":{\"149\":1}}],[\"s架构的具有\",{\"1\":{\"303\":1}}],[\"s架构的软件\",{\"1\":{\"147\":1}}],[\"s架构实现\",{\"1\":{\"303\":1}}],[\"sleep定义在thread类\",{\"1\":{\"873\":1}}],[\"sleepdemo\",{\"1\":{\"839\":1}}],[\"sleep\",{\"0\":{\"873\":1},\"1\":{\"460\":1,\"825\":2,\"832\":1,\"839\":6,\"842\":2,\"844\":2,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":3,\"864\":1,\"871\":3,\"872\":6,\"873\":3,\"880\":1,\"884\":1}}],[\"slf4j\",{\"1\":{\"246\":1}}],[\"slideend\",{\"1\":{\"41\":1}}],[\"slide\",{\"1\":{\"5\":1,\"29\":1}}],[\"slidestart\",{\"1\":{\"2\":1}}],[\"site\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"signed\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"signature一致\",{\"1\":{\"655\":2}}],[\"singleton2\",{\"1\":{\"884\":6}}],[\"singleton\",{\"1\":{\"884\":5}}],[\"since\",{\"1\":{\"116\":1}}],[\"size=1\",{\"1\":{\"954\":1}}],[\"size\",{\"1\":{\"790\":1,\"795\":1,\"941\":1,\"953\":1,\"954\":17,\"981\":1,\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1,\"1120\":1,\"1159\":2}}],[\"simpledateformat对象是日期格式对象\",{\"1\":{\"726\":1}}],[\"simpledateformat\",{\"1\":{\"725\":1,\"844\":3,\"884\":3,\"942\":1,\"1126\":1,\"1148\":1}}],[\"simpledateformat构造器\",{\"1\":{\"725\":1}}],[\"simple\",{\"1\":{\"246\":1}}],[\"space失败后会触发gc回收\",{\"1\":{\"934\":1}}],[\"sportsman\",{\"1\":{\"601\":1}}],[\"speed\",{\"1\":{\"459\":5,\"469\":5}}],[\"springmvc阶段也会在idea中使用tomcat\",{\"1\":{\"1084\":1}}],[\"springmvc\",{\"1\":{\"234\":1}}],[\"spring\",{\"0\":{\"1211\":1},\"1\":{\"234\":1,\"248\":2}}],[\"springboot的一个数据库连接池\",{\"1\":{\"217\":1}}],[\"split\",{\"1\":{\"127\":4,\"739\":2,\"1116\":1}}],[\"sort=add\",{\"1\":{\"1132\":3}}],[\"sorted\",{\"0\":{\"1041\":1},\"1\":{\"1029\":1,\"1041\":5,\"1047\":1,\"1048\":1}}],[\"sortedmap<k\",{\"1\":{\"1025\":1,\"1026\":3}}],[\"sortedset<e>\",{\"1\":{\"992\":1,\"993\":2}}],[\"sort方法\",{\"1\":{\"740\":1,\"741\":1}}],[\"sort\",{\"1\":{\"739\":1,\"740\":5,\"741\":3,\"1132\":6}}],[\"son51<integer>\",{\"1\":{\"940\":1}}],[\"son5<t>\",{\"1\":{\"940\":2}}],[\"son5<>\",{\"1\":{\"940\":1}}],[\"son5<string>\",{\"1\":{\"940\":1}}],[\"son5\",{\"1\":{\"940\":3}}],[\"son41\",{\"1\":{\"940\":2}}],[\"son4<e>\",{\"1\":{\"940\":2}}],[\"son4<string>\",{\"1\":{\"940\":1}}],[\"son4<>\",{\"1\":{\"940\":2}}],[\"son4<integer>\",{\"1\":{\"940\":1}}],[\"son4\",{\"1\":{\"940\":3}}],[\"son3<integer>\",{\"1\":{\"940\":1}}],[\"son3<e>\",{\"1\":{\"940\":2}}],[\"son3<>\",{\"1\":{\"940\":1}}],[\"son3<string>\",{\"1\":{\"940\":1}}],[\"son3\",{\"1\":{\"940\":3,\"1078\":2}}],[\"son2\",{\"1\":{\"940\":7,\"1078\":10}}],[\"son1\",{\"1\":{\"940\":11,\"1078\":8}}],[\"soninner\",{\"1\":{\"939\":1}}],[\"son<t>\",{\"1\":{\"939\":2}}],[\"son对象有两个引用可以指向它\",{\"1\":{\"585\":1}}],[\"son对象本身就该是son引用指向的\",{\"1\":{\"585\":1}}],[\"son\",{\"1\":{\"526\":3,\"539\":2,\"560\":1,\"564\":8,\"585\":9,\"588\":10,\"939\":1}}],[\"source\",{\"1\":{\"187\":2,\"726\":1,\"924\":1,\"954\":1}}],[\"socket半关闭\",{\"1\":{\"899\":1}}],[\"socket\",{\"0\":{\"899\":1},\"1\":{\"127\":5,\"899\":1,\"900\":1,\"902\":11,\"903\":19,\"904\":11,\"905\":14}}],[\"sc\",{\"1\":{\"282\":3,\"283\":3,\"352\":9,\"353\":3}}],[\"scripting\",{\"1\":{\"246\":1}}],[\"scope作用域\",{\"0\":{\"1081\":1}}],[\"scope>\",{\"1\":{\"234\":1,\"244\":2,\"1079\":1}}],[\"score=\",{\"1\":{\"668\":1,\"740\":1,\"741\":1,\"824\":1}}],[\"score\",{\"1\":{\"165\":1,\"168\":6,\"668\":1,\"740\":6,\"741\":6,\"764\":3,\"824\":5}}],[\"scheduleatfixedrate\",{\"1\":{\"883\":2,\"884\":1}}],[\"schedule\",{\"1\":{\"883\":4,\"884\":6}}],[\"schemalocation=\",{\"1\":{\"1097\":1}}],[\"schema\",{\"1\":{\"148\":2}}],[\"school\",{\"1\":{\"171\":1}}],[\"scanner等等\",{\"1\":{\"566\":1}}],[\"scanner的使用问题\",{\"1\":{\"353\":1}}],[\"scanner的作用就是\",{\"1\":{\"351\":1}}],[\"scanner\",{\"1\":{\"352\":7,\"353\":2,\"730\":5,\"738\":5,\"764\":5,\"825\":10,\"894\":10,\"895\":5,\"903\":5}}],[\"scanner键盘录入也有一定的用途\",{\"1\":{\"351\":1}}],[\"scales\",{\"1\":{\"71\":1}}],[\"scatter\",{\"1\":{\"71\":1}}],[\"sh\",{\"1\":{\"1028\":10,\"1044\":1,\"1046\":1}}],[\"shibowen\",{\"1\":{\"1132\":2}}],[\"shipped\",{\"1\":{\"956\":1}}],[\"shift+\",{\"1\":{\"1201\":1}}],[\"shift\",{\"1\":{\"348\":1}}],[\"shutdownoutput\",{\"1\":{\"899\":1,\"905\":2}}],[\"shutdownnow\",{\"1\":{\"880\":1}}],[\"shutdown\",{\"1\":{\"880\":1}}],[\"shout\",{\"1\":{\"590\":3,\"595\":3}}],[\"shot\",{\"1\":{\"472\":4,\"474\":4}}],[\"short\",{\"1\":{\"247\":4,\"312\":1,\"322\":2,\"326\":1,\"337\":1,\"340\":5,\"341\":1,\"342\":2,\"345\":1,\"359\":1,\"407\":1,\"701\":2,\"817\":1}}],[\"show\",{\"1\":{\"148\":3,\"149\":2,\"155\":4,\"169\":1,\"171\":2,\"232\":2,\"606\":3,\"619\":1,\"650\":2}}],[\"shaseng\",{\"1\":{\"180\":1,\"275\":2}}],[\"shanxi\",{\"1\":{\"158\":1}}],[\"shenlan\",{\"1\":{\"158\":1}}],[\"shrink\",{\"1\":{\"23\":1}}],[\"s结构\",{\"1\":{\"145\":1}}],[\"s结构或者c\",{\"1\":{\"145\":1}}],[\"same\",{\"1\":{\"1120\":1}}],[\"samepackagesonclazz\",{\"1\":{\"535\":1}}],[\"samepackageanotherclazz\",{\"1\":{\"535\":1}}],[\"safari\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"saferesulthandlerenabled\",{\"1\":{\"246\":1}}],[\"saferowboundsenabled\",{\"1\":{\"246\":1}}],[\"sayhello\",{\"1\":{\"825\":6}}],[\"salary\",{\"1\":{\"517\":2,\"594\":12}}],[\"salvatore\",{\"1\":{\"144\":1}}],[\"sanfilippo\",{\"1\":{\"144\":1}}],[\"saturday\",{\"1\":{\"719\":4}}],[\"satruday\",{\"1\":{\"715\":1,\"717\":1}}],[\"sat\",{\"1\":{\"72\":1}}],[\"sql的坐标\",{\"1\":{\"276\":1}}],[\"sql>\",{\"1\":{\"267\":2}}],[\"sql标签可以帮助我们把公共的sql提取出来\",{\"1\":{\"267\":1}}],[\"sql数量会急剧增加\",{\"1\":{\"263\":1}}],[\"sql使用的参数命名要和map中存储数据的key保持一致\",{\"1\":{\"253\":1}}],[\"sql使用的参数命名要和对象内部属性保持一致\",{\"1\":{\"252\":1}}],[\"sqlsession2\",{\"1\":{\"285\":2,\"287\":2}}],[\"sqlsession调用commit方法\",{\"1\":{\"284\":1}}],[\"sqlsession调用增删改的时候\",{\"1\":{\"284\":1}}],[\"sqlsession调用的方法需要我们去指定\",{\"1\":{\"235\":1}}],[\"sqlsession关闭的时候\",{\"1\":{\"284\":1}}],[\"sqlsession\",{\"1\":{\"234\":7,\"235\":3,\"237\":5,\"238\":3,\"239\":3,\"240\":4,\"242\":1,\"243\":1,\"244\":4,\"285\":11,\"287\":5,\"1131\":3,\"1159\":3}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"234\":1,\"244\":4,\"1110\":1,\"1131\":1}}],[\"sqlsessionfactory\",{\"1\":{\"234\":4,\"244\":4,\"1110\":2,\"1131\":12,\"1132\":7,\"1159\":9}}],[\"sqlserver提供了对xml和internet标准的支持\",{\"1\":{\"143\":1}}],[\"sql查询语句\",{\"1\":{\"234\":1}}],[\"sql是否写得有问题\",{\"1\":{\"232\":1}}],[\"sql是重点\",{\"1\":{\"140\":1}}],[\"sqlexception\",{\"1\":{\"204\":3,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"213\":3,\"214\":2,\"234\":1}}],[\"sql支持把多个sql语句的结果拼装起来\",{\"1\":{\"185\":1}}],[\"sql里面的注释\",{\"1\":{\"171\":1}}],[\"sql语句是依赖于坐标的\",{\"1\":{\"283\":1}}],[\"sql语句和查询的条件\",{\"1\":{\"283\":1}}],[\"sql语句返回的类型\",{\"1\":{\"273\":1}}],[\"sql语句的可读性变差了\",{\"1\":{\"267\":1}}],[\"sql语句的坐标硬编码\",{\"1\":{\"235\":1}}],[\"sql语句的关键字是有顺序的\",{\"1\":{\"168\":1}}],[\"sql语句被执行了一次\",{\"1\":{\"207\":1}}],[\"sql语句被编译了一次\",{\"1\":{\"207\":1}}],[\"sql语句被编译了1w次\",{\"1\":{\"205\":1,\"206\":1}}],[\"sql语句也被执行了1w次\",{\"1\":{\"205\":1,\"206\":1}}],[\"sql语言不是某个特定的数据库提供的语言\",{\"1\":{\"146\":1}}],[\"sql一直卡着\",{\"1\":{\"156\":1}}],[\"sql尽管看上去很简单\",{\"1\":{\"146\":1}}],[\"sql简单易学\",{\"1\":{\"146\":1}}],[\"sql有如下优点\",{\"1\":{\"146\":1}}],[\"sql由很少的词构成\",{\"1\":{\"146\":1}}],[\"sql\",{\"0\":{\"140\":1,\"267\":1},\"1\":{\"143\":3,\"144\":2,\"146\":1,\"184\":2,\"187\":4,\"191\":3,\"192\":1,\"195\":1,\"201\":2,\"204\":3,\"205\":2,\"206\":2,\"213\":1,\"234\":2,\"267\":5,\"1159\":2}}],[\"s\",{\"1\":{\"127\":4,\"145\":2,\"165\":4,\"171\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":2,\"280\":14,\"282\":4,\"283\":8,\"303\":1,\"441\":1,\"452\":1,\"471\":5,\"498\":2,\"509\":2,\"526\":2,\"538\":2,\"564\":1,\"573\":3,\"585\":1,\"588\":8,\"606\":2,\"655\":8,\"663\":4,\"668\":3,\"669\":2,\"704\":5,\"725\":1,\"729\":3,\"730\":12,\"732\":6,\"737\":14,\"738\":14,\"739\":4,\"743\":2,\"744\":2,\"788\":2,\"794\":2,\"801\":3,\"806\":6,\"812\":2,\"814\":2,\"817\":2,\"818\":8,\"822\":1,\"825\":4,\"844\":1,\"880\":2,\"881\":2,\"892\":4,\"893\":2,\"894\":4,\"895\":2,\"902\":2,\"903\":4,\"922\":4,\"941\":1,\"942\":2,\"956\":2,\"992\":1,\"1036\":2,\"1037\":4,\"1038\":6,\"1039\":6,\"1040\":11,\"1041\":4,\"1043\":2,\"1044\":4,\"1045\":2,\"1046\":2,\"1132\":1}}],[\"storage\",{\"1\":{\"1140\":1}}],[\"stored\",{\"1\":{\"141\":1}}],[\"stone\",{\"1\":{\"1078\":1,\"1085\":2,\"1117\":1,\"1131\":1,\"1142\":1}}],[\"stop\",{\"1\":{\"843\":1}}],[\"sting\",{\"1\":{\"769\":2,\"771\":1}}],[\"st\",{\"1\":{\"768\":4}}],[\"stephen\",{\"1\":{\"472\":3,\"474\":1}}],[\"stdout\",{\"1\":{\"246\":2}}],[\"stucls\",{\"1\":{\"919\":6,\"924\":5}}],[\"stuclazz2\",{\"1\":{\"663\":2}}],[\"stuclazz\",{\"1\":{\"663\":4}}],[\"stu2\",{\"1\":{\"741\":2}}],[\"stu1\",{\"1\":{\"741\":2}}],[\"studnet类存在string\",{\"1\":{\"684\":1}}],[\"study\",{\"1\":{\"450\":1,\"460\":1}}],[\"student>\",{\"1\":{\"1052\":1}}],[\"studenttreeset\",{\"1\":{\"1028\":7}}],[\"studentfactory\",{\"1\":{\"924\":1}}],[\"studentdemo\",{\"1\":{\"606\":3}}],[\"studentdo\",{\"1\":{\"261\":4,\"262\":1}}],[\"student构造代码块\",{\"1\":{\"545\":1}}],[\"student就是person\",{\"1\":{\"523\":1}}],[\"student和public\",{\"1\":{\"502\":1}}],[\"student和测试类public\",{\"1\":{\"502\":1}}],[\"student对象创建成功并完成了赋值\",{\"1\":{\"471\":1}}],[\"student的单参构造器先执行\",{\"1\":{\"471\":1}}],[\"student的双参构造器\",{\"1\":{\"468\":1}}],[\"student类中\",{\"1\":{\"668\":1}}],[\"student类中的成员全部显式赋值成功\",{\"1\":{\"471\":1}}],[\"student类无参构造\",{\"1\":{\"545\":1}}],[\"student类是object类的子类\",{\"1\":{\"538\":1}}],[\"student类加载\",{\"1\":{\"471\":1,\"545\":1}}],[\"student5\",{\"1\":{\"285\":2}}],[\"student2\",{\"1\":{\"285\":2,\"287\":1,\"741\":18}}],[\"studentlist\",{\"1\":{\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"1028\":37,\"1029\":4,\"1036\":4,\"1037\":5,\"1038\":6,\"1039\":6,\"1040\":10,\"1041\":8,\"1043\":5,\"1044\":5,\"1045\":4,\"1046\":8,\"1047\":1,\"1048\":4,\"1049\":4,\"1050\":9,\"1052\":8}}],[\"studentresultmap1\",{\"1\":{\"261\":2}}],[\"student`\",{\"1\":{\"261\":1}}],[\"studentage\",{\"1\":{\"261\":3,\"262\":1}}],[\"studentid\",{\"1\":{\"261\":3,\"262\":1}}],[\"studentmapper\",{\"1\":{\"235\":3,\"244\":1,\"279\":2,\"285\":10,\"287\":4}}],[\"student1\",{\"1\":{\"160\":2,\"161\":2,\"232\":4,\"233\":1,\"285\":2,\"287\":2}}],[\"studentset\",{\"1\":{\"1052\":1}}],[\"students\",{\"1\":{\"159\":1,\"161\":13,\"162\":15,\"163\":5,\"164\":4,\"165\":4,\"167\":13,\"168\":21,\"185\":3,\"282\":1,\"283\":1,\"740\":4,\"741\":6,\"997\":3,\"1019\":2,\"1028\":2,\"1029\":2}}],[\"studentname\",{\"1\":{\"153\":1,\"261\":3,\"262\":1}}],[\"student\",{\"1\":{\"153\":2,\"155\":1,\"158\":7,\"165\":1,\"184\":1,\"232\":3,\"261\":5,\"278\":11,\"279\":3,\"280\":2,\"281\":8,\"282\":1,\"283\":1,\"285\":12,\"287\":4,\"316\":1,\"450\":1,\"452\":2,\"458\":1,\"460\":8,\"468\":8,\"471\":8,\"478\":11,\"481\":1,\"483\":3,\"509\":1,\"538\":4,\"545\":7,\"553\":2,\"570\":2,\"572\":1,\"573\":5,\"606\":4,\"657\":1,\"663\":6,\"668\":1,\"684\":4,\"690\":2,\"699\":4,\"740\":15,\"822\":2,\"824\":9,\"904\":11,\"910\":1,\"924\":6,\"997\":9,\"1028\":65,\"1029\":3,\"1036\":1,\"1037\":2,\"1040\":3,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":8,\"1049\":1,\"1052\":11,\"1053\":4}}],[\"stu\",{\"1\":{\"169\":1,\"184\":2,\"192\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"281\":8,\"282\":1,\"283\":1,\"460\":3,\"468\":1,\"657\":2}}],[\"standard\",{\"1\":{\"724\":1,\"1077\":1}}],[\"star这个类肯定是需要进行类加载的\",{\"1\":{\"541\":1}}],[\"star类要继承person类\",{\"1\":{\"540\":1}}],[\"star\",{\"1\":{\"498\":10,\"669\":5}}],[\"startup>\",{\"1\":{\"1097\":1}}],[\"startup>1<\",{\"1\":{\"1097\":1}}],[\"startup属性\",{\"1\":{\"1097\":1}}],[\"startup\",{\"1\":{\"1093\":1}}],[\"starting\",{\"1\":{\"954\":1}}],[\"start启动\",{\"1\":{\"844\":1,\"881\":1}}],[\"start之前\",{\"1\":{\"842\":1}}],[\"start方法启动线程\",{\"1\":{\"850\":3}}],[\"start方法才是开辟新的执行路径\",{\"1\":{\"833\":1}}],[\"start方法跟run方法有什么区别\",{\"1\":{\"833\":1}}],[\"startswith\",{\"1\":{\"736\":1}}],[\"start++\",{\"1\":{\"419\":1}}],[\"start<=end\",{\"1\":{\"419\":1}}],[\"start=0\",{\"1\":{\"419\":1}}],[\"start\",{\"1\":{\"127\":1,\"209\":1,\"419\":2,\"655\":5,\"700\":3,\"737\":4,\"741\":2,\"743\":4,\"825\":2,\"832\":4,\"833\":15,\"838\":4,\"839\":3,\"840\":4,\"841\":2,\"842\":3,\"844\":1,\"850\":3,\"851\":4,\"855\":4,\"856\":4,\"857\":4,\"859\":2,\"860\":2,\"864\":4,\"866\":2,\"867\":8,\"871\":2,\"872\":4,\"879\":2,\"881\":4,\"895\":6,\"903\":1}}],[\"stack是vector的子实现\",{\"1\":{\"970\":1}}],[\"stack是什么\",{\"1\":{\"956\":1}}],[\"stacks\",{\"1\":{\"925\":1}}],[\"stackoverflow\",{\"1\":{\"442\":1}}],[\"stackoverflowerror\",{\"1\":{\"442\":2,\"747\":1}}],[\"stack\",{\"0\":{\"970\":1},\"1\":{\"403\":1,\"442\":1,\"925\":1}}],[\"stat\",{\"1\":{\"200\":1}}],[\"statement就会按照顺序一直被执行\",{\"1\":{\"359\":1}}],[\"statement2\",{\"1\":{\"358\":2,\"359\":1}}],[\"statement1\",{\"1\":{\"358\":2,\"359\":1}}],[\"statement批处理\",{\"0\":{\"206\":1}}],[\"statement几乎不用\",{\"1\":{\"204\":1}}],[\"statement的效率比preparedstatement要好一些\",{\"1\":{\"204\":1}}],[\"statementimpl\",{\"1\":{\"201\":1}}],[\"statement对象其实就是用来去执行sql语句\",{\"1\":{\"201\":1}}],[\"statement\",{\"0\":{\"201\":1},\"1\":{\"192\":4,\"194\":1,\"195\":2,\"196\":1,\"197\":1,\"200\":1,\"201\":9,\"203\":4,\"204\":3,\"205\":3,\"206\":5,\"207\":2,\"234\":4,\"255\":1,\"342\":1,\"358\":2,\"359\":2}}],[\"status\",{\"0\":{\"1193\":1},\"1\":{\"171\":1,\"1132\":20,\"1201\":1}}],[\"staticinnerclazz\",{\"1\":{\"620\":1,\"629\":2}}],[\"static方法\",{\"1\":{\"567\":1,\"577\":1}}],[\"staticmethod\",{\"1\":{\"498\":2}}],[\"static执行顺序练习\",{\"0\":{\"479\":1}}],[\"static修饰成员方法\",{\"1\":{\"473\":1}}],[\"static修饰成员变量\",{\"1\":{\"473\":1}}],[\"static表示\",{\"1\":{\"385\":1}}],[\"static\",{\"0\":{\"477\":1},\"1\":{\"127\":1,\"201\":1,\"203\":7,\"204\":3,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"213\":8,\"214\":2,\"215\":2,\"234\":1,\"308\":1,\"312\":1,\"331\":2,\"382\":1,\"383\":2,\"385\":1,\"389\":5,\"415\":2,\"418\":2,\"419\":2,\"423\":3,\"424\":1,\"425\":1,\"426\":1,\"440\":1,\"441\":1,\"442\":5,\"444\":1,\"459\":1,\"460\":1,\"465\":1,\"468\":1,\"469\":1,\"471\":1,\"472\":1,\"474\":4,\"475\":3,\"478\":3,\"479\":4,\"491\":1,\"493\":1,\"498\":17,\"538\":1,\"539\":2,\"545\":4,\"553\":3,\"564\":1,\"571\":3,\"573\":2,\"588\":4,\"593\":1,\"598\":1,\"600\":1,\"620\":1,\"623\":3,\"650\":1,\"655\":2,\"663\":1,\"669\":1,\"690\":1,\"696\":2,\"700\":4,\"705\":8,\"706\":2,\"710\":1,\"711\":3,\"715\":7,\"718\":2,\"719\":12,\"720\":3,\"729\":1,\"730\":1,\"737\":3,\"738\":8,\"739\":3,\"740\":1,\"741\":2,\"764\":2,\"776\":3,\"777\":1,\"788\":1,\"789\":5,\"790\":2,\"794\":7,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":6,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":4,\"825\":8,\"832\":1,\"833\":5,\"838\":5,\"839\":2,\"840\":1,\"841\":2,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":3,\"859\":2,\"860\":3,\"864\":1,\"866\":3,\"867\":9,\"870\":2,\"871\":2,\"872\":4,\"880\":2,\"881\":2,\"884\":5,\"892\":2,\"893\":3,\"894\":2,\"895\":2,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"910\":1,\"912\":1,\"916\":3,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":1,\"924\":7,\"936\":2,\"940\":1,\"943\":1,\"954\":1,\"978\":2,\"997\":1,\"1008\":2,\"1028\":1,\"1107\":1,\"1109\":1,\"1118\":3,\"1132\":1,\"1148\":2}}],[\"style=\",{\"1\":{\"127\":1}}],[\"strs\",{\"1\":{\"1034\":2}}],[\"str的长度+16\",{\"1\":{\"742\":1}}],[\"stream<r>\",{\"1\":{\"1040\":1}}],[\"stream<t>\",{\"1\":{\"1036\":1,\"1037\":1,\"1038\":1,\"1039\":1,\"1041\":2}}],[\"stream<string>\",{\"1\":{\"1034\":2}}],[\"stream流一般用来处理java中的集合类数据\",{\"1\":{\"1032\":1}}],[\"stream流是java在jdk1\",{\"1\":{\"1031\":1}}],[\"stream\",{\"0\":{\"1027\":1},\"1\":{\"657\":2,\"824\":1,\"1029\":1,\"1034\":6,\"1036\":2,\"1037\":2,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":2,\"1048\":1,\"1049\":1,\"1050\":5,\"1052\":5}}],[\"stretch\",{\"1\":{\"15\":1}}],[\"str2\",{\"1\":{\"655\":3}}],[\"str\",{\"1\":{\"327\":1,\"334\":1,\"352\":3,\"655\":3,\"736\":4,\"737\":6,\"738\":7,\"739\":5,\"741\":2,\"742\":1,\"743\":4,\"804\":2,\"1113\":3}}],[\"structured\",{\"1\":{\"146\":1}}],[\"structed\",{\"1\":{\"144\":1}}],[\"strict\",{\"1\":{\"312\":1}}],[\"strictfp\",{\"1\":{\"312\":1}}],[\"string2dateconverter\",{\"1\":{\"942\":1}}],[\"stringbuilder的效率会比stringbuffer效率更高\",{\"1\":{\"744\":1}}],[\"stringbuilder是线程不安全的\",{\"1\":{\"744\":1}}],[\"stringbuilder\",{\"1\":{\"744\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"744\":1}}],[\"stringbuffer和stringbuilder从效率上来说哪个更快\",{\"1\":{\"744\":1}}],[\"stringbuffer和stringbuilder有啥区别\",{\"1\":{\"744\":1}}],[\"stringbuffer之间的相互转换\",{\"1\":{\"744\":1}}],[\"stringbuffer成员方法\",{\"0\":{\"743\":1}}],[\"stringbuffer构造方法\",{\"0\":{\"742\":1}}],[\"stringbuffer\",{\"1\":{\"127\":2,\"741\":2,\"742\":3,\"743\":14,\"744\":4,\"1111\":1}}],[\"strings\",{\"1\":{\"739\":2,\"956\":2}}],[\"string中重写的equals方法\",{\"1\":{\"734\":1}}],[\"string的时候会创建1个对象\",{\"1\":{\"732\":1}}],[\"string的意思是字符串\",{\"1\":{\"327\":1}}],[\"string两种实例化方式\",{\"0\":{\"732\":1}}],[\"string对象的内容是存储在字符数组value\",{\"1\":{\"730\":1}}],[\"string对象不可变\",{\"0\":{\"730\":1}}],[\"string是一个final类\",{\"1\":{\"730\":1}}],[\"string构造方法\",{\"1\":{\"545\":1}}],[\"string和system就没有可比性\",{\"1\":{\"346\":1}}],[\"string作为字符串类型\",{\"1\":{\"340\":1}}],[\"string类型\",{\"1\":{\"924\":1}}],[\"string类型是用来表示字符串的\",{\"1\":{\"327\":1}}],[\"string类的比较功能\",{\"1\":{\"739\":1}}],[\"string类的替换功能\",{\"1\":{\"739\":1}}],[\"string类提供了字符串表示\",{\"1\":{\"728\":1}}],[\"string类代表字符串\",{\"1\":{\"728\":1}}],[\"string类是jdk源码中提供的一个固有类\",{\"1\":{\"327\":1}}],[\"string类介绍\",{\"1\":{\"327\":1}}],[\"string>\",{\"1\":{\"127\":1,\"128\":1,\"253\":3,\"1116\":3}}],[\"string\",{\"0\":{\"295\":1,\"727\":1},\"1\":{\"127\":23,\"128\":19,\"153\":3,\"192\":4,\"195\":1,\"197\":2,\"199\":3,\"201\":3,\"202\":3,\"203\":4,\"204\":6,\"205\":1,\"206\":1,\"209\":2,\"213\":6,\"214\":2,\"234\":7,\"247\":6,\"251\":1,\"254\":4,\"255\":4,\"256\":2,\"257\":8,\"258\":4,\"261\":2,\"262\":2,\"263\":6,\"265\":1,\"275\":5,\"278\":2,\"281\":2,\"283\":1,\"295\":1,\"308\":1,\"316\":2,\"327\":3,\"331\":2,\"334\":1,\"352\":3,\"354\":2,\"383\":1,\"385\":2,\"423\":1,\"444\":10,\"450\":1,\"458\":1,\"459\":2,\"460\":1,\"465\":4,\"467\":2,\"468\":3,\"469\":15,\"471\":3,\"472\":3,\"474\":4,\"478\":2,\"479\":1,\"491\":3,\"498\":5,\"517\":3,\"538\":1,\"539\":1,\"545\":4,\"553\":3,\"564\":1,\"566\":1,\"573\":2,\"588\":2,\"594\":6,\"650\":1,\"655\":13,\"658\":1,\"665\":1,\"667\":1,\"668\":1,\"669\":4,\"675\":1,\"690\":1,\"696\":1,\"700\":1,\"704\":9,\"705\":2,\"706\":1,\"713\":3,\"715\":4,\"717\":4,\"718\":1,\"719\":5,\"720\":7,\"725\":1,\"726\":4,\"729\":28,\"730\":4,\"731\":2,\"732\":13,\"734\":9,\"735\":10,\"736\":4,\"737\":16,\"738\":32,\"739\":18,\"740\":5,\"741\":7,\"742\":1,\"743\":6,\"744\":6,\"764\":3,\"769\":6,\"771\":3,\"775\":3,\"776\":3,\"777\":1,\"788\":4,\"789\":5,\"790\":2,\"794\":9,\"795\":2,\"801\":14,\"804\":2,\"806\":5,\"807\":3,\"808\":1,\"812\":4,\"813\":3,\"814\":8,\"817\":2,\"818\":13,\"819\":2,\"820\":3,\"821\":2,\"824\":5,\"825\":4,\"832\":1,\"833\":9,\"838\":3,\"839\":1,\"840\":1,\"841\":2,\"842\":1,\"844\":3,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":2,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":4,\"881\":4,\"884\":2,\"892\":5,\"893\":6,\"894\":6,\"895\":7,\"899\":1,\"902\":5,\"903\":5,\"904\":5,\"905\":3,\"910\":2,\"912\":1,\"916\":5,\"918\":16,\"919\":4,\"920\":5,\"921\":6,\"922\":12,\"923\":7,\"924\":10,\"936\":1,\"937\":1,\"939\":1,\"940\":4,\"941\":2,\"942\":1,\"943\":2,\"944\":1,\"954\":1,\"955\":2,\"956\":8,\"997\":3,\"1028\":3,\"1034\":1,\"1040\":1,\"1085\":1,\"1086\":7,\"1095\":2,\"1097\":2,\"1107\":3,\"1109\":21,\"1111\":12,\"1112\":9,\"1113\":1,\"1115\":4,\"1116\":8,\"1117\":10,\"1118\":10,\"1119\":1,\"1120\":8,\"1123\":2,\"1126\":1,\"1130\":2,\"1131\":3,\"1132\":8,\"1142\":1,\"1143\":3,\"1144\":2,\"1145\":1,\"1148\":7,\"1152\":4,\"1159\":8}}],[\"strike\",{\"1\":{\"23\":1}}],[\"sssssss\",{\"1\":{\"754\":1}}],[\"ssm\",{\"1\":{\"234\":1}}],[\"ss\",{\"1\":{\"153\":3,\"724\":1,\"725\":1,\"844\":1,\"884\":1,\"1028\":1,\"1126\":1,\"1148\":1}}],[\"ssl\",{\"1\":{\"125\":1}}],[\"ss=q0=5lb\",{\"1\":{\"121\":1}}],[\"se\",{\"0\":{\"1209\":1},\"1\":{\"924\":1}}],[\"sendtask\",{\"1\":{\"895\":5}}],[\"sendpacket\",{\"1\":{\"892\":2,\"893\":2,\"894\":4,\"895\":2}}],[\"sender\",{\"1\":{\"892\":1,\"894\":1}}],[\"send\",{\"1\":{\"889\":1,\"892\":1,\"894\":4,\"895\":2}}],[\"send方法发送数据报包\",{\"1\":{\"887\":1,\"892\":1}}],[\"sensitive\",{\"1\":{\"149\":1}}],[\"sec\",{\"1\":{\"1120\":7,\"1138\":7,\"1140\":7,\"1150\":7}}],[\"securitystopdemo\",{\"1\":{\"844\":1}}],[\"secure\",{\"1\":{\"125\":1}}],[\"secondservlet\",{\"1\":{\"1093\":1}}],[\"seconds\",{\"1\":{\"825\":2,\"839\":2,\"859\":1,\"860\":1,\"880\":1,\"884\":1}}],[\"second\",{\"1\":{\"767\":1,\"1093\":4}}],[\"se阶段\",{\"1\":{\"431\":1}}],[\"separator=\",{\"1\":{\"271\":4,\"272\":1}}],[\"separator\",{\"1\":{\"271\":1}}],[\"session信息局限于当前应用\",{\"1\":{\"1160\":1}}],[\"session的值为object\",{\"1\":{\"1160\":1}}],[\"session的生命周期\",{\"0\":{\"1153\":1}}],[\"session通常共享的是敏感信息\",{\"1\":{\"1160\":1}}],[\"session是服务器技术\",{\"1\":{\"1160\":1}}],[\"session是否被销毁\",{\"0\":{\"1155\":1}}],[\"session技术是在cookie技术的基础上进行的\",{\"1\":{\"1160\":1}}],[\"session底层是依赖于cookie的\",{\"1\":{\"1158\":1}}],[\"session失效就是从session中获取不到其存储的信息\",{\"1\":{\"1157\":1}}],[\"session失效\",{\"0\":{\"1157\":1}}],[\"session对象会被销毁\",{\"1\":{\"1156\":1}}],[\"session发生了什么\",{\"0\":{\"1156\":1}}],[\"session有效期到达\",{\"1\":{\"1153\":1}}],[\"session域\",{\"1\":{\"1153\":1,\"1161\":1}}],[\"sessiongetservlet\",{\"1\":{\"1152\":1}}],[\"sessionsetservlet\",{\"1\":{\"1152\":1}}],[\"session其实就像一个保险柜\",{\"1\":{\"1152\":1}}],[\"session不需要专门去提供\",{\"1\":{\"1150\":1}}],[\"session相当于每个用户存在服务器的保险柜\",{\"1\":{\"1149\":1}}],[\"sessionkey\",{\"1\":{\"1132\":20}}],[\"session\",{\"1\":{\"244\":2,\"246\":1,\"1137\":1,\"1152\":8,\"1158\":1,\"1159\":6}}],[\"sell\",{\"1\":{\"856\":2,\"857\":2}}],[\"sellwindow3\",{\"1\":{\"857\":4}}],[\"sellwindow\",{\"1\":{\"855\":3,\"864\":3}}],[\"sellwindow2\",{\"1\":{\"851\":3,\"856\":3}}],[\"sele\",{\"1\":{\"184\":2,\"281\":10,\"282\":1,\"283\":1}}],[\"selectpasswordbyusername\",{\"1\":{\"1159\":1}}],[\"selectbyusernameandpassword\",{\"1\":{\"1131\":1}}],[\"selectgoodslistbyuserid\",{\"1\":{\"283\":3}}],[\"select=\",{\"1\":{\"276\":1,\"279\":1,\"282\":1,\"283\":2}}],[\"selectkey>\",{\"1\":{\"273\":1}}],[\"selectkey\",{\"0\":{\"273\":1}}],[\"selectstudentuseresultmap\",{\"1\":{\"261\":2}}],[\"selectstudentusealias\",{\"1\":{\"261\":1}}],[\"selectnamebyid\",{\"1\":{\"247\":4,\"257\":1}}],[\"selectuserbyname\",{\"1\":{\"1159\":1}}],[\"selectuserbyid\",{\"1\":{\"234\":1}}],[\"selectusergoodslistbyname\",{\"1\":{\"283\":3}}],[\"selectuserlist\",{\"1\":{\"234\":1,\"1132\":2}}],[\"selectlist\",{\"1\":{\"234\":2}}],[\"selectone\",{\"1\":{\"234\":1}}],[\"selectaccountlist\",{\"1\":{\"234\":1}}],[\"selectaccountbyid\",{\"1\":{\"234\":1,\"244\":2,\"247\":1}}],[\"select>\",{\"1\":{\"234\":2,\"240\":1,\"244\":1,\"247\":5,\"250\":2,\"251\":1,\"256\":2,\"257\":3,\"258\":1,\"259\":1,\"260\":1,\"261\":3,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"276\":2,\"277\":1,\"279\":2,\"280\":1,\"282\":2,\"283\":3}}],[\"select\",{\"1\":{\"148\":1,\"149\":1,\"158\":4,\"159\":6,\"162\":18,\"163\":6,\"164\":10,\"165\":4,\"166\":1,\"167\":14,\"168\":28,\"180\":2,\"181\":1,\"182\":3,\"183\":4,\"184\":6,\"185\":3,\"188\":1,\"197\":1,\"204\":8,\"212\":2,\"214\":1,\"220\":5,\"226\":1,\"229\":1,\"230\":4,\"231\":2,\"232\":3,\"233\":7,\"234\":3,\"240\":1,\"244\":1,\"247\":5,\"249\":1,\"250\":2,\"251\":1,\"256\":7,\"257\":3,\"258\":2,\"259\":1,\"260\":1,\"261\":3,\"263\":4,\"264\":3,\"265\":1,\"266\":1,\"267\":2,\"272\":1,\"273\":1,\"275\":2,\"276\":3,\"277\":1,\"278\":2,\"279\":3,\"280\":1,\"281\":3,\"282\":2,\"283\":3,\"1132\":1}}],[\"selct\",{\"1\":{\"162\":1}}],[\"setcontenttype\",{\"1\":{\"1159\":3}}],[\"setcharacterencoding\",{\"1\":{\"1119\":1,\"1131\":1}}],[\"setlimit\",{\"1\":{\"1132\":1}}],[\"setlist\",{\"1\":{\"1132\":1}}],[\"seterrmsg\",{\"1\":{\"1132\":1}}],[\"seterrno\",{\"1\":{\"1132\":1}}],[\"setheader\",{\"1\":{\"1123\":2,\"1126\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":1,\"1131\":4,\"1142\":1,\"1159\":4}}],[\"setstatus\",{\"1\":{\"1122\":2,\"1129\":1,\"1131\":1}}],[\"setstring\",{\"1\":{\"204\":2,\"207\":1,\"209\":2}}],[\"setpath\",{\"1\":{\"1144\":1,\"1145\":2}}],[\"setpages\",{\"1\":{\"1132\":1}}],[\"setpage\",{\"1\":{\"1132\":1}}],[\"setpassword\",{\"1\":{\"1118\":2}}],[\"setproperty\",{\"1\":{\"1026\":1}}],[\"setprovince\",{\"1\":{\"997\":1}}],[\"setpriority\",{\"1\":{\"838\":6}}],[\"setusername\",{\"1\":{\"1108\":1,\"1109\":4,\"1118\":2}}],[\"set<student>\",{\"1\":{\"1052\":1}}],[\"set<string>\",{\"1\":{\"127\":2,\"258\":2}}],[\"set<k>\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"set<map\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1,\"1026\":1}}],[\"set接口\",{\"1\":{\"981\":1,\"985\":1,\"989\":1,\"993\":1,\"994\":1}}],[\"set的api\",{\"0\":{\"981\":1}}],[\"set数据结构是\",{\"1\":{\"980\":1}}],[\"set是collection的子接口\",{\"1\":{\"980\":1}}],[\"set和queue等\",{\"1\":{\"950\":1}}],[\"setaccessable\",{\"1\":{\"1109\":1}}],[\"setaccessible\",{\"1\":{\"919\":3,\"920\":1,\"921\":1,\"924\":1,\"1108\":1,\"1118\":1}}],[\"setattribute\",{\"1\":{\"1096\":2,\"1121\":1,\"1131\":2,\"1152\":3,\"1159\":3}}],[\"setage\",{\"1\":{\"997\":1}}],[\"setautocommit\",{\"1\":{\"200\":1,\"209\":2}}],[\"setfood\",{\"1\":{\"867\":4}}],[\"setdomain\",{\"1\":{\"1144\":1,\"1146\":1}}],[\"setdata\",{\"1\":{\"1132\":1}}],[\"setdaemon\",{\"1\":{\"842\":2}}],[\"setdisk\",{\"1\":{\"269\":1}}],[\"setxxx\",{\"1\":{\"516\":1}}],[\"set方法\",{\"1\":{\"514\":1,\"516\":1,\"1118\":1}}],[\"set>\",{\"1\":{\"269\":1}}],[\"setbrand\",{\"1\":{\"269\":1,\"273\":1,\"274\":1}}],[\"setmaxage\",{\"1\":{\"1144\":1,\"1147\":2}}],[\"setmethodname\",{\"1\":{\"1118\":2}}],[\"setmethod\",{\"1\":{\"1118\":1}}],[\"setmemory\",{\"1\":{\"268\":1,\"269\":1}}],[\"setmoney\",{\"1\":{\"244\":1}}],[\"settotal\",{\"1\":{\"1132\":1}}],[\"settime\",{\"1\":{\"724\":2}}],[\"settings>\",{\"1\":{\"246\":2,\"283\":1}}],[\"settings是mybatis的行为配置\",{\"1\":{\"246\":1}}],[\"settings\",{\"0\":{\"246\":1}}],[\"setter方法的写法显然十分固定\",{\"1\":{\"518\":1}}],[\"setter方法使成员变量的读\",{\"1\":{\"516\":1}}],[\"setter等\",{\"1\":{\"262\":1}}],[\"setter\",{\"1\":{\"262\":3,\"944\":1,\"1028\":1}}],[\"set来接\",{\"1\":{\"260\":1}}],[\"setname\",{\"1\":{\"244\":1,\"273\":1,\"274\":1,\"833\":4,\"851\":3,\"855\":3,\"856\":3,\"857\":3,\"864\":3,\"867\":4,\"997\":1}}],[\"setid\",{\"1\":{\"244\":1,\"268\":1,\"269\":1}}],[\"setint\",{\"1\":{\"207\":1,\"209\":3}}],[\"set\",{\"0\":{\"269\":1},\"1\":{\"121\":1,\"127\":2,\"149\":3,\"151\":1,\"156\":1,\"157\":3,\"158\":3,\"160\":3,\"162\":1,\"196\":1,\"209\":4,\"212\":3,\"233\":1,\"239\":1,\"244\":1,\"258\":3,\"260\":1,\"268\":1,\"269\":1,\"920\":4,\"956\":1,\"958\":1,\"959\":1,\"961\":1,\"965\":1,\"984\":4,\"988\":4,\"992\":3,\"993\":4,\"997\":2,\"1018\":2,\"1023\":2,\"1026\":2,\"1052\":1,\"1105\":2,\"1108\":1,\"1118\":4,\"1121\":2,\"1142\":4,\"1150\":1,\"1152\":1}}],[\"ser\",{\"1\":{\"215\":1}}],[\"serialversionuid不匹配\",{\"1\":{\"824\":1}}],[\"serialversionuid\",{\"1\":{\"824\":3,\"904\":1}}],[\"serialize\",{\"1\":{\"824\":2}}],[\"serializable接口是一个空接口\",{\"1\":{\"823\":1}}],[\"serializable\",{\"1\":{\"211\":1,\"212\":1,\"823\":1,\"824\":1,\"904\":2}}],[\"serial\",{\"0\":{\"827\":1},\"1\":{\"702\":1}}],[\"series\",{\"1\":{\"72\":1}}],[\"service包下\",{\"1\":{\"1107\":1}}],[\"service\",{\"1\":{\"212\":1,\"924\":1,\"1077\":1,\"1078\":1,\"1085\":2,\"1093\":6,\"1097\":1,\"1107\":3}}],[\"servlet如果它的loadonstartup为正数\",{\"1\":{\"1131\":1}}],[\"servletoutputstream\",{\"1\":{\"1124\":2,\"1128\":1}}],[\"servlet3\",{\"1\":{\"1120\":1}}],[\"servletinputstream\",{\"1\":{\"1113\":2,\"1116\":1}}],[\"servlet>\",{\"1\":{\"1097\":1}}],[\"servletcontext对象\",{\"1\":{\"1097\":1}}],[\"servletcontext2\",{\"1\":{\"1096\":3}}],[\"servletcontext1\",{\"1\":{\"1096\":3,\"1097\":2}}],[\"servletcontext\",{\"1\":{\"1096\":10,\"1110\":1,\"1131\":3}}],[\"servletconfig\",{\"1\":{\"1095\":5}}],[\"servlet上下文\",{\"1\":{\"1095\":1}}],[\"servlet是何时销毁的\",{\"1\":{\"1093\":1}}],[\"servlet是何时初始化的\",{\"1\":{\"1093\":1}}],[\"servlet是一种java编程语言的服务器端组件\",{\"1\":{\"1078\":1}}],[\"servlet销毁\",{\"1\":{\"1093\":1}}],[\"servlet初始化\",{\"1\":{\"1093\":1}}],[\"servlet的url\",{\"1\":{\"1130\":1}}],[\"servlet的生命周期\",{\"0\":{\"1093\":1}}],[\"servlet的开发规范\",{\"1\":{\"1078\":1}}],[\"servlet的开发其实就是servlet中的service方法的开发\",{\"1\":{\"1078\":1}}],[\"servlet1\",{\"1\":{\"1085\":5}}],[\"servlet2\",{\"1\":{\"1083\":1,\"1085\":5}}],[\"servlet开发\",{\"0\":{\"1082\":1}}],[\"servlet<\",{\"1\":{\"1079\":1}}],[\"servletresponse\",{\"1\":{\"1078\":4,\"1085\":2}}],[\"servletrequest\",{\"1\":{\"1078\":3,\"1085\":2}}],[\"servletexception\",{\"1\":{\"1078\":2,\"1085\":4,\"1088\":2,\"1095\":1,\"1096\":3,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":3,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":4,\"1132\":1,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"servlet通过java编程语言编写\",{\"1\":{\"1078\":1}}],[\"servlet运行在服务器上\",{\"1\":{\"1078\":1}}],[\"servlet介绍\",{\"0\":{\"1078\":1}}],[\"servlet\",{\"0\":{\"1074\":1},\"1\":{\"126\":1,\"1077\":1,\"1078\":5,\"1079\":1,\"1081\":1,\"1083\":2,\"1088\":1,\"1097\":4,\"1131\":1}}],[\"server处理请求的入口\",{\"1\":{\"1097\":1}}],[\"server等\",{\"1\":{\"191\":1}}],[\"server端返回执行结果\",{\"1\":{\"147\":1}}],[\"server端是\",{\"1\":{\"146\":1}}],[\"server即客户端和服务器\",{\"1\":{\"145\":1}}],[\"server即浏览器和服务器\",{\"1\":{\"145\":1}}],[\"server后对linux支持\",{\"1\":{\"143\":1}}],[\"server是由微软公司开发的一种关系型据库管理系统\",{\"1\":{\"143\":1}}],[\"serverbrequest\",{\"1\":{\"128\":1}}],[\"serverarequest\",{\"1\":{\"128\":1}}],[\"serversocket\",{\"0\":{\"900\":1},\"1\":{\"127\":5,\"898\":1,\"900\":1,\"902\":8,\"903\":5,\"904\":6,\"905\":6}}],[\"server\",{\"0\":{\"137\":1,\"898\":1},\"1\":{\"121\":1,\"127\":4,\"139\":1,\"143\":1,\"144\":2,\"222\":1,\"303\":2,\"902\":1,\"903\":1,\"904\":1,\"905\":3,\"1077\":2,\"1078\":1,\"1084\":1}}],[\"search\",{\"1\":{\"115\":1,\"121\":1}}],[\"semi\",{\"1\":{\"21\":1}}],[\"sudo\",{\"1\":{\"1204\":1}}],[\"success\",{\"1\":{\"1078\":2}}],[\"sugarenums\",{\"1\":{\"719\":2}}],[\"suv等\",{\"1\":{\"513\":1}}],[\"superperson\",{\"1\":{\"1040\":2}}],[\"superhighpeople\",{\"1\":{\"1038\":2}}],[\"super访问父类成员\",{\"1\":{\"544\":1}}],[\"super只能访问父类中有的成员\",{\"1\":{\"544\":1}}],[\"super和this的使用几乎没有差别\",{\"1\":{\"544\":1}}],[\"super表示当前类的父类对象\",{\"1\":{\"544\":1}}],[\"super在构造器中用于表示调用父类构造器时\",{\"1\":{\"543\":1}}],[\"super去调用其他构造器\",{\"1\":{\"541\":1}}],[\"superclass\",{\"1\":{\"522\":2,\"922\":3}}],[\"super后面会讲\",{\"1\":{\"475\":1}}],[\"super关键字可以在子类构造器或成员方法中\",{\"1\":{\"541\":1}}],[\"super关键字\",{\"0\":{\"544\":1},\"1\":{\"475\":1}}],[\"super\",{\"1\":{\"312\":1,\"538\":1,\"541\":3,\"542\":1,\"543\":1,\"544\":3,\"545\":1,\"564\":1,\"594\":3,\"699\":2,\"719\":1,\"741\":1,\"764\":2,\"833\":1,\"838\":1,\"841\":1,\"944\":2,\"992\":1,\"1025\":1,\"1026\":1,\"1036\":1,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":1,\"1045\":1,\"1048\":1}}],[\"suffixoverrides=\",{\"1\":{\"268\":1,\"269\":1}}],[\"suffixoverrides\",{\"1\":{\"268\":2}}],[\"suffix\",{\"1\":{\"268\":2}}],[\"sub\",{\"1\":{\"1146\":3}}],[\"submap\",{\"1\":{\"1026\":3}}],[\"submittedfilename\",{\"1\":{\"1120\":3}}],[\"submit\",{\"1\":{\"115\":1,\"880\":7,\"903\":1,\"1104\":2,\"1119\":2,\"1120\":1}}],[\"subset\",{\"1\":{\"993\":2}}],[\"substring\",{\"1\":{\"127\":5,\"655\":7,\"737\":8,\"738\":4,\"739\":2,\"1040\":1,\"1116\":2,\"1130\":1}}],[\"substring1目的是为了把前面的\",{\"1\":{\"127\":1}}],[\"sublist\",{\"0\":{\"960\":1},\"1\":{\"958\":1}}],[\"subject\",{\"1\":{\"910\":3}}],[\"subtrahend\",{\"1\":{\"675\":1}}],[\"subtract\",{\"1\":{\"675\":1}}],[\"subclass\",{\"1\":{\"522\":1}}],[\"subgraph\",{\"1\":{\"74\":3}}],[\"sunday\",{\"1\":{\"715\":1,\"717\":1,\"718\":2,\"719\":4}}],[\"sunwukon\",{\"1\":{\"275\":1}}],[\"sunwukong\",{\"1\":{\"180\":1,\"275\":1}}],[\"sun公司被oracle收购\",{\"1\":{\"143\":1}}],[\"sun\",{\"1\":{\"72\":1}}],[\"sumtask\",{\"1\":{\"881\":4}}],[\"sum+=i\",{\"1\":{\"741\":1,\"881\":1}}],[\"sumvalue\",{\"1\":{\"383\":2}}],[\"sum<表达式>|条件\",{\"1\":{\"168\":1}}],[\"sum<列\",{\"1\":{\"168\":1}}],[\"sum\",{\"1\":{\"11\":1,\"75\":1,\"168\":8,\"383\":5,\"442\":1,\"741\":1,\"881\":2,\"1050\":2}}],[\"0提供了对文件上传的支持\",{\"1\":{\"1120\":1}}],[\"0之前\",{\"1\":{\"1120\":1}}],[\"0c01\",{\"1\":{\"1120\":1}}],[\"0<\",{\"1\":{\"1079\":1}}],[\"0个\",{\"1\":{\"1033\":1}}],[\"0时候出现\",{\"1\":{\"1020\":1}}],[\"0出现\",{\"1\":{\"969\":1}}],[\"0l\",{\"1\":{\"775\":1}}],[\"0版本时\",{\"1\":{\"721\":1}}],[\"0版本不支持长连接\",{\"1\":{\"115\":1}}],[\"0xffff\",{\"1\":{\"810\":1}}],[\"0x00\",{\"1\":{\"810\":1}}],[\"0x0001\",{\"1\":{\"800\":2}}],[\"0xxxxxxx\",{\"1\":{\"799\":1}}],[\"0x\",{\"1\":{\"322\":1}}],[\"0xc0是一个十六进制数\",{\"1\":{\"315\":1}}],[\"0b\",{\"1\":{\"322\":1}}],[\"0~9\",{\"1\":{\"315\":1}}],[\"092\",{\"1\":{\"356\":1}}],[\"09\",{\"0\":{\"658\":1},\"1\":{\"297\":1,\"323\":1,\"326\":1,\"819\":1,\"820\":1,\"881\":1,\"1132\":14}}],[\"08\",{\"0\":{\"589\":1},\"1\":{\"296\":1,\"724\":2,\"817\":1,\"870\":2,\"916\":1,\"1132\":63,\"1142\":1}}],[\"0010\",{\"1\":{\"978\":18,\"1008\":1}}],[\"00110101\",{\"1\":{\"978\":1}}],[\"0011\",{\"1\":{\"348\":3,\"978\":13,\"1001\":2,\"1008\":2}}],[\"00是中国的1970\",{\"1\":{\"724\":1}}],[\"009\",{\"1\":{\"356\":1}}],[\"008\",{\"1\":{\"356\":1}}],[\"000中间生成1000次\",{\"1\":{\"997\":1}}],[\"000中间生成1000次呢\",{\"1\":{\"995\":1}}],[\"000\",{\"1\":{\"356\":1,\"995\":1,\"997\":1}}],[\"00010000\",{\"1\":{\"978\":1}}],[\"0001\",{\"1\":{\"348\":1,\"978\":14,\"1001\":1,\"1008\":2}}],[\"0000ffff的字符用3字节表示\",{\"1\":{\"799\":1}}],[\"000007ff的字符用两个字节表示\",{\"1\":{\"799\":1}}],[\"0000007f的字符\",{\"1\":{\"799\":1}}],[\"0000\",{\"1\":{\"321\":1,\"348\":1,\"700\":7,\"782\":2,\"799\":4,\"978\":33,\"1001\":2,\"1008\":8}}],[\"00\",{\"0\":{\"288\":1},\"1\":{\"724\":6,\"775\":3,\"884\":1}}],[\"06wait\",{\"1\":{\"870\":2,\"871\":1,\"872\":2}}],[\"06buffer\",{\"1\":{\"808\":1,\"814\":2}}],[\"06define\",{\"1\":{\"764\":1}}],[\"06\",{\"0\":{\"234\":1,\"443\":1},\"1\":{\"294\":1,\"764\":1,\"812\":1,\"884\":2,\"1105\":2,\"1121\":2,\"1132\":4,\"1150\":1}}],[\"05add\",{\"1\":{\"922\":1,\"923\":2}}],[\"05dielock\",{\"1\":{\"866\":1,\"867\":2}}],[\"05simple\",{\"1\":{\"807\":1,\"813\":1}}],[\"05stringbuffer\",{\"1\":{\"741\":1}}],[\"05use\",{\"1\":{\"478\":1}}],[\"05\",{\"0\":{\"218\":1,\"442\":1},\"1\":{\"293\":1,\"1132\":1}}],[\"03config\",{\"1\":{\"918\":3}}],[\"03constructor\",{\"1\":{\"465\":1}}],[\"03timer\",{\"1\":{\"884\":1}}],[\"03transfer\",{\"1\":{\"806\":1,\"812\":1}}],[\"03sync\",{\"1\":{\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1}}],[\"03stander\",{\"1\":{\"821\":1}}],[\"03buffer\",{\"1\":{\"790\":1,\"795\":1}}],[\"03api\",{\"1\":{\"737\":3,\"738\":3,\"739\":1,\"833\":1,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1}}],[\"034\",{\"1\":{\"356\":1}}],[\"039\",{\"1\":{\"356\":1}}],[\"03\",{\"0\":{\"189\":1,\"379\":1,\"1135\":1},\"1\":{\"291\":1,\"1122\":1,\"1123\":1,\"1132\":2}}],[\"0表示未付款\",{\"1\":{\"171\":1}}],[\"07producer\",{\"1\":{\"867\":8}}],[\"07\",{\"0\":{\"511\":1},\"1\":{\"127\":1,\"295\":1,\"769\":1,\"771\":1,\"855\":1,\"856\":1,\"857\":1,\"905\":2,\"1132\":1}}],[\"04handle\",{\"1\":{\"924\":4}}],[\"04api\",{\"1\":{\"919\":1,\"920\":1,\"921\":1,\"922\":2}}],[\"04lock\",{\"1\":{\"864\":1}}],[\"04impltwo\",{\"1\":{\"850\":1}}],[\"04singleton\",{\"1\":{\"884\":2}}],[\"04serialize\",{\"1\":{\"824\":2}}],[\"04sort\",{\"1\":{\"739\":1,\"740\":1,\"741\":1}}],[\"04static\",{\"1\":{\"472\":1,\"474\":1,\"478\":1}}],[\"04oop\",{\"1\":{\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1}}],[\"04\",{\"0\":{\"213\":1,\"391\":1},\"1\":{\"116\":1,\"292\":1,\"465\":1,\"478\":1,\"789\":1,\"1026\":3,\"1123\":1,\"1132\":3}}],[\"02cls\",{\"1\":{\"916\":5}}],[\"02call\",{\"1\":{\"881\":2}}],[\"02datasecurity\",{\"1\":{\"851\":1}}],[\"02defineuse\",{\"1\":{\"465\":1}}],[\"02implone\",{\"1\":{\"832\":1,\"833\":3}}],[\"02print\",{\"1\":{\"818\":1,\"819\":1,\"820\":1}}],[\"02encode\",{\"1\":{\"801\":1}}],[\"02fileinputstream\",{\"1\":{\"794\":2}}],[\"02feature\",{\"1\":{\"730\":1}}],[\"02api\",{\"1\":{\"769\":1,\"771\":1,\"776\":2,\"777\":1}}],[\"02static\",{\"1\":{\"474\":1}}],[\"02verfiy\",{\"1\":{\"460\":1}}],[\"02this\",{\"1\":{\"460\":1}}],[\"02\",{\"0\":{\"140\":1,\"310\":1,\"1101\":1},\"1\":{\"116\":1,\"290\":1,\"737\":1,\"790\":1,\"864\":1,\"893\":1,\"1083\":1,\"1085\":4,\"1117\":1,\"1131\":1,\"1142\":1}}],[\"01threadpool\",{\"1\":{\"880\":2}}],[\"01impltwo\",{\"1\":{\"850\":1}}],[\"01introduction\",{\"1\":{\"729\":1,\"825\":2,\"912\":1}}],[\"01introuction\",{\"1\":{\"472\":1}}],[\"01data\",{\"1\":{\"817\":2}}],[\"0110\",{\"1\":{\"978\":2,\"1008\":2}}],[\"01100001\",{\"1\":{\"798\":1}}],[\"01111\",{\"1\":{\"1001\":1}}],[\"0111\",{\"1\":{\"799\":2,\"1008\":1}}],[\"01readwhile\",{\"1\":{\"794\":1}}],[\"01fileoutputstream\",{\"1\":{\"788\":1,\"789\":5}}],[\"01m\",{\"1\":{\"363\":1}}],[\"013\",{\"1\":{\"356\":1}}],[\"01001\",{\"1\":{\"1001\":1}}],[\"0100\",{\"1\":{\"978\":2,\"1008\":3}}],[\"01000\",{\"1\":{\"978\":1}}],[\"0101\",{\"1\":{\"978\":9,\"1001\":3,\"1008\":4}}],[\"010\",{\"1\":{\"356\":1}}],[\"01\",{\"0\":{\"105\":1,\"302\":1,\"1074\":1,\"1182\":1},\"1\":{\"116\":1,\"289\":1,\"356\":2,\"724\":1,\"942\":1,\"1078\":1,\"1132\":4}}],[\"0\",{\"1\":{\"11\":1,\"66\":1,\"71\":3,\"113\":2,\"115\":1,\"116\":1,\"120\":1,\"121\":1,\"127\":8,\"136\":1,\"139\":1,\"144\":3,\"162\":9,\"171\":1,\"205\":1,\"209\":1,\"213\":2,\"220\":1,\"222\":1,\"225\":1,\"229\":1,\"234\":4,\"244\":2,\"271\":2,\"307\":1,\"322\":1,\"334\":1,\"336\":8,\"338\":1,\"340\":2,\"342\":3,\"350\":1,\"354\":1,\"367\":1,\"377\":1,\"378\":1,\"407\":1,\"415\":1,\"418\":2,\"440\":4,\"441\":5,\"442\":1,\"459\":1,\"472\":1,\"568\":1,\"573\":2,\"700\":1,\"705\":1,\"707\":3,\"710\":2,\"719\":3,\"724\":1,\"729\":1,\"737\":9,\"738\":3,\"739\":3,\"740\":1,\"741\":2,\"747\":1,\"760\":1,\"764\":1,\"792\":1,\"794\":3,\"795\":1,\"806\":1,\"810\":1,\"812\":1,\"813\":1,\"814\":1,\"833\":18,\"838\":2,\"839\":1,\"840\":3,\"841\":1,\"842\":2,\"844\":2,\"851\":1,\"855\":1,\"856\":4,\"857\":4,\"860\":2,\"864\":1,\"880\":2,\"892\":4,\"893\":2,\"894\":4,\"895\":4,\"902\":3,\"903\":3,\"904\":2,\"905\":5,\"923\":2,\"944\":3,\"948\":1,\"954\":5,\"956\":1,\"958\":2,\"959\":1,\"978\":4,\"984\":2,\"988\":2,\"997\":2,\"1006\":3,\"1008\":3,\"1012\":1,\"1016\":2,\"1017\":2,\"1022\":2,\"1028\":4,\"1040\":2,\"1083\":2,\"1097\":3,\"1104\":6,\"1105\":1,\"1110\":6,\"1111\":2,\"1112\":15,\"1113\":2,\"1116\":2,\"1118\":4,\"1120\":9,\"1121\":1,\"1122\":1,\"1123\":1,\"1124\":2,\"1128\":2,\"1132\":64,\"1138\":7,\"1140\":7,\"1142\":1,\"1147\":1,\"1148\":1,\"1150\":8,\"1159\":2}}],[\"j2qxzx0hc3gq\",{\"1\":{\"1132\":1}}],[\"jcp\",{\"1\":{\"1097\":3}}],[\"jetty等\",{\"1\":{\"1078\":1}}],[\"jms\",{\"1\":{\"1077\":1}}],[\"jj\",{\"1\":{\"1028\":1}}],[\"j+1\",{\"1\":{\"739\":2}}],[\"j++\",{\"1\":{\"367\":1,\"440\":1,\"441\":2,\"739\":1}}],[\"judegeage\",{\"1\":{\"924\":1}}],[\"judgeage\",{\"1\":{\"924\":2}}],[\"judgename\",{\"1\":{\"924\":2}}],[\"judgeinstanceimplemptyinter\",{\"1\":{\"696\":2}}],[\"judgeobjecttype\",{\"1\":{\"663\":1}}],[\"junit\",{\"1\":{\"769\":1,\"771\":1}}],[\"jumpstep\",{\"1\":{\"442\":3}}],[\"jul\",{\"1\":{\"121\":2}}],[\"j表示列\",{\"1\":{\"441\":1}}],[\"jvm是多线程的\",{\"1\":{\"830\":1}}],[\"jvm是单线程还是多线程的\",{\"0\":{\"830\":1}}],[\"jvm进程会创建一个线程\",{\"1\":{\"829\":1}}],[\"jvm使用的编码表\",{\"1\":{\"799\":1}}],[\"jvm使用了不属于jvm的资源\",{\"1\":{\"789\":1}}],[\"jvm向操作系统中看这个文件是否存在\",{\"1\":{\"789\":1}}],[\"jvm会跳转到相应的错误处理器中\",{\"1\":{\"752\":1}}],[\"jvm会终止程序的执行\",{\"1\":{\"749\":2}}],[\"jvm会首先检查字符串常量池\",{\"1\":{\"731\":1}}],[\"jvm就会终止我们自己程序的运行\",{\"1\":{\"749\":1}}],[\"jvm就会终止程序执行\",{\"1\":{\"410\":1}}],[\"jvm默认异常处理流程\",{\"1\":{\"749\":1}}],[\"jvm默认处理机制\",{\"0\":{\"749\":1}}],[\"jvm内部资源耗尽的错误\",{\"1\":{\"747\":1}}],[\"jvm内存中\",{\"1\":{\"430\":1}}],[\"jvm为了提高性能和减少内存的开销\",{\"1\":{\"731\":1}}],[\"jvm在发生错误的代码处\",{\"1\":{\"752\":1}}],[\"jvm在类加载某个类的同时\",{\"1\":{\"662\":1}}],[\"jvm在创建数组时\",{\"1\":{\"394\":1}}],[\"jvm通过类加载能够了解某个类型的信息\",{\"1\":{\"662\":1}}],[\"jvm通过类加载了解一个类型\",{\"1\":{\"540\":1}}],[\"jvm通过读取某个类的二进制字节码文件\",{\"1\":{\"662\":1}}],[\"jvm自动去调用构造方法\",{\"1\":{\"465\":1}}],[\"jvm怎么知道到底要创建什么呢\",{\"1\":{\"456\":1}}],[\"jvm能够正常开辟空间\",{\"1\":{\"456\":1}}],[\"jvm可以清楚的知道这个基本数据类型变量在内存中的存储方式\",{\"1\":{\"456\":1}}],[\"jvm可以跨平台吗\",{\"1\":{\"309\":1}}],[\"jvm执行代码解释执行的\",{\"1\":{\"403\":1}}],[\"jvm运算时内存\",{\"1\":{\"403\":1}}],[\"jvm栈正是java的\",{\"1\":{\"403\":1}}],[\"jvm栈\",{\"1\":{\"403\":2}}],[\"jvm中有专门的区域来存放这些数据\",{\"1\":{\"402\":1}}],[\"jvm才知道需要多大内存空间存储它\",{\"1\":{\"320\":1}}],[\"jvm\",{\"1\":{\"304\":1,\"309\":1,\"403\":1,\"905\":1}}],[\"jre主要是给已经编写好的java程序使用\",{\"1\":{\"304\":1}}],[\"jre包括java虚拟机\",{\"1\":{\"304\":1}}],[\"jre\",{\"1\":{\"304\":1}}],[\"jndi\",{\"1\":{\"248\":1}}],[\"jan\",{\"1\":{\"724\":1}}],[\"james\",{\"1\":{\"472\":3,\"474\":1}}],[\"jar文件中都是一些\",{\"1\":{\"192\":1}}],[\"jar\",{\"1\":{\"192\":1,\"719\":3,\"912\":1,\"1080\":1,\"1081\":1}}],[\"jar内部的\",{\"1\":{\"191\":1}}],[\"java代码\",{\"1\":{\"1099\":1}}],[\"javabeans\",{\"1\":{\"1077\":1}}],[\"javaee阶段都会在idea中使用tomcat\",{\"1\":{\"1084\":1}}],[\"javaee还包括一些服务器端的技术和组件\",{\"1\":{\"1077\":1}}],[\"javaee提供了一系列的api和规范\",{\"1\":{\"1077\":1}}],[\"javaee\",{\"1\":{\"1077\":1,\"1083\":1,\"1097\":3}}],[\"javaee介绍\",{\"0\":{\"1077\":1}}],[\"javaee规范\",{\"0\":{\"128\":1},\"1\":{\"128\":2}}],[\"java不提供直接继承自collection的类\",{\"1\":{\"950\":1}}],[\"java不支持long类型作为数组长度\",{\"1\":{\"402\":1}}],[\"java可以在编译时进行更严格的类型检查\",{\"1\":{\"938\":1}}],[\"java可以跨平台吗\",{\"1\":{\"309\":1}}],[\"java堆\",{\"1\":{\"925\":1}}],[\"java虚拟机栈\",{\"1\":{\"925\":1}}],[\"java虚拟机规范\",{\"1\":{\"403\":1}}],[\"java网络编程\",{\"1\":{\"885\":1}}],[\"java命令会启动jvm进程\",{\"1\":{\"829\":1}}],[\"java命令+主类类名运行原理\",{\"0\":{\"829\":1}}],[\"java流模型\",{\"1\":{\"781\":1}}],[\"java文件结尾的文件\",{\"1\":{\"1194\":1}}],[\"java文件夹\",{\"1\":{\"1099\":1}}],[\"java文件\",{\"1\":{\"776\":1}}],[\"java46th\",{\"1\":{\"769\":3,\"771\":3,\"788\":1}}],[\"java对的设计\",{\"1\":{\"721\":1}}],[\"java对象的\",{\"1\":{\"256\":1}}],[\"java对象\",{\"1\":{\"234\":2}}],[\"java引入的技术\",{\"1\":{\"701\":1}}],[\"java当中万物皆对象\",{\"1\":{\"701\":1}}],[\"java当中\",{\"1\":{\"699\":1}}],[\"java当中的\",{\"1\":{\"693\":1}}],[\"java当中的finalize方法就是\",{\"1\":{\"689\":1}}],[\"java当中的哈希表实现\",{\"1\":{\"680\":1}}],[\"java当中的封装是依赖于访问权限修饰符来实现\",{\"1\":{\"516\":1}}],[\"java当中的方法可以改变对象的状态\",{\"1\":{\"470\":1}}],[\"java当中的循环结构\",{\"1\":{\"361\":1}}],[\"java当中的小数字面值常量\",{\"1\":{\"336\":1}}],[\"java当中的整数字面值常量\",{\"1\":{\"336\":1}}],[\"java当中的保留字是很稀缺的\",{\"1\":{\"313\":1}}],[\"java依赖是gc自动完成释放\",{\"1\":{\"689\":1}}],[\"java官方\",{\"1\":{\"838\":1}}],[\"java官方正式将该方法标记为\",{\"1\":{\"689\":1}}],[\"java官方为我们提供了官方的要求\",{\"1\":{\"674\":1}}],[\"java官方可能会将其变成具有特殊含义的单词\",{\"1\":{\"313\":1}}],[\"java设计者自己都觉得object类当中的\",{\"1\":{\"666\":1}}],[\"java设计原则中一个非常重要的原则\",{\"1\":{\"389\":1}}],[\"java所有类都直接或间接地继承了object\",{\"1\":{\"538\":1}}],[\"java出现了引用数据类型的类型转换\",{\"1\":{\"525\":1}}],[\"java只有值传递\",{\"1\":{\"470\":1}}],[\"java只存在值传递\",{\"1\":{\"425\":1}}],[\"java类中的每个成员方法的形参列表中都隐含了一个传参\",{\"1\":{\"460\":1}}],[\"java方法对方法参数能做什么\",{\"0\":{\"427\":1}}],[\"java值传递\",{\"0\":{\"425\":1}}],[\"java会自动把可变参数当作数组处理\",{\"1\":{\"421\":1}}],[\"java在定义一个类时\",{\"1\":{\"520\":1}}],[\"java在gc机制上的创新是java能够如此流行的重要原因之一\",{\"1\":{\"407\":1}}],[\"java在某些特殊情况下会有一些用武之地\",{\"1\":{\"303\":1}}],[\"java面向对象程序中将会有非常多的对象\",{\"1\":{\"403\":1}}],[\"java为了代码的兼容性考虑\",{\"1\":{\"395\":1}}],[\"java变量也需要一个容器来存放数据\",{\"1\":{\"392\":1}}],[\"java程序运行时\",{\"1\":{\"442\":1}}],[\"java程序员的日常是离不开if关键字的\",{\"1\":{\"357\":1}}],[\"java程序的数字进制\",{\"1\":{\"322\":1}}],[\"java程序的运行机制\",{\"0\":{\"309\":1}}],[\"java语言中\",{\"1\":{\"767\":1}}],[\"java语言中显然没有一个对应的\",{\"1\":{\"764\":1}}],[\"java语言中大部分运算符也是从左向右结合的\",{\"1\":{\"350\":1}}],[\"java语言的跨平台性\",{\"1\":{\"309\":1}}],[\"java语言的应用领域\",{\"0\":{\"303\":1}}],[\"java运算优先级的大体规则\",{\"1\":{\"350\":1}}],[\"java中优先级\",{\"0\":{\"838\":1}}],[\"java中采用的是抢占式的调度方式\",{\"1\":{\"836\":1}}],[\"java中采用哪种调度方式\",{\"0\":{\"836\":1}}],[\"java中如何实现io功能\",{\"0\":{\"781\":1}}],[\"java中又提供了新的日期表示\",{\"1\":{\"721\":1}}],[\"java中所有类\",{\"1\":{\"658\":1}}],[\"java中对代码的直接复用依赖于某一个方法\",{\"1\":{\"519\":1}}],[\"java中对于文档注释的写法\",{\"1\":{\"318\":1}}],[\"java中用于存放数据的容器有很多\",{\"1\":{\"392\":1}}],[\"java中提供了选择结构\",{\"1\":{\"357\":1}}],[\"java中变量的数据类型由某一种转换为另一种\",{\"1\":{\"337\":1}}],[\"java中字符型char就是存储一个正整数\",{\"1\":{\"324\":1}}],[\"java中的队列接口\",{\"1\":{\"970\":1}}],[\"java中的队列通常是先进先出\",{\"1\":{\"970\":1}}],[\"java中的集合类包括list\",{\"1\":{\"950\":1}}],[\"java中的集合类分为两大类\",{\"1\":{\"950\":1}}],[\"java中的collection接口定义了一些常用的方法\",{\"1\":{\"950\":1}}],[\"java中的char类型存储字符\",{\"1\":{\"324\":1}}],[\"java中的char类型变量占用2个字节内存空间\",{\"1\":{\"324\":1}}],[\"java中的泛型并不是真的泛型\",{\"1\":{\"945\":1}}],[\"java中的编解码\",{\"0\":{\"801\":1},\"1\":{\"801\":1}}],[\"java中的哈希表的实现\",{\"1\":{\"680\":1}}],[\"java中的多态指的是\",{\"1\":{\"575\":1}}],[\"java中的每个类\",{\"1\":{\"533\":1}}],[\"java中的一个类\",{\"1\":{\"532\":1}}],[\"java中的运算符分类\",{\"1\":{\"343\":1}}],[\"java中的字符型只有一个\",{\"1\":{\"324\":1}}],[\"java是面向对象的语言\",{\"1\":{\"701\":1}}],[\"java是存在这种机制的\",{\"1\":{\"387\":1}}],[\"java是强类型语言\",{\"1\":{\"333\":1,\"337\":1}}],[\"java是典型的强类型语言\",{\"1\":{\"319\":1}}],[\"java是当前最常见\",{\"1\":{\"303\":1}}],[\"javadoc\",{\"1\":{\"318\":1}}],[\"java支持三种注释的语法格式\",{\"1\":{\"318\":1}}],[\"java开发编程规约\",{\"1\":{\"316\":1,\"319\":1}}],[\"java开发者工具包\",{\"1\":{\"304\":1}}],[\"java源代码总是要经过编译\",{\"1\":{\"309\":1}}],[\"java指令后面跟着的是java文件中的类名\",{\"1\":{\"308\":1}}],[\"javac\",{\"1\":{\"307\":1,\"308\":2}}],[\"java8中的默认方法和静态方法不需要子类实现\",{\"1\":{\"652\":1}}],[\"java8中引入了lambda表达式和streamapi\",{\"1\":{\"600\":1}}],[\"java8中接口的语法迎来了大的变动\",{\"1\":{\"600\":1}}],[\"java8仍然新增了默认方法\",{\"1\":{\"600\":1}}],[\"java8以后允许实现方法\",{\"1\":{\"598\":1}}],[\"java8\",{\"1\":{\"307\":1}}],[\"java的泛型只存在于编译之前\",{\"1\":{\"945\":1}}],[\"java的类和方法只能通过object来实现泛化\",{\"1\":{\"938\":1}}],[\"java的双引号引起来的字面值常量字符串\",{\"1\":{\"731\":1}}],[\"java的资源释放代码\",{\"1\":{\"689\":1}}],[\"java的语法规定一个类\",{\"1\":{\"532\":1}}],[\"java的访问权限级别共分为以下四个级别\",{\"1\":{\"506\":1}}],[\"java的访问权限的级别\",{\"1\":{\"506\":1}}],[\"java的gc机制是全自动的\",{\"1\":{\"407\":1}}],[\"java的开发者在\",{\"1\":{\"403\":1}}],[\"java的流程控制结构主要有三种\",{\"1\":{\"356\":1}}],[\"java的主流还是web应用的开发\",{\"1\":{\"303\":1}}],[\"java的一套标准的连接数据库的接口\",{\"1\":{\"191\":1}}],[\"java淡出游戏的舞台\",{\"1\":{\"303\":1}}],[\"java也是可以做桌面级应用开发的\",{\"1\":{\"303\":1}}],[\"java基本承袭了c\",{\"1\":{\"375\":1}}],[\"java基本介绍\",{\"0\":{\"302\":1}}],[\"java基础语法\",{\"0\":{\"310\":1}}],[\"java基础\",{\"0\":{\"289\":1},\"1\":{\"289\":1}}],[\"javascript\",{\"1\":{\"1026\":3}}],[\"javase提供了java语言的基本功能和库\",{\"1\":{\"1077\":1}}],[\"javase和javaee可以看作是java平台的两个不同的版本\",{\"1\":{\"1077\":1}}],[\"javaserver\",{\"1\":{\"1077\":1}}],[\"javase包含了java的基本功能和特性\",{\"1\":{\"1077\":1}}],[\"javase\",{\"1\":{\"719\":1,\"1077\":1}}],[\"javase思维导图\",{\"0\":{\"288\":1}}],[\"javassist\",{\"1\":{\"246\":1}}],[\"javatype=\",{\"1\":{\"276\":1,\"277\":1}}],[\"javatype\",{\"1\":{\"276\":1}}],[\"java52\",{\"1\":{\"249\":1}}],[\"java<\",{\"1\":{\"234\":1,\"244\":1}}],[\"javax\",{\"1\":{\"191\":1,\"213\":1,\"1078\":5,\"1081\":1}}],[\"java1\",{\"1\":{\"125\":1}}],[\"java\",{\"0\":{\"1208\":1,\"1209\":1},\"1\":{\"125\":3,\"127\":10,\"139\":1,\"146\":1,\"184\":3,\"191\":2,\"192\":1,\"212\":1,\"234\":1,\"235\":2,\"244\":1,\"247\":4,\"257\":1,\"258\":1,\"281\":1,\"303\":1,\"304\":3,\"307\":2,\"308\":2,\"318\":1,\"319\":1,\"352\":1,\"445\":1,\"463\":1,\"465\":1,\"503\":1,\"538\":1,\"678\":1,\"679\":1,\"681\":1,\"682\":2,\"701\":8,\"719\":1,\"728\":1,\"730\":1,\"738\":2,\"739\":1,\"740\":1,\"741\":2,\"747\":5,\"748\":8,\"764\":1,\"767\":2,\"769\":1,\"771\":2,\"776\":3,\"777\":4,\"784\":1,\"788\":4,\"789\":11,\"790\":4,\"794\":6,\"795\":3,\"801\":2,\"806\":1,\"807\":2,\"808\":4,\"812\":3,\"813\":2,\"814\":8,\"816\":1,\"817\":3,\"818\":3,\"819\":2,\"820\":4,\"821\":3,\"823\":2,\"824\":3,\"825\":4,\"830\":1,\"832\":1,\"833\":1,\"839\":1,\"842\":2,\"844\":4,\"847\":1,\"859\":1,\"860\":1,\"864\":2,\"867\":2,\"870\":1,\"880\":3,\"881\":6,\"884\":6,\"885\":1,\"892\":7,\"893\":3,\"894\":8,\"895\":10,\"902\":5,\"903\":9,\"904\":8,\"905\":11,\"910\":1,\"912\":2,\"917\":2,\"918\":12,\"919\":4,\"920\":2,\"921\":2,\"922\":5,\"923\":6,\"924\":9,\"925\":1,\"940\":1,\"947\":2,\"970\":1,\"1031\":1,\"1077\":3,\"1078\":2,\"1100\":1,\"1194\":1}}],[\"joindemo\",{\"1\":{\"840\":1}}],[\"join这行代码在哪个线程上运行\",{\"1\":{\"840\":1}}],[\"join\",{\"1\":{\"181\":1,\"182\":4,\"183\":8,\"277\":1,\"280\":1,\"282\":1,\"283\":3,\"840\":2}}],[\"jpg来下载正文\",{\"1\":{\"1128\":1}}],[\"jpg文件\",{\"1\":{\"776\":2}}],[\"jpg\",{\"1\":{\"180\":4,\"275\":4,\"776\":1,\"777\":1,\"784\":1,\"905\":2,\"1124\":1,\"1128\":3,\"1132\":20}}],[\"jpeg\",{\"1\":{\"116\":1}}],[\"jingtian\",{\"1\":{\"158\":2}}],[\"jsessionid这样的一个key\",{\"1\":{\"1150\":1}}],[\"jsessionid=xxxx\",{\"1\":{\"1158\":1}}],[\"jsessionid=f1500d1d295b3953dcbbf89ad614f1e6\",{\"1\":{\"1150\":2}}],[\"jsessionid=24287278\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"json\",{\"1\":{\"1102\":1,\"1104\":2,\"1105\":3,\"1110\":2,\"1112\":2,\"1121\":1,\"1127\":2,\"1132\":2}}],[\"jsp其实也是一个servlet\",{\"1\":{\"1121\":1}}],[\"jsp技术使用过程中会做请求转发\",{\"1\":{\"1121\":1}}],[\"jsp\",{\"1\":{\"1077\":1,\"1121\":1}}],[\"jsp<\",{\"1\":{\"139\":1}}],[\"js\",{\"1\":{\"113\":1,\"1078\":1,\"1098\":1}}],[\"jdk在实现arraylist的时候\",{\"1\":{\"961\":1}}],[\"jdk采用了存储一个值的方式\",{\"1\":{\"955\":1}}],[\"jdk帮你做的\",{\"1\":{\"945\":1}}],[\"jdk中jre的lib目录下rt\",{\"1\":{\"912\":1}}],[\"jdk中的标记接口\",{\"1\":{\"696\":1}}],[\"jdk5提供了一executors来产生线程池\",{\"1\":{\"880\":1}}],[\"jdk文档中也规定了一些重写的原则\",{\"1\":{\"698\":1}}],[\"jdk文档中给我们标注了重写的规则和什么时候进行重写\",{\"1\":{\"682\":1}}],[\"jdk8\",{\"1\":{\"606\":1,\"651\":1}}],[\"jdk也已经有实现了\",{\"1\":{\"440\":1}}],[\"jdk自带数组遍历实现\",{\"0\":{\"416\":1}}],[\"jdk安装目录的根目录\",{\"1\":{\"307\":1}}],[\"jdk1\",{\"1\":{\"307\":1,\"939\":2,\"1020\":1}}],[\"jdk的安装目录\",{\"1\":{\"306\":1}}],[\"jdk配置\",{\"1\":{\"305\":1}}],[\"jdk下载地址\",{\"1\":{\"306\":1}}],[\"jdk下载\",{\"1\":{\"305\":1}}],[\"jdk使用\",{\"0\":{\"305\":1}}],[\"jdk还提供了java开发者需要使用的工具\",{\"1\":{\"304\":1}}],[\"jdk包含jre\",{\"1\":{\"304\":1}}],[\"jdk与jre\",{\"0\":{\"304\":1}}],[\"jdk\",{\"1\":{\"246\":1,\"304\":2,\"1006\":1}}],[\"jdbctypefornull\",{\"1\":{\"246\":1}}],[\"jdbc连接信息\",{\"1\":{\"234\":1}}],[\"jdbcurl=jdbc\",{\"1\":{\"215\":1,\"217\":1}}],[\"jdbcurl\",{\"1\":{\"215\":1}}],[\"jdbcutils\",{\"1\":{\"203\":1,\"204\":2,\"209\":1}}],[\"jdbc的优化\",{\"0\":{\"203\":1}}],[\"jdbc的主要优点包括\",{\"1\":{\"191\":1}}],[\"jdbc4connection\",{\"1\":{\"199\":1,\"200\":1}}],[\"jdbc具体指的就是\",{\"1\":{\"191\":1}}],[\"jdbc提供了一种跨平台\",{\"1\":{\"191\":1}}],[\"jdbc是什么\",{\"0\":{\"191\":1}}],[\"jdbc\",{\"0\":{\"189\":1},\"1\":{\"191\":1,\"192\":2,\"200\":1,\"201\":1,\"203\":1,\"213\":3,\"214\":1,\"215\":2,\"216\":1,\"234\":4,\"244\":3,\"245\":2,\"248\":4,\"1107\":3}}],[\"jd\",{\"1\":{\"113\":2,\"1146\":1}}],[\"j\",{\"1\":{\"11\":1,\"362\":1,\"367\":2,\"440\":12,\"441\":8,\"739\":6}}],[\"=到>\",{\"1\":{\"1201\":1}}],[\"=53\",{\"1\":{\"978\":1}}],[\"=0000\",{\"1\":{\"978\":1}}],[\"=0\",{\"1\":{\"881\":1}}],[\"=10\",{\"1\":{\"910\":1}}],[\"=1\",{\"1\":{\"703\":1,\"706\":2}}],[\"=20\",{\"1\":{\"344\":1}}],[\"=3\",{\"1\":{\"230\":1,\"231\":1}}],[\"==>\",{\"1\":{\"978\":3,\"1013\":1}}],[\"=========\",{\"1\":{\"1201\":1}}],[\"============\",{\"1\":{\"1201\":1}}],[\"====================\",{\"1\":{\"1201\":1}}],[\"=========================\",{\"1\":{\"955\":4}}],[\"===============\",{\"1\":{\"1201\":1}}],[\"=======\",{\"1\":{\"1197\":1}}],[\"======\",{\"1\":{\"1197\":1}}],[\"===>\",{\"1\":{\"212\":1,\"525\":1,\"978\":1}}],[\"==与equals方法有什么区别\",{\"1\":{\"734\":1}}],[\"==\",{\"1\":{\"201\":2,\"256\":1,\"265\":1,\"266\":1,\"336\":2,\"346\":4,\"349\":1,\"350\":1,\"377\":1,\"378\":1,\"415\":1,\"440\":5,\"442\":6,\"663\":3,\"673\":1,\"698\":1,\"706\":3,\"707\":2,\"708\":2,\"709\":2,\"710\":2,\"720\":1,\"734\":4,\"735\":5,\"740\":1,\"794\":2,\"856\":1,\"857\":1,\"860\":1,\"867\":3,\"884\":3,\"916\":3,\"978\":2,\"1008\":4,\"1009\":6,\"1016\":6,\"1028\":4,\"1029\":1,\"1043\":2,\"1044\":2,\"1049\":1,\"1050\":2,\"1052\":5,\"1116\":1,\"1131\":1,\"1159\":2}}],[\"=user\",{\"1\":{\"182\":1}}],[\"=无法判断null\",{\"1\":{\"162\":1}}],[\"=>\",{\"1\":{\"34\":1}}],[\"=\",{\"1\":{\"10\":1,\"11\":1,\"34\":3,\"57\":1,\"75\":1,\"125\":1,\"127\":37,\"128\":4,\"139\":1,\"160\":1,\"161\":1,\"162\":4,\"171\":1,\"182\":2,\"183\":4,\"185\":2,\"192\":7,\"194\":1,\"195\":2,\"196\":3,\"197\":5,\"199\":1,\"200\":1,\"201\":3,\"202\":2,\"203\":10,\"204\":25,\"205\":3,\"206\":3,\"207\":2,\"209\":16,\"213\":7,\"214\":9,\"215\":1,\"216\":3,\"217\":4,\"220\":2,\"232\":2,\"233\":5,\"234\":18,\"235\":3,\"237\":5,\"238\":4,\"239\":5,\"240\":4,\"243\":1,\"244\":11,\"247\":5,\"250\":2,\"251\":2,\"256\":7,\"257\":4,\"258\":3,\"259\":2,\"260\":1,\"263\":8,\"264\":5,\"265\":5,\"266\":3,\"267\":3,\"268\":9,\"269\":9,\"271\":12,\"272\":1,\"273\":2,\"274\":2,\"276\":2,\"277\":2,\"279\":2,\"280\":2,\"282\":3,\"283\":7,\"285\":16,\"287\":7,\"304\":1,\"324\":2,\"327\":3,\"331\":5,\"334\":7,\"336\":10,\"339\":1,\"340\":3,\"341\":7,\"342\":11,\"344\":10,\"345\":29,\"346\":6,\"347\":2,\"348\":4,\"349\":2,\"350\":14,\"352\":10,\"353\":1,\"358\":3,\"359\":4,\"367\":2,\"377\":1,\"378\":1,\"383\":3,\"397\":3,\"398\":2,\"400\":1,\"401\":1,\"402\":1,\"415\":1,\"418\":4,\"419\":6,\"424\":1,\"425\":1,\"426\":3,\"434\":6,\"440\":4,\"441\":12,\"442\":4,\"444\":12,\"452\":2,\"453\":2,\"458\":1,\"459\":3,\"460\":2,\"463\":9,\"465\":5,\"467\":4,\"468\":6,\"469\":14,\"471\":9,\"472\":5,\"474\":4,\"478\":6,\"479\":4,\"487\":2,\"491\":7,\"498\":18,\"516\":1,\"526\":4,\"529\":1,\"538\":3,\"539\":1,\"545\":6,\"564\":7,\"570\":1,\"572\":1,\"573\":10,\"584\":1,\"585\":5,\"588\":13,\"594\":4,\"606\":2,\"616\":3,\"617\":1,\"619\":3,\"629\":1,\"655\":27,\"663\":8,\"669\":3,\"684\":2,\"698\":1,\"699\":3,\"700\":5,\"703\":7,\"704\":14,\"706\":4,\"707\":7,\"710\":2,\"711\":2,\"713\":2,\"715\":9,\"717\":2,\"719\":9,\"720\":6,\"723\":1,\"729\":12,\"730\":10,\"731\":2,\"732\":10,\"734\":6,\"735\":8,\"737\":16,\"738\":23,\"739\":11,\"740\":9,\"741\":15,\"743\":4,\"744\":3,\"764\":2,\"769\":5,\"771\":8,\"776\":4,\"777\":4,\"782\":1,\"788\":4,\"789\":7,\"790\":4,\"794\":20,\"795\":4,\"799\":1,\"801\":5,\"806\":3,\"807\":1,\"808\":1,\"812\":5,\"813\":3,\"814\":9,\"817\":14,\"818\":6,\"819\":1,\"820\":1,\"821\":4,\"822\":1,\"824\":12,\"825\":8,\"832\":1,\"833\":11,\"838\":7,\"839\":2,\"840\":2,\"841\":1,\"842\":3,\"844\":10,\"850\":2,\"851\":13,\"855\":7,\"856\":8,\"857\":8,\"859\":1,\"860\":2,\"864\":6,\"866\":3,\"867\":35,\"870\":2,\"871\":1,\"872\":4,\"879\":2,\"880\":6,\"881\":14,\"884\":6,\"892\":13,\"893\":9,\"894\":12,\"895\":11,\"902\":8,\"903\":12,\"904\":12,\"905\":19,\"912\":3,\"916\":8,\"918\":14,\"919\":9,\"920\":8,\"921\":9,\"922\":24,\"923\":16,\"924\":24,\"936\":19,\"937\":6,\"939\":11,\"940\":16,\"942\":2,\"943\":3,\"944\":13,\"948\":2,\"953\":12,\"954\":5,\"955\":6,\"956\":8,\"958\":1,\"961\":5,\"968\":1,\"978\":60,\"997\":5,\"1001\":8,\"1003\":1,\"1005\":1,\"1006\":3,\"1008\":11,\"1009\":7,\"1012\":1,\"1013\":9,\"1016\":8,\"1019\":2,\"1026\":1,\"1028\":13,\"1029\":2,\"1034\":5,\"1036\":2,\"1037\":3,\"1038\":4,\"1039\":4,\"1040\":7,\"1041\":4,\"1043\":3,\"1044\":3,\"1045\":2,\"1046\":6,\"1047\":1,\"1048\":1,\"1049\":2,\"1050\":8,\"1052\":6,\"1078\":5,\"1080\":1,\"1085\":1,\"1093\":6,\"1094\":6,\"1095\":9,\"1096\":9,\"1097\":9,\"1107\":10,\"1108\":5,\"1109\":24,\"1110\":1,\"1111\":7,\"1112\":11,\"1113\":13,\"1115\":4,\"1116\":17,\"1117\":8,\"1118\":15,\"1119\":2,\"1120\":14,\"1124\":6,\"1126\":2,\"1128\":6,\"1130\":3,\"1131\":14,\"1132\":23,\"1142\":1,\"1143\":5,\"1145\":1,\"1146\":1,\"1147\":2,\"1148\":12,\"1152\":5,\"1159\":15,\"1195\":2}}],[\"aha\",{\"1\":{\"1147\":1}}],[\"a7pxl18g\",{\"1\":{\"1132\":1}}],[\"a3\",{\"1\":{\"1117\":1}}],[\"a3f7\",{\"1\":{\"1105\":2,\"1121\":2}}],[\"avatar\",{\"1\":{\"1104\":1,\"1105\":1,\"1120\":15,\"1121\":1,\"1132\":20}}],[\"avg<表达式>|条件\",{\"1\":{\"168\":1}}],[\"avg<列>\",{\"1\":{\"168\":1}}],[\"avg\",{\"1\":{\"167\":3,\"168\":15}}],[\"air\",{\"1\":{\"1026\":1}}],[\"ainnert\",{\"1\":{\"939\":1}}],[\"a和b取余的时候\",{\"1\":{\"1008\":1}}],[\"a是什么东西\",{\"1\":{\"954\":1}}],[\"a>\",{\"1\":{\"916\":1}}],[\"a>>>2得到15即0000\",{\"1\":{\"348\":1}}],[\"a主机作为发送端首先要明确接收端的ip地址和端口号\",{\"1\":{\"885\":1}}],[\"a持有锁对象\",{\"1\":{\"884\":1}}],[\"a执行\",{\"1\":{\"884\":1}}],[\"a退出sync\",{\"1\":{\"859\":1}}],[\"a进入sync\",{\"1\":{\"859\":1,\"872\":1}}],[\"a进来\",{\"1\":{\"851\":1}}],[\"a释放锁\",{\"1\":{\"859\":1}}],[\"a接着执行\",{\"1\":{\"859\":1}}],[\"a再次抢到执行权\",{\"1\":{\"859\":1}}],[\"a还没有访问结束\",{\"1\":{\"859\":1}}],[\"a线程进来\",{\"1\":{\"884\":1}}],[\"a线程进入sync\",{\"1\":{\"860\":1,\"871\":1}}],[\"a线程计算1+2+3\",{\"1\":{\"881\":2}}],[\"a线程打印3\",{\"1\":{\"872\":2}}],[\"a线程打印1\",{\"1\":{\"872\":2}}],[\"a线程获取a锁\",{\"1\":{\"866\":1,\"867\":2}}],[\"a线程访问同步代码块的内容\",{\"1\":{\"859\":1}}],[\"a线程就持有了锁对象\",{\"1\":{\"859\":1}}],[\"a线程设置最大优先级10\",{\"1\":{\"838\":2}}],[\"a打印\",{\"1\":{\"851\":1}}],[\"a打印1\",{\"1\":{\"841\":2}}],[\"a窗口卖了第1张票\",{\"1\":{\"851\":1}}],[\"a窗口\",{\"1\":{\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"864\":1}}],[\"a任务执行的时候\",{\"1\":{\"828\":1}}],[\"a任务执行的时候b不能执行\",{\"1\":{\"828\":1}}],[\"a=\",{\"1\":{\"498\":1}}],[\"a+1\",{\"1\":{\"573\":1,\"978\":1}}],[\"a++\",{\"1\":{\"573\":1}}],[\"a++一次是11\",{\"1\":{\"344\":1}}],[\"a+b=30\",{\"1\":{\"344\":1}}],[\"a仍然可以在main方法下面定义\",{\"1\":{\"331\":1}}],[\"a不能在if之外生效\",{\"1\":{\"331\":1}}],[\"a变量的作用域就在if的代码块之间\",{\"1\":{\"331\":1}}],[\"a2\",{\"1\":{\"323\":1,\"740\":1,\"1117\":1}}],[\"a~z\",{\"1\":{\"315\":4}}],[\"aggressivelazyloading\",{\"1\":{\"246\":1}}],[\"agelimit\",{\"1\":{\"924\":7}}],[\"agefield\",{\"1\":{\"920\":4,\"924\":3}}],[\"age的双参构造器\",{\"1\":{\"684\":1}}],[\"age=18\",{\"1\":{\"1138\":1}}],[\"age=0\",{\"1\":{\"1105\":1,\"1120\":1,\"1121\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"age=\",{\"1\":{\"668\":1,\"740\":1,\"741\":1,\"824\":1,\"904\":1,\"922\":1}}],[\"age=20\",{\"1\":{\"233\":1,\"1118\":1}}],[\"age这个常量就没值\",{\"1\":{\"570\":1}}],[\"age\",{\"1\":{\"153\":1,\"158\":2,\"159\":1,\"162\":1,\"169\":1,\"170\":1,\"197\":4,\"220\":2,\"232\":5,\"233\":5,\"240\":1,\"253\":3,\"256\":2,\"261\":4,\"278\":2,\"279\":2,\"280\":4,\"316\":1,\"450\":1,\"463\":3,\"465\":4,\"467\":4,\"468\":8,\"471\":9,\"491\":11,\"498\":10,\"509\":2,\"517\":2,\"570\":4,\"573\":2,\"588\":4,\"655\":6,\"668\":1,\"740\":6,\"741\":6,\"824\":8,\"904\":5,\"910\":1,\"920\":1,\"922\":8,\"924\":8,\"939\":2,\"997\":1,\"1009\":1,\"1019\":2,\"1028\":4}}],[\"agent\",{\"1\":{\"116\":1,\"1104\":1,\"1110\":1,\"1112\":3,\"1113\":1,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"aaaa\",{\"1\":{\"789\":1}}],[\"aaaaaa\",{\"1\":{\"1132\":2}}],[\"aaaaa\",{\"1\":{\"255\":2}}],[\"aaa\",{\"1\":{\"356\":4,\"655\":2,\"730\":1,\"924\":1}}],[\"aaabbbc\",{\"1\":{\"356\":1}}],[\"aa\",{\"1\":{\"222\":1,\"225\":1,\"227\":1,\"229\":1,\"588\":3,\"1028\":1}}],[\"amp\",{\"1\":{\"215\":1,\"234\":1,\"244\":1}}],[\"amazonaws\",{\"1\":{\"147\":2}}],[\"aquireconnection\",{\"1\":{\"213\":1}}],[\"artifact\",{\"1\":{\"1084\":1}}],[\"artifactid\",{\"1\":{\"1082\":1,\"1098\":1,\"1099\":1,\"1100\":2}}],[\"artifactid>\",{\"1\":{\"234\":2,\"244\":3,\"262\":1,\"1079\":1}}],[\"are\",{\"1\":{\"623\":3}}],[\"area\",{\"1\":{\"403\":1,\"925\":1}}],[\"arr2\",{\"1\":{\"426\":3}}],[\"arr1\",{\"1\":{\"426\":3}}],[\"arr\",{\"1\":{\"415\":8,\"418\":8,\"419\":12,\"440\":14,\"441\":14}}],[\"arr变量表示一个一维数组\",{\"1\":{\"415\":1}}],[\"arraydeque是deque的子实现\",{\"1\":{\"977\":1}}],[\"arraydeque是一个循环数组\",{\"1\":{\"970\":1}}],[\"arraydeque\",{\"0\":{\"976\":1},\"1\":{\"978\":3}}],[\"arraycopy\",{\"1\":{\"954\":4}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"411\":1,\"747\":1,\"748\":1,\"754\":1}}],[\"arrays\",{\"1\":{\"272\":1,\"416\":1,\"440\":1,\"738\":3,\"739\":4,\"740\":6,\"741\":6,\"777\":2,\"801\":3,\"953\":3,\"954\":2,\"997\":1,\"1034\":1,\"1117\":1}}],[\"array\",{\"1\":{\"271\":2,\"392\":1,\"740\":1,\"954\":2,\"958\":1,\"976\":1}}],[\"arraylist和hashmap的常见操作\",{\"1\":{\"1026\":1}}],[\"arraylist和linkedlist的区别\",{\"1\":{\"956\":1}}],[\"arraylist数据结构表现为线性表\",{\"1\":{\"962\":1}}],[\"arraylist提供了一系列方法\",{\"1\":{\"961\":1}}],[\"arraylist会自动增加容量\",{\"1\":{\"961\":1}}],[\"arraylist内部实际上是一个动态数组\",{\"1\":{\"961\":1}}],[\"arraylist的大小可以根据需要自动增长\",{\"1\":{\"961\":1}}],[\"arraylist的底层结构\",{\"1\":{\"956\":1}}],[\"arraylist的底层是一个数组\",{\"1\":{\"953\":1}}],[\"arraylist的底层实现仍然是一个数组\",{\"1\":{\"394\":1}}],[\"arraylist是在jdk1\",{\"1\":{\"969\":1}}],[\"arraylist是线程不安全的\",{\"1\":{\"969\":1}}],[\"arraylist是jdk1\",{\"1\":{\"969\":1}}],[\"arraylist是java集合框架中的一种\",{\"1\":{\"961\":1}}],[\"arraylist是list的实现\",{\"1\":{\"962\":1}}],[\"arraylist是collection接口的一个子实现\",{\"1\":{\"953\":1}}],[\"arraylist<string>\",{\"1\":{\"956\":1,\"961\":2}}],[\"arraylist<>\",{\"1\":{\"213\":1,\"234\":1,\"271\":2,\"953\":8,\"955\":2,\"956\":5,\"961\":5,\"968\":1,\"997\":1,\"1019\":2,\"1028\":1}}],[\"arraylist里面存时间\",{\"1\":{\"1026\":1}}],[\"arraylist里面\",{\"1\":{\"954\":1}}],[\"arraylist底层实际存储的数据的长度\",{\"1\":{\"954\":1}}],[\"arraylist底层是数组\",{\"1\":{\"954\":1}}],[\"arraylist重写了tostring\",{\"1\":{\"953\":1}}],[\"arraylist\",{\"0\":{\"961\":1,\"964\":1},\"1\":{\"247\":2,\"954\":2,\"961\":1,\"963\":3,\"964\":3,\"987\":1,\"1026\":1,\"1034\":1}}],[\"arithmeticexception\",{\"1\":{\"747\":1,\"748\":1,\"754\":1}}],[\"arithmetic\",{\"1\":{\"344\":1}}],[\"arg2\",{\"1\":{\"254\":3}}],[\"arg1\",{\"1\":{\"254\":4}}],[\"arg0\",{\"1\":{\"254\":4}}],[\"args可以在符合标识符命名的前提下可以任意写\",{\"1\":{\"385\":1}}],[\"args是一个形参名\",{\"1\":{\"385\":1}}],[\"args\",{\"1\":{\"127\":1,\"204\":1,\"214\":1,\"234\":1,\"308\":1,\"331\":2,\"383\":1,\"385\":2,\"423\":1,\"444\":1,\"459\":1,\"460\":1,\"465\":1,\"468\":1,\"469\":1,\"471\":1,\"472\":1,\"474\":1,\"478\":1,\"479\":1,\"491\":1,\"498\":3,\"538\":1,\"539\":1,\"545\":1,\"564\":1,\"573\":2,\"588\":2,\"650\":1,\"655\":1,\"669\":1,\"690\":1,\"696\":1,\"700\":1,\"706\":1,\"718\":1,\"720\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":2,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":4,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":1,\"892\":2,\"894\":2,\"895\":2,\"902\":2,\"903\":2,\"904\":2,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":3,\"922\":2,\"923\":1,\"924\":1,\"936\":1,\"940\":1,\"943\":1,\"1028\":1,\"1107\":1,\"1109\":3}}],[\"atomicity\",{\"1\":{\"210\":1}}],[\"attack\",{\"1\":{\"469\":2}}],[\"attachment\",{\"1\":{\"121\":1,\"1128\":2}}],[\"attrs\",{\"0\":{\"61\":1}}],[\"a账户信息不对\",{\"1\":{\"209\":1}}],[\"a给b转账\",{\"1\":{\"208\":1}}],[\"admininfo\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"admin123\",{\"1\":{\"1104\":2,\"1105\":1,\"1110\":2,\"1121\":1}}],[\"admin\",{\"1\":{\"204\":3,\"354\":1,\"924\":1,\"1104\":1,\"1110\":1,\"1111\":3,\"1132\":8}}],[\"addcookie\",{\"1\":{\"1142\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1}}],[\"addtime\",{\"1\":{\"1132\":20}}],[\"addlast\",{\"1\":{\"968\":1,\"970\":1,\"975\":2,\"978\":1}}],[\"addfirst\",{\"1\":{\"968\":1,\"970\":1,\"975\":2}}],[\"adddemo1\",{\"1\":{\"953\":1}}],[\"addalldemo1\",{\"1\":{\"953\":1}}],[\"addall\",{\"1\":{\"951\":1,\"953\":3,\"958\":1,\"981\":1}}],[\"addbatch\",{\"1\":{\"206\":1,\"207\":1}}],[\"add\",{\"0\":{\"1194\":1},\"1\":{\"156\":1,\"213\":2,\"232\":2,\"234\":1,\"271\":4,\"675\":1,\"941\":1,\"951\":1,\"953\":26,\"955\":7,\"956\":6,\"958\":4,\"959\":1,\"960\":1,\"970\":1,\"972\":3,\"975\":1,\"981\":1,\"993\":1,\"997\":1,\"1028\":29,\"1132\":1,\"1194\":3,\"1201\":2,\"1203\":1}}],[\"address=\",{\"1\":{\"158\":1,\"160\":2}}],[\"address\",{\"1\":{\"153\":1,\"158\":8,\"161\":1,\"180\":1,\"233\":1,\"253\":1,\"261\":6,\"262\":1,\"275\":2,\"277\":4,\"890\":1,\"892\":1,\"905\":1,\"1028\":36,\"1029\":1,\"1036\":1,\"1037\":2,\"1040\":1,\"1043\":2,\"1044\":2,\"1045\":1,\"1046\":1,\"1049\":1,\"1052\":5}}],[\"after\",{\"1\":{\"273\":2,\"825\":6,\"870\":1,\"871\":1,\"872\":2,\"880\":1,\"892\":1,\"902\":1,\"905\":1}}],[\"after操作\",{\"1\":{\"273\":1}}],[\"afterlast\",{\"1\":{\"202\":1}}],[\"affectedrowsb\",{\"1\":{\"209\":4}}],[\"affectedrowsa\",{\"1\":{\"209\":4}}],[\"affectedrows\",{\"1\":{\"192\":3,\"194\":1,\"195\":1,\"196\":1,\"201\":1,\"237\":2,\"238\":2,\"239\":2,\"274\":1}}],[\"asyncsupported\",{\"1\":{\"1086\":1}}],[\"asynchronization\",{\"0\":{\"828\":1}}],[\"assignment\",{\"1\":{\"345\":1}}],[\"assert\",{\"1\":{\"312\":1}}],[\"association>\",{\"1\":{\"277\":1}}],[\"association\",{\"1\":{\"276\":1}}],[\"aslist\",{\"1\":{\"272\":1,\"953\":3,\"997\":1,\"1117\":1}}],[\"ascii\",{\"1\":{\"799\":2}}],[\"ascii码值\",{\"1\":{\"356\":1}}],[\"asc\",{\"1\":{\"166\":1}}],[\"asc|desc\",{\"1\":{\"166\":1}}],[\"as\",{\"0\":{\"165\":1},\"1\":{\"165\":6,\"168\":7,\"261\":3,\"277\":8,\"280\":4,\"283\":5}}],[\"ab2个线程访问sync代码块中的内容\",{\"1\":{\"859\":1}}],[\"abstract修饰方法时\",{\"1\":{\"593\":1}}],[\"abstract修饰类时\",{\"1\":{\"593\":1}}],[\"abstract关键字\",{\"1\":{\"593\":1}}],[\"abstract等少数修饰符\",{\"1\":{\"592\":1}}],[\"abstract\",{\"1\":{\"312\":1,\"591\":2,\"594\":2,\"595\":2,\"598\":1,\"786\":1,\"788\":1,\"792\":1,\"794\":1,\"804\":1,\"810\":1,\"884\":1,\"1085\":1}}],[\"abc1232\",{\"1\":{\"1132\":1}}],[\"abc123\",{\"1\":{\"1132\":1}}],[\"abc001def\",{\"1\":{\"737\":3}}],[\"abcdabcfgh\",{\"1\":{\"737\":3}}],[\"abcdb\",{\"1\":{\"737\":1}}],[\"abcd\",{\"1\":{\"737\":6,\"738\":1,\"739\":1,\"789\":1}}],[\"abcdefg\",{\"1\":{\"737\":1,\"739\":2}}],[\"abcdef\",{\"1\":{\"655\":4,\"737\":3,\"790\":1,\"1123\":2}}],[\"abc\",{\"1\":{\"149\":9,\"728\":1,\"731\":2,\"732\":10,\"737\":3,\"739\":2,\"743\":1,\"744\":1,\"782\":1,\"788\":1,\"789\":1,\"924\":1,\"1091\":2,\"1195\":1}}],[\"ab公司开发\",{\"1\":{\"143\":1}}],[\"any\",{\"1\":{\"1046\":11,\"1047\":2}}],[\"anymatch\",{\"0\":{\"1043\":1},\"1\":{\"1043\":5}}],[\"anywhere\",{\"1\":{\"309\":1}}],[\"anotherperson\",{\"1\":{\"895\":2}}],[\"anotherpackagesonclazz\",{\"1\":{\"535\":1}}],[\"anotherpackageanotherclazz\",{\"1\":{\"535\":1}}],[\"anotherpackage下的两个student类\",{\"1\":{\"503\":1}}],[\"animals\",{\"1\":{\"944\":4}}],[\"animal类当中的shout方法不需要方法体\",{\"1\":{\"590\":1}}],[\"animal类当中的shout方法从来没有被调用过\",{\"1\":{\"590\":1}}],[\"animal类就是作为顶层抽象祖先类而存在的\",{\"1\":{\"590\":1}}],[\"animal类是一个抽象的概念\",{\"1\":{\"590\":1}}],[\"animal\",{\"1\":{\"581\":1,\"590\":3,\"595\":3,\"944\":1}}],[\"animate\",{\"1\":{\"31\":1}}],[\"annotationpresent\",{\"1\":{\"924\":6}}],[\"annotation~\",{\"1\":{\"924\":1}}],[\"annotation接口本身并不是一个注解类型\",{\"1\":{\"924\":1}}],[\"annotation接口\",{\"1\":{\"924\":2}}],[\"annotation接口的jdk文档\",{\"1\":{\"924\":1}}],[\"annotation就像修饰符一样被使用\",{\"1\":{\"924\":1}}],[\"annotation其实是代码里的特殊标记\",{\"1\":{\"924\":1}}],[\"annotation\",{\"1\":{\"262\":2,\"924\":9,\"1078\":1}}],[\"ansi于1986年完成第一版sql标准的定义\",{\"1\":{\"146\":1}}],[\"ansi\",{\"1\":{\"144\":1,\"800\":1}}],[\"android\",{\"1\":{\"303\":2}}],[\"and\",{\"1\":{\"141\":1,\"162\":6,\"201\":1,\"204\":8,\"209\":2,\"220\":1,\"230\":2,\"232\":1,\"233\":1,\"263\":4,\"264\":2,\"265\":2,\"267\":1}}],[\"an\",{\"1\":{\"141\":1}}],[\"a服务器提供了一个封装\",{\"1\":{\"128\":1}}],[\"apng\",{\"1\":{\"1112\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"api<\",{\"1\":{\"1079\":1}}],[\"api规范\",{\"1\":{\"1078\":1}}],[\"api添加了一个新的抽象称为流stream\",{\"1\":{\"1031\":1}}],[\"apitest\",{\"1\":{\"743\":1,\"769\":1,\"771\":1}}],[\"api以及其它流行的三方api时\",{\"1\":{\"658\":1}}],[\"api的学习是非常简单的\",{\"1\":{\"658\":1}}],[\"api的使用者\",{\"1\":{\"658\":1}}],[\"api使用的本质就是方法调用\",{\"1\":{\"658\":1}}],[\"api完成\",{\"1\":{\"657\":1}}],[\"api代码\",{\"1\":{\"657\":1}}],[\"api中\",{\"1\":{\"657\":1}}],[\"api\",{\"0\":{\"198\":1,\"953\":1,\"958\":1,\"964\":1,\"968\":1,\"972\":1,\"975\":1,\"997\":1},\"1\":{\"144\":1,\"191\":1,\"209\":1,\"658\":1,\"951\":1,\"1081\":2}}],[\"app>\",{\"1\":{\"1097\":1}}],[\"app\",{\"1\":{\"912\":1,\"1097\":2}}],[\"application\",{\"1\":{\"1084\":1,\"1104\":2,\"1105\":1,\"1110\":2,\"1112\":5,\"1113\":1,\"1120\":3,\"1121\":1,\"1127\":2,\"1132\":2,\"1138\":3,\"1140\":4,\"1150\":3}}],[\"applypay\",{\"1\":{\"721\":1}}],[\"applewebkit\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"applet\",{\"1\":{\"1078\":1}}],[\"applepay\",{\"1\":{\"720\":2}}],[\"apple\",{\"0\":{\"1210\":1},\"1\":{\"273\":1,\"274\":1,\"921\":1}}],[\"app2\",{\"1\":{\"137\":2,\"776\":2,\"777\":1}}],[\"app452\",{\"1\":{\"137\":4}}],[\"app1的目录\",{\"1\":{\"134\":1}}],[\"app1\",{\"1\":{\"134\":1,\"136\":1,\"139\":1}}],[\"append\",{\"1\":{\"127\":9,\"741\":1,\"743\":4,\"788\":3,\"807\":2,\"1124\":1}}],[\"apache\",{\"1\":{\"121\":1,\"246\":2,\"1120\":1}}],[\"already\",{\"1\":{\"905\":1}}],[\"allow\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":1}}],[\"allocating\",{\"1\":{\"978\":2}}],[\"allmatch\",{\"0\":{\"1044\":1},\"1\":{\"1044\":5}}],[\"allargsconstructor\",{\"1\":{\"261\":1,\"262\":2,\"275\":2,\"278\":2}}],[\"all\",{\"1\":{\"185\":1}}],[\"alipay\",{\"1\":{\"720\":1}}],[\"alias=\",{\"1\":{\"247\":2}}],[\"alias别名\",{\"1\":{\"247\":1}}],[\"align\",{\"1\":{\"127\":1}}],[\"alive\",{\"1\":{\"116\":1,\"121\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1113\":1,\"1120\":1,\"1122\":2,\"1123\":2,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1142\":2,\"1150\":3}}],[\"alter\",{\"1\":{\"151\":1,\"156\":5,\"157\":1,\"232\":4}}],[\"alt\",{\"1\":{\"40\":1,\"466\":1,\"499\":1,\"1132\":1}}],[\"authentication\",{\"1\":{\"1205\":1}}],[\"auth\",{\"1\":{\"1104\":1,\"1110\":1,\"1111\":3}}],[\"author\",{\"1\":{\"127\":2,\"153\":1,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":3,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2,\"1078\":1,\"1085\":2,\"1117\":1,\"1131\":1,\"1142\":1}}],[\"autocar这种类\",{\"1\":{\"936\":1}}],[\"autocar\",{\"1\":{\"936\":25,\"937\":1}}],[\"autocloseable\",{\"1\":{\"789\":1}}],[\"autowired\",{\"1\":{\"924\":1}}],[\"autoflush如果为\",{\"1\":{\"820\":1}}],[\"autoflush\",{\"1\":{\"819\":1,\"820\":2}}],[\"automappingunknowncolumnbehavior\",{\"1\":{\"246\":1}}],[\"automappingbehavior\",{\"1\":{\"246\":1}}],[\"auto\",{\"1\":{\"31\":1,\"161\":1,\"169\":11,\"171\":1,\"177\":1,\"180\":2,\"209\":1,\"233\":1,\"240\":1,\"261\":1,\"263\":2,\"275\":2,\"278\":2,\"281\":3}}],[\"augend\",{\"1\":{\"675\":1}}],[\"aug\",{\"1\":{\"116\":1,\"1132\":1}}],[\"audio\",{\"1\":{\"116\":1}}],[\"action这样的一些写法\",{\"1\":{\"1090\":1}}],[\"action\",{\"1\":{\"1048\":1}}],[\"action=\",{\"1\":{\"115\":1,\"1104\":1,\"1119\":2,\"1120\":1}}],[\"aclass\",{\"1\":{\"923\":3}}],[\"aced\",{\"1\":{\"910\":1}}],[\"ack包\",{\"1\":{\"908\":1}}],[\"ack确认包后\",{\"1\":{\"906\":1}}],[\"acknowledge\",{\"1\":{\"906\":1}}],[\"ack\",{\"1\":{\"906\":3,\"907\":2}}],[\"accumulator\",{\"1\":{\"1050\":2}}],[\"accountmapper\",{\"1\":{\"234\":1,\"244\":3,\"249\":1,\"258\":3,\"259\":1}}],[\"account\",{\"1\":{\"209\":9,\"214\":1,\"234\":4,\"244\":13,\"247\":8,\"250\":6,\"251\":2,\"252\":11,\"253\":1,\"254\":2,\"258\":1,\"259\":6,\"517\":1}}],[\"accessorder\",{\"1\":{\"1022\":1}}],[\"access\",{\"1\":{\"538\":1,\"1105\":3,\"1121\":3,\"1132\":3}}],[\"accessed\",{\"1\":{\"141\":1}}],[\"accept建立连接\",{\"1\":{\"905\":1}}],[\"accept建立练级\",{\"1\":{\"904\":1}}],[\"accept方法建立连接\",{\"1\":{\"903\":1}}],[\"accept作为一个补充条款\",{\"1\":{\"116\":1}}],[\"accept\",{\"1\":{\"116\":6,\"127\":1,\"777\":3,\"900\":1,\"902\":3,\"903\":1,\"904\":1,\"905\":1,\"1104\":4,\"1105\":2,\"1110\":3,\"1112\":9,\"1113\":2,\"1120\":3,\"1121\":2,\"1132\":5,\"1138\":3,\"1140\":3,\"1141\":2,\"1150\":3}}],[\"acid\",{\"1\":{\"189\":1,\"210\":1}}],[\"a1\",{\"1\":{\"74\":1,\"1117\":1,\"1132\":1}}],[\"a\",{\"1\":{\"10\":1,\"34\":2,\"57\":1,\"141\":1,\"201\":1,\"233\":5,\"324\":6,\"328\":2,\"331\":4,\"334\":2,\"336\":7,\"340\":5,\"342\":5,\"344\":10,\"345\":16,\"346\":7,\"347\":7,\"348\":8,\"349\":3,\"389\":5,\"423\":1,\"424\":2,\"468\":1,\"475\":1,\"487\":2,\"498\":2,\"523\":3,\"524\":1,\"528\":1,\"533\":1,\"539\":2,\"573\":1,\"588\":4,\"595\":2,\"597\":2,\"598\":2,\"606\":2,\"654\":4,\"655\":9,\"675\":3,\"696\":2,\"700\":1,\"703\":2,\"729\":2,\"737\":4,\"739\":4,\"741\":3,\"767\":2,\"768\":3,\"769\":4,\"771\":6,\"776\":1,\"788\":1,\"789\":9,\"790\":3,\"794\":3,\"795\":1,\"798\":1,\"806\":2,\"807\":1,\"808\":1,\"812\":1,\"814\":2,\"816\":1,\"817\":3,\"818\":21,\"819\":2,\"820\":2,\"824\":2,\"828\":1,\"838\":3,\"841\":3,\"855\":3,\"859\":1,\"860\":1,\"866\":2,\"867\":4,\"869\":1,\"871\":1,\"872\":2,\"873\":4,\"905\":3,\"910\":1,\"916\":8,\"922\":8,\"943\":6,\"953\":1,\"954\":20,\"978\":12,\"981\":1,\"1001\":3,\"1003\":2,\"1005\":1,\"1008\":3,\"1016\":3,\"1043\":4,\"1044\":2,\"1046\":2,\"1048\":2,\"1049\":2,\"1050\":18,\"1052\":10,\"1120\":2,\"1132\":2,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"3c280f28f1bf\",{\"1\":{\"1132\":1}}],[\"36\",{\"1\":{\"1104\":2,\"1110\":2,\"1112\":4,\"1120\":2,\"1132\":6,\"1138\":2,\"1140\":2,\"1150\":2}}],[\"3月\",{\"1\":{\"947\":1}}],[\"31\",{\"1\":{\"902\":2,\"922\":1,\"1104\":4,\"1110\":4,\"1111\":3,\"1112\":3,\"1132\":8,\"1134\":1}}],[\"3种线程池\",{\"0\":{\"880\":1}}],[\"3种方式实现\",{\"1\":{\"777\":1}}],[\"38\",{\"1\":{\"833\":1,\"838\":1,\"859\":1,\"867\":1,\"1132\":6}}],[\"34\",{\"1\":{\"821\":1,\"919\":1,\"978\":3,\"1132\":2}}],[\"34f\",{\"1\":{\"817\":1}}],[\"3465\",{\"1\":{\"168\":1}}],[\"3+1\",{\"1\":{\"814\":1}}],[\"3+2\",{\"1\":{\"806\":1}}],[\"37\",{\"1\":{\"813\":1,\"872\":1,\"924\":1,\"1132\":3}}],[\"3字节\",{\"1\":{\"799\":1}}],[\"3个窗口共同出售这100张电影票\",{\"1\":{\"851\":2}}],[\"3个窗口售票\",{\"1\":{\"851\":2}}],[\"3个线程\",{\"1\":{\"851\":1}}],[\"3个常规read\",{\"1\":{\"814\":1}}],[\"3个跟字符相关的\",{\"1\":{\"806\":1,\"807\":1}}],[\"3个read方法\",{\"1\":{\"812\":1}}],[\"3个read\",{\"1\":{\"795\":1,\"813\":1}}],[\"3个write方法\",{\"1\":{\"790\":1}}],[\"3个子类huawei\",{\"1\":{\"575\":1}}],[\"3个属性\",{\"1\":{\"517\":1}}],[\"3个字节表示一个中文字符\",{\"1\":{\"799\":1}}],[\"3个字节\",{\"1\":{\"149\":1}}],[\"3d图形渲染等等\",{\"1\":{\"431\":1}}],[\"3都能够匹配\",{\"1\":{\"389\":1}}],[\"3等\",{\"1\":{\"328\":2}}],[\"35\",{\"1\":{\"278\":2}}],[\"358班\",{\"1\":{\"192\":1}}],[\"32=0010\",{\"1\":{\"978\":1}}],[\"32bit\",{\"1\":{\"326\":2}}],[\"32767\",{\"1\":{\"326\":1}}],[\"32768\",{\"1\":{\"326\":1}}],[\"32位\",{\"1\":{\"323\":1}}],[\"32\",{\"1\":{\"171\":1,\"738\":1,\"807\":1,\"978\":6,\"1013\":5,\"1118\":1,\"1132\":1}}],[\"33\",{\"1\":{\"153\":1,\"278\":1,\"794\":1}}],[\"331\",{\"1\":{\"153\":1}}],[\"33062\",{\"1\":{\"147\":1}}],[\"33061\",{\"1\":{\"147\":1}}],[\"33060\",{\"1\":{\"147\":1}}],[\"3306\",{\"1\":{\"147\":2,\"192\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"234\":2,\"244\":1,\"245\":1}}],[\"30岁的python老师对象\",{\"1\":{\"463\":1,\"465\":1}}],[\"3000\",{\"1\":{\"839\":1,\"884\":2,\"978\":1}}],[\"30000\",{\"1\":{\"207\":1,\"342\":2}}],[\"300\",{\"1\":{\"222\":1,\"225\":1,\"229\":1,\"230\":1,\"331\":1,\"564\":1,\"817\":1}}],[\"30\",{\"1\":{\"162\":1,\"278\":3,\"465\":1,\"467\":1,\"619\":1,\"824\":1,\"978\":2,\"1028\":1,\"1040\":1,\"1132\":3}}],[\"30w\",{\"1\":{\"143\":1}}],[\"304\",{\"1\":{\"120\":1}}],[\"307\",{\"1\":{\"120\":2,\"121\":1}}],[\"302\",{\"1\":{\"120\":1,\"121\":1,\"1122\":2,\"1129\":1,\"1131\":1}}],[\"301\",{\"1\":{\"120\":1,\"121\":1}}],[\"39\",{\"1\":{\"116\":1,\"921\":1,\"1040\":1,\"1132\":2}}],[\"3\",{\"0\":{\"87\":1,\"92\":1,\"97\":1,\"102\":1,\"1056\":1,\"1061\":1,\"1064\":1,\"1066\":1,\"1071\":1,\"1164\":1,\"1169\":1,\"1172\":1,\"1174\":1,\"1179\":1},\"1\":{\"9\":1,\"34\":1,\"113\":1,\"115\":1,\"124\":1,\"125\":2,\"132\":1,\"144\":1,\"153\":2,\"158\":1,\"161\":1,\"162\":3,\"164\":2,\"167\":1,\"168\":4,\"180\":2,\"184\":1,\"187\":1,\"192\":1,\"194\":1,\"195\":2,\"197\":1,\"204\":1,\"209\":3,\"222\":1,\"225\":1,\"229\":1,\"230\":4,\"234\":6,\"240\":2,\"244\":4,\"261\":1,\"263\":1,\"264\":1,\"272\":1,\"275\":2,\"278\":3,\"281\":5,\"283\":1,\"286\":1,\"316\":1,\"336\":1,\"350\":1,\"359\":4,\"377\":1,\"378\":1,\"386\":1,\"394\":1,\"441\":2,\"442\":1,\"444\":2,\"465\":1,\"471\":1,\"472\":3,\"474\":6,\"479\":1,\"568\":1,\"606\":1,\"608\":1,\"655\":6,\"699\":1,\"715\":1,\"717\":1,\"719\":1,\"720\":1,\"737\":2,\"739\":2,\"754\":1,\"788\":2,\"794\":2,\"806\":1,\"817\":1,\"818\":2,\"825\":2,\"832\":2,\"833\":4,\"840\":2,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"869\":1,\"872\":1,\"873\":1,\"880\":2,\"884\":2,\"941\":1,\"944\":1,\"950\":1,\"952\":3,\"954\":4,\"956\":2,\"969\":2,\"978\":1,\"997\":1,\"1016\":2,\"1020\":1,\"1029\":1,\"1033\":1,\"1034\":1,\"1038\":5,\"1053\":1,\"1120\":1,\"1126\":1,\"1132\":2,\"1157\":2,\"1201\":2}}],[\"2合并刚刚的分支\",{\"1\":{\"1204\":1}}],[\"2cfu1hu\",{\"1\":{\"1132\":1}}],[\"2参数\",{\"1\":{\"1050\":1}}],[\"2时候出现\",{\"1\":{\"1020\":1}}],[\"2倍+1\",{\"1\":{\"1020\":1}}],[\"2的幂取余问题\",{\"0\":{\"1001\":1}}],[\"2的幂次方\",{\"1\":{\"978\":1}}],[\"2的三次方\",{\"1\":{\"978\":1}}],[\"2的二次方\",{\"1\":{\"978\":1}}],[\"2采用了arraylist来替代vector\",{\"1\":{\"969\":1}}],[\"2出现\",{\"1\":{\"969\":2,\"1020\":1}}],[\"2周就可以转过来\",{\"1\":{\"947\":1}}],[\"2msl\",{\"1\":{\"907\":1}}],[\"2条字节码指令\",{\"0\":{\"862\":1}}],[\"2张\",{\"1\":{\"851\":1}}],[\"2个假说\",{\"1\":{\"933\":1}}],[\"2个或以上线程因为争抢资源而造成的互相等待的现象\",{\"1\":{\"865\":1}}],[\"2个跟字符串相关的\",{\"1\":{\"806\":1,\"807\":1}}],[\"2个字节表示一个中文字符\",{\"1\":{\"799\":1}}],[\"291136733\",{\"1\":{\"1195\":1}}],[\"29\",{\"1\":{\"801\":1,\"860\":1,\"867\":1,\"1040\":1,\"1085\":2,\"1113\":1,\"1132\":4,\"1141\":1}}],[\"290列\",{\"1\":{\"172\":1}}],[\"26\",{\"1\":{\"740\":1,\"741\":1,\"894\":1,\"918\":1,\"1132\":2}}],[\"260\",{\"1\":{\"72\":1}}],[\"27\",{\"1\":{\"739\":1,\"777\":1,\"801\":1,\"918\":2,\"923\":1,\"1132\":1}}],[\"279\",{\"1\":{\"115\":1}}],[\"28\",{\"1\":{\"465\":1,\"491\":1,\"498\":1,\"588\":2,\"801\":1,\"850\":1,\"1123\":1,\"1132\":2}}],[\"28岁的c++老师对象\",{\"1\":{\"463\":1,\"465\":1}}],[\"280\",{\"1\":{\"115\":3}}],[\"2xvwfwzwlqhuhxtazpcpico7ds9ku\",{\"1\":{\"1132\":1}}],[\"2x\",{\"1\":{\"358\":3}}],[\"2得到15即\",{\"1\":{\"348\":1}}],[\"2得到240\",{\"1\":{\"348\":1}}],[\"2等价于b\",{\"1\":{\"345\":2}}],[\"2等价于a\",{\"1\":{\"345\":3}}],[\"2这种语句能够运行呢\",{\"1\":{\"342\":1}}],[\"2^n\",{\"1\":{\"348\":2}}],[\"2^63\",{\"1\":{\"326\":2}}],[\"2^31\",{\"1\":{\"326\":2}}],[\"2^15\",{\"1\":{\"326\":2}}],[\"2^7\",{\"1\":{\"326\":2}}],[\"2字节\",{\"1\":{\"326\":1,\"799\":1}}],[\"2字节来存储长度\",{\"1\":{\"153\":1}}],[\"2n\",{\"1\":{\"323\":1}}],[\"2kw\",{\"1\":{\"233\":1}}],[\"2s\",{\"1\":{\"220\":1}}],[\"2位小数\",{\"1\":{\"153\":1}}],[\"241\",{\"1\":{\"1132\":1}}],[\"247\",{\"1\":{\"1132\":1}}],[\"246\",{\"1\":{\"1132\":5}}],[\"243\",{\"1\":{\"1132\":1}}],[\"248\",{\"1\":{\"1132\":7}}],[\"245\",{\"1\":{\"1132\":1}}],[\"24287278\",{\"1\":{\"1105\":1,\"1121\":1}}],[\"24这天的天气\",{\"1\":{\"1026\":1}}],[\"24=0001\",{\"1\":{\"978\":1}}],[\"24annotation\",{\"1\":{\"924\":4}}],[\"24\",{\"1\":{\"127\":2,\"786\":1,\"788\":1,\"817\":1,\"872\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":1,\"978\":2,\"1026\":1,\"1028\":5,\"1120\":1,\"1132\":2,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"210\",{\"1\":{\"1028\":1,\"1038\":1,\"1132\":2}}],[\"21thread03\",{\"1\":{\"880\":2,\"881\":2,\"884\":1}}],[\"21亿出头\",{\"1\":{\"326\":1}}],[\"2147483647\",{\"1\":{\"326\":1}}],[\"2147483648\",{\"1\":{\"326\":1}}],[\"21\",{\"0\":{\"946\":1},\"1\":{\"261\":1,\"442\":1,\"463\":1,\"739\":1,\"740\":1,\"741\":1,\"824\":1,\"880\":2,\"881\":2,\"884\":2,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"919\":1,\"1012\":1,\"1132\":7}}],[\"211\",{\"1\":{\"124\":1}}],[\"218\",{\"1\":{\"72\":1}}],[\"237\",{\"1\":{\"1132\":2}}],[\"233\",{\"1\":{\"1132\":1}}],[\"23号的天气\",{\"1\":{\"1026\":1}}],[\"23reflect\",{\"1\":{\"912\":1,\"916\":5,\"918\":3,\"919\":2,\"920\":3,\"921\":3,\"922\":5,\"923\":2}}],[\"234\",{\"1\":{\"323\":1}}],[\"23\",{\"0\":{\"1027\":1},\"1\":{\"121\":2,\"171\":1,\"884\":2,\"1132\":3}}],[\"230\",{\"1\":{\"66\":1,\"72\":1}}],[\"22network\",{\"1\":{\"892\":2,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2}}],[\"222222\",{\"1\":{\"850\":1}}],[\"222\",{\"1\":{\"136\":2,\"1195\":1}}],[\"22\",{\"0\":{\"994\":1},\"1\":{\"116\":1,\"194\":1,\"261\":1,\"268\":1,\"463\":1,\"740\":2,\"741\":2,\"867\":2,\"904\":3,\"905\":2,\"912\":1,\"920\":1,\"1028\":6,\"1039\":2,\"1078\":1,\"1132\":6}}],[\"224\",{\"1\":{\"72\":1}}],[\"20\\u0018$\\u0003\",{\"1\":{\"1120\":1}}],[\"20中间随机生成10000个数\",{\"1\":{\"995\":1,\"997\":1}}],[\"20586\",{\"1\":{\"978\":1}}],[\"20thread02\",{\"1\":{\"850\":1,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2}}],[\"20320\",{\"1\":{\"798\":1}}],[\"20次\",{\"1\":{\"220\":1}}],[\"2013年11月代码迁移到了github\",{\"1\":{\"234\":1}}],[\"2010年这个项目由apache迁移到了google\",{\"1\":{\"234\":1}}],[\"2016年的淘宝订单\",{\"1\":{\"220\":1}}],[\"2017\",{\"1\":{\"143\":1}}],[\"2011\",{\"1\":{\"116\":2}}],[\"2005年由于bitkeeper软件公司对linux社区停止了免费使用权\",{\"1\":{\"1183\":1}}],[\"2001\",{\"1\":{\"1097\":1}}],[\"200的结果\",{\"1\":{\"881\":2}}],[\"200ms\",{\"1\":{\"220\":1}}],[\"2009年\",{\"1\":{\"143\":1}}],[\"2008年被sun公司收购\",{\"1\":{\"143\":1}}],[\"20000\",{\"1\":{\"139\":1,\"206\":1,\"207\":1,\"209\":1,\"978\":1}}],[\"2000\",{\"1\":{\"121\":2}}],[\"200\",{\"1\":{\"120\":2,\"124\":1,\"127\":2,\"153\":4,\"157\":2,\"168\":1,\"171\":3,\"222\":1,\"225\":1,\"229\":1,\"244\":1,\"278\":2,\"281\":2,\"331\":1,\"383\":1,\"459\":1,\"564\":1,\"588\":1,\"655\":1,\"881\":1,\"956\":1,\"1044\":1,\"1105\":2,\"1121\":2,\"1123\":1,\"1132\":1,\"1142\":1,\"1150\":1}}],[\"20\",{\"0\":{\"935\":1},\"1\":{\"110\":1,\"142\":3,\"143\":1,\"144\":1,\"153\":2,\"161\":1,\"162\":1,\"169\":2,\"170\":1,\"171\":2,\"192\":1,\"220\":1,\"232\":1,\"233\":2,\"346\":1,\"383\":1,\"463\":1,\"467\":1,\"471\":1,\"573\":1,\"588\":2,\"619\":1,\"703\":1,\"817\":1,\"822\":1,\"850\":1,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":11,\"870\":2,\"871\":1,\"872\":2,\"894\":1,\"904\":1,\"919\":2,\"923\":1,\"924\":1,\"1028\":5,\"1122\":1,\"1132\":5,\"1150\":1}}],[\"2023\",{\"1\":{\"884\":2,\"1026\":3,\"1078\":1,\"1085\":2,\"1105\":2,\"1117\":1,\"1121\":2,\"1122\":1,\"1123\":1,\"1131\":1,\"1132\":61,\"1142\":2,\"1150\":1}}],[\"20230310105852598\",{\"1\":{\"1120\":1}}],[\"20230310101252663\",{\"1\":{\"1120\":1}}],[\"20230310101121087\",{\"1\":{\"1120\":1}}],[\"20230330093048337\",{\"1\":{\"949\":1}}],[\"20230830114536311\",{\"1\":{\"1151\":1}}],[\"20230829173101441\",{\"1\":{\"1138\":1}}],[\"20230829161617787\",{\"1\":{\"1132\":1}}],[\"20230829161523950\",{\"1\":{\"1132\":1}}],[\"20230829160911344\",{\"1\":{\"1132\":1}}],[\"20230829150425075\",{\"1\":{\"1132\":1}}],[\"20230828101512945\",{\"1\":{\"1104\":1}}],[\"20230825162742023\",{\"1\":{\"1084\":1}}],[\"20230817180042910\",{\"1\":{\"924\":1}}],[\"20230817175904439\",{\"1\":{\"924\":1}}],[\"20230609150654612\",{\"1\":{\"955\":1}}],[\"20230406112925347\",{\"1\":{\"1205\":1}}],[\"20230406111436344\",{\"1\":{\"1205\":1}}],[\"20230407081513361\",{\"1\":{\"732\":1}}],[\"20230407081651412\",{\"1\":{\"731\":1}}],[\"20230417164529031\",{\"1\":{\"961\":1}}],[\"20230411163221138\",{\"1\":{\"824\":1}}],[\"20230411110258332\",{\"1\":{\"149\":1}}],[\"20230410161359471\",{\"1\":{\"180\":1}}],[\"20230515153347559\",{\"1\":{\"430\":1}}],[\"20230511212815174\",{\"1\":{\"356\":1}}],[\"20230508090539735\",{\"1\":{\"157\":1}}],[\"20230720100852243\",{\"1\":{\"275\":1}}],[\"20230721150521057\",{\"1\":{\"255\":1}}],[\"20230721150409664\",{\"1\":{\"255\":1}}],[\"20230713145215803\",{\"1\":{\"235\":1}}],[\"20230131200522855\",{\"1\":{\"978\":1}}],[\"20230131194559788\",{\"1\":{\"970\":1,\"973\":1}}],[\"20230130201740973\",{\"1\":{\"970\":1}}],[\"20230130201836688\",{\"1\":{\"969\":1}}],[\"20230130201817297\",{\"1\":{\"969\":1}}],[\"20230130194449819\",{\"1\":{\"957\":1}}],[\"20230130175526837\",{\"1\":{\"403\":1}}],[\"20230130170723120\",{\"1\":{\"394\":1}}],[\"20230130170710651\",{\"1\":{\"394\":1}}],[\"20230111111257900\",{\"1\":{\"1195\":1,\"1196\":1}}],[\"20230118112659456\",{\"1\":{\"954\":1}}],[\"20230116143613352\",{\"1\":{\"119\":1}}],[\"20230116120235895\",{\"1\":{\"114\":1}}],[\"20230116095331886\",{\"1\":{\"105\":1}}],[\"20230129090114444\",{\"1\":{\"944\":1}}],[\"20230128152912943\",{\"1\":{\"936\":1}}],[\"20230106164304853\",{\"1\":{\"720\":1}}],[\"20230106113018528\",{\"1\":{\"229\":1}}],[\"20230106112943799\",{\"1\":{\"227\":1}}],[\"20230106112909592\",{\"1\":{\"226\":1}}],[\"20230106112808292\",{\"1\":{\"222\":1}}],[\"20230106112545426\",{\"1\":{\"222\":1}}],[\"20230108210909312\",{\"1\":{\"701\":1}}],[\"20230105110047347\",{\"1\":{\"225\":1}}],[\"20230105105007290\",{\"1\":{\"222\":1}}],[\"20230105104700331\",{\"1\":{\"222\":1}}],[\"20230104090954251\",{\"1\":{\"220\":1}}],[\"20230104090705907\",{\"1\":{\"220\":1}}],[\"20230104090454019\",{\"1\":{\"220\":1}}],[\"20230104141851986\",{\"1\":{\"219\":1}}],[\"20230104141745391\",{\"1\":{\"219\":1}}],[\"20230103174354990\",{\"1\":{\"217\":1}}],[\"20230103142712492\",{\"1\":{\"216\":1}}],[\"20230103115558878\",{\"1\":{\"215\":1}}],[\"20230103112524017\",{\"1\":{\"214\":1}}],[\"20230103093823203\",{\"1\":{\"213\":1}}],[\"20230103093213233\",{\"1\":{\"213\":1}}],[\"20230220095604889\",{\"1\":{\"1145\":1}}],[\"20230220173210187\",{\"1\":{\"116\":1}}],[\"20230220173311923\",{\"1\":{\"116\":1}}],[\"20230223200636090\",{\"1\":{\"960\":1}}],[\"20230223210058412\",{\"1\":{\"928\":1}}],[\"20230223193847526\",{\"1\":{\"955\":1}}],[\"20230223193627276\",{\"1\":{\"955\":1}}],[\"20230223192132808\",{\"1\":{\"954\":1}}],[\"20230207155457330\",{\"1\":{\"1092\":1}}],[\"20230202152234992\",{\"1\":{\"1100\":1}}],[\"20230202151408305\",{\"1\":{\"1098\":1}}],[\"20230202172514996\",{\"1\":{\"1085\":1}}],[\"20230202171744609\",{\"1\":{\"1084\":1}}],[\"20230202170604997\",{\"1\":{\"1084\":1}}],[\"20230202170140154\",{\"1\":{\"1084\":1}}],[\"20230202165526995\",{\"1\":{\"1083\":1}}],[\"20230202164950511\",{\"1\":{\"1082\":1}}],[\"20230202144151882\",{\"1\":{\"426\":1}}],[\"20230209145801368\",{\"1\":{\"540\":1}}],[\"20230209171150658\",{\"1\":{\"141\":1}}],[\"20230206113655861\",{\"1\":{\"474\":1}}],[\"20230206095706735\",{\"1\":{\"469\":1}}],[\"20230203114947028\",{\"1\":{\"456\":1}}],[\"20230203113313156\",{\"1\":{\"456\":1}}],[\"20230201142123219\",{\"1\":{\"979\":1}}],[\"20230201115210560\",{\"1\":{\"409\":1}}],[\"20230201113632415\",{\"1\":{\"408\":1}}],[\"20230201102415068\",{\"1\":{\"405\":1}}],[\"20230217174206288\",{\"1\":{\"1146\":1}}],[\"20230217174125606\",{\"1\":{\"1146\":1}}],[\"20230217174121261\",{\"1\":{\"1146\":1}}],[\"20230217173529919\",{\"1\":{\"1144\":1}}],[\"20230217161620669\",{\"1\":{\"1142\":1}}],[\"20230217160834421\",{\"1\":{\"1141\":1}}],[\"20230217160439567\",{\"1\":{\"1140\":1}}],[\"20230217150416160\",{\"1\":{\"1137\":1}}],[\"20230217150128380\",{\"1\":{\"1137\":1}}],[\"20230217145950266\",{\"1\":{\"1137\":1}}],[\"20230217094430276\",{\"1\":{\"220\":1}}],[\"20230214165452004\",{\"1\":{\"1117\":1}}],[\"20230213172659060\",{\"1\":{\"1110\":1}}],[\"20230215154103543\",{\"1\":{\"948\":1}}],[\"20230215211126819\",{\"1\":{\"219\":1}}],[\"2022年10月10日\",{\"1\":{\"725\":1}}],[\"20220922161951139\",{\"1\":{\"958\":1}}],[\"20220815093843871\",{\"1\":{\"359\":1}}],[\"20220815093129208\",{\"1\":{\"358\":1}}],[\"20220815091532345\",{\"1\":{\"358\":1}}],[\"20220815091520238\",{\"1\":{\"358\":1}}],[\"20220815154235495\",{\"1\":{\"320\":1}}],[\"20220812102622812\",{\"1\":{\"338\":1}}],[\"20220811180218148\",{\"1\":{\"335\":1}}],[\"20220810105255147\",{\"1\":{\"312\":1}}],[\"20220526172640586\",{\"1\":{\"1203\":1}}],[\"20220526171556679\",{\"1\":{\"1202\":1}}],[\"20220526163624301\",{\"1\":{\"1202\":1}}],[\"20220526162705623\",{\"1\":{\"1201\":1}}],[\"20220526152352372\",{\"1\":{\"1200\":1}}],[\"20220526151518200\",{\"1\":{\"1198\":1}}],[\"20220526151312030\",{\"1\":{\"1197\":1}}],[\"20220526150144318\",{\"1\":{\"1196\":1}}],[\"20220526145749580\",{\"1\":{\"1195\":1}}],[\"20220526144014440\",{\"1\":{\"1193\":1}}],[\"20220526114956920\",{\"1\":{\"1191\":1}}],[\"20220526113143360\",{\"1\":{\"1188\":1}}],[\"20220526113721503\",{\"1\":{\"1186\":1}}],[\"20220526111920966\",{\"1\":{\"1183\":1}}],[\"20220526111136071\",{\"1\":{\"1183\":1}}],[\"20220523142818860\",{\"1\":{\"286\":1}}],[\"20220523114755302\",{\"1\":{\"286\":1}}],[\"20220523114729631\",{\"1\":{\"286\":1}}],[\"20220523111926242\",{\"1\":{\"284\":1}}],[\"20220520144530133\",{\"1\":{\"263\":1}}],[\"20220520143025801\",{\"1\":{\"262\":1}}],[\"20220519163541234\",{\"1\":{\"247\":1}}],[\"20220519162445492\",{\"1\":{\"245\":1}}],[\"20220519161754944\",{\"1\":{\"244\":1}}],[\"20220516173955741\",{\"1\":{\"228\":1}}],[\"20220516161720378\",{\"1\":{\"221\":1}}],[\"20220516155810313\",{\"1\":{\"220\":1}}],[\"20220516155240706\",{\"1\":{\"220\":1}}],[\"20220513175504026\",{\"1\":{\"204\":1}}],[\"20220513112333234\",{\"1\":{\"204\":1}}],[\"20220512174948330\",{\"1\":{\"202\":1}}],[\"20220512174407319\",{\"1\":{\"202\":1}}],[\"20220512160152575\",{\"1\":{\"192\":1}}],[\"20220512154214534\",{\"1\":{\"191\":1}}],[\"20220512151118861\",{\"1\":{\"190\":1}}],[\"20220512150057177\",{\"1\":{\"188\":1}}],[\"20220512104553268\",{\"1\":{\"178\":1}}],[\"20220512101248071\",{\"1\":{\"176\":1}}],[\"20220512095229401\",{\"1\":{\"174\":1}}],[\"20220512094324425\",{\"1\":{\"173\":1}}],[\"20220512093032240\",{\"1\":{\"172\":1}}],[\"20220511112342177\",{\"1\":{\"171\":1}}],[\"20221103152321797\",{\"1\":{\"1121\":1}}],[\"20221103150836330\",{\"1\":{\"1121\":1}}],[\"20221103150745249\",{\"1\":{\"1121\":1}}],[\"20221101094851766\",{\"1\":{\"937\":1}}],[\"20221025113059119\",{\"1\":{\"933\":1}}],[\"20221025112108481\",{\"1\":{\"932\":1}}],[\"20221025111757163\",{\"1\":{\"931\":1}}],[\"20221025111805455\",{\"1\":{\"931\":1}}],[\"20221025111147963\",{\"1\":{\"930\":1}}],[\"20221025111136554\",{\"1\":{\"930\":1}}],[\"20221025114142799\",{\"1\":{\"925\":1}}],[\"20221025101040480\",{\"1\":{\"925\":1}}],[\"20221024163122140\",{\"1\":{\"923\":1}}],[\"20221024101640808\",{\"1\":{\"918\":1}}],[\"20221024101228387\",{\"1\":{\"917\":1}}],[\"20221024174329344\",{\"1\":{\"134\":1}}],[\"20221024095115934\",{\"1\":{\"914\":1}}],[\"20221024094028570\",{\"1\":{\"913\":1}}],[\"20221022112026823\",{\"1\":{\"909\":1}}],[\"20221022100647203\",{\"1\":{\"905\":1}}],[\"20221021172051148\",{\"1\":{\"896\":1}}],[\"20221021164014788\",{\"1\":{\"895\":1}}],[\"20221021152154651\",{\"1\":{\"886\":1}}],[\"20221021152055559\",{\"1\":{\"885\":1}}],[\"20221021110859791\",{\"1\":{\"881\":1}}],[\"20221021100731019\",{\"1\":{\"878\":1}}],[\"20221021100134163\",{\"1\":{\"877\":1}}],[\"20221020155255443\",{\"1\":{\"867\":1}}],[\"20221020151428459\",{\"1\":{\"865\":1}}],[\"20221020145930843\",{\"1\":{\"863\":1}}],[\"20221020145617634\",{\"1\":{\"862\":1}}],[\"20221020145322378\",{\"1\":{\"862\":1}}],[\"20221020144401249\",{\"1\":{\"861\":1}}],[\"20221020110451908\",{\"1\":{\"853\":1}}],[\"20221020101103507\",{\"1\":{\"852\":1}}],[\"20221020100918897\",{\"1\":{\"852\":1}}],[\"20221019163830087\",{\"1\":{\"849\":1}}],[\"20221019163422301\",{\"1\":{\"848\":1}}],[\"20221019150652986\",{\"1\":{\"840\":1}}],[\"20221019111047094\",{\"1\":{\"831\":1}}],[\"20221019102440447\",{\"1\":{\"827\":1}}],[\"20221019100623466\",{\"1\":{\"825\":1}}],[\"20221018144054272\",{\"1\":{\"824\":1}}],[\"20221018142931216\",{\"1\":{\"823\":1}}],[\"20221018112318534\",{\"1\":{\"820\":1}}],[\"20221018112240762\",{\"1\":{\"820\":1}}],[\"20221018110820109\",{\"1\":{\"820\":1}}],[\"20221018110423686\",{\"1\":{\"819\":1}}],[\"20221018102410834\",{\"1\":{\"817\":1}}],[\"20221017171413720\",{\"1\":{\"814\":1}}],[\"20221017163612958\",{\"1\":{\"813\":1}}],[\"20221017163038301\",{\"1\":{\"807\":1}}],[\"20221017164408121\",{\"1\":{\"808\":1}}],[\"20221017155025638\",{\"1\":{\"806\":1}}],[\"20221017152102253\",{\"1\":{\"804\":1}}],[\"20221017151839319\",{\"1\":{\"802\":1}}],[\"20221017100403893\",{\"1\":{\"796\":1}}],[\"20221017105932198\",{\"1\":{\"790\":1}}],[\"20221017111652469\",{\"1\":{\"795\":1}}],[\"20221017111016747\",{\"1\":{\"790\":1}}],[\"20221015114923623\",{\"1\":{\"794\":1}}],[\"20221015114253217\",{\"1\":{\"794\":1}}],[\"20221015113156025\",{\"1\":{\"794\":1}}],[\"20221015112203128\",{\"1\":{\"792\":1}}],[\"20221015101510011\",{\"1\":{\"788\":1}}],[\"20221015100652985\",{\"1\":{\"786\":1}}],[\"20221015095336438\",{\"1\":{\"781\":1}}],[\"20221014163430331\",{\"1\":{\"767\":1}}],[\"20221014115608435\",{\"1\":{\"748\":1}}],[\"20221014113421323\",{\"1\":{\"747\":1}}],[\"20221014102227298\",{\"1\":{\"744\":1}}],[\"20221013172005780\",{\"1\":{\"739\":1}}],[\"20221013152427336\",{\"1\":{\"735\":1}}],[\"20221013151301923\",{\"1\":{\"734\":1}}],[\"20221013145230940\",{\"1\":{\"732\":1}}],[\"20221013143557858\",{\"1\":{\"730\":1}}],[\"20221013143304118\",{\"1\":{\"730\":1}}],[\"20221013143119029\",{\"1\":{\"730\":1}}],[\"20221013142833360\",{\"1\":{\"730\":1}}],[\"20221013142443901\",{\"1\":{\"730\":1}}],[\"20221031111018844\",{\"1\":{\"447\":1}}],[\"20221205144500325\",{\"1\":{\"594\":1}}],[\"20221205094423367\",{\"1\":{\"143\":1}}],[\"20221226112408097\",{\"1\":{\"212\":1}}],[\"2022\",{\"1\":{\"127\":2,\"460\":1,\"465\":1,\"472\":1,\"474\":1,\"478\":1,\"725\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":10,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":2,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2,\"942\":1}}],[\"2020\",{\"1\":{\"80\":1}}],[\"250m\",{\"1\":{\"925\":1}}],[\"25之间\",{\"1\":{\"924\":2}}],[\"256\",{\"1\":{\"263\":2,\"269\":1,\"271\":4}}],[\"256g内存\",{\"1\":{\"126\":1}}],[\"25\",{\"1\":{\"158\":1,\"161\":2,\"246\":1,\"729\":1,\"738\":1,\"740\":1,\"741\":1,\"920\":1,\"924\":2,\"1001\":2,\"1028\":1,\"1039\":2}}],[\"255\",{\"1\":{\"71\":1,\"157\":1,\"158\":2,\"161\":2,\"169\":1,\"171\":1,\"180\":4,\"233\":1,\"240\":3,\"261\":2,\"263\":4,\"275\":5,\"792\":1,\"794\":1}}],[\"253\",{\"1\":{\"66\":1}}],[\"2\",{\"0\":{\"86\":1,\"91\":1,\"96\":1,\"101\":1,\"1055\":1,\"1059\":1,\"1060\":1,\"1065\":1,\"1070\":1,\"1163\":1,\"1167\":1,\"1168\":1,\"1173\":1,\"1178\":1},\"1\":{\"9\":1,\"34\":2,\"48\":14,\"64\":1,\"113\":1,\"115\":2,\"116\":1,\"124\":2,\"125\":2,\"127\":6,\"131\":1,\"132\":1,\"134\":1,\"139\":3,\"143\":2,\"153\":7,\"158\":1,\"161\":1,\"164\":2,\"168\":3,\"171\":1,\"180\":2,\"187\":1,\"192\":1,\"201\":1,\"204\":2,\"207\":2,\"209\":4,\"222\":1,\"225\":1,\"226\":1,\"229\":1,\"230\":2,\"234\":1,\"240\":2,\"244\":4,\"247\":1,\"256\":1,\"259\":2,\"261\":1,\"262\":1,\"263\":4,\"264\":1,\"271\":2,\"272\":1,\"275\":2,\"278\":5,\"281\":7,\"283\":1,\"285\":1,\"286\":1,\"316\":1,\"328\":2,\"341\":1,\"342\":3,\"345\":5,\"348\":1,\"350\":1,\"359\":2,\"389\":1,\"394\":1,\"419\":1,\"423\":1,\"424\":1,\"425\":1,\"441\":2,\"442\":9,\"444\":2,\"465\":1,\"470\":1,\"471\":1,\"479\":1,\"502\":1,\"568\":1,\"588\":1,\"606\":1,\"608\":1,\"655\":2,\"699\":1,\"703\":1,\"704\":1,\"707\":2,\"710\":2,\"715\":1,\"717\":1,\"719\":1,\"720\":2,\"729\":3,\"730\":1,\"737\":4,\"738\":4,\"739\":4,\"754\":1,\"788\":3,\"794\":2,\"799\":1,\"832\":2,\"833\":4,\"840\":2,\"850\":2,\"851\":1,\"856\":1,\"857\":1,\"869\":1,\"872\":2,\"873\":1,\"880\":4,\"884\":4,\"903\":1,\"936\":1,\"937\":1,\"941\":1,\"944\":2,\"950\":2,\"952\":3,\"953\":1,\"954\":1,\"956\":3,\"969\":2,\"978\":12,\"1001\":1,\"1008\":2,\"1009\":2,\"1016\":5,\"1020\":2,\"1033\":1,\"1053\":1,\"1091\":1,\"1093\":2,\"1109\":1,\"1113\":2,\"1131\":1,\"1132\":2,\"1141\":1,\"1147\":1,\"1149\":1,\"1159\":4,\"1195\":1,\"1201\":4,\"1204\":3}}],[\"1先切换到dev分支\",{\"1\":{\"1204\":1}}],[\"1tjqzza7gcz7rukc2d58n0gbliw2yq\",{\"1\":{\"1132\":1}}],[\"1参数\",{\"1\":{\"1050\":1}}],[\"1张票\",{\"1\":{\"851\":1}}],[\"1张\",{\"1\":{\"851\":1}}],[\"1个对象的内存布局\",{\"0\":{\"861\":1}}],[\"1个独有的方法\",{\"1\":{\"808\":1,\"814\":1}}],[\"1个字节\",{\"1\":{\"799\":1}}],[\"1个字节的低7位\",{\"1\":{\"799\":1}}],[\"1b\",{\"1\":{\"782\":1}}],[\"1时\",{\"1\":{\"358\":1}}],[\"1<=x<3时\",{\"1\":{\"358\":1}}],[\"1变成0\",{\"1\":{\"348\":1}}],[\"1进行操作的\",{\"1\":{\"348\":1}}],[\"1结果是int类型\",{\"1\":{\"345\":1}}],[\"1完全是两个数\",{\"1\":{\"342\":1}}],[\"1f\",{\"1\":{\"336\":2}}],[\"1之前默认的存储引擎\",{\"1\":{\"221\":1}}],[\"1之前的上一个版本是1\",{\"1\":{\"115\":1}}],[\"1之后\",{\"1\":{\"221\":1}}],[\"1之后默认的存储引擎\",{\"1\":{\"221\":1}}],[\"1次\",{\"1\":{\"206\":1}}],[\"1w\",{\"1\":{\"954\":1}}],[\"1w次\",{\"1\":{\"205\":1}}],[\"1w台电脑来提供服务\",{\"1\":{\"126\":1}}],[\"1=1是恒等的\",{\"1\":{\"204\":1}}],[\"1=1\",{\"1\":{\"204\":5}}],[\"1表示已付款\",{\"1\":{\"171\":1}}],[\"1字节\",{\"1\":{\"153\":1,\"326\":1,\"799\":1}}],[\"1的左边\",{\"1\":{\"148\":1}}],[\"1的版本\",{\"1\":{\"115\":1}}],[\"168\",{\"1\":{\"1111\":2,\"1112\":3,\"1157\":2}}],[\"166\",{\"1\":{\"1028\":1}}],[\"162\",{\"1\":{\"1028\":1}}],[\"161\",{\"1\":{\"1028\":1}}],[\"169\",{\"1\":{\"1028\":3}}],[\"160\",{\"1\":{\"1028\":1,\"1038\":1}}],[\"163\",{\"1\":{\"1028\":1}}],[\"16=\",{\"1\":{\"978\":2}}],[\"16io01\",{\"1\":{\"788\":1,\"789\":5,\"794\":2}}],[\"16bit\",{\"1\":{\"326\":1}}],[\"16位全部用来存储数值\",{\"1\":{\"324\":1}}],[\"16位\",{\"1\":{\"322\":1}}],[\"16g\",{\"1\":{\"263\":1}}],[\"16\",{\"0\":{\"885\":1},\"1\":{\"127\":1,\"222\":1,\"225\":1,\"229\":1,\"233\":2,\"268\":1,\"348\":1,\"737\":2,\"738\":3,\"764\":1,\"799\":1,\"807\":1,\"812\":1,\"813\":1,\"844\":1,\"850\":1,\"870\":2,\"871\":1,\"872\":2,\"893\":1,\"894\":2,\"895\":4,\"978\":9,\"984\":1,\"988\":1,\"1001\":3,\"1006\":2,\"1008\":9,\"1013\":8,\"1016\":2,\"1017\":1,\"1022\":1,\"1028\":1,\"1117\":1,\"1131\":3,\"1132\":1,\"1142\":1}}],[\"141d54\",{\"1\":{\"1132\":2}}],[\"140\",{\"1\":{\"1046\":1}}],[\"14string\",{\"1\":{\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2}}],[\"14\",{\"0\":{\"778\":1},\"1\":{\"233\":1,\"350\":1,\"386\":1,\"741\":1,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"801\":1,\"815\":1,\"817\":2,\"818\":2,\"824\":1,\"838\":2,\"839\":1,\"840\":1,\"860\":1,\"871\":1,\"920\":1,\"921\":1,\"922\":1,\"1117\":1,\"1132\":5}}],[\"145646546132416556655\",{\"1\":{\"125\":1}}],[\"147\",{\"1\":{\"72\":1}}],[\"1s后对页面进行刷新\",{\"1\":{\"121\":1}}],[\"11tong\",{\"1\":{\"1132\":2}}],[\"113\",{\"1\":{\"1132\":7}}],[\"116\",{\"1\":{\"1132\":2,\"1138\":4}}],[\"1148487\",{\"1\":{\"1120\":1}}],[\"119\",{\"1\":{\"995\":1}}],[\"1110xxxx\",{\"1\":{\"799\":1}}],[\"11111\",{\"1\":{\"904\":2}}],[\"11111111111\",{\"1\":{\"341\":1}}],[\"1111\",{\"1\":{\"321\":1,\"348\":3,\"700\":7,\"799\":4,\"850\":1,\"978\":11,\"1001\":1,\"1008\":4}}],[\"111\",{\"1\":{\"307\":1,\"655\":1}}],[\"1170\",{\"1\":{\"233\":1}}],[\"1170个数据\",{\"1\":{\"233\":1}}],[\"110xxxxx\",{\"1\":{\"799\":1}}],[\"1101\",{\"1\":{\"348\":1,\"1008\":5}}],[\"11001\",{\"1\":{\"1001\":3}}],[\"1100\",{\"1\":{\"348\":1,\"978\":3}}],[\"110\",{\"1\":{\"158\":1,\"995\":1,\"1112\":2,\"1120\":4,\"1140\":4,\"1150\":4}}],[\"11\",{\"0\":{\"727\":1},\"1\":{\"121\":2,\"161\":2,\"261\":2,\"299\":1,\"324\":1,\"460\":1,\"465\":1,\"471\":1,\"472\":2,\"474\":2,\"478\":2,\"729\":1,\"730\":1,\"789\":3,\"790\":1,\"794\":2,\"795\":1,\"819\":1,\"820\":1,\"821\":1,\"825\":2,\"832\":2,\"833\":4,\"844\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"881\":2,\"884\":2,\"912\":1,\"918\":1,\"919\":1,\"922\":2,\"942\":1,\"1132\":37}}],[\"1默认进行持久连接\",{\"1\":{\"116\":1}}],[\"1默认支持长连接\",{\"1\":{\"115\":1}}],[\"122\",{\"1\":{\"995\":1}}],[\"120\",{\"1\":{\"342\":1,\"459\":1,\"995\":1}}],[\"12306\",{\"1\":{\"902\":2}}],[\"123457这些信息即可\",{\"1\":{\"1201\":1}}],[\"12345\",{\"1\":{\"995\":1}}],[\"123456\",{\"1\":{\"147\":1,\"192\":1,\"234\":2,\"244\":1,\"354\":1,\"924\":1,\"1094\":1,\"1095\":1,\"1096\":1}}],[\"1234\",{\"1\":{\"881\":1}}],[\"123\",{\"1\":{\"703\":2,\"705\":1,\"924\":2}}],[\"123l\",{\"1\":{\"336\":2}}],[\"123username\",{\"1\":{\"315\":1}}],[\"128\",{\"1\":{\"263\":4,\"271\":4,\"326\":1,\"342\":1,\"706\":2,\"707\":2,\"709\":1,\"1132\":1}}],[\"12<\",{\"1\":{\"244\":1,\"262\":1}}],[\"12\",{\"0\":{\"745\":1},\"1\":{\"116\":1,\"161\":1,\"263\":2,\"265\":1,\"269\":1,\"300\":1,\"350\":1,\"471\":1,\"817\":2,\"1006\":1,\"1078\":1,\"1105\":1,\"1121\":1,\"1132\":26}}],[\"127\",{\"1\":{\"113\":1,\"326\":1,\"706\":1,\"707\":2,\"709\":1,\"892\":1,\"894\":2,\"895\":2,\"902\":1,\"903\":1,\"904\":1,\"905\":1,\"1132\":20}}],[\"17863013913\",{\"1\":{\"1132\":1}}],[\"17889948070\",{\"1\":{\"1132\":1}}],[\"175\",{\"1\":{\"1040\":5}}],[\"171\",{\"1\":{\"1028\":1,\"1132\":15}}],[\"177\",{\"1\":{\"1028\":1}}],[\"176\",{\"1\":{\"1028\":1}}],[\"172\",{\"1\":{\"1028\":2}}],[\"17332855555\",{\"1\":{\"1132\":1}}],[\"17332885067\",{\"1\":{\"1132\":1}}],[\"17353291393\",{\"1\":{\"1132\":1}}],[\"17302213266\",{\"1\":{\"1132\":1}}],[\"173\",{\"1\":{\"1028\":3}}],[\"170\",{\"1\":{\"1028\":2,\"1046\":1}}],[\"17io02\",{\"1\":{\"790\":1,\"794\":1,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2}}],[\"17\",{\"0\":{\"909\":1},\"1\":{\"110\":2,\"739\":2,\"740\":1,\"741\":1,\"769\":1,\"771\":1,\"776\":2,\"790\":1,\"794\":1,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":2,\"812\":1,\"813\":1,\"814\":6,\"866\":1,\"867\":10,\"902\":2,\"903\":2,\"924\":1,\"1026\":2,\"1028\":3,\"1085\":2,\"1113\":1,\"1132\":3,\"1142\":2,\"1150\":1}}],[\"18666778899\",{\"1\":{\"1152\":1}}],[\"18571475083\",{\"1\":{\"1132\":1}}],[\"189649576691\",{\"1\":{\"1132\":1}}],[\"189\",{\"1\":{\"1132\":6}}],[\"18338708454\",{\"1\":{\"1132\":1}}],[\"183\",{\"1\":{\"1028\":1}}],[\"18193408088\",{\"1\":{\"1132\":1}}],[\"181\",{\"1\":{\"1028\":1,\"1132\":2}}],[\"18839219012\",{\"1\":{\"1132\":1}}],[\"188\",{\"1\":{\"1028\":3}}],[\"182\",{\"1\":{\"1028\":1}}],[\"18进入我们的hashmap\",{\"1\":{\"1016\":1}}],[\"18<=age<=25\",{\"1\":{\"924\":1}}],[\"18io03\",{\"1\":{\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":2}}],[\"18岁的java老师对象\",{\"1\":{\"463\":1,\"465\":1}}],[\"18岁的人\",{\"1\":{\"159\":1}}],[\"180可以修改为自己的ip\",{\"1\":{\"1111\":1}}],[\"180\",{\"1\":{\"162\":4,\"1038\":1,\"1041\":2,\"1111\":1,\"1112\":3,\"1132\":1}}],[\"18\",{\"0\":{\"924\":1},\"1\":{\"110\":1,\"121\":2,\"159\":1,\"220\":1,\"253\":2,\"261\":1,\"262\":1,\"465\":1,\"468\":1,\"471\":1,\"491\":1,\"498\":2,\"573\":1,\"657\":1,\"684\":2,\"738\":1,\"795\":1,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"924\":1,\"939\":2,\"943\":1,\"944\":3,\"1009\":2,\"1028\":5,\"1046\":1,\"1122\":1,\"1132\":2}}],[\"1938\",{\"1\":{\"1132\":1,\"1138\":1}}],[\"19149355\",{\"1\":{\"1132\":1}}],[\"191\",{\"1\":{\"1028\":1}}],[\"192\",{\"1\":{\"1028\":1,\"1111\":2,\"1112\":3,\"1157\":1}}],[\"190\",{\"1\":{\"1028\":1,\"1040\":6,\"1043\":1}}],[\"1970\",{\"1\":{\"724\":1,\"775\":1}}],[\"1970年01月01日00时00分00秒\",{\"1\":{\"722\":1}}],[\"198\",{\"1\":{\"147\":2}}],[\"19\",{\"0\":{\"925\":1},\"1\":{\"110\":1,\"261\":1,\"825\":2,\"832\":1,\"833\":7,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":1,\"978\":3,\"1132\":7}}],[\"19thread01\",{\"1\":{\"825\":2,\"832\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"844\":1,\"850\":1}}],[\"19th\",{\"1\":{\"59\":1}}],[\"13428689333\",{\"1\":{\"1132\":3}}],[\"131\",{\"1\":{\"1132\":5}}],[\"13有以下案例\",{\"1\":{\"348\":1}}],[\"130\",{\"1\":{\"341\":1,\"1132\":1}}],[\"13条\",{\"1\":{\"163\":1}}],[\"13\",{\"0\":{\"765\":1},\"1\":{\"161\":1,\"171\":1,\"301\":1,\"350\":1,\"442\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":1,\"788\":1,\"789\":1,\"1105\":1,\"1121\":1,\"1132\":6,\"1142\":1}}],[\"13593956279\",{\"1\":{\"1132\":1}}],[\"135\",{\"1\":{\"72\":1}}],[\"132\",{\"1\":{\"71\":1}}],[\"138\",{\"1\":{\"66\":1}}],[\"109\",{\"1\":{\"1104\":2,\"1110\":2,\"1112\":2}}],[\"101\",{\"1\":{\"1104\":4,\"1110\":4,\"1111\":3,\"1112\":3,\"1132\":5,\"1134\":1}}],[\"1010\",{\"1\":{\"1008\":2}}],[\"10100这个数就非常大\",{\"1\":{\"323\":1}}],[\"1011\",{\"1\":{\"978\":3}}],[\"10568\",{\"1\":{\"978\":2}}],[\"1053876\",{\"1\":{\"978\":1}}],[\"1049823664553329306l\",{\"1\":{\"904\":1}}],[\"10xxxxxx\",{\"1\":{\"799\":3}}],[\"107\",{\"1\":{\"324\":1}}],[\"10ms\",{\"1\":{\"220\":1}}],[\"10列\",{\"1\":{\"172\":1}}],[\"10条\",{\"1\":{\"163\":1}}],[\"10086\",{\"1\":{\"1008\":1}}],[\"1001\",{\"1\":{\"978\":2}}],[\"100100\",{\"1\":{\"323\":1}}],[\"100分之间\",{\"1\":{\"764\":2}}],[\"100之间\",{\"1\":{\"517\":2}}],[\"100之间偶数和\",{\"1\":{\"362\":1}}],[\"100w条数据\",{\"1\":{\"220\":1}}],[\"100w\",{\"1\":{\"204\":1,\"220\":1}}],[\"10001\",{\"1\":{\"478\":1}}],[\"1000000\",{\"1\":{\"741\":1,\"978\":1}}],[\"10000000000000000001f\",{\"1\":{\"336\":1}}],[\"10000\",{\"1\":{\"205\":1,\"206\":1,\"209\":2,\"342\":1,\"588\":1,\"871\":1,\"978\":2,\"1001\":2}}],[\"1000\",{\"1\":{\"153\":2,\"208\":1,\"471\":2,\"588\":1,\"700\":1,\"817\":1,\"818\":1,\"819\":2,\"820\":2,\"839\":2,\"842\":2,\"844\":2,\"859\":1,\"860\":1,\"871\":1,\"872\":1,\"978\":2}}],[\"100\",{\"1\":{\"147\":2,\"153\":3,\"168\":1,\"222\":1,\"225\":1,\"227\":1,\"229\":1,\"246\":1,\"323\":1,\"331\":2,\"342\":1,\"354\":1,\"383\":2,\"468\":1,\"545\":1,\"564\":1,\"588\":1,\"655\":1,\"729\":1,\"738\":5,\"764\":1,\"789\":1,\"851\":5,\"855\":2,\"856\":3,\"857\":3,\"864\":2,\"872\":4,\"881\":1,\"978\":9,\"997\":1}}],[\"1024\",{\"1\":{\"127\":2,\"233\":1,\"263\":1,\"794\":2,\"795\":1,\"812\":1,\"813\":1,\"814\":1,\"892\":1,\"893\":1,\"902\":1,\"903\":1,\"905\":3,\"923\":1,\"1113\":1,\"1116\":1,\"1120\":1,\"1124\":1,\"1128\":1}}],[\"10w\",{\"1\":{\"126\":1}}],[\"10\",{\"0\":{\"700\":1},\"1\":{\"71\":3,\"127\":2,\"153\":4,\"161\":1,\"162\":1,\"164\":1,\"220\":1,\"232\":2,\"244\":1,\"256\":3,\"263\":2,\"298\":1,\"323\":2,\"324\":2,\"331\":1,\"334\":1,\"336\":5,\"344\":6,\"346\":1,\"350\":1,\"377\":1,\"383\":1,\"389\":3,\"441\":3,\"465\":1,\"468\":1,\"471\":2,\"487\":1,\"491\":1,\"539\":1,\"545\":1,\"573\":1,\"588\":1,\"619\":1,\"725\":5,\"729\":2,\"730\":1,\"737\":4,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"769\":1,\"771\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":7,\"790\":1,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":2,\"812\":1,\"813\":1,\"814\":2,\"817\":4,\"818\":2,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":2,\"832\":1,\"833\":8,\"838\":7,\"839\":2,\"840\":2,\"841\":3,\"842\":2,\"844\":2,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":2,\"860\":2,\"864\":1,\"866\":1,\"867\":11,\"870\":2,\"871\":1,\"872\":2,\"880\":7,\"881\":2,\"884\":2,\"892\":2,\"893\":1,\"894\":2,\"895\":4,\"902\":2,\"903\":2,\"904\":3,\"905\":4,\"912\":1,\"916\":3,\"918\":5,\"919\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":2,\"924\":2,\"944\":2,\"948\":1,\"953\":1,\"954\":1,\"956\":1,\"963\":1,\"978\":1,\"995\":1,\"997\":1,\"1104\":1,\"1110\":1,\"1112\":2,\"1118\":1,\"1120\":1,\"1132\":9,\"1138\":1,\"1140\":1,\"1150\":1,\"1167\":1}}],[\"15543400379\",{\"1\":{\"1132\":1}}],[\"159\",{\"1\":{\"1132\":2}}],[\"15374579055\",{\"1\":{\"1132\":1}}],[\"15364314469\",{\"1\":{\"1132\":1}}],[\"15310888954\",{\"1\":{\"1132\":1}}],[\"15605215755\",{\"1\":{\"1132\":1}}],[\"1587\",{\"1\":{\"1112\":1,\"1120\":1,\"1140\":1,\"1150\":1}}],[\"1518\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":1}}],[\"15file\",{\"1\":{\"769\":1,\"771\":1,\"776\":2,\"777\":1}}],[\"15exception\",{\"1\":{\"764\":1}}],[\"15213480588\",{\"1\":{\"1132\":1}}],[\"152\",{\"1\":{\"719\":2}}],[\"15k范围内\",{\"1\":{\"517\":2}}],[\"1540e19d\",{\"1\":{\"400\":1}}],[\"150\",{\"1\":{\"72\":1}}],[\"15\",{\"0\":{\"825\":1},\"1\":{\"66\":1,\"127\":1,\"350\":1,\"478\":1,\"737\":1,\"777\":1,\"788\":1,\"789\":6,\"794\":2,\"806\":1,\"841\":1,\"842\":1,\"864\":1,\"866\":1,\"867\":2,\"881\":1,\"884\":3,\"892\":2,\"923\":2,\"997\":1,\"1028\":1,\"1118\":1,\"1122\":1,\"1123\":1,\"1132\":5,\"1142\":1,\"1157\":2}}],[\"1\",{\"0\":{\"1054\":1,\"1162\":1},\"1\":{\"9\":1,\"10\":1,\"11\":1,\"34\":2,\"48\":12,\"57\":1,\"64\":1,\"75\":1,\"80\":2,\"113\":2,\"115\":23,\"116\":4,\"120\":2,\"121\":3,\"124\":6,\"125\":2,\"127\":14,\"131\":1,\"132\":1,\"134\":1,\"136\":5,\"137\":4,\"138\":1,\"139\":12,\"147\":4,\"149\":1,\"153\":1,\"158\":2,\"161\":1,\"162\":5,\"167\":1,\"168\":3,\"171\":2,\"180\":2,\"184\":1,\"187\":2,\"192\":2,\"194\":1,\"201\":1,\"204\":3,\"207\":4,\"209\":7,\"212\":1,\"220\":1,\"222\":1,\"225\":1,\"226\":1,\"227\":1,\"229\":1,\"230\":1,\"233\":1,\"234\":5,\"235\":1,\"238\":1,\"239\":1,\"240\":3,\"244\":6,\"247\":1,\"250\":1,\"256\":2,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":2,\"267\":1,\"271\":2,\"272\":1,\"275\":2,\"278\":4,\"281\":6,\"283\":1,\"285\":7,\"286\":1,\"287\":3,\"316\":1,\"323\":3,\"326\":4,\"328\":3,\"334\":1,\"336\":2,\"340\":3,\"341\":1,\"342\":6,\"345\":2,\"350\":1,\"358\":2,\"367\":1,\"377\":1,\"393\":1,\"394\":2,\"415\":1,\"419\":3,\"423\":1,\"438\":8,\"440\":6,\"441\":19,\"442\":19,\"444\":2,\"465\":1,\"470\":1,\"471\":1,\"479\":1,\"487\":1,\"502\":1,\"568\":1,\"588\":1,\"606\":1,\"608\":1,\"655\":6,\"675\":1,\"699\":1,\"700\":1,\"704\":1,\"705\":1,\"706\":4,\"707\":4,\"713\":1,\"715\":1,\"717\":1,\"719\":1,\"720\":1,\"724\":4,\"729\":2,\"730\":1,\"737\":17,\"738\":9,\"739\":9,\"754\":1,\"788\":3,\"792\":2,\"794\":8,\"799\":2,\"806\":1,\"808\":1,\"810\":2,\"817\":1,\"832\":3,\"833\":14,\"838\":5,\"839\":2,\"840\":2,\"850\":2,\"851\":7,\"860\":1,\"867\":2,\"869\":1,\"872\":2,\"873\":1,\"880\":3,\"881\":1,\"884\":2,\"892\":1,\"894\":2,\"895\":2,\"902\":1,\"903\":1,\"904\":1,\"905\":3,\"923\":1,\"936\":1,\"937\":1,\"941\":2,\"943\":1,\"944\":3,\"950\":2,\"952\":2,\"954\":1,\"956\":3,\"958\":3,\"969\":2,\"978\":20,\"995\":1,\"997\":1,\"1001\":3,\"1003\":1,\"1005\":3,\"1008\":2,\"1009\":2,\"1016\":7,\"1020\":2,\"1026\":2,\"1033\":1,\"1034\":1,\"1039\":1,\"1040\":1,\"1053\":1,\"1079\":1,\"1083\":2,\"1086\":1,\"1091\":1,\"1093\":3,\"1096\":1,\"1097\":2,\"1104\":2,\"1105\":2,\"1109\":1,\"1110\":2,\"1111\":6,\"1112\":3,\"1113\":4,\"1116\":2,\"1118\":2,\"1120\":5,\"1121\":2,\"1122\":2,\"1123\":2,\"1124\":1,\"1126\":1,\"1128\":1,\"1130\":1,\"1131\":1,\"1132\":13,\"1138\":4,\"1140\":4,\"1141\":2,\"1142\":2,\"1147\":1,\"1149\":1,\"1150\":6,\"1159\":2,\"1195\":2,\"1201\":4,\"1203\":1,\"1204\":3}}],[\"项目\",{\"0\":{\"1132\":1},\"1\":{\"9\":6}}],[\"斜体\",{\"1\":{\"8\":1}}],[\"粗体\",{\"1\":{\"8\":1}}],[\"标志位的数据包\",{\"1\":{\"907\":1}}],[\"标志位\",{\"1\":{\"906\":1}}],[\"标点等类似的符号\",{\"1\":{\"324\":1}}],[\"标签名可以看成是一个变量名\",{\"1\":{\"376\":1}}],[\"标签是用来标注某个层次的循环的\",{\"1\":{\"376\":1}}],[\"标签的collection属性使用注解名\",{\"1\":{\"272\":1}}],[\"标签的id\",{\"1\":{\"234\":1}}],[\"标签我们一般用来提取\",{\"1\":{\"267\":1}}],[\"标签需要写resultmap\",{\"1\":{\"261\":1}}],[\"标签\",{\"1\":{\"235\":1,\"376\":1}}],[\"标签为\",{\"1\":{\"80\":1}}],[\"标识我可以怎么拿到这个数据\",{\"1\":{\"955\":1}}],[\"标识符\",{\"1\":{\"941\":1}}],[\"标识符字符串尽量只使用英文字母和阿拉伯数字\",{\"1\":{\"316\":1}}],[\"标识符不能是java中的关键字和保留字\",{\"1\":{\"315\":1}}],[\"标识符不能以数字开头\",{\"1\":{\"315\":1}}],[\"标识符的组成必须是\",{\"1\":{\"315\":1}}],[\"标识符的开头必须是\",{\"1\":{\"315\":1}}],[\"标识符可以由任意顺序的大小写的字母\",{\"1\":{\"314\":1}}],[\"标识查询的结果的类型\",{\"1\":{\"257\":1}}],[\"标识\",{\"1\":{\"169\":1}}],[\"标识这是一个普通的文本\",{\"1\":{\"148\":1}}],[\"标准目录结构\",{\"1\":{\"1075\":1}}],[\"标准输出流\",{\"1\":{\"821\":1}}],[\"标准输入流\",{\"1\":{\"821\":1}}],[\"标准输入输出流\",{\"0\":{\"821\":1}}],[\"标准性呢\",{\"1\":{\"595\":1}}],[\"标准语法要指明\",{\"1\":{\"234\":1}}],[\"标准语法中的内容均不受支持\",{\"1\":{\"12\":1}}],[\"标准的utf8\",{\"1\":{\"149\":1}}],[\"标题\",{\"0\":{\"86\":1,\"87\":1,\"91\":1,\"92\":1,\"96\":1,\"97\":1,\"101\":1,\"102\":1,\"1055\":1,\"1056\":1,\"1060\":1,\"1061\":1,\"1065\":1,\"1066\":1,\"1070\":1,\"1071\":1,\"1163\":1,\"1164\":1,\"1168\":1,\"1169\":1,\"1173\":1,\"1174\":1,\"1178\":1,\"1179\":1}}],[\"标题和页面信息\",{\"1\":{\"82\":1}}],[\"标题默认会自动转换为大写\",{\"1\":{\"8\":1}}],[\"标记整理算法\",{\"0\":{\"932\":1}}],[\"标记复制算法\",{\"0\":{\"931\":1}}],[\"标记清除算法\",{\"0\":{\"930\":1}}],[\"标记接口\",{\"1\":{\"696\":1}}],[\"标记\",{\"0\":{\"63\":1},\"1\":{\"658\":1}}],[\"标注水平幻灯片\",{\"1\":{\"5\":1}}],[\"标注幻灯片\",{\"0\":{\"4\":1,\"5\":1}}],[\"你在这个界面输入提交信息\",{\"1\":{\"1201\":1}}],[\"你在写代码的过程\",{\"1\":{\"1053\":1}}],[\"你能做出来吗\",{\"1\":{\"1159\":1}}],[\"你能得出什么结论\",{\"1\":{\"479\":1}}],[\"你是谁\",{\"1\":{\"1137\":2}}],[\"你是谁呀\",{\"1\":{\"1137\":1}}],[\"你们公司用流\",{\"1\":{\"1053\":1}}],[\"你再用\",{\"1\":{\"1053\":1}}],[\"你答了9个\",{\"1\":{\"1020\":1}}],[\"你说使用过\",{\"1\":{\"1020\":1}}],[\"你说了解\",{\"1\":{\"1020\":1}}],[\"你要告诉我你是李雷\",{\"1\":{\"1137\":1}}],[\"你要把自己熟悉的都答出来\",{\"1\":{\"1020\":1}}],[\"你要知道他在考你什么\",{\"1\":{\"1002\":1}}],[\"你知不知道这个api在干啥\",{\"1\":{\"993\":1}}],[\"你知道二维数组怎么对应表格数据吗\",{\"1\":{\"431\":1}}],[\"你一定要知道\",{\"1\":{\"956\":1}}],[\"你走你的\",{\"1\":{\"828\":1}}],[\"你走我不走\",{\"1\":{\"828\":1}}],[\"你好\",{\"1\":{\"728\":1,\"801\":1,\"825\":5,\"908\":5,\"1127\":1}}],[\"你就答一下\",{\"1\":{\"1020\":1}}],[\"你就可以用该方法来做这个事情了\",{\"1\":{\"693\":1}}],[\"你就会发现模拟释放资源一会打印了\",{\"1\":{\"690\":1}}],[\"你就将它作为一个可以定义在类的内部\",{\"1\":{\"625\":1}}],[\"你就把这些列\",{\"1\":{\"231\":1}}],[\"你还似懂非懂\",{\"1\":{\"585\":1}}],[\"你完全可以直接把super关键字\",{\"1\":{\"544\":1}}],[\"你的同事用\",{\"1\":{\"1053\":1}}],[\"你的业务怎样需要\",{\"1\":{\"994\":1}}],[\"你的财产也总是希望被亲近的人继承吧\",{\"1\":{\"537\":1}}],[\"你的任务如下\",{\"1\":{\"201\":1}}],[\"你会很多superclass\",{\"1\":{\"522\":1}}],[\"你可能会疑惑\",{\"1\":{\"406\":1}}],[\"你可以清楚的知道发生了什么\",{\"1\":{\"1205\":1}}],[\"你可以将图片和\",{\"1\":{\"81\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"81\":1}}],[\"你可以标记\",{\"1\":{\"63\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"82\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"45\":1}}],[\"你可以通过向特定幻灯片添加\",{\"1\":{\"17\":1}}],[\"你可以对代码块进行高亮\",{\"1\":{\"34\":1}}],[\"你可以在\",{\"1\":{\"80\":1}}],[\"你可以在相邻的幻灯片上添加\",{\"1\":{\"31\":1}}],[\"你可以在幻灯片中使用\",{\"1\":{\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"51\":1}}],[\"你可以使用\",{\"1\":{\"27\":1,\"34\":1}}],[\"你可以按照顺序包裹一个\",{\"1\":{\"25\":1}}],[\"你直接使用输出语句在控制台输出字符串\",{\"1\":{\"327\":1}}],[\"你\",{\"1\":{\"324\":1,\"782\":1,\"798\":1,\"800\":1}}],[\"你隔离得越严实\",{\"1\":{\"211\":1}}],[\"你想往数据库里面插入大量数据\",{\"1\":{\"204\":1}}],[\"你现在\",{\"1\":{\"168\":1}}],[\"你不确定\",{\"1\":{\"1204\":1}}],[\"你不要去操作\",{\"1\":{\"156\":1}}],[\"你不知道\",{\"1\":{\"147\":1}}],[\"你刚刚让我删某某库\",{\"1\":{\"150\":1}}],[\"你只需要设置你的tomcat监听80端口号即可\",{\"1\":{\"139\":1}}],[\"你给我返回中文繁体\",{\"1\":{\"116\":1}}],[\"你需要使用的时候\",{\"1\":{\"213\":1}}],[\"你需要根据班级id\",{\"1\":{\"120\":1}}],[\"你需要阅读\",{\"1\":{\"53\":1}}],[\"你需要在元素上添加\",{\"1\":{\"19\":1}}],[\"你应该已经明白tostring\",{\"1\":{\"668\":1}}],[\"你应该创建和编写\",{\"1\":{\"51\":1}}],[\"你应该在页面前端设置\",{\"1\":{\"0\":1}}],[\"你也可以使用\",{\"1\":{\"11\":1}}],[\"must\",{\"1\":{\"978\":2}}],[\"multipartconfig标注和httpservletrequest提供的方法可以完成文件部分的获取\",{\"1\":{\"1120\":1}}],[\"multipart\",{\"1\":{\"1104\":1,\"1120\":2,\"1132\":1}}],[\"multipleresultsetsenabled\",{\"1\":{\"246\":1}}],[\"multi\",{\"1\":{\"367\":1}}],[\"mkdir仅能在已经存在的目录下\",{\"1\":{\"771\":1}}],[\"mkdirs创建目录的区别\",{\"1\":{\"771\":1}}],[\"mkdirs\",{\"1\":{\"771\":4}}],[\"mkdir\",{\"1\":{\"771\":4}}],[\"mkv\",{\"1\":{\"116\":1}}],[\"m表示二维数组中一维数组的位置\",{\"1\":{\"438\":2}}],[\"m表示二维数组的长度\",{\"1\":{\"434\":2}}],[\"m必须是一个存在的下标\",{\"1\":{\"437\":1}}],[\"m必须是一个合法的下标\",{\"1\":{\"436\":1}}],[\"myannotation\",{\"1\":{\"924\":4}}],[\"myclassloader\",{\"1\":{\"923\":6}}],[\"mycallable\",{\"1\":{\"881\":2}}],[\"mycomparator\",{\"1\":{\"741\":2}}],[\"mylock3\",{\"1\":{\"867\":7}}],[\"mylock2\",{\"1\":{\"867\":5}}],[\"mylock\",{\"1\":{\"866\":5}}],[\"myrunnable\",{\"1\":{\"850\":5,\"851\":4,\"855\":4,\"856\":4,\"857\":4,\"864\":4}}],[\"mytask\",{\"1\":{\"884\":4}}],[\"mythread4\",{\"1\":{\"833\":3}}],[\"mythread3\",{\"1\":{\"833\":3,\"838\":6}}],[\"mythread2\",{\"1\":{\"833\":5,\"838\":3}}],[\"mythread\",{\"1\":{\"832\":3,\"833\":6}}],[\"mytest2\",{\"1\":{\"771\":1}}],[\"mytest1\",{\"1\":{\"769\":1,\"771\":1}}],[\"myfilefilter\",{\"1\":{\"777\":2}}],[\"myfirstprogram\",{\"1\":{\"316\":1}}],[\"myexception2\",{\"1\":{\"764\":3}}],[\"myexception1\",{\"1\":{\"764\":8}}],[\"mybatisinitializationservlet\",{\"1\":{\"1131\":1}}],[\"mybatis的多表查询\",{\"1\":{\"1134\":1}}],[\"mybatis的基本使用\",{\"1\":{\"1103\":1}}],[\"mybatis的主配置文件里面的settings里面\",{\"1\":{\"283\":1}}],[\"mybatis给我的数据\",{\"1\":{\"287\":1}}],[\"mybatis是怎么存储缓存的\",{\"1\":{\"283\":1}}],[\"mybatis是一种流行的java持久化框架\",{\"1\":{\"234\":1}}],[\"mybatis是一个orm框架\",{\"1\":{\"234\":1}}],[\"mybatis是一个基于java的持久层框架\",{\"1\":{\"234\":1}}],[\"mybatis默认开启了缓存\",{\"1\":{\"283\":1}}],[\"mybatiscodehelperpro\",{\"0\":{\"263\":1},\"1\":{\"263\":1}}],[\"mybatis在去映射的时候\",{\"1\":{\"259\":1}}],[\"mybatis对于一些基本类型和包装类型\",{\"1\":{\"247\":1}}],[\"mybatisutil\",{\"1\":{\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"285\":4,\"287\":2,\"1159\":2}}],[\"mybatis<\",{\"1\":{\"234\":1,\"244\":1}}],[\"mybatis就是一个可以帮助我们在java代码中更加高效的去操作数据库的这么一个框架\",{\"1\":{\"234\":1}}],[\"mybatis被称为orm框架\",{\"1\":{\"234\":1}}],[\"mybatis本是apache基金会的一个开源项目ibatis\",{\"1\":{\"234\":1}}],[\"mybatis\",{\"0\":{\"234\":1,\"1110\":1},\"1\":{\"234\":12,\"244\":8,\"246\":2,\"247\":2,\"248\":1,\"261\":5,\"1110\":1,\"1131\":2}}],[\"myi文件里面存储的是索引\",{\"1\":{\"222\":1}}],[\"myi\",{\"1\":{\"222\":1,\"228\":1}}],[\"myisam只支持表锁\",{\"1\":{\"228\":1}}],[\"myisam不支持外键\",{\"1\":{\"228\":1}}],[\"myisam不支持事务\",{\"1\":{\"228\":1}}],[\"myisam有三个文件\",{\"1\":{\"228\":1}}],[\"myisam使用索引存储\",{\"1\":{\"226\":1}}],[\"myisam中的非主键索引\",{\"1\":{\"224\":1}}],[\"myisam的索引分为两种类型\",{\"1\":{\"222\":1}}],[\"myisam的表都有三个文件\",{\"1\":{\"222\":1}}],[\"myisam\",{\"0\":{\"222\":1,\"228\":1},\"1\":{\"221\":1,\"222\":2}}],[\"myisam和innodb的主键索引和非主键索引\",{\"1\":{\"218\":1}}],[\"myd文件里面存储的data\",{\"1\":{\"222\":1}}],[\"myd\",{\"1\":{\"222\":1,\"228\":1}}],[\"mysql默认的使用的是innodb存储引擎\",{\"1\":{\"233\":1}}],[\"mysql>\",{\"1\":{\"222\":1,\"225\":1,\"229\":1}}],[\"mysql官方团队把innodb当成了默认的存储引擎\",{\"1\":{\"221\":1}}],[\"mysql官方有一个utf8\",{\"1\":{\"149\":1}}],[\"mysql底层的存储引擎是作为一个插件存在\",{\"1\":{\"221\":1}}],[\"mysql对标准的b+树做了一些优化\",{\"1\":{\"220\":1}}],[\"mysql中索引的实现\",{\"1\":{\"218\":1}}],[\"mysql的可重复\",{\"1\":{\"212\":1}}],[\"mysql的内部数据组织方式\",{\"0\":{\"146\":1}}],[\"mysql把用户输入的参数当做关键字来解析了\",{\"1\":{\"204\":1}}],[\"mysql8的版本\",{\"1\":{\"192\":1}}],[\"mysql版本5\",{\"1\":{\"192\":1}}],[\"mysql驱动包下载地址\",{\"1\":{\"192\":1}}],[\"mysqldump\",{\"1\":{\"187\":2}}],[\"mysql可以对插入的数据进行特定的验证\",{\"1\":{\"169\":1}}],[\"mysql里面有一个utf8\",{\"1\":{\"149\":1}}],[\"mysql是c\",{\"1\":{\"147\":1}}],[\"mysql是最流行的关系型数据库管理系统之一\",{\"1\":{\"143\":1}}],[\"mysql作者的粉丝\",{\"1\":{\"143\":1}}],[\"mysql被oracle收购后\",{\"1\":{\"143\":1}}],[\"mysql原作者开发的\",{\"1\":{\"143\":1}}],[\"mysql\",{\"1\":{\"143\":1,\"144\":3,\"147\":2,\"149\":2,\"153\":1,\"167\":2,\"187\":1,\"192\":2,\"200\":1,\"201\":1,\"212\":2,\"214\":2,\"215\":4,\"216\":2,\"217\":1,\"222\":2,\"234\":3,\"244\":2,\"245\":2,\"1107\":3}}],[\"mchange\",{\"1\":{\"215\":1}}],[\"mp4\",{\"1\":{\"153\":1,\"784\":1}}],[\"mp3\",{\"1\":{\"116\":1,\"771\":1,\"784\":1}}],[\"mm\",{\"1\":{\"153\":6,\"724\":1,\"725\":2,\"844\":2,\"884\":2,\"942\":2,\"1028\":1,\"1126\":2,\"1148\":2}}],[\"m代表允许存储的最大位数\",{\"1\":{\"153\":1}}],[\"m代表的是允许存储的最大位数\",{\"1\":{\"153\":1}}],[\"m\",{\"1\":{\"153\":5,\"348\":6,\"433\":1,\"434\":3,\"436\":2,\"437\":1,\"438\":1,\"655\":2,\"725\":2,\"997\":1,\"1017\":1,\"1018\":1,\"1022\":1,\"1023\":1,\"1025\":2,\"1195\":3,\"1201\":1}}],[\"millis\",{\"1\":{\"839\":1}}],[\"milliseconds\",{\"1\":{\"832\":1}}],[\"microsoft\",{\"1\":{\"768\":1,\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"mincapacity\",{\"1\":{\"964\":1}}],[\"minage\",{\"1\":{\"924\":4}}],[\"minpoolsize\",{\"1\":{\"215\":1}}],[\"min\",{\"1\":{\"168\":9,\"418\":4,\"700\":2,\"838\":2,\"978\":3,\"1050\":1}}],[\"miaosha\",{\"1\":{\"144\":1}}],[\"mime\",{\"1\":{\"116\":1}}],[\"mime类型\",{\"1\":{\"116\":1}}],[\"mister\",{\"1\":{\"66\":2}}],[\"merge\",{\"1\":{\"1204\":2}}],[\"mermaid\",{\"0\":{\"74\":1}}],[\"meta\",{\"1\":{\"924\":1}}],[\"method3\",{\"1\":{\"1130\":2}}],[\"method2\",{\"1\":{\"1130\":2}}],[\"method1\",{\"1\":{\"1130\":2}}],[\"methods\",{\"1\":{\"921\":2}}],[\"methods中\",{\"1\":{\"562\":1}}],[\"methodtest\",{\"1\":{\"921\":1}}],[\"method使用\",{\"1\":{\"909\":1}}],[\"method\",{\"0\":{\"290\":1,\"921\":1},\"1\":{\"127\":4,\"128\":1,\"290\":1,\"380\":1,\"403\":1,\"475\":1,\"650\":1,\"654\":1,\"921\":19,\"922\":2,\"923\":4,\"924\":4,\"925\":2,\"1085\":3,\"1105\":1,\"1109\":15,\"1111\":1,\"1118\":5,\"1121\":1,\"1132\":1}}],[\"method=\",{\"1\":{\"115\":1,\"1104\":1,\"1119\":2,\"1120\":1}}],[\"message\",{\"1\":{\"764\":4,\"1077\":1}}],[\"memory=16\",{\"1\":{\"263\":1}}],[\"memory\",{\"1\":{\"221\":1,\"263\":6,\"265\":6,\"266\":5,\"267\":2,\"268\":3,\"269\":3,\"271\":9,\"273\":2,\"274\":2}}],[\"memcached\",{\"1\":{\"144\":1}}],[\"msg信息一般要有统一的格式\",{\"1\":{\"1195\":1}}],[\"msg\",{\"1\":{\"893\":2,\"894\":2,\"895\":2,\"1195\":2}}],[\"ms\",{\"1\":{\"80\":1}}],[\"mobile\",{\"1\":{\"1120\":1,\"1132\":20,\"1138\":1,\"1140\":1,\"1150\":1,\"1152\":4}}],[\"mozilla\",{\"1\":{\"1104\":1,\"1110\":1,\"1112\":2,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"mode\",{\"1\":{\"1120\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"mod\",{\"1\":{\"922\":1}}],[\"modifiers\",{\"1\":{\"922\":3}}],[\"modifier\",{\"1\":{\"922\":2}}],[\"modified\",{\"1\":{\"116\":1,\"121\":1}}],[\"modify\",{\"1\":{\"156\":1}}],[\"move\",{\"1\":{\"469\":1}}],[\"more\",{\"1\":{\"79\":1}}],[\"monitorexit\",{\"0\":{\"862\":1}}],[\"monitorenter\",{\"0\":{\"862\":1}}],[\"monday\",{\"1\":{\"715\":1,\"717\":1,\"718\":1,\"719\":6}}],[\"money存进去\",{\"1\":{\"259\":1}}],[\"money=\",{\"1\":{\"244\":1}}],[\"money\",{\"1\":{\"209\":19,\"214\":3,\"244\":1,\"252\":4,\"253\":2,\"254\":4}}],[\"mongodb\",{\"1\":{\"144\":1}}],[\"mon\",{\"1\":{\"72\":1,\"116\":1,\"1105\":1,\"1121\":1,\"1150\":1}}],[\"md\",{\"1\":{\"56\":1,\"1192\":1}}],[\"master\",{\"1\":{\"1204\":1}}],[\"maven工程的根目录\",{\"1\":{\"1099\":1}}],[\"maven工程的目录结构\",{\"0\":{\"1099\":1}}],[\"maven开发的目录结构\",{\"1\":{\"1075\":1}}],[\"many\",{\"1\":{\"978\":2}}],[\"manager\",{\"1\":{\"594\":2}}],[\"managed\",{\"1\":{\"248\":1}}],[\"management\",{\"1\":{\"143\":1}}],[\"malloc\",{\"1\":{\"407\":1,\"925\":1}}],[\"mate40\",{\"1\":{\"271\":4}}],[\"mate50\",{\"1\":{\"271\":4}}],[\"materials\",{\"1\":{\"249\":1}}],[\"math等常用类很明显不是同包下的类\",{\"1\":{\"503\":1}}],[\"math\",{\"1\":{\"11\":1,\"161\":1,\"162\":15,\"163\":2,\"165\":1,\"167\":2,\"168\":11,\"348\":1}}],[\"maxsize\",{\"1\":{\"1038\":1}}],[\"maxmemory\",{\"1\":{\"925\":1}}],[\"maxageservlet\",{\"1\":{\"1147\":1}}],[\"maxage\",{\"0\":{\"1147\":1},\"1\":{\"924\":4,\"1144\":1,\"1147\":1}}],[\"maxpoolsize\",{\"1\":{\"215\":1}}],[\"maxidletime\",{\"1\":{\"215\":1}}],[\"max\",{\"1\":{\"168\":11,\"316\":1,\"349\":1,\"418\":4,\"700\":3,\"838\":2,\"1050\":1,\"1105\":1,\"1120\":1,\"1121\":1,\"1138\":1,\"1140\":1,\"1150\":1}}],[\"maxdb\",{\"1\":{\"143\":1}}],[\"mariadb名称来自michael\",{\"1\":{\"143\":1}}],[\"mariadb的目的是完全兼容mysql\",{\"1\":{\"143\":1}}],[\"mariadb数据库管理系统是mysql的一个分支\",{\"1\":{\"143\":1}}],[\"mariadb\",{\"1\":{\"143\":1}}],[\"market\",{\"1\":{\"1132\":1,\"1134\":1}}],[\"markup\",{\"1\":{\"111\":1}}],[\"markdown\",{\"0\":{\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1},\"1\":{\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"43\":1,\"51\":2,\"52\":3,\"53\":1,\"54\":3,\"55\":2,\"56\":1,\"57\":1,\"67\":1,\"80\":1,\"81\":2},\"2\":{\"78\":1}}],[\"map里的信息清除\",{\"1\":{\"1159\":1}}],[\"map里面的key\",{\"1\":{\"1015\":1}}],[\"mapreduce\",{\"1\":{\"1050\":1}}],[\"map的参数是一个方法\",{\"1\":{\"1040\":1}}],[\"map的key和value就可以怎样定义\",{\"1\":{\"994\":1}}],[\"map映射返回新的数据\",{\"1\":{\"1040\":1}}],[\"map中节点数超过阈值\",{\"1\":{\"1016\":1}}],[\"map中是否有元素\",{\"1\":{\"997\":1,\"1018\":1,\"1023\":1}}],[\"map进行增删改查的api\",{\"1\":{\"997\":1}}],[\"map<钥匙\",{\"1\":{\"1159\":1}}],[\"map<\",{\"1\":{\"997\":1,\"1017\":1,\"1018\":1,\"1022\":1,\"1023\":1,\"1025\":1,\"1026\":1}}],[\"map<string\",{\"1\":{\"127\":1,\"128\":1,\"253\":3,\"1052\":2,\"1116\":2,\"1117\":2,\"1118\":3,\"1159\":1}}],[\"map存储的数据\",{\"1\":{\"996\":3}}],[\"map存储的键值对\",{\"1\":{\"995\":1}}],[\"map是map体系的顶级接口\",{\"1\":{\"996\":1}}],[\"map是什么\",{\"0\":{\"995\":1}}],[\"map就是用来存储键值对的接口\",{\"1\":{\"995\":1}}],[\"map接口\",{\"1\":{\"994\":1}}],[\"map对象有注解\",{\"1\":{\"253\":1}}],[\"map传值\",{\"1\":{\"253\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"246\":1}}],[\"mapping>\",{\"1\":{\"1097\":2}}],[\"mapping\",{\"1\":{\"234\":1,\"923\":1,\"924\":1}}],[\"mapper级别\",{\"1\":{\"286\":1}}],[\"mapper2=\",{\"1\":{\"285\":1}}],[\"mapper2\",{\"1\":{\"285\":3,\"287\":3}}],[\"mapperid+sql+所有的入参\",{\"1\":{\"283\":1}}],[\"mapper接口\",{\"1\":{\"263\":1,\"282\":1,\"283\":2}}],[\"mapper接口中\",{\"1\":{\"240\":1}}],[\"mapper中\",{\"1\":{\"249\":1}}],[\"mappers\",{\"0\":{\"249\":1}}],[\"mappers>\",{\"1\":{\"234\":1,\"244\":2,\"249\":2}}],[\"mapper>\",{\"1\":{\"234\":1,\"276\":2}}],[\"mapper\",{\"1\":{\"212\":1,\"234\":5,\"235\":1,\"237\":2,\"244\":2,\"245\":1,\"249\":5,\"255\":2,\"260\":1,\"263\":1,\"268\":1,\"269\":1,\"271\":4,\"272\":1,\"273\":1,\"274\":1,\"276\":4,\"277\":1,\"279\":2,\"280\":1,\"282\":3,\"283\":4,\"285\":9,\"286\":1,\"287\":2,\"1040\":1,\"1132\":4}}],[\"map\",{\"0\":{\"994\":1,\"1040\":1},\"1\":{\"127\":2,\"144\":1,\"247\":2,\"253\":8,\"283\":3,\"657\":1,\"950\":2,\"1010\":2,\"1017\":1,\"1026\":10,\"1027\":1,\"1040\":6,\"1050\":5,\"1052\":1,\"1116\":4,\"1159\":2}}],[\"main文件夹\",{\"1\":{\"1099\":1}}],[\"main睡眠1秒\",{\"1\":{\"859\":1}}],[\"main线程处于阻塞状态\",{\"1\":{\"870\":1}}],[\"main线程\",{\"1\":{\"829\":1}}],[\"main里面定义int\",{\"1\":{\"472\":2}}],[\"main不是关键字\",{\"1\":{\"385\":1}}],[\"main是方法名\",{\"1\":{\"385\":1}}],[\"main方法最终抛给jvm\",{\"1\":{\"749\":1}}],[\"main方法\",{\"1\":{\"718\":1}}],[\"main方法开始执行\",{\"1\":{\"498\":1}}],[\"main方法构造代码块\",{\"1\":{\"498\":1}}],[\"main方法静态代码块\",{\"1\":{\"498\":1}}],[\"main方法执行\",{\"1\":{\"471\":1}}],[\"main方法代码\",{\"1\":{\"385\":1}}],[\"main方法是启动程序时给jvm调用的\",{\"1\":{\"385\":1}}],[\"main方法是程序的入口方法\",{\"1\":{\"383\":1}}],[\"main方法是java程序的入口方法\",{\"1\":{\"308\":1}}],[\"main方法局部位置\",{\"1\":{\"331\":1}}],[\"main\",{\"0\":{\"385\":1},\"1\":{\"127\":1,\"204\":1,\"214\":1,\"234\":1,\"308\":1,\"331\":2,\"359\":2,\"383\":1,\"385\":1,\"423\":1,\"444\":1,\"459\":1,\"460\":1,\"465\":1,\"468\":1,\"469\":1,\"471\":1,\"472\":1,\"474\":1,\"478\":1,\"479\":1,\"491\":1,\"498\":3,\"538\":1,\"539\":1,\"545\":1,\"564\":1,\"573\":2,\"588\":2,\"650\":1,\"655\":1,\"669\":1,\"690\":1,\"696\":1,\"700\":1,\"706\":1,\"718\":1,\"720\":1,\"729\":1,\"730\":1,\"737\":3,\"738\":3,\"739\":2,\"740\":1,\"741\":2,\"764\":1,\"776\":2,\"777\":1,\"788\":1,\"789\":5,\"790\":2,\"794\":3,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":2,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"824\":1,\"825\":6,\"832\":7,\"833\":12,\"838\":2,\"839\":3,\"840\":7,\"841\":1,\"842\":4,\"844\":2,\"850\":2,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"859\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":4,\"870\":2,\"871\":1,\"872\":2,\"880\":2,\"881\":2,\"884\":1,\"892\":2,\"894\":2,\"895\":2,\"902\":2,\"903\":2,\"904\":2,\"905\":2,\"912\":1,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":2,\"923\":1,\"924\":1,\"936\":1,\"940\":1,\"943\":1,\"1028\":1,\"1100\":1,\"1107\":1,\"1109\":1,\"1204\":1}}],[\"mainserver\",{\"1\":{\"127\":2}}],[\"mr\",{\"1\":{\"3\":1,\"66\":1,\"69\":1}}],[\"hk9u2\",{\"1\":{\"1132\":1}}],[\"hwe\",{\"1\":{\"1132\":1}}],[\"h1>\",{\"1\":{\"1119\":2}}],[\"h=hashcode\",{\"1\":{\"1008\":1}}],[\"h无符号右移16位\",{\"1\":{\"1008\":1}}],[\"hypothesis\",{\"1\":{\"933\":1}}],[\"hyper\",{\"1\":{\"111\":2}}],[\"h\",{\"1\":{\"725\":1,\"729\":1,\"735\":1,\"1008\":14,\"1016\":4}}],[\"hp\",{\"1\":{\"469\":10}}],[\"h5这种可跨平台的开发语言\",{\"1\":{\"303\":1}}],[\"humidity\",{\"1\":{\"1026\":1}}],[\"huawei\",{\"1\":{\"271\":16}}],[\"hunan\",{\"1\":{\"261\":1,\"997\":1,\"1010\":1}}],[\"hubei\",{\"1\":{\"158\":1,\"261\":2,\"997\":1,\"1010\":1}}],[\"highpeople\",{\"1\":{\"1038\":2}}],[\"higherkey\",{\"1\":{\"1026\":1}}],[\"higherentry\",{\"1\":{\"1026\":1}}],[\"high\",{\"1\":{\"706\":1}}],[\"high=127\",{\"1\":{\"706\":1}}],[\"highlight\",{\"1\":{\"10\":1,\"23\":6,\"34\":1}}],[\"hierarchy\",{\"1\":{\"533\":1}}],[\"hikaridatasource\",{\"1\":{\"217\":4}}],[\"hikariconfig\",{\"1\":{\"217\":2}}],[\"hikaricp\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"hard\",{\"1\":{\"1202\":1}}],[\"haodene\",{\"1\":{\"1132\":2}}],[\"hasmoreelements\",{\"1\":{\"1112\":2,\"1117\":1}}],[\"hasprevious\",{\"1\":{\"959\":1}}],[\"hasnext\",{\"1\":{\"955\":4,\"956\":2,\"959\":1,\"1118\":2}}],[\"has\",{\"1\":{\"538\":1}}],[\"hash的计算\",{\"0\":{\"1008\":1}}],[\"hash值相同\",{\"1\":{\"1000\":1,\"1009\":1}}],[\"hash值\",{\"1\":{\"1000\":1}}],[\"hash\",{\"1\":{\"999\":1,\"1005\":2,\"1007\":2,\"1008\":3,\"1009\":6,\"1013\":7,\"1016\":8}}],[\"hashset的api\",{\"0\":{\"985\":1}}],[\"hashset的构造方法\",{\"0\":{\"984\":1}}],[\"hashset的特点和hashmap对key的特点保持一致\",{\"1\":{\"983\":1}}],[\"hashset的特点\",{\"0\":{\"983\":1}}],[\"hashset允许存储null元素\",{\"1\":{\"983\":1}}],[\"hashset不允许存储重复数据\",{\"1\":{\"983\":1}}],[\"hashset存储数据无序\",{\"1\":{\"983\":1}}],[\"hashset底层持有了一个hashmap对象\",{\"1\":{\"983\":1}}],[\"hashset是set接口的子实现\",{\"1\":{\"983\":1}}],[\"hashset或者linkedhashset\",{\"1\":{\"980\":1}}],[\"hashset\",{\"0\":{\"982\":1},\"1\":{\"979\":1,\"980\":2,\"984\":4,\"985\":1,\"989\":1,\"993\":1}}],[\"hashtable的子类\",{\"1\":{\"1026\":1}}],[\"hashtable线程安全\",{\"1\":{\"1020\":1}}],[\"hashtable不允许存储null\",{\"1\":{\"1020\":1}}],[\"hashtable底层结构是数组+链表\",{\"1\":{\"1020\":1}}],[\"hashtable是map接口的一个子实现\",{\"1\":{\"1020\":1}}],[\"hashtable\",{\"1\":{\"678\":1,\"679\":1,\"987\":1}}],[\"hashcode会改变\",{\"1\":{\"1015\":1}}],[\"hashcode相同\",{\"1\":{\"980\":1}}],[\"hashcode方法和equals方法要重写必须一起重写\",{\"1\":{\"682\":1}}],[\"hashcode方法和equals方法是息息相关的\",{\"1\":{\"682\":1}}],[\"hashcode方法可以看成是哈希映射的一个算法\",{\"1\":{\"679\":1}}],[\"hashcode方法\",{\"0\":{\"676\":1}}],[\"hashcode\",{\"1\":{\"246\":1,\"262\":2,\"658\":3,\"667\":2,\"677\":1,\"681\":1,\"682\":1,\"953\":1,\"981\":1,\"993\":1,\"997\":1,\"1008\":8,\"1009\":1,\"1016\":2,\"1018\":1,\"1023\":1,\"1028\":1}}],[\"hash索引是mysql内部使用的一种索引\",{\"1\":{\"220\":1}}],[\"hash索引\",{\"1\":{\"220\":1}}],[\"hash表\",{\"1\":{\"220\":2}}],[\"hashmap<string\",{\"1\":{\"1116\":1}}],[\"hashmap<>\",{\"1\":{\"127\":1,\"1116\":1}}],[\"hashmap在1\",{\"1\":{\"1020\":1}}],[\"hashmap线程不安全\",{\"1\":{\"1020\":1}}],[\"hashmap允许存储null\",{\"1\":{\"1020\":1}}],[\"hashmap变成了数组+链表+红黑树\",{\"1\":{\"1020\":1}}],[\"hashmap是jdk1\",{\"1\":{\"1020\":1}}],[\"hashmap是map接口的子实现\",{\"1\":{\"1003\":1}}],[\"hashmap中\",{\"1\":{\"1016\":1}}],[\"hashmap不允许存储重复的key\",{\"1\":{\"1010\":1}}],[\"hashmap对重复的key的定义\",{\"0\":{\"1009\":1}}],[\"hashmap存储的key\",{\"1\":{\"1006\":1}}],[\"hashmap底层数组存储的key\",{\"1\":{\"1007\":1}}],[\"hashmap底层数组结构\",{\"0\":{\"1007\":1}}],[\"hashmap底层是数组+链表+红黑树\",{\"1\":{\"1006\":1}}],[\"hashmap底层结构是数组+链表+红黑树\",{\"1\":{\"1002\":1}}],[\"hashmap的练习\",{\"1\":{\"1195\":1}}],[\"hashmap的出现就是为了取代hashtable的\",{\"1\":{\"1020\":1}}],[\"hashmap的api\",{\"0\":{\"1018\":1}}],[\"hashmap的构造方法\",{\"0\":{\"1017\":1}}],[\"hashmap的添加流程\",{\"0\":{\"1016\":1}}],[\"hashmap的底层是数组+链表+红黑树\",{\"1\":{\"1005\":1}}],[\"hashmap的底层结构是一个数组\",{\"1\":{\"1002\":1}}],[\"hashmap的底层结构\",{\"0\":{\"1002\":1}}],[\"hashmap的一些注意事项\",{\"0\":{\"1004\":1}}],[\"hashmap\",{\"1\":{\"127\":1,\"247\":2,\"984\":3,\"1017\":8,\"1026\":1}}],[\"having是对group\",{\"1\":{\"167\":1}}],[\"having\",{\"1\":{\"167\":3,\"168\":8}}],[\"hh\",{\"1\":{\"153\":3,\"724\":1,\"725\":1,\"844\":1,\"884\":1,\"1028\":1,\"1126\":1,\"1148\":1}}],[\"hbase\",{\"1\":{\"144\":1}}],[\"heap\",{\"1\":{\"403\":1}}],[\"headmap\",{\"1\":{\"1026\":2}}],[\"head就是头指针\",{\"1\":{\"978\":1}}],[\"headstr\",{\"1\":{\"738\":2}}],[\"head\",{\"1\":{\"738\":2,\"978\":1,\"1197\":1,\"1201\":2}}],[\"headervalue\",{\"1\":{\"1112\":2}}],[\"headerservlet\",{\"1\":{\"1112\":1,\"1123\":1}}],[\"headers\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":1}}],[\"header的时候\",{\"1\":{\"128\":1}}],[\"header\",{\"1\":{\"127\":2,\"128\":1,\"1112\":2,\"1123\":3}}],[\"headername\",{\"1\":{\"127\":4,\"1112\":5}}],[\"headernames\",{\"1\":{\"127\":2,\"1112\":6}}],[\"head>\",{\"1\":{\"115\":1}}],[\"hel\",{\"1\":{\"735\":2}}],[\"help等命令\",{\"1\":{\"307\":1}}],[\"helloservlet<\",{\"1\":{\"1097\":2}}],[\"helloservlet\",{\"1\":{\"1088\":1,\"1093\":1,\"1094\":1,\"1095\":1,\"1096\":1,\"1097\":1}}],[\"hello3\",{\"1\":{\"1088\":1}}],[\"hello2\",{\"1\":{\"1088\":1}}],[\"hello1\",{\"1\":{\"1088\":1}}],[\"helloworld\",{\"1\":{\"308\":5,\"328\":1,\"738\":3}}],[\"hello\",{\"1\":{\"125\":4,\"308\":2,\"315\":1,\"327\":3,\"328\":1,\"334\":1,\"340\":2,\"479\":1,\"498\":1,\"545\":1,\"568\":1,\"668\":1,\"730\":1,\"734\":6,\"735\":3,\"825\":4,\"892\":1,\"902\":1,\"1085\":2,\"1088\":1,\"1090\":2,\"1092\":1,\"1093\":6,\"1094\":1,\"1095\":1,\"1096\":1,\"1097\":1,\"1104\":2,\"1111\":2,\"1124\":3,\"1126\":1,\"1129\":1,\"1150\":1}}],[\"height=180\",{\"1\":{\"1138\":1}}],[\"height\",{\"1\":{\"153\":1,\"1028\":4,\"1040\":4}}],[\"ht\",{\"1\":{\"356\":1}}],[\"htm<\",{\"1\":{\"139\":1}}],[\"html文件\",{\"1\":{\"1131\":1}}],[\"html了\",{\"1\":{\"1127\":1}}],[\"html<\",{\"1\":{\"139\":1}}],[\"html和图片\",{\"1\":{\"123\":1}}],[\"html>\",{\"1\":{\"115\":2}}],[\"html\",{\"1\":{\"5\":1,\"25\":1,\"31\":1,\"111\":1,\"115\":7,\"116\":1,\"121\":1,\"123\":1,\"124\":1,\"127\":7,\"220\":1,\"234\":1,\"1092\":2,\"1097\":1,\"1112\":1,\"1120\":2,\"1127\":1,\"1130\":1,\"1131\":3,\"1138\":1,\"1140\":1,\"1150\":1,\"1159\":6}}],[\"httponly\",{\"1\":{\"1105\":1,\"1121\":1,\"1150\":1}}],[\"http1\",{\"1\":{\"120\":1}}],[\"http响应\",{\"0\":{\"119\":1}}],[\"http响应经过中转再次返回给客户端\",{\"1\":{\"113\":1}}],[\"http请求\",{\"0\":{\"114\":1}}],[\"http请求经过中转到达服务器之后\",{\"1\":{\"113\":1}}],[\"http协议的无状态性\",{\"1\":{\"1137\":1}}],[\"http协议的版本\",{\"1\":{\"115\":1}}],[\"http协议目前存在的问题\",{\"1\":{\"125\":1}}],[\"http协议工作流程\",{\"0\":{\"113\":1}}],[\"http协议\",{\"0\":{\"111\":1}}],[\"http\",{\"0\":{\"105\":1},\"1\":{\"111\":1,\"115\":10,\"116\":1,\"120\":3,\"121\":1,\"124\":2,\"125\":1,\"127\":4,\"134\":4,\"136\":2,\"137\":1,\"138\":1,\"139\":3,\"234\":1,\"1097\":4,\"1103\":1,\"1104\":5,\"1105\":1,\"1110\":4,\"1111\":8,\"1112\":4,\"1113\":2,\"1117\":1,\"1118\":2,\"1120\":4,\"1121\":1,\"1122\":1,\"1123\":1,\"1129\":1,\"1130\":3,\"1131\":1,\"1132\":6,\"1134\":1,\"1138\":2,\"1140\":2,\"1141\":2,\"1142\":2,\"1145\":2,\"1150\":3,\"1158\":1}}],[\"httpsession\",{\"1\":{\"1152\":2,\"1159\":1}}],[\"httpservletresponse\",{\"1\":{\"1085\":3,\"1088\":2,\"1095\":1,\"1096\":2,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1126\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1131\":4,\"1132\":4,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"httpservletrequest\",{\"1\":{\"128\":2,\"1085\":3,\"1088\":2,\"1095\":1,\"1096\":2,\"1110\":2,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1131\":4,\"1132\":4,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":4}}],[\"httpservlet是genericservlet的子类\",{\"1\":{\"1085\":1}}],[\"httpservlet\",{\"1\":{\"1085\":3,\"1088\":1,\"1093\":3,\"1094\":1,\"1095\":1,\"1096\":3,\"1111\":1,\"1112\":1,\"1113\":2,\"1116\":1,\"1117\":1,\"1122\":1,\"1123\":1,\"1124\":2,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":2,\"1131\":2,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1152\":2,\"1159\":3}}],[\"https是在网络的出入口配置的\",{\"1\":{\"125\":1}}],[\"https分别针对上述三点做了改进\",{\"1\":{\"125\":1}}],[\"https\",{\"0\":{\"125\":1},\"1\":{\"66\":2,\"115\":1,\"120\":2,\"125\":1,\"139\":1,\"212\":2,\"220\":1,\"234\":2,\"244\":1,\"1105\":1,\"1121\":1,\"1132\":20,\"1182\":1,\"1192\":3}}],[\"h2o\",{\"1\":{\"59\":1}}],[\"h3\",{\"0\":{\"8\":1}}],[\"hold\",{\"1\":{\"978\":1}}],[\"holder31\",{\"1\":{\"936\":2}}],[\"holder3<truck>\",{\"1\":{\"936\":1}}],[\"holder3<t>\",{\"1\":{\"936\":1}}],[\"holder3<>\",{\"1\":{\"936\":2}}],[\"holder3<autocar>\",{\"1\":{\"936\":1}}],[\"holder3\",{\"1\":{\"936\":3}}],[\"holder21\",{\"1\":{\"936\":4}}],[\"holder2\",{\"1\":{\"936\":8}}],[\"holder12\",{\"1\":{\"936\":2}}],[\"holder11\",{\"1\":{\"936\":2}}],[\"holder1\",{\"1\":{\"936\":6}}],[\"holdertruck\",{\"1\":{\"936\":6}}],[\"holderautocardemo1\",{\"1\":{\"936\":1}}],[\"holderautocar\",{\"1\":{\"936\":10}}],[\"honor\",{\"1\":{\"269\":1}}],[\"hostvalue3\",{\"1\":{\"1112\":1}}],[\"hostvalue2\",{\"1\":{\"1112\":1}}],[\"hostvalue\",{\"1\":{\"1112\":5}}],[\"host\",{\"1\":{\"116\":1,\"127\":2,\"899\":1,\"902\":1,\"918\":6,\"1104\":2,\"1110\":1,\"1112\":7,\"1113\":1,\"1120\":1,\"1132\":1,\"1138\":1,\"1140\":1,\"1141\":1,\"1150\":1}}],[\"hosts文件\",{\"1\":{\"113\":1}}],[\"hope\",{\"1\":{\"3\":1,\"66\":4,\"69\":1,\"80\":1}}],[\"home\",{\"1\":{\"0\":1,\"768\":1}}],[\"在文件中\",{\"1\":{\"1205\":1}}],[\"在git中\",{\"1\":{\"1192\":1,\"1204\":1}}],[\"在git中管理文件的版本\",{\"1\":{\"1192\":1}}],[\"在某一个时刻的内容和状态\",{\"1\":{\"1183\":1}}],[\"在某一个类中成员变量赋值中\",{\"1\":{\"546\":1}}],[\"在访问一个请求的时候\",{\"1\":{\"1148\":1}}],[\"在发送请求的时候就会携带cookie了\",{\"1\":{\"1142\":1}}],[\"在发起这个请求的时候\",{\"1\":{\"1139\":1}}],[\"在发生错误地方\",{\"1\":{\"749\":1}}],[\"在向服务器发起请求的时候直接携带了信息\",{\"1\":{\"1137\":1}}],[\"在向linkedlist中添加元素时\",{\"1\":{\"965\":1}}],[\"在哪里吃饭呢\",{\"1\":{\"1137\":1}}],[\"在哪个线程中调用wait\",{\"1\":{\"869\":1}}],[\"在做服务器开发过程中\",{\"1\":{\"1137\":1}}],[\"在浏览器中看到的json\",{\"1\":{\"1132\":1}}],[\"在querystring里面出现了key=value形式的请求参数\",{\"1\":{\"1132\":1}}],[\"在应用程序中维护sqlsessionfactory实例\",{\"1\":{\"1131\":1}}],[\"在请求体中\",{\"1\":{\"1116\":1}}],[\"在请求行中\",{\"1\":{\"1116\":1}}],[\"在服务器端创建session\",{\"1\":{\"1152\":1}}],[\"在服务器内存中存储了一些数据\",{\"1\":{\"1149\":1}}],[\"在服务器中处理信息的获得\",{\"1\":{\"1115\":1}}],[\"在服务器应用中整个过程中的信息流通都是通过request\",{\"1\":{\"1110\":1}}],[\"在整个应用程序中维护这个对象\",{\"1\":{\"1110\":1}}],[\"在整个类全局独一份的\",{\"1\":{\"478\":1}}],[\"在整个类中的成员方法中都可以访问它\",{\"1\":{\"450\":1,\"454\":1}}],[\"在整个类体中生效\",{\"1\":{\"450\":1,\"454\":1}}],[\"在所有的servlet中都可以通过方法直接获得servletcontext\",{\"1\":{\"1095\":1}}],[\"在所有的接口上都加了synchronized关键字\",{\"1\":{\"969\":1}}],[\"在tomcat的时候就会产生request\",{\"1\":{\"1110\":1}}],[\"在tomcat的lib目录中有一个jar包servlet\",{\"1\":{\"1081\":1}}],[\"在test类中直接创建student类对象时\",{\"1\":{\"502\":1}}],[\"在test中可以写\",{\"1\":{\"264\":1}}],[\"在test中就可以写什么\",{\"1\":{\"264\":1}}],[\"在b\",{\"1\":{\"1077\":1}}],[\"在boolean数组当成byte数组处理\",{\"1\":{\"325\":1}}],[\"在helloservlet父类的父类genericservlet中有一个成员变量config是servletconfig类型的\",{\"1\":{\"1094\":1}}],[\"在hashmap中\",{\"1\":{\"1013\":1}}],[\"在hashmap底层维护的了一个加载因子\",{\"1\":{\"1006\":1}}],[\"在http请求报文层面的区别是啥\",{\"1\":{\"115\":1}}],[\"在极端情况下\",{\"1\":{\"972\":1}}],[\"在极少的情况下\",{\"1\":{\"503\":1}}],[\"在成功时返回\",{\"1\":{\"972\":1}}],[\"在成员内部类中访问外部类成员\",{\"1\":{\"618\":1}}],[\"在成员内部类的成员方法中\",{\"1\":{\"615\":2}}],[\"在成员内部类的成员方法中访问外部类成员\",{\"1\":{\"615\":1}}],[\"在成员方法中只要使用\",{\"1\":{\"461\":1}}],[\"在成员方法中\",{\"1\":{\"461\":1}}],[\"在工作过程中\",{\"1\":{\"961\":1,\"1053\":1}}],[\"在工作中\",{\"1\":{\"961\":1,\"969\":1,\"1026\":1}}],[\"在工作中的主要区别\",{\"1\":{\"140\":1}}],[\"在list接口里面已经讲了\",{\"1\":{\"961\":1}}],[\"在foreach中\",{\"1\":{\"956\":1}}],[\"在for循环中\",{\"1\":{\"362\":1}}],[\"在处理大量数据时\",{\"1\":{\"954\":2}}],[\"在日常写代码过程中\",{\"1\":{\"951\":1}}],[\"在泛型接口中\",{\"1\":{\"941\":1}}],[\"在缓冲区中指定了偏移量\",{\"1\":{\"890\":1,\"892\":1}}],[\"在子线程中执行的任务\",{\"1\":{\"880\":1}}],[\"在子类对象初始化过程中\",{\"1\":{\"592\":1}}],[\"在子类对象初始化时\",{\"1\":{\"542\":1}}],[\"在子类构造器第一行写\",{\"1\":{\"541\":1}}],[\"在子类中\",{\"1\":{\"537\":1}}],[\"在阻塞的时候不会放弃对锁的持有\",{\"1\":{\"873\":1}}],[\"在该对象上阻塞的线程\",{\"1\":{\"869\":1}}],[\"在调用\",{\"1\":{\"955\":1}}],[\"在调用wait\",{\"1\":{\"868\":1}}],[\"在调用方法的方法栈帧中创建一个引用的拷贝\",{\"1\":{\"425\":1}}],[\"在调用方法的方法栈帧中创建一个实参的副本\",{\"1\":{\"425\":1}}],[\"在wait\",{\"1\":{\"868\":1}}],[\"在where语句的后面\",{\"1\":{\"162\":1}}],[\"在指定位置添加一个collection的所有元素\",{\"1\":{\"958\":1}}],[\"在指定位置添加元素\",{\"1\":{\"958\":1}}],[\"在指定位置把任意类型的数据插入到字符串缓冲区里面\",{\"1\":{\"743\":2}}],[\"在指定的毫秒数内让当前正在执行的线程休眠\",{\"1\":{\"839\":1}}],[\"在给定从中读取数据的文件名的情况下创建一个新\",{\"1\":{\"813\":1}}],[\"在给定从中读取数据的\",{\"1\":{\"813\":1}}],[\"在大多数情况下\",{\"1\":{\"808\":1}}],[\"在大多数时候\",{\"1\":{\"144\":1}}],[\"在输入数据可用\",{\"1\":{\"792\":1,\"794\":1}}],[\"在操作系统中\",{\"1\":{\"780\":1}}],[\"在操作之前\",{\"1\":{\"586\":1}}],[\"在源文件嵌入一些补充信息\",{\"1\":{\"924\":1}}],[\"在源文件\",{\"1\":{\"772\":1}}],[\"在执行到finally之前jvm退出了\",{\"1\":{\"760\":1}}],[\"在多catch分支的情况下\",{\"1\":{\"754\":1}}],[\"在多线程的程序中\",{\"1\":{\"744\":1}}],[\"在多数情况下\",{\"1\":{\"673\":1}}],[\"在排序时需要注意一个比较特殊的方法\",{\"1\":{\"741\":1}}],[\"在自己的类上\",{\"1\":{\"939\":1}}],[\"在自己的数据库上练习一下无所谓\",{\"1\":{\"156\":1}}],[\"在自定义异常的时候\",{\"1\":{\"747\":1}}],[\"在自然排序中处于后面的位置\",{\"1\":{\"740\":1}}],[\"在自然排序中处于前面的位置\",{\"1\":{\"740\":1}}],[\"在字典中\",{\"1\":{\"739\":1}}],[\"在字符中\",{\"1\":{\"737\":2}}],[\"在新的字符串中\",{\"1\":{\"739\":3}}],[\"在线工具\",{\"1\":{\"724\":1}}],[\"在绝大多数普通开发场景当中\",{\"1\":{\"721\":1}}],[\"在绝大多数情况下\",{\"1\":{\"703\":1}}],[\"在进行反编译的时候需要加参数\",{\"1\":{\"719\":1}}],[\"在进行克隆操作时\",{\"1\":{\"698\":1}}],[\"在以上注意事项中\",{\"1\":{\"708\":1}}],[\"在以后的工作中\",{\"1\":{\"287\":1}}],[\"在底层自动调用了方法而已\",{\"1\":{\"703\":1}}],[\"在默认的情况下\",{\"1\":{\"694\":1}}],[\"在c\",{\"1\":{\"1077\":1}}],[\"在collection内部\",{\"1\":{\"955\":1}}],[\"在conf\",{\"1\":{\"138\":1}}],[\"在c++当中\",{\"1\":{\"688\":1}}],[\"在链表中了\",{\"1\":{\"680\":1}}],[\"在哈希映射当中\",{\"1\":{\"679\":1,\"999\":1}}],[\"在集合b中都存在一个元素b与之对应\",{\"1\":{\"999\":1}}],[\"在集合b中都存在唯一的一个元素素b与之对应\",{\"1\":{\"679\":1}}],[\"在集合的场景下使用\",{\"1\":{\"658\":1}}],[\"在a>b时\",{\"1\":{\"675\":1}}],[\"在实例化字符串对象的时候进行了一些优化\",{\"1\":{\"731\":1}}],[\"在实现排他性时\",{\"1\":{\"675\":1}}],[\"在实际的开发过程中\",{\"1\":{\"1120\":1}}],[\"在实际的工作中\",{\"1\":{\"233\":1}}],[\"在实际应用中\",{\"1\":{\"908\":1}}],[\"在实际使用中\",{\"1\":{\"442\":1}}],[\"在实际开发中非常常见\",{\"1\":{\"680\":1}}],[\"在实际开发中\",{\"1\":{\"347\":1,\"420\":1,\"516\":1,\"560\":1,\"663\":1}}],[\"在图形界面上展示该对象信息\",{\"1\":{\"669\":1}}],[\"在图片网站中\",{\"1\":{\"116\":1}}],[\"在之前\",{\"1\":{\"668\":1}}],[\"在之前的猫狗案例中\",{\"1\":{\"595\":1}}],[\"在官方jdk文档中\",{\"1\":{\"666\":1}}],[\"在相当多的开发场景中\",{\"1\":{\"658\":1}}],[\"在最后\",{\"1\":{\"642\":1}}],[\"在局部内部类的成员方法中\",{\"1\":{\"642\":1}}],[\"在外部\",{\"1\":{\"624\":1}}],[\"在外国java圈中\",{\"1\":{\"522\":1}}],[\"在oracle公司官网有一段文字解释静态内部类和成员内部类的区别\",{\"1\":{\"623\":1}}],[\"在特殊情况下\",{\"1\":{\"615\":1}}],[\"在具体了解成员内部类的使用之前\",{\"1\":{\"614\":1}}],[\"在具体了解每个部分的语义之前\",{\"1\":{\"382\":1}}],[\"在内部\",{\"1\":{\"623\":1}}],[\"在内部类课程当中\",{\"1\":{\"608\":1}}],[\"在内存中出现时间不同\",{\"1\":{\"477\":1}}],[\"在内存中出现的时间\",{\"1\":{\"477\":1}}],[\"在内存中的位置\",{\"1\":{\"477\":1}}],[\"在内存中的位置不同\",{\"1\":{\"457\":2,\"477\":1}}],[\"在其他线程中\",{\"1\":{\"873\":1}}],[\"在其他线程调用此对象的\",{\"1\":{\"658\":1}}],[\"在其他需要使用的地方\",{\"1\":{\"267\":1}}],[\"在其它类内部的类\",{\"1\":{\"607\":1}}],[\"在没有默认方法时\",{\"1\":{\"600\":1}}],[\"在不考虑创建对象的情况下\",{\"1\":{\"592\":1}}],[\"在不同时间节点的不同状态\",{\"1\":{\"1183\":1}}],[\"在不同的时刻\",{\"1\":{\"575\":1}}],[\"在不同的操作系统上\",{\"1\":{\"309\":1}}],[\"在不同包下\",{\"1\":{\"537\":1}}],[\"在抽象类中都是可以定义的\",{\"1\":{\"592\":1}}],[\"在学习官方java\",{\"1\":{\"658\":1}}],[\"在学习匿名内部类和lambda表达式之前\",{\"1\":{\"645\":1}}],[\"在学习基本数据类型参数时\",{\"1\":{\"584\":1}}],[\"在学习过程中\",{\"1\":{\"319\":1}}],[\"在选项override\",{\"1\":{\"562\":1}}],[\"在讲解具体的方法重写的语法和使用之前\",{\"1\":{\"560\":1}}],[\"在研究具体的访问前\",{\"1\":{\"626\":1}}],[\"在研究\",{\"1\":{\"549\":1,\"556\":1}}],[\"在继承体系中\",{\"1\":{\"591\":1}}],[\"在继承链中属于向下\",{\"1\":{\"584\":1}}],[\"在继承中\",{\"1\":{\"540\":1}}],[\"在继承方向上是从上往下的\",{\"1\":{\"529\":1}}],[\"在继承方向上是从下往上的\",{\"1\":{\"528\":1}}],[\"在栈中创建引用\",{\"1\":{\"540\":1}}],[\"在堆上创建的\",{\"1\":{\"663\":1}}],[\"在堆上创建对象\",{\"1\":{\"540\":1}}],[\"在堆上开辟一片空间\",{\"1\":{\"405\":1}}],[\"在堆上开辟一片空间给相应的对象\",{\"1\":{\"403\":1}}],[\"在前面request和response学习阶段实现的登录案例其实是有些瑕疵的\",{\"1\":{\"1159\":1}}],[\"在前面的代码已经判断出来了\",{\"1\":{\"1009\":1}}],[\"在前面的章节中已经说过了\",{\"1\":{\"658\":1}}],[\"在前面\",{\"1\":{\"539\":1}}],[\"在前一个\",{\"1\":{\"5\":1}}],[\"在当前字符串对象中的位置\",{\"1\":{\"737\":4}}],[\"在当前字符串对象中查找指定的字符\",{\"1\":{\"737\":2}}],[\"在当前demo类当中\",{\"1\":{\"538\":1}}],[\"在当前这个阶段\",{\"1\":{\"327\":1}}],[\"在面向对象访问权限控制的整个体系中\",{\"1\":{\"537\":1}}],[\"在使用map的时候\",{\"1\":{\"1053\":1}}],[\"在使用mybatis的时候\",{\"1\":{\"241\":1}}],[\"在使用迭代器的过程中\",{\"1\":{\"951\":1}}],[\"在使用日期格式类时\",{\"1\":{\"726\":1}}],[\"在使用extends关键字直接继承某个类时\",{\"1\":{\"532\":1}}],[\"在有些时候\",{\"1\":{\"518\":1}}],[\"在有些书籍里\",{\"1\":{\"347\":1}}],[\"在轿车类中添加轿车特有的功能和属性就可以了\",{\"1\":{\"513\":1}}],[\"在demo2中获得demo1中的cookie的值不就是数据共享了么\",{\"1\":{\"1145\":1}}],[\"在demo类中\",{\"1\":{\"503\":1}}],[\"在demo类中直接创建student对象\",{\"1\":{\"502\":1}}],[\"在delete里面\",{\"1\":{\"162\":1}}],[\"在同一时间段内\",{\"1\":{\"827\":1}}],[\"在同一个锁对象上\",{\"1\":{\"873\":1}}],[\"在同一个时间点\",{\"1\":{\"827\":1}}],[\"在同一个class的main方法中的调用方式是\",{\"1\":{\"383\":1}}],[\"在同一个事务中\",{\"1\":{\"211\":1}}],[\"在同类\",{\"1\":{\"536\":1}}],[\"在同包下时\",{\"1\":{\"503\":1}}],[\"在同名的student类中给出同名的方法test\",{\"1\":{\"502\":1}}],[\"在包名为another的包中创建类\",{\"1\":{\"535\":1}}],[\"在包名为another的包中创建一个public\",{\"1\":{\"502\":1}}],[\"在包名为one的包中创建类\",{\"1\":{\"535\":1}}],[\"在包名为one的包中创建一个public\",{\"1\":{\"502\":1}}],[\"在过程中\",{\"1\":{\"497\":1}}],[\"在测试类中写一个方法\",{\"1\":{\"470\":2}}],[\"在测试类中的使用\",{\"1\":{\"237\":1,\"238\":1,\"239\":1,\"240\":1}}],[\"在开发过程中\",{\"1\":{\"1204\":1}}],[\"在开发中为了方便两个对象之间的交互\",{\"1\":{\"469\":1}}],[\"在开发工具idea中可以选择使用的版本\",{\"1\":{\"306\":1}}],[\"在各式各样给成员变量赋值的方式中\",{\"1\":{\"467\":1}}],[\"在构造器中使用this\",{\"1\":{\"466\":1}}],[\"在构造器中也会隐含this传参\",{\"1\":{\"466\":1}}],[\"在构建where的查询条件|表达式的过程中\",{\"1\":{\"162\":1}}],[\"在创建对象过程中\",{\"1\":{\"570\":1}}],[\"在创建上述star类对象时\",{\"1\":{\"542\":1}}],[\"在创建子类对象时\",{\"1\":{\"541\":1}}],[\"在创建子类star对象的过程中\",{\"1\":{\"541\":1}}],[\"在创建教师对象时\",{\"1\":{\"465\":2}}],[\"在创建preparedstatement的时候\",{\"1\":{\"204\":1}}],[\"在代码中出现上述写法\",{\"1\":{\"703\":2}}],[\"在代码比较复杂的情况下\",{\"1\":{\"461\":1}}],[\"在代码实际运行的时候\",{\"1\":{\"199\":1}}],[\"在初学this时\",{\"1\":{\"460\":1}}],[\"在run成员方法的形参列表中\",{\"1\":{\"459\":1}}],[\"在run成员方法中访问速度和颜色两个属性\",{\"1\":{\"459\":1}}],[\"在result标签中\",{\"1\":{\"261\":1}}],[\"在任何时候\",{\"1\":{\"560\":1}}],[\"在任何位置都无法再直接用对象名\",{\"1\":{\"559\":1}}],[\"在任何给成员变量赋值的手段执行前\",{\"1\":{\"458\":1}}],[\"在任意一方添加关系即可\",{\"1\":{\"172\":1}}],[\"在类加载过程中\",{\"1\":{\"571\":1,\"662\":1}}],[\"在类中使用alt+s快捷键\",{\"1\":{\"1132\":1}}],[\"在类中定义内部类也会导致类的结构变复杂\",{\"1\":{\"643\":1}}],[\"在类中定义的位置不同\",{\"1\":{\"457\":2}}],[\"在类中完全可以私有化\",{\"1\":{\"516\":1}}],[\"在类的全局仅有一份\",{\"1\":{\"571\":1}}],[\"在类的全局生效\",{\"1\":{\"454\":1}}],[\"在类的定义中\",{\"1\":{\"455\":1}}],[\"在servlet3\",{\"1\":{\"1120\":1}}],[\"在servlet中根据参数完成对应业务处理\",{\"1\":{\"1133\":1}}],[\"在servlet中的service以及httpservlet的doget\",{\"1\":{\"1110\":1}}],[\"在servlet中直接使用getservletcontext\",{\"1\":{\"1096\":1}}],[\"在servlet中已经提供了一个方法getservletconfig方法\",{\"1\":{\"1095\":1}}],[\"在servletcontext中提供的数据其实就是被所有的servlet共享了\",{\"1\":{\"1095\":1}}],[\"在service之前\",{\"1\":{\"1093\":1}}],[\"在select中出现的\",{\"1\":{\"167\":1}}],[\"在select与剧中的含义\",{\"1\":{\"162\":1}}],[\"在static修饰的静态成员方法中\",{\"1\":{\"700\":1}}],[\"在scanner键盘录入的时候\",{\"1\":{\"452\":1}}],[\"在确定能够创建对象的地方\",{\"1\":{\"452\":1}}],[\"在确保数据一致性的基础上\",{\"1\":{\"110\":1}}],[\"在属性和行为上的共性特征\",{\"1\":{\"447\":1}}],[\"在生活中\",{\"1\":{\"445\":1}}],[\"在生成的sql文件中\",{\"1\":{\"187\":1}}],[\"在欧洲\",{\"1\":{\"441\":1}}],[\"在数学中\",{\"1\":{\"441\":1}}],[\"在数据库中\",{\"1\":{\"218\":2}}],[\"在数据库语句中如果我们需要注释某些内容\",{\"1\":{\"152\":1}}],[\"在数据存储结构上大大改变\",{\"1\":{\"144\":1}}],[\"在原数组的数组上改变元素顺序\",{\"1\":{\"419\":1}}],[\"在增强for当中是不能修改任何元素的取值的\",{\"1\":{\"417\":1}}],[\"在此列表末尾插入指定的元素\",{\"1\":{\"968\":1}}],[\"在此列表的开头插入指定的元素\",{\"1\":{\"968\":1}}],[\"在此基础上\",{\"1\":{\"415\":1}}],[\"在此处填写代码\",{\"1\":{\"377\":1,\"378\":1}}],[\"在很多时候\",{\"1\":{\"415\":1,\"682\":1}}],[\"在现在的数组和后面的面向对象知识中\",{\"1\":{\"408\":1}}],[\"在现实中\",{\"1\":{\"141\":1}}],[\"在方法中声明throws+编译时异常\",{\"1\":{\"756\":1}}],[\"在方法定义时使用\",{\"1\":{\"756\":1}}],[\"在方法等局部位置\",{\"1\":{\"647\":1,\"653\":1}}],[\"在方法内部有可能会改变这些实参的值\",{\"1\":{\"424\":1}}],[\"在方法体中使用\",{\"1\":{\"757\":1}}],[\"在方法体中\",{\"1\":{\"604\":1}}],[\"在方法体中以数组的形式访问可变参数\",{\"1\":{\"422\":1}}],[\"在方法体中用return关键字指示返回值\",{\"1\":{\"382\":1}}],[\"在方法的概述这一节中\",{\"1\":{\"389\":1}}],[\"在正常情况下\",{\"1\":{\"387\":1,\"523\":1}}],[\"在注释处分别填入break\",{\"1\":{\"378\":1}}],[\"在第一次执行的时候\",{\"1\":{\"364\":1}}],[\"在第三\",{\"1\":{\"244\":1}}],[\"在接口的实现中\",{\"1\":{\"596\":1}}],[\"在接口中可以使用\",{\"1\":{\"260\":1}}],[\"在接口中\",{\"1\":{\"258\":1}}],[\"在接收int数据的后面加一个不接收数据的nextline用来接收回车\",{\"1\":{\"353\":1}}],[\"在单机的情况下\",{\"1\":{\"351\":1}}],[\"在高位补数时\",{\"1\":{\"348\":1}}],[\"在高位补数\",{\"1\":{\"348\":1}}],[\"在高并发\",{\"1\":{\"213\":1}}],[\"在低位补数\",{\"1\":{\"348\":1}}],[\"在比较时\",{\"1\":{\"346\":1}}],[\"在表达式中参与运算\",{\"1\":{\"340\":1}}],[\"在表格级别的所有操作\",{\"1\":{\"152\":1}}],[\"在参与数值类型的计算时\",{\"1\":{\"340\":1}}],[\"在参与数值类型的自动类型转换时\",{\"1\":{\"338\":1}}],[\"在程序中\",{\"1\":{\"335\":1}}],[\"在程序运行期间\",{\"1\":{\"330\":1}}],[\"在程序运行过程中\",{\"1\":{\"328\":1}}],[\"在需要很大的整数时才需要使用long类型\",{\"1\":{\"322\":1}}],[\"在这有序序列中除了头和尾数据以外\",{\"1\":{\"947\":1}}],[\"在这些过程中\",{\"1\":{\"908\":1}}],[\"在这些场景下\",{\"1\":{\"490\":1}}],[\"在这里已经接收到请求参数\",{\"1\":{\"1132\":1}}],[\"在这里\",{\"1\":{\"885\":1}}],[\"在这里做一个扩展\",{\"1\":{\"563\":1}}],[\"在这段不确定长度的时间里\",{\"1\":{\"689\":1}}],[\"在这一点上\",{\"1\":{\"592\":2}}],[\"在这种情况下\",{\"1\":{\"523\":1,\"591\":1,\"1026\":1}}],[\"在这种编程语言中\",{\"1\":{\"319\":1}}],[\"在这三个赋值方式中\",{\"1\":{\"494\":1}}],[\"在这片区域中\",{\"1\":{\"402\":1}}],[\"在这个范围内\",{\"1\":{\"706\":1}}],[\"在这个推断过程中\",{\"1\":{\"653\":1}}],[\"在这个案例中\",{\"1\":{\"468\":1,\"590\":1}}],[\"在这个mapper文件中\",{\"1\":{\"234\":1}}],[\"在这个查询里面\",{\"1\":{\"231\":1}}],[\"在这个例子中\",{\"1\":{\"230\":1}}],[\"在这个过程中\",{\"1\":{\"230\":1,\"446\":1,\"910\":1}}],[\"在这个数据仓库中分为多张不同的表\",{\"1\":{\"146\":1}}],[\"在这个场景中\",{\"1\":{\"110\":1}}],[\"在解释说明单行或某几行代码时\",{\"1\":{\"318\":2}}],[\"在计算机中普遍使用^表示幂运算\",{\"1\":{\"348\":1}}],[\"在计算机中\",{\"1\":{\"316\":1}}],[\"在编程过程中\",{\"1\":{\"314\":1}}],[\"在编译之后的位置应该要在同一个路径下\",{\"1\":{\"235\":1}}],[\"在打开的窗口中\",{\"1\":{\"307\":1}}],[\"在下面的窗口中下拉\",{\"1\":{\"307\":1}}],[\"在下面的窗口当中\",{\"1\":{\"307\":1}}],[\"在上面的请求头content\",{\"1\":{\"1120\":1}}],[\"在上面的例子中\",{\"1\":{\"941\":1}}],[\"在上面章节中\",{\"1\":{\"548\":1}}],[\"在上一节一样\",{\"1\":{\"555\":1}}],[\"在上一节中\",{\"1\":{\"522\":1}}],[\"在上述案例中\",{\"1\":{\"324\":1}}],[\"在上述弹出的窗口中\",{\"1\":{\"307\":1}}],[\"在上表中\",{\"1\":{\"169\":1,\"178\":1}}],[\"在安卓刚问世并流行的早期\",{\"1\":{\"303\":1}}],[\"在安全性方法\",{\"1\":{\"204\":1}}],[\"在关闭sqlsession后\",{\"1\":{\"286\":1}}],[\"在关系型数据库中\",{\"1\":{\"143\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"184\":1}}],[\"在循环数组中\",{\"1\":{\"976\":2}}],[\"在循环内部\",{\"1\":{\"271\":1}}],[\"在循环结束的时候\",{\"1\":{\"271\":1}}],[\"在循环开始的时候\",{\"1\":{\"271\":1}}],[\"在<if\",{\"1\":{\"265\":1}}],[\"在idea上进行git操作\",{\"0\":{\"1205\":1},\"1\":{\"1182\":1}}],[\"在io流操作和数据库操作中会见到\",{\"1\":{\"760\":1}}],[\"在ieee754标准下\",{\"1\":{\"323\":1}}],[\"在if的条件中\",{\"1\":{\"265\":1}}],[\"在if的test中\",{\"1\":{\"264\":1}}],[\"在if中\",{\"1\":{\"264\":1,\"265\":1}}],[\"在innodb的非主键索引中\",{\"1\":{\"227\":1}}],[\"在innodb的主键索引中\",{\"1\":{\"226\":1}}],[\"在innodb中\",{\"1\":{\"226\":1}}],[\"在去修改\",{\"1\":{\"262\":1}}],[\"在map里面\",{\"1\":{\"997\":1}}],[\"在mapper\",{\"1\":{\"260\":1}}],[\"在mybatis的输入映射中\",{\"1\":{\"254\":1}}],[\"在mybatis中缓存是以map\",{\"1\":{\"283\":1}}],[\"在mybatis中\",{\"1\":{\"234\":1}}],[\"在mysql里面有utf8\",{\"1\":{\"149\":1}}],[\"在mysql中大概占6字节\",{\"1\":{\"233\":1}}],[\"在mysql中\",{\"1\":{\"146\":1,\"220\":1,\"221\":1}}],[\"在声明javabean的成员变量的时候\",{\"1\":{\"259\":1}}],[\"在拿数据库中的bean中\",{\"1\":{\"247\":1}}],[\"在对数据进行处理\",{\"1\":{\"951\":1}}],[\"在对象销毁时\",{\"1\":{\"689\":1}}],[\"在对象使用后\",{\"1\":{\"689\":1}}],[\"在对象结构存在于对象中\",{\"1\":{\"487\":1}}],[\"在对同一对象多次调用\",{\"1\":{\"682\":1}}],[\"在对应的mapper文件和对应的java接口中\",{\"1\":{\"244\":1}}],[\"在对精度要求比较高的时候\",{\"1\":{\"153\":1}}],[\"在获得sqlsession的时候\",{\"1\":{\"244\":2}}],[\"在xml中要取name\",{\"1\":{\"253\":2}}],[\"在xml中使用的时候\",{\"1\":{\"252\":1}}],[\"在xml中\",{\"1\":{\"240\":1,\"252\":2,\"253\":3,\"254\":2,\"258\":1,\"265\":4}}],[\"在usermapper\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"在usermapper接口\",{\"1\":{\"237\":1,\"238\":1,\"239\":1,\"240\":1}}],[\"在usermapper中写得内容\",{\"1\":{\"237\":1}}],[\"在update里面\",{\"1\":{\"162\":1}}],[\"在update里\",{\"1\":{\"162\":1}}],[\"在k索引树上找到k=3的记录\",{\"1\":{\"230\":1}}],[\"在5\",{\"1\":{\"221\":1}}],[\"在介绍这个之前\",{\"1\":{\"221\":1}}],[\"在设计数据库时需要仔细考虑索引的使用\",{\"1\":{\"218\":1}}],[\"在设计表格的时候\",{\"1\":{\"176\":1}}],[\"在转账前和转账后\",{\"1\":{\"210\":1}}],[\"在转账案例中\",{\"1\":{\"210\":1}}],[\"在今后\",{\"1\":{\"204\":1}}],[\"在效率方面\",{\"1\":{\"204\":1}}],[\"在效率上提升\",{\"1\":{\"144\":1}}],[\"在预编译之后\",{\"1\":{\"204\":1}}],[\"在查询的结果集中\",{\"1\":{\"202\":1}}],[\"在查询结果中\",{\"1\":{\"162\":1}}],[\"在我们使用jdbc的时候\",{\"1\":{\"200\":1}}],[\"在jdk中jre的lib目录下ext目录\",{\"1\":{\"912\":1}}],[\"在jdk1\",{\"1\":{\"721\":1}}],[\"在jdk版本的迭代中\",{\"1\":{\"721\":1}}],[\"在jdk文档中\",{\"1\":{\"681\":1}}],[\"在jdbc中是一个接口\",{\"1\":{\"200\":1}}],[\"在jvm内存模型中\",{\"1\":{\"403\":1}}],[\"在jvm内存中\",{\"1\":{\"403\":1}}],[\"在java8之前版本的jdk中\",{\"1\":{\"642\":1}}],[\"在java8之前\",{\"1\":{\"598\":1}}],[\"在java的多态当中\",{\"1\":{\"575\":1}}],[\"在java的任何构造器当中\",{\"1\":{\"542\":1}}],[\"在java的面向对象设计中\",{\"1\":{\"408\":1}}],[\"在java语言中类可以嵌套定义\",{\"1\":{\"608\":1}}],[\"在java语言中\",{\"1\":{\"505\":1}}],[\"在java基础语法部分\",{\"1\":{\"455\":1}}],[\"在java\",{\"1\":{\"431\":1,\"728\":1,\"938\":1}}],[\"在java当中对应构造器\",{\"1\":{\"688\":1}}],[\"在java当中\",{\"1\":{\"383\":1,\"480\":1,\"551\":1,\"679\":1,\"703\":2}}],[\"在java中想使用栈\",{\"1\":{\"956\":1}}],[\"在java中throwable作为所有错误跟异常的祖先类\",{\"1\":{\"747\":1}}],[\"在java中存储的时间戳是一个long类型的毫秒数\",{\"1\":{\"722\":1}}],[\"在java中就对应\",{\"1\":{\"688\":1}}],[\"在java中定义一个类\",{\"1\":{\"533\":1}}],[\"在java中把创建对象的\",{\"1\":{\"446\":1}}],[\"在java中\",{\"1\":{\"317\":1,\"331\":2,\"407\":1,\"456\":1,\"515\":1,\"551\":1,\"592\":1,\"690\":1,\"939\":1,\"950\":2,\"970\":2,\"973\":1}}],[\"在java代码中是很常见的\",{\"1\":{\"606\":1}}],[\"在java代码中\",{\"1\":{\"105\":1,\"110\":1,\"318\":1,\"328\":1,\"668\":1}}],[\"在企业中\",{\"1\":{\"188\":1}}],[\"在逻辑上\",{\"1\":{\"172\":1}}],[\"在公司中\",{\"1\":{\"171\":1}}],[\"在删除元素时\",{\"1\":{\"965\":1}}],[\"在删除\",{\"1\":{\"171\":1}}],[\"在插入的时候\",{\"1\":{\"233\":1}}],[\"在插入\",{\"1\":{\"171\":1}}],[\"在列表内\",{\"1\":{\"162\":1}}],[\"在闭区间内\",{\"1\":{\"162\":1}}],[\"在\",{\"1\":{\"153\":1,\"171\":1,\"240\":1,\"682\":1}}],[\"在微信上\",{\"1\":{\"150\":1}}],[\"在esc的下方\",{\"1\":{\"148\":1}}],[\"在互联网的网络交互和数据访问中\",{\"1\":{\"145\":1}}],[\"在一些特定的时间会去执行一些方法\",{\"1\":{\"1093\":1}}],[\"在一些辅助的接口上\",{\"1\":{\"144\":1}}],[\"在一条继承链中的\",{\"1\":{\"533\":1}}],[\"在一条继承链中\",{\"1\":{\"533\":2}}],[\"在一款游戏中\",{\"1\":{\"530\":1}}],[\"在一定范围内\",{\"1\":{\"348\":4}}],[\"在一次查询中\",{\"1\":{\"233\":1}}],[\"在一个类继承某个类后\",{\"1\":{\"595\":1}}],[\"在一个类中的构造器中\",{\"1\":{\"541\":1}}],[\"在一个方法当中再次调用这个方法\",{\"1\":{\"442\":1}}],[\"在一个事务\",{\"1\":{\"211\":1}}],[\"在一个事务中\",{\"1\":{\"211\":1}}],[\"在一个tcp连接内\",{\"1\":{\"115\":1}}],[\"在能力弱化的同时也带来产品性能的大幅度提高\",{\"1\":{\"144\":1}}],[\"在功能上简化\",{\"1\":{\"144\":1}}],[\"在直播带货中\",{\"1\":{\"116\":1}}],[\"在直播带货场景中\",{\"1\":{\"116\":1}}],[\"在广告领域\",{\"1\":{\"116\":1}}],[\"在1654年发现这一规律\",{\"1\":{\"441\":1}}],[\"在1\",{\"1\":{\"115\":1,\"1020\":1}}],[\"在地址栏直接输入url\",{\"1\":{\"115\":1}}],[\"在网络传输中\",{\"1\":{\"110\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"45\":1}}],[\"在你启用\",{\"1\":{\"10\":1,\"11\":1}}],[\"在幻灯片上添加属性\",{\"1\":{\"5\":1}}],[\"在水平幻灯片中使用\",{\"1\":{\"5\":1}}],[\"><input\",{\"1\":{\"1119\":2}}],[\"><br>\",{\"1\":{\"115\":1,\"1104\":3,\"1120\":3}}],[\">是根据\",{\"1\":{\"993\":1}}],[\">是返回值类型\",{\"1\":{\"660\":1}}],[\">0\",{\"1\":{\"851\":1}}],[\">waittostop\",{\"1\":{\"825\":2}}],[\">计算机看懂的\",{\"1\":{\"801\":1}}],[\">二进制\",{\"1\":{\"798\":1}}],[\">即字符序列\",{\"1\":{\"729\":2}}],[\">包装类\",{\"1\":{\"704\":1}}],[\">stringbuffer\",{\"1\":{\"744\":1}}],[\">string\",{\"1\":{\"704\":1,\"744\":1,\"818\":1,\"820\":1}}],[\">set方法\",{\"1\":{\"461\":1}}],[\">由一个英文横杠\",{\"1\":{\"653\":1}}],[\">外部其他类\",{\"1\":{\"608\":1}}],[\">外部类\",{\"1\":{\"608\":1}}],[\">内部类\",{\"1\":{\"608\":2}}],[\">回到main方法继续执行\",{\"1\":{\"471\":1}}],[\">进行构造器赋值\",{\"1\":{\"471\":1}}],[\">就是因为this的存在\",{\"1\":{\"460\":1}}],[\">double\",{\"1\":{\"389\":1}}],[\">>>=\",{\"1\":{\"978\":2}}],[\">>>>>>>>>>>>>>>>>>>>\",{\"1\":{\"1201\":1}}],[\">>>>>>>>>>>>\",{\"1\":{\"1201\":1}}],[\">>>>>>>>>\",{\"1\":{\"1201\":1}}],[\">>>>>>>\",{\"1\":{\"1197\":2}}],[\">>>>>>\",{\"1\":{\"580\":1}}],[\">>>\",{\"1\":{\"348\":2,\"350\":1,\"978\":19,\"1008\":7,\"1016\":2}}],[\">>\",{\"1\":{\"345\":2,\"348\":8,\"350\":3}}],[\">>=\",{\"1\":{\"345\":1}}],[\">100<\",{\"1\":{\"215\":1}}],[\">10<\",{\"1\":{\"215\":2}}],[\">123456<\",{\"1\":{\"215\":1}}],[\">30<\",{\"1\":{\"215\":2}}],[\">30000<\",{\"1\":{\"215\":1}}],[\">root<\",{\"1\":{\"215\":1}}],[\">jdbc\",{\"1\":{\"215\":1}}],[\">char\",{\"1\":{\"738\":1,\"739\":1}}],[\">com\",{\"1\":{\"215\":1}}],[\">c2\",{\"1\":{\"74\":1}}],[\">=\",{\"1\":{\"162\":8,\"265\":2,\"346\":2,\"657\":1,\"706\":1,\"737\":2,\"738\":1,\"954\":1,\"978\":3,\"1040\":2,\"1044\":1}}],[\">file\",{\"1\":{\"127\":1,\"777\":1}}],[\">b2\",{\"1\":{\"74\":1}}],[\">a2\",{\"1\":{\"74\":2}}],[\">e\",{\"1\":{\"73\":2}}],[\">process\",{\"1\":{\"73\":1}}],[\">\",{\"1\":{\"5\":2,\"25\":2,\"74\":3,\"115\":4,\"125\":4,\"134\":1,\"136\":2,\"137\":2,\"139\":4,\"149\":1,\"153\":2,\"159\":1,\"162\":5,\"167\":4,\"168\":2,\"209\":2,\"234\":33,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"244\":20,\"245\":2,\"246\":29,\"247\":9,\"248\":27,\"249\":6,\"250\":3,\"251\":1,\"252\":2,\"253\":2,\"254\":4,\"255\":2,\"256\":2,\"257\":8,\"258\":1,\"259\":3,\"260\":2,\"261\":17,\"262\":2,\"264\":9,\"265\":12,\"266\":5,\"267\":11,\"268\":7,\"269\":5,\"271\":10,\"272\":2,\"273\":3,\"274\":1,\"276\":11,\"277\":11,\"279\":12,\"280\":9,\"282\":6,\"283\":20,\"286\":2,\"307\":1,\"341\":2,\"346\":2,\"349\":3,\"418\":1,\"442\":1,\"497\":2,\"533\":1,\"568\":2,\"607\":2,\"653\":1,\"655\":12,\"657\":1,\"658\":1,\"660\":1,\"704\":2,\"705\":2,\"726\":2,\"729\":6,\"730\":1,\"738\":2,\"739\":2,\"741\":1,\"764\":1,\"776\":2,\"777\":1,\"782\":2,\"798\":1,\"800\":2,\"801\":1,\"816\":2,\"817\":2,\"818\":4,\"819\":2,\"820\":2,\"825\":2,\"844\":4,\"850\":1,\"851\":3,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":1,\"867\":9,\"871\":2,\"872\":4,\"880\":1,\"916\":3,\"919\":12,\"920\":2,\"921\":6,\"922\":9,\"923\":4,\"924\":3,\"937\":2,\"939\":2,\"941\":5,\"944\":2,\"951\":1,\"953\":5,\"954\":2,\"956\":1,\"960\":2,\"981\":3,\"1006\":1,\"1029\":1,\"1036\":1,\"1037\":2,\"1038\":6,\"1039\":4,\"1040\":7,\"1041\":6,\"1043\":4,\"1044\":3,\"1045\":1,\"1046\":2,\"1047\":1,\"1048\":2,\"1049\":1,\"1050\":10,\"1052\":8,\"1053\":2,\"1083\":2,\"1091\":1,\"1097\":3,\"1104\":2,\"1107\":2,\"1108\":1,\"1109\":2,\"1117\":3,\"1118\":4,\"1119\":4,\"1120\":3,\"1143\":1,\"1201\":2}}],[\"<url\",{\"1\":{\"1097\":1}}],[\"<update\",{\"1\":{\"239\":1,\"268\":1,\"269\":1}}],[\"<update>\",{\"1\":{\"234\":1,\"235\":1}}],[\"<load\",{\"1\":{\"1097\":1}}],[\"<4>\",{\"1\":{\"1046\":1}}],[\"<3>\",{\"1\":{\"1046\":1}}],[\"<2>二参情况\",{\"1\":{\"1050\":1}}],[\"<2>\",{\"1\":{\"1046\":1}}],[\"<1>一参情况\",{\"1\":{\"1050\":1}}],[\"<1>\",{\"1\":{\"1046\":1}}],[\"<r>\",{\"1\":{\"1040\":1}}],[\"<result\",{\"1\":{\"261\":3,\"276\":3,\"277\":6,\"279\":4,\"280\":4,\"282\":1,\"283\":4}}],[\"<resultmap\",{\"1\":{\"261\":1,\"276\":1,\"277\":1,\"279\":2,\"280\":1,\"282\":1,\"283\":3}}],[\"<泛型类型>\",{\"1\":{\"943\":2}}],[\"<<<<<<<<<<\",{\"1\":{\"1201\":1}}],[\"<<<<<<<<<\",{\"1\":{\"1201\":1}}],[\"<<<<<<<<\",{\"1\":{\"1201\":1}}],[\"<<<<<<<\",{\"1\":{\"1197\":1}}],[\"<<<<\",{\"1\":{\"1197\":1}}],[\"<<\",{\"1\":{\"345\":2,\"348\":6,\"350\":3}}],[\"<<=\",{\"1\":{\"345\":1}}],[\"<association\",{\"1\":{\"276\":1,\"277\":1}}],[\"<artifactid>javax\",{\"1\":{\"1079\":1}}],[\"<artifactid>junit<\",{\"1\":{\"244\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"262\":1}}],[\"<artifactid>mysql\",{\"1\":{\"234\":1,\"244\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"234\":1,\"244\":1}}],[\"<foreach\",{\"1\":{\"271\":4,\"272\":1}}],[\"<form\",{\"1\":{\"115\":1,\"1104\":1,\"1119\":2,\"1120\":1}}],[\"<otherwise>\",{\"1\":{\"266\":1}}],[\"<web\",{\"1\":{\"1097\":1}}],[\"<welcome\",{\"1\":{\"139\":4}}],[\"<when\",{\"1\":{\"266\":2}}],[\"<where>\",{\"1\":{\"264\":2,\"265\":1,\"266\":1,\"267\":1,\"272\":1}}],[\"<if\",{\"1\":{\"264\":2,\"265\":2,\"268\":3,\"269\":3}}],[\"<id\",{\"1\":{\"261\":1,\"276\":1,\"277\":2,\"279\":2,\"280\":2,\"282\":1,\"283\":4}}],[\"<init\",{\"1\":{\"1097\":1}}],[\"<integer>\",{\"1\":{\"940\":1}}],[\"<include\",{\"1\":{\"267\":3}}],[\"<insert\",{\"1\":{\"237\":1,\"244\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"271\":4,\"273\":1,\"274\":1}}],[\"<insert>\",{\"1\":{\"234\":1,\"235\":1}}],[\"<input\",{\"1\":{\"115\":2,\"1104\":4,\"1119\":2,\"1120\":4}}],[\"<param\",{\"1\":{\"1097\":2}}],[\"<packaging>war<\",{\"1\":{\"1079\":1}}],[\"<package\",{\"1\":{\"249\":1}}],[\"<properties\",{\"1\":{\"245\":1}}],[\"<property\",{\"1\":{\"215\":10,\"234\":4,\"244\":4,\"248\":12}}],[\"<sql\",{\"1\":{\"267\":2}}],[\"<servlet\",{\"1\":{\"1097\":4}}],[\"<servlet>\",{\"1\":{\"1097\":1}}],[\"<set>\",{\"1\":{\"269\":2}}],[\"<setting\",{\"1\":{\"246\":28,\"283\":1,\"286\":1}}],[\"<settings>\",{\"1\":{\"246\":2,\"283\":1}}],[\"<selectkey\",{\"1\":{\"273\":1}}],[\"<select\",{\"1\":{\"234\":2,\"240\":1,\"244\":1,\"247\":5,\"250\":2,\"251\":1,\"256\":2,\"257\":3,\"258\":1,\"259\":1,\"260\":1,\"261\":3,\"264\":2,\"265\":1,\"266\":1,\"267\":3,\"272\":1,\"276\":2,\"277\":1,\"279\":2,\"280\":1,\"282\":2,\"283\":3}}],[\"<select>\",{\"1\":{\"234\":1,\"235\":1}}],[\"<scope>provided<\",{\"1\":{\"1079\":1}}],[\"<scope>test<\",{\"1\":{\"244\":1}}],[\"<scope>runtime<\",{\"1\":{\"234\":1,\"244\":1}}],[\"<mapper\",{\"1\":{\"234\":3,\"244\":2,\"249\":4,\"276\":2}}],[\"<mappers>\",{\"1\":{\"234\":1,\"244\":2,\"249\":2}}],[\"<meta\",{\"1\":{\"115\":1}}],[\"<t>\",{\"1\":{\"940\":1,\"943\":1,\"953\":1,\"954\":2,\"981\":1,\"1118\":3}}],[\"<t\",{\"1\":{\"939\":2}}],[\"<trim\",{\"1\":{\"268\":1,\"269\":1}}],[\"<transactionmanager\",{\"1\":{\"234\":1,\"244\":1,\"248\":3}}],[\"<typealias\",{\"1\":{\"247\":2}}],[\"<typealiases>\",{\"1\":{\"247\":1}}],[\"<title>title<\",{\"1\":{\"115\":1}}],[\"<environment\",{\"1\":{\"234\":1,\"244\":1,\"248\":3}}],[\"<environments\",{\"1\":{\"234\":1,\"244\":1,\"248\":1}}],[\"<version>1\",{\"1\":{\"262\":1}}],[\"<version>4\",{\"1\":{\"244\":1}}],[\"<version>5\",{\"1\":{\"234\":1,\"244\":1}}],[\"<version>3\",{\"1\":{\"234\":1,\"244\":1,\"1079\":1}}],[\"<groupid>javax\",{\"1\":{\"1079\":1}}],[\"<groupid>junit<\",{\"1\":{\"244\":1}}],[\"<groupid>mysql<\",{\"1\":{\"234\":1,\"244\":1}}],[\"<groupid>org\",{\"1\":{\"234\":1,\"244\":1,\"262\":1}}],[\"<datasource\",{\"1\":{\"234\":1,\"244\":1,\"248\":3}}],[\"<dependencies>\",{\"1\":{\"244\":1,\"1079\":1}}],[\"<dependency>\",{\"1\":{\"234\":2,\"244\":3,\"262\":1,\"1079\":1}}],[\"<delete\",{\"1\":{\"238\":1}}],[\"<delete>\",{\"1\":{\"234\":1,\"235\":1}}],[\"<default\",{\"1\":{\"215\":1}}],[\"<div\",{\"1\":{\"127\":1}}],[\"<collection\",{\"1\":{\"279\":1,\"280\":1,\"282\":1,\"283\":3}}],[\"<configuration>\",{\"1\":{\"234\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"249\":2}}],[\"<connector\",{\"1\":{\"139\":1}}],[\"<context\",{\"1\":{\"136\":1,\"137\":1,\"139\":1,\"1083\":1}}],[\"<choose>\",{\"1\":{\"266\":1}}],[\"<c3p0\",{\"1\":{\"215\":1}}],[\"<表达式>\",{\"1\":{\"168\":2}}],[\"<表名>\",{\"1\":{\"163\":1}}],[\"<表名字>\",{\"1\":{\"162\":1,\"164\":3,\"166\":1,\"167\":1,\"168\":5}}],[\"<列>\",{\"1\":{\"168\":2}}],[\"<字段名\",{\"1\":{\"167\":1}}],[\"<字段名>\",{\"1\":{\"163\":1,\"166\":1}}],[\"<别名>\",{\"1\":{\"165\":1}}],[\"<内容>\",{\"1\":{\"165\":1}}],[\"<>\",{\"1\":{\"162\":1,\"939\":2}}],[\"<==>\",{\"1\":{\"978\":1}}],[\"<=这种符号不能使用\",{\"1\":{\"265\":1}}],[\"<=90\",{\"1\":{\"162\":1}}],[\"<=>\",{\"1\":{\"162\":1}}],[\"<=\",{\"1\":{\"162\":2,\"265\":1,\"346\":2,\"367\":1,\"377\":1,\"700\":1,\"706\":1,\"737\":2,\"872\":1,\"881\":1}}],[\"<查询内容>|列等\",{\"1\":{\"168\":5}}],[\"<查询内容>|列1\",{\"1\":{\"162\":1}}],[\"<查询内容|列等>\",{\"1\":{\"164\":3,\"166\":1,\"167\":1}}],[\"<查询条件>|表达式\",{\"1\":{\"162\":1}}],[\"<注释>\",{\"1\":{\"152\":3}}],[\"<body>\",{\"1\":{\"115\":1}}],[\"<h1>post请求<\",{\"1\":{\"1119\":1}}],[\"<h1>get请求<\",{\"1\":{\"1119\":1}}],[\"<head>\",{\"1\":{\"115\":1}}],[\"<html\",{\"1\":{\"115\":1}}],[\"<\",{\"1\":{\"5\":2,\"115\":5,\"136\":1,\"139\":2,\"162\":3,\"205\":1,\"206\":1,\"207\":1,\"213\":1,\"215\":2,\"220\":1,\"234\":30,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"244\":20,\"245\":2,\"246\":4,\"247\":9,\"248\":12,\"249\":5,\"250\":2,\"251\":1,\"252\":2,\"253\":1,\"254\":4,\"255\":2,\"256\":2,\"257\":8,\"258\":1,\"259\":3,\"260\":2,\"261\":13,\"262\":1,\"264\":11,\"265\":8,\"266\":8,\"267\":9,\"268\":7,\"269\":5,\"271\":10,\"272\":3,\"273\":3,\"274\":1,\"276\":6,\"277\":3,\"279\":6,\"280\":3,\"282\":4,\"283\":10,\"286\":1,\"341\":5,\"346\":2,\"367\":1,\"378\":1,\"415\":1,\"418\":1,\"440\":2,\"441\":6,\"675\":1,\"737\":1,\"739\":2,\"741\":1,\"764\":1,\"833\":4,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"842\":2,\"844\":2,\"872\":1,\"880\":2,\"924\":1,\"954\":4,\"978\":2,\"997\":1,\"1039\":2,\"1046\":1,\"1079\":2,\"1083\":1,\"1097\":6,\"1104\":1,\"1119\":2,\"1120\":2}}],[\"博客主页\",{\"1\":{\"0\":1}}],[\"tk2nexu\",{\"1\":{\"1132\":1}}],[\"tmp\",{\"1\":{\"1113\":2}}],[\"tt\",{\"1\":{\"1028\":1}}],[\"tcp连接被成功建立\",{\"1\":{\"906\":1}}],[\"tcp\",{\"1\":{\"902\":3,\"903\":2,\"904\":3,\"905\":2}}],[\"tcp协议的三次握手和四次挥手过程可以确保双方在建立和关闭连接时达成共识\",{\"1\":{\"908\":1}}],[\"tcp协议\",{\"1\":{\"885\":1}}],[\"tcourse\",{\"1\":{\"465\":2}}],[\"t>\",{\"1\":{\"741\":1,\"1036\":1,\"1041\":1,\"1043\":1,\"1044\":1,\"1045\":1,\"1048\":1}}],[\"t3\",{\"1\":{\"465\":2,\"851\":3,\"855\":3,\"856\":3,\"857\":3,\"864\":3}}],[\"t2\",{\"1\":{\"465\":2,\"833\":6,\"838\":3,\"851\":3,\"855\":3,\"856\":3,\"857\":3,\"864\":3,\"867\":6,\"881\":2}}],[\"t1\",{\"1\":{\"465\":2,\"833\":11,\"838\":3,\"851\":3,\"855\":3,\"856\":3,\"857\":3,\"864\":3,\"867\":6,\"879\":2,\"881\":2}}],[\"ts2\",{\"1\":{\"498\":1}}],[\"ts\",{\"1\":{\"233\":7,\"498\":1}}],[\"tx\",{\"1\":{\"212\":1}}],[\"txt文件拷贝回来\",{\"1\":{\"1203\":1}}],[\"txt文件中\",{\"1\":{\"844\":3}}],[\"txt剪切换一个位置\",{\"1\":{\"1203\":1}}],[\"txt的文件\",{\"1\":{\"1203\":1}}],[\"txt也可以存储\",{\"1\":{\"141\":1}}],[\"txt里面有\",{\"1\":{\"139\":1}}],[\"txt到欢迎页面\",{\"1\":{\"139\":1}}],[\"txt最终\",{\"1\":{\"138\":1}}],[\"txt\",{\"1\":{\"116\":1,\"118\":1,\"127\":1,\"136\":2,\"137\":2,\"138\":1,\"139\":1,\"308\":1,\"767\":2,\"768\":3,\"769\":4,\"771\":5,\"777\":1,\"784\":1,\"788\":2,\"789\":4,\"790\":3,\"794\":3,\"795\":1,\"806\":2,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":4,\"818\":1,\"819\":1,\"820\":1,\"824\":2,\"844\":1,\"905\":2,\"1113\":2,\"1192\":1,\"1202\":1,\"1203\":4}}],[\"t\",{\"1\":{\"212\":3,\"222\":2,\"225\":2,\"226\":1,\"229\":3,\"230\":4,\"231\":2,\"232\":2,\"354\":1,\"356\":1,\"441\":1,\"538\":2,\"663\":2,\"741\":3,\"832\":2,\"838\":5,\"839\":2,\"840\":3,\"842\":3,\"844\":3,\"850\":2,\"879\":2,\"881\":2,\"936\":3,\"937\":5,\"939\":8,\"940\":1,\"941\":9,\"942\":2,\"943\":10,\"944\":1,\"949\":1,\"953\":2,\"954\":6,\"981\":2,\"1040\":1,\"1050\":2,\"1118\":4,\"1132\":1}}],[\"tickets\",{\"1\":{\"851\":10,\"855\":3,\"856\":5,\"857\":5,\"864\":3}}],[\"time做降序查询user表中的page和limit对应的user信息\",{\"1\":{\"1132\":1}}],[\"timeout=20\",{\"1\":{\"1122\":1,\"1123\":1,\"1142\":1,\"1150\":1}}],[\"timertask\",{\"1\":{\"883\":4,\"884\":7}}],[\"timer\",{\"1\":{\"883\":1,\"884\":9}}],[\"timed\",{\"1\":{\"847\":1}}],[\"timeunit\",{\"1\":{\"825\":4,\"832\":2,\"839\":3,\"859\":2,\"860\":2,\"880\":1,\"884\":2}}],[\"timestamp\",{\"1\":{\"171\":9,\"209\":5,\"233\":5,\"724\":1}}],[\"time\",{\"1\":{\"153\":1,\"171\":6,\"209\":2,\"233\":2,\"724\":2,\"883\":1,\"884\":3,\"1132\":4,\"1147\":1}}],[\"tinyint\",{\"1\":{\"153\":1}}],[\"title>\",{\"1\":{\"115\":1}}],[\"title\",{\"1\":{\"66\":1,\"74\":1}}],[\"talk2\",{\"1\":{\"1083\":1}}],[\"tailmap\",{\"1\":{\"1026\":2}}],[\"tailset\",{\"1\":{\"993\":2}}],[\"tail就是尾指针\",{\"1\":{\"978\":1}}],[\"tail\",{\"1\":{\"978\":10}}],[\"task\",{\"1\":{\"880\":4,\"881\":1,\"883\":4,\"884\":4}}],[\"target文件夹\",{\"1\":{\"1099\":1,\"1203\":1}}],[\"target元注解\",{\"1\":{\"924\":1}}],[\"targetip\",{\"1\":{\"892\":2,\"893\":2}}],[\"target\",{\"1\":{\"851\":8,\"924\":2,\"1082\":1,\"1083\":1,\"1086\":1,\"1098\":1,\"1100\":2,\"1203\":2}}],[\"ta的工资是\",{\"1\":{\"594\":2}}],[\"tage\",{\"1\":{\"465\":2}}],[\"ta们具有特定的属性和特定的行为\",{\"1\":{\"445\":1}}],[\"tangsen\",{\"1\":{\"275\":1}}],[\"tangseng\",{\"1\":{\"180\":1,\"275\":1}}],[\"tab\",{\"1\":{\"171\":1}}],[\"tablemapper\",{\"1\":{\"280\":1}}],[\"tablemapper接口\",{\"1\":{\"276\":1}}],[\"table2\",{\"1\":{\"182\":2,\"183\":4}}],[\"tablename\",{\"1\":{\"164\":3,\"168\":1}}],[\"table的表\",{\"1\":{\"157\":1}}],[\"tables\",{\"1\":{\"155\":1}}],[\"table1和table2是要连接的表\",{\"1\":{\"182\":1}}],[\"table1\",{\"1\":{\"153\":1,\"182\":2,\"183\":4}}],[\"table\",{\"1\":{\"153\":8,\"154\":2,\"155\":6,\"156\":14,\"157\":3,\"158\":5,\"159\":4,\"160\":1,\"161\":2,\"162\":4,\"168\":1,\"169\":7,\"170\":2,\"171\":9,\"177\":1,\"180\":4,\"188\":1,\"209\":1,\"212\":1,\"222\":1,\"225\":1,\"229\":1,\"232\":7,\"233\":2,\"240\":1,\"261\":2,\"263\":2,\"275\":4,\"278\":4,\"281\":6}}],[\"taobao\",{\"1\":{\"113\":1}}],[\"twitter\",{\"1\":{\"116\":1,\"144\":1}}],[\"two\",{\"1\":{\"74\":4,\"978\":1}}],[\"tow9qtk3l7z6\",{\"1\":{\"1132\":1}}],[\"token\",{\"1\":{\"1105\":1,\"1121\":1,\"1132\":1}}],[\"tokey\",{\"1\":{\"1026\":8}}],[\"tomap\",{\"1\":{\"1052\":4,\"1053\":1}}],[\"tomcat虚拟映射的docbase\",{\"1\":{\"1099\":1}}],[\"tomcat停的时候\",{\"1\":{\"1093\":1}}],[\"tomcat会提供缺省的servlet\",{\"1\":{\"1092\":1}}],[\"tomcat会自行将其解压缩成目录\",{\"1\":{\"138\":1}}],[\"tomcat中已经有了这个依赖\",{\"1\":{\"1081\":1}}],[\"tomcat中存在着一个缺省应用\",{\"1\":{\"139\":1}}],[\"tomcat的应用程序和启动\",{\"1\":{\"1076\":1}}],[\"tomcat的安装及使用\",{\"1\":{\"105\":1}}],[\"tomcat是utf8的编码\",{\"1\":{\"139\":1}}],[\"tomcat控制台乱码\",{\"1\":{\"139\":1}}],[\"tomcat设置\",{\"0\":{\"139\":1}}],[\"tomcat需要在本地找到这样一个1\",{\"1\":{\"138\":1}}],[\"tomcatququest\",{\"1\":{\"128\":1}}],[\"tomcat这样定义\",{\"1\":{\"128\":1}}],[\"tomcat\",{\"0\":{\"105\":1,\"129\":1},\"1\":{\"121\":1,\"130\":1,\"1078\":2}}],[\"toset\",{\"1\":{\"1052\":3}}],[\"tostring的默认实现\",{\"0\":{\"667\":1}}],[\"tostring方法的使用\",{\"1\":{\"669\":1}}],[\"tostring方法的重写\",{\"1\":{\"668\":1}}],[\"tostring方法\",{\"0\":{\"664\":1}}],[\"tostring\",{\"1\":{\"127\":2,\"246\":1,\"262\":3,\"416\":1,\"658\":2,\"665\":1,\"666\":3,\"667\":2,\"668\":2,\"669\":2,\"704\":1,\"715\":1,\"717\":1,\"738\":2,\"739\":2,\"740\":3,\"741\":3,\"744\":1,\"753\":1,\"777\":1,\"801\":2,\"824\":1,\"867\":2,\"904\":1,\"922\":3,\"923\":1,\"1111\":1,\"1159\":1}}],[\"tolist\",{\"1\":{\"1029\":1,\"1035\":1,\"1036\":1,\"1038\":3,\"1039\":2,\"1040\":4,\"1041\":2,\"1052\":3}}],[\"tolowercase\",{\"1\":{\"705\":1,\"738\":4}}],[\"toinclusive\",{\"1\":{\"993\":1,\"1026\":1}}],[\"toindex\",{\"1\":{\"958\":1,\"960\":1}}],[\"toelement\",{\"1\":{\"993\":4}}],[\"too\",{\"1\":{\"978\":2}}],[\"tools\",{\"0\":{\"1214\":1}}],[\"tool\",{\"1\":{\"724\":1}}],[\"toarray是将原collection直接copy了一份\",{\"1\":{\"954\":1}}],[\"toarray\",{\"0\":{\"954\":1},\"1\":{\"953\":2,\"954\":2,\"956\":3,\"981\":2}}],[\"toarray有什么特点\",{\"1\":{\"951\":1}}],[\"tobytearray\",{\"1\":{\"923\":3}}],[\"touppercase\",{\"1\":{\"705\":1,\"738\":5,\"739\":1}}],[\"tohexstring\",{\"1\":{\"667\":2}}],[\"toname\",{\"1\":{\"209\":2}}],[\"totalmemory\",{\"1\":{\"925\":1}}],[\"total\",{\"1\":{\"165\":1,\"168\":2,\"1132\":4}}],[\"to\",{\"1\":{\"156\":2,\"653\":1,\"711\":2,\"954\":1,\"978\":1}}],[\"todo\",{\"1\":{\"127\":1,\"1028\":1,\"1040\":1,\"1046\":2,\"1050\":2}}],[\"tocollection\",{\"1\":{\"1052\":3}}],[\"tochararray\",{\"1\":{\"738\":4,\"739\":1,\"806\":1,\"1118\":1}}],[\"toc\",{\"1\":{\"82\":1}}],[\"tbbb\",{\"1\":{\"356\":1}}],[\"tb\",{\"1\":{\"74\":1}}],[\"third\",{\"1\":{\"1146\":2}}],[\"this点访问到的一定是外部类成员\",{\"1\":{\"615\":1}}],[\"this指向外部类对象\",{\"1\":{\"639\":1}}],[\"this指向\",{\"1\":{\"615\":1}}],[\"this指向当前子类对象\",{\"1\":{\"541\":1}}],[\"this指向当前对象的隐含传参\",{\"1\":{\"462\":1}}],[\"this指向当前对象\",{\"1\":{\"460\":1}}],[\"this毕竟还是一个引用\",{\"1\":{\"544\":1}}],[\"this在当前类中不受访问权限控制\",{\"1\":{\"544\":1}}],[\"this在构造器中用于表示调用自身构造器时\",{\"1\":{\"543\":1}}],[\"this代表当前类的当前对象\",{\"1\":{\"544\":1}}],[\"this两个关键字在表示调用构造器时\",{\"1\":{\"543\":1}}],[\"this是不能省略的\",{\"1\":{\"461\":1}}],[\"this是一个引用\",{\"1\":{\"460\":1}}],[\"this关键字的作用\",{\"0\":{\"461\":1}}],[\"this关键字\",{\"1\":{\"460\":1}}],[\"this\",{\"1\":{\"127\":4,\"312\":1,\"459\":1,\"460\":1,\"461\":2,\"466\":1,\"467\":2,\"468\":3,\"469\":13,\"471\":4,\"472\":1,\"474\":1,\"478\":1,\"491\":3,\"498\":2,\"544\":3,\"545\":4,\"555\":1,\"564\":1,\"570\":1,\"594\":4,\"615\":1,\"655\":2,\"669\":1,\"673\":1,\"713\":2,\"715\":2,\"717\":2,\"720\":3,\"723\":1,\"740\":7,\"741\":3,\"818\":1,\"824\":5,\"851\":1,\"856\":1,\"866\":1,\"867\":14,\"881\":1,\"895\":4,\"903\":1,\"904\":2,\"922\":6,\"923\":1,\"936\":8,\"1028\":5,\"1085\":2,\"1095\":1,\"1124\":1,\"1128\":1,\"1159\":1}}],[\"thkhkjo\",{\"1\":{\"1132\":1}}],[\"that\",{\"1\":{\"623\":1}}],[\"throw则是抛出了异常\",{\"1\":{\"758\":1}}],[\"throw+编译时异常\",{\"1\":{\"757\":1}}],[\"throw关键字\",{\"0\":{\"757\":1}}],[\"throwable\",{\"1\":{\"687\":2,\"690\":1}}],[\"throw\",{\"0\":{\"758\":1},\"1\":{\"209\":2,\"213\":3,\"214\":1,\"312\":1,\"757\":1,\"758\":1,\"764\":2,\"924\":2,\"942\":1,\"978\":1}}],[\"throws表示出现异常的一种可能性\",{\"1\":{\"758\":1}}],[\"throws向上抛\",{\"1\":{\"756\":1}}],[\"throws+编译时异常才有意义\",{\"1\":{\"756\":1}}],[\"throws+运行时异常没有意义\",{\"1\":{\"756\":1}}],[\"throws关键字\",{\"0\":{\"756\":1}}],[\"throws\",{\"0\":{\"758\":1},\"1\":{\"204\":3,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"213\":2,\"214\":2,\"234\":1,\"312\":1,\"538\":3,\"687\":1,\"690\":1,\"692\":2,\"699\":1,\"756\":1,\"758\":1,\"764\":1,\"771\":1,\"788\":1,\"789\":3,\"790\":2,\"794\":7,\"795\":1,\"801\":1,\"806\":1,\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":2,\"817\":6,\"818\":6,\"819\":1,\"820\":1,\"821\":1,\"824\":3,\"880\":3,\"881\":4,\"884\":1,\"892\":2,\"893\":1,\"894\":2,\"895\":2,\"902\":2,\"903\":2,\"904\":2,\"905\":2,\"916\":2,\"918\":3,\"919\":1,\"920\":1,\"921\":1,\"922\":2,\"923\":3,\"924\":4,\"1078\":1,\"1085\":4,\"1088\":2,\"1095\":1,\"1096\":3,\"1107\":1,\"1109\":1,\"1110\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1115\":1,\"1116\":2,\"1117\":2,\"1118\":2,\"1119\":1,\"1120\":3,\"1122\":1,\"1123\":1,\"1124\":2,\"1126\":1,\"1127\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1131\":6,\"1132\":1,\"1142\":1,\"1143\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1152\":2,\"1159\":5}}],[\"threshold\",{\"1\":{\"1006\":2}}],[\"thread的sleep方法\",{\"1\":{\"869\":1}}],[\"threadstop2\",{\"1\":{\"844\":3}}],[\"threadsleep\",{\"1\":{\"839\":4}}],[\"threaddaemon\",{\"1\":{\"842\":3}}],[\"threadyield\",{\"1\":{\"841\":4}}],[\"threadjoin\",{\"1\":{\"840\":3}}],[\"thread及其子类对象才代表线程\",{\"1\":{\"833\":1}}],[\"thread\",{\"0\":{\"299\":1,\"826\":1},\"1\":{\"115\":2,\"127\":1,\"299\":1,\"825\":2,\"832\":1,\"833\":32,\"838\":4,\"839\":4,\"840\":1,\"841\":2,\"842\":4,\"844\":3,\"850\":4,\"851\":10,\"855\":8,\"856\":10,\"857\":10,\"859\":3,\"860\":3,\"864\":8,\"866\":2,\"867\":16,\"871\":4,\"872\":10,\"873\":1,\"879\":4,\"880\":1,\"881\":6,\"895\":4,\"903\":2}}],[\"three\",{\"1\":{\"74\":2}}],[\"thumbnail=64x64\",{\"1\":{\"1132\":20}}],[\"thursday\",{\"1\":{\"715\":1,\"717\":1,\"719\":4}}],[\"thu\",{\"1\":{\"72\":1,\"724\":1}}],[\"the\",{\"1\":{\"201\":2,\"702\":2,\"711\":4,\"954\":2,\"978\":1}}],[\"there\",{\"1\":{\"66\":2}}],[\"then\",{\"1\":{\"21\":2}}],[\"theta\",{\"1\":{\"11\":2}}],[\"tuesday\",{\"1\":{\"715\":1,\"717\":1,\"718\":2,\"719\":5}}],[\"tue\",{\"1\":{\"72\":1,\"121\":2,\"1132\":1}}],[\"type的值中也可以看到\",{\"1\":{\"1120\":1}}],[\"type中通常是application\",{\"1\":{\"1105\":1}}],[\"typehandlers\",{\"1\":{\"247\":1}}],[\"type全限定名\",{\"1\":{\"247\":1}}],[\"typealies类型别名\",{\"1\":{\"247\":1}}],[\"typealiases>\",{\"1\":{\"247\":1}}],[\"typealiases\",{\"0\":{\"247\":1}}],[\"type写的是text\",{\"1\":{\"123\":1}}],[\"type有什么作用\",{\"1\":{\"121\":1}}],[\"type=\",{\"1\":{\"115\":2,\"234\":2,\"244\":2,\"247\":2,\"248\":6,\"261\":1,\"276\":1,\"277\":1,\"279\":2,\"280\":1,\"282\":1,\"283\":3,\"1104\":4,\"1119\":2,\"1120\":4}}],[\"type\",{\"0\":{\"1127\":1},\"1\":{\"71\":2,\"72\":3,\"116\":1,\"121\":2,\"123\":1,\"127\":2,\"153\":2,\"156\":2,\"246\":1,\"321\":1,\"720\":11,\"924\":1,\"939\":1,\"1086\":1,\"1104\":2,\"1105\":2,\"1110\":1,\"1112\":1,\"1113\":1,\"1118\":2,\"1120\":2,\"1121\":1,\"1125\":1,\"1127\":3,\"1130\":1,\"1131\":2,\"1132\":1}}],[\"treemap定义大小操作相关的api\",{\"1\":{\"1026\":1}}],[\"treemap\",{\"1\":{\"1025\":4,\"1026\":2}}],[\"treemap不允许存储null作为key\",{\"1\":{\"1024\":1}}],[\"treemap不允许存储重复的key\",{\"1\":{\"1024\":1}}],[\"treemap存储数据大小有序\",{\"1\":{\"1024\":1}}],[\"treemap的api\",{\"0\":{\"1026\":1}}],[\"treemap的构造方法\",{\"0\":{\"1025\":1}}],[\"treemap的数据结构红黑树\",{\"1\":{\"1024\":1}}],[\"treemap的特点\",{\"0\":{\"1024\":1}}],[\"treemap是map接口的子实现\",{\"1\":{\"1024\":1}}],[\"treeset<>\",{\"1\":{\"1028\":1}}],[\"treeset<student>\",{\"1\":{\"1028\":1}}],[\"treeset的api\",{\"0\":{\"993\":1}}],[\"treeset的构造方法\",{\"0\":{\"992\":1}}],[\"treeset的特点\",{\"0\":{\"991\":1}}],[\"treeset不允许存储null\",{\"1\":{\"991\":1}}],[\"treeset不允许存储重复数据\",{\"1\":{\"991\":1}}],[\"treeset存储数据大小有序\",{\"1\":{\"991\":1}}],[\"treeset存储数据的特点和treemap的key保持一致\",{\"1\":{\"991\":1}}],[\"treeset存储数据的特点\",{\"1\":{\"979\":1}}],[\"treeset底层持有了一个treemap对象\",{\"1\":{\"991\":1}}],[\"treeset是set接口的子实现\",{\"1\":{\"991\":1}}],[\"treeset是comparable接口返回0\",{\"1\":{\"980\":1}}],[\"treeset\",{\"0\":{\"990\":1},\"1\":{\"980\":1,\"992\":7,\"993\":3,\"1028\":1}}],[\"treeset大小有序\",{\"1\":{\"980\":1}}],[\"truckmethod\",{\"1\":{\"936\":2}}],[\"truck\",{\"1\":{\"936\":19,\"937\":1}}],[\"true表示该引用指向的对象\",{\"1\":{\"586\":1}}],[\"true或者false\",{\"1\":{\"358\":1,\"361\":1}}],[\"true\",{\"1\":{\"0\":1,\"127\":1,\"201\":1,\"204\":2,\"209\":1,\"238\":1,\"239\":1,\"244\":2,\"246\":7,\"274\":2,\"283\":2,\"285\":4,\"286\":1,\"287\":2,\"325\":2,\"327\":1,\"331\":1,\"347\":1,\"349\":4,\"362\":1,\"364\":1,\"366\":1,\"601\":1,\"674\":6,\"698\":1,\"706\":2,\"707\":3,\"711\":4,\"735\":1,\"738\":1,\"788\":1,\"789\":1,\"794\":1,\"817\":1,\"819\":1,\"820\":2,\"825\":2,\"842\":2,\"844\":3,\"851\":1,\"855\":1,\"856\":1,\"857\":1,\"860\":1,\"864\":1,\"866\":1,\"867\":7,\"894\":2,\"895\":2,\"903\":3,\"919\":5,\"920\":1,\"921\":1,\"924\":1,\"953\":1,\"972\":1,\"993\":1,\"1026\":5,\"1108\":1,\"1109\":1,\"1118\":1,\"1131\":1,\"1132\":2}}],[\"triangle\",{\"1\":{\"441\":2}}],[\"trimtosize\",{\"1\":{\"964\":1}}],[\"trim>\",{\"1\":{\"268\":1}}],[\"trim标签可以帮助我们动态的去增加指定的字符\",{\"1\":{\"268\":1}}],[\"trim\",{\"0\":{\"268\":1},\"1\":{\"127\":2,\"739\":2}}],[\"traversetwodarray2\",{\"1\":{\"440\":1}}],[\"traverse\",{\"1\":{\"440\":1}}],[\"transient修饰不想被序列化的成员变量\",{\"1\":{\"824\":2}}],[\"transient\",{\"1\":{\"312\":1,\"722\":1,\"824\":1}}],[\"transition\",{\"1\":{\"29\":3}}],[\"transaction\",{\"1\":{\"208\":1,\"209\":1,\"212\":3}}],[\"transfer\",{\"1\":{\"111\":1,\"209\":1,\"744\":1,\"1118\":2}}],[\"try代码块如果有return\",{\"1\":{\"760\":1}}],[\"try\",{\"0\":{\"751\":1},\"1\":{\"127\":4,\"203\":3,\"209\":1,\"213\":3,\"214\":1,\"234\":1,\"244\":1,\"312\":1,\"752\":4,\"754\":2,\"760\":2,\"764\":1,\"789\":9,\"825\":2,\"832\":1,\"839\":2,\"840\":1,\"842\":2,\"844\":4,\"851\":1,\"855\":1,\"856\":2,\"857\":2,\"859\":2,\"860\":2,\"864\":2,\"867\":4,\"870\":2,\"871\":2,\"872\":6,\"895\":2,\"903\":1,\"923\":1,\"924\":1,\"942\":1}}],[\"terminated\",{\"1\":{\"847\":1}}],[\"ternary\",{\"1\":{\"349\":1}}],[\"temperature\",{\"1\":{\"1026\":1}}],[\"temp的值会逐渐变小\",{\"1\":{\"442\":1}}],[\"temp\",{\"1\":{\"419\":4,\"426\":3,\"442\":4,\"730\":4,\"739\":2}}],[\"teccours\",{\"1\":{\"282\":2,\"283\":2}}],[\"teccourses\",{\"1\":{\"282\":2,\"283\":2}}],[\"teccourse\",{\"1\":{\"281\":1,\"282\":2,\"283\":2}}],[\"tecstudentmapper\",{\"1\":{\"282\":1}}],[\"tecstudent\",{\"1\":{\"282\":2,\"283\":1}}],[\"tecstu\",{\"1\":{\"281\":1}}],[\"tec\",{\"1\":{\"184\":6,\"281\":24,\"282\":3,\"283\":3}}],[\"teach\",{\"1\":{\"463\":3,\"465\":5,\"588\":3}}],[\"teachers\",{\"1\":{\"1019\":1}}],[\"teacherclazz\",{\"1\":{\"663\":2}}],[\"teacher等继承它是没问题的\",{\"1\":{\"594\":1}}],[\"teacher就是person\",{\"1\":{\"523\":1}}],[\"teacher3\",{\"1\":{\"463\":4}}],[\"teacher2\",{\"1\":{\"463\":4}}],[\"teachername\",{\"1\":{\"153\":1}}],[\"teacher\",{\"1\":{\"149\":1,\"170\":1,\"463\":10,\"465\":9,\"502\":1,\"538\":3,\"606\":3,\"663\":2,\"1019\":3}}],[\"teacherinfo\",{\"1\":{\"149\":1}}],[\"team\",{\"0\":{\"0\":1}}],[\"test53th\",{\"1\":{\"1192\":1}}],[\"test53th1\",{\"1\":{\"1192\":2}}],[\"test52th\",{\"1\":{\"134\":1,\"187\":1}}],[\"test文件夹\",{\"1\":{\"1099\":1}}],[\"testwithstream\",{\"1\":{\"1029\":1}}],[\"testpayment\",{\"1\":{\"720\":2}}],[\"test方法需要一个枚举类型作为参数\",{\"1\":{\"719\":1}}],[\"test方法的调用结果是onepackage下student类的方法执行结果\",{\"1\":{\"502\":1}}],[\"testd\",{\"1\":{\"655\":3}}],[\"testdemo\",{\"1\":{\"316\":1}}],[\"testdeletebyid\",{\"1\":{\"238\":1,\"239\":1}}],[\"testb\",{\"1\":{\"655\":3}}],[\"testc\",{\"1\":{\"655\":4}}],[\"testa\",{\"1\":{\"655\":4}}],[\"testfather\",{\"1\":{\"588\":3}}],[\"testson\",{\"1\":{\"588\":3}}],[\"teststaticdemo\",{\"1\":{\"498\":6}}],[\"test是那个同名的成员方法\",{\"1\":{\"555\":1}}],[\"testtrim\",{\"1\":{\"269\":1}}],[\"testupdatephone\",{\"1\":{\"268\":1}}],[\"test=\",{\"1\":{\"264\":2,\"265\":7,\"266\":2,\"268\":3,\"269\":3}}],[\"testquerytwolevelcache\",{\"1\":{\"287\":1}}],[\"testquerybytwosqlsession\",{\"1\":{\"285\":1}}],[\"testquerybytwomapper1\",{\"1\":{\"285\":1}}],[\"testquerybyonemapper1\",{\"1\":{\"285\":1}}],[\"testquerybyidlist\",{\"1\":{\"272\":1}}],[\"testquerybyid\",{\"1\":{\"240\":1}}],[\"testqueryone2one2\",{\"1\":{\"277\":1}}],[\"testqueryone2one\",{\"1\":{\"276\":1}}],[\"testqueryallcourses2\",{\"1\":{\"283\":1}}],[\"testqueryallcourses1\",{\"1\":{\"282\":1}}],[\"testqueryalluserlist\",{\"1\":{\"260\":1}}],[\"testqueryaccountbyid\",{\"1\":{\"259\":1}}],[\"testinsertphone2\",{\"1\":{\"274\":1}}],[\"testinsertphone\",{\"1\":{\"273\":1}}],[\"testinsertarrayparam\",{\"1\":{\"271\":1}}],[\"testinsertarray\",{\"1\":{\"271\":2}}],[\"testinsert\",{\"1\":{\"237\":1}}],[\"test7\",{\"1\":{\"214\":1,\"215\":2,\"216\":1,\"217\":1}}],[\"test\",{\"1\":{\"148\":2,\"153\":2,\"157\":1,\"158\":3,\"169\":7,\"170\":3,\"171\":5,\"187\":1,\"212\":4,\"234\":2,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"244\":1,\"248\":1,\"259\":1,\"260\":1,\"268\":1,\"269\":1,\"271\":3,\"272\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"285\":3,\"287\":1,\"316\":1,\"389\":7,\"423\":3,\"481\":1,\"483\":3,\"509\":1,\"538\":1,\"555\":3,\"560\":2,\"573\":1,\"588\":4,\"598\":2,\"652\":2,\"654\":5,\"718\":4,\"719\":2,\"743\":1,\"744\":1,\"769\":2,\"771\":3,\"924\":3,\"953\":6,\"955\":1,\"1192\":2}}],[\"test3\",{\"1\":{\"139\":1,\"157\":1}}],[\"test333\",{\"1\":{\"136\":1,\"139\":2}}],[\"test333里面的\",{\"1\":{\"136\":1}}],[\"test2\",{\"1\":{\"137\":2,\"157\":1,\"280\":1,\"598\":2}}],[\"test1的数据库\",{\"1\":{\"157\":1}}],[\"test1\",{\"1\":{\"137\":2,\"139\":1,\"153\":1,\"157\":3,\"158\":7,\"177\":1,\"204\":1,\"234\":1,\"235\":1,\"279\":1}}],[\"test4\",{\"1\":{\"136\":1}}],[\"text\",{\"1\":{\"14\":1,\"111\":2,\"115\":1,\"116\":1,\"121\":1,\"127\":2,\"153\":1,\"158\":1,\"844\":1,\"884\":2,\"1104\":3,\"1110\":1,\"1112\":2,\"1120\":2,\"1127\":1,\"1130\":1,\"1131\":2,\"1132\":1,\"1138\":1,\"1140\":1,\"1150\":1,\"1159\":3,\"1202\":1}}],[\"tex\",{\"0\":{\"75\":1},\"1\":{\"11\":1}}],[\"和组员一起开发的时候\",{\"1\":{\"1201\":1}}],[\"和我们在写论文的时候\",{\"1\":{\"1195\":1}}],[\"和我们自己写的\",{\"1\":{\"961\":1}}],[\"和value属性的功能是一致的\",{\"1\":{\"1086\":1}}],[\"和hashmap在jdk1\",{\"1\":{\"1020\":1}}],[\"和默认加载因子\",{\"1\":{\"1017\":1}}],[\"和高位\",{\"1\":{\"1014\":1}}],[\"和加载因子\",{\"1\":{\"988\":1,\"1022\":1}}],[\"和pop\",{\"1\":{\"965\":1}}],[\"和poll\",{\"1\":{\"965\":1}}],[\"和ls\",{\"1\":{\"956\":1}}],[\"和long比较像\",{\"1\":{\"153\":1}}],[\"和修改之后的目标文件在同一目录的时候\",{\"1\":{\"772\":1}}],[\"和try\",{\"1\":{\"760\":1}}],[\"和异常分支\",{\"1\":{\"754\":1}}],[\"和new对象的方式是平行的关系\",{\"1\":{\"697\":1}}],[\"和原先对象成员一致的新对象\",{\"1\":{\"693\":1}}],[\"和所在的方法共用同一个作用域\",{\"1\":{\"656\":1}}],[\"和在普通类中访问其它类成员别无二致\",{\"1\":{\"618\":1}}],[\"和在方法体中返回具体值\",{\"1\":{\"604\":1}}],[\"和运动员\",{\"1\":{\"601\":1}}],[\"和抽象类中定义抽象方法没有区别\",{\"1\":{\"596\":1}}],[\"和之前不同了\",{\"1\":{\"595\":1}}],[\"和普通成员一样\",{\"1\":{\"620\":1}}],[\"和普通成员变量一样\",{\"1\":{\"474\":1}}],[\"和普通类仍然是一样的\",{\"1\":{\"592\":1}}],[\"和普通类是一样的\",{\"1\":{\"592\":1}}],[\"和final修饰成员变量一样\",{\"1\":{\"571\":1}}],[\"和引用没有任何关系\",{\"1\":{\"559\":1}}],[\"和前面访问成员变量一样\",{\"1\":{\"556\":1}}],[\"和父类的父类\",{\"1\":{\"551\":1,\"557\":1}}],[\"和对数据的操作\",{\"1\":{\"515\":1}}],[\"和后面学习的super关键字\",{\"1\":{\"496\":1}}],[\"和的执行顺序\",{\"1\":{\"494\":1}}],[\"和赋值顺序要遵循的原则\",{\"1\":{\"487\":1}}],[\"和一般方法类似\",{\"1\":{\"464\":1}}],[\"和一维数组一样\",{\"1\":{\"432\":1}}],[\"和一维数组没有本质区别\",{\"1\":{\"431\":1}}],[\"和速度\",{\"1\":{\"459\":1}}],[\"和数组比较像\",{\"1\":{\"950\":1}}],[\"和数组\",{\"1\":{\"740\":1}}],[\"和数组一样\",{\"1\":{\"457\":1}}],[\"和数组直接输出数组名是一样\",{\"1\":{\"453\":1}}],[\"和数组的声明写在一起\",{\"1\":{\"397\":1,\"398\":1}}],[\"和定义类中结构两部分\",{\"1\":{\"448\":1}}],[\"和二维数组比较相关的\",{\"1\":{\"431\":1}}],[\"和程序的执行联系更紧密的是\",{\"1\":{\"403\":1}}],[\"和jvm栈类似\",{\"1\":{\"403\":1}}],[\"和外层没有关系\",{\"1\":{\"376\":1}}],[\"和if一样也可以省略大括号\",{\"1\":{\"362\":1}}],[\"和多分支if结构中的最后一个else不同的是\",{\"1\":{\"359\":1}}],[\"和多分支if结构中的最后一个else一样\",{\"1\":{\"359\":1}}],[\"和多分支if结构不同的是\",{\"1\":{\"359\":1}}],[\"和斜杠\",{\"1\":{\"356\":1}}],[\"和>>>\",{\"1\":{\"348\":1}}],[\"和字符类型类型\",{\"1\":{\"325\":1}}],[\"和假\",{\"1\":{\"325\":2}}],[\"和基于该数据集合的一组合法操作\",{\"1\":{\"320\":1,\"455\":1}}],[\"和说明文字的中间应该加上一个空格\",{\"1\":{\"318\":1}}],[\"和这个是等价的\",{\"1\":{\"269\":1}}],[\"和where一起使用\",{\"1\":{\"266\":1}}],[\"和bean中的对象\",{\"1\":{\"261\":1}}],[\"和`查询结果的列名`去一一映射\",{\"1\":{\"259\":1}}],[\"和$\",{\"1\":{\"255\":1}}],[\"和$的区别\",{\"0\":{\"255\":1}}],[\"和按照位置传值\",{\"1\":{\"254\":1}}],[\"和money\",{\"1\":{\"252\":1}}],[\"和动态代理分别实现用户注册登录需要的接口\",{\"1\":{\"240\":1}}],[\"和动画\",{\"1\":{\"19\":1}}],[\"和studentmapper\",{\"1\":{\"235\":1}}],[\"和全外连接\",{\"1\":{\"183\":1}}],[\"和分组一起使用\",{\"1\":{\"168\":1}}],[\"和delete必须要用\",{\"1\":{\"162\":1}}],[\"和校对规则\",{\"1\":{\"149\":1}}],[\"和网络数据库\",{\"1\":{\"142\":1}}],[\"和excel类似\",{\"1\":{\"141\":1}}],[\"和产品经理的预期不一样\",{\"1\":{\"120\":1}}],[\"和正文都是可选的\",{\"1\":{\"119\":1}}],[\"和性别\",{\"1\":{\"110\":1}}],[\"和\",{\"1\":{\"0\":1,\"52\":1,\"80\":1,\"168\":1,\"192\":1,\"204\":1,\"235\":1,\"244\":1,\"252\":1,\"261\":1,\"315\":2,\"344\":1,\"346\":1,\"347\":1,\"348\":2,\"360\":1,\"642\":1,\"674\":3,\"740\":1,\"744\":2,\"771\":1,\"906\":1,\"923\":1,\"944\":1,\"960\":1,\"1091\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
