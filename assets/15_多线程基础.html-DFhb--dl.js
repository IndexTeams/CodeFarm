const n=JSON.parse('{"key":"v-09cfa0c4","path":"/java/java-se/15_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html","title":"15. 多线程基础","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"15. 多线程基础","description":"Java的基本-多线程基础","author":"景天","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/java-se/15_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Index Team"}],["meta",{"property":"og:title","content":"15. 多线程基础"}],["meta",{"property":"og:description","content":"Java的基本-多线程基础"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-16T02:17:19.000Z"}],["meta",{"property":"article:author","content":"景天"}],["meta",{"property":"article:modified_time","content":"2024-02-16T02:17:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15. 多线程基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-16T02:17:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"景天\\"}]}"]]},"headers":[{"level":2,"title":"进程(process)与线程(thread)","slug":"进程-process-与线程-thread","link":"#进程-process-与线程-thread","children":[]},{"level":2,"title":"串行(serial),并行(parallel)与并发(concurrency)","slug":"串行-serial-并行-parallel-与并发-concurrency","link":"#串行-serial-并行-parallel-与并发-concurrency","children":[]},{"level":2,"title":"同步(synchronization)与异步(asynchronization)","slug":"同步-synchronization-与异步-asynchronization","link":"#同步-synchronization-与异步-asynchronization","children":[]},{"level":2,"title":"java命令+主类类名运行原理","slug":"java命令-主类类名运行原理","link":"#java命令-主类类名运行原理","children":[]},{"level":2,"title":"jvm是单线程还是多线程的","slug":"jvm是单线程还是多线程的","link":"#jvm是单线程还是多线程的","children":[]},{"level":2,"title":"文档示例","slug":"文档示例","link":"#文档示例","children":[]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"什么是线程调度","slug":"什么是线程调度","link":"#什么是线程调度","children":[]},{"level":2,"title":"调度方式的分类","slug":"调度方式的分类","link":"#调度方式的分类","children":[]},{"level":2,"title":"java中采用哪种调度方式","slug":"java中采用哪种调度方式","link":"#java中采用哪种调度方式","children":[]},{"level":2,"title":"操作系统优先级","slug":"操作系统优先级","link":"#操作系统优先级","children":[]},{"level":2,"title":"java中优先级","slug":"java中优先级","link":"#java中优先级","children":[]},{"level":2,"title":"线程休眠sleep","slug":"线程休眠sleep","link":"#线程休眠sleep","children":[]},{"level":2,"title":"线程合并join","slug":"线程合并join","link":"#线程合并join","children":[]},{"level":2,"title":"线程礼让yield","slug":"线程礼让yield","link":"#线程礼让yield","children":[]},{"level":2,"title":"守护线程setDaemon","slug":"守护线程setdaemon","link":"#守护线程setdaemon","children":[]},{"level":2,"title":"线程中断stop(已过时,了解)","slug":"线程中断stop-已过时-了解","link":"#线程中断stop-已过时-了解","children":[]},{"level":2,"title":"安全中断线程","slug":"安全中断线程","link":"#安全中断线程","children":[]},{"level":2,"title":"线程的几种状态","slug":"线程的几种状态","link":"#线程的几种状态","children":[{"level":3,"title":"理论层面的状态","slug":"理论层面的状态","link":"#理论层面的状态","children":[]},{"level":3,"title":"代码层面的状态","slug":"代码层面的状态","link":"#代码层面的状态","children":[]}]},{"level":2,"title":"线程状态的转换","slug":"线程状态的转换","link":"#线程状态的转换","children":[]},{"level":2,"title":"文档示例","slug":"文档示例-1","link":"#文档示例-1","children":[]},{"level":2,"title":"步骤","slug":"步骤-1","link":"#步骤-1","children":[]},{"level":2,"title":"为什么Runnable中的run方法会运行在子线程中","slug":"为什么runnable中的run方法会运行在子线程中","link":"#为什么runnable中的run方法会运行在子线程中","children":[]},{"level":2,"title":"造成的现象","slug":"造成的现象","link":"#造成的现象","children":[]},{"level":2,"title":"产生原因","slug":"产生原因","link":"#产生原因","children":[]},{"level":2,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[{"level":3,"title":"同步代码块","slug":"同步代码块","link":"#同步代码块","children":[]},{"level":3,"title":"同步方法","slug":"同步方法","link":"#同步方法","children":[]},{"level":3,"title":"静态同步方法","slug":"静态同步方法","link":"#静态同步方法","children":[]},{"level":3,"title":"synchronized的细节","slug":"synchronized的细节","link":"#synchronized的细节","children":[]}]},{"level":2,"title":"Lock","slug":"lock","link":"#lock","children":[{"level":3,"title":"ReentrantLock可重入锁","slug":"reentrantlock可重入锁","link":"#reentrantlock可重入锁","children":[]}]},{"level":2,"title":"什么是死锁","slug":"什么是死锁","link":"#什么是死锁","children":[]},{"level":2,"title":"死锁产生的场景","slug":"死锁产生的场景","link":"#死锁产生的场景","children":[]},{"level":2,"title":"怎么解决死锁","slug":"怎么解决死锁","link":"#怎么解决死锁","children":[]},{"level":2,"title":"wait与notify机制","slug":"wait与notify机制","link":"#wait与notify机制","children":[]},{"level":2,"title":"wait()","slug":"wait","link":"#wait","children":[{"level":3,"title":"执行条件与特点","slug":"执行条件与特点","link":"#执行条件与特点","children":[]},{"level":3,"title":"验证wait释放锁","slug":"验证wait释放锁","link":"#验证wait释放锁","children":[]},{"level":3,"title":"wait与notify的基本使用","slug":"wait与notify的基本使用","link":"#wait与notify的基本使用","children":[]},{"level":3,"title":"sleep VS wait","slug":"sleep-vs-wait","link":"#sleep-vs-wait","children":[]}]},{"level":2,"title":"notify()","slug":"notify","link":"#notify","children":[]},{"level":2,"title":"notifyAll()","slug":"notifyall","link":"#notifyall","children":[]},{"level":2,"title":"为什么wait,notify,notifyAll方法不定义在Thread类中?","slug":"为什么wait-notify-notifyall方法不定义在thread类中","link":"#为什么wait-notify-notifyall方法不定义在thread类中","children":[]},{"level":2,"title":"理论层面","slug":"理论层面","link":"#理论层面","children":[]},{"level":2,"title":"代码层面","slug":"代码层面","link":"#代码层面","children":[]},{"level":2,"title":"线程池","slug":"线程池","link":"#线程池","children":[{"level":3,"title":"3种线程池","slug":"_3种线程池","link":"#_3种线程池","children":[]},{"level":3,"title":"多线程的实现方式三:实现Callable接口","slug":"多线程的实现方式三-实现callable接口","link":"#多线程的实现方式三-实现callable接口","children":[]}]},{"level":2,"title":"定时器与定时任务","slug":"定时器与定时任务","link":"#定时器与定时任务","children":[{"level":3,"title":"定时器Timer","slug":"定时器timer","link":"#定时器timer","children":[]},{"level":3,"title":"定时任务TimerTask","slug":"定时任务timertask","link":"#定时任务timertask","children":[]}]}],"git":{"createdTime":1708049839000,"updatedTime":1708049839000,"contributors":[{"name":"LSauce","email":"ls_satan@qq.com","commits":1}]},"readingTime":{"minutes":40.46,"words":12138},"filePathRelative":"java/java-se/15_多线程基础.md","localizedDate":"2024年2月16日","excerpt":"<p>学习目标:</p>\\n<ul>\\n<li>除了标记了解的, 其余的都掌握</li>\\n</ul>\\n<h1> 引例:单线程不能满足\\"同时\\"的需求</h1>\\n<p>假如我要实现如下功能\\n程序不停地在屏幕上输出一句问候的语句(比如“你好”)\\n“同时”，当我通过键盘输入固定输入的时候，程序停止向屏幕输出问候的语句(比如说输入gun)</p>\\n<p>单线程</p>\\n<p>无法做到\\"同时\\"发生</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> _19thread01<span class=\\"token punctuation\\">.</span>com<span class=\\"token punctuation\\">.</span>cskaoyan<span class=\\"token punctuation\\">.</span>_01introduction<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Scanner</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TimeUnit</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@description</span>:\\n * <span class=\\"token keyword\\">@author</span>: 景天\\n * <span class=\\"token keyword\\">@date</span>: 2022/10/19 9:11\\n **/</span>\\n<span class=\\"token comment\\">/*\\n程序不停地在屏幕上输出一句问候的语句(比如“你好”)  ----&gt; sayHello()\\n“同时”，当我通过键盘输入固定输入的时候，          ---&gt;waitToStop()\\n程序停止向屏幕输出问候的语句(比如说输入gun)\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Demo</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">boolean</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"main before\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hello before\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hello after\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"wait before\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">waitToStop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"wait after\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"main after\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">waitToStop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Scanner</span> scanner <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Scanner</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>in<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 多次输入</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> scanner<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nextLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"gun\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                flag <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"你好\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 让程序暂停执行3秒</span>\\n                <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
